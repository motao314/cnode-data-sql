[{"id":1,"originId":"607fe6404d20cb5d9b68d9ee","articleId":2,"userId":2,"content":"啥时候能有深圳的？","createdAt":1618994752956},{"id":2,"originId":"6086b1f64d20cb30be68ec3c","articleId":2,"userId":3,"content":"哇，我就在武汉光谷金融港上班，好想参加呀","createdAt":1619440118308},{"id":3,"originId":"608bb24b4d20cb195b68fa23","articleId":2,"userId":4,"content":"。。","createdAt":1619767883916},{"id":4,"originId":"609125ef4d20cb7087690227","articleId":2,"userId":4,"content":"123","createdAt":1620125167116},{"id":5,"originId":"609394d54d20cbc6076906b0","articleId":2,"userId":5,"content":"欢迎~~","createdAt":1620284629282},{"id":6,"originId":"6094d3584d20cb5529690af8","articleId":2,"userId":4,"content":"heollo","createdAt":1620366168049},{"id":7,"originId":"6094e3994d20cb530e690bbf","articleId":2,"userId":6,"content":"[@Mr-IroFist](/user/Mr-IroFist) hi","createdAt":1620370329933},{"id":8,"originId":"609627534d20cb3e356912b1","articleId":2,"userId":1,"content":"[@darrenliuwei](/user/darrenliuwei) 报名开始啦，欢迎报名。","createdAt":1620453203070},{"id":9,"originId":"6096275f4d20cb318c6912b6","articleId":2,"userId":1,"content":"[@supperchong](/user/supperchong) 报名开始啦，欢迎报名。","createdAt":1620453215357},{"id":10,"originId":"6097ba344d20cb583b691881","articleId":2,"userId":7,"content":"123","createdAt":1620556340092},{"id":11,"originId":"6097ba784d20cb5dd7691883","articleId":2,"userId":7,"content":"1121212","createdAt":1620556408063},{"id":12,"originId":"6097bad64d20cb29ba691885","articleId":2,"userId":7,"content":"哈哈哈","createdAt":1620556502129},{"id":13,"originId":"6097bc544d20cb777e69188b","articleId":2,"userId":8,"content":"哈哈哈哈","createdAt":1620556884803},{"id":14,"originId":"609800834d20cb59c9691a2a","articleId":2,"userId":9,"content":"[@Mrr-cxh](/user/Mrr-cxh) ？？？","createdAt":1620574339820},{"id":15,"originId":"5fdb4a8a0f99cbc8325e341e","articleId":3,"userId":11,"content":"赞啊，竟然回来了","createdAt":1608206986986},{"id":16,"originId":"5fdb50d60f99cb220b5e348d","articleId":3,"userId":12,"content":"不容易啊，终于复活","createdAt":1608208598101},{"id":17,"originId":"5fdb5b290f99cb0e9b5e3491","articleId":3,"userId":13,"content":"赞👍🏻\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1608211241291},{"id":18,"originId":"5fdb5c780f99cbf9e45e3496","articleId":3,"userId":14,"content":"👏  ","createdAt":1608211576341},{"id":19,"originId":"5fdb602f0f99cb620f5e34a8","articleId":3,"userId":15,"content":"👍","createdAt":1608212527475},{"id":20,"originId":"5fdb679b0f99cb18e65e34ce","articleId":3,"userId":16,"content":"赞","createdAt":1608214427280},{"id":21,"originId":"5fdb687a0f99cb4a195e34da","articleId":3,"userId":17,"content":"👏","createdAt":1608214650725},{"id":22,"originId":"5fdb69a40f99cb1b535e34ed","articleId":3,"userId":18,"content":"赞","createdAt":1608214948385},{"id":23,"originId":"5fdc0c6d0f99cb55d75e3524","articleId":3,"userId":19,"content":"起飞~~~~~","createdAt":1608256621361},{"id":24,"originId":"5fdc13e80f99cbc9f55e3563","articleId":3,"userId":20,"content":"回家了","createdAt":1608258536434},{"id":25,"originId":"5fdc14e70f99cbe8925e356d","articleId":3,"userId":21,"content":"👍👍👍话说现在接入了审核系统么","createdAt":1608258791641},{"id":26,"originId":"5fdc1e430f99cb04d35e35ad","articleId":3,"userId":22,"content":"恭喜恭喜，终于回来了","createdAt":1608261187214},{"id":27,"originId":"5fdc1ea30f99cbfafa5e35b4","articleId":3,"userId":23,"content":"随手输入网址试试，居然真的打开了 👍","createdAt":1608261283425},{"id":28,"originId":"5fdc1f6a0f99cb1d8e5e35c3","articleId":3,"userId":24,"content":"终于回来了 ","createdAt":1608261482503},{"id":29,"originId":"5fdc1ff20f99cbd60b5e35d8","articleId":3,"userId":25,"content":"富強、民主、文明、和諧\r\n自由、平等、公正、法治\r\n愛國、敬業、誠信、友善","createdAt":1608261618115},{"id":30,"originId":"5fdc2a120f99cb62c05e360b","articleId":3,"userId":10,"content":"[@zy445566](/user/zy445566) \r\n\r\n没有，可能也不需要了，服务器已经不在国内，但是遵纪守法还是必须的！","createdAt":1608264210249},{"id":31,"originId":"5fdc3d310f99cb0dbc5e362f","articleId":3,"userId":26,"content":"👏👏","createdAt":1608269105616},{"id":32,"originId":"5fdc43190f99cb77265e3647","articleId":3,"userId":27,"content":"回来了就好","createdAt":1608270617980},{"id":33,"originId":"5fdc59ce0f99cb514e5e36de","articleId":3,"userId":28,"content":"发现可以访问了 ","createdAt":1608276430960},{"id":34,"originId":"5fdc601c0f99cb57085e36f1","articleId":3,"userId":29,"content":"好耶","createdAt":1608278044651},{"id":35,"originId":"5fdc61110f99cb4fb45e370d","articleId":3,"userId":30,"content":"恭喜复活","createdAt":1608278289268},{"id":36,"originId":"5fdc6aab0f99cb57fc5e3726","articleId":3,"userId":31,"content":"感觉访问变快了啊 ","createdAt":1608280747969},{"id":37,"originId":"5fdc6ae30f99cbfd1e5e372c","articleId":3,"userId":32,"content":"非常棒👍","createdAt":1608280803298},{"id":38,"originId":"5fdc77430f99cb14365e378a","articleId":3,"userId":33,"content":"终于复活了","createdAt":1608283971570},{"id":39,"originId":"5fdcab620f99cb67d65e383d","articleId":3,"userId":34,"content":"👍","createdAt":1608297314095},{"id":40,"originId":"5fdd75020f99cb36a25e3889","articleId":3,"userId":35,"content":"![ac2c48dcc9.jpg](//static.cnodejs.org/Fo7pEtjy_z3hbNeemrr-X8WaqglT)\r\n谨记。","createdAt":1608348930556},{"id":41,"originId":"5fdd7cd00f99cb064f5e38a2","articleId":3,"userId":3,"content":"[@thonatos](/user/thonatos) 买的哪里的服务器呀？感觉速度比以前更快了。","createdAt":1608350928207},{"id":42,"originId":"5fe009d30f99cbf8125e3a6c","articleId":3,"userId":36,"content":"👍","createdAt":1608518099853},{"id":43,"originId":"5fe0119c0f99cb3df55e3a97","articleId":3,"userId":37,"content":"回来了回来了","createdAt":1608520092388},{"id":44,"originId":"5fe013140f99cbdead5e3aa0","articleId":3,"userId":38,"content":"谢天谢地","createdAt":1608520468547},{"id":45,"originId":"5fe03e1d98427e9de86a9854","articleId":3,"userId":10,"content":"[@darrenliuwei](/user/darrenliuwei) 香港，快可能是因为使用按流量计费吧","createdAt":1608531485906},{"id":46,"originId":"5fe042e298427e37746a989e","articleId":3,"userId":12,"content":"辛苦管理员人肉审核。","createdAt":1608532706998},{"id":47,"originId":"5fe052ad98427e49906a9937","articleId":3,"userId":39,"content":"重返家园，赞！","createdAt":1608536749905},{"id":48,"originId":"5fe07e2d98427e5d956a9a53","articleId":3,"userId":40,"content":"不容易呀，重返家园","createdAt":1608547885031},{"id":49,"originId":"5fe1621098427e06036a9b79","articleId":3,"userId":41,"content":"终于回来啦，赞！","createdAt":1608606224719},{"id":50,"originId":"5fe1661298427e87ad6a9b8c","articleId":3,"userId":42,"content":"`nice`","createdAt":1608607250769},{"id":51,"originId":"5fe1676298427e7ed36a9b9f","articleId":3,"userId":43,"content":"可算是回来，且用且珍惜啊！","createdAt":1608607586836},{"id":52,"originId":"5fe19fdd98427e26de6a9c9b","articleId":3,"userId":44,"content":"终于活了啊，不容易","createdAt":1608622045444},{"id":53,"originId":"5fe1ac2098427e7f816a9d10","articleId":3,"userId":45,"content":"DigitalOcean才知道不就诶，没用过测过。不过应该比国内的好用^_^","createdAt":1608625184824},{"id":54,"originId":"5fe1b2d298427e111f6a9d5e","articleId":3,"userId":46,"content":"不容易啊，终于复活  -_-","createdAt":1608626898911},{"id":55,"originId":"5fe1ce6f98427e08566a9e15","articleId":3,"userId":47,"content":"爷爷，你等的cNode社区终于可以访问了！！！","createdAt":1608633967728},{"id":56,"originId":"5fe248a798427e9eea6a9efa","articleId":3,"userId":48,"content":"两个多月，终于回来了\r\n","createdAt":1608665255116},{"id":57,"originId":"5fe42a9b98427e118f6aa20d","articleId":3,"userId":49,"content":"哈哈，终于回来了。github帐号换了名，终于也修复这个bug了","createdAt":1608788635336},{"id":58,"originId":"5fe4456798427e31366aa2a2","articleId":3,"userId":50,"content":"报个道吧","createdAt":1608795495225},{"id":59,"originId":"5fe5a76098427e83bd6aa6a6","articleId":3,"userId":51,"content":"恭喜","createdAt":1608886112218},{"id":60,"originId":"5fe9a9cc5393a51b23545b17","articleId":3,"userId":52,"content":"恭喜\r\n","createdAt":1609148876975},{"id":61,"originId":"5febe4d95393a5f503545edf","articleId":3,"userId":53,"content":"恭喜复活~啦啦啦","createdAt":1609295065255},{"id":62,"originId":"5febe9735393a58d4f545f02","articleId":3,"userId":54,"content":"哈哈 恭喜 复活！！ 就是图片挂了","createdAt":1609296243601},{"id":63,"originId":"5fec520b5393a5285d5460aa","articleId":3,"userId":55,"content":"终于回来了，喜大普奔","createdAt":1609323019131},{"id":64,"originId":"5ff039c65393a5fc275463f2","articleId":3,"userId":56,"content":"hello","createdAt":1609578950728},{"id":65,"originId":"5ff5a7605393a5e979546f77","articleId":3,"userId":57,"content":"恭喜","createdAt":1609934688172},{"id":66,"originId":"5ff67dd4a2a2136665f6d2b7","articleId":3,"userId":58,"content":"重返家园","createdAt":1609989588162},{"id":67,"originId":"5ff7b95ba2a2130421f6d5b4","articleId":3,"userId":59,"content":"恭喜恭喜","createdAt":1610070363204},{"id":68,"originId":"5ff8043ca2a213569ff6d6cd","articleId":3,"userId":60,"content":"虽然平时访问CNode社区不多，但是能再度访问，还是感觉挺好的！欢迎回来~","createdAt":1610089532690},{"id":69,"originId":"5ffbcc96a2a2133ca0f6db04","articleId":3,"userId":61,"content":"LOVE","createdAt":1610337430391},{"id":70,"originId":"5fff9e91a2a2130fdaf6e353","articleId":3,"userId":62,"content":"赞，终于回来了","createdAt":1610587793186},{"id":71,"originId":"600134dda2a213787ef6e6e0","articleId":3,"userId":63,"content":"这里各个都是人才说话又好听，有好玩。我超喜欢这里","createdAt":1610691805017},{"id":72,"originId":"600155975d04ac71e42170d9","articleId":3,"userId":64,"content":"随手一开，居然打开了 ：）","createdAt":1610700183346},{"id":73,"originId":"600924b35d04ac1c39217ce3","articleId":3,"userId":65,"content":"666","createdAt":1611211955736},{"id":74,"originId":"600e62c85d04ac840f21856d","articleId":3,"userId":66,"content":"来了，老铁们。","createdAt":1611555528990},{"id":75,"originId":"600e639d5d04ac187c21857b","articleId":3,"userId":66,"content":"来了。","createdAt":1611555741738},{"id":76,"originId":"600e68ba5d04ac680a218595","articleId":3,"userId":66,"content":"来咯。","createdAt":1611557050270},{"id":77,"originId":"600e69295d04ac68f8218597","articleId":3,"userId":66,"content":"又来咯。","createdAt":1611557161881},{"id":78,"originId":"600e6e315d04ac267e2185ad","articleId":3,"userId":66,"content":"好啊好啊。","createdAt":1611558449978},{"id":79,"originId":"600fbdae5d04ac061e21881a","articleId":3,"userId":66,"content":"[@hyj1991](/user/hyj1991) 试试。","createdAt":1611644334748},{"id":80,"originId":"600fc2175d04acfd6821883e","articleId":3,"userId":66,"content":"[@hyj1991](/user/hyj1991) 再试试。","createdAt":1611645463368},{"id":81,"originId":"600fc2345d04ac841821884b","articleId":3,"userId":66,"content":"[@244396012](/user/244396012) 试试。","createdAt":1611645492545},{"id":82,"originId":"6012096903d79759bf66da68","articleId":3,"userId":67,"content":"2323","createdAt":1611794793919},{"id":83,"originId":"60124c6803d7973caa66db7e","articleId":3,"userId":68,"content":"\"<p>测试回复</p>\"","createdAt":1611811944053},{"id":84,"originId":"60124d4f03d797cc5d66db83","articleId":3,"userId":68,"content":"<p>测试回复</p><p>这是一条测试内容<span style=\"background-color: transparent; text-align: center;\">😅</span></p>","createdAt":1611812175158},{"id":85,"originId":"60124d7a03d797599566db86","articleId":3,"userId":68,"content":"<p>测试回复</p>","createdAt":1611812218190},{"id":86,"originId":"60124d9b03d7979ebd66db89","articleId":3,"userId":68,"content":"<div><p>测试回复</p><p>这是一条测试内容<span style=\"background-color: transparent; text-align: center;\">😅</span></p></div>","createdAt":1611812251309},{"id":87,"originId":"60124f0503d7973d6966db8c","articleId":3,"userId":68,"content":"测试回复","createdAt":1611812613726},{"id":88,"originId":"6012519803d7973ae766dbb3","articleId":3,"userId":68,"content":"测试内容<p>这是一条测试</p>","createdAt":1611813272582},{"id":89,"originId":"601253eb03d7977d6366dbba","articleId":3,"userId":68,"content":"测试回复接口\r\n这是一条测试内容","createdAt":1611813867545},{"id":90,"originId":"60127e0e03d79753d766dc68","articleId":3,"userId":69,"content":"# ???\n\n来自 [Vue版CNode客户端](https://reviving-pain.github.io/dist/#/cnodeCommunity/cnodejsTopics)","createdAt":1611824654758},{"id":91,"originId":"6013b9c303d797138e66de59","articleId":3,"userId":68,"content":"测试回复","createdAt":1611905475497},{"id":92,"originId":"6013bb0403d7972c6666de5f","articleId":3,"userId":68,"content":"测试接口","createdAt":1611905796333},{"id":93,"originId":"6013bb5e03d79700b566de61","articleId":3,"userId":68,"content":"来了来了","createdAt":1611905886922},{"id":94,"originId":"6013bbef03d797b80566de64","articleId":3,"userId":68,"content":"不容易啊，终于复活","createdAt":1611906031947},{"id":95,"originId":"6013bc4603d7973b4a66de66","articleId":3,"userId":68,"content":"来了来了","createdAt":1611906118099},{"id":96,"originId":"6013d45c03d7978d1866df1f","articleId":3,"userId":70,"content":"不容易啊","createdAt":1611912284376},{"id":97,"originId":"6013d46003d797025d66df23","articleId":3,"userId":70,"content":"重返家园","createdAt":1611912288809},{"id":98,"originId":"6014653003d797788566dfef","articleId":3,"userId":68,"content":"不容易啊","createdAt":1611949360380},{"id":99,"originId":"6014b2cf03d7977ee466e006","articleId":3,"userId":67,"content":"[@HobaiRiku](/user/HobaiRiku)  2323","createdAt":1611969231512},{"id":100,"originId":"60151f6103d79750ce66e0cb","articleId":3,"userId":68,"content":"来了来了","createdAt":1611997025606},{"id":101,"originId":"60151f9e03d79714dd66e0d1","articleId":3,"userId":68,"content":"[@jiyizheng](/user/jiyizheng) 来了来了","createdAt":1611997086342},{"id":102,"originId":"6015307503d7976ae266e0de","articleId":3,"userId":68,"content":"测试","createdAt":1612001397441},{"id":103,"originId":"60158b6103d79781f466e141","articleId":3,"userId":68,"content":"来了来了","createdAt":1612024673776},{"id":104,"originId":"60165ff403d7971fa966e1fd","articleId":3,"userId":67,"content":"[@hyj1991](/user/hyj1991)  2323","createdAt":1612079092731},{"id":105,"originId":"6016600903d797106566e200","articleId":3,"userId":67,"content":"[@hyj1991](/user/hyj1991)  2323","createdAt":1612079113399},{"id":106,"originId":"601bd0f303d7973c2366ee1e","articleId":3,"userId":71,"content":"2222","createdAt":1612435699466},{"id":107,"originId":"601cf61603d797833266f0a9","articleId":3,"userId":72,"content":"<p>对对对</p>\n","createdAt":1612510742850},{"id":108,"originId":"603079cd03d797a7786706b0","articleId":3,"userId":73,"content":"以为没了，👏👏","createdAt":1613789645191},{"id":109,"originId":"6030b8d003d797f7a16707c0","articleId":3,"userId":74,"content":"[@undozen](/user/undozen) good","createdAt":1613805776898},{"id":110,"originId":"60312f8f03d7972eb6670989","articleId":3,"userId":75,"content":"23333","createdAt":1613836175701},{"id":111,"originId":"6033bc664655ea38c1217972","articleId":3,"userId":76,"content":"👍","createdAt":1614003302140},{"id":112,"originId":"6037051e4655ea33ac218375","articleId":3,"userId":77,"content":"大家的精神园地","createdAt":1614218526000},{"id":113,"originId":"604824a04655ea155e21ab70","articleId":3,"userId":78,"content":"1\r\n","createdAt":1615340704488},{"id":114,"originId":"60530b5cdac54203a7e28195","articleId":3,"userId":79,"content":"<div><p>测试回复</p><p>这是一条测试内容<span style=“background-color: transparent; text-align: center;”>😅</span></p></div>","createdAt":1616055132886},{"id":115,"originId":"607151d64d20cb1a4668b2c0","articleId":3,"userId":80,"content":"牛牛牛","createdAt":1618039254274},{"id":116,"originId":"60801b424d20cb12d168dadd","articleId":3,"userId":81,"content":"好滴","createdAt":1619008322075},{"id":117,"originId":"608290d64d20cb5dd568e480","articleId":3,"userId":82,"content":"祝 社区越来越好","createdAt":1619169494843},{"id":118,"originId":"608662ca4d20cbd40368eb03","articleId":3,"userId":6,"content":"祝 社区越来越好","createdAt":1619419850454},{"id":119,"originId":"608bf6b64d20cb2d3568fafa","articleId":3,"userId":4,"content":"。。。","createdAt":1619785398348},{"id":120,"originId":"608c04cd4d20cb3fbd68fb12","articleId":3,"userId":83,"content":"社区越来越好","createdAt":1619789005637},{"id":121,"originId":"608e2ba34d20cb037168fcb9","articleId":3,"userId":84,"content":"好","createdAt":1619930019642},{"id":122,"originId":"608e70404d20cb278868fd94","articleId":3,"userId":84,"content":"太棒了","createdAt":1619947584168},{"id":123,"originId":"608e70524d20cbc91168fd96","articleId":3,"userId":84,"content":"论坛，我的超人","createdAt":1619947602252},{"id":124,"originId":"60901cc04d20cb827068ffcb","articleId":3,"userId":85,"content":"我是两天前才登记的新用户，脑补了下过去发生了什么。我想问问，聊天功能还能用吗？","createdAt":1620057280675},{"id":125,"originId":"6092883f4d20cb605b690459","articleId":3,"userId":9,"content":"[@hyj1991](/user/hyj1991) 测试以下回复评论","createdAt":1620215871874},{"id":126,"originId":"60935c484d20cb4e266905da","articleId":3,"userId":86,"content":"👏👏👏","createdAt":1620270152216},{"id":127,"originId":"6093e4a34d20cb575869095a","articleId":3,"userId":83,"content":"一定会的","createdAt":1620305059118},{"id":128,"originId":"6093e4b34d20cb4f4369095c","articleId":3,"userId":83,"content":"希望越办越好\n","createdAt":1620305075621},{"id":129,"originId":"6094db4a4d20cb9907690b55","articleId":3,"userId":87,"content":"啊啊啊","createdAt":1620368202897},{"id":130,"originId":"6094dbc24d20cbbdd9690b5e","articleId":3,"userId":8,"content":"[@Sunny-zz](/user/Sunny-zz) 啊啊","createdAt":1620368322171},{"id":131,"originId":"6094de5e4d20cbc92b690b72","articleId":3,"userId":87,"content":"啊啊\n","createdAt":1620368990094},{"id":132,"originId":"6098861c4d20cb549b691a5d","articleId":3,"userId":88,"content":"[@Sunny-zz](/user/Sunny-zz) 啊啊啊啊啊","createdAt":1620608540187},{"id":133,"originId":"601eb08f03d797506666f4de","articleId":4,"userId":72,"content":"占座\n","createdAt":1612624015922},{"id":134,"originId":"601f482503d7977d9566f55a","articleId":4,"userId":33,"content":"顶，没有微信群了吗。。。","createdAt":1612662821495},{"id":135,"originId":"601f491903d797271f66f56d","articleId":4,"userId":24,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 这次转钉钉了 哈哈","createdAt":1612663065627},{"id":136,"originId":"601f800603d797805966f5f7","articleId":4,"userId":21,"content":"哈哈，支持","createdAt":1612677126642},{"id":137,"originId":"601f828903d797d01d66f60d","articleId":4,"userId":30,"content":"好大张的图","createdAt":1612677769810},{"id":138,"originId":"6022457b03d79752f866f9d8","articleId":4,"userId":90,"content":"大赞！","createdAt":1612858747894},{"id":139,"originId":"6039ba694655eace4f218afb","articleId":4,"userId":91,"content":"又回来了","createdAt":1614396009875},{"id":140,"originId":"604186514655ea40ff219c73","articleId":4,"userId":79,"content":"是3月6号是吧","createdAt":1614906961945},{"id":141,"originId":"60430e1a4655eab451219fdb","articleId":4,"userId":79,"content":"有腾讯会议直播吗？","createdAt":1615007258284},{"id":142,"originId":"605ad790dac5424ff9e29469","articleId":4,"userId":89,"content":"[@qiutian00](/user/qiutian00) 无","createdAt":1616566160947},{"id":143,"originId":"60937fbe4d20cb9985690635","articleId":4,"userId":4,"content":"。。。。。。","createdAt":1620279230728},{"id":144,"originId":"609381524d20cb84b1690638","articleId":4,"userId":4,"content":"123","createdAt":1620279634985},{"id":145,"originId":"6093817f4d20cb3bcb69063a","articleId":4,"userId":4,"content":"1234","createdAt":1620279679932},{"id":146,"originId":"5f616570c1c67a7dd9afeb6d","articleId":8,"userId":21,"content":"沸腾了👍","createdAt":1600218480708},{"id":147,"originId":"5f616a08c1c67a7dd9afeb76","articleId":8,"userId":90,"content":" 我赌鸿蒙要凉凉～～","createdAt":1600219656956},{"id":148,"originId":"5f617131c1c67a7dd9afebd8","articleId":8,"userId":22,"content":"[@jxycbjhc](/user/jxycbjhc) 赌一包辣条吗，我跟","createdAt":1600221489771},{"id":149,"originId":"5f6177c2c1c67a7dd9afec06","articleId":8,"userId":11,"content":"这么快源码分析都来了","createdAt":1600223170994},{"id":150,"originId":"5f617f37d22a6b1d622c91f1","articleId":8,"userId":16,"content":"大佬还是快","createdAt":1600225079337},{"id":151,"originId":"5f6181f1d22a6b1d622c920d","articleId":8,"userId":90,"content":"[@justjavac](/user/justjavac) ![截屏2020-09-16 上午11.08.52.png](//static.cnodejs.org/FjOf_k7b3gE7taN8yImPxj5aVynZ) 跟吧～","createdAt":1600225777372},{"id":152,"originId":"5f61a9d5d22a6b1d622c9296","articleId":8,"userId":36,"content":"秀啊","createdAt":1600235989277},{"id":153,"originId":"5f61c048c1c67a7dd9afed26","articleId":8,"userId":22,"content":"[@jxycbjhc](/user/jxycbjhc) 跟什么啊","createdAt":1600241736630},{"id":154,"originId":"5f61c063c1c67a7dd9afed2e","articleId":8,"userId":22,"content":"[@jxycbjhc](/user/jxycbjhc) 跟两包辣条","createdAt":1600241763326},{"id":155,"originId":"606bf1d94d20cb4e3468a4ed","articleId":8,"userId":95,"content":"[@justjavac](/user/justjavac) 三包","createdAt":1617687001874},{"id":156,"originId":"606bf2894d20cb65c668a4f5","articleId":8,"userId":95,"content":"[@jxycbjhc](/user/jxycbjhc) 我赌三包，如果可以就当我没说","createdAt":1617687177077},{"id":157,"originId":"606c0e734d20cb157568a61d","articleId":8,"userId":90,"content":"[@luo1234560](/user/luo1234560) 打脸了，智能家居也许它会火","createdAt":1617694323531},{"id":158,"originId":"6095e7054d20cb0b64690ff0","articleId":8,"userId":96,"content":"[@jxycbjhc](/user/jxycbjhc) 我赌一箱卫龙！","createdAt":1620436741083},{"id":159,"originId":"609657614d20cb66da6914ab","articleId":8,"userId":97,"content":"牛批","createdAt":1620465505298},{"id":160,"originId":"6097d22a4d20cb6732691926","articleId":8,"userId":98,"content":"我赌半包行不？","createdAt":1620562474953},{"id":161,"originId":"6097d8c44d20cb2b97691965","articleId":8,"userId":90,"content":"[@13241491189](/user/13241491189) 也许赢了～","createdAt":1620564164066},{"id":162,"originId":"60779a864d20cb626868c4a5","articleId":9,"userId":99,"content":"自己支持一下","createdAt":1618451078924},{"id":163,"originId":"608228434d20cb499368e2ab","articleId":9,"userId":100,"content":"这个已经学了  有没有golang的教程","createdAt":1619142723713},{"id":164,"originId":"60963f774d20cb23e16913d4","articleId":9,"userId":99,"content":"[@youmenglinzi](/user/youmenglinzi) https://www.bilibili.com/video/BV14T4y1g7h9  这个","createdAt":1620459383279},{"id":165,"originId":"6096341e4d20cb7c2b691347","articleId":10,"userId":89,"content":"棒棒哒","createdAt":1620456478725},{"id":166,"originId":"6082287f4d20cb30a068e2b6","articleId":12,"userId":100,"content":"Serverless 今年会火吗","createdAt":1619142783322},{"id":167,"originId":"60828db14d20cb4bd768e470","articleId":12,"userId":103,"content":"serverless会使开发更简单吗？需要架构师吗？","createdAt":1619168689501},{"id":168,"originId":"6084bb304d20cb500968e645","articleId":12,"userId":99,"content":"[@yuedun](/user/yuedun) 开发差不多的，相当于省去运维工作 ","createdAt":1619311408814},{"id":169,"originId":"6084c33e4d20cb6c8568e661","articleId":12,"userId":104,"content":"1","createdAt":1619313470634},{"id":170,"originId":"60863baa4d20cb00c868ea78","articleId":12,"userId":103,"content":"[@phonegap100](/user/phonegap100) 技术一般会与利益绑定，推一项技术必然会砸一部分人的饭碗，比如现在主流是微服务，使用serverless会不会使微服务无用武之地，那么当前使用微服务的人就会排斥","createdAt":1619409834996},{"id":171,"originId":"6086cf584d20cb4f2468ed0e","articleId":12,"userId":99,"content":"[@yuedun](/user/yuedun) 您说的非常正确，不过所有新技术的出现都会经历这个阶段的","createdAt":1619447640549},{"id":172,"originId":"60876b394d20cb76c968edd6","articleId":12,"userId":105,"content":"Serverless 已经应用挺广泛的了","createdAt":1619487545346},{"id":173,"originId":"6094c88c4d20cb93df690ad5","articleId":12,"userId":99,"content":"[@haijianyang](/user/haijianyang) 是的 很多公司在用了   serverless 和nodejs是绝配","createdAt":1620363404847},{"id":174,"originId":"5f3233202799ce64a0aabade","articleId":13,"userId":33,"content":"typescript 问题和模板中变量问题三者都缺的是一个好用的插件，显然，react和angular做的更好一些，\r\n迷惑的this约定好定义位置不好用？ 每个文件上来一大堆import来export去好看？最后你都引懵了\r\nvue最难用的其实是项目大了后，watch，computed 加上你的this.  对数据的改变太难追踪了，在这一点上，react都需要setState，而angular直接没给你提供watcher computed......","createdAt":1597125408929},{"id":175,"originId":"5f3cea1b68156574e6e6c94c","articleId":13,"userId":107,"content":"赞楼主的总结，可以顺带在了解下concent吖，一个自带依赖收集渐进式&高性能的react开发框架\r\nhttps://github.com/concentjs/concent\r\n\r\n一定会让你喜欢的，附带一篇小文，在react里使用composition api\r\nhttps://juejin.im/post/6861527942070009869","createdAt":1597827611912},{"id":176,"originId":"5f3cf456e8a599751bb5073e","articleId":13,"userId":108,"content":"写的很棒。Vue 的数据变化不可追踪，往往不知道赋值之后，会发生什么魔法，甚至生效没有，这时候往往用上万能的 $nextTick 或 setTimeout\r\n\r\n写法非常的 hack，性能非常魔幻\r\n\r\n框架的寿命比不过语言，Vue 的模版 {{ expression }} 也不是 javascript 表达式，Vue 3.0 也只是续命一时而已\r\n\r\n如果近几年再出一款爆款的框架，也只是革 Vue 的命，React 紧随语言和函数式，没有魔法，啥事没有","createdAt":1597830230151},{"id":177,"originId":"5f3df50be8a599751bb5084f","articleId":13,"userId":21,"content":"其实Web Components也挺方便的，还更加navtive，内部系统可以试试。\r\n就比如我之前开发的[before-server](https://github.com/zy445566/before-server)就是基于Web Components做的，目前我们公司内部普遍叫好(虽然叫好主要是功能好用，但是速度上明显是得益于Web Components)。同时用rollup替换了webpack，编译速度直接起飞，[替换webpack到rollup的修改](https://github.com/zy445566/before-server/commit/4d61a3b0c8464eb8d08605178fdaebc703db7599)。","createdAt":1597895947421},{"id":178,"originId":"5f46a16b68156574e6e6d53b","articleId":13,"userId":109,"content":"[@zy445566](/user/zy445566) 貌似 rollup 主要用于模块（package）打包，而 webpack 用于项目打包。你那儿 rollup 也当作项目打包用途了么？","createdAt":1598464363091},{"id":179,"originId":"5f47183968156574e6e6d600","articleId":13,"userId":21,"content":"[@waitingsong](/user/waitingsong) 对，就这个[before-server](https://github.com/zy445566/before-server)，改webpack 到rollup了，快是快了很多。但是我理想情况是还是利用type=module的特性，在import()这个异步方法能对依赖进行按需引用，这样无论多大的项目都能实现毫秒级别编译（甚至无需热更到内存)，但事实还是有点差距，目前正在研究这样方案（我看了vite和snowpack都不是特别适合，不过可能因为我是业余前端的关系吧）。\r\n不过目前我自己构建的一套Web Components工具库挺好用的(包括路由，动态渲染等等，用起来的舒适度不输于现有框架)，但是毕竟不是专业前端无法在公司落地主要项目，所以感觉意义不是很大，但是我觉得很多专业前端可以构建一套Web Components工具库，这个既轻量如果能在公司落地主要项目的话，也算是微创新了。","createdAt":1598494777996},{"id":180,"originId":"5f4babe368156574e6e6dabe","articleId":13,"userId":110,"content":"[@axetroy](/user/axetroy) Svelte 其实不错，只是生态圈不怎么样。如果 Svelte 生态圈跟上来，我就打算换这个了。不过对 React 始终无感，JSX 才是看着太 Hacky，满满一股 PHP 是最好的语言的味道","createdAt":1598794723458},{"id":181,"originId":"5f4bac2fe8a599751bb51858","articleId":13,"userId":110,"content":"[@waitingsong](/user/waitingsong) Rollup 打包的包，大小要比 Webpack 小，速度更快。只不过没有 Webpack 生态圈好","createdAt":1598794799101},{"id":182,"originId":"5f71376ef9736b02ceada97a","articleId":13,"userId":22,"content":"[@andyhu](/user/andyhu) 后面一句说错了吧，vue 才是一股子 php 的味道，而且 vue 也是沾了 php 框架 Laravel 的光才起来的。\r\n\r\n我个人感觉 svelte 的入门体验略优于 vue，比 react 爽太多了。 不过 svelte 用于开发 Web Components 组件库比较爽，编译的结果可以跨框架使用，而且比目前 wc 框架编译出的代码都小，毕竟 svelte 没有 runtime。但是如果开发项目的话，这个其实并不是优势，随着项目变大，反而成了劣势。angular/react/vue 项目初期比较大，因为 bundle 里面有 runtime，但是随着组件越来越多，增长不是特别大。而 svelte 正好相反。\r\n\r\n虽然 bundle size 的优势不明显，但是 svelte 性能确实不错。","createdAt":1601255278543},{"id":183,"originId":"5f714d83f9736b02ceada9ee","articleId":13,"userId":111,"content":"[@justjavac](/user/justjavac)   svelte  组件之间通信用什么   比如页面左面是个 +/- 各分量百分比 的面板 ，页面右面是饼图    操作 +/-面板以后， 能改变饼图的比例","createdAt":1601260931020},{"id":184,"originId":"5fe1f6ac98427e76296a9ec1","articleId":13,"userId":112,"content":"Vue 3已经出来了，感觉性能会有提升，建设尝试。","createdAt":1608644268007},{"id":185,"originId":"5fe2bd0498427e8c736a9fa8","articleId":13,"userId":113,"content":"分析的很详细。此外，当代码量大了之后，更应该从工程方面来寻找解决方案。比如CabloyJS全栈框架有超过30万行代码，后端采用EggJS，前端采用Vue，前端按15万行来算，不算是小工程了。CabloyJS把代码按业务进行模块化切割，比如`文件模块`、`消息推送模块`、`工作流模块`等等。这样，我们在进行实际开发时，总是在一个模块内部进行。从技术上说，变量、状态、页面被控制在模块内部，避免了污染与冲突；从工程上说，团队分工很容易。此外，也有机制进行模块间状态、逻辑的互相访问和调用，为模块在业务层面的复用也提供了方便","createdAt":1608695044446},{"id":186,"originId":"5fe99cc75393a5fe96545ae1","articleId":13,"userId":114,"content":"真的写的很好，Vue3虽然解决了一些痛点。但真的，不如去用React了","createdAt":1609145543566},{"id":187,"originId":"6016907c03d7973c1e66e268","articleId":13,"userId":109,"content":"好像 ng 没人关注～","createdAt":1612091516103},{"id":188,"originId":"6017a62b03d7970e9466e434","articleId":13,"userId":115,"content":"如何理解“这类框架是现代化前端开发必备的”？你是否知道目前使用 jquery 的网站比例依然高达 97%?\r\n你看到大厂们的前端天天在谈论 Vue/React，但是你去查看他们的网站源码有几个是用 vue 或者 react 实现的？\r\n归根揭底这东西是为了提高前端面试门槛？还是为了让后端看不懂，然后不敢轻易否定前端价值？","createdAt":1612162603062},{"id":189,"originId":"6019104203d79778e266e859","articleId":13,"userId":109,"content":"[@chzhz](/user/chzhz) 看“现代化前端开发”的定义","createdAt":1612255298916},{"id":190,"originId":"601934ab03d797377d66e943","articleId":13,"userId":115,"content":"[@waitingsong](/user/waitingsong) 什么定义我不管，我只管是不是解决了实际问题。只有解决了问题才会有生命力，否则基本就是自娱自乐。\r\n比如我作为一个后端，要写一点页面，真的离不开 jquery。他实际解决了我不用写原生 JS 操作dom 的问题。\r\n互联网公司大量的产品页面似乎也没有复杂到需要各种模块化工程化组织来实现或者沉淀，而产品的视觉交互体验又都是设计师来决定，前端只是做了一个翻译。很多时候，一个业务多半是来了个新前端，就重新写一套。而很重的那种面向B端的工具应用，这种项目本身非常少。\r\n当然，你要说那些所谓的”现代化前端框架“确实解决了前端生存问题，那也是解决了问题。\r\n如果你要反驳我，请拿一个必要的实际的有普遍代表意义的产品的例子告诉我，这类用”现代化前端开发“是必须，不要掰概念。","createdAt":1612264619489},{"id":191,"originId":"601b49f203d79711a366ec3f","articleId":13,"userId":116,"content":"我觉得vue 的data渲染模板带来的便捷。但也带来了很多性能上的消耗，有的时候不能依靠足够细致的组件拆分来划分问题。","createdAt":1612401138158},{"id":192,"originId":"601bc65d03d79729a466edf7","articleId":13,"userId":33,"content":"[@chzhz](/user/chzhz) 你jq不用原生操作dom，现代化前端开发根本不用操作dom，只操作数据，这就是进步","createdAt":1612432989377},{"id":193,"originId":"601bc81e03d797c53a66ee04","articleId":13,"userId":33,"content":"[@chzhz](/user/chzhz) 就比如ui用的最多的蓝湖，，你用jq开发一个我看看，，，，","createdAt":1612433438323},{"id":194,"originId":"601bd92b03d7970de866ee45","articleId":13,"userId":115,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 这种前端重逻辑的工具类软件毕竟是少数啊，而且也不是不可以啊，这个无远开发平台：[wuyuan.io](https://wuyuan.io/)，可以用它开发出整个系统，不知道比蓝湖复杂多少倍，但人家就是用 jquery 开发的。再比如这款在线绘图工具也不简单：[processon](https://www.processon.com/)，人家也就是用了 jquery 而已。\r\n你要抬杠，找特例都能找，而我是说普遍情况。一个前端，不懂程序设计的硬功，用 jQuery 写不好，用 vue / react 依然写不好","createdAt":1612437803646},{"id":195,"originId":"601ca77d03d7970e6b66ef49","articleId":13,"userId":33,"content":"[@chzhz](/user/chzhz) 你用用就知道完全不是一种体验，一种是纯网页的体验，一种是app的体验，，数据操作视图，模块化开发，局部热更新调试这不是jq能比的，","createdAt":1612490621489},{"id":196,"originId":"601ca8af03d797ddc266ef4f","articleId":13,"userId":33,"content":"[@chzhz](/user/chzhz) 你说jq多那是因为企业官网比较多，那种为了seo肯定是简单的jq js就搞定了，，我自己搞简单的网站也是jq，毕竟东西不多，等你应用变得复杂你再用jq那就是自找罪受，还有就是历史原因，毕竟全世界大多数的网站也不是这四五年开发的，，另外现在银行保险公司金融公司各种企业的内部管理平台你认为数量很少？他们的那些应用业务复杂度都不是你一两周能交接清楚的，那种应用用现代化前端框架开发带来的便利不是一点点，，是工业时代和农业时代的进步","createdAt":1612490927942},{"id":197,"originId":"601cf33b03d797497966f08a","articleId":13,"userId":115,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 是吗，哈哈哈哈，我就在银行工作啊，咋没见有人用什么 react、vue做系统？你可知道银行内部的系统几十年不换？很多系统都是C/S结构的，很多B/S结构的也就是用extjs开发的。花力气更换前端及UI基本就是吃力不讨好，根本不可能立项的。偶尔一些创新项目，基本就是从核心系统后套暴露几个接口给外包弄，可能用一点新前端技术，但是C端的场景都是简单的表单填写和查询。没有人为了开发一个B端系统还去学个vuejs和react 的：）","createdAt":1612510011429},{"id":198,"originId":"601d065903d797e3eb66f17f","articleId":13,"userId":33,"content":"[@chzhz](/user/chzhz) 简单业务写多了","createdAt":1612514905904},{"id":199,"originId":"601d074c03d797e01e66f18f","articleId":13,"userId":33,"content":"[@chzhz](/user/chzhz) 你自己负责的项目不敢换，就觉得别的都是垃圾","createdAt":1612515148361},{"id":200,"originId":"601d0a1a03d7974b4366f1c8","articleId":13,"userId":33,"content":"[@chzhz](/user/chzhz) 而且看了你的账号，，很明显是一个公司的一群人用jq开发的一个什么平台，，然后为了推自己的平台贬低别人的，引流自己的，，当托你还是太嫩了。。。","createdAt":1612515866243},{"id":201,"originId":"601d143d03d7970cd266f236","articleId":13,"userId":115,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 从来没说别的都是垃圾哈，哈哈哈，从来没有，一直在追问事实，强调事实，讲证据，您可以看上下文嘛。\r\n是不是您自己内心充满着”垃圾“这个词汇，然后看到意见不合的人，就觉得它在喷别人垃圾呢？\r\n我不是一直在强调摆论据吗？您前面提到银行金融保险这种B端业务，啥样的不用凭想想哈，直接google，百度 搜图片 XXX银行系统，或者哪怕搜 SAP ERP，金蝶，用友，看看能不能找到所谓的用”现代化前端“做的B端系统。想一想这类系统带给用户的核心价值是什么，UI ？前端开发更爽？公司更省成本？更能获客？20年前没有前端，系统如何做？兄弟，不要情绪化哈~，俺一直在强调讲事实：）","createdAt":1612518461988},{"id":202,"originId":"601f5dd503d797834966f5c8","articleId":13,"userId":117,"content":"[@chzhz](/user/chzhz) https://ae01.alicdn.com/kf/U945a4879938840179934109f45560e040.jpg","createdAt":1612668373293},{"id":203,"originId":"608c28c84d20cb421768fb35","articleId":13,"userId":110,"content":"[@justjavac](/user/justjavac) 几个月以后，我彻底弃车 Vue 了。React Hooks 用起来比较爽，尤其是配合上 Jotai 这种状态管理工具，比 Vue 开发效率要高。Vue 的 compostion api 搞得不伦不类的。现在感觉 React 的缺点是她缺一套类似于 Svelte 和 Vue 这样的单文件模板机制。css in js / css module 用着还是差点意思","createdAt":1619798216069},{"id":204,"originId":"60938ba04d20cb57ad690685","articleId":13,"userId":12,"content":"Vue 和 React 同时存在挺好的，Angular 还有很多人在用呢。可以相互竞争相互促进，前端发展到现阶段，没有哪一个技术可以长期领先。","createdAt":1620282272074},{"id":205,"originId":"6094b5194d20cb5818690ab0","articleId":13,"userId":97,"content":"模板语法和图灵完备并没强关联，而是模板语言没有使用宿主语言的作用域","createdAt":1620358425640},{"id":206,"originId":"6093d2634d20cb3dd96908d5","articleId":14,"userId":9,"content":"666","createdAt":1620300387325},{"id":207,"originId":"6093d2684d20cb4ce26908d7","articleId":14,"userId":9,"content":"[@this-long](/user/this-long) 666","createdAt":1620300392812},{"id":208,"originId":"609497eb4d20cb548a6909e8","articleId":14,"userId":93,"content":"[@this-long](/user/this-long) 感谢支持和关注~~","createdAt":1620350955999},{"id":209,"originId":"6093a2ef4d20cbc11e69076d","articleId":15,"userId":119,"content":"优秀","createdAt":1620288239102},{"id":210,"originId":"6093c2034d20cb2acd690868","articleId":15,"userId":9,"content":"抱歉（测试一下回复api）","createdAt":1620296195770},{"id":211,"originId":"6094877d4d20cb06626909c5","articleId":15,"userId":83,"content":"很棒","createdAt":1620346749160},{"id":212,"originId":"60908b224d20cb6ce968fff8","articleId":16,"userId":111,"content":"![vs-dotnet4.5.jpg](//static.cnodejs.org/FnLquzSJ2S9ZZ9fAGC7Bt3sSeFL3)\r\n微软不停推新版本的vs 实际上在强制推广 .net  下载Vs的码农越多，.net安装得就越多，然后在vs里集成c#  然后c++码农越感觉写c# 比写c++真香,闭着眼睛都能写代码\r\n然后转移c#的码农越多，下载vs的c++码农越多,c++码农就越少，这就是微软的腾笼换鸟技术","createdAt":1620085538016},{"id":213,"originId":"60908e034d20cb51c369000e","articleId":16,"userId":121,"content":"目测楼主是php粉\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1620086275163},{"id":214,"originId":"609155914d20cb39f06902db","articleId":16,"userId":85,"content":"谈不上PHP的粉，是一个快50岁的老程序员。感慨一下技术的变迁。感觉微软很努力的让程序员离开C++，服务器端用IIS让人不需要C++，而PC端，用C#来替换C++，多年前还搞过VB Script试图替换Ｊａｖａｓｃｒｉｐｔ。\r\n我的本意是，客户端使用Ｎｏｄｅ，而服务器端就该使用Ｃ＋＋，不会的，就去学，以上才是大道，啥问题都能解决","createdAt":1620137361965},{"id":215,"originId":"6092a9834d20cb68826904ee","articleId":16,"userId":122,"content":"C#有些莫名其妙","createdAt":1620224387409},{"id":216,"originId":"609344b24d20cb798d690551","articleId":16,"userId":11,"content":"所以你认为服务器编程技术的核心是什么？","createdAt":1620264114444},{"id":217,"originId":"6093799c4d20cba20869060c","articleId":16,"userId":33,"content":"你都写过啥，","createdAt":1620277660375},{"id":218,"originId":"6093b9a74d20cb19d069081b","articleId":16,"userId":111,"content":"[@hengbenkeji](/user/hengbenkeji)    \r\n> LNK2019: 无法解析的外部符号 __xxxx   \r\n\r\n编译时出现无法解析的外部符号  这种情况一般怎么找到相应的incldue和lib文件 有没有什么工具 ","createdAt":1620294055335},{"id":219,"originId":"6093c2ed4d20cb5dc9690874","articleId":16,"userId":122,"content":"我猜是某个库链接不对，以下是几个常见的库文件的写法\r\n下面的CMake文件（系统为Ubuntu 20.04），链接了MySQL8, SSL, libjson等常见的库文件，您看看您想链接啥库吧。\r\n\r\ncmake_minimum_required(VERSION 3.10)\r\n\r\nproject(larry VERSION 1.0)\r\n\r\nset(CMAKE_CXX_STANDARD 14)\r\nset(CMAKE_CXX_STNADARD_REQUIRED True)\r\n\r\nadd_subdirectory(libspawnfcgi )\r\nadd_subdirectory(libfastcgipp)\r\nadd_subdirectory(libcommon)\r\n\r\nfind_package(Threads REQUIRED)\r\nfind_package(Boost 1.71.0 COMPONENTS log thread system REQUIRED)\r\n\r\nfind_library(SSL_LIB NAMES ssl)\r\nfind_library(CRYPTO_LIB NAMES crypto)\r\nfind_library(MYSQL_LIBS NAMES mysqlcppconn)\r\nfind_library(JSONCPP_LIB jsoncpp PATHS /usr/lib) \r\n\r\nset(CURL_LIBRARY \"-lcurl\")\r\nfind_package(CURL REQUIRED)\r\n\r\nfind_package(OpenSSL REQUIRED)\r\n\r\nadd_executable(booking_overall\r\n\tapp/server.cpp\r\n\tapp/URL2ID.cpp\r\n\tapp/ErrReport.cpp\r\n\tapp/DataBase_base.cpp\r\n\tapp/DataBase.cpp\r\n\tapp/BaseHandler.cpp\r\n\tapp/UserAuthHandler.cpp\r\n\tapp/OpenAPIHandler.cpp\r\n\tapp/BookingAPIHandler.cpp\r\n\tapp/RequestHandler.cpp\r\n\tapp/cgi_order.cpp\r\n\tapp/controllers/goodInfo/GoodInfo.cpp\r\n\tapp/controllers/data/Data.cpp\r\n\tapp/controllers/help/Help.cpp\r\n\tapp/controllers/otcUserLogin/OtcUserLogin.cpp\r\n\tapp/controllers/send/Send.cpp\r\n\tapp/controllers/otcMatchOrder/OtcMatchOrder.cpp\r\n\tapp/controllers/superadmin/SuperAdmin.cpp\r\n\tapp/services/jimai_verification_code/service.cpp\r\n\tapp/services/otc_user/service.cpp\r\n\tapp/services/jimai_session/service.cpp\r\n\tapp/services/otc_user_wallet/service.cpp\r\n\tapp/services/pg_user_wallet/service.cpp\r\n\tapp/services/sys_user/service.cpp\r\n\tapp/services/pg_account_log/service.cpp\r\n\tapp/services/otc_good_category/service.cpp\r\n\tapp/services/otc_good_config/service.cpp\r\n\tapp/services/otc_transaction_complete/service.cpp\r\n\tapp/services/pg_asset_config/service.cpp\r\n\tapp/services/otc_areas/service.cpp\r\n\tapp/services/otc_currency_quotation/service.cpp\r\n\tapp/services/otc_notice/service.cpp\r\n\tapp/services/otc_asset_config/service.cpp\r\n\tapp/services/otc_help_center/service.cpp\r\n\tapp/services/timetable/service.cpp\r\n\tapp/services/cron_account/service.cpp\r\n\tapp/services/cron_balance/service.cpp\r\n\tapp/services/otc_team_asset_config/service.cpp\r\n\tapp/services/otc_asset_change_log/service.cpp\r\n\tapp/services/otc_user_follow_good/service.cpp\r\n\tapp/services/otc_quotation_one_day/service.cpp\r\n\tapp/services/otc_user_order/service.cpp\r\n\tapp/services/otc_user_deposit/service.cpp\r\n\tapp/services/otc_user_apply_order/service.cpp\r\n\tapp/services/otc_shift_to_asset/service.cpp\r\n\tapp/services/otc_pay_bind_log/service.cpp\r\n\tapp/services/otc_open_account_log/service.cpp\r\n\tapp/services/otc_currency_match/service.cpp\r\n\tapp/services/otc_all_config/service.cpp\r\n\tapp/utils/base64.cpp\r\n\t/usr/local/lib/libjson-c.a\r\n)\r\n\r\ntarget_include_directories(booking_overall\r\n\tPUBLIC\r\n\t${PROJECT_BINARY_DIR}/include\r\n\t${PROJECT_BINARY_DIR}/libcommon/log\r\n\t${PROJECT_BINARY_DIR}/libcommon/mysql\r\n    ${Boost_INCLUDE_DIRS}\r\n    \"/usr/include/mysql-cppconn-8\"\r\n    \"/usr/include/mysql-cppconn-8/jdbc\"\r\n    \"/usr/include/mysql-cppconn-8/jdbc/cppconn\"\r\n)\r\n\r\ntarget_link_libraries(booking_overall\r\n\tPUBLIC\r\n\t${SSL_LIB}\r\n\t${CRYPTO_LIB}\r\n\t${MYSQL_LIBS}\r\n\t${JSONCPP_LIB}\r\n\tcommon\r\n\tfastcgipp\r\n\tspawnfcgi\r\n\tThreads::Threads\r\n\t${CURL_LIBRARIES}\r\n\tOpenSSL::SSL\r\n)\r\n","createdAt":1620296429045},{"id":220,"originId":"60039b1b5d04ac6ff6217384","articleId":18,"userId":124,"content":"![捕获.PNG](//static.cnodejs.org/FqpAuffOF4fR3RSB5ZZLYaMxVpUN)","createdAt":1610849051056},{"id":221,"originId":"60039b725d04acbec3217390","articleId":18,"userId":124,"content":"![捕获2.PNG](//static.cnodejs.org/FqMouwV8feXbW0Bd99BbqPu23dA_)\r\n![捕获4.PNG](//static.cnodejs.org/FjZLNzRMKgnvQ_gZgE-8B3BAWWGo)\r\n![捕获3.PNG](//static.cnodejs.org/Fn-Y1aUx4Dvr3nbtLGTA40pa6-Zz)\r\n![捕获5.PNG](//static.cnodejs.org/FmLfQmQskh0mN945YuFbAZizlYIO)\r\n![捕获6.PNG](//static.cnodejs.org/Fr1HOhKzevJ3MaIAk-8knNEWYfZf)\r\n![捕获7.PNG](//static.cnodejs.org/Fs7gM58J6NMm1mtFjPuXl4QvEWTT)\r\n![捕获8.PNG](//static.cnodejs.org/Fl7ClXVUlV4q9pREwUerZZLNZfEi)\r\n![捕获9.PNG](//static.cnodejs.org/FlYK61bcLBcxO7gB8uSlFi9IgNHS)\r\n![捕获10.PNG](//static.cnodejs.org/Fi-TUHzs0NKZFaZC45BgtvL3Ch84)","createdAt":1610849138120},{"id":222,"originId":"60039b8f5d04ac162a217393","articleId":18,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1610849167049},{"id":223,"originId":"600641b25d04ac166e217715","articleId":18,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1611022770781},{"id":224,"originId":"6008d04a5d04ac5fa4217b58","articleId":18,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1611190346656},{"id":225,"originId":"60288ff903d7973f5066fbbc","articleId":18,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1613271033777},{"id":226,"originId":"60332dfd03d79777c3670d8b","articleId":18,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1613966845412},{"id":227,"originId":"60371d464655ea58c4218430","articleId":18,"userId":125,"content":"我们也在用最新的react开发网站。要不要看个机会，交个朋友也可以。https://cnodejs.org/topic/5fe0776e98427e3c116a9a3c\r\n","createdAt":1614224710036},{"id":228,"originId":"6044b1b64655ea821021a254","articleId":18,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1615114678476},{"id":229,"originId":"60596a37dac5427f00e29024","articleId":18,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1616472631272},{"id":230,"originId":"60669d852357ddc391f9e66a","articleId":18,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1617337733133},{"id":231,"originId":"606919794d20cb6e4a689fbe","articleId":18,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1617500537675},{"id":232,"originId":"606e8eb64d20cb059a68acdb","articleId":18,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1617858230320},{"id":233,"originId":"607523e94d20cb454168bb2e","articleId":18,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1618289641770},{"id":234,"originId":"608d3d614d20cbc6bd68fc75","articleId":18,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1619869025789},{"id":235,"originId":"606919464d20cb62ea689fb9","articleId":19,"userId":124,"content":"大家给星啊 谢谢大伙","createdAt":1617500486748},{"id":236,"originId":"606bbb6a4d20cb830668a41e","articleId":19,"userId":124,"content":"大家给星啊 谢谢大伙","createdAt":1617673066808},{"id":237,"originId":"606e8e914d20cbbbd068acd6","articleId":19,"userId":124,"content":"大家给星啊 谢谢大伙","createdAt":1617858193444},{"id":238,"originId":"607523fa4d20cb2bf068bb33","articleId":19,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1618289658808},{"id":239,"originId":"608d3d524d20cbccd368fc70","articleId":19,"userId":124,"content":"请大家给颗星，用react hooks 重构的","createdAt":1619869010364},{"id":240,"originId":"608627254d20cb92ff68e9ea","articleId":21,"userId":97,"content":"大神的意思应该是它带来便利性远比它带来的复杂度低得多","createdAt":1619404581689},{"id":241,"originId":"608cad544d20cb692368fb63","articleId":21,"userId":111,"content":"```\r\n它带来便利性远比它带来的复杂度低得多\r\n```\r\n为什么我感觉这句话说的是vue/react ","createdAt":1619832148376},{"id":242,"originId":"608b5d7b4d20cb9a2568f90e","articleId":22,"userId":41,"content":"赞","createdAt":1619746171719},{"id":243,"originId":"608bb35e4d20cb243668fa32","articleId":22,"userId":102,"content":"[@xcatliu](/user/xcatliu) 大佬更赞","createdAt":1619768158312},{"id":244,"originId":"5de9ab7d484806122a97da6d","articleId":26,"userId":132,"content":"可以用，接收方文字我点问题，文件没问题，聊天只能一对一，","createdAt":1575594877008},{"id":245,"originId":"5de9ac0014ffa4125a544950","articleId":26,"userId":132,"content":"老哥，在公司打开了www.yuceben.com，尴尬😅","createdAt":1575595008434},{"id":246,"originId":"5de9b31f484806122a97daa2","articleId":26,"userId":131,"content":"[@afacode](/user/afacode) 多谢反馈，另外 yuceben 这个说来好笑，几年前申请的域名后来放弃了，今天突然发现成福利站了","createdAt":1575596831529},{"id":247,"originId":"5deb332b484806122a97dec2","articleId":26,"userId":131,"content":"增加超大文件传输功能，直连状态下，支持GB大小文件的传输","createdAt":1575695147551},{"id":248,"originId":"5dedff8b14ffa4125a545236","articleId":26,"userId":59,"content":"用Web RTC 实现的吗？ 我也看了部分的Web RTC 的 API，没有看到文件传送，大部分是视频语音的 p2p 直连","createdAt":1575878539819},{"id":249,"originId":"5dee000814ffa4125a545241","articleId":26,"userId":59,"content":"我这边 iMac 与 iphone微信的浏览器没有问题","createdAt":1575878664355},{"id":250,"originId":"5dee15f2484806122a97e46d","articleId":26,"userId":131,"content":"[@liangtongzhuo](/user/liangtongzhuo) 除了视频和音频通道，还有一个datachannel","createdAt":1575884274099},{"id":251,"originId":"5deef12a484806122a97e562","articleId":26,"userId":59,"content":"哦哦， 这样解决了很多内网穿透的问题。  区块链就可以依托 RTC 了，除了浏览器，还有其他平台集成 RTC 了吗？\r\n","createdAt":1575940394282},{"id":252,"originId":"5deef75a14ffa4125a5453ea","articleId":26,"userId":131,"content":"[@liangtongzhuo](/user/liangtongzhuo) 开源的，可以自己移植","createdAt":1575941978770},{"id":253,"originId":"5dfb0506ba8f6d46c4ede2a7","articleId":26,"userId":131,"content":"经测试新版本的safari对webrtc支持已经好很多了，以后苹果全家桶也纳入了兼容范围","createdAt":1576731910767},{"id":254,"originId":"5dfb14d6ba8f6d46c4ede2e5","articleId":26,"userId":133,"content":"楼主你做这个的目的是学习还是啥？","createdAt":1576735958917},{"id":255,"originId":"5dfb1921ba8f6d46c4ede2fe","articleId":26,"userId":131,"content":"[@simongfxu](/user/simongfxu) 刚开始做是因为自己需要这个个东西。以前和同事远程传大文件用百度云盘，后来限速需要付费，付了几次，但是一个月用不了几次，好亏。而且自己家里两个电脑，公司又有电脑，我和老婆又有好几部手机，需要传送个东西时，较小的文件可以用微信，但是后来网页微信封了，就很不方便了。如果大的文件要用数据线，就更麻烦了。所以就做了这个，感觉挺好用的，就发布出来了。","createdAt":1576737057251},{"id":256,"originId":"5dfb2a770696c446bf64f282","articleId":26,"userId":134,"content":"[@afacode](/user/afacode) 好烦哦.  贤者模式中...","createdAt":1576741495077},{"id":257,"originId":"5dfc62c7ba8f6d46c4ede55d","articleId":26,"userId":133,"content":"今天用遇到个小问题，传了图片没显示出来，刷新下好了。","createdAt":1576821447982},{"id":258,"originId":"5dfc62e0ba8f6d46c4ede561","articleId":26,"userId":133,"content":"界面可以再简洁一点，现在有点杂乱。还挺实用！","createdAt":1576821472191},{"id":259,"originId":"5dfc6349ba8f6d46c4ede567","articleId":26,"userId":133,"content":"另外有些安卓默认浏览器下载的时候文件名是 xxx.bin，然后重命名保存为apk死活找不到。chrome 倒是正常","createdAt":1576821577193},{"id":260,"originId":"5dfc74df0696c446bf64f522","articleId":26,"userId":117,"content":"不知道未来webrtc能不能在web游戏中大放异彩","createdAt":1576826079080},{"id":261,"originId":"5dfc77180696c446bf64f53c","articleId":26,"userId":131,"content":"[@simongfxu](/user/simongfxu) 国内的浏览器比较恶心，用别人的内核套了一个壳，人家内核本来支持的功能他们也没有实现，但是国外的chrome，firefox，三星等都支持的很好。尝试过了，因为国内浏览器的问题，靠js无法解决，只能尽量在ui中提醒大家了。界面的优化和设计也在调整中，对这个不太在行，所以进度较慢，不过还在努力中","createdAt":1576826648112},{"id":262,"originId":"5dfc7805ba8f6d46c4ede5e8","articleId":26,"userId":131,"content":"[@chenkai0520](/user/chenkai0520) webrtc本来设计出来是实时视频和语音的，不过我正在尝试做成底层标准接口，利用它的实时性，可以在上面做一些实时同屏，互动之类的应用，实时互动游戏也在考虑范围内","createdAt":1576826885485},{"id":263,"originId":"5e9d7510d870946c6b6bd2e0","articleId":26,"userId":131,"content":"优化文件传输，增加云剪贴板、视频流等功能，可以实现多设备间图文同步、共享桌面、视频会议等","createdAt":1587377424170},{"id":264,"originId":"5e9d78330275394e76882460","articleId":26,"userId":135,"content":"棒~\r\n同一wifi可以用内网传输吗? 这样快很多","createdAt":1587378227823},{"id":265,"originId":"5e9d7ac70275394e76882470","articleId":26,"userId":131,"content":"[@abiuDoIT](/user/abiuDoIT) 同一个wifi肯定是可以，不同wifi下，会尝试穿透建立直连，如何可以直连，也是点对点传输，所有数据不经过服务器。如果无法穿透，则通过中继透明转发","createdAt":1587378887105},{"id":266,"originId":"5e9e4e020275394e76882516","articleId":26,"userId":90,"content":"来点实际的，已打赏。。。","createdAt":1587432962065},{"id":267,"originId":"5e9e8c050275394e76882611","articleId":26,"userId":136,"content":"[@cicada](/user/cicada) 大佬，开源地址在哪，学习学习","createdAt":1587448837615},{"id":268,"originId":"5e9fe637d870946c6b6bd7f0","articleId":26,"userId":137,"content":"求开源地址","createdAt":1587537463687},{"id":269,"originId":"5ea03e3dd870946c6b6bd9b8","articleId":26,"userId":131,"content":"[@gjc9620](/user/gjc9620) 这个项目没有开源","createdAt":1587559997052},{"id":270,"originId":"5ea165a5d870946c6b6bdc14","articleId":26,"userId":90,"content":"感谢，今天就用这个解决了一个我这一个问题。商业化不知道有没有搞头。","createdAt":1587635621927},{"id":271,"originId":"5ea19540d870946c6b6bdc93","articleId":26,"userId":138,"content":"之前用WebRTC做了一个点对点文件传输网站，用的就是DataChannel，可以传输无限大的文件。一开始用了peer.js，但是发现了即时设置order后也无法保证数据到达顺序，干脆自己实现了。最后放弃是因为发现国内4G穿透成功率极低，最终只能使用TURN，遂弃坑。","createdAt":1587647808256},{"id":272,"originId":"5eb3bfb02d0afc4087f53b66","articleId":26,"userId":131,"content":"[@hushiyun1994](/user/hushiyun1994) webrtc 确实很多坑，浅层次的开发，或者做demo还好，一旦要做成产品，想深入开放，确实发现坑越来越多，有的坑可以想办法绕开，有的坑现在也填不上。\r\n4g基本很难穿透，只能通过turn或其他方式来中继。webrtc本身原因，在时延比较大时，传输速度比较慢，反而是我自己实现的中继要快很多，只是比较吃带宽，所以现在还是以直连为主，中继为辅。\r\n这个产品开始时自己用，放出来后，发现确实有人需要，才慢慢深入开发和增加了一些功能。","createdAt":1588838320201},{"id":273,"originId":"5ec67a84a87fc8583363d9ba","articleId":26,"userId":131,"content":"皮皮直连发布3.0，优化底层传输算法，大幅提升稳定性和传输速度；改版可视化沟通功能","createdAt":1590065796922},{"id":274,"originId":"5ed46a2382b588109b646e0b","articleId":26,"userId":131,"content":"pp4.0发布，网站大改版，提升UI和交互，增加 用户登录功能，同一个帐号可同时登录多个不同设备，登录后同帐号设备自动连接，可以很方便的用于个人多个设备之间的同步","createdAt":1590979107444},{"id":275,"originId":"6086f5694d20cbc83768ed5c","articleId":26,"userId":131,"content":"顶一个自己吧","createdAt":1619457385201},{"id":276,"originId":"60865d6a4d20cb3dbf68eaed","articleId":27,"userId":119,"content":"沙发","createdAt":1619418474875},{"id":277,"originId":"5f164f4bf0739b0e62d1115b","articleId":28,"userId":33,"content":"加个id锚点更省事","createdAt":1595297611849},{"id":278,"originId":"5f16574c4b61050e36e7b52a","articleId":28,"userId":139,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 在vue中很少使用ID啊~","createdAt":1595299660226},{"id":279,"originId":"5f182a1ef0739b0e62d1164f","articleId":28,"userId":140,"content":"怎么说呢","createdAt":1595419166552},{"id":280,"originId":"6084fcf64d20cbf9ff68e75d","articleId":28,"userId":141,"content":"＠hezhongfeng　大牛，找大前端的工作不？我们正在招人，工资可以面谈：https://cnodejs.org/topic/6084fb3e4d20cb087d68e750\r\n联系Email：jtech_2013@hotmail.com\r\n","createdAt":1619328246739},{"id":281,"originId":"60863bca4d20cb373468ea7b","articleId":28,"userId":80,"content":"哈哈哈哈哈哈","createdAt":1619409866804},{"id":282,"originId":"608245a84d20cb21b768e37d","articleId":29,"userId":38,"content":"```\r\nsetTimeout(() => {\r\n  console.log('执行一些操作')\r\n  setTimeout(() => {\r\n    console.log('执行另一些操作')\r\n    // setTimeout ...\r\n  }, 3000)\r\n}, 1000)\r\n```\r\n包一下就可以 await 了\r\n```\r\nasync function main() {\r\n  await new Promise((done) => setTimeout(() => {\r\n    console.log('执行一些操作', 1)\r\n    done();\r\n  }, 1000));\r\n\r\n  await new Promise((done) => setTimeout(() => {\r\n    console.log('执行另一些操作', 2)\r\n    done();\r\n  }, 3000));\r\n\r\n  // 你还可以在里面 await\r\n  await new Promise((done) => setTimeout(async () => {\r\n    console.log('再执行另一些操作', 3)\r\n\r\n    await new Promise((done) => setTimeout(() => {\r\n      console.log('再在执行另一些操作', 4)\r\n      done();\r\n    }, 3000));\r\n\r\n    done();\r\n  }, 5000));\r\n\r\n  console.log('over');\r\n}\r\n```\r\n可以根据自己的需要包一下 new Promise 的过程.. 整体上还是挺简单的..\r\n","createdAt":1619150248389},{"id":283,"originId":"60829a464d20cb207068e4b5","articleId":29,"userId":97,"content":"不是应该叫靓仔吗","createdAt":1619171910232},{"id":284,"originId":"6082a42b4d20cb3f7168e4e8","articleId":29,"userId":117,"content":"node 16已经支持了😂\r\n```js\r\nimport { setTimeout } from 'timers/promises';\r\nasync function run() {\r\n  await setTimeout(5000);\r\n  console.log('Hello, World!');\r\n}\r\nrun();\r\n```","createdAt":1619174443801},{"id":285,"originId":"6083843a4d20cb6bf568e563","articleId":29,"userId":128,"content":"[@chenkai0520](/user/chenkai0520) 有点期待","createdAt":1619231802506},{"id":286,"originId":"60854e704d20cb517768e930","articleId":29,"userId":1,"content":"https://nodejs.org/docs/latest-v15.x/api/timers.html#timers_timers_promises_api","createdAt":1619349104906},{"id":287,"originId":"608633f34d20cb15c968ea52","articleId":29,"userId":19,"content":"[@lellansin](/user/lellansin) 我一般也是这样操作的，哈哈","createdAt":1619407859677},{"id":288,"originId":"602ddd0603d79737986700bb","articleId":31,"userId":144,"content":"赞一个，支持开源","createdAt":1613618438574},{"id":289,"originId":"608502c54d20cb609768e7e2","articleId":31,"userId":141,"content":"找工作不？我们正在招VUEJS大前端工程师，校招：https://cnodejs.org/topic/6084fb094d20cb7cfa68e749 社招：https://cnodejs.org/topic/6084fb3e4d20cb087d68e750","createdAt":1619329733016},{"id":290,"originId":"608500904d20cb41a568e7b2","articleId":32,"userId":141,"content":"大牛，找大前端的工作不？我们正在招人，工资可以面谈：https://cnodejs.org/topic/6084fb3e4d20cb087d68e750\r\n联系Email：jtech_2013@hotmail.com","createdAt":1619329168091},{"id":291,"originId":"602b144803d79702fb66fd3d","articleId":33,"userId":89,"content":"不是给hr看的吗","createdAt":1613435976008},{"id":292,"originId":"602b699e03d7970dbe66fe35","articleId":33,"userId":145,"content":"楼上+1","createdAt":1613457822066},{"id":293,"originId":"603790cc4655ea888521868b","articleId":33,"userId":146,"content":"[@i5ting](/user/i5ting) 狼叔都没实现吗[手动狗头.jpg]","createdAt":1614254284891},{"id":294,"originId":"603b807a4655ea8951218e04","articleId":33,"userId":98,"content":"工作多年的我不知道什么是职业规划丢人吗？","createdAt":1614512250002},{"id":295,"originId":"60819db44d20cb181368e225","articleId":33,"userId":79,"content":"也焦虑了， 如何针对自己做技术规划。","createdAt":1619107252769},{"id":296,"originId":"5f4ca07de8a599751bb5197e","articleId":34,"userId":11,"content":"棒！","createdAt":1598857341523},{"id":297,"originId":"5f4effc368156574e6e6dec1","articleId":34,"userId":89,"content":"多发些内容，可以精华的","createdAt":1599012803659},{"id":298,"originId":"5f4f050f68156574e6e6ded9","articleId":34,"userId":147,"content":"[@hyj1991](/user/hyj1991) 谢谢支持","createdAt":1599014159611},{"id":299,"originId":"5f4f052468156574e6e6dede","articleId":34,"userId":147,"content":"[@i5ting](/user/i5ting) 谢谢狼叔，我加个目录列表","createdAt":1599014180736},{"id":300,"originId":"5f4f1372e8a599751bb51ca3","articleId":34,"userId":148,"content":"👍","createdAt":1599017842391},{"id":301,"originId":"5f4f4ab2e8a599751bb51d3a","articleId":34,"userId":16,"content":"是个狼人，赞","createdAt":1599031986180},{"id":302,"originId":"5f4f4d82e8a599751bb51d48","articleId":34,"userId":149,"content":"看了之后，对原理又理解了很多，赞","createdAt":1599032706094},{"id":303,"originId":"5f4f51a568156574e6e6dfbb","articleId":34,"userId":89,"content":"提几个建议\r\n\r\n- 大小写要注意\r\n- 深入浅出，必要背景和基础知识要加一下。\r\n- 体系上，还有点散。\r\n- c/c++需要简单交代一下\r\n\r\n内容不错，目前还有些单薄，可以好好打磨一下，加油。","createdAt":1599033765791},{"id":304,"originId":"5f4f6885d22a6b1d622c7765","articleId":34,"userId":21,"content":"总体不错，就是有些文章的代码实在贴太多了，说明为主可能更好些","createdAt":1599039621287},{"id":305,"originId":"5f4f7813d22a6b1d622c7782","articleId":34,"userId":147,"content":"[@i5ting](/user/i5ting) 感谢建议，后面继续优化一下","createdAt":1599043603961},{"id":306,"originId":"5f4f785fd22a6b1d622c7786","articleId":34,"userId":147,"content":"[@zy445566](/user/zy445566) 感谢建议，后面再画些图，多些描述。","createdAt":1599043679325},{"id":307,"originId":"5f50545cd22a6b1d622c7852","articleId":34,"userId":135,"content":"棒~","createdAt":1599099996400},{"id":308,"originId":"5f505530d22a6b1d622c785c","articleId":34,"userId":98,"content":"[@abiuDoIT](/user/abiuDoIT) 标志？","createdAt":1599100208771},{"id":309,"originId":"5f52102e31fc7a1d8ad65efd","articleId":34,"userId":33,"content":"32个赞","createdAt":1599213614753},{"id":310,"originId":"5f578f48d22a6b1d622c839a","articleId":34,"userId":13,"content":"赞 👍","createdAt":1599573832613},{"id":311,"originId":"5f58276ec1c67a7dd9afdd7d","articleId":34,"userId":22,"content":"赞","createdAt":1599612782126},{"id":312,"originId":"5f598afac1c67a7dd9afe0e9","articleId":34,"userId":150,"content":"先赞后看，一直关注作者知乎动态","createdAt":1599703802373},{"id":313,"originId":"5f599973d22a6b1d622c872e","articleId":34,"userId":151,"content":"非常棒，赞美泰坦","createdAt":1599707507548},{"id":314,"originId":"5f59af38d22a6b1d622c8767","articleId":34,"userId":147,"content":"感谢大家的支持，业余时间会持续更新，希望能帮助大家更理解nodejs。","createdAt":1599713080019},{"id":315,"originId":"5f59b351d22a6b1d622c8773","articleId":34,"userId":40,"content":"赞","createdAt":1599714129688},{"id":316,"originId":"5f5b19cad22a6b1d622c89af","articleId":34,"userId":152,"content":"👍 ","createdAt":1599805898023},{"id":317,"originId":"5f5d8fd5c1c67a7dd9afe5cd","articleId":34,"userId":36,"content":"👍","createdAt":1599967189590},{"id":318,"originId":"5f60db27d22a6b1d622c9130","articleId":34,"userId":37,"content":"大佬有没有 Windows 调试的经验，好多坑呀，Mac 调试风扇转的心疼","createdAt":1600183079171},{"id":319,"originId":"5f61715fd22a6b1d622c91a8","articleId":34,"userId":153,"content":"很棒哦，感谢","createdAt":1600221535088},{"id":320,"originId":"5f6195e1c1c67a7dd9afec9a","articleId":34,"userId":147,"content":"[@aydenuse](/user/aydenuse) 很少调试，需要的时候，改代码，重新编译，看log。","createdAt":1600230881546},{"id":321,"originId":"5f642504d22a6b1d622c9742","articleId":34,"userId":60,"content":"加油+支持","createdAt":1600398596556},{"id":322,"originId":"5f644fccc1c67a7dd9aff209","articleId":34,"userId":154,"content":"6","createdAt":1600409548013},{"id":323,"originId":"600ec5f85d04ac405a2186ea","articleId":34,"userId":66,"content":"看起来不错，先收藏了。","createdAt":1611580920135},{"id":324,"originId":"601a113103d79747fd66ea4f","articleId":34,"userId":155,"content":"好文","createdAt":1612321073517},{"id":325,"originId":"6020f83c03d7972c4266f8b2","articleId":34,"userId":2,"content":"标注下代码位置就更好了，结合源码食用更佳","createdAt":1612773436189},{"id":326,"originId":"60215fea03d797c13566f91d","articleId":34,"userId":147,"content":"[@dingyuanwu](/user/dingyuanwu) 后面有时间再更新了，太多了，可以先贴代码搜索一下","createdAt":1612799978669},{"id":327,"originId":"608114c34d20cb2f7a68dd4d","articleId":34,"userId":95,"content":"theanarkh棒！","createdAt":1619072195123},{"id":328,"originId":"608115544d20cb80d168dd5c","articleId":34,"userId":95,"content":"[@theanarkh](/user/theanarkh) 棒！","createdAt":1619072340484},{"id":329,"originId":"6081157b4d20cb660268dd5e","articleId":34,"userId":95,"content":"[@theanarkh](/user/theanarkh) 哈哈","createdAt":1619072379732},{"id":330,"originId":"60815f374d20cb775168e124","articleId":34,"userId":156,"content":"全404啊","createdAt":1619091255317},{"id":331,"originId":"608193e94d20cbef1c68e20a","articleId":34,"userId":147,"content":"[@Vibing](/user/Vibing) 直接进入github仓库","createdAt":1619104745065},{"id":332,"originId":"607ff53b4d20cbfafb68da55","articleId":36,"userId":89,"content":"多写点内容，不然以为是广告的，没人愿意点的。","createdAt":1618998587102},{"id":333,"originId":"607ff60e4d20cb401668da64","articleId":36,"userId":89,"content":"自己手写rpc，有点意思。定位和性能还是要看看的","createdAt":1618998798630},{"id":334,"originId":"6080cd7d4d20cb81ba68db7a","articleId":36,"userId":145,"content":"这，真 纯手写。全自己实现的😂       ","createdAt":1619053949977},{"id":335,"originId":"6080e1504d20cb19f368dc24","articleId":36,"userId":33,"content":"直接socket，http都不带用的。这维护起来会不会太累啊","createdAt":1619059024255},{"id":336,"originId":"608122364d20cb7ca768ddee","articleId":36,"userId":157,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 针对长连接游戏的","createdAt":1619075638392},{"id":337,"originId":"608122ee4d20cb14dd68ddf9","articleId":36,"userId":158,"content":"真·纯手写实现，零依赖呀😂","createdAt":1619075822067},{"id":338,"originId":"60535471dac5420e83e2836c","articleId":37,"userId":89,"content":"稍稍介绍一下","createdAt":1616073841419},{"id":339,"originId":"60544999dac54292cde285ef","articleId":37,"userId":160,"content":"搜索很快啊","createdAt":1616136601539},{"id":340,"originId":"60549118dac5422123e287a7","articleId":37,"userId":125,"content":"欢迎加入幸福里，https://cnodejs.org/topic/5fe0776e98427e3c116a9a3c","createdAt":1616154904645},{"id":341,"originId":"60556116dac54250ace2886f","articleId":37,"userId":111,"content":"TypeError: t is undefined[详细了解]  Player.jsx:168:4","createdAt":1616208150898},{"id":342,"originId":"6055af18dac5422a93e288e2","articleId":37,"userId":111,"content":"mutating the [[Prototype]] of an object will cause your code to run very slowly; instead create the object with the correct initial [[Prototype]] value using Object.create\r\nTypeError: r.render is not a function\r\n 2.3b285b1a.chunk.js:2:533350","createdAt":1616228120032},{"id":343,"originId":"60581430dac542cb1ee28c85","articleId":37,"userId":90,"content":"楼主想一起用eletron来写一个集成化的客户端吗？ 目前我QQ音乐和网易云音乐都用，所以想在上层做一个统一登录，用户登录的数据保存在icloud就行。","createdAt":1616385072276},{"id":344,"originId":"605953fddac54259a7e28f39","articleId":37,"userId":159,"content":"[@jxycbjhc](/user/jxycbjhc) 我不会 electron 啊。再说我觉得 web 已经足够了，没必要做客户端。","createdAt":1616466941722},{"id":345,"originId":"60595c53dac5421090e28f8f","articleId":37,"userId":90,"content":"[@enzeberg](/user/enzeberg) 我也不会electron，现学先用，web端感觉太麻烦了，还得需要域名，带宽之类端，还是喜欢客户端自己用。","createdAt":1616469075234},{"id":346,"originId":"6059b534dac542eb42e2920e","articleId":37,"userId":159,"content":"[@jxycbjhc](/user/jxycbjhc) 嗯嗯，你可以自己做一个。我现在手头上好几个项目，没时间。","createdAt":1616491828084},{"id":347,"originId":"6059f8d0dac5424498e292df","articleId":37,"userId":90,"content":"[@enzeberg](/user/enzeberg) 👌","createdAt":1616509136704},{"id":348,"originId":"605c2ae3dac542af3ce298c3","articleId":37,"userId":161,"content":"狼叔回复你了，哈哈","createdAt":1616653027801},{"id":349,"originId":"605d4b885ac88c4aea15b226","articleId":37,"userId":159,"content":"[@tzbcf](/user/tzbcf) 嗯嗯。","createdAt":1616726920051},{"id":350,"originId":"605d6a835ac88ca91a15b2c0","articleId":37,"userId":80,"content":"人生观人与人","createdAt":1616734851331},{"id":351,"originId":"60743f3d4d20cb08f168b8f7","articleId":37,"userId":159,"content":"欢迎大家发表看法！","createdAt":1618231101141},{"id":352,"originId":"6074ee784d20cbdc4368b9cc","articleId":37,"userId":162,"content":"学习了~点赞","createdAt":1618275960599},{"id":353,"originId":"607540ce4d20cb014f68bbfa","articleId":37,"userId":74,"content":"[@xiashulin](/user/xiashulin) 111","createdAt":1618297038771},{"id":354,"originId":"607ff2be4d20cb55a168da28","articleId":37,"userId":159,"content":"有小伙伴有兴趣用 Vue 把铜钟开发出来吗？","createdAt":1618997950584},{"id":355,"originId":"60704e214d20cbcb1b68b1e9","articleId":38,"userId":164,"content":"![2021-04-09_204223.jpg](//static.cnodejs.org/FmCgmHWrNBiHp7IYTHffhuohXe5D)\r\n\r\n最近用的这个挺好用的了 [https://github.com/zfb55/tz](https://github.com/zfb55/tz)","createdAt":1617972769616},{"id":356,"originId":"607284a54d20cb61c268b3d3","articleId":38,"userId":165,"content":"[ExpressVPN-大陆翻墙首选速度快稳定抗封锁的优质VPN](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。无论你是用来观看Youtube还是看Nextflix都非常流畅，浏览Google就更不在话下了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 SSR，V2ray 代理，网络是CN2 GIA，连接速度快，并且官方保证IP可用，提供5个IP地址，支持支付宝付款，非常方便中国的网友购买使用。无论你是用来观看Youtube还是看Nextflix都非常流畅，浏览Google就更不在话下了。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)","createdAt":1618117797370},{"id":357,"originId":"60739d8b4d20cb929768b4df","articleId":38,"userId":166,"content":"不要在论坛里发这些吧……忘了上次是怎么被封的吗","createdAt":1618189707139},{"id":358,"originId":"607f978c4d20cb22a568d8f1","articleId":38,"userId":167,"content":"发吧~~反正不用备案了","createdAt":1618974604620},{"id":359,"originId":"6078136f4d20cb525a68c8dc","articleId":45,"userId":171,"content":"登录一遍，账号密码都被记下来了","createdAt":1618482031794},{"id":360,"originId":"6078144c4d20cb36a368c8e2","articleId":45,"userId":170,"content":"[@weiweicat333](/user/weiweicat333) 这个是信任问题，也在考虑这个问题，所以现在的设计能保证数据库被拖库泄露之后也不会泄露连接密码，服务端不会储存连接密码，这就像注册账号一样，还要考虑网站是不是会使用你的号去撞库一样，后面会出一个本地客户端版本和web版搭配使用","createdAt":1618482252771},{"id":361,"originId":"6078f7854d20cb1f8a68cb01","articleId":45,"userId":31,"content":"正巧前阵子我也写了一个 [命令行管理](https://github.com/yviscool/ssh-manager)  支持 pem 和密码登录，默认支持 lrzsz 上传下载。","createdAt":1618540421407},{"id":362,"originId":"5e17d8451225c9423dcd75af","articleId":46,"userId":173,"content":"楼主，蓝灯iOS版什么时候出呢？还有，Astrill比ExpressVPN还贵，有优惠券吗？","createdAt":1578620997292},{"id":363,"originId":"5ef7d70d472c7975b04b7a22","articleId":46,"userId":174,"content":"推荐光年VPN。无限流量，SSR节点，采用BGP中继，速度快稳定。注册还可以免费VIP试用。现在有限时特惠活动24+6。送大家一个折扣码：2WEs5aVO\r\n\r\n![光年VPN](//static.cnodejs.org/Fh0tPq5vFtt14fLHcL1RnbD-PojW)\r\n\r\nhttps://lightyearvpn.com/\r\nhttps://lightyearapp.life/","createdAt":1593300749008},{"id":364,"originId":"5f0ade8ae39d0e5152203323","articleId":46,"userId":175,"content":"感谢楼主的推荐！在这里仅补充一点：这个论坛都是一些程序猿，所以自己搭建[翻墙软件](https://www.vpndada.com/best-vpns-for-china-cn/)的能力也是有的。如果自己搭建梯子，可以考虑通过自己搭建V2Ray、SSR、Trojan等服务器来实现。\r\n\r\n如果不想自己搭建，可以根据楼主和其他网站的[vpn排行](https://www.vpndada.com/best-vpns-for-china-cn/)，选用靠谱的付费VPN（包括[电脑VPN](https://www.vpndada.com/vpn-for-pc-cn/)、[安卓VPN](https://www.vpndada.com/android-vpn-for-china-cn/)等）：\r\n\r\n# [VPN推荐](https://www.vpndada.com/best-vpns-for-china-cn/)\r\n\r\n[**ExpressVPN**](https://www.vpndada.com/go/expressvpn-cn) :  (参考：[ExpressVPN中国评测](https://www.vpndada.com/expressvpn-review-cn/)）\r\n[**NordsVPN**](https://www.vpndada.com/go/nordvpn-cn): (参考：[NordVPN中国评测](https://www.vpndada.com/nordvpn-review-cn/)）\r\n[**VyprVPN**](https://www.vpndada.com/go/vyprvpn-cn): (参考：[VyprVPN中国评测](https://www.vpndada.com/vyprvpn-review-cn/)）\r\n","createdAt":1594547850416},{"id":365,"originId":"5f190200f0739b0e62d1184c","articleId":46,"userId":176,"content":"分享一个国外注册运营的安卓用的梯子，银行级别加密，绝对匿名，无隐私日志记录。安全靠谱省心\r\nhttps://github.com/jiashihar/yanfa","createdAt":1595474432543},{"id":366,"originId":"5f339a6e6c9ee864cf0e4a32","articleId":46,"userId":177,"content":"分享一个现在有免费用的了可以试试的\r\n[https://github.com/myjiasuqi/jiasu/wiki](https://github.com/myjiasuqi/jiasu/wiki)","createdAt":1597217390793},{"id":367,"originId":"5f5ef0eec1c67a7dd9afe75f","articleId":46,"userId":178,"content":"27 美元一年\r\n250G 流量每个月\r\n使用方便，速度正常稳定，不会被封。我自己使用多年的。\r\nhttps://reurl.cc/MdXAlv","createdAt":1600057582141},{"id":368,"originId":"5f6b46a5c1c67a7dd9affba1","articleId":46,"userId":179,"content":"阿里云翻墙VPN测速与推荐\r\n[https://wall101.com/fanqiang-vpn/](https://wall101.com/fanqiang-vpn/)","createdAt":1600865957657},{"id":369,"originId":"5f6d8c8e72af8c02d3f8d544","articleId":46,"userId":180,"content":"我看这边有个阿里云测速的[VPN网站](https://wall101.com)\r\n感觉好多人都推一些最贵的例如[Express](https://wall101.com/fanqiang-vpn/expressvpn/)只是为了赚钱。\r\n这个网站有一些VPN速度的[实测](https://wall101.com/fanqiang-vpn/)感觉还是靠谱一些","createdAt":1601014926715},{"id":370,"originId":"5fddcad50f99cbcb285e38f7","articleId":46,"userId":181,"content":"**[express](https://is.gd/0J3OGa)最好用的呀**","createdAt":1608370901553},{"id":371,"originId":"5fe41db198427eb4cb6aa1f2","articleId":46,"userId":112,"content":"如果懂技术、有条件，各位可以考虑购买国外的VPS服务器（如[DigitalOcean](https://www.vpndada.com/how-to-setup-a-shadowsocks-server-on-digitalocean/)），自己搭建梯子，推荐使用[SSR](https://www.vpndada.com/shadowsocks-tutorial-cn/)、[V2Ray](https://www.vpndada.com/v2ray-tutorial-cn/)、Trojan等技术（都是开源免费的）搭建。\r\n\r\n如果懒得折腾或者不懂技术，可以参考网上的[翻墙软件VPN推荐、VPN排行](https://www.vpndada.com/best-vpns-for-china-cn/)购买靠谱的VPN（如[电脑VPN](https://www.vpndada.com/vpn-for-pc-cn/)、[安卓VPN](https://www.vpndada.com/android-vpn-for-china-cn/)等）作为科学上网的工具。\r\n\r\n根据很多网站的推荐来看，靠谱的VPN有：\r\n\r\n**[ExpressVPN](https://www.vpndada.com/go/expressvpn-cn)**（参见：[ExpressVPN中国评测](https://www.vpndada.com/expressvpn-review-cn/)）\r\n**[NordVPN](https://www.vpndada.com/go/nordvpn-cn)**（参见：[NordVPN中国评测](https://www.vpndada.com/nordvpn-review-cn/)）\r\n**[VyprVPN](https://www.vpndada.com/go/vyprvpn-cn)**（参见：[VyprVPN中国评测](https://www.vpndada.com/vyprvpn-review-cn/)）\r\n\r\nGood Luck!","createdAt":1608785329795},{"id":372,"originId":"6007f29f5d04ac2659217a8f","articleId":46,"userId":182,"content":"对于[翻墙](https://www.fanqiangzhe.com/)来说，现在好用的[翻墙软件](https://www.fanqiangzhe.com/software/)确实已经越来越少了，而[免费VPN](https://www.fanqiangzhe.com/post/free-vpn-guide/)已经几乎全都不好用了。如果懂技术，可以自己搭建科学上网用的梯子。","createdAt":1611133599645},{"id":373,"originId":"6010da9303d797320666d86b","articleId":46,"userId":183,"content":"# 熊猫VPN完全不靠谱！！！ 千万不要用！！！\r\n我是Dr. Wall墙博士，我深耕翻墙领域好多年，见过了各种招摇撞骗的手段。\r\n## 楼主推荐的熊猫VPN一点都不靠谱\r\n我现在都没搞明白[PandaVPN](https://dr-wall.com/pandavpn/)到底是 塞舌尔，还是美国，还是 香港，甚至是中国的公司？详细分析，请看[熊猫VPN的招摇撞骗之路](https://dr-wall.com/pandavpn/)\r\n我个人推荐更为可靠的[ExpressVPN](https://dr-wall.com/expressvpn/)。\r\n[蓝灯](https://dr-wall.com/lanternvpn/)也同样不靠谱！！！","createdAt":1611717267206},{"id":374,"originId":"602f691303d7974e7367035f","articleId":46,"userId":184,"content":"**赞同楼上的意见，很多专业的人士反馈，熊猫VPN在安全性能上还是有待提升的，其实取而代之的有很多[比较好用的VPN](https://wallvpn.com/best-vpn-china/)，比如[PureVPN](https://wallvpn.com/purevpn/), [Surfshark VPN](https://wallvpn.com/surfshark/), [ExpressVPN](https://wallvpn.com/expressvpn/), [NordVPN](https://wallvpn.com/nordvpn/)等，VPN市场也是变幻莫测的，这些是2021年最新市面上反馈比较好的VPN。**","createdAt":1613719827368},{"id":375,"originId":"605dd2001b338782fb5daab7","articleId":46,"userId":165,"content":"[ExpressVPN购买使用教程-大陆可用的VPN，速度快，抗封锁 2020版](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 Shadowsocks 代理，网络是CN2 Gia，连接速度快，并且官方保证IP可用，提供5个IP地址，支持中国的支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)","createdAt":1616761344233},{"id":376,"originId":"6073c7824d20cb589b68b636","articleId":46,"userId":185,"content":"个人持不同的观点，[熊猫V PN](https://qiangwaikan.com/panda-review/)(Panda V PN)我已经用了2年多了，眼睁睁看着他家一步步做起来的，并且用的目前稳定性更高的代理翻 墙协议\r\n## 算的是一款优质的[中国V PN翻 墙](https://qiangwaikan.com/bvc/)工具\r\n当然，[ExpressV PN怎么样](https://qiangwaikan.com/express-review/)？它依然是综合实力最强的[翻 墙](https://qiangwaikan.com/gvc/)软件，并且目前仍然支持支付宝。","createdAt":1618200450967},{"id":377,"originId":"60784ecb4d20cb413968c9fa","articleId":46,"userId":186,"content":"\r\n**2021年4月更新中国国内最佳VPN推荐：**\r\n![pandavpn vpnbay.png](//static.cnodejs.org/FicfrVHOhOq6ExmMVcJUY3K_N9Er)\r\n**1.PandaVPN**\r\n* 中国大陆优化线路\r\n* 支持支付宝\r\n* 一键翻墙\r\n* 最低 $2.49/月 🎁[赠送12个月](https://mtproto.cc/go/pandavpn)\r\n* 解锁Netflix\r\n* 零日志，ECC加密\r\n\r\nPandaVPN是一家注册于赛瑟尔的VPN提供商，有专门针对中国的优化线路，支持支付宝、Paypal和信用卡等常见支付手段。\r\n\r\n[访问PandaVPN 官网](https://mtproto.cc/go/pandavpn) \r\n\r\n**2.光年VPN**\r\n* 中国大陆优化线路\r\n* 支持支付宝\r\n* 一键翻墙\r\n* 最低 $3.18/月 🎁 赠送6个月\r\n* 解锁Netflix\r\n* 零日志，安全无忧\r\n\r\n光年VPN是华人在美国创办的VPN，同样提供中国优化线路，帮助网民访问海外网络。光年VPN支持支付宝和信用卡支付，不支持Paypal。\r\n [访问 光年VPN](https://mtproto.cc/go/lightyearvpn)\r\n\r\n**3.AstrillVPN**\r\n* StealthVPN、OpenWeb协议\r\n* 支持支付宝\r\n* 一键翻墙\r\n* 最低 $10/月\r\n* 解锁Netflix\r\n\r\nAstrillVPN 是一家老牌国外VPN厂商，在中国国内可以正常使用。Astrill拥有自家开发的openweb协议，在VPN行业算是技术比较强的提供商。AstrillVPN的缺点是价格比较贵，最低也要10美元每月。\r\n[访问 Astrill VPN](https://mtproto.cc/go/astrill-vpn-tw)\r\n\r\n**4.PureVPN**\r\n* 中国大陆优化线路\r\n* 7天免费试用\r\n* 一键翻墙\r\n* 最低 $0.99/周 🎁 5折优惠订阅\r\n* 解锁Netflix\r\n* 翻墙回国\r\n\r\nPureVPN 同样是一家老牌VPN提供商，在中国大陆也提供了多年服务，官方网站在国内不可用，但服务器还可以。PureVPN日常翻墙速度不快，但优点是安全有保障，且提供翻墙回国功能。\r\n[访问 PureVPN 官网](https://mtproto.cc/go/purevpn)\r\n\r\n**5.Just My Socks**\r\n\r\n\r\n* 中国大陆优化线路\r\n* 可选 IPLC 专线，不过墙\r\n* 支持支付宝\r\n* 最低 $5.88/月 🎁 优惠码：[JMS9272283](https://mtproto.cc/go/just-my-socks)\r\n* 部分节点解锁Netflix\r\n* 专用翻墙协议\r\n\r\nJust My Socks 是知名主机商搬瓦工旗下的代理服务提供商，俗称的“搬瓦工机场”。Just My Socks 提供的并非VPN协议，而是Shadowsocks和Vmess代理协议。使用Just My Socks 需要配合第三方软件使用。\r\n[Just My Socks 免翻墙地址](https://mtproto.cc/go/just-my-socks)\r\n","createdAt":1618497227580},{"id":378,"originId":"6077ea684d20cb0f1a68c6f0","articleId":47,"userId":187,"content":"更新了示例","createdAt":1618471528003},{"id":379,"originId":"5e98263bd870946c6b6bca06","articleId":49,"userId":189,"content":"是最新的   看了express封装的  讲的可以","createdAt":1587029563097},{"id":380,"originId":"5ea15a51d870946c6b6bdbe3","articleId":49,"userId":190,"content":"正好需要 谢谢分享","createdAt":1587632721788},{"id":381,"originId":"5ea580f10275394e768835ca","articleId":49,"userId":99,"content":"[@wuwangju0](/user/wuwangju0) 拿走不谢，非常好的入门教程","createdAt":1587904753997},{"id":382,"originId":"5ea7bff930176508da9b6c5f","articleId":49,"userId":190,"content":"[@phonegap100](/user/phonegap100) 楼主 后面还会更新吗","createdAt":1588051961200},{"id":383,"originId":"5eb35e2ee785ec40b04fae29","articleId":49,"userId":99,"content":"[@wuwangju0](/user/wuwangju0) 多关注一下","createdAt":1588813358703},{"id":384,"originId":"5ebe48bbe785ec40b04fcfe0","articleId":49,"userId":190,"content":"[@xuemeifenglin](/user/xuemeifenglin) nodejs 呵呵  不是特别难哦","createdAt":1589528763521},{"id":385,"originId":"5ed5cc13b703280f0bcb7e11","articleId":49,"userId":99,"content":"[@wuwangju0](/user/wuwangju0) deno出来了 可以学一下","createdAt":1591069715502},{"id":386,"originId":"5ee07d5582b588109b6482a9","articleId":49,"userId":191,"content":"[@wuwangju0](/user/wuwangju0) 深入还是有难度的 , 框架都一大堆  express koa eeg nestjs  还有很多不知名的.","createdAt":1591770453876},{"id":387,"originId":"5ef95a9d472c7975b04b7f3b","articleId":49,"userId":99,"content":"[@xuemeifenglin](/user/xuemeifenglin) 加油","createdAt":1593399965454},{"id":388,"originId":"5f45cbc2e8a599751bb5111a","articleId":49,"userId":191,"content":"[@phonegap100](/user/phonegap100) deno有教程吗","createdAt":1598409666069},{"id":389,"originId":"5f5ae582c1c67a7dd9afe345","articleId":49,"userId":99,"content":"[@xuemeifenglin](/user/xuemeifenglin) 你看看官方文档 我这里没有哦","createdAt":1599792514915},{"id":390,"originId":"5f65e12bc1c67a7dd9aff350","articleId":49,"userId":100,"content":"谢谢分享 ","createdAt":1600512299346},{"id":391,"originId":"5f709205f9736b02ceada91d","articleId":49,"userId":191,"content":"[@phonegap100](/user/phonegap100) 好吧 还是感谢一下","createdAt":1601212933397},{"id":392,"originId":"60779a674d20cb60ba68c49b","articleId":49,"userId":99,"content":"[@xuemeifenglin](/user/xuemeifenglin) 好久没有来了 不客气的","createdAt":1618451047641},{"id":393,"originId":"607791674d20cb16d668c442","articleId":50,"userId":162,"content":"学习了~","createdAt":1618448743470},{"id":394,"originId":"607795ae4d20cb11a068c465","articleId":50,"userId":93,"content":"[@xiaolilir](/user/xiaolilir) 一起加油^_^","createdAt":1618449838572},{"id":395,"originId":"606bd4d44d20cb69e468a4b3","articleId":53,"userId":95,"content":"这是首发？","createdAt":1617679572791},{"id":396,"originId":"606c0e594d20cbdb8768a618","articleId":53,"userId":192,"content":"[@luo1234560](/user/luo1234560) 是的","createdAt":1617694297186},{"id":397,"originId":"607554744d20cb826868bcb8","articleId":53,"userId":193,"content":"支持一下，我先去试试水去","createdAt":1618302068083},{"id":398,"originId":"6074f5134d20cb1ef868ba12","articleId":54,"userId":195,"content":"支持一下~","createdAt":1618277651068},{"id":399,"originId":"53cb7c07c9507b40443ae174","articleId":55,"userId":197,"content":"用着不错哦","createdAt":1405844487286},{"id":400,"originId":"53cb96507404f47d7f01fda6","articleId":55,"userId":196,"content":"手机也可以哦","createdAt":1405851216591},{"id":401,"originId":"53cd142673d4ce837f485442","articleId":55,"userId":198,"content":"楼主威武，32个赞","createdAt":1405948966589},{"id":402,"originId":"53cd18f77404f47d7f48d535","articleId":55,"userId":199,"content":"不错，研究研究\r\n","createdAt":1405950199499},{"id":403,"originId":"53cd271373d4ce837f4bcc79","articleId":55,"userId":200,"content":"用着很不错，mark。","createdAt":1405953811506},{"id":404,"originId":"53cd2d547404f47d7f4c9e83","articleId":55,"userId":201,"content":"小白用户,果断点赞~","createdAt":1405955412307},{"id":405,"originId":"53cd3bba7404f47d7f4f397c","articleId":55,"userId":202,"content":"你这只是用Google搜索到相应的结果并且显示，\r\n但是有些被屏蔽的网站还是不能访问， 有了vps，为什么不配一个vpn呢？\r\n这样多好  ：)","createdAt":1405959098499},{"id":406,"originId":"53cdabeb7404f47d7f6227ba","articleId":55,"userId":203,"content":"+1，有了vps直接翻出去就可以了","createdAt":1405987819596},{"id":407,"originId":"53cddf767404f47d7f6be96a","articleId":55,"userId":196,"content":"谢谢支持~  可以一起参与哦","createdAt":1406001014702},{"id":408,"originId":"53cddf857404f47d7f6bec43","articleId":55,"userId":196,"content":"谢谢支持~","createdAt":1406001029220},{"id":409,"originId":"53cf6523c528f403123469ea","articleId":55,"userId":196,"content":"[@snoopy](/user/snoopy) 怎么搭配vpn翻？","createdAt":1406100771863},{"id":410,"originId":"53d05375c528f40312622b1a","articleId":55,"userId":203,"content":"用secureCRT就可以轻松翻墙，传输数据加密，网上搜到的设置教程资源\r\n[http://blog.csdn.net/linuxoostudy/article/details/7097418](http://blog.csdn.net/linuxoostudy/article/details/7097418)","createdAt":1406161781859},{"id":411,"originId":"54377e66d73c7ebc269adb65","articleId":55,"userId":196,"content":"已增加https支持","createdAt":1412922982477},{"id":412,"originId":"5437a327d73c7ebc269adb8b","articleId":55,"userId":204,"content":"赞一个\r\n不过自己有VPS的话还是搭个VPN/ShadowSocks之类的全方位服务比较舒服","createdAt":1412932391621},{"id":413,"originId":"5437ad8dd73c7ebc269adba2","articleId":55,"userId":196,"content":"[@ravenwang](/user/ravenwang) 也可以搭建一个给身边的人用嘛","createdAt":1412935053588},{"id":414,"originId":"5437b3d8d73c7ebc269adbb9","articleId":55,"userId":205,"content":"我想知道https 怎么搞的...\r\n\r\nGoogle被墙后,我常用的是 https://wen.lu ","createdAt":1412936664059},{"id":415,"originId":"5437b671d73c7ebc269adbc3","articleId":55,"userId":196,"content":"[@magicdawn](/user/magicdawn) 你看一下bin/run中的代码","createdAt":1412937329065},{"id":416,"originId":"5437b6aad73c7ebc269adbc5","articleId":55,"userId":205,"content":"PEM pass phrase 什么东西 ... ","createdAt":1412937386529},{"id":417,"originId":"5437ba7bd73c7ebc269adbc8","articleId":55,"userId":205,"content":"部署了一个非https的在heroku上面 http://magicdawn.herokuapp.com/ 玩玩","createdAt":1412938363218},{"id":418,"originId":"5437cab4a220049637e4191c","articleId":55,"userId":206,"content":"不错","createdAt":1412942516519},{"id":419,"originId":"5437d9cca220049637e41924","articleId":55,"userId":196,"content":"[@magicdawn](/user/magicdawn) 你更新下代码，我之前证书有错误","createdAt":1412946380037},{"id":420,"originId":"543a57d077b7e8505808ed8e","articleId":55,"userId":207,"content":"这个不错 ，gusuoin 用了一段时间了","createdAt":1413109712689},{"id":421,"originId":"5d89af8a4f109e79ef5ff260","articleId":55,"userId":208,"content":"还是用付费VPN吧，参考这里的[VPN推荐](http://qiangwaikan.com/best-vpn-china/)，自己搭建风险太大了","createdAt":1569304458193},{"id":422,"originId":"5e95a87964259617c49a5dbf","articleId":55,"userId":209,"content":"使用付费VPN是可靠的因为付费[VPN中国](https://www.vpnranks.com/zh-hans/%e6%9c%80%e4%bd%b3vpn/%e4%b8%ad%e5%9b%bd/)保护你的匿名隐私。","createdAt":1586866297806},{"id":423,"originId":"5f083763f9700d0938eb40b1","articleId":55,"userId":182,"content":"貌似楼主提供的很多链接已经失效了，不过还是感谢分享！。就像大家建议的一样，既然使用海外VPS，与其专门建一个针对谷歌的代理，不如建一个[梯子](https://www.vpndada.com/best-vpns-for-china-cn/)，可以实现对任何网站的[科学上网](https://www.fanqiangzhe.com/)。不懂技术的话可以购买翻墙工具，参见评测文章：[VPN for China](https://www.vpndada.com/best-vpns-for-china/).","createdAt":1594373987815},{"id":424,"originId":"5f6db42972af8c02d3f8d5f9","articleId":55,"userId":210,"content":"阿里云测速下来的[VPN推荐](https://wall101.com/fanqiang-vpn/)\r\n我比较推荐的是：\r\n[光年VPN](https://wall101.com/fanqiang-vpn/lightyearvpn/)\r\n[Express](https://wall101.com/fanqiang-vpn/expressvpn/)\r\n[Astrill](https://wall101.com/fanqiang-vpn/astrillvpn/)\r\n[Panda](https://wall101.com/fanqiang-vpn/pandavpn/)","createdAt":1601025065853},{"id":425,"originId":"603701a14655ea3c5a21836a","articleId":55,"userId":211,"content":"# 大佬牛逼\r\n小白可以找一些现成的[翻墙软件](https://dr-wall.com)来用, 得向能[自建梯子](https://dr-wall.com/tizi/)的大佬学习一个。","createdAt":1614217633366},{"id":426,"originId":"60407a324655eaa715219a90","articleId":55,"userId":184,"content":"群主很牛啊，现在要想访问海外网站都是直接寻找[翻墙VPN](https://wallvpn.com)来实现的。给大家推荐几款在[中国还能用的VPN](https://wallvpn.com/best-vpn-china/)吧，希望对后面需要翻墙vpn的人有所帮助：\r\n\r\n**在挑选最佳中国VPN时，主要从以下几个方面进行评估：**\r\n\r\n* 速度快：VPN翻墙软件的连接速度至关重要。较低的延迟可缩短请求的时间，较大的带宽可传输更多的数据。一款好的VPN可流畅的观看4K视频。\r\n* 稳定性好：拥有良好的速度，但没有良好的稳定性也是惘然。因此，良好的稳定性也是优质VPN的标配。\r\n* 价格公道：虽说一分钱一分货，但性价比更高的VPN必定会受到更多用户的喜爱。\r\n* 允许多台设备同时连接：这就意味着我可以与多个同事或者朋友共用一个帐号。\r\n* 遍布全球的高速服务器（VPN节点）：除了遍布全球的VPN节点可供选择之外，中国周边国家和地区拥有大量的服务器也非常重要。\r\n* 使用简单：我们使用VPN翻墙软件的目的是工作、学习或者娱乐。复杂繁琐的VPN必定会影响我们工作和学习的效率，也会影响我们娱乐的心情。一款优质的VPN翻墙软件只需登录帐号就可以使用，不需要任何多余的配置。\r\n* 具有强大的隐私安全功能：任何人都不希望自己的帐号密码被泄漏，更不想在聊天或者浏览网页时被一双眼睛盯着。一款优质的VPN可确保用户在互联网上永远保持匿名，且不会收集用户的任何网络日志。\r\n* 兼容性好：良好的兼容性则意味着你可以在台式电脑、笔记本电脑、平板电脑、手机、智能电视、游戏机等设备上自由简单的使用VPN。\r\n* 支持多种付款方式：一款优质的VPN应支持多种付款方式，包括：支付宝、微信、银联卡、信用卡、Paypal、比特币等等。\r\n* 提供24/7的客户服务：是否提供24/7的客户支持，也是评判一个VPN的重要标准。在使用VPN的过程中遇到任何问题，都可以第一时间找客服解决，可大大提供我们的客户体验。\r\n\r\n**以下是从上百款VPN中挑选的5款最佳中国VPN：**\r\nTOP 1：[ExpressVPN](https://wallvpn.com/go/expressvpn/)：最佳的中国VPN翻墙软件\r\nTOP 2：[PureVPN](https://wallvpn.com/go/purevpn/)：1.32美金/月，性价比最高且支持翻墙回国的VPN\r\nTOP 3：[Surfshark](https://wallvpn.com/go/surfsharkvpn/)：唯一不限设备数量的VPN\r\nTOP 4：[Ivacy VPN](https://wallvpn.com/go/ivacyvpn/)：1.16美金/月，价格最低的VPN翻墙软件之一\r\nTOP 5：[NordVPN](https://wallvpn.com/go/nordvpn/)：最坚挺稳定的VPN翻墙软件\r\n以上的这些VPN，都是目前比较热门与主流的而且还能用的VPN推荐。希望对需要VPN的人有作用啦。\r\n","createdAt":1614838322208},{"id":427,"originId":"604ef1954655eac57f21b7df","articleId":55,"userId":80,"content":"牛逼啊","createdAt":1615786389225},{"id":428,"originId":"60612f632357ddd882f9d792","articleId":55,"userId":95,"content":"可以啊","createdAt":1616981859046},{"id":429,"originId":"606138982357dd0139f9d7bd","articleId":55,"userId":95,"content":"[@moshengqing](/user/moshengqing)不错呀","createdAt":1616984216074},{"id":430,"originId":"6072840e4d20cba60768b3b0","articleId":55,"userId":165,"content":"[ExpressVPN-大陆翻墙首选速度快稳定抗封锁的优质VPN](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 SSR，V2ray 代理，网络是CN2 GIA，连接速度快，并且官方保证IP可用，提供5个IP地址，支持支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)","createdAt":1618117646282},{"id":431,"originId":"6073f0914d20cb84ec68b6f6","articleId":55,"userId":185,"content":"楼主有心了，不过貌似现在访问不了了呢。G oogle代 理还是很有局限啊，不能代 理其他app流量。还是用付费[翻 墙软件](https://qiangwaikan.com/gvc/)省事儿一些\r\n## 这里有一些好用的[V PN推荐](https://qiangwaikan.com/bvc/)","createdAt":1618210961752},{"id":432,"originId":"5831927667db500b79c100ef","articleId":56,"userId":213,"content":"棒极了！！！","createdAt":1479643766849},{"id":433,"originId":"5831929a67db500b79c100f1","articleId":56,"userId":213,"content":"楼主的图截得太好了","createdAt":1479643802854},{"id":434,"originId":"5831985867db500b79c100f5","articleId":56,"userId":98,"content":"开门，查水表","createdAt":1479645272017},{"id":435,"originId":"583198af6efc292b79ff0b57","articleId":56,"userId":214,"content":"[@zengming00](/user/zengming00) 老司机啊，还会查水表\n          使用[cnode[antd-moblie]版](https://github.com/dianjie/cnodeapp)","createdAt":1479645359282},{"id":436,"originId":"583241d2892500ee7867c142","articleId":56,"userId":139,"content":"老乡，收快递了\r\n顶一个\r\n","createdAt":1479688658617},{"id":437,"originId":"583246c1892500ee7867c144","articleId":56,"userId":215,"content":"感谢分享,已经成功","createdAt":1479689921927},{"id":438,"originId":"583253ec67db500b79c10107","articleId":56,"userId":216,"content":"翻着墙，google啥的都能打开，就是打不开 http://gfw.press 提示502，不知道为啥？你们都能打开吗？","createdAt":1479693292456},{"id":439,"originId":"5832559f67db500b79c10109","articleId":56,"userId":217,"content":"mac版的gfw.press客户端，步骤同上\r\n链接: https://pan.baidu.com/s/1kU5thCb 密码: mbpv","createdAt":1479693727734},{"id":440,"originId":"5832623e0249714d79d41b4a","articleId":56,"userId":218,"content":"老乡，社区送温暖……","createdAt":1479696958134},{"id":441,"originId":"58326a796efc292b79ff0b8e","articleId":56,"userId":219,"content":"请问能有全局代理的客户端吗？如果是玩游戏下载数据包的话，不翻墙很慢的\r\n已经找到了，就是你说的SocksCap64。。。","createdAt":1479699065640},{"id":442,"originId":"58326d7e67db500b79c10119","articleId":56,"userId":220,"content":"![untitled1.png](//static.cnodejs.org/FobLaa_NnXoei45cVjJV1tKWtVh7)","createdAt":1479699838558},{"id":443,"originId":"5832928f67db500b79c10125","articleId":56,"userId":212,"content":"[@jowang2016](/user/jowang2016) 你上**ipip.net**这个网址.  如果显示你的ip地址是在国内.那么你的翻樯软件可能是根据host或者dns原理实现翻樯.并没有远程服务器提供中转服务","createdAt":1479709327192},{"id":444,"originId":"583293b8892500ee7867c164","articleId":56,"userId":212,"content":"[@lumia2046](/user/lumia2046) 对的,就是SocksCap64.由于是免费的,所以稳定性肯定达不到需求.个人还是推荐. [付费服务](https://shadowsocksr.com/)","createdAt":1479709624648},{"id":445,"originId":"5832bbab892500ee7867c185","articleId":56,"userId":215,"content":"配合SocksCap64好像用不了啊![xxx.png](//static.cnodejs.org/FpwXKZq_Q1QnV47yvxuhoCWGBIXw)","createdAt":1479719851959},{"id":446,"originId":"5832bdcc892500ee7867c18a","articleId":56,"userId":212,"content":"[@holyselina](/user/holyselina) GFW.Press我没试过配合sockscap64.我等会试试.配合SSR是没有问题的","createdAt":1479720396233},{"id":447,"originId":"5832dd8e0249714d79d41b8b","articleId":56,"userId":221,"content":"赞!!!多谢","createdAt":1479728526117},{"id":448,"originId":"583304aa892500ee7867c1b7","articleId":56,"userId":24,"content":"一直使用 host 的路过哎 ","createdAt":1479738538509},{"id":449,"originId":"5833c19e892500ee7867c1dd","articleId":56,"userId":212,"content":"[@falost](/user/falost) 当你需要他国ip购买商品的时候就没办法了。。。\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1479786910912},{"id":450,"originId":"5833c3166efc292b79ff0bff","articleId":56,"userId":222,"content":"Mark","createdAt":1479787286010},{"id":451,"originId":"5854646ba670f31b6b4607d0","articleId":56,"userId":223,"content":"gfw press 能在国内直接购买吗？貌似不行。\r\n\r\n别用国内付费VPN服务，**Green就是教训**。\r\n别想着“免费”，能用的付费vpn得花钱，不便宜，**便宜的根本没法用**，几十块一年的等于智商税。\r\n**没有100%稳定高速的服务**，特殊时段，即使付费vpn也不能总是“高速稳定”，别指望一年365天一天24小时随时1080p油管。\r\n一线国外付费VPN能保证的是“**较好**”的连通率和速度，不完美，但至少能用google，gmail和可接受的油管速度，这仍是目前最好的方案。\r\n\r\n**国内还能用支付宝买到**的国外付费vpn推荐：\r\n\r\n## [ExpressVPN](https://indx.cc/exp) \r\n\r\n全球148+服务器所在地 / 无限流量 / 多协议，包括openVPN / 一键连接 / 同时3台设备 / 256-bit AES加密 / 支付宝支付 / 支持路由器连接 / 完全IP隐藏 / 零日志 / 全终端覆盖 / 30天无条件退款 / Split tunneling技术 + 浏览器插件，同时访问内外网 / **速度相对最快**\r\n\r\n## [VyprVPN](https://indx.cc/vyr)\r\n\r\n70+自有服务器所在地，200,000+IP地址 / 无限流量 / 多协议，独家混淆协议 / 一键连接 / 同时5台设备 / 支持P2P / 变色龙加密，**连接相对最稳定** / 支付宝支付 / 支持路由器连接 / NAT安全机制 / DNS加密 / 全终端覆盖 / 2年款最大优惠 / 30天无条件退款 / 按程序控制网络技术，同时访问内外网\r\n\r\n## [Nord](https://indx.cc/nrd)\r\n\r\n3400+服务器 / 无限流量 / 支持Onion over vpn / 一键连接 / 同时6台设备 / 支持P2P / 双重加密 / 支付宝支付 / 支持路由器连接 / CyberSec安全技术 / 零日志 / 专业客户端 / 2年款最大优惠 / 随时退款 / 浏览器代理插件，同时访问内外网 / **随时退款**\r\n\r\n不推荐自架，单IP长期很难可靠，除非你想反复切IP（要花钱），可以选IP池比较大的：[Vultr](https://www.vultr.com/?ref=6996621)，但加上换的IP整体成本往往高于付费VPN。\r\n\r\n[付费vpn推荐](https://www.wallmama.com/2018/05/%E5%93%AA%E7%A7%8D%E4%BB%98%E8%B4%B9vpn%E6%AF%94%E8%BE%83%E7%A8%B3%E5%AE%9A/)\r\n","createdAt":1481925739196},{"id":452,"originId":"5854e950041880f23fd80ce6","articleId":56,"userId":91,"content":"![switchomega0.png](//static.cnodejs.org/Fn1zJIB1oLbkEnsDBllqNtd5d0TH) 没有switchomega的","createdAt":1481959760261},{"id":453,"originId":"5854e9b5041880f23fd80ce8","articleId":56,"userId":91,"content":"少个y","createdAt":1481959861549},{"id":454,"originId":"5855099e92fe69322502afe6","articleId":56,"userId":91,"content":"好像没成功","createdAt":1481968030940},{"id":455,"originId":"5b4382a1e374eeab6929d571","articleId":56,"userId":224,"content":"从来不要去相信什么永久免费，免费的才是最贵的，v pn的话，推荐用黄金青蛙的[VyprVPN](https://www.goldenfrog.com/zh/vyprvpn?offer_id=174&amp;aff_id=3008)或者[expressVPN](http://www.linkev.com/?a_fid=clover)，老牌子，值得拥有 •ᴗ•","createdAt":1531151009714},{"id":456,"originId":"5d89af074f109e79ef5ff257","articleId":56,"userId":208,"content":"免费的早就凉了，可以看看这里[付费VPN推荐](http://qiangwaikan.com/best-vpn-china/)","createdAt":1569304327111},{"id":457,"originId":"5e5f050ea72b853f100458c9","articleId":56,"userId":165,"content":"[ExpressVPN购买使用教程-大陆可用的VPN，速度快，抗封锁 2020版](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 Shadowsocks 代理，网络是CN2 Gia，连接速度快，并且官方保证IP可用，提供5个IP地址，支持中国的支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)\r\n","createdAt":1583285518633},{"id":458,"originId":"5e5f2494b5a36940fe1cec25","articleId":56,"userId":3,"content":"史上最强机场：[搬瓦工官方机场](https://justmysocks1.net/members/aff.php?aff=5504)","createdAt":1583293588362},{"id":459,"originId":"5ebd1d31e785ec40b04fcc0b","articleId":56,"userId":225,"content":"有夥伴兒嘗試過嗎，仍然有效？看起來很簡單，想試一下。","createdAt":1589452081717},{"id":460,"originId":"5ebfd86e2d0afc4087f55fb3","articleId":56,"userId":3,"content":"https://free-ssr.xyz","createdAt":1589631086793},{"id":461,"originId":"5f1901524b61050e36e7bc6a","articleId":56,"userId":176,"content":"前几年很火，但是现在已经失效了吧，推荐个安卓用的，稳定运营三四年了。\r\nhttps://github.com/jiashihar/yanfa","createdAt":1595474258246},{"id":462,"originId":"5fea942e5393a521bf545c49","articleId":56,"userId":226,"content":"现在墙那么高，免费的早就凉凉了，而且天下没有免费的午餐，免费的VPN不知道什么时候就把你带到沟里去了。\r\n如果有翻墙需求，最好还是用付费的VPN，虽然每个月要出一两美金，但至少可以使用，有了问题也可以直接找客服解决，省心省时。\r\n\r\n目前在还能使用的[中国VPN](https://www.topvpnguides.com/best-vpn-for-china-cn/)非常少了，仅剩的几根独苗且用且珍惜吧：\r\n\r\n[ExpressVPN](https://www.topvpnguides.com/go/expressvpn/)：功能强大，速度快。\r\n[PureVPN](https://www.topvpnguides.com/go/purevpn/)：能翻墙，也能翻墙回国，价格非常便宜，0.99美金。\r\n[Surfshark](https://www.topvpnguides.com/go/surfshark/)：可以同时登录多个设备，性价比很好，2.21美金/月。\r\n[Ivacy VPN](https://www.topvpnguides.com/go/ivacyvpn/)：价格低至1美金/月，能翻墙，也可以翻墙回国。\r\n\r\n这些成熟[VPN翻墙软件](https://www.topvpnguides.com/best-vpn-for-china-cn/)，每月一两美金，性价比还是可以的。","createdAt":1609208878538},{"id":463,"originId":"600e49c25d04ac1aa3218519","articleId":56,"userId":182,"content":"感谢楼主的推荐，去Github看了一下，这个项目很长时间没有更新，估计软件可能已经失效。最近几年GFW越来越先进，[好用的VPN](https://www.vpndada.com/best-vpns-for-china-cn/)已经没有几个了。根据各方面的[VPN推荐](https://www.vpndada.com/best-vpns-for-china-cn/)，看来还是使用靠谱的付费VPN比（包括[电脑VPN](https://www.vpndada.com/vpn-for-pc-cn/)、[安卓VPN](https://www.vpndada.com/android-vpn-for-china-cn/)等）比较可靠。比如这些：\r\n\r\n[**ExpressVPn**](https://okgoto.xyz/expressvpn-cn)  ([ExpressVPN中国评测](https://www.vpndada.com/expressvpn-review-cn/))\r\n[**NordVPN**](https://okgoto.xyz/nordvpn-cn)  ([NordVPN中国评测](https://www.vpndada.com/nordvpn-review-cn/))\r\n[**VyprVPN**](https://okgoto.xyz/vyprvpn-cn)  ([VyprVPN中国评测](https://www.vpndada.com/vyprvpn-review-cn/))","createdAt":1611549122520},{"id":464,"originId":"60289ee503d797cb3466fbde","articleId":56,"userId":227,"content":"# [免费VPN](https://wall101.com/free-vpn/)是来钓鱼执法的么......\r\n\r\n从来都只是听到过[免费试用的VPN](https://wall101.com/fanqiang-vpn/free/)，所有打着免费旗号的不是国宝就是骗子.......","createdAt":1613274853115},{"id":465,"originId":"6073ea3f4d20cbcad068b6cc","articleId":56,"userId":185,"content":"所以这个GF W.Press还能用吗？反正[免费V PN](https://qiangwaikan.com/free/)我是不信的，自建机 场风险很大啊，还是建议楼主早日收手。\r\n## 最好还是用一些付费好用的[翻 墙V PN](https://qiangwaikan.com/bvc/)\r\n想要长期[科 学上网](https://qiangwaikan.com/gvc/)肯定是要花银子的。","createdAt":1618209343607},{"id":466,"originId":"56cf19c880e113644d3b6a11","articleId":57,"userId":103,"content":"lantern还不错","createdAt":1456413128738},{"id":467,"originId":"56cffb34fababf686143474a","articleId":57,"userId":228,"content":"[@hpgt](/user/hpgt) 是的，它专注于vpn简单易行。其它两种也可以，麻烦点而已","createdAt":1456470836608},{"id":468,"originId":"5ae721a41b02288048bd0b47","articleId":57,"userId":229,"content":"术业有专攻，免费的才是最贵的呢呀，购买VPN吧\r\n黄金青蛙的[VyprVPN](https://www.goldenfrog.com/zh/vyprvpn?offer_id=174&aff_id=3008)或者[expressVPN](http://www.linkev.com/?a_fid=clover)\r\n\r\n在中国，更多好用的付费VPN参阅[本文](https://vpnchina.zdhweb.com)，长期更新。","createdAt":1525096868943},{"id":469,"originId":"5d89aca64f109e79ef5ff23e","articleId":57,"userId":208,"content":"免费VPN不能用了，付费的VPN更稳定一些，推荐[http://qiangwaikan.com/best-vpn-china/](http://qiangwaikan.com/best-vpn-china/)","createdAt":1569303718478},{"id":470,"originId":"5da7d6eb865a9844a301bdda","articleId":57,"userId":230,"content":"### [express](https://bit.ly/2VJq7h1)可以的","createdAt":1571280619370},{"id":471,"originId":"5e83388364259617c49a3caf","articleId":57,"userId":231,"content":"[科学上网](https://www.fq7.org/category/fq)\r\n[ExpressVPN](https://www.fq7.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n购买连接:[点我到官网](https://www.xvbelink.com/?a_fid=19912018)\r\n\r\n安全和隐私\r\nExpressVPN位于英属维尔京群岛，既不需要遵守美国数据保留制度，也不需要遵守欧盟DRD法律法规。换句话说，他们没有义务与任何政府分享他们的数据，这意味着他们不需要保留流量日志。另外英属的维尔京群岛是英国的海外主权领土，但它们不受英国监视条约的约束。\r\n\r\nExpressVPN会收集有关提升其服务质量的少量信息。此数据用于识别和解决技术问题，但无法识别用户的在线行为。换句话说，该公司不会收集任何能够显示你的IP和连接的流量日志。\r\n\r\n该公司使用AES-256密码和RSA-4096以及SHA-512 HMAC进行身份验证，这是一种非常可靠的加密方式。此外，ExpressVPN允许比特币支付。","createdAt":1585657987461},{"id":472,"originId":"5ebe3e462d0afc4087f55dda","articleId":57,"userId":232,"content":"感谢分享！\r\n\r\n最近[科学上网](https://www.fanqiangzhe.com/)越来越难，楼主提到的三种方案（Lantern、Bitnet和自己搭建ssh代理）目前基本都已经失效了，[值得推荐的VPN翻墙软件](https://www.vpndada.com/best-vpns-for-china-cn/)也越来越少。\r\n\r\n如果会搭建服务器，可以考虑自己安装SSR、V2Ray等。\r\n\r\n如果有条件购买[付费VPN](https://www.vpndada.com/best-vpns-for-china-cn/)，可以考虑下面几个：\r\n\r\n**[ExpressVPN](https://www.vpndada.com/go/expressvpn-cn)** （[Express VPN评测](https://www.vpndada.com/expressvpn-review-cn/)）\r\n**[NordVPN](https://www.vpndada.com/go/nordvpn-cn)** （[Nord VPN评测](https://www.vpndada.com/nordvpn-review-cn/)）\r\n**[PureVPN](https://www.vpndada.com/go/purevpn-cn)** （可以用来[翻墙回国](https://www.vpndada.com/vpn-into-china-cn/)）","createdAt":1589526086716},{"id":473,"originId":"5f193323f0739b0e62d11954","articleId":57,"userId":233,"content":"国外合法注册，不受任何地区政策影响\r\nhttps://github.com/jiashihar/yanfa\r\n\r\nBGP 专线，1000兆光纤网络带宽\r\n\r\n1080P流畅视频，秒刷脸书ins油管","createdAt":1595487011986},{"id":474,"originId":"5f339baa2799ce64a0aabe1d","articleId":57,"userId":177,"content":"最近用的这个还可以，主要是有免费体验 \r\n[https://github.com/myjiasuqi/jiasu/wiki](https://github.com/myjiasuqi/jiasu/wiki)","createdAt":1597217706616},{"id":475,"originId":"5f6db47d72af8c02d3f8d604","articleId":57,"userId":210,"content":"阿里云测速下来的[VPN推荐](https://wall101.com/fanqiang-vpn/)\r\n\r\n我比较推荐的是：\r\n[光年VPN](https://wall101.com/fanqiang-vpn/lightyearvpn/)\r\n[Express](https://wall101.com/fanqiang-vpn/expressvpn/)\r\n[Astrill](https://wall101.com/fanqiang-vpn/astrillvpn/)\r\n[Panda](https://wall101.com/fanqiang-vpn/pandavpn/)","createdAt":1601025149508},{"id":476,"originId":"5fed2e745393a557a0546116","articleId":57,"userId":226,"content":"感谢楼主的分享。\r\n\r\n近两年，随着“墙”越来越高，之前的蓝灯和Bitnet这些“[中国科学上网](https://wallvpn.com/)”方式都不太行了，如果自己搭建的话，就只有V2Ray还可以用。而能使用的[VPN翻墙软件](https://www.topvpnguides.com/best-vpn-for-china-cn/)也越来越少了。好用点的[中国VPN推荐](https://www.topvpnguides.com/best-vpn-for-china-cn/)如下几个：\r\n\r\n**[PureVPN](https://www.topvpnguides.com/go/purevpn/)**：也支持[海外翻墙回国](https://wallvpn.com/vpn-into-china/)\r\n**[Ivacy VPN](https://www.topvpnguides.com/go/ivacyvpn/)**：也支持[翻墙回国内](https://wallvpn.com/vpn-into-china/)\r\n**[Surfshark](https://www.topvpnguides.com/go/surfshark/)**：支持无数天设备同时登录\r\n**[ExpressVPN](https://www.topvpnguides.com/go/expressvpn/)**：速度快\r\n\r\n以上四款[VPN软件](https://www.topvpnguides.com/best-vpn-for-china-cn/)都比较好用，性价比也很高，并支持30天无理由退款，相当于可以使用免费VPN 30天。","createdAt":1609379444763},{"id":477,"originId":"5fed82575393a541fa5461cf","articleId":57,"userId":53,"content":"**[NordVPN](https://wallvpn.com/go/nordvpn/)**  和  **[PureVPN](https://wallvpn.com/go/purevpn/)** 可以了解一下。都带有付费和免费试用，觉得好用可以继续试试，不喜欢可以申请退款，售后期也比较长。","createdAt":1609400919538},{"id":478,"originId":"6007eaf05d04ac4983217a6b","articleId":57,"userId":182,"content":"感谢楼主分享！但是楼主推荐的这几款[免费VPN](https://www.fanqiangzhe.com/post/free-vpn-guide/)目前都已经基本失效，自己搭建的方法也又更新的选择。正如很多网友指出的那样，现在好用的[翻墙软件](https://www.fanqiangzhe.com/software/)已经很少，但仍然有一些付费VPN还可以使用，如果感兴趣，可以参考相关的[VPN推荐](https://www.vpndada.com/best-vpns-for-china-cn/)。","createdAt":1611131632598},{"id":479,"originId":"60289c3d03d7975d5766fbd1","articleId":57,"userId":227,"content":"# 楼上的都在胡说\r\n## 一堆翻墙的VPN都不能用，[蓝灯](https://wall101.com/fanqiang-vpn/lantern/)什么的用了还被抓！准备坑死网友吗\r\n[翻墙](https://wall101.com/fanqiang-vpn/)VPN都是通过中国多地服务器实测出来的。相比较很多博主自己在家连个网线就搞实测，这也太不科学了吧。\r\n\r\n可以看看这边的[科学上网](https://wall101.com/fanqiang-zhinan/)指南，如何避免各种骗人的坑。\r\n\r\n","createdAt":1613274173876},{"id":480,"originId":"602d6ade03d7970b7066ffcc","articleId":57,"userId":174,"content":"推荐光年VPN。无限流量，SSR节点，采用BGP中继，速度快稳定。注册还可以免费VIP试用。现在有限时特惠活动24+6。送大家一个折扣码：2WEs5aVO\r\n\r\n![光年VPN](//static.cnodejs.org/Fh0tPq5vFtt14fLHcL1RnbD-PojW)\r\n\r\nhttps://lightyearvpn.com/\r\nhttps://lightyearapp.life/","createdAt":1613589214716},{"id":481,"originId":"604f709a4655ea614a21ba2a","articleId":57,"userId":234,"content":"赛风Psiphon有人用过吗？https://psiphon.ca/\r\n最近买了新手机，测试新的梯子碰巧看到了这家，看官网说它是一款类似VPN的开源反规避工具，两会期间测试了一下运行良好，也几乎没有网络延迟和连接问题，极少遇到连接不上的情况。我在PC和手机各下了Windows和安卓端，两个都运行通畅，用来看视频和流媒体也比较快，很少遇到卡顿，但目前还没用过赛风跑游戏。总的来说，赛风还是不错的。 ","createdAt":1615818906873},{"id":482,"originId":"605dd1c31b3387c3d35daab1","articleId":57,"userId":165,"content":"[ExpressVPN购买使用教程-大陆可用的VPN，速度快，抗封锁 2020版](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 Shadowsocks 代理，网络是CN2 Gia，连接速度快，并且官方保证IP可用，提供5个IP地址，支持中国的支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)","createdAt":1616761283439},{"id":483,"originId":"6073cba24d20cb6b1a68b654","articleId":57,"userId":185,"content":"老外有句谚语，如果有免费的产品，那么你就是产品。\r\n什么翻 墙被抓其实也不必担心，不管你用什么软件[科学 上网翻 墙](https://qiangwaikan.com/gvc/)，都无法避免的，别再网上乱发言就行。\r\n\r\n## 以下是我[推荐的中国V PN翻 墙软件](https://qiangwaikan.com/bvc/)\r\n\r\n- » No.1 [ExpressV PN怎么样](https://qiangwaikan.com/express-review/)？：速度优秀，带宽带看视频不卡，信用好，支持30天退款，支持主流操作系统、路由器、游戏机。\r\n- » No.2 [Panda V PN怎么样](https://qiangwaikan.com/panda-review/)？：性价比超高，中文技术支持，You Tube、Netflix、Hulu流媒体专线，低延迟游戏专线。","createdAt":1618201506262},{"id":484,"originId":"5e5f046aa72b853f100458ac","articleId":58,"userId":165,"content":"[ExpressVPN-大陆翻墙首选速度快稳定抗封锁的优质VPN](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 SSR，V2ray 代理，网络是CN2 GIA，连接速度快，并且官方保证IP可用，提供5个IP地址，支持支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)\r\n","createdAt":1583285354918},{"id":485,"originId":"5ef7d816472c7975b04b7a2d","articleId":58,"userId":174,"content":"推荐光年VPN。无限流量，SSR节点，采用BGP中继，速度快稳定。注册还可以免费VIP试用。现在有限时特惠活动24+6。送大家一个折扣码：2WEs5aVO\r\n\r\n![光年VPN](//static.cnodejs.org/Fh0tPq5vFtt14fLHcL1RnbD-PojW)\r\n\r\nhttps://lightyearvpn.com/\r\nhttps://lightyearapp.life/","createdAt":1593301014233},{"id":486,"originId":"5ef8556a472c7975b04b7c48","articleId":58,"userId":236,"content":"感谢楼主的分享。\r\n\r\n同意楼主意见，国内的VPN就不要考虑了，免费VPN目前也都不太好用，可以参考一些VPN评测网站的[**VPN推荐**](https://www.vpndada.com/best-vpns-for-china-cn/)来选购付费VPN。如：\r\n\r\n* **[ExpressVPN](https://www.vpndada.com/go/expressvpn-cn)**\r\n* **[NordVPN](https://www.vpndada.com/go/nordvpn-cn)**\r\n\r\n参考：[VPN中国测试推荐](https://www.vpndada.com/best-vpns-for-china-cn/)\r\n\r\n当然，作为程序员，可以考虑自己装V2Ray、SSR等服务器。\r\n\r\n","createdAt":1593333098958},{"id":487,"originId":"5f2ad81e4b61050e36e7e1cb","articleId":58,"userId":237,"content":"## 中国VPN现状：\r\n> 近几年对于VPN大规模的封锁，致使大部VPN在国内都已阵亡。下面是给大家的一些建议：\r\n\r\n目前来看，不是技术大神的话，自己搭建的vpn有点不靠谱了，因为ip被墙的太多了。因为自己搭建的vpn是单ip，而且往往用的是大家都在用来搭建vpn的主机，流量特征明显，随着防火墙的升级，服务商ip很容易大面积被屏蔽，换ip也可能是被墙的，很多服务商还只能付费换ip。\r\n国产的VPN基本上全部失效，且现有仅存的存在钓鱼或跑路的风险，就不要考虑了；\r\n* 国外的大部分VPN在国内也不能使用了；\r\n* 免费VPN大部分都不好用，用过的都懂；\r\n* 不想折腾，最简单的办法是购买在中国好用的国外付费VPN。\r\n## VPN推荐：\r\nVPN 品牌 | 1.ExpressVPN | 2.NordVPN | 3.PandaVPN | 4.Ivacy \r\n------------ | ------------- | ------------- | ------------ | ------------\r\n综合评分（10分制） | 9.7  | 8.5 | 8.0 | 8.0\r\n价格 | 较高 | 一般 | 一般 | 较低 \r\n运营时间 | 长  | 长 | 短 | 长 \r\n全年可用率（估计） | 97%  | 90% | 90% | 90% \r\n可用节点数量 | 中 | 少 | 中 | 少\r\n连通率 | 高  | 中高 | 中 | 中 \r\n连接稳定性（相对）| 稳定 | 稳定  | 一般 | 一般\r\n传输速度 | 很快  | 快 | 一般 | 一般 \r\n隐私安全 | 高  | 高 | 低 | 高 \r\n退款时限 | 30天内  | 30天内 | 7天 | 30天内 \r\n售后服务 | 好  | 好 | 一般 | 一般 \r\nVPN 评测 | [ExpressVPN怎么样](https://www.vpnzhihu.com/expressvpn-pingce-in-china/)  | [NordVPN怎么样](https://www.fastwebcn.com/nordvpn-review-in-china/) | [PandaVPN怎么样](https://vpncn.github.io/#4-pandavpn) | [IvacyVPN怎么样](https://vpncn.github.io/#5-ivacy)\r\n优惠 | [年付(五折)送3个月](https://linkv.org/express-zh)  | [最多优惠75%](https://linkv.org/nord) | [年付优惠](https://linkv.org/panda) | [年套餐优惠86%](https://linkv.org/ivacy)\r\n\r\n其中楼主推荐的VyprVPN不建议选择，在国内几乎没法用。\r\n参考文章：[中国VPN推荐](https://github.com/vpncn/vpncn.github.io)","createdAt":1596643358603},{"id":488,"originId":"5f339adb2799ce64a0aabe11","articleId":58,"userId":177,"content":"分享个比较好用的了 有勉废用的了\r\n[https://github.com/myjiasuqi/jiasu/wiki](https://github.com/myjiasuqi/jiasu/wiki)","createdAt":1597217499043},{"id":489,"originId":"5f46fe5ae8a599751bb512d1","articleId":58,"userId":172,"content":"ExpressVPN的稳定性一直不错，PandaVPN到目前为止很稳定也很快，VyprVPN最近加入了WireGuard协议应该会更好用，SurfShark网上评论褒贬不一，到是Astrill一直低调地保持这挺好的可用性，虽然比价贵，PureVPN看你在哪里用 .... 这里有更多[翻墙软件](https://www.wallmama.com/best-vpn-china/)介绍。","createdAt":1598488154722},{"id":490,"originId":"5f4c85aa68156574e6e6db87","articleId":58,"userId":238,"content":"[ConnectSSR](https://www.connectyy.com/) 推荐给大家蛮好用的","createdAt":1598850474836},{"id":491,"originId":"5f5635e4d22a6b1d622c80bb","articleId":58,"userId":182,"content":"感谢楼主的推荐！\r\n个人感觉还是自己搭建的[翻墙软件](https://www.vpndada.com/best-vpns-for-china-cn/)比较好用。\r\n如果自己搭建，据说SSR等已经不太好用，可以试试最新的梯子——Trojan。\r\n如果不想自己折腾，建议还是根据靠谱的[VPN推荐](https://www.vpndada.com/best-vpns-for-china-cn/)来花钱买几个好用的VPN。\r\n不同VPN在不同平台的表现也不一定相同，可以根据自己的具体需要，如[电脑VPN](https://www.vpndada.com/vpn-for-pc-cn/)、[安卓VPN](https://www.vpndada.com/android-vpn-for-china-cn/)等，来选取一款适合自己的VPN。\r\n","createdAt":1599485412500},{"id":492,"originId":"5f5ef0b4c1c67a7dd9afe753","articleId":58,"userId":178,"content":"27 美元一年\r\n250G 流量每个月\r\n使用方便，速度正常稳定，不会被封。我自己使用多年的。\r\nhttps://reurl.cc/MdXAlv","createdAt":1600057524048},{"id":493,"originId":"5f6db442f9736b02ceada523","articleId":58,"userId":210,"content":"阿里云测速下来的[VPN推荐](https://wall101.com/fanqiang-vpn/)\r\n\r\n我比较推荐的是：\r\n[光年VPN](https://wall101.com/fanqiang-vpn/lightyearvpn/)\r\n[Express](https://wall101.com/fanqiang-vpn/expressvpn/)\r\n[Astrill](https://wall101.com/fanqiang-vpn/astrillvpn/)\r\n[Panda](https://wall101.com/fanqiang-vpn/pandavpn/)","createdAt":1601025090592},{"id":494,"originId":"5fddca950f99cbfbdc5e38f2","articleId":58,"userId":181,"content":"**[express](https://is.gd/0J3OGa)最好用的呀**","createdAt":1608370837377},{"id":495,"originId":"5ff2d3465393a5cb9654688b","articleId":58,"userId":53,"content":"现如今，市面上虽然有上千款VPN，他们有的是付费VPN，有的是免费VPN，而且他们都宣称自己是最好的VPN，但事实却并非如此。随着中国政府打击VPN的力度不断加强，在中国还能用的VPN翻墙软件已经所剩无几了，而线路稳定且速度快的VPN就更少了。为了寻找[在中国还能用且速度快的VPN翻墙软件](https://wallvpn.com/)，我们对上百款主流的VPN进行了专业的评测。\r\n\r\n**我们在挑选最佳中国VPN时，主要从以下几个方面进行评估：**\r\n\r\n**速度快**：VPN翻墙软件的连接速度至关重要。较低的延迟可缩短请求的时间，较大的带宽可传输更多的数据。一款好的VPN可流畅的观看4K视频。\r\n**稳定性好**：拥有良好的速度，但没有良好的稳定性也是惘然。因此，良好的稳定性也是优质VPN的标配。\r\n**价格公道**：虽说一分钱一分货，但性价比更高的VPN必定会受到更多用户的喜爱。\r\n**允许多台设备同时连接**：这就意味着我可以与多个同事或者朋友共用一个帐号。\r\n**遍布全球的高速服务器（VPN节点）**：除了遍布全球的VPN节点可供选择之外，中国周边国家和地区拥有大量的服务器也非常重要。\r\n**使用简单**：我们使用VPN翻墙软件的目的是工作、学习或者娱乐。复杂繁琐的VPN必定会影响我们工作和学习的效率，也会影响我们娱乐的心情。一款优质的VPN翻墙软件只需登录帐号就可以使用，不需要任何多余的配置。\r\n**具有强大的隐私安全功能**：任何人都不希望自己的帐号密码被泄漏，更不想在聊天或者浏览网页时被一双眼睛盯着。一款优质的VPN可确保用户在互联网上永远保持匿名，且不会收集用户的任何网络日志。\r\n**兼容性好**：良好的兼容性则意味着你可以在台式电脑、笔记本电脑、平板电脑、手机、智能电视、游戏机等设备上自由简单的使用VPN。\r\n**支持多种付款方式**：一款优质的VPN应支持多种付款方式，包括：支付宝、微信、银联卡、信用卡、Paypal、比特币等等。\r\n**提供24/7的客户服务**：是否提供24/7的客户支持，也是评判一个VPN的重要标准。在使用VPN的过程中遇到任何问题，都可以第一时间找客服解决，可大大提供我们的客户体验。\r\n\r\n**以下是我们从上百款VPN中挑选的5款[最佳中国VPN](https://wallvpn.com/best-vpn-china/)：**\r\n\r\n**TOP 1：[ExpressVPN](https://wallvpn.com/go/expressvpn/)：最佳的中国VPN翻墙软件\r\nTOP 2：[PureVPN](https://wallvpn.com/go/purevpn/)：1.32美金/月，性价比最高且支持翻墙回国的VPN\r\nTOP 3：[Surfshark](https://wallvpn.com/go/surfsharkvpn/)：唯一不限设备数量的VPN\r\nTOP 4：[Ivacy VPN](https://wallvpn.com/go/ivacyvpn/)：1.16美金/月，价格最低的VPN翻墙软件之一\r\nTOP 5：[North VPN](https://wallvpn.com/go/nordvpn/)：支持6台设备同时在线，30天售后**。\r\n\r\n以上几个是目前2021年最新的在中国还能用的VPN，实测可用，更多评测可以看下[VPN评测](https://wallvpn.com/vpn-reviews/)集。\r\n如果在国外需要[翻墙回国](https://wallvpn.com/vpn-into-china/)，我推荐以下几款：**[PandaVPN](https://wallvpn.com/go/pandavpn/)， [PureVPN](https://wallvpn.com/go/purevpn/)，[Ivacy VPN](https://wallvpn.com/go/ivacyvpn/)**","createdAt":1609749318949},{"id":496,"originId":"6036ff4d4655eae9e721835b","articleId":58,"userId":211,"content":"# 推不能用的干嘛\r\n怎么都在坑自己人，哎呀。VPN都是已经过时的翻墙协议了，怎么一堆人还在搞。[最新的梯子](https://dr-wall.com/tizi/)才能够真正帮助大家[翻墙](https://dr-wall.com/best-vpn-china/). 可以多搜索一些翻墙原理的文章了解下[翻墙的知识](https://dr-wall.com/)，再选择合适自己的工具。","createdAt":1614217037751},{"id":497,"originId":"60704b6e4d20cb473d68b1ca","articleId":58,"userId":164,"content":"![2021-04-09_203930.jpg](//static.cnodejs.org/FnZrXx6ISnVXGM77u08D36MeKDui)\r\n\r\n用的这个挺好用的了[https://github.com/zfb55/tz](https://github.com/zfb55/tz)","createdAt":1617972078086},{"id":498,"originId":"6073bacc4d20cb0dde68b5d1","articleId":58,"userId":185,"content":"其实V PN功能太多并不一定是好事，什么无日志，强加密对[翻 墙](https://qiangwaikan.com/gvc/)一点好处没有，服务器多也并没多大用，能用的就只有香港、美国这些节点，可以看看这篇[好用的V PN推荐](https://qiangwaikan.com/bvc/)的中一些翻 墙软件，私有协议，伪装流量，稳定性强。","createdAt":1618197196160},{"id":499,"originId":"6072850e4d20cbd09b68b3db","articleId":60,"userId":165,"content":"[ExpressVPN-大陆翻墙首选速度快稳定抗封锁的优质VPN](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。无论你是用来观看Youtube还是看Nextflix都非常流畅，浏览Google就更不在话下了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 SSR，V2ray 代理，网络是CN2 GIA，连接速度快，并且官方保证IP可用，提供5个IP地址，支持支付宝付款，非常方便中国的网友购买使用。无论你是用来观看Youtube还是看Nextflix都非常流畅，浏览Google就更不在话下了。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)","createdAt":1618117902854},{"id":500,"originId":"60715a774d20cb863768b2c9","articleId":61,"userId":240,"content":"更新：\r\n新增空投：\r\nhttps://t.me/MiftySwapbot?start=r04950369620\r\nhttps://t.me/OneSG_Bot?start=r04950369620\r\nhttps://t.me/BinanceSmartChainExchangebot?start=r04950369620\r\n\r\n4.14新增：\r\nhttps://t.me/safemore_bot?start=r04950369620\r\nhttps://t.me/kp0r_bscbot?start=r04950369620\r\n","createdAt":1618041463921},{"id":501,"originId":"6071518d4d20cb3b6768b2be","articleId":62,"userId":80,"content":"是啊么","createdAt":1618039181905},{"id":502,"originId":"606d2b5b4d20cb7f1068a98d","articleId":67,"userId":89,"content":"有点意思","createdAt":1617767259884},{"id":503,"originId":"606dae8c4d20cb1f2d68abb5","articleId":67,"userId":245,"content":"[@i5ting](/user/i5ting) 😄，谢谢支持","createdAt":1617800844806},{"id":504,"originId":"604f50474655ea7dde21b9b7","articleId":69,"userId":98,"content":"这些全是基础问题，老程序对此是很不屑的，因此很多老鸟甚至答不出来，用来对付新手可以\r\n知道进大厂是不可能的，所以我不往大厂投简历，大厂HR主动来要简历我也不给，懒得去碰那钉子自讨苦吃","createdAt":1615810631183},{"id":505,"originId":"605019454655ea2d4a21bacd","articleId":69,"userId":246,"content":"[@zengming00](/user/zengming00) 进大厂只要面试前准备好，加上软性条件也可以，还是蛮容易的","createdAt":1615862085157},{"id":506,"originId":"605067ca4655eaa33c21bc6d","articleId":69,"userId":247,"content":"简直就是宝藏啊~ 感谢楼主分享~\r\n","createdAt":1615882186637},{"id":507,"originId":"60519e4bdac542779ee27c13","articleId":69,"userId":246,"content":"[@MeetTheBest](/user/MeetTheBest) 给个star才是真爱〜—〜","createdAt":1615961675954},{"id":508,"originId":"605202a9dac542c846e27e7f","articleId":69,"userId":21,"content":"[@zengming00](/user/zengming00) \r\n其实你的硬性条件是很不错的。\r\n如果想去大厂的话，性格磨练磨练，再准备准备，面试碰碰运气说不定就成了。\r\n","createdAt":1615987369359},{"id":509,"originId":"60581606dac5422f15e28caa","articleId":69,"userId":246,"content":"更新了一波","createdAt":1616385542482},{"id":510,"originId":"605ea7011b338728255dab77","articleId":69,"userId":97,"content":"这么多人都写对闭包的理解，到目前为止，我还没有发现一个人（包括现在的我）对闭包的理解，能够超过两年前的我 http://blog.thehardways.me/post/javascript/%E9%97%AD%E5%8C%85%E7%9A%84%E4%BD%9C%E7%94%A8.html","createdAt":1616815873859},{"id":511,"originId":"606291a02357dd1e9ef9dcf4","articleId":69,"userId":246,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 优秀啊","createdAt":1617072544289},{"id":512,"originId":"606d1d8e4d20cb831d68a917","articleId":69,"userId":246,"content":"更新一波","createdAt":1617763726909},{"id":513,"originId":"606c2d324d20cb4b5b68a73a","articleId":70,"userId":249,"content":"挺厉害的","createdAt":1617702194951},{"id":514,"originId":"606c41c94d20cb60a368a793","articleId":70,"userId":98,"content":"为什么要有个箭头？🤣","createdAt":1617707465231},{"id":515,"originId":"606c18a44d20cb19b668a686","articleId":72,"userId":89,"content":"哈哈哈，架构上说，组合优于继承。谁知道呢","createdAt":1617696932471},{"id":516,"originId":"60609f122357ddb3c6f9d73f","articleId":73,"userId":251,"content":"👏\n\n来自 [Vue版CNode客户端](https://reviving-pain.github.io/dist/#/cnodeCommunity/cnodejsTopics)","createdAt":1616944914259},{"id":517,"originId":"6061ad662357dd37f8f9db4b","articleId":73,"userId":192,"content":"服务端渲染可以关注下这个框架 https://github.com/ykfe/ssr\r\n4月中会支持vite，而且我们有信心做的方案比官方ssr方案优秀","createdAt":1617014118733},{"id":518,"originId":"6061b66f2357dd8537f9db88","articleId":73,"userId":250,"content":"[@zhangyuang](/user/zhangyuang) 很强","createdAt":1617016431718},{"id":519,"originId":"6063d9192357ddf64ef9dfd7","articleId":73,"userId":33,"content":"[@zhangyuang](/user/zhangyuang) egg-react-ssr 呢","createdAt":1617156377031},{"id":520,"originId":"606bbebf4d20cb978468a431","articleId":73,"userId":192,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 可以理解为https://github.com/ykfe/ssr这个是egg-react-ssr的演进版","createdAt":1617673919325},{"id":521,"originId":"606bbf1b4d20cb1d0a68a440","articleId":73,"userId":89,"content":"[@zhangyuang](/user/zhangyuang) 我看已经支持vite了","createdAt":1617674011188},{"id":522,"originId":"60671ed32357dd3adcf9e8d6","articleId":78,"userId":80,"content":"可以吗？","createdAt":1617370835398},{"id":523,"originId":"60671edf2357ddea62f9e8d8","articleId":78,"userId":80,"content":"嘿嘿嘿","createdAt":1617370847016},{"id":524,"originId":"606683412357dd4c01f9e5f3","articleId":80,"userId":89,"content":"挺好的","createdAt":1617331009982},{"id":525,"originId":"6066bc042357dd3469f9e71b","articleId":80,"userId":253,"content":"[@i5ting](/user/i5ting) 读过你的狼书 两卷 很给力","createdAt":1617345540470},{"id":526,"originId":"6062ec752357dd257bf9de8c","articleId":82,"userId":255,"content":"大佬，你的小程序开源吗，能不能白嫖一手\r\n","createdAt":1617095797928},{"id":527,"originId":"606000021b3387e8125dad0a","articleId":84,"userId":98,"content":"其实就是把hash值当成“位”地址存一个bool数据，通常我们都是用的字节地址，这种情况下字节地址不够用\r\n由于hash是有碰撞概率的，要降低这种概率可以用不同的hash算法做多次比对，但这也不能完全避免\r\n如果这是面试题，那么面试官100%会苛刻地追问就要100%可靠，这时候你同事L就高兴了😂\r\n","createdAt":1616904194485},{"id":528,"originId":"606005961b3387509c5dad31","articleId":84,"userId":145,"content":"布隆过滤器 这种不是只能判断一定不存在的情况的么。   \r\n就像楼上说的，不一定准确的呀。😂\r\n还是得看场景。这面试题整的害怕呀","createdAt":1616905622361},{"id":529,"originId":"606148862357ddff85f9d868","articleId":84,"userId":19,"content":"给你👏","createdAt":1616988294734},{"id":530,"originId":"606149d92357dd2921f9d88f","articleId":84,"userId":21,"content":"[@zengming00](/user/zengming00) \r\n[@zhangxh1023](/user/zhangxh1023) \r\n科普文，果断是不能深究了，其目的仅仅是了解布隆过滤器而已，要100%也是有100%的方法","createdAt":1616988633039},{"id":531,"originId":"606150e52357dd07e5f9d8dc","articleId":84,"userId":11,"content":"如果不限制硬盘大小，原来那个办法是通用的，50亿变成500亿也没问题，无非是多拆分几个hash桶，但是你那个方法是有上限的，要求构造的位数组长度不能超过4G内存的限制，业务上很多时候需要的是通解，防止以后的扩容同样办法也能无缝升级上去 :)，而面试可能更需要下面这种特解吧","createdAt":1616990437131},{"id":532,"originId":"6061b5c22357dd8e3df9db7e","articleId":84,"userId":21,"content":"[@hyj1991](/user/hyj1991) 嗯，为面试👏","createdAt":1617016258959},{"id":533,"originId":"605d60435ac88c229015b296","articleId":85,"userId":98,"content":"当然是熟悉的语言，node和go都是我用过的最香的服务端开发技术，两个我都要","createdAt":1616732227739},{"id":534,"originId":"605d6a295ac88c6fcf15b2bd","articleId":85,"userId":16,"content":"闲的","createdAt":1616734761946},{"id":535,"originId":"605d8c6d5ac88c408915b375","articleId":85,"userId":111,"content":"共同点是高并发吹得厉害，都是学完了找不到工作的语言 因为高并发只有面试的时侯会用一下，面试完了就没用了，百无一用是高并发","createdAt":1616743533766},{"id":536,"originId":"605dab455ac88c6dc015b45d","articleId":85,"userId":89,"content":"[@yakczh](/user/yakczh) 来蚂蚁或淘系前端架构组，如果能力及格，欢迎联系苏千或张挺","createdAt":1616751429810},{"id":537,"originId":"605ddb101b3387243a5daaca","articleId":85,"userId":98,"content":"[@yakczh](/user/yakczh) 各种算法题也是，还有各种听上去高大上的技术名词","createdAt":1616763664763},{"id":538,"originId":"605df0851b3387652f5daaf5","articleId":85,"userId":90,"content":"MIT的分布式课程里面也用上了go","createdAt":1616769157906},{"id":539,"originId":"605f23541b33871f7f5dac71","articleId":85,"userId":111,"content":"[@i5ting](/user/i5ting) no 996 no福报","createdAt":1616847700202},{"id":540,"originId":"606149e92357dd0263f9d894","articleId":85,"userId":33,"content":"[@yakczh](/user/yakczh) 还是有点用的，这俩基本脑袋正常一写出来就是自带高并发的，，","createdAt":1616988649089},{"id":541,"originId":"606178ce2357ddf1b4f9d970","articleId":85,"userId":258,"content":"go爽在go goroutine和channel， node爽在promise，async，await 和steam api。其他感觉本来也都差不多了","createdAt":1617000654063},{"id":542,"originId":"60617dd22357ddea4df9d98e","articleId":85,"userId":2,"content":"[@yakczh](/user/yakczh) 都是这样的，在实际场景中，能接触到高并发的人还是比较少的，但是这是面试的经典问题了\r\n还有算法也一样QAQ","createdAt":1617001938383},{"id":543,"originId":"60617e0f2357dd745ff9d993","articleId":85,"userId":2,"content":"对于写C++的同学来说，能用go已经很幸福了，😄","createdAt":1617001999962},{"id":544,"originId":"60612b122357dd615cf9d769","articleId":86,"userId":160,"content":"扩展一下基于阿里云Oss吧，正好需要","createdAt":1616980754379},{"id":545,"originId":"6057fd51dac5422236e28bb9","articleId":89,"userId":5,"content":"自顶","createdAt":1616379217572},{"id":546,"originId":"605587b4dac5427b12e288b2","articleId":91,"userId":99,"content":"欢迎交流","createdAt":1616218036123},{"id":547,"originId":"6054966edac54291cbe287de","articleId":92,"userId":125,"content":"监控系统可以用metrics的，不用自己搞一套","createdAt":1616156270326},{"id":548,"originId":"60549606dac54229c4e287d8","articleId":93,"userId":125,"content":"就喜欢你这种认真的小孩，加个联系方式吧，字节跳动专门给你前端培训资料，https://cnodejs.org/topic/5fe0776e98427e3c116a9a3c","createdAt":1616156166740},{"id":549,"originId":"604de6594655eaf9f821b609","articleId":94,"userId":80,"content":"<div class=\"edit \" style=\"text-align: left; z-index: -1000;\"></div><p>方法</p>","createdAt":1615717977197},{"id":550,"originId":"604de6f04655ea545321b60e","articleId":94,"userId":80,"content":"对对对","createdAt":1615718128873},{"id":551,"originId":"604de73a4655ea431c21b610","articleId":94,"userId":80,"content":"你好1","createdAt":1615718202345},{"id":552,"originId":"60549142dac542f728e287ad","articleId":94,"userId":125,"content":"牛逼，我们全部项目都使用ts， https://cnodejs.org/topic/5fe0776e98427e3c116a9a3c","createdAt":1616154946406},{"id":553,"originId":"605408dcdac5427c25e28404","articleId":95,"userId":262,"content":"👍","createdAt":1616120028465},{"id":554,"originId":"605430dbdac542f6c6e28524","articleId":95,"userId":261,"content":"数学公式没法显示，给  `nodeclub` 提了 PR：[feat: add math support](https://github.com/cnodejs/nodeclub/pull/1127)，有谁帮忙处理下么？[@fengmk2](/user/fengmk2) [@alsotang](/user/alsotang)","createdAt":1616130267631},{"id":555,"originId":"60543362dac542e42be28541","articleId":95,"userId":261,"content":"公式修复前先贴个知乎的文章链接吧：[https://zhuanlan.zhihu.com/p/358015326](https://zhuanlan.zhihu.com/p/358015326)\r\n> PS: 知乎的编辑器对 Markdown 支持也是差，表格只能用图片了。","createdAt":1616130914100},{"id":556,"originId":"60530abbdac54219a1e2818d","articleId":98,"userId":101,"content":"就是要快","createdAt":1616054971996},{"id":557,"originId":"60530aaddac542d879e28188","articleId":99,"userId":101,"content":"大家有问题可以在这里，获得github上提问","createdAt":1616054957880},{"id":558,"originId":"57ea26383670ca3f44c5beb7","articleId":102,"userId":89,"content":"这个可以给精华了","createdAt":1474963000207},{"id":559,"originId":"57ea264dd3c70faa43663e79","articleId":102,"userId":89,"content":"可以转载Node全栈公众号么？","createdAt":1474963021218},{"id":560,"originId":"57ea267c6ab98805449b94df","articleId":102,"userId":265,"content":"[@i5ting](/user/i5ting) 可以啊","createdAt":1474963068049},{"id":561,"originId":"57ea2744ea2fa420446d4320","articleId":102,"userId":266,"content":"居然拿不到沙发，顶一个","createdAt":1474963268829},{"id":562,"originId":"57ea277f3670ca3f44c5beb9","articleId":102,"userId":22,"content":"太详细了，不错不错！！\r\n我要收录到 [justjavac/awesome-wechat-weapp](https://github.com/justjavac/awesome-wechat-weapp)","createdAt":1474963327271},{"id":563,"originId":"57ea2799d3c70faa43663e7c","articleId":102,"userId":267,"content":"赞 过几天搞搞","createdAt":1474963353350},{"id":564,"originId":"57ea2988d3c70faa43663e7e","articleId":102,"userId":268,"content":"厉害，赞","createdAt":1474963848499},{"id":565,"originId":"57ea2a09d3c70faa43663e81","articleId":102,"userId":269,"content":"[@coolfishstudio](/user/coolfishstudio) 嘿嘿嘿","createdAt":1474963977884},{"id":566,"originId":"57ea2d323670ca3f44c5bebf","articleId":102,"userId":89,"content":"明天直播就用这个作为例子讲，哈哈","createdAt":1474964786940},{"id":567,"originId":"57ea2dff3670ca3f44c5bec1","articleId":102,"userId":270,"content":"赞赞！ 很详细啊！ 我能说我正在做的时候 刷新数据看到你的帖子了吗 ，哈哈\r\n![QQ图片20160927161010.png](//static.cnodejs.org/FmbuOUMnxSfvif_RuVjhHYr_TCEG)","createdAt":1474964991042},{"id":568,"originId":"57ea2fa73670ca3f44c5bec7","articleId":102,"userId":265,"content":"[@justjavac](/user/justjavac) 嗯嗯","createdAt":1474965415640},{"id":569,"originId":"57ea2fbad3c70faa43663e87","articleId":102,"userId":265,"content":"[@i5ting](/user/i5ting) 哈哈 到时候我也要看看","createdAt":1474965434401},{"id":570,"originId":"57ea2fc7d3c70faa43663e89","articleId":102,"userId":265,"content":"[@Shaman05](/user/Shaman05) 嗯嗯 好巧啊 哈哈😄","createdAt":1474965447985},{"id":571,"originId":"57ea31b96ab98805449b94e8","articleId":102,"userId":218,"content":"谢谢分享，晚点没事我学着做下……","createdAt":1474965945816},{"id":572,"originId":"57ea39bfd3c70faa43663e8e","articleId":102,"userId":271,"content":"非常好  谢谢分享","createdAt":1474967999726},{"id":573,"originId":"57ea3d42d3c70faa43663e92","articleId":102,"userId":272,"content":"可以照着做了。谢谢分享","createdAt":1474968898968},{"id":574,"originId":"57ea3ea7d3c70faa43663e95","articleId":102,"userId":273,"content":"赞赞赞。","createdAt":1474969255796},{"id":575,"originId":"57ea3ffc3670ca3f44c5bed4","articleId":102,"userId":274,"content":"非常好。。谢谢分享。","createdAt":1474969596784},{"id":576,"originId":"57ea4b606ab98805449b9503","articleId":102,"userId":275,"content":"CSS 的适用性怎么样啊","createdAt":1474972512638},{"id":577,"originId":"57ea4c666ab98805449b9505","articleId":102,"userId":217,"content":"厉害了我的哥","createdAt":1474972774660},{"id":578,"originId":"57ea4e1eea2fa420446d4338","articleId":102,"userId":265,"content":"[@zh-h](/user/zh-h) 目前还没用到复杂的css 基础的css都是可以 正准备试试flex和css3运动","createdAt":1474973214091},{"id":579,"originId":"57ea67183670ca3f44c5bee8","articleId":102,"userId":18,"content":"咦，光音的同学。","createdAt":1474979608809},{"id":580,"originId":"57ea70bf3670ca3f44c5beef","articleId":102,"userId":265,"content":"[@alsotang](/user/alsotang) 嘿嘿嘿 被你发现了","createdAt":1474982079375},{"id":581,"originId":"57ea7232ea2fa420446d434e","articleId":102,"userId":276,"content":"感谢分享!!!","createdAt":1474982450177},{"id":582,"originId":"57ea72826ab98805449b9518","articleId":102,"userId":277,"content":"赞\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1474982530429},{"id":583,"originId":"57ea8b6e6ab98805449b951d","articleId":102,"userId":278,"content":"[@coolfishstudio](/user/coolfishstudio) \r\n被我也发现了吧！;-D","createdAt":1474988910200},{"id":584,"originId":"57eb5a603670ca3f44c5bf1f","articleId":102,"userId":279,"content":"mark...","createdAt":1475041888751},{"id":585,"originId":"57eb5b7d6ab98805449b953d","articleId":102,"userId":280,"content":"赞一个","createdAt":1475042173959},{"id":586,"originId":"57eb5eb6d3c70faa43663ef3","articleId":102,"userId":281,"content":"马克一下\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1475042998013},{"id":587,"originId":"57eb6d26ea2fa420446d4387","articleId":102,"userId":265,"content":"[@houfeng](/user/houfeng) 嘿嘿嘿","createdAt":1475046694870},{"id":588,"originId":"57eb7bdcd3c70faa43663f05","articleId":102,"userId":282,"content":"赞","createdAt":1475050460146},{"id":589,"originId":"57eb86f63670ca3f44c5bf37","articleId":102,"userId":89,"content":"预告：本周三（9月28日，没错就是今天），就是以这个项目为例，狼叔带你一起玩转微信小程序，在线直播哦，请加StuQxiaozhushou微信，她会告诉你如何观看\r\n","createdAt":1475053302954},{"id":590,"originId":"57eb8b4dd3c70faa43663f0d","articleId":102,"userId":24,"content":"我来mark下 ","createdAt":1475054413051},{"id":591,"originId":"57ebc6476ab98805449b9570","articleId":102,"userId":283,"content":"怒赞，成功上首页！","createdAt":1475069511962},{"id":592,"originId":"57ebe7f96ab98805449b9575","articleId":102,"userId":284,"content":"做的真快啊...","createdAt":1475078137577},{"id":593,"originId":"57ec83026ab98805449b9593","articleId":102,"userId":285,"content":"真快手！","createdAt":1475117826065},{"id":594,"originId":"57eca7b4ea2fa420446d43e4","articleId":102,"userId":286,"content":"快手呀","createdAt":1475127220386},{"id":595,"originId":"57ecb3ae6ab98805449b95b7","articleId":102,"userId":287,"content":"赞赞 我现在拿这个例子来练习  上手上手","createdAt":1475130286896},{"id":596,"originId":"57ecb404d3c70faa43663f52","articleId":102,"userId":89,"content":"[@alsotang](/user/alsotang) [@coolfishstudio](/user/coolfishstudio) 我的部分没有实现原因是不是因为小程序不支持扫一扫？无法获得token。。。","createdAt":1475130372055},{"id":597,"originId":"57ecced16ab98805449b95c9","articleId":102,"userId":287,"content":"[@coolfishstudio](/user/coolfishstudio)  参考你的例子做的小程序 https://github.com/vincentSea/wechat-conde![QQ截图20160929161952.png](//static.cnodejs.org/Fs8RTsRXTQzph5dtvsr0UWSZE1ne)","createdAt":1475137233185},{"id":598,"originId":"57ecd725ea2fa420446d43f1","articleId":102,"userId":265,"content":"[@vincentSea](/user/vincentSea) :)","createdAt":1475139365607},{"id":599,"originId":"57ecd764ea2fa420446d43f3","articleId":102,"userId":265,"content":"[@i5ting](/user/i5ting) 不知道 因为我也没有具体做扫一扫 不过 听群里的人说 貌似现在做不了扫一扫","createdAt":1475139428051},{"id":600,"originId":"57ecd779d3c70faa43663f6a","articleId":102,"userId":265,"content":"[@i5ting](/user/i5ting) 估计等公测了 就能了吧","createdAt":1475139449360},{"id":601,"originId":"57ece9953670ca3f44c5bf8d","articleId":102,"userId":288,"content":"赞！动作真快~","createdAt":1475144085498},{"id":602,"originId":"57ed0e466ab98805449b95ec","articleId":102,"userId":89,"content":"[@coolfishstudio](/user/coolfishstudio) 可以请唐少爷帮忙加一个接口即可","createdAt":1475153478440},{"id":603,"originId":"57ee2d2ea1c2f82c670581f3","articleId":102,"userId":289,"content":"赞","createdAt":1475226926534},{"id":604,"originId":"57ef28ef83a4d9176a71da2d","articleId":102,"userId":290,"content":"😄😄😄😄😄😄\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1475291375688},{"id":605,"originId":"57f055d2ce6d47326a822da9","articleId":102,"userId":291,"content":"节假日在家搞起来\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1475368402628},{"id":606,"originId":"57f0e60ece6d47326a822dbd","articleId":102,"userId":292,"content":"围观Y腿。","createdAt":1475405326972},{"id":607,"originId":"57f12d458489e7ca69f4e7ac","articleId":102,"userId":293,"content":"接触这么快！","createdAt":1475423557880},{"id":608,"originId":"57f28b17ce6d47326a822dea","articleId":102,"userId":275,"content":"是不是小程序里面没法打开网页？那 oauth 怎么办","createdAt":1475513111681},{"id":609,"originId":"57f4a7448489e7ca69f4e7ee","articleId":102,"userId":269,"content":"有人知道怎么写可复用的组件吗?\r\n比如一个 tabs 组件\r\n`<template /> `\r\n无法拥有自己的状态, 无法做到自己控制自己的状态.","createdAt":1475651396637},{"id":610,"originId":"57f4bf3483a4d9176a71da9d","articleId":102,"userId":89,"content":"[@yinzSE](/user/yinzSE) 受限开发下是无解的，就1m得空间，复用的意义不大，期待未来更开放吧","createdAt":1475657524285},{"id":611,"originId":"57f5093e8489e7ca69f4e80b","articleId":102,"userId":294,"content":"解析用markdown写的内容是硬伤=_=||","createdAt":1475676478463},{"id":612,"originId":"57f5c3f98489e7ca69f4e819","articleId":102,"userId":265,"content":"[@zpnaruto](/user/zpnaruto) 动态处理成数组 然后进行模版化处理","createdAt":1475724281361},{"id":613,"originId":"57f63ef9ce6d47326a822e52","articleId":102,"userId":295,"content":"你好看了下代码，为什么var self = this; 而不是直接使用 this 呢","createdAt":1475755769757},{"id":614,"originId":"57f76f5fd547294d6a47086c","articleId":102,"userId":296,"content":"[@hackjie](/user/hackjie) 可能是因为在wx.request中，this并不是指向当前的Page或者App。","createdAt":1475833695894},{"id":615,"originId":"57f855f28489e7ca69f4e872","articleId":102,"userId":265,"content":"[@hackjie](/user/hackjie) 是的 如同[@JZLeung](/user/JZLeung) 说的一样 在wx.request中 this 已经不是指向page\r\n如图\r\n![F9CFEAA9-006A-4D22-AA37-46EC2BC736E0.png](//static.cnodejs.org/FtZHUjphP3RMbLgb1fIhXPtHFQyy)\r\n![62302B5D-947C-4EB8-88CB-BEE2650236CC.png](//static.cnodejs.org/Fr3I2dS0kcVcMLi6Hhe_ut6DHFHt)","createdAt":1475892722166},{"id":616,"originId":"57f8a5d7ce6d47326a822ec7","articleId":102,"userId":297,"content":"markdown  怎么办？","createdAt":1475913175339},{"id":617,"originId":"57f8a6008489e7ca69f4e89b","articleId":102,"userId":297,"content":"现在看到的文章全是 带标签的","createdAt":1475913216209},{"id":618,"originId":"57f8d6bd487e1e4578afb2ea","articleId":102,"userId":265,"content":"[@xhonker](/user/xhonker) 有办法解决 简单的说 就是 拿到了内容数据之后 通过js解析处理成数组 然后 根据你解析出来的类型 通过wx:if 来判断当前数据字段是图片 还是文本 还是视频\r\n数组：[{type: 'image', content: '图片地址'}, {type: 'text', content: '哈哈哈'}]\r\n在wxml中循环这个数组 对每一个item 进行类型判断 进而显示不同的内容","createdAt":1475925693806},{"id":619,"originId":"57f99693fdf3bd3d651183f4","articleId":102,"userId":292,"content":"[@showonne](/user/showonne) hh","createdAt":1475974803447},{"id":620,"originId":"57f9a4640bab808265185bb4","articleId":102,"userId":285,"content":"[@coolfishstudio](/user/coolfishstudio) 不能用数组处理嵌套内容吧","createdAt":1475978340899},{"id":621,"originId":"57f9ad9a0bab808265185bb9","articleId":102,"userId":265,"content":"[@chenxiaohu](/user/chenxiaohu) 可以啊 为啥不可以\r\n我将\r\n```<img src='' /><p>哈哈哈</p>``` \r\n解析成\r\n```[{type: ‘image’, content: ‘图片地址’}, {type: ‘text’, content: ‘哈哈哈’}]```","createdAt":1475980698236},{"id":622,"originId":"57f9b5c80bab808265185bc4","articleId":102,"userId":298,"content":"good job~","createdAt":1475982792967},{"id":623,"originId":"57f9b623fdf3bd3d65118406","articleId":102,"userId":285,"content":"- list item 1\r\n> - list item 1.1\r\n> - list item 1.2\r\n- list item 2\r\n> - list item 2.1 ![test][1]\r\n\r\n\r\n  [1]: ./images/suv.png \"suv.png\"","createdAt":1475982883417},{"id":624,"originId":"57f9b6710bab808265185bc6","articleId":102,"userId":285,"content":"[@coolfishstudio](/user/coolfishstudio) 你说的只有一层，嵌套就是层次结构啊，一个标签包含另一个，树形结构","createdAt":1475982961662},{"id":625,"originId":"57f9ba8a487e1e4578afb312","articleId":102,"userId":265,"content":"[@chenxiaohu](/user/chenxiaohu) 哦哦 抱歉之前没有理解你的意思 是的 我这个方案是针对一层的 树形的并不适用","createdAt":1475984010024},{"id":626,"originId":"57f9f881fdf3bd3d65118422","articleId":102,"userId":299,"content":"激动激动激动激动\n\r<br><br>来自<a href=\"https://lzxb.github.io/react-cnode/\" target=\"_blank\">react-cnode手机版</a>","createdAt":1475999873138},{"id":627,"originId":"57faf54afdf3bd3d6511845e","articleId":102,"userId":300,"content":"Good","createdAt":1476064586949},{"id":628,"originId":"57fc3d42487e1e4578afb3bb","articleId":102,"userId":301,"content":"可惜最近上班忙，没时间研究\n\r<br><br>来自<a href=\"https://lzxb.github.io/react-cnode/\" target=\"_blank\">react-cnode手机版</a>","createdAt":1476148546283},{"id":629,"originId":"57fc6be1487e1e4578afb3d6","articleId":102,"userId":302,"content":"先mark","createdAt":1476160481599},{"id":630,"originId":"57fc717927a1d99178a98d58","articleId":102,"userId":303,"content":"很好<br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1476161913795},{"id":631,"originId":"57fc71c2fdf3bd3d651184c8","articleId":102,"userId":303,"content":"[@BubblyPoker](/user/BubblyPoker) 哈哈<br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1476161986598},{"id":632,"originId":"57fd9b0527a1d99178a98d91","articleId":102,"userId":304,"content":"[安利下https://github.com/uniquexiaobai/wechat-app-githubfeed](https://github.com/uniquexiaobai/wechat-app-githubfeed)\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1476238085716},{"id":633,"originId":"57ff23d4487e1e4578afb490","articleId":102,"userId":300,"content":"Happy","createdAt":1476338644529},{"id":634,"originId":"57ff23de487e1e4578afb492","articleId":102,"userId":300,"content":"Haro","createdAt":1476338654495},{"id":635,"originId":"57ff23f127a1d99178a98e0a","articleId":102,"userId":300,"content":"Good","createdAt":1476338673502},{"id":636,"originId":"57ff415f487e1e4578afb49d","articleId":102,"userId":289,"content":"赞","createdAt":1476346207130},{"id":637,"originId":"57ff4d0b487e1e4578afb4a8","articleId":102,"userId":305,"content":"[@coolfishstudio](/user/coolfishstudio) 不知道这个东西啥时候公测呢","createdAt":1476349195803},{"id":638,"originId":"5800480b0bab808265185dc5","articleId":102,"userId":89,"content":"[@coolfishstudio](/user/coolfishstudio) 貌似上啦刷新不好使了\r\n","createdAt":1476413451015},{"id":639,"originId":"580059000bab808265185dcc","articleId":102,"userId":89,"content":"[@i5ting](/user/i5ting) page{ height：100%}\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1476417792691},{"id":640,"originId":"580086fa27a1d99178a98e68","articleId":102,"userId":265,"content":"[@i5ting](/user/i5ting) 是的 我也是这么处理的","createdAt":1476429562367},{"id":641,"originId":"580383130bab808265185e4c","articleId":102,"userId":306,"content":"嗯嗯\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1476625171424},{"id":642,"originId":"580428e327a1d99178a98ef6","articleId":102,"userId":89,"content":"[@coolfishstudio](/user/coolfishstudio) 有朋友给了pr  https://github.com/i5ting/stuq-wxapp/pull/3","createdAt":1476667619175},{"id":643,"originId":"580786fefdf3bd3d651187da","articleId":102,"userId":307,"content":"666\n\n 自豪地采用[cnodejs-vue](https://github.com/beilunyang/cnodejs-vue)","createdAt":1476888318571},{"id":644,"originId":"5808240327a1d99178a98fec","articleId":102,"userId":308,"content":"上周末就想玩一玩了，这周末一定搞一搞。","createdAt":1476928515040},{"id":645,"originId":"58097d1b0bab808265185fc0","articleId":102,"userId":309,"content":"请问某篇文章的内容带了标签该怎么处理？","createdAt":1477016859337},{"id":646,"originId":"58098ca0fdf3bd3d65118886","articleId":102,"userId":265,"content":"[@ytudt](/user/ytudt) 有办法解决 简单的说 就是 拿到了内容数据之后 通过js解析处理成数组 然后 根据你解析出来的类型 通过wx:if 来判断当前数据字段是图片 还是文本 还是视频\r\n数组：[{type: ‘image’, content: ‘图片地址’}, {type: ‘text’, content: ‘哈哈哈’}]\r\n在wxml中循环这个数组 对每一个item 进行类型判断 进而显示不同的内容\r\n 目前这个只是适用于简单的dom结构","createdAt":1477020832952},{"id":647,"originId":"580dadfbd523a01734810a49","articleId":102,"userId":310,"content":"写了一个微信小程序富文本解析，我也在该项目中验证了一下 \r\n微信小程序富文本解析wxParse Alpha0.1-支持HTML及markdown解析\r\n具体文章可以见 http://weappdev.com/t/wxparse-alpha0-1-html-markdown/184\r\n欢迎指正push","createdAt":1477291515290},{"id":648,"originId":"580eb270b37ee8fb339787aa","articleId":102,"userId":310,"content":"添加了一个wxParse进行markdown解析，已提交pull,详见 [https://github.com/icindy/wechat-webapp-cnode](https://github.com/icindy/wechat-webapp-cnode) [https://github.com/icindy/wxParse](https://github.com/icindy/wxParse)","createdAt":1477358192233},{"id":649,"originId":"58117a40eae2a24f34e67f8d","articleId":102,"userId":311,"content":"👍","createdAt":1477540416156},{"id":650,"originId":"5813130e1a9a7d9909531219","articleId":102,"userId":307,"content":"看了楼主做的我花两天时间也做了一个","createdAt":1477645070076},{"id":651,"originId":"5814be821a9a7d9909531259","articleId":102,"userId":312,"content":"mark\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1477754498675},{"id":652,"originId":"58172f4cb37ee8fb3397899a","articleId":102,"userId":313,"content":"精华内容\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1477914444111},{"id":653,"originId":"581eb1b9d5e70f90053433af","articleId":102,"userId":314,"content":"为什么我在极客学院的官网上看到一个做cnode的，感觉跟你这个差不多，还要499元！！！！","createdAt":1478406585061},{"id":654,"originId":"581edcc2be0a73ad05489506","articleId":102,"userId":265,"content":"[@461534898](/user/461534898) 额 首先肯定不是我。。。我没有弄过视频而且我我没看过这套视频，其次 不推荐现在购买视频学习 因为一方面微信很多东西一直在改，也删了一些组件 另一方面直接看官方文档 简单仿一下就可以了  最后 已经公测了 可以自己做一些玩了\r\n另外 学的话 我主要看到还是博卡君","createdAt":1478417602934},{"id":655,"originId":"581f2ecebe0a73ad05489511","articleId":102,"userId":315,"content":"也做个，谢谢楼主了\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1478438606680},{"id":656,"originId":"58205917e90cfbec054d7739","articleId":102,"userId":291,"content":"如何删除创建的微信小程序？![QQ20161107-0@2x.png](//static.cnodejs.org/Fja7a6nnuMMNc3g5fEjLcojLI6Lx)","createdAt":1478514967603},{"id":657,"originId":"58206ebfbe0a73ad05489569","articleId":102,"userId":265,"content":"[@ghostcode](/user/ghostcode) 在ide中进入项目 选择最下面的删除项目就可以了。。。。","createdAt":1478520511834},{"id":658,"originId":"58209fa9be0a73ad05489576","articleId":102,"userId":291,"content":"[@coolfishstudio](/user/coolfishstudio) 我晕，没看到下面还有，屏幕小。。。","createdAt":1478533033171},{"id":659,"originId":"582dd5426efc292b79ff0a3b","articleId":102,"userId":316,"content":"厉害了我的哥","createdAt":1479398722953},{"id":660,"originId":"583152346efc292b79ff0b38","articleId":102,"userId":214,"content":"重温一下！！\n          使用[antd-moblie[cnode]版](https://github.com/dianjie/cnode)","createdAt":1479627316266},{"id":661,"originId":"583264ff67db500b79c10111","articleId":102,"userId":317,"content":"赞","createdAt":1479697663731},{"id":662,"originId":"5832ab31892500ee7867c174","articleId":102,"userId":318,"content":"赞一个，有个问题请教，这个微信小程序和我们平时说的基于js-sdk开发的webapp不一样吗，QAQ说不能用window对象，html和css叫wxtml，wxss","createdAt":1479715633238},{"id":663,"originId":"5832b5870249714d79d41b70","articleId":102,"userId":265,"content":"[@IEfucker](/user/IEfucker) 不一样 首先这个是在微信封闭生态内的一员 不要想的和前端一样 一般来说他是不会分享到外面 出了用模版通知\r\n－ － 如果一样了 至于像现在这个听风便是雨么。。。不难 写写就会了","createdAt":1479718279633},{"id":664,"originId":"583391d967db500b79c10158","articleId":102,"userId":318,"content":"[@coolfishstudio](/user/coolfishstudio) 但我还是有个疑问，之前咱们都是做h5的页面，也能满足需求，推出的这个小程序相比我们过去的做法有优势吗，在哪","createdAt":1479774681355},{"id":665,"originId":"5833abc56efc292b79ff0be8","articleId":102,"userId":265,"content":"[@IEfucker](/user/IEfucker) 生态环境不一样 你还没有理解 微信封闭生态环境 这个意思   简单的说 你写的h5在小应用里是无法运行的","createdAt":1479781317949},{"id":666,"originId":"5833ad956efc292b79ff0bed","articleId":102,"userId":265,"content":"[@IEfucker](/user/IEfucker) 我决定安利一下我公司的一个文章[小云百科:什么是“微信小程序”](http://url.cn/41kcsQr)","createdAt":1479781781135},{"id":667,"originId":"5833bc146efc292b79ff0bf9","articleId":102,"userId":318,"content":"[@coolfishstudio](/user/coolfishstudio) 感谢安利，但从你的回复可以看出你安利的成分大些，我没说要把我写的h5放在小程序里，我只是习惯用h5写","createdAt":1479785492824},{"id":668,"originId":"5833bcca892500ee7867c1d8","articleId":102,"userId":318,"content":"[@coolfishstudio](/user/coolfishstudio) \r\n技术上，“小程序” 其实是微信提高了自身对于HTML5的特性支持能力，开放了更多的系统调用，例如GPS、传感器等。使用上，“小程序” 重交互、高粘性、超轻便，将有更好的用户体验，更快的加载速度和更多的功能。\r\n\r\n其实就是多一些api对吧，微信提供的，其实有些h5的api也能用，像GPS，另外如果仅仅是api的问题，通过js-sdk提供也是可以的，但微信没有这样做，另外您是微信团队的吗，我对小程序这东西的价值有点怀疑","createdAt":1479785674665},{"id":669,"originId":"5833d0a8bde2b59e06141e12","articleId":102,"userId":265,"content":"[@IEfucker](/user/IEfucker) 我当然不是微信团队了。。。不过可能我理解错了你的意思 我想说的意思是 小应用是用完即走 而微信提供了一个入口，就像是公众号 虽然不知道他最终要做成什么样子，但是至少现在透漏出了可以将小应用放到安卓手机桌面， 另外 我觉得你有一点比较错了，小应用最主要对比的应该是原生应用这种","createdAt":1479790760915},{"id":670,"originId":"5833e56027d001d606ac1828","articleId":102,"userId":318,"content":"[@coolfishstudio](/user/coolfishstudio) 哦这样啊，那期待它有更多的前景","createdAt":1479796064825},{"id":671,"originId":"583a9f8aba57ffba06c24a1e","articleId":102,"userId":319,"content":"[@IEfucker](/user/IEfucker) 暗暗","createdAt":1480236938836},{"id":672,"originId":"583aae9827d001d606ac19d6","articleId":102,"userId":320,"content":"[@IEfucker](/user/IEfucker) \nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1480240792026},{"id":673,"originId":"583e78e727d001d606ac1aba","articleId":102,"userId":318,"content":"[@jackton](/user/jackton) 谢谢，回头学习学习，我也觉得小程序和react-native很像","createdAt":1480489191280},{"id":674,"originId":"583e7cd7efa98d907a528208","articleId":102,"userId":219,"content":"试试看","createdAt":1480490199680},{"id":675,"originId":"583e7d0627d001d606ac1ac2","articleId":102,"userId":219,"content":"自删","createdAt":1480490246601},{"id":676,"originId":"583e7d7f27d001d606ac1ac4","articleId":102,"userId":219,"content":"这次","createdAt":1480490367055},{"id":677,"originId":"583e7d9f254727447987caad","articleId":102,"userId":219,"content":"这次","createdAt":1480490399575},{"id":678,"originId":"583e7e2defa98d907a52820b","articleId":102,"userId":219,"content":"还可以","createdAt":1480490541132},{"id":679,"originId":"58428df79ff0dbf333450745","articleId":102,"userId":321,"content":"楼主 非常感谢你的教程,我今天按照你的教程来做,结果现在 scroll-view 设置 style=\"height:100%\"后并不走 bindscrolltolower 事件,不知道您是否知道怎么回事,我把你的项目液导入了,结果还是一样.","createdAt":1480756727219},{"id":680,"originId":"5844015f4fedb6b73391cd62","articleId":102,"userId":265,"content":"[@justjoker](/user/justjoker) 因为他改版了 删掉了默认的样式 page {height:100%;}  加上就可以了","createdAt":1480851807242},{"id":681,"originId":"5844c0e1f3576dd333f869c1","articleId":102,"userId":321,"content":"[@coolfishstudio](/user/coolfishstudio) 厉害~ 看了你的文章收益颇丰啊","createdAt":1480900833852},{"id":682,"originId":"58468043f3576dd333f86a2e","articleId":102,"userId":322,"content":"厉害","createdAt":1481015363181},{"id":683,"originId":"584e48be4c17b38d354365b0","articleId":102,"userId":323,"content":"good!","createdAt":1481525438505},{"id":684,"originId":"584e48e59ff0dbf3334509c9","articleId":102,"userId":323,"content":"[@gaoli861121](/user/gaoli861121) 确实","createdAt":1481525477543},{"id":685,"originId":"584e4a53f3576dd333f86be2","articleId":102,"userId":323,"content":"[@zkaip](/user/zkaip) ","createdAt":1481525843129},{"id":686,"originId":"584e4a56f3576dd333f86be5","articleId":102,"userId":323,"content":"[@chenxiaohu](/user/chenxiaohu) ","createdAt":1481525846965},{"id":687,"originId":"584e4acbf3576dd333f86be8","articleId":102,"userId":323,"content":"[@xeodou](/user/xeodou) ","createdAt":1481525963970},{"id":688,"originId":"584e4addf3576dd333f86beb","articleId":102,"userId":323,"content":"[@showonne](/user/showonne) hh","createdAt":1481525981495},{"id":689,"originId":"584e4c4a3ebad99b336b1fa9","articleId":102,"userId":323,"content":"so cool","createdAt":1481526346159},{"id":690,"originId":"584e4c55f3576dd333f86bf0","articleId":102,"userId":323,"content":"so cool","createdAt":1481526357958},{"id":691,"originId":"584e4c8a4c17b38d354365b6","articleId":102,"userId":323,"content":"[@zhangxiaos](/user/zhangxiaos) so","createdAt":1481526410152},{"id":692,"originId":"584e4ccf3ebad99b336b1fab","articleId":102,"userId":323,"content":"[@zhangxiaos](/user/zhangxiaos) cool","createdAt":1481526479766},{"id":693,"originId":"584e4ced4c17b38d354365b8","articleId":102,"userId":323,"content":"[@zhangxiaos](/user/zhangxiaos) aaa","createdAt":1481526509577},{"id":694,"originId":"584f8f57f3576dd333f86c2b","articleId":102,"userId":324,"content":"666  造福同行，好人！","createdAt":1481609047646},{"id":695,"originId":"58540716a670f31b6b4607ca","articleId":102,"userId":281,"content":"66666\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1481901846379},{"id":696,"originId":"5856100c92fe69322502b00d","articleId":102,"userId":325,"content":"<ul><li>6666</li><li>666</li></ul>","createdAt":1482035212730},{"id":697,"originId":"5857a8edd71d4638531c8906","articleId":102,"userId":326,"content":"谢谢楼主的分享，今天用了一个下午了解了楼主的wx.request 。想问下request请求这个知识是属于js的ajax部分么？仔细想想本人的js就差ajax部分没学习了","createdAt":1482139885532},{"id":698,"originId":"5857fc547e4b231c53cb9f9f","articleId":102,"userId":326,"content":"scroll-view height 要设置为100vh，用百分比触发不了乡下滚动的函数","createdAt":1482161236729},{"id":699,"originId":"585f7f1d0d9e0b505d4860d8","articleId":102,"userId":327,"content":"赞","createdAt":1482653469389},{"id":700,"originId":"586db1e5df04f6ab76081d7e","articleId":102,"userId":328,"content":"[@coolfishstudio](/user/coolfishstudio)  \r\nhello , 微信小程序最近出现了一波[更新](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=201714)，然后其中第一条\r\n\r\n更新 API wx.getLocation wx.getUserInfo wx.chooseLocation wx.startRecord 调用时需要用户授权确认，当用户拒绝授权时，回调 \"${APIName}:fail auth deny\"\r\n还是没看明白 怎么回调API ？就是具体用代码 是怎么写可以把回调函数 加进去？\r\n\r\n\r\n","createdAt":1483583973255},{"id":701,"originId":"586db3148de1450777c64095","articleId":102,"userId":329,"content":"[@coolfishstudio](/user/coolfishstudio) 666","createdAt":1483584276300},{"id":702,"originId":"586db3288de1450777c64097","articleId":102,"userId":329,"content":"666","createdAt":1483584296519},{"id":703,"originId":"586dfb958de1450777c640bb","articleId":102,"userId":330,"content":"[@wardenger](/user/wardenger) \nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1483602837148},{"id":704,"originId":"586e01da8de1450777c640c0","articleId":102,"userId":331,"content":"测试提交\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1483604442151},{"id":705,"originId":"586e0da66fa6388f76d3a86f","articleId":102,"userId":328,"content":"[@lukaikai1989](/user/lukaikai1989)  what ?","createdAt":1483607462566},{"id":706,"originId":"586ef723e05ad9c306275081","articleId":102,"userId":332,"content":"666","createdAt":1483667235758},{"id":707,"originId":"586fae043ffc84e30620e388","articleId":102,"userId":333,"content":"楼主好早，我准备最近开始做一个。\r\n这个可以作为参考内容了。谢谢分享","createdAt":1483714052535},{"id":708,"originId":"58707fdbe05ad9c306275101","articleId":102,"userId":334,"content":"赞\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1483767771792},{"id":709,"originId":"587394979a36eb8e34087545","articleId":102,"userId":281,"content":"赞","createdAt":1483969687286},{"id":710,"originId":"5874d81ae65101c634fc9626","articleId":102,"userId":335,"content":"牛逼","createdAt":1484052506685},{"id":711,"originId":"587553449a36eb8e340875b8","articleId":102,"userId":336,"content":"666\n\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1484084036865},{"id":712,"originId":"587633e9fdd6b6c41b4734f9","articleId":102,"userId":337,"content":"赞 谢楼主 ^_^","createdAt":1484141545075},{"id":713,"originId":"5878e8729f92195c1bf9ff39","articleId":102,"userId":338,"content":"[@asdasdasdasdasdasd](/user/asdasdasdasdasdasd)","createdAt":1484318834472},{"id":714,"originId":"587d8a249f92195c1bfa001f","articleId":102,"userId":339,"content":"赞","createdAt":1484622372575},{"id":715,"originId":"5884237f171f3bc843f600ee","articleId":102,"userId":340,"content":"[@i5ting](/user/i5ting) 同意\n\r<br><br>来自<a href=\"https://lzxb.github.io/react-cnode/\" target=\"_blank\">react-cnode手机版</a>","createdAt":1485054847777},{"id":716,"originId":"588423af1dc8ff8739cbc56c","articleId":102,"userId":340,"content":"[@xiaoyuervae](/user/xiaoyuervae) 同意\n\r<br><br>来自<a href=\"https://lzxb.github.io/react-cnode/\" target=\"_blank\">react-cnode手机版</a>","createdAt":1485054895746},{"id":717,"originId":"588423af1dc8ff8739cbc56e","articleId":102,"userId":340,"content":"[@xiaoyuervae](/user/xiaoyuervae) 同意\n\r<br><br>来自<a href=\"https://lzxb.github.io/react-cnode/\" target=\"_blank\">react-cnode手机版</a>","createdAt":1485054895772},{"id":718,"originId":"588423af1dc8ff8739cbc570","articleId":102,"userId":340,"content":"[@xiaoyuervae](/user/xiaoyuervae) 同意\n\r<br><br>来自<a href=\"https://lzxb.github.io/react-cnode/\" target=\"_blank\">react-cnode手机版</a>","createdAt":1485054895874},{"id":719,"originId":"588423af1dc8ff8739cbc572","articleId":102,"userId":340,"content":"[@xiaoyuervae](/user/xiaoyuervae) 同意\n\r<br><br>来自<a href=\"https://lzxb.github.io/react-cnode/\" target=\"_blank\">react-cnode手机版</a>","createdAt":1485054895963},{"id":720,"originId":"588423d1250bf4e2390e9e8e","articleId":102,"userId":340,"content":"[@i5ting](/user/i5ting) 回复不起作用\n\r<br><br>来自<a href=\"https://lzxb.github.io/react-cnode/\" target=\"_blank\">react-cnode手机版</a>","createdAt":1485054929093},{"id":721,"originId":"5884561f5d4612c33919e930","articleId":102,"userId":219,"content":"[@SteveWzx](/user/SteveWzx) 666<p style=\"text-align:right\"><a href=\"https://github.com/lumia2046/cnode\"> — — 来自lumia2046-react-cnode</a></p>","createdAt":1485067807075},{"id":722,"originId":"589d25088c475cf5794dacf8","articleId":102,"userId":341,"content":"test 来自[vue-cnode](https://github.com/feng-fu/vue-cnode)","createdAt":1486693640139},{"id":723,"originId":"589ed8518c475cf5794dad48","articleId":102,"userId":342,"content":"赞，很不错的入门","createdAt":1486805073104},{"id":724,"originId":"589eda118c475cf5794dad4a","articleId":102,"userId":342,"content":"回复chrome崩溃？","createdAt":1486805521354},{"id":725,"originId":"589edd6b77a4e03f7f9a56b3","articleId":102,"userId":342,"content":"[@icindy](/user/icindy) 这个用过！","createdAt":1486806379969},{"id":726,"originId":"58bce2c9534823330afed8c9","articleId":102,"userId":277,"content":"测试回复\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1488773833272},{"id":727,"originId":"58be8469d282728c0ec4020c","articleId":102,"userId":343,"content":"[@honggin](/user/honggin) 测试","createdAt":1488880745352},{"id":728,"originId":"58be85f9d282728c0ec40210","articleId":102,"userId":343,"content":"[@zentanso](/user/zentanso) 测试2","createdAt":1488881145151},{"id":729,"originId":"58be86457ed966ca0ebbea2b","articleId":102,"userId":344,"content":"[@zentanso](/user/zentanso) 测试","createdAt":1488881221518},{"id":730,"originId":"58be8a067ed966ca0ebbea2e","articleId":102,"userId":277,"content":"/测试\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1488882182766},{"id":731,"originId":"58be8aa17ed966ca0ebbea30","articleId":102,"userId":277,"content":"测试还回复\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1488882337673},{"id":732,"originId":"58c01ed1e0cfa8974a2610bb","articleId":102,"userId":345,"content":"很不错的。嘻嘻<br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1488985809947},{"id":733,"originId":"58c09192d4f292914a6d009d","articleId":102,"userId":345,"content":"[@i5ting](/user/i5ting) <br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1489015186444},{"id":734,"originId":"58c1778179f557ff16f0f17f","articleId":102,"userId":346,"content":"cool 正好可以学习一下嘿嘿","createdAt":1489074049671},{"id":735,"originId":"58c8d84806dbd608756d0dda","articleId":102,"userId":347,"content":"不错","createdAt":1489557576809},{"id":736,"originId":"58d3ee216f8b9bf02d1d0a4f","articleId":102,"userId":348,"content":"哈哈","createdAt":1490284065069},{"id":737,"originId":"58d5e37cb3e60b982d089b8a","articleId":102,"userId":344,"content":"赞一个~~~","createdAt":1490412412169},{"id":738,"originId":"58dbc5956f8b9bf02d1d0c12","articleId":102,"userId":349,"content":"完美！！\r\n和我的思咱一样啊，同道中人。\r\n我已经搭好了小区的bbs，并且开源： [https://bbs.sunzhongmou.com/](https://bbs.sunzhongmou.com/)\r\n我的小程序也已经准备好了，还上线了：\r\n![qrcode-cj copy.jpg](//static.cnodejs.org/FiITzvlNJl7gxSyXDyuq7BoThgKk)\r\n\r\n并且也开源了：  [https://github.com/mobile-1st/2107](https://github.com/mobile-1st/2107)\r\n\r\n下一步就是小该论坛集成到我的小程序，让小区生活美滋滋，乐畅居。\r\n有兴趣的小伙伴欢迎来讨论〜〜","createdAt":1490797973968},{"id":739,"originId":"5975bd180c87675e746747f1","articleId":102,"userId":350,"content":"膜拜下～","createdAt":1500888344091},{"id":740,"originId":"5aaa3de9e7b166bb7b9ecab2","articleId":102,"userId":351,"content":"上拉加载更多不能触发lower呢，你们遇到没？","createdAt":1521106409358},{"id":741,"originId":"6050707f4655ea7e4621bcc8","articleId":102,"userId":352,"content":"[@i5ting](/user/i5ting) 123","createdAt":1615884415168},{"id":742,"originId":"5fe3d83e98427e11dc6aa129","articleId":106,"userId":12,"content":"抢个🛋沙发避免尴尬。。。","createdAt":1608767550473},{"id":743,"originId":"5fe3f92898427ec7386aa173","articleId":106,"userId":354,"content":"m","createdAt":1608775976231},{"id":744,"originId":"5fe459e098427e9e866aa2f2","articleId":106,"userId":355,"content":"顶","createdAt":1608800736243},{"id":745,"originId":"5fe467b698427e21ba6aa35d","articleId":106,"userId":56,"content":"我是一个人","createdAt":1608804278823},{"id":746,"originId":"5fe467db98427ef1a16aa361","articleId":106,"userId":56,"content":"[@cctv1005s](/user/cctv1005s) hello","createdAt":1608804315670},{"id":747,"originId":"6002bb305d04ac3fa42172e5","articleId":106,"userId":356,"content":"顶\r\n","createdAt":1610791728494},{"id":748,"originId":"6011090503d79736ed66d902","articleId":106,"userId":66,"content":"wo lai le.","createdAt":1611729157232},{"id":749,"originId":"601109e203d797ab5566d904","articleId":106,"userId":66,"content":"再来一次。","createdAt":1611729378029},{"id":750,"originId":"604dea664655ea154f21b615","articleId":107,"userId":80,"content":"键盘还不错！","createdAt":1615719014815},{"id":751,"originId":"604ee33d4655ead93a21b79c","articleId":107,"userId":79,"content":"静电容键盘是机械键盘的一种?","createdAt":1615782717154},{"id":752,"originId":"604f33d74655ea704321b912","articleId":107,"userId":169,"content":"[@qiutian00](/user/qiutian00) 不是吧，文中只是拿来作为对比","createdAt":1615803351104},{"id":753,"originId":"604ee4b44655ea965921b7ac","articleId":108,"userId":79,"content":"有些npm 包， 还真没有见过","createdAt":1615783092265},{"id":754,"originId":"6047347f4655ea4f5a21a90d","articleId":111,"userId":38,"content":"沙发","createdAt":1615279231616},{"id":755,"originId":"604734b94655eacbba21a912","articleId":111,"userId":31,"content":"感觉 2.0 底层变化很大啊， 以前看只是扩展了 egg 的一些 loader 阶段","createdAt":1615279289340},{"id":756,"originId":"604737a04655eaf94a21a947","articleId":111,"userId":358,"content":"点赞~","createdAt":1615280032752},{"id":757,"originId":"60473b684655eab54921a957","articleId":111,"userId":145,"content":"腻害腻害~~","createdAt":1615281000219},{"id":758,"originId":"604827384655ea213721ab92","articleId":111,"userId":359,"content":"想请教一下一些有长连接需求的项目可以用Serverless 做吗？","createdAt":1615341368424},{"id":759,"originId":"604831244655ea684621abd6","articleId":111,"userId":357,"content":"[@tangchi695](/user/tangchi695) 不行哦。","createdAt":1615343908951},{"id":760,"originId":"604ec4d34655ea85c021b6f8","articleId":111,"userId":103,"content":"也只能看看，无处施展","createdAt":1615774931501},{"id":761,"originId":"603c9aa54655eaeab2219001","articleId":112,"userId":360,"content":"确实 刷刷的 👍","createdAt":1614584485001},{"id":762,"originId":"603ca9c84655ea8e6c219035","articleId":112,"userId":361,"content":"太顶了👍","createdAt":1614588360242},{"id":763,"originId":"603da3da4655ead8d52191ff","articleId":112,"userId":117,"content":"这是域名解析","createdAt":1614652378446},{"id":764,"originId":"603f629f4655ea195c2197ce","articleId":112,"userId":20,"content":"起飞了！","createdAt":1614766751164},{"id":765,"originId":"60422e984655ea2d8d219f10","articleId":112,"userId":80,"content":"dfsadfasfgdsfd答","createdAt":1614950040158},{"id":766,"originId":"604231d94655ea0fd9219f13","articleId":112,"userId":80,"content":"奋斗","createdAt":1614950873214},{"id":767,"originId":"604232a14655ea74d7219f17","articleId":112,"userId":80,"content":"this.content","createdAt":1614951073375},{"id":768,"originId":"604eb1e14655ea991721b6a0","articleId":112,"userId":36,"content":"试了下，没太大差别啊，可能之前就很快了","createdAt":1615770081318},{"id":769,"originId":"5b2069715cd02be640901404","articleId":113,"userId":362,"content":"最后一天了","createdAt":1528850801898},{"id":770,"originId":"5b206adb8a4f51e140d9479c","articleId":113,"userId":363,"content":"https://promotion.aliyun.com/ntms/act/group/team.html?group=jlY66zabbM\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1528851163785},{"id":771,"originId":"5b208f8e57137f22415c4bc5","articleId":113,"userId":362,"content":"想让阿里亏得就买我的 再来一个人 就多送我半年 阿里特别亏 \r\nhttps://promotion.aliyun.com/ntms/act/group/team.html?group=i5iw3AWXrL","createdAt":1528860558884},{"id":772,"originId":"604b390a4655ea6b1d21b329","articleId":113,"userId":364,"content":"腾讯云服务器最新优惠活动汇总：[](http://begin.yundashi168.com/tencent/index)http://begin.yundashi168.com/tencent/index\r\n阿里云服务器最新优惠活动汇总: [](http://begin.yundashi168.com/aliyun/index)http://begin.yundashi168.com/aliyun/index\r\n\r\n现在阿里云和腾讯云学生机的都更新了，最新地址\r\n阿里云学生机：[](https://dashi.aliyun.com/site/arison/student)https://dashi.aliyun.com/site/arison/student    1核2G1M  108元 推荐1年\r\n腾讯云学生机：[](https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314&cps_key=806a34e58199d2e0ccdf9a10ef0ba6ac)https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314    1核2G1M  114元 推荐1年\r\n\r\n其它还有华为云，Ucloud云，金山云和硅云，这些活动可以[点击这里](http://tencent.yundashi168.com/)查看","createdAt":1615542538252},{"id":773,"originId":"604dea9b4655ea7f0121b617","articleId":113,"userId":80,"content":"可以的","createdAt":1615719067107},{"id":774,"originId":"549117e961491ead0cc7be94","articleId":117,"userId":366,"content":"收了，不谢 :-)","createdAt":1418794985500},{"id":775,"originId":"5492369561491ead0cc7bf60","articleId":117,"userId":367,"content":"没抢到...\r\n","createdAt":1418868373608},{"id":776,"originId":"5498c6b88ade094b67f3f9ff","articleId":117,"userId":365,"content":"我也没抢到","createdAt":1419298488211},{"id":777,"originId":"5498d64b8ade094b67f3fa18","articleId":117,"userId":368,"content":"小伙伴们,快到碗里来:)","createdAt":1419302475602},{"id":778,"originId":"604b39504655ea53ba21b333","articleId":117,"userId":364,"content":"腾讯云服务器最新优惠活动汇总：[](http://begin.yundashi168.com/tencent/index)http://begin.yundashi168.com/tencent/index\r\n阿里云服务器最新优惠活动汇总: [](http://begin.yundashi168.com/aliyun/index)http://begin.yundashi168.com/aliyun/index\r\n\r\n现在阿里云和腾讯云学生机的都更新了，最新地址\r\n阿里云学生机：[](https://dashi.aliyun.com/site/arison/student)https://dashi.aliyun.com/site/arison/student    1核2G1M  108元 推荐1年\r\n腾讯云学生机：[](https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314&cps_key=806a34e58199d2e0ccdf9a10ef0ba6ac)https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314    1核2G1M  114元 推荐1年\r\n\r\n其它还有华为云，Ucloud云，金山云和硅云，这些活动可以[点击这里](http://tencent.yundashi168.com/)查看","createdAt":1615542608258},{"id":779,"originId":"576a1489d0aa704d0728ac6a","articleId":118,"userId":367,"content":"美国节点就是这样的","createdAt":1466569865323},{"id":780,"originId":"576a194d49f54a69076f02fc","articleId":118,"userId":12,"content":"可以买新加坡节点\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1466571085080},{"id":781,"originId":"576a21f163075514079b77c3","articleId":118,"userId":369,"content":"[@fengmk2](/user/fengmk2) 恩 新加坡是亚洲的 应该会好点","createdAt":1466573297945},{"id":782,"originId":"576a2b8a49f54a69076f0306","articleId":118,"userId":370,"content":"我也想买的，辛亏在最后付款时刻“强行装逼最为致命”这句话出现在我脑海里！","createdAt":1466575754888},{"id":783,"originId":"576a2ccba6366c3107583cae","articleId":118,"userId":371,"content":"建议买AWS的东京节点  ","createdAt":1466576075050},{"id":784,"originId":"576a7ae649f54a69076f032c","articleId":118,"userId":223,"content":"如果是美国节点，为什么不直接选 [DigitalOcean](https://m.do.co/c/c260f0b56c75) ，性价比特别高，用了四年没当过机。","createdAt":1466596070969},{"id":785,"originId":"576a7b2e49f54a69076f032e","articleId":118,"userId":223,"content":"[@csc365kl](/user/csc365kl) 新加坡的速度未必快，要看具体走的路由，香港日本韩国的延时会小，基本是肯定的。","createdAt":1466596142416},{"id":786,"originId":"604b392f4655ea7a0521b32e","articleId":118,"userId":364,"content":"腾讯云服务器最新优惠活动汇总：[](http://begin.yundashi168.com/tencent/index)http://begin.yundashi168.com/tencent/index\r\n阿里云服务器最新优惠活动汇总: [](http://begin.yundashi168.com/aliyun/index)http://begin.yundashi168.com/aliyun/index\r\n\r\n现在阿里云和腾讯云学生机的都更新了，最新地址\r\n阿里云学生机：[](https://dashi.aliyun.com/site/arison/student)https://dashi.aliyun.com/site/arison/student    1核2G1M  108元 推荐1年\r\n腾讯云学生机：[](https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314&cps_key=806a34e58199d2e0ccdf9a10ef0ba6ac)https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314    1核2G1M  114元 推荐1年\r\n\r\n其它还有华为云，Ucloud云，金山云和硅云，这些活动可以[点击这里](http://tencent.yundashi168.com/)查看","createdAt":1615542575216},{"id":787,"originId":"5abdc0350b13e3ad6954cfc9","articleId":119,"userId":372,"content":"活动快结束了，大家抓紧","createdAt":1522384949720},{"id":788,"originId":"604b38c54655ea4d4321b320","articleId":119,"userId":364,"content":"腾讯云服务器最新优惠活动汇总：[](http://begin.yundashi168.com/tencent/index)http://begin.yundashi168.com/tencent/index\r\n阿里云服务器最新优惠活动汇总: [](http://begin.yundashi168.com/aliyun/index)http://begin.yundashi168.com/aliyun/index\r\n\r\n现在阿里云和腾讯云学生机的都更新了，最新地址\r\n阿里云学生机：[](https://dashi.aliyun.com/site/arison/student)https://dashi.aliyun.com/site/arison/student    1核2G1M  108元 推荐1年\r\n腾讯云学生机：[](https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314&cps_key=806a34e58199d2e0ccdf9a10ef0ba6ac)https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314    1核2G1M  114元 推荐1年\r\n\r\n其它还有华为云，Ucloud云，金山云和硅云，这些活动可以[点击这里](http://tencent.yundashi168.com/)查看","createdAt":1615542469158},{"id":789,"originId":"5e1c28011225c9423dcd7b16","articleId":120,"userId":373,"content":"老用户购买优惠渠道请联系QQ：454160064","createdAt":1578903553692},{"id":790,"originId":"604b37164655ea212921b308","articleId":120,"userId":364,"content":"腾讯云服务器最新优惠活动汇总：[](http://begin.yundashi168.com/tencent/index)http://begin.yundashi168.com/tencent/index\r\n阿里云服务器最新优惠活动汇总: [](http://begin.yundashi168.com/aliyun/index)http://begin.yundashi168.com/aliyun/index\r\n\r\n现在阿里云和腾讯云学生机的都更新了，最新地址\r\n阿里云学生机：[](https://dashi.aliyun.com/site/arison/student)https://dashi.aliyun.com/site/arison/student    1核2G1M  108元 推荐1年\r\n腾讯云学生机：[](https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314&cps_key=806a34e58199d2e0ccdf9a10ef0ba6ac)https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314    1核2G1M  114元 推荐1年","createdAt":1615542038501},{"id":791,"originId":"5712e24b0a1e9da252f1e3e0","articleId":121,"userId":374,"content":"mark\r\n","createdAt":1460855371456},{"id":792,"originId":"5712e6ea6a2d2bda52de964a","articleId":121,"userId":146,"content":"用来学习确实蛮好的，搭建个人网站也不错","createdAt":1460856554237},{"id":793,"originId":"5712ed8d238ae0ac1e3a6a5c","articleId":121,"userId":89,"content":"[@DevinXian](/user/DevinXian) 这样算，稍贵的，1年大约3000，不如包年合算，学习还不错，如果搭建个人静态站还是github吧，哈哈","createdAt":1460858253983},{"id":794,"originId":"57147cdc0a1e9da252f1e44e","articleId":121,"userId":375,"content":"学生机9.9元。正常包月的话是68的样子。。。。所以我觉得有条件的话还是弄个玩玩，能学到许多东西","createdAt":1460960476640},{"id":795,"originId":"571490640187b9ad0dd444b5","articleId":121,"userId":18,"content":"新手用 https://www.heroku.com/home 做实验感觉也不错的，免费配额听够用。mongodb 和 pgsql 也能免费用。\r\n\r\n就是慢慢慢慢","createdAt":1460965476231},{"id":796,"originId":"5714f46d16e60bcd0d0bffdf","articleId":121,"userId":376,"content":"用bae不是更便宜，一个月6块钱","createdAt":1460991085779},{"id":797,"originId":"5714fa2b0187b9ad0dd444e3","articleId":121,"userId":89,"content":"[@jackzhizu](/user/jackzhizu) 这个确实很便宜，受教 https://bce.baidu.com/calculator.html#/bae/price","createdAt":1460992555457},{"id":798,"originId":"5715c7f71ac9467f2d747703","articleId":121,"userId":377,"content":"一直用CES，用学生证买，3个月才27块，便宜得很。","createdAt":1461045239638},{"id":799,"originId":"5715eaad1330ad632d9c7cb1","articleId":121,"userId":378,"content":"[@alsotang](/user/alsotang) 我们也在用这个，国内确实很慢。。","createdAt":1461054125772},{"id":800,"originId":"5715ee1ba2ec340f1370482a","articleId":121,"userId":379,"content":"daocloud,   docker技术，，有3x的资源可以用，，，，还可以绑定自己的电脑主机","createdAt":1461055003785},{"id":801,"originId":"5715f308a2ec340f13704830","articleId":121,"userId":380,"content":"[@wlf92](/user/wlf92) daocloud 适合企业去使用，如果仅仅是学习 node 的话，光 build push 就够你受的了。。。。而且一个镜像动辄好几百m，磁盘受不了","createdAt":1461056264381},{"id":802,"originId":"57160250a2ec340f1370483a","articleId":121,"userId":381,"content":"https://www.terminal.com/   这个还不错，除了国外延时有点高。\r\n其它的几个在线开发环境：\r\nhttp://www.koding.com/\r\nhttps://ide.coding.net/\r\n","createdAt":1461060176650},{"id":803,"originId":"57176e77bbbc27b1507e9b16","articleId":121,"userId":146,"content":"[@alsotang](/user/alsotang) 最受不了的就是慢慢慢，有时候积极性就这样被打跑了- -","createdAt":1461153399326},{"id":804,"originId":"5717889b1796460c51632e41","articleId":121,"userId":18,"content":"[@DevinXian](/user/DevinXian) 确实啊。用国内的 vps，敲 shell 的时候跟本地一样特别爽，国外的经常要1s的延迟。很浪费积极性。","createdAt":1461160091435},{"id":805,"originId":"572b3c308783d212174bd701","articleId":121,"userId":382,"content":"mark\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1462451248446},{"id":806,"originId":"572b5922378c132e17eb26c5","articleId":121,"userId":111,"content":"localhost ","createdAt":1462458658453},{"id":807,"originId":"603ddb854655ea1f9a21931a","articleId":122,"userId":383,"content":"好文没人看系列。。\r\n不过也巧了，我也正在写nodejs源码的系列文章。。不过还没写完，所以还没发布XD","createdAt":1614666629533},{"id":808,"originId":"603f97004655ea02ff219856","articleId":122,"userId":147,"content":"[@vanishcode](/user/vanishcode) 👍🏻","createdAt":1614780160970},{"id":809,"originId":"604984704655eafb5b21ae34","articleId":122,"userId":33,"content":"并没看懂","createdAt":1615430768173},{"id":810,"originId":"604ad2c64655ea652921b1b6","articleId":122,"userId":384,"content":"[@vanishcode](/user/vanishcode) 期待","createdAt":1615516358124},{"id":811,"originId":"5ee1f11bb703280f0bcb9230","articleId":125,"userId":32,"content":"顶起👍","createdAt":1591865627503},{"id":812,"originId":"5ee1f524b703280f0bcb9240","articleId":125,"userId":21,"content":"都3.0了，不愧是大佬啊\r\n","createdAt":1591866660693},{"id":813,"originId":"5ee1faf4b703280f0bcb9274","articleId":125,"userId":11,"content":"[@zy445566](/user/zy445566) 隔了两年了","createdAt":1591868148259},{"id":814,"originId":"5ee22f8082b588109b648656","articleId":125,"userId":89,"content":"加精华","createdAt":1591881600787},{"id":815,"originId":"5ee23263b703280f0bcb9317","articleId":125,"userId":13,"content":"👍","createdAt":1591882339898},{"id":816,"originId":"5ee23d9682b588109b64866b","articleId":125,"userId":358,"content":"同时也是一个标准的 Egg 应用示范","createdAt":1591885206160},{"id":817,"originId":"5ee32e8eb703280f0bcb947a","articleId":125,"userId":387,"content":"顶起👍","createdAt":1591946894996},{"id":818,"originId":"5ee351b4b703280f0bcb94db","articleId":125,"userId":11,"content":"[@i5ting](/user/i5ting) 感谢狼叔置顶","createdAt":1591955892491},{"id":819,"originId":"5ee56048b703280f0bcb9667","articleId":125,"userId":388,"content":"👍","createdAt":1592090696922},{"id":820,"originId":"5ee6506982b588109b648add","articleId":125,"userId":389,"content":"[@bubao](/user/bubao) test","createdAt":1592152169353},{"id":821,"originId":"5efecf5eb2a7c073cb32a5c3","articleId":125,"userId":268,"content":"👍","createdAt":1593757534419},{"id":822,"originId":"5f070546ab3ed802b534fc41","articleId":125,"userId":390,"content":"大佬，谢谢你们提供的工具准确定位线上问题\r\n","createdAt":1594295622778},{"id":823,"originId":"5f070e68ab3ed802b534fc4c","articleId":125,"userId":391,"content":"插眼，感谢开源分享 👍","createdAt":1594297960109},{"id":824,"originId":"5f07cae6f9700d0938eb3ed1","articleId":125,"userId":11,"content":"[@18820227745](/user/18820227745) 可以在 CNODE 分享下故障案例哦，回头我搞个 repo 放一起帮助大家防止采坑已有问题","createdAt":1594346214731},{"id":825,"originId":"5f1a7caef0739b0e62d11cb2","articleId":125,"userId":392,"content":"越做越好了，点赞","createdAt":1595571374042},{"id":826,"originId":"5f1d865df0739b0e62d121f8","articleId":125,"userId":90,"content":"私有化部署能力正好需要。之前好早看了，还以为只是个玩具，因为有段时间没有更新了，没想到一直在偷摸干活啊～","createdAt":1595770461744},{"id":827,"originId":"5f30f8bff0739b0e62d1462a","articleId":125,"userId":296,"content":"基于 alinode 的吗？","createdAt":1597044927555},{"id":828,"originId":"5f310ef5f0739b0e62d1465b","articleId":125,"userId":11,"content":"[@JZLeung](/user/JZLeung)  除了控制台的 UI 参考了 alinode 的设计风格（这里是基于 view-design + 纯 svg 实现的），其它的地方和 alinode 没有关系哦","createdAt":1597050613088},{"id":829,"originId":"5f51f1d631fc7a1d8ad65e32","articleId":125,"userId":393,"content":"已经接入线上业务，效果8⃣️错，点赞大佬\r\n![image.png](//static.cnodejs.org/FpOIT4P16BXEZGXn8GHhZErVsa59)","createdAt":1599205846513},{"id":830,"originId":"5f52043431fc7a1d8ad65ea6","articleId":125,"userId":2,"content":"给大佬点赞👍","createdAt":1599210548538},{"id":831,"originId":"5f54813ac1c67a7dd9afd773","articleId":125,"userId":11,"content":"[@PatrickStarCat](/user/PatrickStarCat) 好用的话介绍给朋友看看","createdAt":1599373626525},{"id":832,"originId":"5f54991ed22a6b1d622c7e05","articleId":125,"userId":394,"content":"不错","createdAt":1599379742637},{"id":833,"originId":"5f572e6cc1c67a7dd9afdc56","articleId":125,"userId":395,"content":"nihao","createdAt":1599549036722},{"id":834,"originId":"5f6eafcc72af8c02d3f8d6ba","articleId":125,"userId":396,"content":"[@hyj1991](/user/hyj1991) 1213123","createdAt":1601089484879},{"id":835,"originId":"5fdec9170f99cbf7865e3953","articleId":125,"userId":103,"content":"先点赞后使用","createdAt":1608435991821},{"id":836,"originId":"5fe0fee598427e964d6a9af2","articleId":125,"userId":397,"content":"666\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1608580837754},{"id":837,"originId":"5fe946bf5393a5279b545966","articleId":125,"userId":56,"content":"hello","createdAt":1609123519873},{"id":838,"originId":"601cdfa803d7977d8166efc7","articleId":125,"userId":89,"content":"今年node party分享","createdAt":1612505000578},{"id":839,"originId":"601d082903d797730f66f1a5","articleId":125,"userId":398,"content":"👍","createdAt":1612515369348},{"id":840,"originId":"604728564655ea089021a86b","articleId":125,"userId":399,"content":"asdfasdfsadf","createdAt":1615276118937},{"id":841,"originId":"6046f3994655ea906221a732","articleId":126,"userId":354,"content":"demo还需再完善","createdAt":1615262617498},{"id":842,"originId":"60371e524655ea159c21843d","articleId":129,"userId":125,"content":"兄弟，能分享一下怎么实现的吗？是自己写了语法编译器？前端几乎没人懂这些东西","createdAt":1614224978805},{"id":843,"originId":"603733924655ea5015218466","articleId":129,"userId":402,"content":"[@dlutwuwei](/user/dlutwuwei) 前端用的Jison(Bison)实现词法及部分语法分析, 剩余部分语法解析用的递归 后端用的JS的VM, 通过绑定上下文`vm.createContext(context)`实现调用Node.js的原生库,Gihub上有放源码 [源码](https://github.com/FIRESIDE-STORY/yyc)","createdAt":1614230418761},{"id":844,"originId":"6039c4b34655ea60bc218b25","articleId":129,"userId":402,"content":"自己顶","createdAt":1614398643733},{"id":845,"originId":"603c53eb4655ea1d42218ee9","articleId":129,"userId":97,"content":"[@dlutwuwei](/user/dlutwuwei) 前端很多人都懂的 https://github.com/hsiaosiyuan0/icj","createdAt":1614566379937},{"id":846,"originId":"603e0d8b4655ea4455219400","articleId":129,"userId":402,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0)  兄弟, 项目不错, 里面还有不少未完进度, 还打算更新吗?","createdAt":1614679435719},{"id":847,"originId":"603e34d34655ea7cf3219496","articleId":129,"userId":97,"content":"[@TIME-GATE](/user/TIME-GATE) 计划是就静养到 200 stars 再继续🤪","createdAt":1614689491728},{"id":848,"originId":"603dce6b4655ea0f9f2192df","articleId":130,"userId":404,"content":"这就是未来开发该有的样子吗？顶顶顶","createdAt":1614663275912},{"id":849,"originId":"5feeb7755393a52ac85462c6","articleId":131,"userId":21,"content":"逝者如斯夫，死月大佬加油吧(ง •̀_•́)ง","createdAt":1609480053883},{"id":850,"originId":"5fef2cc25393a5e2e654638f","articleId":131,"userId":354,"content":"👍🏾","createdAt":1609510082948},{"id":851,"originId":"5ff26d525393a569a35466c9","articleId":131,"userId":36,"content":"💪","createdAt":1609723218581},{"id":852,"originId":"5ff293a95393a5e39154679f","articleId":131,"userId":33,"content":"换一个没有上位者的公司。","createdAt":1609733033086},{"id":853,"originId":"5ff2b53c5393a5ae985467f6","articleId":131,"userId":405,"content":"加油","createdAt":1609741628575},{"id":854,"originId":"5ff6c6b0a2a2134e9af6d463","articleId":131,"userId":45,"content":"这年我也切换赛道了，有新的迷茫……","createdAt":1610008240291},{"id":855,"originId":"5ff6d07ea2a2131321f6d4a4","articleId":131,"userId":406,"content":"加油","createdAt":1610010750342},{"id":856,"originId":"600697d25d04ac2593217808","articleId":131,"userId":90,"content":"还是工具思想。。。","createdAt":1611044818893},{"id":857,"originId":"600928785d04ac530b217d05","articleId":131,"userId":65,"content":"做人太累","createdAt":1611212920111},{"id":858,"originId":"600c16a95d04ac37cc218303","articleId":131,"userId":407,"content":"⛽️  👍","createdAt":1611404969009},{"id":859,"originId":"6035d0be4655ea247b218053","articleId":131,"userId":408,"content":"点赞","createdAt":1614139582418},{"id":860,"originId":"6036f8a24655ea7d5d218334","articleId":131,"userId":77,"content":"这是个人的凡尔赛吗，比我们好","createdAt":1614215330939},{"id":861,"originId":"603db38c4655ea72a2219277","articleId":131,"userId":125,"content":"为何非要去做编码工作，抓住自己的专长，做布道，做分享，做猎头。全文看死月最看重的还是在阿里的朋友们，被PUA都在所不惜。","createdAt":1614656396368},{"id":862,"originId":"6031bcdb03d7975e08670a53","articleId":139,"userId":160,"content":"敢不敢给个免费版本","createdAt":1613872347846},{"id":863,"originId":"6035bf574655ea2784217fcb","articleId":139,"userId":408,"content":"react 17 和 react 16 写起来有啥差别","createdAt":1614135127550},{"id":864,"originId":"60371d064655ea9a75218424","articleId":139,"userId":125,"content":"非常棒，我们公司也用jira，最新的react技术栈，非常符合我们团队的要求。要不要看个机会，交个朋友也可以。https://cnodejs.org/topic/5fe0776e98427e3c116a9a3c\r\n","createdAt":1614224646147},{"id":865,"originId":"60371c674655ea7c5d218418","articleId":140,"userId":125,"content":"创意非常棒，兄弟。要不要看个机会，交个朋友也可以。https://cnodejs.org/topic/5fe0776e98427e3c116a9a3c\r\n","createdAt":1614224487163},{"id":866,"originId":"591f8ba19e32cc84569a7152","articleId":141,"userId":413,"content":"还是没开源吗？","createdAt":1495239585571},{"id":867,"originId":"5ae7c80c1b02288048bd0b51","articleId":141,"userId":414,"content":"楼主的最佳实践确实可以开源了。","createdAt":1525139468624},{"id":868,"originId":"60371bfc4655ea388221840a","articleId":141,"userId":125,"content":"创意非常棒，兄弟。要不要看个机会，交个朋友也可以。https://cnodejs.org/topic/5fe0776e98427e3c116a9a3c\r\n","createdAt":1614224380663},{"id":869,"originId":"60371b8d4655eafa402183fa","articleId":142,"userId":125,"content":"创意非常棒，兄弟。要不要看个机会，交个朋友也可以。https://cnodejs.org/topic/5fe0776e98427e3c116a9a3c\r\n","createdAt":1614224269465},{"id":870,"originId":"603465364655ea26ad217a4f","articleId":143,"userId":111,"content":"![Screenshot_2.jpg](//static.cnodejs.org/FsvIH7BLrnVE2Ia_CzxH1n8kPyHz)\r\npaw 手机上的lamp\r\nhttp://paw-android.fun2code.de/","createdAt":1614046518858},{"id":871,"originId":"603116fa03d7979fe2670967","articleId":144,"userId":109,"content":"url 有效性都不检查，有点偷懒","createdAt":1613829882141},{"id":872,"originId":"602fb7d803d797d6fd6704d3","articleId":145,"userId":89,"content":"A most advanced ssr framework on Earth， 牛逼","createdAt":1613739992887},{"id":873,"originId":"59576b0ad629da605b2f5a8d","articleId":146,"userId":418,"content":"围观大神","createdAt":1498901258858},{"id":874,"originId":"5957782dd629da605b2f5a8f","articleId":146,"userId":11,"content":"赞赞赞！书什么时候出哇\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1498904621457},{"id":875,"originId":"595781adacfce9295ba072e8","articleId":146,"userId":21,"content":"什么时候node粘合C不要Python啊\r\n用node还装个Python真的好恶心\r\n据说大大已经commit很多代码，在node8上啊","createdAt":1498907053795},{"id":876,"originId":"5957bbfc302ae0445be7df79","articleId":146,"userId":1,"content":"[@hyj1991](/user/hyj1991) 预计八月初稿完成，不知道赶不赶得及","createdAt":1498921980079},{"id":877,"originId":"5957bc09302ae0445be7df7b","articleId":146,"userId":1,"content":"[@zy445566](/user/zy445566) 应该还有很长一段路","createdAt":1498921993775},{"id":878,"originId":"595832eb545d7a7b5b0b388d","articleId":146,"userId":358,"content":"膜拜死月大大","createdAt":1498952427801},{"id":879,"originId":"5f49ded068156574e6e6da11","articleId":146,"userId":419,"content":"赞  ","createdAt":1598676688212},{"id":880,"originId":"602f81f903d7974c5f670401","articleId":146,"userId":2,"content":"考古学家\r\n看了死月的书，很赞，对于ABI和N-API有疑惑，特来考古","createdAt":1613726201120},{"id":881,"originId":"55adff2b911fb957520eab99","articleId":148,"userId":422,"content":"mark，晚上试试…","createdAt":1437466411683},{"id":882,"originId":"55ae0522911fb957520eaba5","articleId":148,"userId":421,"content":"[@albin3](/user/albin3) 嗯。去吧，骚年！","createdAt":1437467938100},{"id":883,"originId":"55ae454d911fb957520eac12","articleId":148,"userId":422,"content":"[@heixiaoshan](/user/heixiaoshan) 今晚有事干了…得过两天，囧。","createdAt":1437484365408},{"id":884,"originId":"55ae4583911fb957520eac16","articleId":148,"userId":422,"content":"[@heixiaoshan](/user/heixiaoshan) 有mark记着，妥妥的","createdAt":1437484419694},{"id":885,"originId":"55ae4fcf911fb957520eac37","articleId":148,"userId":423,"content":"```shell\r\nyum install python-setuptools && easy_install pip\r\npip install shadowsocks\r\nsudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start\r\n```","createdAt":1437487055069},{"id":886,"originId":"55ae5076911fb957520eac40","articleId":148,"userId":421,"content":"[@ystyle](/user/ystyle) 你干啥呢\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1437487222234},{"id":887,"originId":"55ae5957911fb957520eac51","articleId":148,"userId":424,"content":"有没有docker版的？","createdAt":1437489495983},{"id":888,"originId":"55ae7160911fb957520eac61","articleId":148,"userId":424,"content":"docker index 上查到了几个","createdAt":1437495648115},{"id":889,"originId":"55af2946911fb957520eaced","articleId":148,"userId":421,"content":"[@leapon](/user/leapon) docker这个真没有去研究，不过感觉差不多。","createdAt":1437542726019},{"id":890,"originId":"55b71f02f30671210b35f9ad","articleId":148,"userId":422,"content":"已配置好，可以用。局域网里可以相互访问，但是没办法在本地访问google.com==#……\r\n不知道是哪里出了问题。","createdAt":1438064386255},{"id":891,"originId":"55b71f6cf30671210b35f9af","articleId":148,"userId":422,"content":"[@ystyle](/user/ystyle) shadowsocks在浏览器里用比较方便，vpn全局都出墙了…手机上的软件或者电脑上的npm这些会方便一点吧","createdAt":1438064492978},{"id":892,"originId":"55b7328ff30671210b35f9d5","articleId":148,"userId":425,"content":"PPTP经常连不上.\r\n然后上海电信现在出国各种丢包....","createdAt":1438069391873},{"id":893,"originId":"55b74ea2f30671210b35f9fb","articleId":148,"userId":421,"content":"[@albin3](/user/albin3) 先试试能不能ping通咯","createdAt":1438076578539},{"id":894,"originId":"55b74eb5f30671210b35f9fd","articleId":148,"userId":421,"content":"[@meteormatt](/user/meteormatt) mac感觉不太稳定","createdAt":1438076597855},{"id":895,"originId":"55b77dfff30671210b35fa28","articleId":148,"userId":422,"content":"[@heixiaoshan](/user/heixiaoshan) vpn的局域网能相互访问了，两个设备连上去，一个起一个网站，另外一个能访问，就是访问不到google…囧。。","createdAt":1438088703939},{"id":896,"originId":"55b78127f30671210b35fa2c","articleId":148,"userId":422,"content":"[@heixiaoshan](/user/heixiaoshan) 好了…换了网卡…==#网卡里面没有eth0…","createdAt":1438089511713},{"id":897,"originId":"55b785e3f30671210b35fa2f","articleId":148,"userId":421,"content":"[@albin3](/user/albin3)  一般都是这样。\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1438090723072},{"id":898,"originId":"5b4381fcfb9e84ec69cc193d","articleId":148,"userId":224,"content":"不折腾了现在，直接走付/费，[VyprVPN](https://www.goldenfrog.com/zh/vyprvpn?offer_id=174&amp;aff_id=3008)或者[expressVPN](http://www.linkev.com/?a_fid=clover)","createdAt":1531150844893},{"id":899,"originId":"5e5f04f2a72b853f100458bf","articleId":148,"userId":165,"content":"[ExpressVPN购买使用教程-大陆可用的VPN，速度快，抗封锁 2020版](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 Shadowsocks 代理，网络是CN2 Gia，连接速度快，并且官方保证IP可用，提供5个IP地址，支持中国的支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)\r\n","createdAt":1583285490532},{"id":900,"originId":"5f57101fc1c67a7dd9afdbba","articleId":148,"userId":426,"content":"**这个简单好用，可以试试 [免费下载](https://github.com/myjiasuqi/jiasu/wiki)**\r\n","createdAt":1599541279954},{"id":901,"originId":"5feabd5e5393a50565545d1b","articleId":148,"userId":226,"content":"感谢楼主分享。\r\n\r\n对于一些不会自己搭建VPN，或者懒得自己动手搭建VPN的人来说，直接选择市面上一些成熟的VPN也是个不错的选择。\r\n\r\n目前还能用的[中国VPN/翻墙软件](https://www.topvpnguides.com/best-vpn-for-china-cn/)有：\r\n\r\n**[PureVPN](https://www.topvpnguides.com/go/purevpn/)**：1.32美金/月，支持海外翻墙回国，免费试用VPN31天\r\n\r\n**[Ivacy VPN](https://www.topvpnguides.com/go/ivacyvpn/)**：1 美金每月，非常物有所值，免费试用VPN30天\r\n\r\n**[Surfshark](https://www.topvpnguides.com/go/surfshark/)**：2.21美金每月，性价比非常高，免费VPN30天\r\n\r\n**[ExpressVPN](https://www.topvpnguides.com/go/expressvpn/)**：6.67美金每月，速度最快的VPN，免费试用VPN30天\r\n\r\n以上四款[中国VPN翻墙软件](https://www.topvpnguides.com/best-vpn-for-china-cn/)都是比较知名的VPN品牌，可翻墙，速度也挺快，最主要的是遇到任何问题都可以直接找客服解决，简单方便。可以试试。","createdAt":1609219422294},{"id":902,"originId":"6007e7675d04acd1de217a52","articleId":148,"userId":112,"content":"这个帖子推荐的PPTP在中国已经基本不能用了，如果自己搭建梯子，建议改用[Shadowsocks](https://www.vpndada.com/shadowsocks-tutorial-cn/)或[V2Ray](https://www.vpndada.com/v2ray-tutorial-cn/)。\r\n\r\n如果懒得自己折腾，可以根据靠谱的[翻墙软件VPN推荐](https://www.vpndada.com/best-vpns-for-china-cn/)（[VPN for China](https://www.vpndada.com/best-vpns-for-china/)）购买一个稳定的付费VPN吧。","createdAt":1611130727322},{"id":903,"originId":"602d6b2103d797186c66ffe0","articleId":148,"userId":174,"content":"推荐光年VPN。无限流量，SSR节点，采用BGP中继，速度快稳定。注册还可以免费VIP试用。现在有限时特惠活动24+6。送大家一个折扣码：2WEs5aVO\r\n\r\n![光年VPN](//static.cnodejs.org/Fh0tPq5vFtt14fLHcL1RnbD-PojW)\r\n\r\nhttps://lightyearvpn.com/\r\nhttps://lightyearapp.life/","createdAt":1613589281382},{"id":904,"originId":"6009570c5d04ac981b217dad","articleId":150,"userId":429,"content":"ceshi","createdAt":1611224844260},{"id":905,"originId":"600957275d04ac7757217db1","articleId":150,"userId":429,"content":"ceshi","createdAt":1611224871654},{"id":906,"originId":"600957315d04ac649b217db5","articleId":150,"userId":429,"content":"ceshi ","createdAt":1611224881546},{"id":907,"originId":"600a28be5d04acf1b0217e9a","articleId":150,"userId":430,"content":"如何联系","createdAt":1611278526499},{"id":908,"originId":"600a2fe25d04ac7cfd217eb4","articleId":150,"userId":19,"content":"这种不都是自己练手吗？","createdAt":1611280354014},{"id":909,"originId":"600bbe0b5d04ac30a42181f8","articleId":150,"userId":428,"content":"[@sjlontheway](/user/sjlontheway) 你好，你微信多少，我加你","createdAt":1611382283545},{"id":910,"originId":"600bbe6e5d04ac9bf12181ff","articleId":150,"userId":428,"content":"[@luanxuechao](/user/luanxuechao) 打算开源，别人也可以使用的版本","createdAt":1611382382654},{"id":911,"originId":"6012934903d7971d5266dcb0","articleId":150,"userId":428,"content":"顶一个","createdAt":1611830089402},{"id":912,"originId":"60162ad803d7977c3c66e185","articleId":150,"userId":116,"content":"用discuzq啊，我就用discuzq写了一个 clodra.com","createdAt":1612065496129},{"id":913,"originId":"601f832403d7970c3d66f616","articleId":150,"userId":431,"content":"联系方式\r\nbase64： eWFuZ2hlbmdhaA==\r\n","createdAt":1612677924073},{"id":914,"originId":"602a748903d797145466fd01","articleId":150,"userId":428,"content":"[@yh4922](/user/yh4922) 已加","createdAt":1613395081437},{"id":915,"originId":"600ec58b5d04ac004d2186e8","articleId":153,"userId":66,"content":"用express很好做啊，你看看文档嘛。","createdAt":1611580811306},{"id":916,"originId":"6011606103d797782766da06","articleId":153,"userId":158,"content":"获取httpAdaptor实例，使用fastify或express的API","createdAt":1611751521802},{"id":917,"originId":"601209b703d7972d9866da6a","articleId":153,"userId":67,"content":"2323","createdAt":1611794871440},{"id":918,"originId":"601a0f2003d797fe2366ea3b","articleId":153,"userId":155,"content":"setGlobalPrefix","createdAt":1612320544743},{"id":919,"originId":"5f6caa3bf9736b02ceada300","articleId":155,"userId":21,"content":"像文件指针这种东西在C里面经常会用到，但是习惯了JS的自动释放，用到文件指针这种需要释放的东西就容易遗忘。当然本文最骚的一点是IO堵死。\r\n\r\n这个故事告诉我们能用大众写法，就别特立独行搞花里胡哨的。为了节约一点点性能，却为后人埋深坑。\r\n\r\n\r\n我之前遇到一个分页问题，一遇到并发分页就不对，就是有人利用了koa的this.context基类特性，结果还是给后人埋坑。","createdAt":1600956987798},{"id":920,"originId":"5f6cab9f72af8c02d3f8d3db","articleId":155,"userId":98,"content":"图全部403了，这让我想起了几年前做视频项目时遇到的一个问题，我们的渲染服务器是在windows上跑的，渲染完毕后会清理掉一些临时文件，这时候莫名其妙地出现程序卡在删除文件的操作上，所以我们简单的把await 去掉了，是的，无论成功还是失败我们不等了，继续进行之后的任务也能正常清理掉相应的临时文件，因为问题很偶发难以复现最终也没有深入去研究","createdAt":1600957343582},{"id":921,"originId":"5f6d38d1f9736b02ceada335","articleId":155,"userId":22,"content":"图片挂了","createdAt":1600993489869},{"id":922,"originId":"5f6d4bf3f9736b02ceada36a","articleId":155,"userId":11,"content":"[@justjavac](/user/justjavac) 图片用的语雀的，我改成本地上传","createdAt":1600998387417},{"id":923,"originId":"5f6d4c1672af8c02d3f8d445","articleId":155,"userId":11,"content":"[@zy445566](/user/zy445566) 是的，IO 阻塞没有任何报错信息，看 strace 也只能看到系统调用挂了但是不知道为什么","createdAt":1600998422550},{"id":924,"originId":"5f6d4c4872af8c02d3f8d449","articleId":155,"userId":11,"content":"[@zengming00](/user/zengming00) 这种事情有条件还是得跟下，要不然累积下来自己也会觉得 Node.js 不稳定不安全啥的","createdAt":1600998472116},{"id":925,"originId":"5f6d7ef2f9736b02ceada412","articleId":155,"userId":147,"content":"很强的实践例子。非常赞","createdAt":1601011442087},{"id":926,"originId":"5f6d8d1f72af8c02d3f8d54f","articleId":155,"userId":21,"content":"其实我也有个疑问，就是8W+的句柄，还没有死之前做一次，快照对比，找到只新增没回收的对象，数量不应该很明显么","createdAt":1601015071140},{"id":927,"originId":"5f6d92af72af8c02d3f8d59f","articleId":155,"userId":11,"content":"[@zy445566](/user/zy445566) 堆使用内存只有 100M，而且看曲线很平稳，这个显然并没有计算到堆空间里","createdAt":1601016495271},{"id":928,"originId":"5f6d92e6f9736b02ceada4c9","articleId":155,"userId":11,"content":"[@theanarkh](/user/theanarkh) thx，啥时候来写 V8 的源码分析","createdAt":1601016550829},{"id":929,"originId":"5f6de114f9736b02ceada5a9","articleId":155,"userId":21,"content":"[@hyj1991](/user/hyj1991) 老实说我震惊了，一开始我并不了解open方法，原来就是把原生的数字封装返回了。\r\n\r\n这一点都不js，我觉得这个open应该叫openUnsafe。我觉得safe的open应该是返回挂在heap的对象，当该对象不被引用而回收的时候，自动执行close。而不是像数字这种基本类型，虽然也挂在heap上，但却无法做为是否引用结束的判断依据。虽然这样说有点代码评论家的意思。","createdAt":1601036564287},{"id":930,"originId":"5f6df88ef9736b02ceada5c5","articleId":155,"userId":11,"content":"[@zy445566](/user/zy445566) 本来就是这样，js 层返回的 fd 就是进程空间对应的文件描述符，所以这类问题看堆快照看不到问题","createdAt":1601042574193},{"id":931,"originId":"5f6feec672af8c02d3f8d7af","articleId":155,"userId":405,"content":"强，这种问题我自认为解决不了，系统编程的经验太缺乏了。如果不是从open那里发现了handler数量有限制这个不起眼的关联，根本不会去查看打开的文件数，更不会怀疑到是access的问题","createdAt":1601171142986},{"id":932,"originId":"5f7001d9f9736b02ceada7a3","articleId":155,"userId":11,"content":"[@youth7](/user/youth7) 只能说有时候排查问题真的需要灵光一闪。。。再牛逼的工具也不能解决所有问题，以前我以为 Coredump 分析可以搞定一切了","createdAt":1601176025454},{"id":933,"originId":"5f7044abf9736b02ceada893","articleId":155,"userId":109,"content":"[@zy445566](/user/zy445566) 类似故障，如果程序代码没有明显bug，那么多半是和外设IO(磁盘，网络)接口有关。\r\n首先排查网络和磁盘相关资源开销。","createdAt":1601193131114},{"id":934,"originId":"5f73efb972af8c02d3f8e164","articleId":155,"userId":21,"content":"[@hyj1991](/user/hyj1991) \r\n不，我的意思其实是 https://github.com/nodejs/node/pull/35412 。\r\n\r\n但是node.js管理者，他认为：\r\n* 应该使用FileHandle来管理，而不是像我这样新开一个类\r\n* 不希望过分依赖GC来达到自动fs.close的功能\r\n* 弱回调不能够达到在进程退出后的更好的操作\r\n* 并且更希望能对fd进行跟踪\r\n","createdAt":1601433529164},{"id":935,"originId":"5f73eff272af8c02d3f8e168","articleId":155,"userId":21,"content":"[@waitingsong](/user/waitingsong) 是的","createdAt":1601433586703},{"id":936,"originId":"60168c3d03d79719b166e25e","articleId":155,"userId":109,"content":"[@zy445566](/user/zy445566)  这个需要良好习惯养成，或者说这就是经验的体现： \r\n1. 避免使用过于精妙的实现（除非利益相关）。便于debug以及后期维护。\r\n2. 有始有终，不要怕麻烦。 比如打开文件就记得关闭，不要完全依靠底层自动关闭。 比如事务处理，显示打开就记得显示提交或者回滚（即便是中间件中）。","createdAt":1612090429742},{"id":937,"originId":"58048884fdf3bd3d651186e9","articleId":156,"userId":434,"content":"很感兴趣","createdAt":1476692100991},{"id":938,"originId":"58049b650bab808265185e89","articleId":156,"userId":435,"content":"顶","createdAt":1476696933021},{"id":939,"originId":"5804b1fbfdf3bd3d65118703","articleId":156,"userId":228,"content":"[@stonephp](/user/stonephp) 哈哈，可要小心，一旦开始感兴趣，就无法自拔了，未来的职业规划、产品方向可能都会改变，^-^","createdAt":1476702715188},{"id":940,"originId":"5805d9cb0bab808265185ee2","articleId":156,"userId":436,"content":"mark","createdAt":1476778443886},{"id":941,"originId":"5806d0a5487e1e4578afb623","articleId":156,"userId":315,"content":"Mark\n\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1476841637934},{"id":942,"originId":"5a3d221ad1536726354b8057","articleId":156,"userId":21,"content":"大佬，目前国内有很多区块链货币，感觉技术也不错，但货币预挖的厉害，而且过于集中，大佬有对这些货币什么看法？\r\n我也是有志用nodejs写一个区块链货币，用nodejs实现区块链货币是否还存在能以解决的瓶颈？","createdAt":1513955866523},{"id":943,"originId":"5b17d5c829e6e510415b288f","articleId":156,"userId":437,"content":"推荐一个适合区块链开发新手入门DApp实战开发：[以太坊教程](http://xc.hubwiz.com/course/5a952991adb3847553d205d1)","createdAt":1528288712550},{"id":944,"originId":"6016604d03d7977fa966e204","articleId":156,"userId":39,"content":"感谢楼主的教程！很多人对区块链的理解还停留在[买比特币](https://www.huhangfei.com/post/how-to-buy-bitcoin-in-china/)的层次上。这篇文章非常有助于大家（尤其是程序猿）对区块链有一个系统直观的理解。感谢！","createdAt":1612079181595},{"id":945,"originId":"5ff437145393a51fe2546aea","articleId":157,"userId":438,"content":"之前也有个愿景，做一个开放式搭建的平台，没想到没多久就看见了，马克学习一下","createdAt":1609840404920},{"id":946,"originId":"5ff593965393a55257546eef","articleId":157,"userId":158,"content":"支持👍","createdAt":1609929622224},{"id":947,"originId":"6000ec00a2a21344edf6e5b6","articleId":157,"userId":30,"content":"先顶再看，加油","createdAt":1610673152564},{"id":948,"originId":"60015a395d04acf28021711d","articleId":157,"userId":194,"content":"支持👍","createdAt":1610701369083},{"id":949,"originId":"5fffe3eaa2a2133069f6e44a","articleId":158,"userId":440,"content":"👍 用心了","createdAt":1610605546803},{"id":950,"originId":"6000f9bca2a213a2acf6e5f0","articleId":158,"userId":151,"content":"难得","createdAt":1610676668183},{"id":951,"originId":"600523d15d04acf43121757b","articleId":158,"userId":441,"content":"赞👍","createdAt":1610949585690},{"id":952,"originId":"600544385d04ac50dd217604","articleId":158,"userId":166,"content":"👍  写的很详细且很清楚，思路清晰","createdAt":1610957880612},{"id":953,"originId":"600e74805d04ac059a2185dd","articleId":158,"userId":442,"content":"好得炸裂 👍 ","createdAt":1611560064186},{"id":954,"originId":"600f71ac5d04ac44da218751","articleId":158,"userId":405,"content":"学习了，写得非常好。不过文章标题最好说明是chrome下面的js内存布局，或者在Firefox下就略有不同了","createdAt":1611624876519},{"id":955,"originId":"60101f755d04ac06f9218928","articleId":158,"userId":384,"content":"非常好👍","createdAt":1611669365501},{"id":956,"originId":"56a604bb073124894b190afb","articleId":159,"userId":89,"content":"mark","createdAt":1453720763370},{"id":957,"originId":"56a6d141cf60b1b94bab3484","articleId":159,"userId":444,"content":"Mark\n\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1453773121279},{"id":958,"originId":"56a6eaf57ec020ed4b96b360","articleId":159,"userId":445,"content":"mark\r\n","createdAt":1453779701714},{"id":959,"originId":"56a6ecabf03253594b7fb702","articleId":159,"userId":446,"content":"最近在搞KOA，感觉比express好用。。。","createdAt":1453780139047},{"id":960,"originId":"56a762cbcf60b1b94bab34c0","articleId":159,"userId":447,"content":"mark","createdAt":1453810379872},{"id":961,"originId":"56a9c33524b0c1ec628ff029","articleId":159,"userId":279,"content":"mark","createdAt":1453966133540},{"id":962,"originId":"56aa0311c3f170d262995401","articleId":159,"userId":448,"content":"mark","createdAt":1453982481750},{"id":963,"originId":"56aa13f026d02fc6626bb34f","articleId":159,"userId":449,"content":"mark","createdAt":1453986800134},{"id":964,"originId":"56ab094024b0c1ec628ff07a","articleId":159,"userId":450,"content":"mark是什么意思\r\nmark","createdAt":1454049600202},{"id":965,"originId":"56ab26ae26d02fc6626bb386","articleId":159,"userId":451,"content":"mark\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1454057134320},{"id":966,"originId":"56ab3ff3c3f170d262995444","articleId":159,"userId":452,"content":"一般用什么实现集群，PM2吗？","createdAt":1454063603919},{"id":967,"originId":"56abca1e24b0c1ec628ff0a1","articleId":159,"userId":453,"content":"[@keenwon](/user/keenwon) pm2+nginx, 这个只针对一个服务器上","createdAt":1454098974422},{"id":968,"originId":"56b0b9f6c3f170d262995529","articleId":159,"userId":454,"content":"mark\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1454422518285},{"id":969,"originId":"56bc9076c3f170d2629955fb","articleId":159,"userId":455,"content":"mark，谢谢楼主\n\nSent from CNodejs for iOS","createdAt":1455198326226},{"id":970,"originId":"56bca13071204e03637a38a0","articleId":159,"userId":456,"content":"mark\n","createdAt":1455202608093},{"id":971,"originId":"56bd7fc226d02fc6626bb550","articleId":159,"userId":457,"content":"新技能 get √","createdAt":1455259586672},{"id":972,"originId":"56bfe6f671204e03637a38c8","articleId":159,"userId":458,"content":"mark 咯","createdAt":1455417078233},{"id":973,"originId":"56c13c5824b0c1ec628ff2c8","articleId":159,"userId":459,"content":"mark\r\n","createdAt":1455504472038},{"id":974,"originId":"56c1400371204e03637a38f1","articleId":159,"userId":460,"content":"mark","createdAt":1455505411960},{"id":975,"originId":"56c2786e24b0c1ec628ff2ff","articleId":159,"userId":461,"content":"mark 感谢分享","createdAt":1455585390988},{"id":976,"originId":"56c9c1ae92cca07861f942d9","articleId":159,"userId":462,"content":"Mark","createdAt":1456062894191},{"id":977,"originId":"56d3ffa196c5cd5e66584531","articleId":159,"userId":463,"content":"Mark","createdAt":1456734113678},{"id":978,"originId":"56d4effce3889756776c7e21","articleId":159,"userId":77,"content":"恩，same Mark","createdAt":1456795644907},{"id":979,"originId":"56d8d4ab502596633dc2c30b","articleId":159,"userId":464,"content":"Mark","createdAt":1457050795441},{"id":980,"originId":"56d92294c0fa23473d005f7c","articleId":159,"userId":465,"content":"mark","createdAt":1457070740329},{"id":981,"originId":"56d99df9502596633dc2c377","articleId":159,"userId":228,"content":"mark too","createdAt":1457102329006},{"id":982,"originId":"56d9a9de820d3c9b3d63e329","articleId":159,"userId":466,"content":"好像很厉害","createdAt":1457105374062},{"id":983,"originId":"56de40458023c6146ec3fdd4","articleId":159,"userId":207,"content":"mark 一下 ，稍后细看","createdAt":1457406021020},{"id":984,"originId":"56de444f9386fbf86ddd68c5","articleId":159,"userId":467,"content":"嗯，不错哦。","createdAt":1457407055112},{"id":985,"originId":"56de4d5c9386fbf86ddd68cb","articleId":159,"userId":468,"content":"mark\r\n\r\n","createdAt":1457409372811},{"id":986,"originId":"56e0ea3d9386fbf86ddd6988","articleId":159,"userId":469,"content":"Mark","createdAt":1457580605893},{"id":987,"originId":"56e162c0255ed94c6e4c276b","articleId":159,"userId":319,"content":"mark 学习了","createdAt":1457611456351},{"id":988,"originId":"56e16afef5d830306e2f0f80","articleId":159,"userId":470,"content":"mark","createdAt":1457613566756},{"id":989,"originId":"56e17be0255ed94c6e4c276f","articleId":159,"userId":470,"content":"问下，使用cluster后 在一个4cpu的机器上，是应该启动一个app（4个worker）呢，还是启动4个app（16worker）再用nginx分流呢，\r\n这样两者对cpu的使用情况是否一样呢","createdAt":1457617888377},{"id":990,"originId":"56e8240a545c5c736d123912","articleId":159,"userId":471,"content":"mark","createdAt":1458054154030},{"id":991,"originId":"56e8af72cf7763a6045c4acc","articleId":159,"userId":472,"content":"mark","createdAt":1458089842894},{"id":992,"originId":"5790aa3443fb9f04148cfd1e","articleId":159,"userId":473,"content":"赞！！！","createdAt":1469098548650},{"id":993,"originId":"57917cd74265959826e7b1c5","articleId":159,"userId":474,"content":"mark","createdAt":1469152471002},{"id":994,"originId":"579182b42d740f7c26637db2","articleId":159,"userId":475,"content":"mark","createdAt":1469153972417},{"id":995,"originId":"579189774265959826e7b1d3","articleId":159,"userId":133,"content":"不错。\r\n这个其实和Express关系不是很大，大部分内容其它框架也使用。","createdAt":1469155703765},{"id":996,"originId":"5791bf282d740f7c26637de3","articleId":159,"userId":476,"content":"mark\r\n","createdAt":1469169448299},{"id":997,"originId":"57922a77f0d4b46026ba5421","articleId":159,"userId":477,"content":"mark","createdAt":1469196919855},{"id":998,"originId":"57922d774cddcb432614670e","articleId":159,"userId":478,"content":"赞","createdAt":1469197687725},{"id":999,"originId":"5792ccdbf0d4b46026ba5432","articleId":159,"userId":479,"content":"![Image](http://resource) 赞\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1469238491611},{"id":1000,"originId":"57972b8a2d740f7c26637ece","articleId":159,"userId":480,"content":"mark","createdAt":1469524874112},{"id":1001,"originId":"57996904f0d4b46026ba5580","articleId":159,"userId":481,"content":"mark","createdAt":1469671684703},{"id":1002,"originId":"579a1a004cddcb43261468bc","articleId":159,"userId":482,"content":"mark","createdAt":1469716992590},{"id":1003,"originId":"579a1c8d4cddcb43261468be","articleId":159,"userId":483,"content":"mark","createdAt":1469717645898},{"id":1004,"originId":"579ab7f1f0d4b46026ba55f1","articleId":159,"userId":484,"content":"mark","createdAt":1469757425606},{"id":1005,"originId":"579eaa0b23e454cd2af817e8","articleId":159,"userId":96,"content":"mark","createdAt":1470016011252},{"id":1006,"originId":"579eb16423e454cd2af817ec","articleId":159,"userId":485,"content":"mark","createdAt":1470017892293},{"id":1007,"originId":"579fead1b3f2a33b1da33069","articleId":159,"userId":486,"content":"mark","createdAt":1470098129369},{"id":1008,"originId":"57a29b1d5c5423c3352d7b84","articleId":159,"userId":487,"content":"不错，对于多机器部署这种有什么好的建议吗？\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1470274333098},{"id":1009,"originId":"57cd09852adfc63a267844be","articleId":159,"userId":49,"content":"mark it ","createdAt":1473055109887},{"id":1010,"originId":"57cd0aa6a843659126f98cc7","articleId":159,"userId":49,"content":"[@JiaxiangZheng](/user/JiaxiangZheng) NODEJS的分布式应用 https://github.com/grpc/grpc\r\n","createdAt":1473055398214},{"id":1011,"originId":"57e00d647d8293463a01e73d","articleId":159,"userId":488,"content":"mark","createdAt":1474301284714},{"id":1012,"originId":"57e09c79c4ae8ff239776d99","articleId":159,"userId":489,"content":"mark","createdAt":1474337913510},{"id":1013,"originId":"57e151be3af3942a3aa3b912","articleId":159,"userId":490,"content":"mark","createdAt":1474384318893},{"id":1014,"originId":"57e3aeda015b4f570e0d02c0","articleId":159,"userId":472,"content":"mark","createdAt":1474539226846},{"id":1015,"originId":"57e3fb86015b4f570e0d02d7","articleId":159,"userId":491,"content":"mark","createdAt":1474558854637},{"id":1016,"originId":"57e40904bf6e60030ebceeb9","articleId":159,"userId":492,"content":"mark","createdAt":1474562308673},{"id":1017,"originId":"57e47b7ef7dea63b0e6ab93d","articleId":159,"userId":493,"content":"Mark\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1474591614678},{"id":1018,"originId":"57e4b16cf7dea63b0e6ab960","articleId":159,"userId":494,"content":"mark <br> <br>hh","createdAt":1474605420489},{"id":1019,"originId":"57e4c6e7c1760d1f0e4d69e2","articleId":159,"userId":495,"content":"mark :)","createdAt":1474610919110},{"id":1020,"originId":"57e4dd43015b4f570e0d0314","articleId":159,"userId":496,"content":"1. * ******","createdAt":1474616643194},{"id":1021,"originId":"5806cd42487e1e4578afb620","articleId":159,"userId":49,"content":"Makrk :)","createdAt":1476840770117},{"id":1022,"originId":"5808f1fafdf3bd3d65118864","articleId":159,"userId":497,"content":"### mark","createdAt":1476981242324},{"id":1023,"originId":"580fd92beae2a24f34e67ed4","articleId":159,"userId":291,"content":"收\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1477433643233},{"id":1024,"originId":"581008011a9a7d9909531118","articleId":159,"userId":498,"content":"mark","createdAt":1477445633211},{"id":1025,"originId":"582981cde885ce5a39382885","articleId":159,"userId":499,"content":"Mark","createdAt":1479115213899},{"id":1026,"originId":"582a8db06c4502be6ed87bfa","articleId":159,"userId":500,"content":"mark","createdAt":1479183792068},{"id":1027,"originId":"582aa715c1d3b2b57db5e2b0","articleId":159,"userId":501,"content":"mark","createdAt":1479190293325},{"id":1028,"originId":"58a50f6fc41c94fd36911fd0","articleId":159,"userId":502,"content":"学习了","createdAt":1487212399632},{"id":1029,"originId":"58a53a30cefe06e13676a87d","articleId":159,"userId":503,"content":"mark\r\n","createdAt":1487223344579},{"id":1030,"originId":"58a6ff7b5b904b25651b36c5","articleId":159,"userId":482,"content":"mark","createdAt":1487339387799},{"id":1031,"originId":"58a8fbd67872ea0864fede8d","articleId":159,"userId":317,"content":"叼叼","createdAt":1487469526505},{"id":1032,"originId":"58c8e5a96882808478001424","articleId":159,"userId":347,"content":"很有帮助","createdAt":1489561001969},{"id":1033,"originId":"58ca162d9aa9bafe76762a05","articleId":159,"userId":504,"content":"[@libook](/user/libook)  也准备搞，多交流啊","createdAt":1489638957460},{"id":1034,"originId":"58ca6c21ef3f9df178e0e26f","articleId":159,"userId":347,"content":"好","createdAt":1489660961341},{"id":1035,"originId":"58cbbe9607bc8ed960ec5f43","articleId":159,"userId":446,"content":"[@shiqiliang](/user/shiqiliang) 那个是我一年前的回复，现在在用Koa2了哈哈哈","createdAt":1489747606892},{"id":1036,"originId":"58cbfeddef3f9df178e0e2df","articleId":159,"userId":62,"content":"mark\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1489764061053},{"id":1037,"originId":"58cf4a6cdf7ceac916b44400","articleId":159,"userId":504,"content":"[@libook](/user/libook) 哈哈，我也准备koa2入手了","createdAt":1489980012634},{"id":1038,"originId":"58cfe2b0f7abd67436265bc3","articleId":159,"userId":504,"content":"[@libook](/user/libook) 用什么ide写koa，我这个为何不提示呢？ [intellij idea 不提示](https://cnodejs.org/topic/58cfc5e517f61387400b7d9e)","createdAt":1490018992019},{"id":1039,"originId":"5a693ee79288dc815328817d","articleId":159,"userId":20,"content":"mark","createdAt":1516846823703},{"id":1040,"originId":"5a6a88c99288dc8153288219","articleId":159,"userId":241,"content":"mark","createdAt":1516931273219},{"id":1041,"originId":"5a72cacb9d371d4a059ef096","articleId":159,"userId":505,"content":"mark\r\n","createdAt":1517472459284},{"id":1042,"originId":"5a7831b4afa0a121784a9322","articleId":159,"userId":506,"content":"学习了","createdAt":1517826484686},{"id":1043,"originId":"600ec6fa5d04acc3512186ef","articleId":159,"userId":66,"content":"mark一下吧。","createdAt":1611581178647},{"id":1044,"originId":"5fe1879098427e04b16a9c12","articleId":160,"userId":89,"content":"这个是java版本的内容把","createdAt":1608615824598},{"id":1045,"originId":"5fe1e6cb98427e78a16a9e6b","articleId":160,"userId":195,"content":"[@i5ting](/user/i5ting) 不是，分片中间件ShardingSphere 是跨语言使用的，而 Enhancer 应用开发是纯 nodejs 实现的：https://wuyuan.io 只不过大部分情况下，开发者只需要写 SQL 就直出系统了。但系统本身是基于 nodejs 的。","createdAt":1608640203615},{"id":1046,"originId":"5fe2ed4398427e91506aa034","articleId":160,"userId":194,"content":"学起来~","createdAt":1608707395953},{"id":1047,"originId":"5fe3345a98427e5b926aa0d6","articleId":160,"userId":30,"content":"顶善繁","createdAt":1608725594524},{"id":1048,"originId":"600d57505d04ac06872183e2","articleId":160,"userId":507,"content":"支持 👍","createdAt":1611487056845},{"id":1049,"originId":"600cf6e25d04acd5ce218359","articleId":162,"userId":508,"content":"这解决方案吧 怎么说\r\n从根源上解决了","createdAt":1611462370617},{"id":1050,"originId":"6007e2bb5d04ac66e3217a37","articleId":165,"userId":510,"content":"随着**知识**体系的不断增加，获取难度不断减小，人口越来越多， 竞争只能越来越激烈，用自然选择的角度来解释，淘汰一批人是必然的吧","createdAt":1611129531542},{"id":1051,"originId":"60084d3f5d04acd0c7217b1e","articleId":165,"userId":90,"content":"[@zhsonga](/user/zhsonga) 嗯，就是看到旁边朋友从拼多多跳到阿里其实没啥区别，最少在加班上面没区别。我也不认为高P就思考的越多，不加班离开平台试试？依然是螺丝钉。无非老板再找个年轻点的替换就行。","createdAt":1611156799475},{"id":1052,"originId":"6008cbc95d04ac3a43217b49","articleId":165,"userId":21,"content":"y1s1，杭州才是地狱模式","createdAt":1611189193918},{"id":1053,"originId":"6008d4c65d04ac18b0217b7d","articleId":165,"userId":90,"content":"[@zy445566](/user/zy445566) 杭州好早之前面过，都上市公司了，社保3500基数，只想说爬～。","createdAt":1611191494532},{"id":1054,"originId":"6008ee395d04acf0b4217bd6","articleId":165,"userId":510,"content":"[@jxycbjhc](/user/jxycbjhc) 高P能上位一定有他的原因吧 或者技术很厉害 或者管人很厉害 或者做事主动 或者符合领导价值观，加班可能也是一种必然现象吧 就像现在做事都讲求成果物 加班也是一种体现。变成这样肯定不是每人都想的 是我们改变不了这个环境 群体的改变是需要时间的。","createdAt":1611198009111},{"id":1055,"originId":"60093c2b5d04ac60d0217d5d","articleId":165,"userId":90,"content":"[@zhsonga](/user/zhsonga) 我不想成为这种高P，也不羡慕，我喜欢离老板近一点的公司。每月工作300小时，那就是扯淡，流水线工人干的简单工作么需要这么多时间。","createdAt":1611217963947},{"id":1056,"originId":"600a497d5d04ac57c8217f1c","articleId":165,"userId":11,"content":"但是问题在于大厂也不是所有人都加班啊，反而是所在的部门和岗位还有老板的性格决定了到底加班力度怎么样，实际上我的感觉是越贴近一线用户的业务开发加班越多越猛，当然业务线晋升机会也多点\r\n而如果你做的是基础架构类工作很多时候加班并不多，我在阿里待了两年样子，周末从未任何一天加过班，平时周一到周四也基本是 10 点到公司晚上七八点走，周五可能四点半就回家了，当然搞这块没有那么多能量化的指标相对前者晋升的机会确实少很多也难很多","createdAt":1611286909868},{"id":1057,"originId":"600abfb95d04ac39412180f2","articleId":165,"userId":90,"content":"[@hyj1991](/user/hyj1991) 基础架构类工作萝卜坑太少了对于大量的开发者来说，而且基础架构有时候真的会消磨意志。可以预见的是社区买菜的开发，今年又得肝了。。。你这算不错的了，我希望的是带点激情的工作而不是重复,总不想每天上班如上坟一样。如果作为创业者，你这个时间点上下班没问题，但是普通人就应该朝九晚五，图啥，有段时间我也是你这个时间点上下班，直到有一天下午有事回去了，感觉有多久没看到下午的太阳了。趁着还年轻，我不想被任何绑架～","createdAt":1611317177751},{"id":1058,"originId":"600b04445d04ac6c6c218160","articleId":165,"userId":147,"content":"[@hyj1991](/user/hyj1991) 做基础架构感觉比一般的业务需求开发有意思多了，哈哈","createdAt":1611334724875},{"id":1059,"originId":"5e86d32e58ab6717beb7dfbf","articleId":168,"userId":33,"content":"找的啥职位你这是。","createdAt":1585894190494},{"id":1060,"originId":"5e86d41d64259617c49a43d4","articleId":168,"userId":512,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 都electron了，估计是node前端/后端/全栈 一类的。","createdAt":1585894429182},{"id":1061,"originId":"5e86d59a58ab6717beb7dfd4","articleId":168,"userId":90,"content":"[@ganshiqingyuan](/user/ganshiqingyuan)  node后端开发，伪全栈。","createdAt":1585894810423},{"id":1062,"originId":"5e86db6664259617c49a43ee","articleId":168,"userId":513,"content":"四端开发(前端、後端、行动端、桌面端)~~~\r\n\r\n伪後端，要不要在补一下java+springBoot？这项真的是\"显学\"，\r\n\r\n逼的不得不重拾17年前的java技术，那时学的java还是j2se 1.4的版本呢！哎~~~人老了","createdAt":1585896294574},{"id":1063,"originId":"5e88425864259617c49a45fb","articleId":168,"userId":90,"content":"[@Solomonqoo](/user/Solomonqoo) 不执着这个了，哪个赚钱上哪个，没有15年的前端风哪有现在的前端行情，用流行的话来说，all in frontend ,但不是all in 上班哈。","createdAt":1585988184761},{"id":1064,"originId":"5e8892eb64259617c49a46d9","articleId":168,"userId":513,"content":"[@jxycbjhc](/user/jxycbjhc) 哈哈哈，加油！\r\n对我来说，反正多掌握一项\"显学\"也没啥坏处，而且也是以前学过用过的，一点也不觉得辛苦，只是人老了，呵呵","createdAt":1586008811073},{"id":1065,"originId":"5e88b94364259617c49a46f7","articleId":168,"userId":514,"content":"悲剧，慢慢都成刷题大王了","createdAt":1586018627304},{"id":1066,"originId":"5e8945be58ab6717beb7e350","articleId":168,"userId":21,"content":"赶紧抓紧时间上岸吧，人越来越多，要求越来越高，程序员随着年纪越大越走下坡路。\r\n真不是你的问题，真是大环境，这段时间在v2看到太多和你类似的情况了。","createdAt":1586054590913},{"id":1067,"originId":"5e896c0564259617c49a4780","articleId":168,"userId":90,"content":"[@zy445566](/user/zy445566) 感谢，已经找好下家了。但是同样准备考虑其他搞钱的路子，我这人又出不了书，也没搞不了知识星球和论坛里的大佬差的远。所以大厂大概率对我也是是个围城。连老罗这种行业冥灯都来搞直播了，可以预见直播又得凉了。我始终认为和大环境无关，软件行业不行，其他的行业就有行的，就像疫情原因卖口罩的厂家肯定凉凉，原因大家都懂的，但是我卖生产口罩的设备就赚得贼狠。","createdAt":1586064389908},{"id":1068,"originId":"5e896cb958ab6717beb7e37e","articleId":168,"userId":90,"content":"[@dongguangming](/user/dongguangming) 也不是刷题大王，我就问一句没学过勾股定理，谁能说我能计算直角三角形面积？我认为是刷题是站在巨人的肩膀上哈哈。毕竟也没见谁重新提出一个新算法来优化代码，依然是各种算法的排列组合。","createdAt":1586064569102},{"id":1069,"originId":"5e8c24c764259617c49a4b52","articleId":168,"userId":19,"content":"入职最后一家了？","createdAt":1586242759874},{"id":1070,"originId":"5e8c455758ab6717beb7e826","articleId":168,"userId":90,"content":"[@luanxuechao](/user/luanxuechao) 是的啊，离钱比较近。","createdAt":1586251095625},{"id":1071,"originId":"5e8c512858ab6717beb7e851","articleId":168,"userId":515,"content":"四月中旬还好找工作吗？","createdAt":1586254120418},{"id":1072,"originId":"5e8c547658ab6717beb7e85a","articleId":168,"userId":90,"content":"[@suwadaimyojin](/user/suwadaimyojin) 都一样，相对于悲观，我更乐观，疫情就是机会，有企业陨落同样有企业崛起。一点都不虚。","createdAt":1586254966900},{"id":1073,"originId":"5eb26b692d0afc4087f53857","articleId":168,"userId":516,"content":"3，6，7，9   两年内基本都 面过，好奇你的最后一家，我也想试试","createdAt":1588751209787},{"id":1074,"originId":"5eb28a912d0afc4087f53906","articleId":168,"userId":90,"content":"[@nnliang](/user/nnliang) 暂时不招人～，等开始大肆招人，可能就是赚大钱了。要是上海本地人，没啥经济压力，首选普华永道！面试过程非常舒服。","createdAt":1588759185729},{"id":1075,"originId":"5eb28bb0e785ec40b04fad3d","articleId":168,"userId":36,"content":"[@jxycbjhc](/user/jxycbjhc) 普华，一个同事刚过去","createdAt":1588759472764},{"id":1076,"originId":"5eb35e5d2d0afc4087f539ea","articleId":168,"userId":90,"content":"[@dengnan123](/user/dengnan123) 养老是可以去的，IT行业也是一个饭碗行业。毕竟不是人的真正的按需学习。","createdAt":1588813405733},{"id":1077,"originId":"5eb673782d0afc4087f54080","articleId":168,"userId":517,"content":"感谢分享经历","createdAt":1589015416935},{"id":1078,"originId":"5eb677e6e785ec40b04fb41d","articleId":168,"userId":518,"content":"对方要求熟悉c++插件以及eletron 这个就是撤呢","createdAt":1589016550656},{"id":1079,"originId":"5eba9284e785ec40b04fbd47","articleId":168,"userId":90,"content":"[@weizhuanhua](/user/weizhuanhua) 存在即合理～","createdAt":1589285508013},{"id":1080,"originId":"5ebb8ba52d0afc4087f54de0","articleId":168,"userId":519,"content":"感谢分享","createdAt":1589349285934},{"id":1081,"originId":"60084e845d04acb03e217b22","articleId":168,"userId":90,"content":"[@Solomonqoo](/user/Solomonqoo) 不幸言中了，在java的整个生态下面，后端才能顺风顺水，node还是在前端折腾把。","createdAt":1611157124568},{"id":1082,"originId":"6008ca435d04ac22b9217b39","articleId":168,"userId":21,"content":"[@jxycbjhc](/user/jxycbjhc) 你有你的优势，我觉得学JAVA还不如学点前端（主要是学的浅，面试和工作都没太大作用），后面大前端融合估计后面还挺重要的。比如前端服务层查询直接使用后端sql，感觉后面的后端会往ai上面发展。","createdAt":1611188803671},{"id":1083,"originId":"6008d1575d04ac8ac7217b62","articleId":168,"userId":520,"content":"感谢分享","createdAt":1611190615656},{"id":1084,"originId":"6008d4a35d04ac6412217b79","articleId":168,"userId":90,"content":"[@zy445566](/user/zy445566) 最主要是我前端已经够用了，虽然已经不写前端页面了，但是前端出现的飞机bug还是我来搞定，后端那些分布式，高并发的玩意都熟悉了，AR倒是以后的一个点，AI门槛高了对于我们来说，见过速成的API调用AI工程师，不是长久之计。最主要是java真香，后端能用的东西都能拿来就用。","createdAt":1611191459795},{"id":1085,"originId":"600905db5d04ac6c08217c3c","articleId":168,"userId":16,"content":"666，等我整完这波也来一篇","createdAt":1611204059913},{"id":1086,"originId":"5ffe87afa2a2131b5ff6e174","articleId":169,"userId":33,"content":"32个赞","createdAt":1610516399135},{"id":1087,"originId":"5ffe919ea2a213dad2f6e1a6","articleId":169,"userId":41,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 为啥是 32 个？","createdAt":1610518942789},{"id":1088,"originId":"5ffe95bfa2a2135410f6e1d6","articleId":169,"userId":522,"content":"赞一个","createdAt":1610519999096},{"id":1089,"originId":"5ffea2bca2a213f8a4f6e211","articleId":169,"userId":33,"content":"[@xcatliu](/user/xcatliu) 32场演唱会啊","createdAt":1610523324770},{"id":1090,"originId":"60004b8ca2a213510ff6e586","articleId":169,"userId":314,"content":"赞","createdAt":1610632076322},{"id":1091,"originId":"600060cda2a21362acf6e5a2","articleId":169,"userId":89,"content":"厉害了","createdAt":1610637517707},{"id":1092,"originId":"60010816a2a2135568f6e62a","articleId":169,"userId":361,"content":"大佬tql","createdAt":1610680342192},{"id":1093,"originId":"60012074a2a21375e9f6e692","articleId":169,"userId":40,"content":"期待","createdAt":1610686580859},{"id":1094,"originId":"6006aa5a5d04ac50cf21784f","articleId":169,"userId":523,"content":"64 个👍     可以贴一个支持码","createdAt":1611049562495},{"id":1095,"originId":"6007f96a5d04ac7b13217aa0","articleId":169,"userId":524,"content":"赞","createdAt":1611135338071},{"id":1096,"originId":"6008d40f5d04ac8d08217b72","articleId":169,"userId":41,"content":"[@HongYangHT](/user/HongYangHT) 等我写完了再贴！","createdAt":1611191311851},{"id":1097,"originId":"600159145d04ac3fb3217110","articleId":170,"userId":33,"content":"早就想黑了","createdAt":1610701076737},{"id":1098,"originId":"6007bdb45d04ac357f2179cc","articleId":170,"userId":525,"content":"> \"TypeScript 并不是直接在 Deno 上跑的，其实还是变成了 JavaScript 来跑，何必一定要集成到 Deno 中呢？\r\n> 安全是一个很难的事情，Deno 宣传自己的“安全沙箱”注定要承担很大的责任。Deno 安全沙箱也没有必要，完全可以用 Docker 等容器或虚拟化技术来支持。同时，真正想搞破坏的脚本也会找到自己的方式来规避安全问题。\"\r\n\r\n我反对","createdAt":1611120052894},{"id":1099,"originId":"600699535d04ac522e217824","articleId":171,"userId":90,"content":"顶了，看其他东西了离前端越来越远了～","createdAt":1611045203780},{"id":1100,"originId":"5ebb9a36e785ec40b04fc19d","articleId":176,"userId":33,"content":"工作量不饱和啊。。\r\n","createdAt":1589353014207},{"id":1101,"originId":"5ebbc9452d0afc4087f55030","articleId":176,"userId":511,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 强行挤时间，要不然 Deno 生态圈也完善了就没我事了 🤣","createdAt":1589365061517},{"id":1102,"originId":"5ec25321a87fc8583363cf94","articleId":176,"userId":22,"content":"加油","createdAt":1589793569232},{"id":1103,"originId":"5edd968182b588109b647d3a","articleId":176,"userId":527,"content":"牛。","createdAt":1591580289681},{"id":1104,"originId":"5ee05b5682b588109b64824a","articleId":176,"userId":528,"content":"感觉 Deno 改变不了什么，至少5年内改变不了局面。","createdAt":1591761750387},{"id":1105,"originId":"5ee07d7eb703280f0bcb8f5c","articleId":176,"userId":191,"content":"nodejs  golang 生态都很好的","createdAt":1591770494601},{"id":1106,"originId":"60014abb5d04ac0cad2170ab","articleId":176,"userId":511,"content":"我现在假装粉转黑了，翻译了篇黑 Deno 的文章，哈哈：[《为什么我认为 Deno 是一个迈向错误方向的 JavaScript 运行时？》](https://juejin.cn/post/6917830384956899341)","createdAt":1610697403010},{"id":1107,"originId":"5ffc019ea2a2130528f6dbe9","articleId":177,"userId":89,"content":"getInitialProps里做的是异步的事儿。没啥影响的。","createdAt":1610351006570},{"id":1108,"originId":"60013d255d04ac5f0a217052","articleId":177,"userId":192,"content":"来自 server 端的同步请求，就会干扰 client 端的异步渲染\r\n没看懂你意思。在服务端请求之后客户端只需要复用dom就行。不需要重新请求数据。只有在切换路由的时候才需要重新发送请求，可以参考 https://github.com/ykfe/ssr","createdAt":1610693925228},{"id":1109,"originId":"559b3eb1d488d37a76253336","articleId":178,"userId":531,"content":"哈哈哈 我一直以为是站内搜索 ","createdAt":1436237489131},{"id":1110,"originId":"559b426ed488d37a76253342","articleId":178,"userId":18,"content":"我们假设每个上 CNode 的人都具备翻墙能力","createdAt":1436238446466},{"id":1111,"originId":"559b42a5d488d37a76253344","articleId":178,"userId":530,"content":"[@alsotang](/user/alsotang) 在家里面可以 在公司一般不会\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1436238501106},{"id":1112,"originId":"559cfca13d79442724b9f06c","articleId":178,"userId":424,"content":"支持楼主的吐槽","createdAt":1436351649563},{"id":1113,"originId":"559d14573d79442724b9f081","articleId":178,"userId":532,"content":"我以为程序员翻墙是标配, MBP是高配.....","createdAt":1436357719399},{"id":1114,"originId":"559d3fd93d79442724b9f0ae","articleId":178,"userId":530,"content":"[@xinshangshangxin](/user/xinshangshangxin) MBP倒是有","createdAt":1436368857218},{"id":1115,"originId":"559deecb3d79442724b9f122","articleId":178,"userId":532,"content":"[@wenshiqi0](/user/wenshiqi0) 有MBP竟然没有翻墙..... 根本就不在一个价位上啊...........","createdAt":1436413643204},{"id":1116,"originId":"559dfcf53d79442724b9f12f","articleId":178,"userId":530,"content":"有翻墙的 但是我觉得效果都不好\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1436417269857},{"id":1117,"originId":"559e18d23d79442724b9f160","articleId":178,"userId":533,"content":"hosts 定期更新下 google啥不是小问题嘛\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1436424402665},{"id":1118,"originId":"559e59113d79442724b9f1be","articleId":178,"userId":530,"content":"[@yuk320](/user/yuk320) 我去试试 主要还想用用学术搜索看看深度学习的东西\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1436440849537},{"id":1119,"originId":"5fffb196a2a21366eff6e3a3","articleId":178,"userId":53,"content":"LOL.....没钱买付费的VPN，那就试试[免费VPN](https://wallvpn.com/free-vpn/)吧（虽然不是那么推荐使用免费，但只是偶尔或短期使用的话，就试试吧）。另外，很多知名度比较高的VPN都是有试用的。Lol.. ","createdAt":1610592662824},{"id":1120,"originId":"58aef6e85b904b25651b3899","articleId":180,"userId":536,"content":"学会科学上网。。。coding.net或成最大赢家","createdAt":1487861480230},{"id":1121,"originId":"58aefeea5b904b25651b389b","articleId":180,"userId":535,"content":"我知道可以用VPN，但问题是别人都没法访问我的github.io网站和我的项目了","createdAt":1487863530894},{"id":1122,"originId":"58af004c5b904b25651b389c","articleId":180,"userId":537,"content":"github托管的项目博客还是能访问的","createdAt":1487863884722},{"id":1123,"originId":"58af072d7872ea0864fee04e","articleId":180,"userId":538,"content":"现在能用呀","createdAt":1487865645634},{"id":1124,"originId":"58af07ea7872ea0864fee050","articleId":180,"userId":538,"content":"就是头像挂了","createdAt":1487865834703},{"id":1125,"originId":"58af17f3e418a986315f3887","articleId":180,"userId":535,"content":"github.com可以了，但github.io还不行","createdAt":1487869939957},{"id":1126,"originId":"58af190f7872ea0864fee052","articleId":180,"userId":538,"content":"[@zhanzhenzhen](/user/zhanzhenzhen) 是的","createdAt":1487870223968},{"id":1127,"originId":"58af19d25b904b25651b389e","articleId":180,"userId":65,"content":"尼玛不要乱来，哥在找工作\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1487870418656},{"id":1128,"originId":"58af28b85b904b25651b38a0","articleId":180,"userId":111,"content":"http://kcna.kp/\r\n上帝为你关上了一扇门，必定为你打开了另一扇窗 ","createdAt":1487874232963},{"id":1129,"originId":"58af5a3ee418a986315f3888","articleId":180,"userId":221,"content":"好烦啊, 半天打不开, 急急急.","createdAt":1487886910384},{"id":1130,"originId":"58af78fc5b904b25651b38a3","articleId":180,"userId":89,"content":"[@artisan](/user/artisan) 还不如oschina的呢。。。。烂","createdAt":1487894780241},{"id":1131,"originId":"58af8435ea21217a4486ccd3","articleId":180,"userId":539,"content":"楼主出一个申诉指南吧。","createdAt":1487897653573},{"id":1132,"originId":"58af91fb7872ea0864fee05f","articleId":180,"userId":540,"content":"难怪昨天晚上一直超时。","createdAt":1487901179575},{"id":1133,"originId":"58af9847ea21217a4486ccdb","articleId":180,"userId":277,"content":"未扶墙可以访问\r\n\r\n接到这些消息，你们这些 young本身也要判断，不要听风就是雨\r\n假使这些完全无中生有的东西,你再帮他说一遍,你等于你也有责任吧\r\n\r\n","createdAt":1487902791444},{"id":1134,"originId":"58af9cdde418a986315f389a","articleId":180,"userId":541,"content":"可以访问，就是慢得不行，不挂ss不能玩","createdAt":1487903965474},{"id":1135,"originId":"58afe6667872ea0864fee08b","articleId":180,"userId":542,"content":"[@TakWolf](/user/TakWolf) 续1秒","createdAt":1487922790543},{"id":1136,"originId":"58afee44ea21217a4486cd17","articleId":180,"userId":535,"content":"总算好了，吓死我了。。。","createdAt":1487924804507},{"id":1137,"originId":"5aec634badea947348e760a6","articleId":180,"userId":229,"content":"走付费v.p.n呀啦\r\n安卓苹果windows全平台支持，在中国，最好用的付费VPN推荐 https://vpnchina.zdhweb.com\r\n你可以根据自己的偏好选择注册所有推荐的vpn，然后根据使用效果，哪个好用就付款哪个。","createdAt":1525441355100},{"id":1138,"originId":"5d89b0154f109e79ef5ff26c","articleId":180,"userId":208,"content":"选择付费的vpn吧，以防万一，这篇[VPN推荐](http://qiangwaikan.com/best-vpn-china/)可以参考一下","createdAt":1569304597212},{"id":1139,"originId":"5ff7ddbea2a213248ff6d624","articleId":180,"userId":112,"content":"这几年经常有关于GitHub被封的消息，GitHub也确实有过几次被GFW封锁的事件，封锁方式包括DNS污染、中间人攻击等，但后来又都解封了，大概这和GitHub非常流行、程序猿离不开它又关系吧！最近GitHub被微软收购了，因为微软是大公司，和各方面沟通的能力比较强，所以可能GitHub的稳定性会更高吧。总之GitHub目前基本可以访问。当然，谁都说不好将来会发生什么，建议根据靠谱的[VPN推荐](https://www.vpndada.com/best-vpns-for-china-cn/)，准备一些[翻墙软件](https://www.vpndada.com/best-vpns-for-china-cn/)备用吧！","createdAt":1610079678459},{"id":1140,"originId":"5ff67f5ba2a2139961f6d2cc","articleId":181,"userId":160,"content":"sequelize是不是对mysql的JSON类型支持不是太好","createdAt":1609989979609},{"id":1141,"originId":"5ff6b39da2a2133f56f6d3f5","articleId":181,"userId":21,"content":"不错的一次实践，我觉得最难的还是如何推动数据库版本升级","createdAt":1610003357656},{"id":1142,"originId":"5ff7c090a2a213e3eaf6d5d5","articleId":181,"userId":145,"content":"我现在就在疯狂的 JSON.stringify(xxxxx), JSON.parse(xxxxx)... 太难了","createdAt":1610072208141},{"id":1143,"originId":"5cc14045a86ae80ce64b3d45","articleId":182,"userId":545,"content":"angular 新的 ivy 可以关注下，也是各种骚操作~","createdAt":1556168773077},{"id":1144,"originId":"5cc1408037faec0ce1d067ca","articleId":182,"userId":205,"content":"webpack.optimize.CommonsChunkPlugin\r\n还是 webpack 2 啊","createdAt":1556168832326},{"id":1145,"originId":"5cc27355a86ae80ce64b43b9","articleId":182,"userId":546,"content":"[@magicdawn](/user/magicdawn) webpack4这个属性也能用吧？","createdAt":1556247381592},{"id":1146,"originId":"5cc27e0c37faec0ce1d06ed7","articleId":182,"userId":523,"content":"还可以加上出现次数， https://medium.com/frochu/webpack-commons-chunk-plugin-f2e4bd853c26 ","createdAt":1556250124883},{"id":1147,"originId":"5ff6f696a2a2133109f6d53a","articleId":182,"userId":547,"content":"[爱站外链查询](https://link.aizhan.com/wpshushu.com/)","createdAt":1610020502333},{"id":1148,"originId":"5bee20c2a05b0e0ae443bb52","articleId":183,"userId":549,"content":"👍一个，可以考虑搞个小程序或者app","createdAt":1542332610885},{"id":1149,"originId":"5beff7c4be1b120abac5a5d3","articleId":183,"userId":548,"content":"[@CaanDoll](/user/CaanDoll) 你好，感谢你提供的建议！","createdAt":1542453188748},{"id":1150,"originId":"5bf07bb3e6481c5709f5cbba","articleId":183,"userId":550,"content":"没用ffmpeg吗？\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1542486963410},{"id":1151,"originId":"5bf4ce80e6481c5709f5dc04","articleId":183,"userId":551,"content":"学习了！支持一下","createdAt":1542770304988},{"id":1152,"originId":"5bf5337ebe1b120abac5b99b","articleId":183,"userId":548,"content":"[@bendise](/user/bendise) 你好，感谢提供的建议。","createdAt":1542796158571},{"id":1153,"originId":"5bf78741be1b120abac5c2a0","articleId":183,"userId":548,"content":"[@mariobeng](/user/mariobeng) 你好 感谢支持！","createdAt":1542948673559},{"id":1154,"originId":"5bf7a1afbe1b120abac5c391","articleId":183,"userId":132,"content":"[@CaanDoll](/user/CaanDoll) 我可以搞APP和小程序, 这在学uni-app","createdAt":1542955439258},{"id":1155,"originId":"5bf90510d6104a4f803a121e","articleId":183,"userId":548,"content":"[@afacode](/user/afacode) 你好，感谢支持！","createdAt":1543046416133},{"id":1156,"originId":"5c1fadb276c4964062a1cce2","articleId":183,"userId":552,"content":"这个vip电影资源是用爬虫做的吗？稳定吗？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1545579954536},{"id":1157,"originId":"5c26fce23898674067a7989d","articleId":183,"userId":548,"content":"[@dreamsline](/user/dreamsline) 你好 感谢支持，主要技术是使用node实现的","createdAt":1546058978329},{"id":1158,"originId":"5c342d3a3898674067a7c6ca","articleId":183,"userId":548,"content":"感谢支持，快乐学习，共同进步！","createdAt":1546923322142},{"id":1159,"originId":"5c3474205bf06c5e7e3f2be1","articleId":183,"userId":545,"content":"[@afacode](/user/afacode)  uni-app 不建议学，实现特别low～\r\ntaro 不错，可以看看","createdAt":1546941472527},{"id":1160,"originId":"5c36b7b13898674067a7d78f","articleId":183,"userId":132,"content":"[@zuohuadong](/user/zuohuadong) 过完年公司打算开发APP， 那就只能前段干，现在有RN或者uniapp了， 主要是现在有做了微信小程序， 考虑到后期一直到其他的小程序平台","createdAt":1547089841663},{"id":1161,"originId":"5c372c823898674067a7dc41","articleId":183,"userId":545,"content":"[@afacode](/user/afacode)  那肯定考虑taro 了， uniapp  真的脏得不想看","createdAt":1547119746207},{"id":1162,"originId":"5c469bcb3b948a2b4ab705c6","articleId":183,"userId":553,"content":"这个如果上线的话，版权怎么处理啊","createdAt":1548131275100},{"id":1163,"originId":"5c47e2986955112b99437eb4","articleId":183,"userId":548,"content":"[@zeerain](/user/zeerain) 你好，本项目仅作为学习交流使用，请勿用作其他商业或非法用途，感谢支持~","createdAt":1548214936813},{"id":1164,"originId":"5c4d95def9075c1ef7138870","articleId":183,"userId":554,"content":"请问下你用的数据库是 mysql？搜索性能怎么样～～","createdAt":1548588510706},{"id":1165,"originId":"5c4fa491a4647e02328f1db6","articleId":183,"userId":548,"content":"[@didiaohu](/user/didiaohu) 你好，感谢提供的建议，目前性能这块目前没有做太多优化，搜索这块基本上可以满足用户正常的需求！","createdAt":1548723345712},{"id":1166,"originId":"5c823efd7ce0df3732426453","articleId":183,"userId":555,"content":"为何你如此优秀","createdAt":1552039677210},{"id":1167,"originId":"5c82843f7ce0df37324264fe","articleId":183,"userId":419,"content":"[@xiugangzhang](/user/xiugangzhang) 搞个pwa桌面图标","createdAt":1552057407048},{"id":1168,"originId":"5c8c89b6acb681372d418aae","articleId":183,"userId":548,"content":"[@sisxzero](/user/sisxzero) 你好 感谢支持","createdAt":1552714166946},{"id":1169,"originId":"5c8e2e71acb681372d418f3f","articleId":183,"userId":548,"content":"[@yuu2lee4](/user/yuu2lee4) 你好，感谢提供的建议！","createdAt":1552821873148},{"id":1170,"originId":"5c93bf9000bcfd7eb2be4c60","articleId":183,"userId":556,"content":"不错，不错，不错。。。","createdAt":1553186704154},{"id":1171,"originId":"5c9611c0fd41137eb7660cd9","articleId":183,"userId":548,"content":"[@zhaoxbrun](/user/zhaoxbrun) 你好，感谢支持！","createdAt":1553338816430},{"id":1172,"originId":"5da15965865a9844a301acf2","articleId":183,"userId":557,"content":"你好，项目重新启动后出现Cannot read property 'query' of undefined错误，请问如何解决？","createdAt":1570855269363},{"id":1173,"originId":"5ff542125393a583c4546c74","articleId":183,"userId":558,"content":"支持实时视频直播吗？","createdAt":1609908754814},{"id":1174,"originId":"5ff33b885393a5754654693f","articleId":185,"userId":158,"content":"也做了个类似的，这个我把他叫做业务逻辑编排😄","createdAt":1609776008930},{"id":1175,"originId":"5ff3d1a75393a581ff5469aa","articleId":185,"userId":89,"content":"[@zhhb](/user/zhhb) 发出来看看，O(∩_∩)O哈哈~","createdAt":1609814439089},{"id":1176,"originId":"5ff27cd55393a53e14546736","articleId":187,"userId":89,"content":"有点意思，如果是js就更好了","createdAt":1609727189440},{"id":1177,"originId":"5feb31265393a55311545e52","articleId":188,"userId":560,"content":"闲鱼Flutter部分的页面也是经常出bug","createdAt":1609249062793},{"id":1178,"originId":"5fed91585393a57e04546205","articleId":188,"userId":561,"content":"[@yangfaxian](/user/yangfaxian) 现在也有不少app使用Flutter来开发的，比如蚂蚁财富和知乎，总体感觉还是不错的，也是成熟的产品了。\r\n最近，我也开发了一款用于生成iOS、Android、Flutter、React Native图标的App，使用的就是Flutter，感兴趣可以体验一下哦。\r\n[https://www.iconify.pro/downloads](https://www.iconify.pro/downloads)","createdAt":1609404760834},{"id":1179,"originId":"5ff1c2895393a5402a546654","articleId":188,"userId":560,"content":"[@focalhot](/user/focalhot) 不错啊，👍","createdAt":1609679497248},{"id":1180,"originId":"5bfcb03abe1b120abac5d299","articleId":189,"userId":18,"content":"这。。。。。。。数字货币在这种场景下真的很脆弱","createdAt":1543286842064},{"id":1181,"originId":"5bfcb225d6104a4f803a1e3f","articleId":189,"userId":21,"content":"吓死人了，赶紧把自己的0.00000001个BTC藏好。\r\n该死，差点忘记我的私钥不是已经丢了很久了。。。","createdAt":1543287333922},{"id":1182,"originId":"5bfcb486be1b120abac5d310","articleId":189,"userId":562,"content":"比特币 不是跌了很惨么 还有人在搞。。。","createdAt":1543287942604},{"id":1183,"originId":"5bfcb4d8be1b120abac5d319","articleId":189,"userId":21,"content":"[@hewentaowx](/user/hewentaowx) \r\n还在搞啊。我就在不断定投BTC，且认为这次下跌是一个巨大机会，这段时间定投金额基本都是前几个月的几倍","createdAt":1543288024882},{"id":1184,"originId":"5bfcb63ebe1b120abac5d340","articleId":189,"userId":562,"content":"[@zy445566](/user/zy445566) 类似于股市抄底么 哈哈 我也不懂btc也没钱玩 祝好运呀","createdAt":1543288382454},{"id":1185,"originId":"5bfcb79ed6104a4f803a1e86","articleId":189,"userId":21,"content":"[@hewentaowx](/user/hewentaowx) 目前BTC3800刀，就当立个flag。","createdAt":1543288734262},{"id":1186,"originId":"5bfcd5bebe1b120abac5d408","articleId":189,"userId":22,"content":"这应该是一次定向投毒事件，攻击者是为了给 copay 投毒。9 月份攻击者开始给 event-stream 3.x 投毒，copay 的所有版本全部中招，之后攻击者移除了投毒代码并发布了 4.x 版本。在事发之前 copay 一直使用的 3.x。vue-cli 也受到了影响是因为使用了中毒的 ps-tree，因此无辜躺枪了。除此之外中毒的 pkg 还有 nodemon、npm-run-all ","createdAt":1543296446160},{"id":1187,"originId":"5bfd28eed6104a4f803a2263","articleId":189,"userId":563,"content":"检查了一下vue的项目，好像已经解决了","createdAt":1543317742380},{"id":1188,"originId":"5bfe60a3d6104a4f803a27b6","articleId":189,"userId":383,"content":"[@zy445566](/user/zy445566) 嘿嘿，意见一致","createdAt":1543397539083},{"id":1189,"originId":"5bfe629ed6104a4f803a27cf","articleId":189,"userId":564,"content":"难道这就是开源的代价？😂","createdAt":1543398046489},{"id":1190,"originId":"5bfe689dbe1b120abac5dd55","articleId":189,"userId":21,"content":"[@vanishcode](/user/vanishcode) \r\n嗯，BTC已经存在大量丢失且丢失还会持续扩大。\r\n","createdAt":1543399581064},{"id":1191,"originId":"5ff137385393a564815464e5","articleId":189,"userId":21,"content":"[@hewentaowx](/user/hewentaowx) 现在翻10倍了，感谢你的祝好，我出了","createdAt":1609643832456},{"id":1192,"originId":"5ff137e65393a55fbe5464ec","articleId":189,"userId":21,"content":"[@vanishcode](/user/vanishcode) 嗯，坚持就是胜利。BTC这个东西就是这样，无论你什么时候买，未来都有一个时间会超过原来的价格，通缩模型货币的必然趋势。","createdAt":1609644006259},{"id":1193,"originId":"556fca0c8ce3684b284b5675","articleId":190,"userId":111,"content":"用golang 性能跟c差不多","createdAt":1433389580943},{"id":1194,"originId":"5ff107745393a529fa54649c","articleId":190,"userId":547,"content":"现在的国内手机银行APP都支持[国际汇款](https://www.rmb-xyz.com)自助结汇了，非常方便。","createdAt":1609631604722},{"id":1195,"originId":"5fed724d5393a508035461ad","articleId":191,"userId":89,"content":"看结果是，esbuild在综合结果上碾压所有。","createdAt":1609396813589},{"id":1196,"originId":"5f685cbfd22a6b1d622c9b60","articleId":192,"userId":22,"content":"第几版？","createdAt":1600675007923},{"id":1197,"originId":"5fed34445393a57d52546129","articleId":192,"userId":93,"content":"[@justjavac](/user/justjavac) 第三版，还不是第四版","createdAt":1609380932264},{"id":1198,"originId":"5fe9a3ab5393a5db43545b05","articleId":194,"userId":89,"content":"挺好的。和jbpm这种差异有对比过么","createdAt":1609147307443},{"id":1199,"originId":"5fe9ebbd5393a54447545b9b","articleId":194,"userId":113,"content":"[@i5ting](/user/i5ting) 感谢回复。CabloyJS中的流程定义参照的是BPMN标准，节点架构基本一致，但某些属性定义不是一比一复制，而是结合JSON的特点做了变通，目标是用JSON取代XML来定义流程。这样或许更直观，也便于手工修改流程定义。","createdAt":1609165757752},{"id":1200,"originId":"5fea74635393a53764545c07","articleId":194,"userId":358,"content":"点赞","createdAt":1609200739794},{"id":1201,"originId":"5fe6ee2698427e04f76aa82b","articleId":195,"userId":56,"content":"我是一个人","createdAt":1608969766548},{"id":1202,"originId":"5fe9a2905393a565d7545af2","articleId":195,"userId":89,"content":"[@wszcc](/user/wszcc) 注意发现，小心封号","createdAt":1609147024313},{"id":1203,"originId":"5fe9a2b05393a57ab4545af7","articleId":195,"userId":89,"content":" [@xcatliu](/user/xcatliu) 棒棒哒","createdAt":1609147056991},{"id":1204,"originId":"5fe6835e98427e523e6aa755","articleId":196,"userId":547,"content":"> 面对国际付款，不用国内付款控件如（支付宝，微信支付等），可以用visa，paypal等第三方结汇\r\n\r\n[Payoneer](https://www.rmb-xyz.com/#payoneer)也很常用，转账人民币回国内很方便，一般几个小时到账，只是汇率损失大点。","createdAt":1608942430615},{"id":1205,"originId":"559a4b83f91145ce4c7c6261","articleId":197,"userId":568,"content":"啊啊啊，好厉害啊","createdAt":1436175235931},{"id":1206,"originId":"5fe5b46398427ecfd06aa6ce","articleId":197,"userId":547,"content":"WordPress的默认主题已经进化到Twenty Twenty One了，与Gutenberg编辑器的集成有了长足进步，商业WP站点应该尽量使用[付费WordPress主题](https://wpshushu.com/xdwzt/)，个人网站可以到WP官方免费主题库选择经过市场检验的主题。","createdAt":1608889443752},{"id":1207,"originId":"5fe1f7d098427e33d36a9ece","articleId":199,"userId":571,"content":"puppeteer 是更好的一个方案,  我的一个开源项目是用这个做的, [https://github.com/zuoyanart/sparender](https://github.com/zuoyanart/sparender)","createdAt":1608644560578},{"id":1208,"originId":"5fe2a6bc98427e81dc6a9f2c","articleId":199,"userId":11,"content":"[@spnt](/user/spnt) 这个思路蛮有意思的，不过 CDN 怎么解决呢？CDN 没法过滤爬虫请求让回源吧","createdAt":1608689340863},{"id":1209,"originId":"5fe4342498427e2d556aa241","articleId":199,"userId":571,"content":"[@hyj1991](/user/hyj1991) 我刚看了七牛,七牛没有这个功能, 也就是说, 前端代码部署到七牛之类的, 就没办法根据蜘蛛做页面渲染了","createdAt":1608791076498},{"id":1210,"originId":"5fe1ae1598427ed7896a9d36","articleId":201,"userId":438,"content":"今天发现可以点进来+1","createdAt":1608625685165},{"id":1211,"originId":"5fe1ef4398427e37516a9ea4","articleId":201,"userId":13,"content":"也许还有很多不知道恢复的","createdAt":1608642371502},{"id":1212,"originId":"5fe2b3b398427e31ff6a9f72","articleId":201,"userId":111,"content":"用app好，网站容易卡脖子  \r\n现在cnodejs有app客户端吗？","createdAt":1608692659628},{"id":1213,"originId":"5fe1c0a198427e801d6a9dd0","articleId":203,"userId":575,"content":"很厉害啊","createdAt":1608630433714},{"id":1214,"originId":"569909fcadf526da2aeb238c","articleId":204,"userId":577,"content":"感谢分享，真是超级棒","createdAt":1452870140064},{"id":1215,"originId":"5699a404bf37e62e2b393e4f","articleId":204,"userId":578,"content":"迭代式开发对代码管理要求较高哈","createdAt":1452909572670},{"id":1216,"originId":"5699e13eadf526da2aeb23a7","articleId":204,"userId":18,"content":"一直呆在大厂的我对于小团队可以自由选择各种项目管理软件表示羡慕","createdAt":1452925246926},{"id":1217,"originId":"5699f1aabf37e62e2b393e69","articleId":204,"userId":576,"content":"[@alsotang](/user/alsotang) 这句话感觉能引出那个「选择大公司还是小团队」万年论题。","createdAt":1452929450117},{"id":1218,"originId":"5699f5d9adf526da2aeb23ae","articleId":204,"userId":579,"content":"厉害，我用github全靠小乌龟","createdAt":1452930521091},{"id":1219,"originId":"569c4c20adf526da2aeb23e5","articleId":204,"userId":580,"content":"推荐使用 Coding.net ！免费 Git 私有仓库，极速 push && pull，针对技术团队的协作功能，WebIDE 让开发更简单！","createdAt":1453083680624},{"id":1220,"originId":"569c63e5a76912122bcab385","articleId":204,"userId":576,"content":"[@zengliqi](/user/zengliqi) 😏","createdAt":1453089765844},{"id":1221,"originId":"569c74b6e5c79df62a37a1c8","articleId":204,"userId":466,"content":"问题是 github总是被墙啊 国内替代者没办法用这些插件之类的","createdAt":1453094070256},{"id":1222,"originId":"5e97dd43d870946c6b6bc8db","articleId":204,"userId":581,"content":"我们是国内的小队团，针对这个问题做了一个解决方案。\r\n\r\n感兴可以来试一下, 一键部署(态静页，后端服务，云数据等等)\r\n\r\n产品网站: www.21yunbox.com","createdAt":1587010883746},{"id":1223,"originId":"5fe1bc6d98427e1f5e6a9dbb","articleId":204,"userId":45,"content":"这一套组合管理下来，是真优秀啊","createdAt":1608629357785},{"id":1224,"originId":"5b14a9885cd02be64090112c","articleId":205,"userId":583,"content":"666","createdAt":1528080776773},{"id":1225,"originId":"5fe1993398427efaf66a9c70","articleId":205,"userId":547,"content":"2020年SiteGround提价，[WordPress/WooCommerce主机](https://wpshushu.com/gxnwzjtj/)价格基本翻了一倍，而且Live Chat客服严重缩水，已经不应该是WordPress/WooCommerce建站首选。","createdAt":1608620339633},{"id":1226,"originId":"5f34d44737a26553ec78a2cd","articleId":207,"userId":254,"content":"nextjs 开发的","createdAt":1597297735430},{"id":1227,"originId":"5efbfc6ab2a7c073cb329eef","articleId":208,"userId":89,"content":"如果大家有案例，欢迎回复补充","createdAt":1593572458413},{"id":1228,"originId":"5efbfde613f8b244e57cc6fc","articleId":208,"userId":152,"content":"点赞","createdAt":1593572838084},{"id":1229,"originId":"5efd4390b2a7c073cb32a181","articleId":208,"userId":11,"content":"看来要多出点 Node.js 的实践了，对我司的印象还停留在两年前","createdAt":1593656208738},{"id":1230,"originId":"5efff3bdb2a7c073cb32a773","articleId":208,"userId":585,"content":"[@hyj1991](/user/hyj1991) 别光说啊","createdAt":1593832381755},{"id":1231,"originId":"5f0301ee13f8b244e57cd5a3","articleId":208,"userId":2,"content":"赞👍","createdAt":1594032622097},{"id":1232,"originId":"5f03862713f8b244e57cd692","articleId":208,"userId":109,"content":"赞","createdAt":1594066471986},{"id":1233,"originId":"5f2127024b61050e36e7d070","articleId":208,"userId":586,"content":"点赞","createdAt":1596008194778},{"id":1234,"originId":"5f228cf4f0739b0e62d12d8f","articleId":208,"userId":587,"content":"https://mp.weixin.qq.com/s/c2cQh0p7IO33sEor3BdXBg[jieoa.com](https://jieoa.com)\r\n\r\n捷效办公管理系统，是我们基于 Node 研发的侧重移动化的企业级办公自动化系统。\r\n\r\n整个系统有点类似于钉钉+致远泛微的结合，研发始于2018年10月，我们是重度的 egg.js 用户，整个系统的后端实现几乎都基于 egg.js\r\n不像上边的 SaaS 产品，我们做的还是提供后台下载的可私有部署的软件，刚刚[发布了免费共享版](https://mp.weixin.qq.com/s/c2cQh0p7IO33sEor3BdXBg)。\r\n\r\n可以说整个系统非常重，但 Node 整体表现还算良好，我们也愿意为Node在企业级软件开发领域正名。\r\n\r\n\r\n![LOGO.png](//static.cnodejs.org/Fk4HP2PbyUwQNtHCXU5IeAnNFy8O)","createdAt":1596099828928},{"id":1235,"originId":"5f2766594b61050e36e7d8f1","articleId":208,"userId":13,"content":"[@TonyGao](/user/TonyGao) 👍      欢迎分享一些在应用 Node.js 过程中的一些实践，也可以关注 “Nodejs技术栈” 一块交流哈 ","createdAt":1596417625291},{"id":1236,"originId":"5f276bb2f0739b0e62d133c7","articleId":208,"userId":35,"content":"吼啊。","createdAt":1596418994334},{"id":1237,"originId":"5f2cdba94b61050e36e7e63c","articleId":208,"userId":36,"content":"👍","createdAt":1596775337433},{"id":1238,"originId":"5f3a1704ebb8141d4bddac4a","articleId":208,"userId":149,"content":"感谢大佬分享","createdAt":1597642500723},{"id":1239,"originId":"5f3e47e8e8a599751bb50939","articleId":208,"userId":588,"content":"感谢大佬分享","createdAt":1597917160384},{"id":1240,"originId":"5f48b88368156574e6e6d8fd","articleId":208,"userId":589,"content":"各们大佬， 有没有前端日志监控的实践案例，求分享。非常感谢。","createdAt":1598601347560},{"id":1241,"originId":"5f48d456e8a599751bb5167e","articleId":208,"userId":50,"content":"https://www.nodejs.red\r\n这个写的是真的好全面，顺着重温了一遍，一些基础知识奇怪的夯实了👻️","createdAt":1598608470020},{"id":1242,"originId":"5f50a66c31fc7a1d8ad65c1f","articleId":208,"userId":395,"content":"感谢","createdAt":1599121004348},{"id":1243,"originId":"5f79c741f9736b02ceadb417","articleId":208,"userId":394,"content":"[@Q-Angelo](/user/Q-Angelo) 赞一个","createdAt":1601816385427},{"id":1244,"originId":"5eef24f2472c7975b04b6abb","articleId":209,"userId":109,"content":"不错的东东。\r\nTS如果能支持对类型名称的转换（比如下划线转驼峰）很多功能就好做了。\r\n我这儿有个支持 interface 的类似轮子 [kmore](https://github.com/waitingsong/kmore/) 大家可参考。","createdAt":1592730866454},{"id":1245,"originId":"5eef521c472c7975b04b6b12","articleId":209,"userId":590,"content":"[@waitingsong](/user/waitingsong) 我们设计的出发点不同，其实也可以在EasyType之上实现kmore","createdAt":1592742428155},{"id":1246,"originId":"5ef08c7813f8b244e57cb00c","articleId":209,"userId":109,"content":"[@davanchen](/user/davanchen) 我是基于 knex  简单包装下方便调用。你这个通用型好。","createdAt":1592822904581},{"id":1247,"originId":"5efaa69d13f8b244e57cc3a3","articleId":209,"userId":36,"content":"不错","createdAt":1593484957937},{"id":1248,"originId":"5f03f6d0b2a7c073cb32af86","articleId":209,"userId":110,"content":"为啥不用Typegoose？Nest+Typegoose+TypeGraphQL 就完事了啊，定义一个 model 一个 dto 解决所有问题","createdAt":1594095312452},{"id":1249,"originId":"5f06c459b2a7c073cb32b698","articleId":209,"userId":591,"content":"不错","createdAt":1594279001231},{"id":1250,"originId":"5f07cb36f9700d0938eb3ee1","articleId":209,"userId":592,"content":"期待EasyNest可以尽早开源","createdAt":1594346294073},{"id":1251,"originId":"5f350dc3d8c8971d82088744","articleId":209,"userId":419,"content":"顶","createdAt":1597312451075},{"id":1252,"originId":"5f781ce172af8c02d3f8e479","articleId":209,"userId":590,"content":"[@andyhu](/user/andyhu) 我能用一次定义解决的事情为啥要定义2次？如果整个项目还有其他的套件，就会有更多的类型定义存在。model和dto本身就有关联性，通过对model的继承或者部分继承就可以避免重复定义dto. \r\n\r\n比如：\r\nexport class UserLoginDto implements Inherits<User> {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nexport class CreateAddrDto implements Omits<Addr,'_id'> {\r\n\r\n}\r\n\r\nexport class ModifyAddrDto extends Addr {\r\n   \r\n}\r\n\r\n","createdAt":1601707233592},{"id":1253,"originId":"5f715ece72af8c02d3f8db89","articleId":213,"userId":596,"content":"感觉不错，不过感觉底部 tabbar 左右切换动画好慢诶，为啥呢","createdAt":1601265358163},{"id":1254,"originId":"5f71cfe672af8c02d3f8dccd","articleId":213,"userId":595,"content":"tabbar 滑动切换故意放慢，防止过快，其实没必要，手指点击切换应该正常的吧。","createdAt":1601294310025},{"id":1255,"originId":"5e16990481adfe260207a8e9","articleId":215,"userId":89,"content":"本次活动感谢talkding data支持场地\r\n\r\n![55555.png](//static.cnodejs.org/FpWR6OSuCx4XsE2nE8J06UVzWWP6)\r\n\r\n","createdAt":1578539268669},{"id":1256,"originId":"5e169d3381adfe260207a909","articleId":215,"userId":355,"content":"在线给狼叔打 call！！！","createdAt":1578540339430},{"id":1257,"originId":"5e1a77f91225c9423dcd7893","articleId":215,"userId":598,"content":"[@i5ting](/user/i5ting) 狼叔，有录播吗","createdAt":1578792953726},{"id":1258,"originId":"5e1a79d71225c9423dcd7897","articleId":215,"userId":383,"content":"奇舞团昨天团建，要不贺老说要去来着🤣","createdAt":1578793431585},{"id":1259,"originId":"5e247e0f1225c9423dcd8c95","articleId":215,"userId":89,"content":"PPT\r\nhttps://github.com/i5ting/nodeparty-beijing-2020-1-11","createdAt":1579449871537},{"id":1260,"originId":"5e247e26267721420912a3c4","articleId":215,"userId":89,"content":"[@vanishcode](/user/vanishcode) 听hax说了，感谢感谢","createdAt":1579449894087},{"id":1261,"originId":"5e2483fc267721420912a3d4","articleId":215,"userId":89,"content":"\r\n聚餐照片\r\n![mmexport1579450936429.jpg](//static.cnodejs.org/FpZR_Fjz7xoh08h_NmyczX_wBwHK)","createdAt":1579451388881},{"id":1262,"originId":"5e248e081225c9423dcd8ca9","articleId":215,"userId":599,"content":"[@i5ting](/user/i5ting)  为狼叔打call, 狼叔最帅","createdAt":1579453960287},{"id":1263,"originId":"5e24f2b21225c9423dcd8caf","articleId":215,"userId":22,"content":"狼叔最帅","createdAt":1579479730571},{"id":1264,"originId":"5e252672267721420912a455","articleId":215,"userId":89,"content":"面向B端工作台的微前端方案-ConsoleOS-徐博文\r\nhttps://edu.talkingdata.com/open-class?id=142\r\n\r\nServerless在美团的实践-龙佳文\r\nhttps://edu.talkingdata.com/open-class?id=143\r\n\r\n前端生态建设在瓜子的落地实践-王东\r\nhttps://edu.talkingdata.com/open-class?id=144\r\n\r\nEgg-React-SSR深度解析-张宇昂\r\nhttps://edu.talkingdata.com/open-class?id=145\r\n\r\n如何融入并贡献开源-Justjavac\r\nhttps://edu.talkingdata.com/open-class?id=146\r\n\r\n圆桌讨论\r\nhttps://edu.talkingdata.com/open-class?id=147","createdAt":1579492978057},{"id":1265,"originId":"5ea7d334fd11584365d2c69f","articleId":215,"userId":2,"content":"迟来的赞👍","createdAt":1588056884596},{"id":1266,"originId":"5f6ff257f9736b02ceada726","articleId":215,"userId":600,"content":"真好啊\r\n","createdAt":1601172055161},{"id":1267,"originId":"5f71579ef9736b02ceadaa87","articleId":215,"userId":601,"content":"帅呀","createdAt":1601263518312},{"id":1268,"originId":"5f715b4472af8c02d3f8db76","articleId":215,"userId":602,"content":"秀\r\n","createdAt":1601264452784},{"id":1269,"originId":"5f680580c1c67a7dd9aff471","articleId":216,"userId":604,"content":"就这个功能....\r\n浪费这个域名了","createdAt":1600652672328},{"id":1270,"originId":"5f6824f7c1c67a7dd9aff4f4","articleId":216,"userId":605,"content":"其实我想说，就这？\r\n看看我的 [https://ops-coffee.cn](https://ops-coffee.cn)","createdAt":1600660727526},{"id":1271,"originId":"5f682dfac1c67a7dd9aff50a","articleId":216,"userId":178,"content":"[@wantao666](/user/wantao666) \r\n![我不管.gif](//static.cnodejs.org/Fljp0FLtH-dBu4wBs-OBwRYg1mRt)","createdAt":1600663034896},{"id":1272,"originId":"5f682f34d22a6b1d622c9a96","articleId":216,"userId":178,"content":"[@ops-coffee](/user/ops-coffee) \r\n![我们不一样.gif](//static.cnodejs.org/FsKr9fQu3GUvomV1NRU2Y2-sFBX3)","createdAt":1600663348262},{"id":1273,"originId":"5f714e16f9736b02ceada9fa","articleId":216,"userId":606,"content":"1","createdAt":1601261078911},{"id":1274,"originId":"5f682d18c1c67a7dd9aff503","articleId":219,"userId":178,"content":"捞起来！哈哈哈！","createdAt":1600662808153},{"id":1275,"originId":"5f69bcfdc1c67a7dd9aff8b5","articleId":219,"userId":354,"content":"要是能开源就更好了","createdAt":1600765181803},{"id":1276,"originId":"5f6aa5ecc1c67a7dd9aff998","articleId":219,"userId":178,"content":"暂时不考虑，感谢兄弟！[@cctv1005s](/user/cctv1005s)\r\n","createdAt":1600824812498},{"id":1277,"originId":"5ef94472472c7975b04b7e7a","articleId":221,"userId":396,"content":"github网址：[https://github.com/lay-zhou/youdidao-unmanned-shop](https://github.com/lay-zhou/youdidao-unmanned-shop)","createdAt":1593394290980},{"id":1278,"originId":"5ef9601013f8b244e57cbffd","articleId":221,"userId":359,"content":"赞一个！","createdAt":1593401360177},{"id":1279,"originId":"5ef976eb13f8b244e57cc06f","articleId":221,"userId":396,"content":"[@tangchi695](/user/tangchi695) 谢谢","createdAt":1593407211905},{"id":1280,"originId":"5efa963f472c7975b04b824b","articleId":221,"userId":150,"content":"点赞","createdAt":1593480767394},{"id":1281,"originId":"5efb0b3a13f8b244e57cc573","articleId":221,"userId":396,"content":"[@ddzyan](/user/ddzyan) 谢谢","createdAt":1593510714442},{"id":1282,"originId":"5efd8331b2a7c073cb32a285","articleId":221,"userId":610,"content":"不错不错","createdAt":1593672497226},{"id":1283,"originId":"5efd851f13f8b244e57ccae4","articleId":221,"userId":396,"content":"[@1316346949](/user/1316346949) 谢谢，记得star哦，还有交流群","createdAt":1593672991068},{"id":1284,"originId":"5f01ca65b2a7c073cb32ab75","articleId":221,"userId":611,"content":"lz很给力的说~~~","createdAt":1593952869791},{"id":1285,"originId":"5f0279f0b2a7c073cb32abeb","articleId":221,"userId":396,"content":"[@funeyu](/user/funeyu) 谢谢\r\n","createdAt":1593997808703},{"id":1286,"originId":"5f1635baf0739b0e62d1110c","articleId":221,"userId":612,"content":"这样的项目怎么赢利啊","createdAt":1595291066536},{"id":1287,"originId":"5f1790bff0739b0e62d113d0","articleId":221,"userId":396,"content":"[@shixinglong007](/user/shixinglong007) 主要是开源","createdAt":1595379903190},{"id":1288,"originId":"5f6ee2e5f9736b02ceada634","articleId":221,"userId":396,"content":"[@tangchi695](/user/tangchi695) 131","createdAt":1601102565293},{"id":1289,"originId":"5f6ee311f9736b02ceada638","articleId":221,"userId":396,"content":"[@lay-zhou](/user/lay-zhou) 111","createdAt":1601102609795},{"id":1290,"originId":"5f6ee4e572af8c02d3f8d6dc","articleId":221,"userId":396,"content":"[@tangchi695](/user/tangchi695) 123","createdAt":1601103077493},{"id":1291,"originId":"5f6eeafe72af8c02d3f8d6f5","articleId":221,"userId":396,"content":"13123","createdAt":1601104638995},{"id":1292,"originId":"5e716b8a89a5c35f11e3308f","articleId":222,"userId":21,"content":"六个月不到刷700道，平均一天10道，挺强的。","createdAt":1584491402919},{"id":1293,"originId":"5e75827464259617c49a21df","articleId":222,"userId":614,"content":"支持一下，最近也在学算法","createdAt":1584759412449},{"id":1294,"originId":"5e75b1f864259617c49a2243","articleId":222,"userId":558,"content":"可以的","createdAt":1584771576246},{"id":1295,"originId":"5e7d655258ab6717beb7ce9a","articleId":222,"userId":615,"content":"[@zy445566](/user/zy445566) 你是不是算的有问题。。","createdAt":1585276242680},{"id":1296,"originId":"5e7d6e3964259617c49a3237","articleId":222,"userId":21,"content":"[@974806047](/user/974806047) 是的，算错了，着实吓了我一条","createdAt":1585278521750},{"id":1297,"originId":"5f6d905bf9736b02ceada4ab","articleId":222,"userId":616,"content":"支持一下，顺便提一点，算法都是围绕数据结构而来，数据结构设计也挺重要","createdAt":1601015899413},{"id":1298,"originId":"5f6d928672af8c02d3f8d598","articleId":222,"userId":617,"content":"404","createdAt":1601016454249},{"id":1299,"originId":"5f6a023ac1c67a7dd9aff95d","articleId":225,"userId":89,"content":"这么发会有人看么？只有地址，就是广告","createdAt":1600782906811},{"id":1300,"originId":"5f6aa0e7c1c67a7dd9aff98b","articleId":225,"userId":619,"content":"[@i5ting](/user/i5ting) 修改下","createdAt":1600823527690},{"id":1301,"originId":"5f6ac8dcc1c67a7dd9affa57","articleId":225,"userId":89,"content":"[@Jugging](/user/Jugging) 棒棒哒","createdAt":1600833756445},{"id":1302,"originId":"5f688975c1c67a7dd9aff664","articleId":227,"userId":1,"content":"厉害了🙈","createdAt":1600686453601},{"id":1303,"originId":"5f69b868c1c67a7dd9aff89a","articleId":227,"userId":38,"content":"前排","createdAt":1600764008259},{"id":1304,"originId":"5f6415c3d22a6b1d622c9712","articleId":228,"userId":442,"content":"最近整正需要考虑工作流，正好遇到你 😀","createdAt":1600394691229},{"id":1305,"originId":"5f642a94d22a6b1d622c9756","articleId":228,"userId":16,"content":"大佬来了","createdAt":1600400020454},{"id":1306,"originId":"5f648b26c1c67a7dd9aff2aa","articleId":228,"userId":605,"content":"[@szy0syz](/user/szy0syz) 有用别忘转发推广惠及更多的开发者","createdAt":1600424742689},{"id":1307,"originId":"5f648b35d22a6b1d622c9877","articleId":228,"userId":605,"content":"[@AviorAlong](/user/AviorAlong) emm...是说我么？","createdAt":1600424757231},{"id":1308,"originId":"5f685719d22a6b1d622c9b4a","articleId":228,"userId":16,"content":"[@ops-coffee](/user/ops-coffee) 自信点，就是你，关注你公众号比较早","createdAt":1600673561105},{"id":1309,"originId":"5f69b0e2c1c67a7dd9aff874","articleId":228,"userId":605,"content":"[@AviorAlong](/user/AviorAlong) 感谢大佬，我这做运维的没想到还有专业前端的粉丝","createdAt":1600762082663},{"id":1310,"originId":"5bd47a0514e994202cd5bdbb","articleId":229,"userId":623,"content":"国内做论坛真不容易，我一开始还以为是被DDoS了","createdAt":1540651525900},{"id":1311,"originId":"5bd47b2d14e994202cd5bdbd","articleId":229,"userId":624,"content":"辛苦了~ 下午正在测 CNode API 突然不能访问了， 还以为本地网络问题呢。\r\n幸好楼主处理及时，辛苦~","createdAt":1540651821827},{"id":1312,"originId":"5bd53576a66f05ec3b4febd7","articleId":229,"userId":625,"content":"哇难受，迁移辛苦了\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1540699510057},{"id":1313,"originId":"5bd5bebea66f05ec3b4fec04","articleId":229,"userId":65,"content":"想说点什么","createdAt":1540734654867},{"id":1314,"originId":"5bd5c7a1a66f05ec3b4fec06","articleId":229,"userId":626,"content":"这个牛逼了，运营商居然能这么玩？","createdAt":1540736929286},{"id":1315,"originId":"5bd5d6b3a66f05ec3b4fec13","articleId":229,"userId":627,"content":"速度真的挺快. 这个墙很难受!","createdAt":1540740787443},{"id":1316,"originId":"5bd673ad8ca34e0b047041bb","articleId":229,"userId":628,"content":"早上又 50x 了","createdAt":1540780973841},{"id":1317,"originId":"5bd67453d00aac1004de51d2","articleId":229,"userId":18,"content":"[@zhuweiyou](/user/zhuweiyou) 是的，买的新机器只有1cpu，现在买个2cpu试试","createdAt":1540781139067},{"id":1318,"originId":"5bd67714d00aac1004de51d7","articleId":229,"userId":628,"content":"[@alsotang](/user/alsotang)   充钱才能变强","createdAt":1540781844319},{"id":1319,"originId":"5bd67da98ca34e0b047041c9","articleId":229,"userId":624,"content":"早上502了。。 恢复了挺快啊","createdAt":1540783529868},{"id":1320,"originId":"5bd6983b8ca34e0b047041d9","articleId":229,"userId":629,"content":"[@zhuweiyou](/user/zhuweiyou) 您这个问题充钱就能解决的，😄。","createdAt":1540790331668},{"id":1321,"originId":"5bd6a1ab8ca34e0b047041dc","articleId":229,"userId":630,"content":"支持LZ\r\n站长不易呀","createdAt":1540792747367},{"id":1322,"originId":"5bd6a1fa8ca34e0b047041de","articleId":229,"userId":631,"content":"是因为翻墙的那个工具帖子而被封的吗？","createdAt":1540792826203},{"id":1323,"originId":"5bd6b2b5d00aac1004de51f8","articleId":229,"userId":632,"content":"感谢","createdAt":1540797109992},{"id":1324,"originId":"5bd6b316d00aac1004de51fa","articleId":229,"userId":18,"content":"[@Sunkaystar](/user/Sunkaystar) 对","createdAt":1540797206679},{"id":1325,"originId":"5bd6c599d00aac1004de5208","articleId":229,"userId":633,"content":"辛苦辛苦","createdAt":1540801945067},{"id":1326,"originId":"5bd6c7188ca34e0b047041ee","articleId":229,"userId":167,"content":"好肯...原来是灯笼的锅","createdAt":1540802328715},{"id":1327,"originId":"5bd6cdbed00aac1004de5210","articleId":229,"userId":36,"content":"辛苦了","createdAt":1540804030085},{"id":1328,"originId":"5bd6d5618ca34e0b047041fa","articleId":229,"userId":578,"content":"呵呵，鄙人早就用AWS EC2日本节点了~","createdAt":1540805985152},{"id":1329,"originId":"5bd6ebf3d00aac1004de521e","articleId":229,"userId":545,"content":"阿里云国际版（海外身份） 的 香港 和新加坡 都很快。  20-50ms      40-80ms\r\n10美金一个月 ，就有 1TB 以上的流量","createdAt":1540811763985},{"id":1330,"originId":"5bd7018dd00aac1004de5225","articleId":229,"userId":634,"content":"速度还是挺快的。监管真的让人疲惫。","createdAt":1540817293638},{"id":1331,"originId":"5bd7b598d00aac1004de523d","articleId":229,"userId":516,"content":"[@zuohuadong](/user/zuohuadong)   国外的阿里节点用的人不多吧。。。","createdAt":1540863384474},{"id":1332,"originId":"5bd7b769d00aac1004de5240","articleId":229,"userId":545,"content":"[@nnliang](/user/nnliang)  挺多的，国际版主要是限制了（必须有国外电话，国外地址的信用卡）。","createdAt":1540863849577},{"id":1333,"originId":"5bd7d548d00aac1004de5263","articleId":229,"userId":635,"content":"[@binbin0915](/user/binbin0915) 鄙人觉得是该篇文章底下的留言回复","createdAt":1540871496290},{"id":1334,"originId":"5bd7ef6a8ca34e0b04704256","articleId":229,"userId":636,"content":"公司的是联通的，打开很慢，所以果断就这样搞：\r\n\r\n![image.png](//static.cnodejs.org/FgW5-1ouETbsBSKSNLS9nc9RILBV)","createdAt":1540878186613},{"id":1335,"originId":"5bd806d18ca34e0b04704267","articleId":229,"userId":637,"content":"辛苦了~\r\n很需要这个API。","createdAt":1540884177820},{"id":1336,"originId":"5bd81f57d00aac1004de528a","articleId":229,"userId":638,"content":"[@blackmatch](/user/blackmatch) 这个是在做什么呢?","createdAt":1540890455537},{"id":1337,"originId":"5bd8248e8ca34e0b0470428e","articleId":229,"userId":639,"content":"一个这么纯粹的技术论坛也无法避免被波及到啊。真是覆巢之下岂有完卵啊","createdAt":1540891790793},{"id":1338,"originId":"5bd84b07d00aac1004de52bb","articleId":229,"userId":636,"content":"[@vipzrx](/user/vipzrx) 设置该网站走梯子。","createdAt":1540901639870},{"id":1339,"originId":"5bd858a2d00aac1004de52c5","articleId":229,"userId":640,"content":"你们可以跟ucloud商量一下换个ip就好了","createdAt":1540905122740},{"id":1340,"originId":"5bd91364d00aac1004de52fd","articleId":229,"userId":18,"content":"[@jiangzhuo](/user/jiangzhuo) 换了之后还是很可能被同样原因封掉","createdAt":1540952932263},{"id":1341,"originId":"5bd91944d00aac1004de5301","articleId":229,"userId":625,"content":"现在能**持续给评论点赞**，但是实际上点赞没生效","createdAt":1540954436039},{"id":1342,"originId":"5bd92ce88ca34e0b047042e7","articleId":229,"userId":18,"content":"[@Lsnsh](/user/Lsnsh) 我修一下","createdAt":1540959464950},{"id":1343,"originId":"5bd930f4b2d76429ef560b77","articleId":229,"userId":18,"content":"[@Lsnsh](/user/Lsnsh) 我升了mongodb却忘记升级mongoose了。\r\n\r\nhttps://stackoverflow.com/questions/48607918/mongoerror-unknown-modifier-pushall-in-node-js","createdAt":1540960500320},{"id":1344,"originId":"5bd9310ab2d76429ef560b7c","articleId":229,"userId":18,"content":"[@blackmatch](/user/blackmatch) 是啊。联通好像确实很慢。电信移动都快。","createdAt":1540960522794},{"id":1345,"originId":"5bd9a0be04de603bdb44835b","articleId":229,"userId":638,"content":"[@alsotang](/user/alsotang) 换主机,不做审查. 干的漂亮!","createdAt":1540989118452},{"id":1346,"originId":"5bda54d1a4799b3c5972a47e","articleId":229,"userId":638,"content":"[@blackmatch](/user/blackmatch) 这个不是一个去广告的插件吗? 还可以走梯子?","createdAt":1541035217346},{"id":1347,"originId":"5bda5526a4799b3c5972a486","articleId":229,"userId":638,"content":"[@vipzrx](/user/vipzrx) 我记得阿里和腾讯是有那种敏感词检测的接口的. 是不是先坐下内部审查, 让网站不走代理,方便不会梯子的人交流","createdAt":1541035302528},{"id":1348,"originId":"5bda556d04de603bdb4484a3","articleId":229,"userId":638,"content":"[@vipzrx](/user/vipzrx) https://github.com/Jiahonzheng/Text-Sensitivity 这个是结合和阿里和腾讯的","createdAt":1541035373649},{"id":1349,"originId":"5bda6b1773926d49f8c4aca4","articleId":229,"userId":18,"content":"[@vipzrx](/user/vipzrx) 梯子都不会的人有什么交流价值","createdAt":1541040919460},{"id":1350,"originId":"5bda74417345c74f79c0a450","articleId":229,"userId":641,"content":"没翻墙也能访问啊","createdAt":1541043265373},{"id":1351,"originId":"5bda770693f8d64f74b01231","articleId":229,"userId":642,"content":"666","createdAt":1541043974542},{"id":1352,"originId":"5bdb0798646a05745b7b71c2","articleId":229,"userId":643,"content":"辛苦了","createdAt":1541080984840},{"id":1353,"originId":"5bdc114221d75b74609f3375","articleId":229,"userId":644,"content":"香港腾讯主机，ping一般40-60之间，坐标北京。\r\nping widora.io，楼主可参考一下","createdAt":1541148994189},{"id":1354,"originId":"5be3dc6e646a05745b7b9c6d","articleId":229,"userId":645,"content":"aws 日本我基本上班就翻墙到日本现在基本秒近\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1541659758806},{"id":1355,"originId":"5be5a1d9646a05745b7ba564","articleId":229,"userId":18,"content":"[@YuanChenmang](/user/YuanChenmang) 深圳电信ping才16ms。确实挺好的。","createdAt":1541775833487},{"id":1356,"originId":"5be5a1f1646a05745b7ba56a","articleId":229,"userId":18,"content":"[@YuanChenmang](/user/YuanChenmang) 之前国内主机给我的感觉就是流量贵或者限制带宽，所以一开始就没有考虑国内","createdAt":1541775857975},{"id":1357,"originId":"5bea2ecf2fed25406c25df18","articleId":229,"userId":646,"content":"谢谢来大佬给我么创造讨论机会","createdAt":1542074063368},{"id":1358,"originId":"5bea3312e161dc409d761271","articleId":229,"userId":646,"content":"感谢大佬\n","createdAt":1542075154720},{"id":1359,"originId":"5bee62cba05b0e0ae443bd6f","articleId":229,"userId":647,"content":"辛苦了","createdAt":1542349515187},{"id":1360,"originId":"5bee9bb8be1b120abac5a339","articleId":229,"userId":648,"content":"[@YuanChenmang](/user/YuanChenmang) 这种可以不备案上站吗","createdAt":1542364088791},{"id":1361,"originId":"5bf24b52e6481c5709f5d197","articleId":229,"userId":649,"content":"fuck the GFW","createdAt":1542605650726},{"id":1362,"originId":"5bf7af2abe1b120abac5c43c","articleId":229,"userId":35,"content":"# 监管逼太紧了吧~","createdAt":1542958890917},{"id":1363,"originId":"5bfa2e34d6104a4f803a1392","articleId":229,"userId":650,"content":"海外表示经常进不来。","createdAt":1543122484525},{"id":1364,"originId":"5bfc8c97be1b120abac5d15b","articleId":229,"userId":413,"content":"[@TimesDonegal](/user/TimesDonegal) 确实是这样，有时候在手机上刷得好半天才能打开。\n\n来自实用的 [CNodeJS-Swift](https://github.com/tomoya92/CNodeJS-Swift)","createdAt":1543277719244},{"id":1365,"originId":"5bfcaf3cd6104a4f803a1e20","articleId":229,"userId":18,"content":"[@tomoya92](/user/tomoya92) 什么运营商？翻墙没？","createdAt":1543286588121},{"id":1366,"originId":"5bfcaf49d6104a4f803a1e24","articleId":229,"userId":18,"content":"[@TimesDonegal](/user/TimesDonegal) 海外是指？哪个国家？","createdAt":1543286601325},{"id":1367,"originId":"5bfcd4c3be1b120abac5d400","articleId":229,"userId":413,"content":"[@alsotang](/user/alsotang) 公司用的是电信，家里用的也是电信，如果不翻墙就会出现加载很慢的情况\r\n\r\n手机用的是联通，如果不翻墙，有时候会加载半分钟甚至1分钟，有时候等不及了，就重新刷新加载了。。","createdAt":1543296195720},{"id":1368,"originId":"5bfd501dd6104a4f803a22e9","articleId":229,"userId":18,"content":"[@tomoya92](/user/tomoya92) 啊？我以为电信很快的。联通慢我是知道","createdAt":1543327773105},{"id":1369,"originId":"5bfeaa20be1b120abac5de51","articleId":229,"userId":651,"content":"监管越来越严了，学习都要翻墙了","createdAt":1543416352422},{"id":1370,"originId":"5c073e2bd3b8ab334e8dadc3","articleId":229,"userId":652,"content":"[@alsotang](/user/alsotang) 辛苦了。发分享提交的时候，明显慢了。","createdAt":1543978539560},{"id":1371,"originId":"5c076fd3d3b8ab334e8daf99","articleId":229,"userId":241,"content":"有捐款的渠道吗，大家支持一下cnode","createdAt":1543991251765},{"id":1372,"originId":"5c088cf815a4d545e3f4bb90","articleId":229,"userId":18,"content":"[@fancylife](/user/fancylife) 不需要。我自己能应付。","createdAt":1544064248817},{"id":1373,"originId":"5c0bb300f3d48d2397c0f416","articleId":229,"userId":413,"content":"[@alsotang](/user/alsotang) 站长，现在cnode部暑的是哪个版本的？我记得之前好像是换到了egg版本的\n\n来自实用的 [CNodeJS-Swift](https://github.com/tomoya92/CNodeJS-Swift)","createdAt":1544270592572},{"id":1374,"originId":"5c0dcefff3d48d2397c0f836","articleId":229,"userId":18,"content":"[@tomoya92](/user/tomoya92) egg版本的登录中间件有问题，之前又没人修。所以还是用的老版","createdAt":1544408831918},{"id":1375,"originId":"5c0dcf107ec239239ff552ab","articleId":229,"userId":18,"content":"[@tomoya92](/user/tomoya92) express版本\r\n","createdAt":1544408848379},{"id":1376,"originId":"5c0f4e737ec239239ff55a28","articleId":229,"userId":641,"content":"egg版本不是egg自己搞的吗，这么不上心哦。","createdAt":1544506995564},{"id":1377,"originId":"5c0f69897ec239239ff55b6d","articleId":229,"userId":434,"content":"悲哀啊，这么个纯讨论技术的都能被封。","createdAt":1544513929376},{"id":1378,"originId":"5c13ba10f3d48d2397c11656","articleId":229,"userId":535,"content":"站长是腾讯的他们都不会照顾一下么","createdAt":1544796688729},{"id":1379,"originId":"5c13ba5e7ec239239ff56fe7","articleId":229,"userId":535,"content":"据说aws今年会开香港节点，但都12月了还没动静","createdAt":1544796766545},{"id":1380,"originId":"5c13cfb8f3d48d2397c11699","articleId":229,"userId":535,"content":"[@zuohuadong](/user/zuohuadong) 谁说阿里云香港节点必须要有海外电话、海外的银行账号的？我1年前创建了一个实例，现在用得挺好的呀，难道现在政策变了？","createdAt":1544802232114},{"id":1381,"originId":"5c13d05b7ec239239ff5701b","articleId":229,"userId":535,"content":"[@zuohuadong](/user/zuohuadong) 国内的账号不也可以创建香港节点的吗？","createdAt":1544802395779},{"id":1382,"originId":"5c149287f3d48d2397c117b5","articleId":229,"userId":545,"content":"[@zhanzhenzhen](/user/zhanzhenzhen)  阿里云国际版  单核 1G 1TB流量/月 （差不多够你以1M/s 的速度跑一个月，使用下来比20M 带宽都爽） 9美金/月。\r\n\r\n然后你算算国内版的一个月得几千？","createdAt":1544852103828},{"id":1383,"originId":"5c1871967ec239239ff57e5e","articleId":229,"userId":18,"content":"[@zhanzhenzhen](/user/zhanzhenzhen) 我虽然是腾讯的，但是这种违规问题，如果遇到了，人家最多就是好心好意劝你迁移，但也不会容忍着。\r\naws如果开香港节点就好了，希望速度能快。","createdAt":1545105814165},{"id":1384,"originId":"5c1871c67ec239239ff57e63","articleId":229,"userId":18,"content":"[@zhanzhenzhen](/user/zhanzhenzhen) https://aws.amazon.com/cn/about-aws/global-infrastructure/ 确实有计划推出","createdAt":1545105862049},{"id":1385,"originId":"5c190a8c76c4964062a1b042","articleId":229,"userId":653,"content":"辛苦了","createdAt":1545144972975},{"id":1386,"originId":"5c1e20a376c4964062a1c94a","articleId":229,"userId":654,"content":"想说点什么","createdAt":1545478307980},{"id":1387,"originId":"5c1e20e476c4964062a1c94c","articleId":229,"userId":654,"content":"国内做论坛真不容易","createdAt":1545478372992},{"id":1388,"originId":"5c22479c3898674067a785ad","articleId":229,"userId":655,"content":"图片还是用的七牛云加速的吗？ 七牛都有备案才可以，有备案，还是有其它方法？","createdAt":1545750428827},{"id":1389,"originId":"5c22e6ce3898674067a786f2","articleId":229,"userId":18,"content":"[@awong1900](/user/awong1900) 我域名是有备案的啊","createdAt":1545791182461},{"id":1390,"originId":"5c22e79e76c4964062a1ddad","articleId":229,"userId":655,"content":"好的 谢谢！","createdAt":1545791390895},{"id":1391,"originId":"5c24762b3898674067a78ec8","articleId":229,"userId":656,"content":"不容易","createdAt":1545893419192},{"id":1392,"originId":"5c25ebb63898674067a794cf","articleId":229,"userId":657,"content":"辛苦了","createdAt":1545989046754},{"id":1393,"originId":"5c3193e43898674067a7bb43","articleId":229,"userId":658,"content":"感谢分享","createdAt":1546752996861},{"id":1394,"originId":"5c3c778ba4d44449266b0c37","articleId":229,"userId":87,"content":"jiayou","createdAt":1547466635162},{"id":1395,"originId":"5c496d4e6955112b994386a2","articleId":229,"userId":659,"content":"一生辛苦辛苦","createdAt":1548315982695},{"id":1396,"originId":"5c66b3270752e020af943ff8","articleId":229,"userId":660,"content":"辛苦","createdAt":1550234407293},{"id":1397,"originId":"5c6e1431e1a81129a7ad9120","articleId":229,"userId":661,"content":"辛苦","createdAt":1550718001298},{"id":1398,"originId":"5c6e6d68e1a81129a7ad94a6","articleId":229,"userId":662,"content":"辛苦了楼主，谢谢","createdAt":1550740840213},{"id":1399,"originId":"5c8f631c7ce0df373242968f","articleId":229,"userId":663,"content":"谢谢楼主，楼主辛苦了！","createdAt":1552900892306},{"id":1400,"originId":"5c934efd00bcfd7eb2be4938","articleId":229,"userId":664,"content":"谢谢","createdAt":1553157885697},{"id":1401,"originId":"5c94498f00bcfd7eb2be4dab","articleId":229,"userId":665,"content":"你说的我都懂","createdAt":1553222031705},{"id":1402,"originId":"5c98cec2fd41137eb76618d4","articleId":229,"userId":666,"content":"楼主辛苦啦！！！","createdAt":1553518274594},{"id":1403,"originId":"5c98d66700bcfd7eb2be60ec","articleId":229,"userId":667,"content":"[@Zhang8023Lyf](/user/Zhang8023Lyf) 楼主辛苦了","createdAt":1553520231037},{"id":1404,"originId":"5c9da49b99e62a362ff410df","articleId":229,"userId":668,"content":"支持！","createdAt":1553835163002},{"id":1405,"originId":"5ca4c9e26c1de62dce467941","articleId":229,"userId":669,"content":"辛苦了","createdAt":1554303458111},{"id":1406,"originId":"5cb73a7c37faec0ce1d03024","articleId":229,"userId":111,"content":"![tokoy.png](//static.cnodejs.org/FnToWwY89juAyFbE3PqKBFSRSBhj)","createdAt":1555511932095},{"id":1407,"originId":"5cb7e76ca86ae80ce64b0805","articleId":229,"userId":18,"content":"[@yakczh](/user/yakczh) 这是什么运营商的线路？我这边用ipip看联通也是从上海联通直通日本不绕路，ping也低，但实际上联通4g访问cnode很慢。","createdAt":1555556204727},{"id":1408,"originId":"5cb80a36a86ae80ce64b0983","articleId":229,"userId":111,"content":"[@alsotang](/user/alsotang) 电信","createdAt":1555565110328},{"id":1409,"originId":"5cb9729aa86ae80ce64b11cb","articleId":229,"userId":60,"content":"楼主辛苦了！！！","createdAt":1555657370033},{"id":1410,"originId":"5cca72c9a86ae80ce64b5f00","articleId":229,"userId":670,"content":"支持","createdAt":1556771529533},{"id":1411,"originId":"5cceaac6776fb66e0d172133","articleId":229,"userId":671,"content":"辛苦了","createdAt":1557048006826},{"id":1412,"originId":"5cdc1923518e0954fc40ea9a","articleId":229,"userId":672,"content":"支持","createdAt":1557928227400},{"id":1413,"originId":"5ce834d54036f24194cf6676","articleId":229,"userId":673,"content":"**支持**","createdAt":1558721749683},{"id":1414,"originId":"5d05f11b1fe902120f31f628","articleId":229,"userId":674,"content":"支持","createdAt":1560670491528},{"id":1415,"originId":"5d06fc0c1fe902120f31fa39","articleId":229,"userId":675,"content":"支持","createdAt":1560738828073},{"id":1416,"originId":"5d06fc3795fcc914aa269a42","articleId":229,"userId":675,"content":"支持","createdAt":1560738871189},{"id":1417,"originId":"5d0700ff95fcc914aa269a92","articleId":229,"userId":676,"content":"支持","createdAt":1560740095347},{"id":1418,"originId":"5d072aa71fe902120f31fc33","articleId":229,"userId":677,"content":"支持","createdAt":1560750759255},{"id":1419,"originId":"5d25ee83fa8ef0094e063e61","articleId":229,"userId":678,"content":"[@dangyanglim](/user/dangyanglim) ?能说详细一点么？","createdAt":1562766979082},{"id":1420,"originId":"5d26de4e8a8bf909209cd788","articleId":229,"userId":679,"content":"所以那个话题到底是讲了什么东西，引发被封的呢","createdAt":1562828366144},{"id":1421,"originId":"5d27ef61fa8ef0094e064429","articleId":229,"userId":18,"content":"[@Billgo](/user/Billgo) vpn\r\n","createdAt":1562898273502},{"id":1422,"originId":"5d4b976212a0194544415223","articleId":229,"userId":3,"content":"支持","createdAt":1565235042212},{"id":1423,"originId":"5d563ddd697873456c6bde16","articleId":229,"userId":680,"content":"支持","createdAt":1565933021111},{"id":1424,"originId":"5d73b526d50f5723459126cb","articleId":229,"userId":681,"content":"怎么发表情","createdAt":1567864102444},{"id":1425,"originId":"5d75fd85d50f572345912e26","articleId":229,"userId":682,"content":"怎么做回复呀！！","createdAt":1568013701864},{"id":1426,"originId":"5f62ad61c1c67a7dd9afee8e","articleId":230,"userId":98,"content":"水积分大神","createdAt":1600302433306},{"id":1427,"originId":"5f6317bdc1c67a7dd9aff040","articleId":230,"userId":135,"content":"有道理,这就转安卓开发😎","createdAt":1600329661722},{"id":1428,"originId":"5f63492bc1c67a7dd9aff09a","articleId":230,"userId":111,"content":"[@abiuDoIT](/user/abiuDoIT) \r\n![9df4150e3f9e4589aa19f5f435dc04dd.jpeg](//static.cnodejs.org/Fni0pasqmzUJkbjpMYGEmwD7jMmr)\r\nfrom  [买苹果手机就辞退！](https://www.sohu.com/a/418881967_465270)\r\n以后只有android手机了，因为买苹果手机的都被辞退了象RN  Ionic Flutter 跨平台的优势没有了，android原生开发生态好，开发简单  app效果流畅 一定程度上还能保护源码 至少比右键察看源码要好一点","createdAt":1600342315091},{"id":1429,"originId":"5f680a72d22a6b1d622c9a19","articleId":230,"userId":36,"content":"原生开发不是比较慢吗","createdAt":1600653938219},{"id":1430,"originId":"5f686570d22a6b1d622c9b80","articleId":230,"userId":111,"content":"[@dengnan123](/user/dengnan123)  以前Ecllipse 用adt开发修改完要重新安装才能看效果，现在Android studio里可以用instant run  就跟刷f5一样","createdAt":1600677232097},{"id":1431,"originId":"5f686d33c1c67a7dd9aff607","articleId":230,"userId":11,"content":"[@yakczh](/user/yakczh) 有道理，这就去学安卓开发了","createdAt":1600679219993},{"id":1432,"originId":"5f683e50c1c67a7dd9aff53b","articleId":231,"userId":683,"content":"正版盗版，我看不懂了","createdAt":1600667216260},{"id":1433,"originId":"5f66c2c3d22a6b1d622c9965","articleId":232,"userId":89,"content":"就这点内容，还要跳一次，不值得啊","createdAt":1600570051449},{"id":1434,"originId":"5dd8b46f8287937a65af654f","articleId":234,"userId":686,"content":"蛋蛋 非常优秀","createdAt":1574483055253},{"id":1435,"originId":"5df2f233df1b9a40d14c65dc","articleId":234,"userId":189,"content":"egg nest学哪个好？","createdAt":1576202803590},{"id":1436,"originId":"5df2f683c9ab2e579c215444","articleId":234,"userId":687,"content":"官方文档已经足够好，入门上手不需要看视频浪费时间。\r\n建议铺展讲讲框架原理，或者每个插件的实现方式:)","createdAt":1576203907467},{"id":1437,"originId":"5df2f79edf1b9a40d14c65fc","articleId":234,"userId":687,"content":"[@sinazl](/user/sinazl) nestjs文档我认为非常差劲。另外看项目大小。可能VusJS和Angular比较与Egg和Nest类似。没有哪个好，只有哪个适合。小项目我认为Egg非常舒服，可扩展性强，自定义性强。Nest主要亮点来自于TypeScript和类Springboot框架模式，这俩玩意都是非常类似Java及其生态的产物。用NodeJS去做，技术上没问题，但总觉得小题大做，强行凑热度。有这功夫，为什么不直接用Java呢？","createdAt":1576204190141},{"id":1438,"originId":"5df8292376a67b5e0e4186ef","articleId":234,"userId":191,"content":"[@VoganWong](/user/VoganWong) 分析到位","createdAt":1576544547541},{"id":1439,"originId":"5df88ca076a67b5e0e41888d","articleId":234,"userId":688,"content":"[@VoganWong](/user/VoganWong) 大概是有很多类似于我这样的，在 java 下开发速度是在 node 下开发速度的 1/3 的选手吧。。。。。","createdAt":1576570016398},{"id":1440,"originId":"5df99518ba8f6d46c4eddef0","articleId":234,"userId":99,"content":"[@sinazl](/user/sinazl)  Egg和Nest类似  没有哪个好，只有哪个适合，新手先学egg   如果会ts可以直接学nestjs","createdAt":1576637720896},{"id":1441,"originId":"5e302b59267721420912a9de","articleId":234,"userId":189,"content":"[@phonegap100](/user/phonegap100) 正在学","createdAt":1580215129397},{"id":1442,"originId":"5e38cdfa267721420912adfd","articleId":234,"userId":685,"content":"[@sinazl](/user/sinazl) 加油","createdAt":1580781050426},{"id":1443,"originId":"5e38d15d267721420912ae04","articleId":234,"userId":689,"content":"加油","createdAt":1580781917433},{"id":1444,"originId":"5e3a97b3267721420912af49","articleId":234,"userId":690,"content":"egg 好像是 定义了一堆 目录规范，文件名 ， 项目然后就自动配置好了， 我理解的对吗 ？  [@atian25](/user/atian25)","createdAt":1580898227816},{"id":1445,"originId":"5e400b491225c9423dcd9b17","articleId":234,"userId":685,"content":"[@PeakFish](/user/PeakFish) 一个mvc框架，规范了koa express中的很多标准","createdAt":1581255497721},{"id":1446,"originId":"5f5daf96c1c67a7dd9afe5fd","articleId":234,"userId":99,"content":"[@PeakFish](/user/PeakFish) egg更适合多人、大型项目开发，如果使用koa express的话业务多了相当于还是封装成了egg的结构","createdAt":1599975318100},{"id":1447,"originId":"5f65e197d22a6b1d622c9928","articleId":234,"userId":100,"content":"nestjs有么有","createdAt":1600512407398},{"id":1448,"originId":"56e8bb91833b7c8a0492e214","articleId":236,"userId":693,"content":"一直用，原理还不知道，感谢楼主分享","createdAt":1458092945543},{"id":1449,"originId":"56e8d747b8a00ec2041ed7d1","articleId":236,"userId":692,"content":"[@jiangliqin](/user/jiangliqin) : )","createdAt":1458100039261},{"id":1450,"originId":"56e8e0aeb8a00ec2041ed7d3","articleId":236,"userId":694,"content":"楼主棒棒的","createdAt":1458102446615},{"id":1451,"originId":"571f7f19fa48138c41110e3b","articleId":236,"userId":576,"content":"楼主棒棒的 + 10086","createdAt":1461681945872},{"id":1452,"originId":"587317967dc832f33ab57868","articleId":236,"userId":12,"content":"cnode 里面写得最好的一篇 cluster 原理分析了。","createdAt":1483937686039},{"id":1453,"originId":"5874b64d06fa6e2a4e4f72bd","articleId":236,"userId":111,"content":"cluster负载均衡的算法能不能自定义?","createdAt":1484043853278},{"id":1454,"originId":"58da8597e9ab80d02d377157","articleId":236,"userId":695,"content":"mark","createdAt":1490716055959},{"id":1455,"originId":"58ef3a2ee54976e847e0a01c","articleId":236,"userId":696,"content":"感谢","createdAt":1492073006227},{"id":1456,"originId":"59a929c39e95202d08c91ea2","articleId":236,"userId":697,"content":"很有用！","createdAt":1504258499585},{"id":1457,"originId":"5ad7ff743edb2aff6be85c9f","articleId":236,"userId":698,"content":"写的很好，虽然我没有看懂。。。","createdAt":1524105076138},{"id":1458,"originId":"5b050cd35cd02be640900de1","articleId":236,"userId":699,"content":"`_listen2` 中创建监听 SOCKET 中使用 `SO_REUSEADDR` 选项使得端口可以复用。","createdAt":1527057619773},{"id":1459,"originId":"5e81d4cc58ab6717beb7d6a0","articleId":236,"userId":700,"content":"优秀","createdAt":1585566924537},{"id":1460,"originId":"5f65aa57c1c67a7dd9aff321","articleId":236,"userId":146,"content":"重温，cluster 和 fork 模式的区别也是值得关注的","createdAt":1600498263391},{"id":1461,"originId":"5f634e35c1c67a7dd9aff0ca","articleId":237,"userId":89,"content":"> SQLite创建的数据库有一种模式IN-MEMORY，但是它并不表示SQLite就成了一个内存数据库。IN-MEMORY模式可以简单地理解为，本来创建的数据库文件是基于磁盘的，现在整个文件使用内存空间来代替磁盘空间，其它操作保持一致。也就是数据库的设计没有根本改变。","createdAt":1600343605243},{"id":1462,"originId":"5f634e75c1c67a7dd9aff0d0","articleId":237,"userId":89,"content":"> 无法在IDE内单独执行某个测试，是这样么？","createdAt":1600343669321},{"id":1463,"originId":"5f634eb8c1c67a7dd9aff0d4","articleId":237,"userId":701,"content":"[@i5ting](/user/i5ting) 嗯嗯,是的.这个地方描述的确实不太准确.我们项目中一直使用的是IN-MEMORY模式. 谢谢大佬指出. ","createdAt":1600343736180},{"id":1464,"originId":"5f634f03d22a6b1d622c9650","articleId":237,"userId":701,"content":"[@i5ting](/user/i5ting) 如果我只配置了npm的话,是没办法在`WebStrom`中通过IDE点击来执行某个单独的测试的.因为IDE跑jest测试的时候走的是jest的配置,所以后面我又弄的jest启动的时候开启`Docker`. 还请大佬多多指教.是不是可以有继续优化的地方","createdAt":1600343811859},{"id":1465,"originId":"5f636e6ed22a6b1d622c96d2","articleId":237,"userId":89,"content":"vscode里是断点打到测试用例上的，jest跑的时候也是可以单个测试执行或watch的。可以玩的点还是非常多的。","createdAt":1600351854376},{"id":1466,"originId":"5f646a43d22a6b1d622c982d","articleId":237,"userId":701,"content":"[@i5ting](/user/i5ting) ![WeChat7e76d92538e31bd47916e5e0e9ccd3f2.png](//static.cnodejs.org/FvgTnaX7dt2w29IiUrBy20eUNYNx)\r\n如果我只加了npm的那个script我没办法点击某个测试用例执行的时候,运行docker. 所以我弄了jest的globalSetup和globalTeardown.\r\n这个方案是我们第一次在一个项目中使用,也不知道对不对.","createdAt":1600416323910},{"id":1467,"originId":"5dce3095865a9844a302227b","articleId":238,"userId":703,"content":"靠谱的定义是什么？","createdAt":1573793941782},{"id":1468,"originId":"5dce3159ece3813ad9ba8950","articleId":238,"userId":545,"content":"看下 node-casbin","createdAt":1573794137863},{"id":1469,"originId":"5dce4164865a9844a30222c6","articleId":238,"userId":704,"content":"啥是靠谱","createdAt":1573798244616},{"id":1470,"originId":"5dd17c0b7651572e0955d9a3","articleId":238,"userId":705,"content":"一直都是这么做","createdAt":1574009867048},{"id":1471,"originId":"5dd242f57651572e0955dc24","articleId":238,"userId":148,"content":"安全。当心token被截获?","createdAt":1574060789083},{"id":1472,"originId":"5dd24ea9a9f4592e749e17fc","articleId":238,"userId":706,"content":"可以的","createdAt":1574063785487},{"id":1473,"originId":"5dd35518a9f4592e749e1a97","articleId":238,"userId":189,"content":"[@myy](/user/myy) 安全性能哦  单独的jwt可以被抓取的哦","createdAt":1574130968886},{"id":1474,"originId":"5dd38768a9f4592e749e1b7f","articleId":238,"userId":707,"content":"如果只用jwt中的信息做权限判断的话，当降低权限的时候，原jwt还可以通过验证是最麻烦的事情。","createdAt":1574143848598},{"id":1475,"originId":"5dd3a95e7651572e0955e006","articleId":238,"userId":703,"content":"[@sinazl](/user/sinazl) 无论你用什么，都有可能被抓取的。","createdAt":1574152542009},{"id":1476,"originId":"5dd499647651572e0955e1ac","articleId":238,"userId":686,"content":"[@myy](/user/myy) 要签名验证的     抓取破解不了才叫安全","createdAt":1574213988290},{"id":1477,"originId":"5dd5d9e78287937a65af5ce0","articleId":238,"userId":703,"content":"[@yibo5220](/user/yibo5220) 大哥，不知道重放攻击么？ 签名只是防修改。我不修改，只是拿别人的token冒充别人的身份，根本不需要破解。","createdAt":1574296039455},{"id":1478,"originId":"5dd5f3298287937a65af5d98","articleId":238,"userId":708,"content":"请教楼上各位什么才安全？","createdAt":1574302505801},{"id":1479,"originId":"5dd8b4a08287937a65af6555","articleId":238,"userId":686,"content":"[@myy](/user/myy) 把时间加入到签名  只允许访问一次呢","createdAt":1574483104159},{"id":1480,"originId":"5dd9429b34a8a07a2dab6b57","articleId":238,"userId":703,"content":"[@yibo5220](/user/yibo5220) 你能想到的别人都想到了。。\r\n\r\njwt是可以加有效时间的，但在有效期内的冒充身份你还是没办法的。\r\n\r\n只能访问一次的jwt。。我只能说。。这真是个天才的想法。。","createdAt":1574519451703},{"id":1481,"originId":"5dd981c734a8a07a2dab6baa","articleId":238,"userId":709,"content":"你说的这种重放攻击，https 也存在这种问题啊。不过人家的签名不只含token，还有时间、tcp seq 都包含。但是依然无法杜绝0 RTT极速通信 重放。\r\n严格安全的话，https 都得关0RTT.\r\n\r\n绝对避免重放，就要搞幂等，或者模仿https 多次RTT，加递增序号。\r\n\r\n反正一般场景下，加时间、随机数也够了。\r\n","createdAt":1574535623232},{"id":1482,"originId":"5dda0ed08287937a65af66f8","articleId":238,"userId":703,"content":"[@ahuigo](/user/ahuigo) 所以我第一个回答就是 “靠谱的定义是什么？”\r\n\r\n靠不靠谱要根据需求来定，，“绝对的安全”估计只能靠量子加密了。","createdAt":1574571728763},{"id":1483,"originId":"5dda4ab68287937a65af675b","articleId":238,"userId":568,"content":"[@myy](/user/myy) 说得好，只能说你可以定义一下你的业务要求到什么安全级别。","createdAt":1574587062561},{"id":1484,"originId":"5f5ad48cd22a6b1d622c88e6","articleId":238,"userId":417,"content":"现在新推出了一个权限框架，叫Node-Casbin（https://github.com/casbin/node-casbin ）。Casbin采用了元模型的设计思想，支持多种经典的访问控制方案，如ACL、RBAC、ABAC，还支持对RESTful API的控制。现在已经支持Express、Koa2、Egg等Web框架了。","createdAt":1599788172995},{"id":1485,"originId":"5f6447d7d22a6b1d622c979d","articleId":238,"userId":154,"content":"6","createdAt":1600407511011},{"id":1486,"originId":"5f61dff4c1c67a7dd9afedec","articleId":239,"userId":41,"content":"有没有上帝之数的算法？","createdAt":1600249844376},{"id":1487,"originId":"5f61e0a3d22a6b1d622c937a","articleId":239,"userId":261,"content":"[@xcatliu](/user/xcatliu) 算法用的 kociemba，最长步数只有 21 步，但不保证最少：https://github.com/d-band/kociemba","createdAt":1600250019978},{"id":1488,"originId":"5f62bc17c1c67a7dd9afeedd","articleId":239,"userId":442,"content":"👍  强啊","createdAt":1600306199581},{"id":1489,"originId":"5f62df91d22a6b1d622c9511","articleId":239,"userId":710,"content":"厲害！","createdAt":1600315281355},{"id":1490,"originId":"5f630ae1d22a6b1d622c9577","articleId":239,"userId":21,"content":"有意思👍，我突然被激发了点创作灵感。","createdAt":1600326369306},{"id":1491,"originId":"5f560228c1c67a7dd9afd9cf","articleId":240,"userId":712,"content":"666","createdAt":1599472168805},{"id":1492,"originId":"5f582fbcd22a6b1d622c83d9","articleId":240,"userId":711,"content":"更新了一版 界面更好看了 www.genal.fun","createdAt":1599614908244},{"id":1493,"originId":"5f629bddc1c67a7dd9afee7d","articleId":240,"userId":713,"content":"挺好的，这种项目对于新手来说是很有参考意义的。","createdAt":1600297949846},{"id":1494,"originId":"5e6addad3cadb020b9160cd8","articleId":241,"userId":545,"content":"会后端的话，前端不妨用 angular ，跟 nest.js/spring 那套比较像。","createdAt":1584061869304},{"id":1495,"originId":"5e6afce43cadb020b9160d36","articleId":241,"userId":715,"content":"我是前端，比较熟悉vue，最近在学node.js。有需要react可以试试看","createdAt":1584069860106},{"id":1496,"originId":"5e6b3c4f23bc9e20b4e33a8c","articleId":241,"userId":714,"content":"[@aFishTail](/user/aFishTail) 你好，qq 744978026 咱们qq聊吧","createdAt":1584086095535},{"id":1497,"originId":"5e6d8f333cadb020b916105f","articleId":241,"userId":716,"content":"我去年也写了一个练手：https://cnodejs.org/topic/5d75ef73d50f572345912d7a\r\n感想是，koa2是个裸件，自己选择和比较其他组件非常辛苦，比如上传/session，当然作为学习也行。另外elastic太庞大了，我搞不定，其他同学说小论坛用不到这么复杂的东东。\r\n有建议直接使用第三方外部搜索。供参考。\r\n","createdAt":1584238387987},{"id":1498,"originId":"5e6ee6fd45fcf75ee50e495b","articleId":241,"userId":714,"content":"[@maxyou](/user/maxyou) koa虽然需要很多组件支持，但是自己找的话没发现有多辛苦，相对于集成方案来说，自己找的好处就是可控性高，像你说的session也是很简单的，自己写也不需要多少代码。\r\n\r\n另外就是ES，ES在JAVA生态里面使用方式算是最简单的了。也没那么多第三方系统的依赖，ZK也不是必须的。使用步骤就是装个java，下载ES,执行个命令就可以用了，优化起来对于其他JAVA来说是最简单的了：ES本身参数就不多，一般就是调调JVM参数，就是OK了。调用更简单，算是标准的REST的API了，而且单机性能也可以，从使用上来说，根本就不算庞大。\r\n\r\n看了你留的帖子地址，你应该不是后端，或者没有整体下项目的设计经验：\r\n小论坛看数据量，10万以内的mysql的like就能撑住，100万内 mysql全文索引也没问题，用ES的话也是要自定义排序和提升搜索的命中率。\r\n头像链接这个应该是有后端经验的都可以解决，是一个非常基础的数据结构设计的问题\r\n再多说一句SSR的，这个是目前前后端分离后最恶心也一直没有解决的问题，目前看也没办法\r\n\r\n我觉得你来我这里发帖是因为抬杠学能耐吧，如果不是可能我多想了。\r\n我说话比较直，有对不住的地方见谅","createdAt":1584326397363},{"id":1499,"originId":"5e6fa9f845fcf75ee50e4bbe","articleId":241,"userId":716,"content":"天哪，感觉要疯了，竟然被别人认为“来我这里发帖是因为抬杠学能耐吧”，而我还自以为自己在表示友好\r\nbye了，表示道歉，不会再来打扰了，我这语文水平太差啦","createdAt":1584376312836},{"id":1500,"originId":"5e70144889a5c35f11e32e38","articleId":241,"userId":714,"content":"[@maxyou](/user/maxyou) 88","createdAt":1584403528166},{"id":1501,"originId":"5e70871289a5c35f11e32f89","articleId":241,"userId":717,"content":"我想做，学习了","createdAt":1584432914154},{"id":1502,"originId":"5e7187b245fcf75ee50e4e7a","articleId":241,"userId":714,"content":"[@lupy0925](/user/lupy0925) 有兴趣吗，现在主要少前端","createdAt":1584498610159},{"id":1503,"originId":"5e73178364259617c49a1dcd","articleId":241,"userId":718,"content":"vue 可以吗  (*￣︶￣)","createdAt":1584600963856},{"id":1504,"originId":"5e7463be64259617c49a2030","articleId":241,"userId":714,"content":"[@Huu1](/user/Huu1) 第一版已经出来了换vue晚了，你要是想看看react倒是可以一起，或者后端","createdAt":1584686014346},{"id":1505,"originId":"5e7d6e0f58ab6717beb7cebf","articleId":241,"userId":717,"content":"[@zergtant](/user/zergtant)   有兴趣","createdAt":1585278479877},{"id":1506,"originId":"5e86f80864259617c49a4491","articleId":241,"userId":719,"content":"已经写了一个差不多得了，不还少些功能：https://github.com/seawind8888/Nobibi\r\nclient: ts + hooks + antd(v4)\r\ndashboard: dva + umijs + antd (就是阿里那套玩意)\r\napi: koa + mongo (考虑用nest.js 或egg重构，或graphql)\r\n后期整体想用lerna打成一个项目，多package方式\r\n有兴趣可以大家一起搞~","createdAt":1585903624574},{"id":1507,"originId":"5e870d6764259617c49a44f2","articleId":241,"userId":720,"content":"111","createdAt":1585909095449},{"id":1508,"originId":"5f5ad637c1c67a7dd9afe308","articleId":241,"userId":417,"content":"权限部分可以用 Node-Casbin: https://github.com/casbin/node-casbin","createdAt":1599788599732},{"id":1509,"originId":"5f6182f0d22a6b1d622c921b","articleId":241,"userId":721,"content":"[@hsluoyz](/user/hsluoyz) Node-Casbin 这玩意不错","createdAt":1600226032096},{"id":1510,"originId":"5f5853d4d22a6b1d622c8478","articleId":244,"userId":358,"content":"写的不错，点个赞，可以投个稿到我们专栏~  https://zhuanlan.zhihu.com/eggjs\r\n\r\n> “NODE_ENV=production egg-scripts start --title=demoserver --env=prod --workers=4 --daemon”\r\n\r\n不需要传 `NODE_ENV`， egg-scripts 里面做了\r\n\r\n> 其中 graceful-process 核心逻辑很简单\r\n\r\n这里其实没那么简单，判断 disconnect 那里才是关键。\r\n\r\n> 关于 pm2 的进一步思考\r\n\r\n不错的问题，如果有课后答案就更好了~","createdAt":1599624148423},{"id":1511,"originId":"5f599323c1c67a7dd9afe146","articleId":244,"userId":724,"content":"[@atian25](/user/atian25)  好的，我整理补充下，然后投个搞~","createdAt":1599705891720},{"id":1512,"originId":"5f5e4cecd22a6b1d622c8c49","articleId":244,"userId":724,"content":"**课后答案**：\r\n**问题1**：pm2 reload 热更新做了啥？\r\n- 当我们执行pm2 reload 时是一种热更新，对流量无影响。pm2 自己做的进程管理, master依次将worker 杀死再启动，保证同时至少一个worker可用。杀死一个worker同时，master不再将流量派发给当前正在重启的worker，同时为了保证之前已经在处理的流量请求处理完毕, 杀死前会等待些时间 。\"By default, pm2 waits 1600ms before sending SIGKILL signal if the applications doesn’t exit itself。 cluster 模式 default to 3000ms。\r\n- 更多优雅退出和优雅启动官方文档：https://pm2.io/docs/runtime/best-practices/graceful-shutdown/\r\n\r\n**问题2**：pm2 提供reload命令，为啥 egg 却不能提供？\r\n- egg 进程管理和流量负载均衡使用的是nodejs 原生的 cluster， nodejs官方不支持热更新\r\n  - 重启Worker：cluster无法控制流量，也无法保证正在处理的请求不中断\r\n   - 删除require.cahe ，这个处理不当会造成内存泄露。笔者也曾给 nodejs14 贡献过一个官方自己该问题处理不当, 造成的内存泄露问题： https://github.com/nodejs/node/pull/32837\r\n- 故eggjs官方推荐：在nodejs服务前面的Router层处理，当服务部署时将流量全部切走。毕竟定位是企业级应用，多机器甚至多集群，以及部署过程中流量自动切流是运维层各公司的标配~","createdAt":1600015596957},{"id":1513,"originId":"5f5e4d51d22a6b1d622c8c4f","articleId":244,"userId":724,"content":"[@atian25](/user/atian25) 已更新相关问题 & 已投稿，感谢，天猪~","createdAt":1600015697387},{"id":1514,"originId":"5f5ed17fc1c67a7dd9afe6cd","articleId":244,"userId":358,"content":"点赞，已收录 https://zhuanlan.zhihu.com/p/225717750","createdAt":1600049535579},{"id":1515,"originId":"5f5ed1b0d22a6b1d622c8cc0","articleId":244,"userId":358,"content":"`graceful-process` 有针对是 cluster 和 fork 两者情况做处理","createdAt":1600049584668},{"id":1516,"originId":"5d79dcbed50f572345913dbc","articleId":245,"userId":36,"content":"你这属于广告吧","createdAt":1568267454246},{"id":1517,"originId":"5d7a0d90a7474a231a58b487","articleId":245,"userId":726,"content":"广告","createdAt":1568279952235},{"id":1518,"originId":"5d81ebc495464514f7ed7c8d","articleId":245,"userId":727,"content":"赞一个","createdAt":1568795588104},{"id":1519,"originId":"5d886a6c53c75a4136b4cc6e","articleId":245,"userId":99,"content":"[@eggper](/user/eggper)  免费的 \r\n\r\n**网盘下载地址链接**： https://pan.baidu.com/s/1YY0uoNTb0PLIhyzrZo1WRA    **提取码**：nv3u\r\n　","createdAt":1569221228650},{"id":1520,"originId":"5d89db954f109e79ef5ff35b","articleId":245,"userId":716,"content":"学过，教程很不错。以后还会有nestjs版本吧？","createdAt":1569315733831},{"id":1521,"originId":"5d8a074ce86cfb0d2a6457cd","articleId":245,"userId":728,"content":"总共就130讲吗，还有多少没录完？","createdAt":1569326924688},{"id":1522,"originId":"5d8a0e298b9e1c0d6dc5dd4d","articleId":245,"userId":729,"content":"![屏幕快照 2019-09-24 下午8.32.49.png](//static.cnodejs.org/FiHEX65o1W49Y5uPEXW3ripnPClf)\r\n\r\n学习中，但是说句实话，课程中的代码质量不太好，不过还是能学到些东西的。","createdAt":1569328681116},{"id":1523,"originId":"5d9d35f0ece3813ad9ba08d0","articleId":245,"userId":189,"content":"[@maxyou](/user/maxyou)   好像已经有了  https://cnodejs.org/topic/5d784a29a7474a231a58ad80","createdAt":1570584048780},{"id":1524,"originId":"5d9d7716865a9844a301a284","articleId":245,"userId":716,"content":"[@sinazl](/user/sinazl) 谢谢！已经看到了，并且视频都学完了","createdAt":1570600726672},{"id":1525,"originId":"5dc4ca8fece3813ad9ba7057","articleId":245,"userId":99,"content":"[@xuemeifenglin](/user/xuemeifenglin) 目前关注度比较高，国内用的没有egg多","createdAt":1573177999844},{"id":1526,"originId":"5df0bb53c9ab2e579c215006","articleId":245,"userId":685,"content":"[@clearJSer](/user/clearJSer) 这广告牛","createdAt":1576057683331},{"id":1527,"originId":"5df0d5efc9ab2e579c21504a","articleId":245,"userId":730,"content":"111","createdAt":1576064495888},{"id":1528,"originId":"5dff6e010696c446bf64f836","articleId":245,"userId":99,"content":"[@sinazl](/user/sinazl) 阿里现在也有类似 nest 的 midwayjs 但是关注度不高","createdAt":1577020929024},{"id":1529,"originId":"5e0173dd0696c446bf64fc68","articleId":245,"userId":685,"content":"感谢  公司目前使用的就是egg.js技术线，也顺利在3个月内完成开发、测试、上线。\r\n\r\negg.js确实快速，小型的案子，可以很快产出原型\r\n","createdAt":1577153501101},{"id":1530,"originId":"5e04b50dba8f6d46c4edf551","articleId":245,"userId":189,"content":"[@phonegap100](/user/phonegap100)  ![2.JPG](//static.cnodejs.org/FgLmAPb-ajV8ps193nBV391rGMMz)","createdAt":1577366797593},{"id":1531,"originId":"5e1061114bea432607fccdc9","articleId":245,"userId":99,"content":"[@sinazl](/user/sinazl) 这个代表不了什么  很多都用的cnpm","createdAt":1578131729458},{"id":1532,"originId":"5e147bab4bea432607fcd56b","articleId":245,"userId":189,"content":"[@phonegap100](/user/phonegap100) nest用的人也多哦","createdAt":1578400683788},{"id":1533,"originId":"5eb9f2972d0afc4087f545b1","articleId":245,"userId":190,"content":"基础已经撸完了   目前是学 express koa 还是egg呢","createdAt":1589244567794},{"id":1534,"originId":"5f12527c4b61050e36e7af38","articleId":245,"userId":99,"content":"[@wuwangju0](/user/wuwangju0) express koa差不多，会一个 另一个也会了。 egg也可以学一下","createdAt":1595036284883},{"id":1535,"originId":"5f2a654cf0739b0e62d13bf0","articleId":245,"userId":731,"content":"[@phonegap100](/user/phonegap100) 请问还有吗","createdAt":1596613964952},{"id":1536,"originId":"5f32882c2799ce64a0aabc45","articleId":245,"userId":57,"content":"express.js就包的下载量来说，比koa.js高一个量级，不是加上淘宝源能填平的，派生框架也很多","createdAt":1597147180089},{"id":1537,"originId":"5f41d46168156574e6e6cfa0","articleId":245,"userId":99,"content":"[@cnscorpions](/user/cnscorpions) 是的 express非常优秀的","createdAt":1598149729478},{"id":1538,"originId":"5f465f4ce8a599751bb5122c","articleId":245,"userId":191,"content":"[@phonegap100](/user/phonegap100) 还是egg好用 我们公司用的就是egg  很好用","createdAt":1598447436089},{"id":1539,"originId":"5f5daf50c1c67a7dd9afe5f3","articleId":245,"userId":99,"content":"[@xuemeifenglin](/user/xuemeifenglin) egg相对来说比较简单","createdAt":1599975248907},{"id":1540,"originId":"5f563c5fc1c67a7dd9afda46","articleId":250,"userId":147,"content":"其实我觉得cpu密集型的任务放到一个js文件会更好，尤其是你的计算逻辑非常复杂的时候，不是三两句代码或者一个函数可以解决的，比如[这种情况](https://zhuanlan.zhihu.com/p/217869370)。或许你可以看看这个解决方案[nodejs-threadpool](https://github.com/theanarkh/nodejs-threadpool)","createdAt":1599487071667},{"id":1541,"originId":"5f564772d22a6b1d622c80f5","articleId":250,"userId":21,"content":"[@theanarkh](/user/theanarkh) \r\n不不不，其实大部分业务场景CPU密集都是几句话能解决的，重要的是方便。比如\r\n```js\r\nconst apiData = [\r\n  {\r\n\t  app_name:\"qq\",\r\n\t  activation:99.865, //活跃度\r\n\t  cover_rate:95.777 //覆盖率\r\n  } //此处省略100000条\r\n]\r\n```\r\n需求求平均活跃度app平均值，然后对大于平均活跃度的数据利用活跃度*覆盖率/100计算活跃指数，最后将活跃指数进行排行。\r\n看起来需求很复杂，但是数据取好，只需要利用CPU算的部分很少代码，如下：\r\n```js\r\nconst goodApiData = await NCPU.run((data)=>{\r\n  const avg = data.reduce((total,v)=>total+v.activation)/data.length;\r\n  const data1 = data.filter((v)=>v.activation>avg)\r\n  const data2 = data1.map(e=>{e.activation_rate = e.activation*cover_rate/100;return e;})\r\n  return data2.sort((a,b)=>a.activation_rate-b.activation_rate)\r\n}, [apiData]) //使用数组传参，这有点类似apply\r\n```\r\n看似复杂需求但CPU计算就这么点，而这样几行就能解决的业务是非常多的，这点计算足以卡线上事件循环1-2秒。\r\n\r\n我这里不封装线程池就是觉得我这个东西就适合做基础库，而且好的线程池包括错误的异步链路跟踪，多种分发算法支持，触达分发，所以我认为线程池反倒要根据业务来做，小则一个工厂搞定，要大多机负载分发不可避免。","createdAt":1599489906040},{"id":1542,"originId":"5f56483dc1c67a7dd9afda71","articleId":250,"userId":147,"content":"嗯嗯，可以，不过场景会有点受限。而且用池化技术会更好。","createdAt":1599490109883},{"id":1543,"originId":"5f56d80ac1c67a7dd9afdad8","articleId":250,"userId":358,"content":"直接用函数计算它不香么","createdAt":1599526922921},{"id":1544,"originId":"5f56ff2ad22a6b1d622c81f9","articleId":250,"userId":36,"content":"[@atian25](/user/atian25) 小公司哪有什么函数计算，没有资源","createdAt":1599536938867},{"id":1545,"originId":"5f58209fc1c67a7dd9afdd63","articleId":250,"userId":358,"content":"![image.png](//static.cnodejs.org/Fgu3GOml7YNgj7vRP-1FXVM2sSr4)\r\n\r\nhttps://help.aliyun.com/document_detail/54301.html?spm=a2c4g.11174283.6.545.20685212ZMpLog\r\n\r\nhttp://tools.functioncompute.com/?spm=a2c4g.11186623.2.17.46285819eLUgPV#/price\r\n\r\n这么便宜","createdAt":1599611039733},{"id":1546,"originId":"5f583deed22a6b1d622c8400","articleId":250,"userId":135,"content":"[@atian25](/user/atian25) 是挺香的😁      \r\n公司的简单业务 已经用上了,  超便宜~\r\n","createdAt":1599618542870},{"id":1547,"originId":"5f5854b9d22a6b1d622c8481","articleId":250,"userId":358,"content":"这种 CPU 密集型计算，不用函数计算，而是自己搞线程。\r\n\r\n有点像不用云服务，自己去机房搭服务器似的。\r\n\r\n费劲又不讨好，人力成本也是成本。","createdAt":1599624377232},{"id":1548,"originId":"5f5865f7c1c67a7dd9afde3f","articleId":250,"userId":147,"content":"[@atian25](/user/atian25) 其实我觉得多线程依然有他的应用场景，用函数计算，粒度还比较粗，比如我要处理一个文件，丢给一个函数处理。这个函数中，使用多线程会更好。不然就是在一个函数里做拆分，分给另一个函数处理，再合并。","createdAt":1599628791423},{"id":1549,"originId":"5f586effc1c67a7dd9afde59","articleId":250,"userId":358,"content":"场景肯定会有，但我觉得大部分情况可以丢给函数计算。","createdAt":1599631103504},{"id":1550,"originId":"5f59836dc1c67a7dd9afe075","articleId":250,"userId":733,"content":"[@atian25](/user/atian25) 可以理解为重CPU计算丢给函数，node异步接受吗？像对于导出 Excel 这种也是 CPU 密集的，要肿么办？也可以丢给函数吗？","createdAt":1599701869677},{"id":1551,"originId":"5f59868cc1c67a7dd9afe093","articleId":250,"userId":21,"content":"[@KokoTa](/user/KokoTa) \r\n其实不是，轻度CPU计算和node异步都可以丢函数。\r\n你可以简单的理解为函数就是一个请求云端就启动一个node来运行，但云端资源可以理解成无限，只要你请求来它就开一个来运行，你不需要管资源问题，云端反正按次扣费。\r\n但重CPU计算不行是因为函数是有超时时间的，超过N秒会自己挂（以前是3到5秒，现在不知道有什么样的变化了），当然重CPU放http请求也不合理。\r\n不过我也是**三年前**写过类似的文章：\r\nhttps://cnodejs.org/topic/5a3541958230827a182937c3\r\n当时用这个做CPU运算争议挺大的，不过很多人看过后，也使用了这个方法，反馈貌似还行。\r\n当然我现在做[ncpu](https://github.com/zy445566/ncpu)主要是为了解决使用方便问题，而不是争一个最佳解决方案，还是那句话，方案都是根据业务看场景定的。","createdAt":1599702668973},{"id":1552,"originId":"5f598a08c1c67a7dd9afe0cd","articleId":250,"userId":358,"content":"> 设置超时时间。默认超时时间为60秒，最长为600秒。超过设置的超时时间，函数将以执行失败结束。\r\n\r\n重 CPU 很适合在函数计算的，像语雀的很多导出服务都是用它。","createdAt":1599703560027},{"id":1553,"originId":"5f52084231fc7a1d8ad65ebc","articleId":253,"userId":38,"content":"JIN QIANG 禁枪？","createdAt":1599211586489},{"id":1554,"originId":"5f52203dd22a6b1d622c7c88","articleId":253,"userId":734,"content":"[@lellansin](/user/lellansin) orz，已修正，金钱💰","createdAt":1599217725803},{"id":1555,"originId":"5f55fd33d22a6b1d622c802a","articleId":253,"userId":59,"content":"卧槽和我单位的方向一致","createdAt":1599470899988},{"id":1556,"originId":"5f574e70c1c67a7dd9afdcba","articleId":253,"userId":734,"content":"[@liangtongzhuo](/user/liangtongzhuo) 你是说褥羊毛的方式，还是蹭 GPU 的方式，哈哈～","createdAt":1599557232144},{"id":1557,"originId":"5f1a540b4b61050e36e7c08e","articleId":255,"userId":144,"content":"不错，很好用。除了自己常用网站还发现了一些新大陆。建议博主可以考虑加入一些智能推荐的功能，根据经常搜的知识，前端或后端职业优先推荐不同的导航。","createdAt":1595560971831},{"id":1558,"originId":"5f1a70aef0739b0e62d11c74","articleId":255,"userId":259,"content":"我猜你在找这个 https://github.com/xjh22222228/nav","createdAt":1595568302004},{"id":1559,"originId":"5f1a9338f0739b0e62d11d23","articleId":255,"userId":735,"content":"[@GeekHi](/user/GeekHi) 好的，楼上给的可以好好参考一下。","createdAt":1595577144317},{"id":1560,"originId":"5f1a9390f0739b0e62d11d2c","articleId":255,"userId":735,"content":"这只是第一个正式版本，功能还很简单，欢迎大家多提意见！","createdAt":1595577232213},{"id":1561,"originId":"5f559a4cd22a6b1d622c7ec0","articleId":255,"userId":735,"content":"![node.png](//static.cnodejs.org/FvrAjDh6EJuOV8rNtccBEwenjOjD)\r\n这两天把Node.js开发导航做了，看着顺眼多了。目前先这样，后面再增加实用的网址和功能","createdAt":1599445580492},{"id":1562,"originId":"5f55a344c1c67a7dd9afd896","articleId":255,"userId":736,"content":"老哥问一下搜索功能是（百度这些）自带的api么，免费么","createdAt":1599447876136},{"id":1563,"originId":"5f55c514d22a6b1d622c7f73","articleId":255,"userId":735,"content":"[@sakilohale](/user/sakilohale) 免费的","createdAt":1599456532888},{"id":1564,"originId":"5f5602bad22a6b1d622c804d","articleId":255,"userId":737,"content":"axios 的介绍有点迷。“Vue基于Promise的HTTP客户端，用于浏览器和node.js”。这个跟 vue 有啥关系。","createdAt":1599472314661},{"id":1565,"originId":"5f560d40d22a6b1d622c8084","articleId":255,"userId":735,"content":"[@shiyutim](/user/shiyutim) 这个确实有点迷，晚上改一下","createdAt":1599475008390},{"id":1566,"originId":"5f562c31d22a6b1d622c80b1","articleId":255,"userId":735,"content":"[@shiyutim](/user/shiyutim) 之前理解错了，一直以为axios是vue生态的一部分。","createdAt":1599482929880},{"id":1567,"originId":"5f4f520168156574e6e6dfc2","articleId":256,"userId":89,"content":"来个广告，哈哈哈\r\n\r\n> 今天，你绿了么？","createdAt":1599033857218},{"id":1568,"originId":"5f505f41d22a6b1d622c7896","articleId":256,"userId":19,"content":"真没必要。。这和刷star 没啥区别","createdAt":1599102785663},{"id":1569,"originId":"5f51b06fd22a6b1d622c7adb","articleId":256,"userId":738,"content":"你以为每个人都不看你的commit内容的吗？","createdAt":1599189103148},{"id":1570,"originId":"5f51b34cd22a6b1d622c7ae8","articleId":256,"userId":22,"content":"[@luanxuechao](/user/luanxuechao) just for fun","createdAt":1599189836898},{"id":1571,"originId":"5f55fde6c1c67a7dd9afd9bc","articleId":256,"userId":59,"content":"我也这样搞过， 哈哈哈哈哈\r\nhttps://github.com/liangtongzhuo/node_git_commit","createdAt":1599471078969},{"id":1572,"originId":"5d9be487865a9844a3019d64","articleId":257,"userId":545,"content":"支持下，辛苦了，要是有内部优惠券就好了~\r\n\r\n录制视频不易，支持正版~\r\n\r\n中文文档：https://docs.nestjs.cn/\r\n\r\n相关资料： https://docs.nestjs.cn/6/awesome\r\n\r\n中文交流QQ群： 277386223  \r\n二群： 1031015552","createdAt":1570497671945},{"id":1573,"originId":"5d9d3461ece3813ad9ba08b5","articleId":257,"userId":99,"content":"eggjs相比nestjs 文档更好，社区也更完善一些。\r\n\r\nnest面向对象优于egg\r\n\r\n两个都是非常好的nodejs框架","createdAt":1570583649245},{"id":1574,"originId":"5d9d3482ece3813ad9ba08bc","articleId":257,"userId":99,"content":"egg入门教程  网盘下载地址链接： https://pan.baidu.com/s/1YY0uoNTb0PLIhyzrZo1WRA    提取码：nv3u\r\n\r\n可以对比一下","createdAt":1570583682378},{"id":1575,"originId":"5d9d3617865a9844a301a132","articleId":257,"userId":545,"content":"[@phonegap100](/user/phonegap100)  egg 现在玩的人越来越少了，阿里自己也弄 midwayjs 了。\r\nAOP 思想在后端是趋势~  看 nest.js 增长量就明白了。\r\n现在不认为学 egg  的投入和产出成正比","createdAt":1570584087416},{"id":1576,"originId":"5d9d4f31865a9844a301a1c3","articleId":257,"userId":89,"content":"[@zuohuadong](/user/zuohuadong) 别乱说，midwayjs也是基于egg的，只是加了ts相配特性。\r\n\r\n推广不一定要踩一个的。你只需要讲nest的好就好了。判断要交给用的人。这才是好的布道者","createdAt":1570590513829},{"id":1577,"originId":"5d9d60b0865a9844a301a212","articleId":257,"userId":545,"content":"[@i5ting](/user/i5ting)  并没有踩，egg  用的人越来越少的数据来源于 npm 。\r\n也推荐了同类别的 midwayjs 框架。\r\n阿里自己对 egg 的定位是框架的框架，midway 和 蚂蚁金服的 chria  （好像叫这个） 都基于 egg 。\r\n另外，同类框架还有 loopback4","createdAt":1570594992067},{"id":1578,"originId":"5d9ea33fece3813ad9ba0cf2","articleId":257,"userId":99,"content":"[@zuohuadong](/user/zuohuadong) egg用的人很多哦， egg也是非常优秀的。开发效率 egg要比nest快一些。   nest相比egg最大的优势就是使用ts\r\n\r\n使用ts有好处其实也有坏处的。","createdAt":1570677567011},{"id":1579,"originId":"5d9edab1ece3813ad9ba0df4","articleId":257,"userId":545,"content":"[@phonegap100](/user/phonegap100) \r\nhttps://cnodejs.org/topic/5d9b4f79865a9844a3019cf1\r\n还是看数据吧，差异会越来越大。","createdAt":1570691761274},{"id":1580,"originId":"5d9f366d865a9844a301a7c2","articleId":257,"userId":716,"content":"好心动，打算看一下。原本打算spring boot。\r\n","createdAt":1570715245162},{"id":1581,"originId":"5da69c9f865a9844a301ba04","articleId":257,"userId":545,"content":"[@sinazl](/user/sinazl)  好像临时有事不来了，等官方公告确认~  希望能来吧","createdAt":1571200159626},{"id":1582,"originId":"5da915a0865a9844a301c2ba","articleId":257,"userId":545,"content":"[@phonegap100](/user/phonegap100)  nest.js 算个框架，谈不上语言~","createdAt":1571362208828},{"id":1583,"originId":"5dabcfac865a9844a301c767","articleId":257,"userId":191,"content":"[@zuohuadong](/user/zuohuadong) 你是nest中文翻译的作者吗","createdAt":1571540908865},{"id":1584,"originId":"5dacfdf0865a9844a301c857","articleId":257,"userId":545,"content":"[@xuemeifenglin](/user/xuemeifenglin) 之一~","createdAt":1571618288280},{"id":1585,"originId":"5db0fd7fece3813ad9ba3d54","articleId":257,"userId":189,"content":"阿里蚂蚁金服团队发的公告 这次ng杭州活动nest作者出席，要火的节奏啊","createdAt":1571880319797},{"id":1586,"originId":"5db3e663865a9844a301de13","articleId":257,"userId":685,"content":"[@sinazl](/user/sinazl) 不是说不来了吗","createdAt":1572071011985},{"id":1587,"originId":"5dc29677865a9844a30204e1","articleId":257,"userId":189,"content":"[@eggper](/user/eggper) 不清楚哦","createdAt":1573033591853},{"id":1588,"originId":"5dc6ae26865a9844a3020e9c","articleId":257,"userId":739,"content":"不错","createdAt":1573301798065},{"id":1589,"originId":"5dc77ac6ece3813ad9ba760b","articleId":257,"userId":740,"content":"nice","createdAt":1573354182675},{"id":1590,"originId":"5dcab598865a9844a3021826","articleId":257,"userId":685,"content":"[@sinazl](/user/sinazl) https://ng-china.org/   \r\n\r\n\r\nNestJS 是当前最火热的 NodeJS 框架，它的创始人 Kamil Mysliwiec（GDE）将亲临 ngChina 大会，主讲 NodeJS 和 Angular 是如何巧妙运用TypeScript语言的装饰器和依赖注入。","createdAt":1573565848448},{"id":1591,"originId":"5dce0c09865a9844a30221e1","articleId":257,"userId":189,"content":"[@eggper](/user/eggper) 门票好贵哦","createdAt":1573784585172},{"id":1592,"originId":"5dd498467651572e0955e19c","articleId":257,"userId":686,"content":"[@eggper](/user/eggper) 国内那些大公司用nestjs","createdAt":1574213702196},{"id":1593,"originId":"5dd8b76f34a8a07a2dab6a55","articleId":257,"userId":685,"content":"[@yibo5220](/user/yibo5220) ![1.png](//static.cnodejs.org/FqK590IV3ZbiuVb3K2KvSQ65MEou)","createdAt":1574483823707},{"id":1594,"originId":"5ddb8f3a8287937a65af6a1f","articleId":257,"userId":741,"content":"学习学习 哈哈","createdAt":1574670138403},{"id":1595,"originId":"5de77c4814ffa4125a5441c9","articleId":257,"userId":686,"content":"[@eggper](/user/eggper) 国外用的非常多哦","createdAt":1575451720688},{"id":1596,"originId":"5dedb90414ffa4125a5450da","articleId":257,"userId":686,"content":"[@sinazl](/user/sinazl) ![1.png](//static.cnodejs.org/Fh59PIVQKfz-3qbhmwGINJ55rEUn)  现在每周的下载量16万多","createdAt":1575860484417},{"id":1597,"originId":"5e1d4aa42677214209129419","articleId":257,"userId":545,"content":"[@xuemeifenglin](/user/xuemeifenglin)  中文文档有“相关资料”一栏","createdAt":1578977956721},{"id":1598,"originId":"5e1ecfcd2677214209129819","articleId":257,"userId":742,"content":"[@xuemeifenglin](/user/xuemeifenglin) 可以看下。把英文的awesome-nestjs搬过来了\r\nhttps://github.com/lvkunpeng/awesome-nestjs","createdAt":1579077581567},{"id":1599,"originId":"5e4359b0267721420912b50f","articleId":257,"userId":685,"content":"[@xuemeifenglin](/user/xuemeifenglin)   Github: https://github.com/shen100/mili\r\n\r\n\r\n首页: http://dev.golang123.com\r\n\r\n管理后台: http://dev.golang123.com/admin/\r\n\r\n用户名: mili\r\n\r\n密码: 123456","createdAt":1581472176755},{"id":1600,"originId":"5e494d28267721420912b9b5","articleId":257,"userId":545,"content":"楼上广告该清理下  [@alsotang](/user/alsotang)","createdAt":1581862184937},{"id":1601,"originId":"5e49f600267721420912b9f5","articleId":257,"userId":18,"content":"[@zuohuadong](/user/zuohuadong) 已经屏蔽","createdAt":1581905408770},{"id":1602,"originId":"5e7764db64259617c49a2428","articleId":257,"userId":189,"content":"[@yibo5220](/user/yibo5220) 看到了","createdAt":1584882907471},{"id":1603,"originId":"5ecc8323a87fc8583363e15b","articleId":257,"userId":191,"content":"[@zuohuadong](/user/zuohuadong) 好的 谢谢老板","createdAt":1590461219771},{"id":1604,"originId":"5ef1ac96472c7975b04b7101","articleId":257,"userId":528,"content":"Nestjs 加 Angular 实现真正的 TS 前后端统一。","createdAt":1592896662578},{"id":1605,"originId":"5f110de84b61050e36e7adb2","articleId":257,"userId":99,"content":"[@Hanggi](/user/Hanggi) 希望国内也用的多一些  目前国外用的多","createdAt":1594953192827},{"id":1606,"originId":"5f113c264b61050e36e7ae42","articleId":257,"userId":743,"content":"nestjs框架导出Excel, 可以用 ejsExcel","createdAt":1594965030689},{"id":1607,"originId":"5f471a63e8a599751bb5131f","articleId":257,"userId":528,"content":"[@xuemeifenglin](/user/xuemeifenglin) 不是很像，是 Nestjs 把 Angular 那套照搬过来了，虽然不完全一致。\r\n\r\nAngular 国内推广一直不好，但其实也很优秀，目前也非常稳定完整。\r\n\r\n喜欢 Nestjs 的话可以尝试 Angular，会有另一番体验。","createdAt":1598495331504},{"id":1608,"originId":"5f47b591e8a599751bb514a1","articleId":257,"userId":99,"content":"[@Hanggi](/user/Hanggi) 说的对","createdAt":1598535057434},{"id":1609,"originId":"5f55966bd22a6b1d622c7ea8","articleId":257,"userId":191,"content":"[@Hanggi](/user/Hanggi) Nest语法和Angular很像的哦","createdAt":1599444587431},{"id":1610,"originId":"5f557e22c1c67a7dd9afd7ed","articleId":258,"userId":22,"content":"国内的话就不要选 angular 了。react 或 vue 都可","createdAt":1599438370484},{"id":1611,"originId":"5f51f39731fc7a1d8ad65e3c","articleId":260,"userId":510,"content":"**大佬要锤人  不得把大锤亮出来嘛 把人锤醒啊 只是哭晕在撤所的话 我也行啊  嘤嘤嘤 我晕了**","createdAt":1599206295329},{"id":1612,"originId":"5f51f5ead22a6b1d622c7bc8","articleId":260,"userId":393,"content":"[@zhsonga](/user/zhsonga) 不理解你说的大锤是什么意思，这也不需要展开讲讲c++为什么能反驳“Node仅仅对ES标准进行了实现”吧，另外官方Cluster、egg-clusrer、pm2都是为了榨干cpu，提升多核利用率，赋予Node多线程、多进程编程能力，这也没必要展开讲吧。直白点，论点就是错的，简单的论据就可以反驳了","createdAt":1599206890643},{"id":1613,"originId":"5f51f804d22a6b1d622c7bdd","articleId":260,"userId":22,"content":"我看到这个 nodepad++ 一下子以为这是 10 年前某人的读书笔记呢","createdAt":1599207428754},{"id":1614,"originId":"5f51f84731fc7a1d8ad65e5a","articleId":260,"userId":393,"content":"[@justjavac](/user/justjavac) 是的有内味儿了哈哈哈","createdAt":1599207495948},{"id":1615,"originId":"5f51f87431fc7a1d8ad65e60","articleId":260,"userId":510,"content":"[@PatrickStarCat](/user/PatrickStarCat) 1.大锤就是你的理解啊  2. 简单的论据就可以反驳的话  那根据公式做题也一定能得出正确答案？  不然写这玩意只为浪费大伙宝贵的摸鱼时间嘛","createdAt":1599207540912},{"id":1616,"originId":"5f51fc3f31fc7a1d8ad65e80","articleId":260,"userId":393,"content":"[@zhsonga](/user/zhsonga) 其实这两个🚽，我都是有简单的解释的，还是不明白这为什么需要深入反驳T.T。\r\n1. Node编写服务器都是单线程的服务器\r\n我已经举例知名度非常高的三个解决方案了。你说不能做多线程(应该是多进程)，抛开pm2、egg-cluster，单说官方cluster就在那儿放着，还深入解释啥。别人说Node不能进行文件读写，最好的解释不就是劝他读文件读写文档吗哈哈哈\r\n\r\n2. Node仅仅对ES标准进行了实现，所以在Node中不包含DOM、BOM\r\n这个已经简单解释了一下，确实不够深入。我觉得原文解释非常不严谨，存在误导，借用大佬的几张图来解释Node、JavaScript、C++的关系\r\n![image.png](//static.cnodejs.org/FmTgQQxrokWucL1P4YYuxRA4UqZH)\r\n\r\n![image.png](//static.cnodejs.org/FlTz8lPjLXTO_Le3tXhjVLorOzII)\r\n\r\n![image.png](//static.cnodejs.org/Fm-P5KW27SdYazZKaoaaB_a82O6q)\r\n","createdAt":1599208511970},{"id":1617,"originId":"5f51ff3c31fc7a1d8ad65e90","articleId":260,"userId":393,"content":"[@PatrickStarCat](/user/PatrickStarCat) 最后，我初衷很大上是diss这种风气而已～","createdAt":1599209276766},{"id":1618,"originId":"5f52087931fc7a1d8ad65ec5","articleId":260,"userId":98,"content":"实际上国人大部分写的书和做的教程都不怎么样甚至很烂，每个人有每个人的理解，其实知道他是怎么一回事别人问的时候能说两句出来就行了\r\n其实这个砖家说的东西对新手来说一点毛病都没有，每一个点他都用最简单的一句话带过，避免了新手钻牛角尖，如果深入去讲里面的东西多着呢","createdAt":1599211641347},{"id":1619,"originId":"5f520ab031fc7a1d8ad65ed7","articleId":260,"userId":111,"content":"cluster就是多进程模式， 只不过在面向框架编程的模式下 很多解决方案内置了，一般人接触不到，只要关心npm install  / npm start   怎么crud  从数据库把数据搬到页面上，改成老板看起来好看的样子就行了  ，而且是996搬运 这个计划不仅内容错了，连名字都写错了，应该叫 <<华为996搬码工计划  >>","createdAt":1599212208198},{"id":1620,"originId":"5f520be4d22a6b1d622c7c4f","articleId":260,"userId":98,"content":"[@yakczh](/user/yakczh) 华为996复制粘贴员计划","createdAt":1599212516377},{"id":1621,"originId":"5ddb0e0d34a8a07a2dab6d48","articleId":261,"userId":545,"content":"adonis  后续版本用 ts 重构不错~\r\n很早之前给adonis 作者提过建议，作者意思是： ts 并非标准。 于是我们后来选择了 nest.js ，结果 nest.js 后来者居上了。\r\n有点可惜了","createdAt":1574637069312},{"id":1622,"originId":"5ddb6e918287937a65af6993","articleId":261,"userId":746,"content":"[@zuohuadong](/user/zuohuadong) 作者说的对，ts并不是标准","createdAt":1574661777381},{"id":1623,"originId":"5ddb93df8287937a65af6a4d","articleId":261,"userId":545,"content":"[@AdleyTales](/user/AdleyTales) 但已经是node大项目，事实上的标准了。","createdAt":1574671327140},{"id":1624,"originId":"5f51cea4d22a6b1d622c7b43","articleId":261,"userId":747,"content":"[@zuohuadong](/user/zuohuadong) 两边都没错，ts并非标准的结论没人可以否认，nestjs的选择和思路的优秀也是大家有目共睹。","createdAt":1599196836423},{"id":1625,"originId":"5f51cef331fc7a1d8ad65d9e","articleId":261,"userId":747,"content":"[@zuohuadong](/user/zuohuadong) 一切标准都要看说话的人是谁，如果微软维护所有js运行时环境，然后官宣ts定制标准，那他就是标准。目前看来ts是优秀的解决的js在大型项目上维护性的问题，但是离标准还远得很，标配差不多。","createdAt":1599196915059},{"id":1626,"originId":"5f51a93c31fc7a1d8ad65d5b","articleId":263,"userId":135,"content":"你是说界面编排可视化吧?   现在的ui组件很多啊.\r\n有见过提供这种服务的网站,感觉适合个人站 ","createdAt":1599187260343},{"id":1627,"originId":"5d17137334bca667bc6e3d9a","articleId":266,"userId":743,"content":"你应该怪React的插件,傻不傻啊?","createdAt":1561793395952},{"id":1628,"originId":"5d1713c134bca667bc6e3d9e","articleId":266,"userId":743,"content":"[@151263](/user/151263) react的语法根本不是标准的typescript语法, 之所以能渲染, 完全依赖于react的插件","createdAt":1561793473720},{"id":1629,"originId":"5d1721a734bca667bc6e3dd0","articleId":266,"userId":545,"content":"对 typescript 支持最好的是  angular ~","createdAt":1561797031713},{"id":1630,"originId":"5d17250634bca667bc6e3dfa","articleId":266,"userId":750,"content":"在项目根目录 新建一个 typings.d.ts  在里面 写上  declare module \"*.glsl\"      这样应该就可以了","createdAt":1561797894085},{"id":1631,"originId":"5d177949cdb1f967c1576f33","articleId":266,"userId":749,"content":"[@cl1107](/user/cl1107) 这个方式我试过了，没用","createdAt":1561819465824},{"id":1632,"originId":"5d177a5f34bca667bc6e3eeb","articleId":266,"userId":749,"content":"[@cl1107](/user/cl1107) 问题不在于typescript无法识别glsl文件，而是在于glsl中没有export出一个东西来，所以直接import是不会报错的，而import ... from ...会报错，同样的问题也出现在css文件的引入","createdAt":1561819743014},{"id":1633,"originId":"5d182af6cdb1f967c1576fab","articleId":266,"userId":751,"content":".d.ts 可解","createdAt":1561864950472},{"id":1634,"originId":"5d182cb0cdb1f967c1576fb9","articleId":266,"userId":752,"content":"奇瓦拉格的头像跟你真配。不会 ts 就别用就好了，自找麻烦。 肯定没初始化 tsconfig.json 运行 `tsc --init` ","createdAt":1561865392046},{"id":1635,"originId":"5d1958dd34bca667bc6e4169","articleId":266,"userId":22,"content":"题主把锅甩给 vscode，评论区把锅甩给 react，其实是题主不会正确配置 ts 而已","createdAt":1561942237912},{"id":1636,"originId":"5d195d40cdb1f967c15771c4","articleId":266,"userId":562,"content":"应该先找下资料然后再喷 不然如果是自己原因很丢人的","createdAt":1561943360024},{"id":1637,"originId":"5d196bbacdb1f967c157728c","articleId":266,"userId":753,"content":"不行","createdAt":1561947066845},{"id":1638,"originId":"5d197429cdb1f967c1577318","articleId":266,"userId":749,"content":"搞笑，我代码正常运行，webgl也能正常运行，你和我说是ts的配置有问题？我问题在于我的项目正常运行了，而vscode却提示找不到模块，是vscode出问题了，而不是我的ts出问题了。还我没找过资料，劳资google了一早上的解决方案。那我请问你遇到过这种问题吗，你如果知道解决方案请说出来啊？嘲讽起人来倒是一套一套的，难道看不出来我是在开vscode的玩笑嘛，要是vscode真的垃圾我干嘛还用？[@hewentaowx](/user/hewentaowx) [@MiYogurt](/user/MiYogurt) ","createdAt":1561949225412},{"id":1639,"originId":"5d1978e434bca667bc6e42d0","articleId":266,"userId":562,"content":"哈哈哈哈 你随意哈 你怎么不去喷jjc大佬呢 【手动狗头】","createdAt":1561950436438},{"id":1640,"originId":"5d19b36234bca667bc6e440e","articleId":266,"userId":22,"content":"[@hewentaowx](/user/hewentaowx) 不要挑事情，我只是路过 【手动狗头】","createdAt":1561965410880},{"id":1641,"originId":"5d1acea1cdb1f967c157790d","articleId":266,"userId":754,"content":"![Snipaste_2019-07-02_11-23-48.png](//static.cnodejs.org/FpQ86AIkPF4nmNFsMX8MQjHtDSqA)\r\n\r\n然而确实是\r\n> 其实是题主不会正确配置 ts 而已\r\n","createdAt":1562037921622},{"id":1642,"originId":"5d1acefc34bca667bc6e499b","articleId":266,"userId":754,"content":"![Snipaste_2019-07-02_11-26-38.png](//static.cnodejs.org/FvkxYa77R2uEHcTbayNc_dvxTWRV)","createdAt":1562038012361},{"id":1643,"originId":"5d21b161ad75d374b58bced6","articleId":266,"userId":752,"content":"我不知道你怎么看出来的嘲讽，我只是觉得很喜感而已。你觉得你的头像是一种嘲讽，那你为什么要用呢？叫你别用 ts 是因为你不会用，所以就别自找麻烦，你自己要去找虐，然后跑到论坛来满口 劳资、wdnmd 这样真的好么，写代码那么急躁。\r\n\r\n而且我也给出了答案，你知不知道问问题的一大，大忌就是让回答问题的人去猜？你说你做了 “*.gsl” 那么就说明没有正确的读取到 d.ts 文件，没有读到 d.ts 那说明 vscode 没有找到 tsconfig 配置文件，这有什么问题么？ \r\n\r\n给你回答，你应该感谢，假如你对想要帮助你的人恶语相向，我就只能呵呵了，话不说重，自己理解。","createdAt":1562489185476},{"id":1644,"originId":"5d22b02c71951f750ccb9442","articleId":266,"userId":755,"content":"[@liaoyinglong](/user/liaoyinglong) 感谢","createdAt":1562554412918},{"id":1645,"originId":"5f4e77cf68156574e6e6de81","articleId":266,"userId":756,"content":"最后怎么解决的呢？","createdAt":1598977999040},{"id":1646,"originId":"56836528b9de25e81e01c212","articleId":267,"userId":758,"content":"支持","createdAt":1451451688226},{"id":1647,"originId":"5683656bba9915191f3d8adf","articleId":267,"userId":18,"content":"屌炸天，luin 大神","createdAt":1451451755337},{"id":1648,"originId":"568369c2b9de25e81e01c217","articleId":267,"userId":759,"content":"掉咋天~","createdAt":1451452866383},{"id":1649,"originId":"56836b9bb9de25e81e01c219","articleId":267,"userId":205,"content":"啊~强势围观~","createdAt":1451453339892},{"id":1650,"originId":"56836bc7952147b71ea371b0","articleId":267,"userId":470,"content":"吊炸天  能合成一个module吗，这样岂不更完美","createdAt":1451453383148},{"id":1651,"originId":"5683708cba9915191f3d8ae2","articleId":267,"userId":273,"content":"叼叼叼！<br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1451454604070},{"id":1652,"originId":"5683714d952147b71ea371b4","articleId":267,"userId":760,"content":"厉害！","createdAt":1451454797596},{"id":1653,"originId":"568377fd952147b71ea371b8","articleId":267,"userId":89,"content":"棒棒哒","createdAt":1451456509244},{"id":1654,"originId":"56837a14952147b71ea371bc","articleId":267,"userId":703,"content":"我不管，，谁大腿粗我抱谁~~  ","createdAt":1451457044985},{"id":1655,"originId":"56838f2559ec59521f2f1741","articleId":267,"userId":761,"content":"Watch","createdAt":1451462437407},{"id":1656,"originId":"5683ab8659ec59521f2f1751","articleId":267,"userId":757,"content":"[@blackjack](/user/blackjack) 会逐步合并成一个 module。现在两个模块的 API 虽然大部分一样，但是还是有一些地方不兼容，所以合并的话要一步步来。","createdAt":1451469702857},{"id":1657,"originId":"5683be7159ec59521f2f1753","articleId":267,"userId":762,"content":"前排支持.楼主大名,如雷贯耳","createdAt":1451474545761},{"id":1658,"originId":"5f4e56d868156574e6e6de6d","articleId":267,"userId":763,"content":"谢谢分享！","createdAt":1598969560700},{"id":1659,"originId":"5ab31808f5dfc27d7ad98a68","articleId":268,"userId":22,"content":"一楼","createdAt":1521686536771},{"id":1660,"originId":"5ab3199319b2e3db1895a026","articleId":268,"userId":764,"content":"说好的三月底出书呢…\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1521686931046},{"id":1661,"originId":"5ab31a83f5dfc27d7ad98a6f","articleId":268,"userId":765,"content":"nb","createdAt":1521687171366},{"id":1662,"originId":"5ab31b0ece4a27f867527335","articleId":268,"userId":89,"content":"[@Alexerx](/user/Alexerx) 等等等","createdAt":1521687310639},{"id":1663,"originId":"5ab31df4e7b166bb7b9eccfc","articleId":268,"userId":764,"content":"还得多久啊\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1521688052284},{"id":1664,"originId":"5ab31e03e7b166bb7b9eccfe","articleId":268,"userId":764,"content":"[@i5ting](/user/i5ting) 还得多久啊\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1521688067246},{"id":1665,"originId":"5ab31f9f28441024b73f5c23","articleId":268,"userId":766,"content":"👍赞","createdAt":1521688479342},{"id":1666,"originId":"5ab34528e7b166bb7b9ecd08","articleId":268,"userId":767,"content":"感谢！受益非浅...","createdAt":1521698088837},{"id":1667,"originId":"5ab35c96e7b166bb7b9ecd17","articleId":268,"userId":768,"content":"支持 狼叔！ 相对其他技术栈，分享node学习的人群实在太少了。","createdAt":1521704086821},{"id":1668,"originId":"5ab35d2819b2e3db1895a032","articleId":268,"userId":32,"content":"这个要好好的过一遍，检查下自己达到什么水平了","createdAt":1521704232059},{"id":1669,"originId":"5ab37f3ef5dfc27d7ad98aa3","articleId":268,"userId":769,"content":"下午特别特别燥，看完平静了很多，受益很多，感谢。\r\n另外等书 ing..","createdAt":1521712958463},{"id":1670,"originId":"5ab390e3ce4a27f86752735b","articleId":268,"userId":633,"content":"支持！","createdAt":1521717475622},{"id":1671,"originId":"5ab39e39ce4a27f86752735d","articleId":268,"userId":770,"content":"才在知乎上买过，现在公开了😅","createdAt":1521720889324},{"id":1672,"originId":"5ab3a8bdf5dfc27d7ad98ab1","articleId":268,"userId":89,"content":"[@zlmica](/user/zlmica) 语音版和现场发挥的，问题回复，是这篇文章里没有的，也还好，大家喜欢就买，不喜欢可以7日退的。希望能够造福社区","createdAt":1521723581309},{"id":1673,"originId":"5ab3c505f5dfc27d7ad98abb","articleId":268,"userId":771,"content":"说好的三月底出书呢…","createdAt":1521730821931},{"id":1674,"originId":"5ab3ca38e7b166bb7b9ecd46","articleId":268,"userId":772,"content":"感谢，目前还在学node中，","createdAt":1521732152912},{"id":1675,"originId":"5ab3eb32e7b166bb7b9ecd4f","articleId":268,"userId":770,"content":"[@i5ting](/user/i5ting) 嗯，能听到狼叔声音，不后悔，期待新书，一定学好node\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1521740594636},{"id":1676,"originId":"5ab46dbcce4a27f867527387","articleId":268,"userId":773,"content":"[@i5ting](/user/i5ting) 我也在我们公司力推eggjs的实践，但是内部还存在诸多的质疑，更多是作为Backend For Frontend这么一个API层面的实践，也在积极探索新业务的全栈式快速交付的实践，想咨询一下狼叔，eggjs在蚂蚁金服的实践方案是怎样的？能详细介绍一下吗？","createdAt":1521774012698},{"id":1677,"originId":"5abcc33c52d7d3a8698a492d","articleId":268,"userId":774,"content":"支持，要好好打磨一下基础了。","createdAt":1522320188823},{"id":1678,"originId":"5abdb5a4679ac2ad2c49298d","articleId":268,"userId":775,"content":"这个要顶","createdAt":1522382244786},{"id":1679,"originId":"5abeeee052d7d3a8698a49ba","articleId":268,"userId":776,"content":"支持，看完获益匪浅，感谢","createdAt":1522462432183},{"id":1680,"originId":"5abfb492679ac2ad2c492a0c","articleId":268,"userId":59,"content":"想问一个问题，如何快速接手业务，并出色的完成业务功能需求？","createdAt":1522513042096},{"id":1681,"originId":"5ac04de252d7d3a8698a49ef","articleId":268,"userId":777,"content":"这个必须顶，谢谢","createdAt":1522552290717},{"id":1682,"originId":"5ac1cf2596f344940fbbac48","articleId":268,"userId":89,"content":"[@liangtongzhuo](/user/liangtongzhuo) \r\n\r\n这是个双重标准的问题，你的技术和业务都要非常熟练才能快速接手。如果少一个，那么你就要靠超强的执行力，不断的去推动和试错。如果结果可预期就可以","createdAt":1522650917732},{"id":1683,"originId":"5ac2290e37f5d1510f57c83b","articleId":268,"userId":259,"content":"狼叔写得好好哦， 给个赞！！！辛苦狼叔了。","createdAt":1522673934913},{"id":1684,"originId":"5ac240710ab0448f0fe3f808","articleId":268,"userId":59,"content":"[@i5ting](/user/i5ting) 谢谢，你的回答。","createdAt":1522679921308},{"id":1685,"originId":"5ac32c3237f5d1510f57c86e","articleId":268,"userId":778,"content":"点个赞支持\n来自 [牛读](http://reader.liteneo.com/)","createdAt":1522740274555},{"id":1686,"originId":"5ac461b896f344940fbbad25","articleId":268,"userId":779,"content":"我学Nodejs的原因就是在公司看那些后台的整天拿个java牛气哄哄的！！！","createdAt":1522819512221},{"id":1687,"originId":"5acb48172c4e775a29952a77","articleId":268,"userId":780,"content":"不知为何看得我热泪盈眶。","createdAt":1523271703008},{"id":1688,"originId":"5acb6bf3729b245529cb592d","articleId":268,"userId":781,"content":"等书等书","createdAt":1523280883987},{"id":1689,"originId":"5acc21bce34737560fccabcb","articleId":268,"userId":782,"content":"看完你推荐的node in action和node api正好等到狼叔的书","createdAt":1523327420724},{"id":1690,"originId":"5acc5a8a099b154dbeba005e","articleId":268,"userId":783,"content":"看完，受益匪浅，希望有一天自己也能学成归来，造福社区。[@i5ting](/user/i5ting)向您学习。加油啊。","createdAt":1523341962314},{"id":1691,"originId":"5acc807ceab5214db5ad0332","articleId":268,"userId":784,"content":"受益匪浅！狼叔您就是我们的学习榜样，向您学习，尽全力早日修成正果！谢谢您的分享！","createdAt":1523351676676},{"id":1692,"originId":"5acd96ffe34737560fccabf5","articleId":268,"userId":785,"content":"mark  \n  [【来自酷炫的小程序】](https://github.com/FourLeafClover/wxcnode)","createdAt":1523422975208},{"id":1693,"originId":"5acddb29a7d228c16b9869ce","articleId":268,"userId":679,"content":"我就是来看书的","createdAt":1523440425569},{"id":1694,"originId":"5ad1f569464b1bfa6b42514d","articleId":268,"userId":786,"content":"厉害厉害，懒了好长一段时间 ，看了你的文章，突然又来了学习兴趣","createdAt":1523709289345},{"id":1695,"originId":"5ae07b06c5debbc0086fc91b","articleId":268,"userId":787,"content":"在期待 《更了不起的 Node.js 》","createdAt":1524660998383},{"id":1696,"originId":"5ae6be4e02591040485ba976","articleId":268,"userId":650,"content":"说的真好呀，感谢狼叔分享精神","createdAt":1525071438219},{"id":1697,"originId":"5ae917deadea947348e75f93","articleId":268,"userId":788,"content":"新书哪里入啊","createdAt":1525225438423},{"id":1698,"originId":"5ae9c1741b02288048bd0bcd","articleId":268,"userId":424,"content":"好丰富的内容，赞","createdAt":1525268852631},{"id":1699,"originId":"5aec32bd02591040485baaad","articleId":268,"userId":789,"content":"都是干货，给狼叔点赞。期待《更了不起的Node.js》","createdAt":1525428925488},{"id":1700,"originId":"5aef16821b02288048bd0ced","articleId":268,"userId":506,"content":"啥时候出书啊 这都五月了","createdAt":1525618306381},{"id":1701,"originId":"5af50206adea947348e76305","articleId":268,"userId":790,"content":"我在看这套教程学着，希望能学有所成\r\n[http://www.sucaihuo.com/video/135.html](http://www.sucaihuo.com/video/135.html)","createdAt":1526006278196},{"id":1702,"originId":"5af513091b02288048bd0f11","articleId":268,"userId":152,"content":"干货啊。","createdAt":1526010633833},{"id":1703,"originId":"5af558940a36e5312d6ecfbe","articleId":268,"userId":791,"content":"受益匪浅！帮我在前端路上找到了方向，谢谢","createdAt":1526028436334},{"id":1704,"originId":"5af588fc0a36e5312d6ecfdd","articleId":268,"userId":792,"content":"《更了不起的 Node.js 》哪里能买吼？我先预定一本哈哈","createdAt":1526040828033},{"id":1705,"originId":"5afe41bd0a36e5312d6ed272","articleId":268,"userId":793,"content":"看得我热血沸腾，以后迷茫的时候拿出来拜读","createdAt":1526612413951},{"id":1706,"originId":"5b07cf0429e6e510415b2489","articleId":268,"userId":794,"content":"厉害了","createdAt":1527238404793},{"id":1707,"originId":"5b0c33495cd02be640900f6b","articleId":268,"userId":795,"content":"mark 狼叔辛苦\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1527526217935},{"id":1708,"originId":"5b0cdc6529e6e510415b258b","articleId":268,"userId":796,"content":"![image.png](//static.cnodejs.org/FmsKKwWr4ObrzT9xyOP6beR8G0M6)\r\n还真是这样，认识的，膜拜的大佬都去了阿里😂","createdAt":1527569509727},{"id":1709,"originId":"5b0e412e5cd02be640900fae","articleId":268,"userId":797,"content":"赞赞赞","createdAt":1527660846277},{"id":1710,"originId":"5b10b6df8a4f51e140d94437","articleId":268,"userId":798,"content":"666 非常6","createdAt":1527822047600},{"id":1711,"originId":"5b1170305cd02be6409010d5","articleId":268,"userId":799,"content":"干货满满，受教了。","createdAt":1527869488427},{"id":1712,"originId":"5b15019f5cd02be64090115b","articleId":268,"userId":518,"content":"羡慕啊 阿里职业生涯到此已经足够了，进可攻退可守，也算另一种自由！ [ /大拇指 ]","createdAt":1528103327413},{"id":1713,"originId":"5b17dec257137f22415c49c8","articleId":268,"userId":800,"content":"书在哪里买呀😄\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1528291010509},{"id":1714,"originId":"5b18a3df57137f22415c49ee","articleId":268,"userId":801,"content":"666 非常详尽，mark。再推荐一些[Node.js学习资料](http://awehunt.com/?tnid=5b0024041cff0c17b76b5719)，大家一起学。\r\n\r\n来自✨ [Node.js开源项目精选](http://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1528341471199},{"id":1715,"originId":"5b2316bd8a4f51e140d94851","articleId":268,"userId":790,"content":"狼叔多来点干货","createdAt":1529026237527},{"id":1716,"originId":"5b23da9057137f22415c4c66","articleId":268,"userId":802,"content":"我也是服了，知乎今天才买过。这里就公开了。！！！！","createdAt":1529076368963},{"id":1717,"originId":"5b28db4457137f22415c4d00","articleId":268,"userId":803,"content":"我来膜拜 ","createdAt":1529404228291},{"id":1718,"originId":"5b2f62b05c8f1ea723a569da","articleId":268,"userId":804,"content":"狼叔出品","createdAt":1529832112183},{"id":1719,"originId":"5b36f815a1308bf723aa3a9d","articleId":268,"userId":805,"content":"找时间好好看看","createdAt":1530329109016},{"id":1720,"originId":"5b375244ac8bc1e1241144fc","articleId":268,"userId":806,"content":"赞赞赞","createdAt":1530352196915},{"id":1721,"originId":"5b43685013ca2fe569fb9234","articleId":268,"userId":805,"content":"终于大概看了下，有所受益","createdAt":1531144272005},{"id":1722,"originId":"5b443497fb9e84ec69cc1959","articleId":268,"userId":807,"content":"[@vendar](/user/vendar) 邀请码恩","createdAt":1531196567435},{"id":1723,"originId":"5b44660135342ab0690613f3","articleId":268,"userId":801,"content":"[@walter211](/user/walter211) https://awehunt.com 的邀请码？目前会员只针对有经验的编辑人员开放，里面的内容都是经过精心挑选和编辑的，不注册也可以浏览。下个月会有一批邀请码针对普通开发者发放，如果想体验会员功能可以发邮件到 vita(at)awehunt.com，注明来自“cnodejs”即可，一旦有新邀请码会第一时间通过邮件发送。\r\n\r\n来自✨ [Node.js开源项目精选](https://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1531209217067},{"id":1724,"originId":"5b44c09313ca2fe569fb928c","articleId":268,"userId":808,"content":"谢谢狼叔。\r\n前不久狼叔给内推的面试掉了。没关系，好好学习，去阿里的路上！","createdAt":1531232403026},{"id":1725,"originId":"5b4ca702fb9e84ec69cc1af2","articleId":268,"userId":798,"content":"目测要火","createdAt":1531750146795},{"id":1726,"originId":"5b56800cd7c5253329cbdf51","articleId":268,"userId":790,"content":"666","createdAt":1532395532101},{"id":1727,"originId":"5b5f1f2d58db3ccf66a45081","articleId":268,"userId":809,"content":"好长，今天没时间看，改天看看","createdAt":1532960557557},{"id":1728,"originId":"5b6c4eb458db3ccf66a45376","articleId":268,"userId":804,"content":"终于看完，学到了点东西，谢谢狼叔","createdAt":1533824692525},{"id":1729,"originId":"5b78025d632c7f422e5b7f87","articleId":268,"userId":810,"content":"可以执行","createdAt":1534591581651},{"id":1730,"originId":"5b7c2eb5a210553a0cde2ae7","articleId":268,"userId":811,"content":"mark","createdAt":1534865077420},{"id":1731,"originId":"5b86753afad9359e2e8312e0","articleId":268,"userId":812,"content":"赞👍\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1535538490626},{"id":1732,"originId":"5b9e876437a6965f59051a10","articleId":268,"userId":813,"content":"期待新书\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1537116004027},{"id":1733,"originId":"5ba5b8759545eaf107b9c54d","articleId":268,"userId":109,"content":"> 4）终极解决方案：Async/Await\r\n\r\n后面貌似还有个排队的 rxjs ","createdAt":1537587317602},{"id":1734,"originId":"5ba7a3f19545eaf107b9c583","articleId":268,"userId":814,"content":"vuejs和nodejs区别不是很大吧？狼叔\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1537713137890},{"id":1735,"originId":"5ba7bd418f5b0c1c59ea10e8","articleId":268,"userId":109,"content":"[@javacodecreeks](/user/javacodecreeks)  雷锋和塔的关系","createdAt":1537719617567},{"id":1736,"originId":"5badd22915e4fd1923f48b33","articleId":268,"userId":815,"content":"感谢狼叔，受益匪浅！","createdAt":1538118185184},{"id":1737,"originId":"5bba8e5537a6965f59051f7d","articleId":268,"userId":816,"content":"感谢狼叔，我是瑟瑟发抖的看完全篇的，我想，我似乎发现了方向。\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1538952789449},{"id":1738,"originId":"5bc0b5f89545eaf107b9ca70","articleId":268,"userId":251,"content":"结束语说的太棒了\r\n\r\n来自 [娇羞的CNode社区处女作客户端](https://reviving-pain.github.io/dist/#/cnodeCommunity/cnodejsTopics)","createdAt":1539356152351},{"id":1739,"originId":"5bc9d01615e4fd1923f490f8","articleId":268,"userId":817,"content":"“为有牺牲多壮志，敢教日月换新天。”\t静心沉思，向内归因。","createdAt":1539952662545},{"id":1740,"originId":"5bcada5f9545eaf107b9ccf5","articleId":268,"userId":818,"content":"没有什么是一顿饭解决不了的，不行就二顿...\r\n😂","createdAt":1540020831873},{"id":1741,"originId":"5bd2718b89665c365e9442e0","articleId":268,"userId":819,"content":"喜欢狼叔那句 \"少抱怨 多思考  未来更美好\" 👍\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1540518283794},{"id":1742,"originId":"5bdd0b3d646a05745b7b7bc2","articleId":268,"userId":805,"content":"mark","createdAt":1541212989630},{"id":1743,"originId":"5be3cd0421d75b74609f55db","articleId":268,"userId":820,"content":"年末了～。～","createdAt":1541655812499},{"id":1744,"originId":"5bebcc6ca05b0e0ae443b075","articleId":268,"userId":724,"content":"mark，【闲时要有吃紧的心思，忙里要有偷闲的乐趣】~","createdAt":1542179948659},{"id":1745,"originId":"5bee8244a05b0e0ae443beb0","articleId":268,"userId":821,"content":"赞","createdAt":1542357572772},{"id":1746,"originId":"5c028692887c5864fafe1886","articleId":268,"userId":809,"content":"这楼层很高","createdAt":1543669394930},{"id":1747,"originId":"5c02c43d39c0af64fddb7bc1","articleId":268,"userId":822,"content":"看了一个小时，收获太多。但最重要的是坚定了我学好node的信心 !\r\n少抱怨，多思考，未来更美好 。","createdAt":1543685181548},{"id":1748,"originId":"5c1510bbf3d48d2397c11960","articleId":268,"userId":805,"content":"[@IdenPin](/user/IdenPin) 一个小时就很多收获,天赋不错啊","createdAt":1544884411064},{"id":1749,"originId":"5c1c9c9a3898674067a76d35","articleId":268,"userId":823,"content":"没想到狼叔也是前qunar员工，正打算学node，发现狼叔的知乎live内容太好了，讲的非常详细，感谢~\r\n\r\n学习到了这种做事的风格","createdAt":1545378970094},{"id":1750,"originId":"5c1f43373898674067a774f4","articleId":268,"userId":824,"content":"Mark","createdAt":1545552695510},{"id":1751,"originId":"5c32beca5bf06c5e7e3f1fd7","articleId":268,"userId":825,"content":"👍","createdAt":1546829514007},{"id":1752,"originId":"5c3bf293a4d44449266b0719","articleId":268,"userId":826,"content":"日常催书哈哈","createdAt":1547432595728},{"id":1753,"originId":"5c3c1fa0a4d44449266b0926","articleId":268,"userId":827,"content":"[@mintsoda](/user/mintsoda) 18年3月到现在 。。。","createdAt":1547444128444},{"id":1754,"originId":"5c6385daf53f161dbaeb316a","articleId":268,"userId":828,"content":"[@wuyaoftd](/user/wuyaoftd) 哈哈哈，快生日了","createdAt":1550026202970},{"id":1755,"originId":"5c668955f53f161dbaeb410d","articleId":268,"userId":829,"content":"很受用，慕拜大佬！","createdAt":1550223701783},{"id":1756,"originId":"5ca346456c1de62dce467154","articleId":268,"userId":830,"content":"学习了","createdAt":1554204229243},{"id":1757,"originId":"5cb7704137faec0ce1d030a2","articleId":268,"userId":831,"content":"听君一席话，胜过半天查资料\r\n\r\n看君一段文，让我少了很多抬头纹","createdAt":1555525697942},{"id":1758,"originId":"5cc1849fa86ae80ce64b4046","articleId":268,"userId":832,"content":"受益匪浅，ありがとう ，入行前端1年多了，很害怕技术停滞，很害怕业务繁重的，不停的被赶着应付需求，3年工作经验当一年使用，我自己也是学的很乱，啥都学，react，vue，vue源码，webpack，webpack源码，koa和koa源码，还要应付面试的刁钻问题，手写个promise，手写个virtual dom，偶尔还学学three.js，vscode插件，google插件，elecron，听说grpc要取代rest,vue3.0要支持ts，react又重写了fiber增加了hooks，哭晕过去了，关键是学了这么多，手写不出正则连面试机会也没有","createdAt":1556186271029},{"id":1759,"originId":"5cc190e1a86ae80ce64b4090","articleId":268,"userId":546,"content":"师者，授业解惑！非常感谢分享，也证实了内心想法和狼叔还是比较一致的，希望有一天阿里相见，加油💪！","createdAt":1556189409491},{"id":1760,"originId":"5cc6f20c05ae566f637fda2e","articleId":268,"userId":833,"content":"狼叔，我刚才读完了你的学习nodejs，这文章是我很早之前就看到了，一直没有时间读，看到你开心的工作，实在羡慕，我曾问过你学习东西进度太快了，前端还没摸明白就去学K8S，这样我学习起来非常吃力，你告诉我‘广积粮、高筑墙、缓称王’，学习K8S的过程我并不开心，不如在做node和前端时快乐，那时我可以在吃饭、睡觉前都在想功能应该怎么实现，现在只想逃避K8S的问题，我想前端和Node还是我的主要学习方向，K8S只能算是加分项。","createdAt":1556541964302},{"id":1761,"originId":"5cc6f39d05ae566f637fda37","articleId":268,"userId":89,"content":"[@zheng199512](/user/zheng199512) 学习都是厚积薄发的，通常前面都不会开心的，未来还是前端会以faas为主，所以了解k8s，service mesh这些，对于理解系统底层是非常有帮助的，慢慢来","createdAt":1556542365471},{"id":1762,"originId":"5cfdfc4b95fcc914aa267519","articleId":268,"userId":834,"content":"“一次只做1件事儿，尽力做到极致”让我联想到unix编程艺术里面的所讲的解决一个定义明确的问题如diff、grep这样的程序","createdAt":1560149067152},{"id":1763,"originId":"5d7a297ed50f572345913f8d","articleId":268,"userId":835,"content":"干货慢慢，期待狼叔大作","createdAt":1568287102505},{"id":1764,"originId":"5dad68d1865a9844a301caf2","articleId":268,"userId":836,"content":"2019年看也不过时","createdAt":1571645649340},{"id":1765,"originId":"5dd634ea34a8a07a2dab63ad","articleId":268,"userId":837,"content":"讲真，做前端快4年，感觉还是半吊子，想想未来，心惊肉跳。迷茫之际，在网上读了狼叔的这篇文章，虽不能说是豁然开朗，但也是感慨万千，所以进入社区，追随狼叔的脚步，希望能有所进步。感谢狼叔……","createdAt":1574319338853},{"id":1766,"originId":"5f4cd48c68156574e6e6dc98","articleId":268,"userId":838,"content":"感谢！受益非浅…","createdAt":1598870668990},{"id":1767,"originId":"5f4c5f5768156574e6e6db3c","articleId":270,"userId":396,"content":"gitee开源地址：https://gitee.com/GlobeCat/multi-merchant-shop.git","createdAt":1598840663368},{"id":1768,"originId":"5f48bfbae8a599751bb51626","articleId":273,"userId":21,"content":"外国女友!!! \r\n说实话这种程序员生活类的，在V2发应该会比较受欢迎","createdAt":1598603194751},{"id":1769,"originId":"5f4878c9e8a599751bb5158c","articleId":274,"userId":840,"content":"cool man, like it","createdAt":1598585033854},{"id":1770,"originId":"5f40b8c8e8a599751bb50c8b","articleId":275,"userId":841,"content":"代码很简单，欢迎大家提拍砖哈","createdAt":1598077128980},{"id":1771,"originId":"5f44809fe8a599751bb50fa8","articleId":275,"userId":135,"content":"看起来挺方便的,下次小项目试试~","createdAt":1598324895125},{"id":1772,"originId":"5f45c9c068156574e6e6d3b6","articleId":275,"userId":107,"content":" 和\r\nhttps://github.com/andregardi/use-global-hook\r\nhttps://github.com/dai-shi/react-hooks-global-state\r\nhttps://github.com/devhammed/use-global-hook\r\n看起来类似哦","createdAt":1598409152949},{"id":1773,"originId":"5f45d79168156574e6e6d40b","articleId":275,"userId":841,"content":"类似的再举两个： zustand，react-tracked\r\n\r\n\r\n有什么区别？机制差不多，理念还是不一样，use-one 没有多余的黑魔法，可以看成组件全局状态的事件订阅发布的 hook 简单写法，api 也是最少的","createdAt":1598412689720},{"id":1774,"originId":"5f466db5e8a599751bb51236","articleId":275,"userId":842,"content":"咋一看我还以为是ahook","createdAt":1598451125178},{"id":1775,"originId":"5f467b70e8a599751bb5126a","articleId":275,"userId":841,"content":"哈哈 😄","createdAt":1598454640045},{"id":1776,"originId":"5f3f9ab568156574e6e6cdeb","articleId":281,"userId":845,"content":"[点击查看原本](https://github.com/zhulinwei/design-pattern/blob/master/decorator/README.md)","createdAt":1598003893616},{"id":1777,"originId":"5f3b2987d8c8971d82088d92","articleId":283,"userId":22,"content":"<https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind>","createdAt":1597712775851},{"id":1778,"originId":"5f3b38dbd8c8971d82088deb","articleId":283,"userId":717,"content":"我也 不懂，帮顶","createdAt":1597716699973},{"id":1779,"originId":"5f3ce42468156574e6e6c925","articleId":283,"userId":22,"content":"phantomjs 和浏览器都支持，就是函数绑定啊。你还是把具体的错误信息贴出来吧","createdAt":1597826084186},{"id":1780,"originId":"5f3e342468156574e6e6cb3b","articleId":283,"userId":847,"content":"![image.png](//static.cnodejs.org/FqxhvCkxpl9b5xxsOzbJyEhJ_pNK)\r\nvue源码里看到过这个注释","createdAt":1597912100141},{"id":1781,"originId":"5f3de58ce8a599751bb50804","articleId":284,"userId":22,"content":"自信点，把“可能”去掉","createdAt":1597891980693},{"id":1782,"originId":"5f3e1a7268156574e6e6cb05","articleId":284,"userId":620,"content":"[@justjavac](/user/justjavac) 哈哈哈～","createdAt":1597905522973},{"id":1783,"originId":"5f3cde1ae8a599751bb506f4","articleId":287,"userId":848,"content":"非常划算，已经上车，同时介绍身边的两个同事上车了。","createdAt":1597824538605},{"id":1784,"originId":"5f351555d8c8971d82088751","articleId":290,"userId":838,"content":"不错，可以看看","createdAt":1597314389833},{"id":1785,"originId":"5f351eb3d8c8971d82088774","articleId":290,"userId":98,"content":"老实说我还真遇到过几次问这个，一句话怎么说得清楚？我答不上来就代表我不知道？","createdAt":1597316787830},{"id":1786,"originId":"5f3531bbebb8141d4bdda7b9","articleId":290,"userId":846,"content":"[@zengming00](/user/zengming00) 是的，事件循环这个是 Node.js 的最核心的概念之一了，把它理解了，在安排各种回调事件的时候，会更加得心应手。","createdAt":1597321659432},{"id":1787,"originId":"5f3531d7ebb8141d4bdda7bd","articleId":290,"userId":846,"content":"[@liutao2428118](/user/liutao2428118) 谢谢鼓励。","createdAt":1597321687064},{"id":1788,"originId":"5f3600ccebb8141d4bdda8b7","articleId":290,"userId":98,"content":"[@92hackers](/user/92hackers) 不是不理解，而是我没法给他说出来，除非把这样的文章背下来，就像我指导同事找BUG一样，我就是感觉那里有问题，她问我是怎么知道的，我说：直觉。我18岁就玩编程了，到现在已经十年了，很多东西让我说我真说不出来，但让我做可能我都能自己写一个出来","createdAt":1597374668091},{"id":1789,"originId":"5f3932cfebb8141d4bddab37","articleId":290,"userId":838,"content":"[@zengming00](/user/zengming00) 面试造飞机，工作拧螺丝","createdAt":1597584079251},{"id":1790,"originId":"5f3946faebb8141d4bddab52","articleId":290,"userId":514,"content":"很重要的机制","createdAt":1597589242607},{"id":1791,"originId":"5f39cba8d8c8971d82088b58","articleId":292,"userId":22,"content":"赞赞赞","createdAt":1597623208482},{"id":1792,"originId":"5f39cc00ebb8141d4bddab67","articleId":292,"userId":22,"content":"应该再写个配套的 pagic-actions 或者 pagic-deploy","createdAt":1597623296731},{"id":1793,"originId":"5f39f60dd8c8971d82088bdb","articleId":292,"userId":620,"content":"[@justjavac](/user/justjavac)  [@xcatliu](/user/xcatliu) CloudBase Framework 可以帮忙搞个自动检测部署这个 Pagic 应用，Pagic 应用有啥特征可以检测出来么\r\n\r\n我们之前支持 VuePress 部署是这样实现的\r\n```\r\n  {\r\n    name: \"VuePress\",\r\n    key: \"vuepress\",\r\n    detect: [\r\n      {\r\n        path: \"package.json\",\r\n        match: '\"(dev)?(d|D)ependencies\":\\\\s*{[^}]*\"vuepress\":\\\\s*\".+?\"[^}]*}',\r\n      },\r\n    ],\r\n    plugin: \"@cloudbase/framework-plugin-website\",\r\n    config: {\r\n      buildCommand: {\r\n        value: \"npm run build\",\r\n        desc: \"🔨 构建脚本\",\r\n      },\r\n      outputPath: {\r\n        value: \".vuepress/dist\",\r\n        desc: \"📦 本地静态文件目录\",\r\n      },\r\n    },\r\n  },\r\n```\r\n\r\n\r\n另外，CBF今天会发布一个版本支持 Deno 后端应用的一键部署\r\nhttps://github.com/TencentCloudBase/cloudbase-framework/tree/master/packages/framework-plugin-deno\r\n\r\n","createdAt":1597634061947},{"id":1794,"originId":"5f39fc7dd8c8971d82088c01","articleId":292,"userId":620,"content":"已经支持 https://github.com/TencentCloudBase/cloudbase-framework/commit/35b5426291fff7cfbf75e086f056e02c5d0fcbc6","createdAt":1597635709520},{"id":1795,"originId":"5f3a04c7ebb8141d4bddac14","articleId":292,"userId":22,"content":"Tencent Cloud 已经支持 Deno 了啊，赞👍","createdAt":1597637831506},{"id":1796,"originId":"5f3a0513d8c8971d82088c21","articleId":292,"userId":41,"content":"[@binggg](/user/binggg) 神速，赞👍一会儿加到部署章节去","createdAt":1597637907381},{"id":1797,"originId":"5f3a349bd8c8971d82088c95","articleId":292,"userId":620,"content":"[@justjavac](/user/justjavac) [@xcatliu](/user/xcatliu) \r\n\r\nPagic 应用和 Deno 服务端应用已经都支持了～～\r\nhttps://github.com/TencentCloudBase/cloudbase-framework/releases/tag/v0.9.0","createdAt":1597650075700},{"id":1798,"originId":"5f3b9e21ebb8141d4bddaefe","articleId":292,"userId":510,"content":"![image.png](//static.cnodejs.org/FrIvBiBjvZ2S-zOQ8ptQ_80dnSH3)我什么时候才能看懂大佬们的对话 呜呜呜","createdAt":1597742625558},{"id":1799,"originId":"5f3b51abebb8141d4bddae33","articleId":293,"userId":845,"content":"[点击查看原文](https://github.com/zhulinwei/design-pattern/blob/master/bridge/README.md)","createdAt":1597723051807},{"id":1800,"originId":"5f378b7eebb8141d4bddaa59","articleId":295,"userId":98,"content":"区别就是一个摸鱼时间多，一个摸鱼时间少","createdAt":1597475710636},{"id":1801,"originId":"5c97a1f400bcfd7eb2be58a7","articleId":296,"userId":358,"content":"赞一个，已 Star。","createdAt":1553441268588},{"id":1802,"originId":"5c97c81100bcfd7eb2be58fe","articleId":296,"userId":18,"content":"👍","createdAt":1553451025876},{"id":1803,"originId":"5c98249d00bcfd7eb2be5933","articleId":296,"userId":26,"content":"赞你这个难道不是的灵感和非常有用的项目😊","createdAt":1553474717383},{"id":1804,"originId":"5c982b0800bcfd7eb2be595f","articleId":296,"userId":26,"content":"马上试了一下，不错![image.png](//static.cnodejs.org/Fgd9wsAC5GKDlvb_s5NHfPL685db)\r\n公司的gitlab瞬间有了点什么感觉","createdAt":1553476360833},{"id":1805,"originId":"5c987e1cfd41137eb76615bd","articleId":296,"userId":849,"content":"[@HobaiRiku](/user/HobaiRiku) 啊哈~","createdAt":1553497628515},{"id":1806,"originId":"5c989721fd41137eb76616fd","articleId":296,"userId":850,"content":"厉害了，哈哈~","createdAt":1553504033634},{"id":1807,"originId":"5c9994f2fd41137eb7661b97","articleId":296,"userId":851,"content":"[@alsotang](/user/alsotang) 感觉你照片有点审美疲劳了 （捂脸","createdAt":1553569010141},{"id":1808,"originId":"5c9995ecfd41137eb7661bac","articleId":296,"userId":852,"content":"赞一个。","createdAt":1553569260427},{"id":1809,"originId":"5c99f11300bcfd7eb2be664b","articleId":296,"userId":849,"content":"[@lisniuse](/user/lisniuse) 今晚我争取上一下横板的生成器，大家就可以拿来做头像了哈哈~","createdAt":1553592595048},{"id":1810,"originId":"5cad5068d68ff5064921bbe5","articleId":296,"userId":853,"content":"66666","createdAt":1554862184423},{"id":1811,"originId":"5cb29a9c207b2365936ecb7b","articleId":296,"userId":44,"content":"太单调了吧\r\n","createdAt":1555208860180},{"id":1812,"originId":"5cb410efdad66d658e409013","articleId":296,"userId":466,"content":"哈哈不错，非常棒！\r\n不过我更关心怎么接side project~","createdAt":1555304687662},{"id":1813,"originId":"5cb42847dad66d658e409242","articleId":296,"userId":854,"content":"试了下，还挺不错的，哈哈哈","createdAt":1555310663339},{"id":1814,"originId":"5cb46be6dad66d658e4094ee","articleId":296,"userId":831,"content":"看完了！支持楼主。   楼主全才！连设计都会。  在下佩服！！！！！1","createdAt":1555327974813},{"id":1815,"originId":"5cb81230a86ae80ce64b09d6","articleId":296,"userId":829,"content":"赞，可以多几个布局、素材","createdAt":1555567152491},{"id":1816,"originId":"5cc07394a86ae80ce64b3909","articleId":296,"userId":849,"content":"[@OXOYO](/user/OXOYO) 比如哪些呢？","createdAt":1556116372568},{"id":1817,"originId":"5cc507e5a86ae80ce64b4d78","articleId":296,"userId":829,"content":"[@bestony](/user/bestony) 现在只有水平、垂直两种，可以支持更多排布方式，甚至可以手动输入样式、支持组件商店等等，也可以借鉴一下shields.io的思路","createdAt":1556416485324},{"id":1818,"originId":"5cd0369f776fb66e0d172a39","articleId":296,"userId":849,"content":"[@OXOYO](/user/OXOYO) 👌","createdAt":1557149343266},{"id":1819,"originId":"5f369cbcd8c8971d8208898e","articleId":296,"userId":177,"content":"不过啊。用这个上就可以了  [点击获取了吧](https://github.com/xwtxwy001/xiaoyu/wiki/mysoft?ch=f)","createdAt":1597414588376},{"id":1820,"originId":"5f363047d8c8971d820888d6","articleId":297,"userId":442,"content":"breword.com 不错的网站，英文不得行，看看翻译得了。","createdAt":1597386823612},{"id":1821,"originId":"5f3632aed8c8971d820888eb","articleId":297,"userId":855,"content":"厉害","createdAt":1597387438867},{"id":1822,"originId":"5f35ead5ebb8141d4bdda83e","articleId":299,"userId":858,"content":"typescript 是**泛型** 吧？","createdAt":1597369045221},{"id":1823,"originId":"5f35ecf3ebb8141d4bdda845","articleId":299,"userId":857,"content":"[@DanielZhui](/user/DanielZhui) 支持泛型语法","createdAt":1597369587998},{"id":1824,"originId":"5f28e9844b61050e36e7dcf7","articleId":300,"userId":22,"content":"看了开头我就猜到文章末尾了","createdAt":1596516740272},{"id":1825,"originId":"5f2901ac4b61050e36e7dd62","articleId":300,"userId":845,"content":"[@justjavac](/user/justjavac) 哈哈哈，这是动力源泉嘛[嘿哈]","createdAt":1596522924436},{"id":1826,"originId":"5f2b7b95f0739b0e62d13df2","articleId":300,"userId":845,"content":"[点击查看原文](https://github.com/zhulinwei/design-pattern/blob/master/factory/REAMEME.md)","createdAt":1596685205998},{"id":1827,"originId":"5f350b8debb8141d4bdda774","articleId":300,"userId":838,"content":"[@liutao2428118](/user/liutao2428118) 学习","createdAt":1597311885169},{"id":1828,"originId":"5f352a42ebb8141d4bdda7b1","articleId":300,"userId":845,"content":"[@liutao2428118](/user/liutao2428118) 欢迎关注我个人学习的公众号：小粥极客馆，里面更有多有深度思考的文章。","createdAt":1597319746859},{"id":1829,"originId":"5f3529cbebb8141d4bdda7a3","articleId":301,"userId":845,"content":"[点击查看原文](https://github.com/zhulinwei/design-pattern/tree/master/proxy)","createdAt":1597319627314},{"id":1830,"originId":"5f3368dc6c9ee864cf0e4988","articleId":304,"userId":845,"content":"[点击查看原文](https://github.com/zhulinwei/design-pattern/blob/master/prototype/README.md)","createdAt":1597204700632},{"id":1831,"originId":"5b4348de13ca2fe569fb922e","articleId":306,"userId":36,"content":"用go重写后，和之前相比性能如何呢","createdAt":1531136222930},{"id":1832,"originId":"5b4350e035342ab0690613b1","articleId":306,"userId":98,"content":"[@dengnan123](/user/dengnan123) cpu使用量降低50%+，内存使用量降低80%+  ， 同时开发难度也上升了很多，一不小心内存就暴涨挂掉，以前两台node才能勉强扛住现在一台go足够了","createdAt":1531138272499},{"id":1833,"originId":"5b440a76e374eeab6929d57c","articleId":306,"userId":861,"content":"淘气奥，不许在这里吹go o(*￣︶￣*)o","createdAt":1531185782281},{"id":1834,"originId":"5b458b13fb9e84ec69cc199f","articleId":306,"userId":490,"content":"golang123(开源)也是这样玩的哦，pm2管理golang进程\r\ngolang123 是使用 vue、nuxt、node.js 和 golang 开发的知识分享系统  https://www.golang123.com\r\nGithub: https://github.com/shen100/golang123","createdAt":1531284243378},{"id":1835,"originId":"5b458d4235342ab06906143d","articleId":306,"userId":89,"content":"[@zengming00](/user/zengming00) 那准确性能数据来说，别yy","createdAt":1531284802110},{"id":1836,"originId":"5b459a3e13ca2fe569fb92b2","articleId":306,"userId":98,"content":"[@i5ting](/user/i5ting)\r\n没有yy，实际的数据，两台机对比，左边go右边node，这不是最高峰\r\n![image.png](//static.cnodejs.org/FleNhvIgD-VHY-2c_Ep29h70hMoQ)\r\n这是最高峰时用单台go测得的qps，用我自己写的https://github.com/zengming00/go-qps放在echo的中间件里统计的\r\n![image.png](//static.cnodejs.org/FiY00Dl3lKS1AgHL3uSl_rJpBZaF)\r\n之前没换go时是两台node，一台挂另一台最多几十秒马上也挂掉，现在一台go足够了。目前是高并发业务用go去做，其它仍然node\r\n下面是pm2的情况，node之所以只有一个是因为pm2的cluster不行我用node的cluster模块去启动的多进程\r\n![image.png](//static.cnodejs.org/Fj55oRnOaFrsjacBAPmGqBlD_M0u)\r\ngo版本测试上线时还遇到了内存问题，你也在gopher群，应该有看到","createdAt":1531288126416},{"id":1837,"originId":"5b48265f35342ab0690614e9","articleId":306,"userId":862,"content":"比较好奇go的内存暴涨后为何会迅速挂掉，go的gc应该完善不少了吧","createdAt":1531455071515},{"id":1838,"originId":"5b483a4035342ab0690614ec","articleId":306,"userId":98,"content":"[@royalrover](/user/royalrover) 涨到无法申请内存了还不挂掉？物理内存都没了","createdAt":1531460160168},{"id":1839,"originId":"5b7393bd792f59ae501bf998","articleId":306,"userId":863,"content":"经过研究，发现其实PM2还可以用更优雅的方式启动任意二进制程序：（参考 https://github.com/Unitech/pm2/issues/471 ）\r\n\r\n```yaml\r\napps:\r\n  - name: myapp\r\n    interpreter: none\r\n\tscript: ./main\r\n\targs:\r\n\t  - ./config.product.json\r\n```","createdAt":1534301117453},{"id":1840,"originId":"5b739fcc792f59ae501bf9a5","articleId":306,"userId":864,"content":"[@leizongmin](/user/leizongmin) 好像不能监听内存状况","createdAt":1534304204503},{"id":1841,"originId":"5bbef67e9545eaf107b9c9e6","articleId":306,"userId":865,"content":"[@243011068](/user/243011068)  通过pm2 monit 确实无法试试查看内存","createdAt":1539241598438},{"id":1842,"originId":"5bbf1e5815e4fd1923f48e1c","articleId":306,"userId":405,"content":"nodejs的未来就非常尴尬了","createdAt":1539251800725},{"id":1843,"originId":"5bc00e2e37a6965f5905210b","articleId":306,"userId":419,"content":"fibjs重写一下","createdAt":1539313198844},{"id":1844,"originId":"5bc0464515e4fd1923f48e53","articleId":306,"userId":866,"content":"go的生态圈有node那么繁荣的话肯定早取代了 毕竟自己造轮子gorutinue使用不恰当是容易爆内存的 另外使用array、slice也比较讲究","createdAt":1539327557635},{"id":1845,"originId":"5bc2d1969545eaf107b9cab0","articleId":306,"userId":545,"content":"[@yuu2lee4](/user/yuu2lee4) fibjs 理念可以，生态确实不行~  \r\nV8 现在也在优化。 多核其实可以考虑开启多个docker ~","createdAt":1539494294068},{"id":1846,"originId":"5bc2d1d537a6965f5905219c","articleId":306,"userId":545,"content":"[@youth7](/user/youth7) 脚本语言跟 golang 比，本身就有失偏颇。 这个程度觉得可以了。\r\n多核再用 docker 。\r\n再稍微优化下，找性能瓶颈，必要的时候用C++ 实现","createdAt":1539494357399},{"id":1847,"originId":"5bc4027915e4fd1923f48f04","articleId":306,"userId":867,"content":"请问你linux下用的任务管理器是什么命令的？能图形化看每个核心的CPU占用率","createdAt":1539572345401},{"id":1848,"originId":"5f3257302799ce64a0aabb7f","articleId":306,"userId":644,"content":"把go编译成二进制，直接pm2 start main ，我看默认的模式就是fork，不知道会不会有问题：）\r\n```\r\n──┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────┐\r\n│ id │ name               │ mode     │ ↺    │ status    │ cpu      │ memory   │\r\n├────┼────────────────────┼──────────┼──────┼───────────┼──────────┼─────┤\r\n│ 1  │ main               │ fork     │ 0    │ online    │ 0%       │ 24.5mb \r\n```","createdAt":1597134640934},{"id":1849,"originId":"5f3103b54b61050e36e7eb82","articleId":307,"userId":711,"content":"赞","createdAt":1597047733507},{"id":1850,"originId":"5f30d6ef4b61050e36e7eb14","articleId":308,"userId":38,"content":"沙发","createdAt":1597036271151},{"id":1851,"originId":"5f30b6bcf0739b0e62d14599","articleId":309,"userId":845,"content":"[点击查看原文](https://github.com/zhulinwei/design-pattern/blob/master/builder/README.md)","createdAt":1597028028160},{"id":1852,"originId":"5f2b7b754b61050e36e7e323","articleId":310,"userId":89,"content":"你们和cloudbase是啥关系？我看那个做的和sls.plus是一样的","createdAt":1596685173223},{"id":1853,"originId":"5f2b9074f0739b0e62d13e0c","articleId":310,"userId":868,"content":"[@i5ting](/user/i5ting) 简单讲就是两种开源的 Serverless 生态工具，开发者可以根据自己喜好去选择。[Serverless Components](https://github.com/serverless/components/blob/master/README.cn.md) 是 [Serverless Framework](https://github.com/serverless/serverless) 重磅推出的基础设施编排能力，支持开发者通过组件的方式构建、组合，快速部署 Serverless 应用。","createdAt":1596690548249},{"id":1854,"originId":"5f2bad524b61050e36e7e3f9","articleId":310,"userId":135,"content":"👍","createdAt":1596697938510},{"id":1855,"originId":"5f2c0b464b61050e36e7e4f8","articleId":310,"userId":869,"content":"[@abiuDoIT](/user/abiuDoIT) 欢迎体验，给出宝贵意见~","createdAt":1596721990777},{"id":1856,"originId":"5f2d31e1f0739b0e62d14274","articleId":310,"userId":869,"content":"此项目部署为基于Next.js 的手机端，另外有 Serverless Nuxt.js应用的 PC 端应用: https://cnode1.yuga.chat","createdAt":1596797409186},{"id":1857,"originId":"5f2d33b24b61050e36e7e7cd","articleId":310,"userId":870,"content":" \r\n👍","createdAt":1596797874437},{"id":1858,"originId":"5ec4962f67c8a45803da0ada","articleId":312,"userId":190,"content":"seo如何做？这样的博客就是自己玩玩而已。我们写的网站不仅还要给人看，还要给搜索引擎看。不懂seo的前端不是好前端，Csdn为什么不改成前后端分离呢？ ","createdAt":1589941807226},{"id":1859,"originId":"5ec4a47767c8a45803da0b2a","articleId":312,"userId":628,"content":"博客不做SEO？","createdAt":1589945463865},{"id":1860,"originId":"5ec4ca74a87fc8583363d4ee","articleId":312,"userId":103,"content":"http://www.yuedun.wang/blogdetail/5eb778a2bd7e796e7100c718 这篇文章送给你，你只是在做练习，不是在做网站","createdAt":1589955188572},{"id":1861,"originId":"5ec4d3ad67c8a45803da0bf4","articleId":312,"userId":871,"content":"[@wuwangju0](/user/wuwangju0) [@zhuweiyou](/user/zhuweiyou) [@yuedun](/user/yuedun) 真的做网站肯定要做seo.我就提供分享一个当前完成源码而已，后续肯定很多都要持续更新。你怎么不问我为啥不弄自动化部署。怎么不写docker配置，怎么不写serverless无服务部署配置。现在做不\r\n做seo管你屁事。自己如果要上架，自己不知道设置title，自己不知到去设置关键词，自己不知道去多放外链。自己不知道弄成服务端渲染。我他妈要把饭喂到你嘴里才吃？[@yuedun](/user/yuedun) 你给我一个链接又咋样，写的不咋的，多给自己创建一个链接。我就呵呵了。","createdAt":1589957549111},{"id":1862,"originId":"5ec4d554a87fc8583363d517","articleId":312,"userId":103,"content":"[@immisso](/user/immisso) 做的垃圾博客接受不了批评建议就不要发出来骗star，前面比你做的好的多了去了。","createdAt":1589957972221},{"id":1863,"originId":"5ec4d59fa87fc8583363d51b","articleId":312,"userId":871,"content":"[@yuedun](/user/yuedun) 你可以不给啊，又没让你给，sb玩意","createdAt":1589958047797},{"id":1864,"originId":"5ec4d667a87fc8583363d525","articleId":312,"userId":871,"content":"[@yuedun](/user/yuedun) 我接受批评。但不接受你这样的。你可以说我如果要做一个网站，要上线。还需要哪些做哪些，后续本来就会慢慢去完善，你放个链接啥意思，看不起react客户端渲染还是咋的，再说了我都还没弄起来。你急个锤子。","createdAt":1589958247690},{"id":1865,"originId":"5ec4dc66a87fc8583363d53f","articleId":312,"userId":103,"content":"[@immisso](/user/immisso) 那我真是不好意思了，可能戳到你的自尊心了，暴露出你可能只会用react做网站的事实了","createdAt":1589959782464},{"id":1866,"originId":"5ec4dd2fa87fc8583363d54b","articleId":312,"userId":871,"content":"[@yuedun](/user/yuedun) 那还真不好意思，你还停留在jquery阶段吗？再说我不是搞前端的看把你急的，","createdAt":1589959983748},{"id":1867,"originId":"5ec4dd9767c8a45803da0c2d","articleId":312,"userId":103,"content":"[@immisso](/user/immisso) 那就怪不得了，鼠目寸光","createdAt":1589960087467},{"id":1868,"originId":"5ec4ddfe67c8a45803da0c32","articleId":312,"userId":871,"content":"[@yuedun](/user/yuedun) 哈哈哈，我鼠目寸光，嗯，是吧。你成功把我逗笑了。你很nice!","createdAt":1589960190835},{"id":1869,"originId":"5ec50fd7a87fc8583363d61c","articleId":312,"userId":259,"content":"[https://github.com/xjh22222228/tomato-work](https://github.com/xjh22222228/tomato-work) react + egg","createdAt":1589972951907},{"id":1870,"originId":"5ec5ed31a87fc8583363d729","articleId":312,"userId":545,"content":"react 可以用 next.js 做SSR ，即使不SSR ，也可以提高首屏渲染速度~\r\n可以考虑加进去","createdAt":1590029617230},{"id":1871,"originId":"5ec5f35567c8a45803da0e48","articleId":312,"userId":871,"content":"[@zuohuadong](/user/zuohuadong) 嗯。我使用的umi，其实直接弄成SSR也是很简单的。暂时还是先客户端渲染吧。虽然客户端渲染不利于SEO，但是我不是做成一个商业产品。不过你的建议我可以采纳。后续会出一个服务端渲染的demo的。","createdAt":1590031189883},{"id":1872,"originId":"5ec5f43b67c8a45803da0e52","articleId":312,"userId":545,"content":"[@immisso](/user/immisso)  我觉得看目标吧，一种是当做技术分享，娱乐。 一种是想把它做成一个好的产品，如果这种想法的话，就得听听用户意见了，但不是全听，前提是这些意见得符合你产品方向。  ","createdAt":1590031419601},{"id":1873,"originId":"5ec682d867c8a45803da10a3","articleId":312,"userId":872,"content":"支持博主~","createdAt":1590067928078},{"id":1874,"originId":"5ec7296a67c8a45803da1157","articleId":312,"userId":871,"content":"[@uustoboy](/user/uustoboy) 谢谢您","createdAt":1590110570043},{"id":1875,"originId":"5ed086cab703280f0bcb7513","articleId":312,"userId":873,"content":"支持一下 没事慢慢来就好了\r\n","createdAt":1590724298338},{"id":1876,"originId":"5f2a6aea4b61050e36e7e111","articleId":312,"userId":731,"content":"如果博主能在代码中加入注释就好了，更方便别人学习，毕竟学习一次要费很多时间精力，能少走一点是一点，总之博主的兼济精神是要点赞的。","createdAt":1596615402343},{"id":1877,"originId":"5f2d0e254b61050e36e7e713","articleId":312,"userId":874,"content":"想请教下up，录制动态图片怎么录制的...","createdAt":1596788261899},{"id":1878,"originId":"5f2235034b61050e36e7d1fe","articleId":314,"userId":620,"content":"等一个回复，这里静悄悄的","createdAt":1596077315156},{"id":1879,"originId":"5f22656af0739b0e62d12cde","articleId":314,"userId":89,"content":"效能提升到底是多少？","createdAt":1596089706215},{"id":1880,"originId":"5f226b294b61050e36e7d274","articleId":314,"userId":620,"content":"[@i5ting](/user/i5ting) \r\n\r\n微信读书团队是这么说的\r\n\r\n“开发效率分别是对应的 APP 和 H5 的 4 倍与 2 倍”","createdAt":1596091177435},{"id":1881,"originId":"5f227737f0739b0e62d12d19","articleId":314,"userId":875,"content":"开发适用场景？如果我有个项目前端框架是vue，后端框架是eggjs，如何一体化部署？","createdAt":1596094263920},{"id":1882,"originId":"5f228d38f0739b0e62d12d95","articleId":314,"userId":21,"content":"用过微信的云开发，开发体验还不错，就是线上机器太卡","createdAt":1596099896437},{"id":1883,"originId":"5f22c9d24b61050e36e7d468","articleId":314,"userId":620,"content":"[@wushanchao](/user/wushanchao) \r\n\r\n可以的，可以组合多种应用，在 CloudBase Framework 内是通过插件机制来支持的\r\n\r\n可以看下这个文档 https://github.com/TencentCloudBase/cloudbase-framework/blob/master/doc/config.md\r\n\r\n","createdAt":1596115410790},{"id":1884,"originId":"5f22c9e34b61050e36e7d46c","articleId":314,"userId":620,"content":"[@zy445566](/user/zy445566) 线上机器太卡指的是？","createdAt":1596115427982},{"id":1885,"originId":"5f23766b4b61050e36e7d558","articleId":314,"userId":21,"content":"[@binggg](/user/binggg) 用云开发的接口响应比较慢，简单的接口都要2s以上，可能我用的是小程序免费的云开发吧","createdAt":1596159595495},{"id":1886,"originId":"5f238057f0739b0e62d13012","articleId":314,"userId":620,"content":"[@zy445566](/user/zy445566) 这个跟免费不免费没关系，如果是第一次请求云函数，可能有冷启动耗时的因素，这个目前也可以用 Serverless 云应用来解决\r\n如果是每次都这么慢，可能跟实现有关系，比如数据库索引设置不合理等，可以加群沟通下 771895625","createdAt":1596162135983},{"id":1887,"originId":"5f24bb1df0739b0e62d131bc","articleId":314,"userId":620,"content":"今天上午，我会在 KubeConf 分享 CloudBase Framework 一体化部署工具建设，欢迎感兴趣的小伙伴来一起交流\r\n\r\n![](https://website-4gx79tn6f7282ae5-1259727701.tcloudbaseapp.com/test/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_01f1d206-4edb-4c5e-98e7-67a1b871691f.png)","createdAt":1596242717320},{"id":1888,"originId":"5f24f0ed4b61050e36e7d7c3","articleId":314,"userId":876,"content":"支持一下，很早就在关注了，很看好\r\n\r\n希望能提供自定义运行时，比如我希望能部属 deno 的应用，类似阿里云的custom runtime，几乎不需要改动成本。\r\n\r\n如果能提供原生的应用模板就最好啦，非常期待","createdAt":1596256493099},{"id":1889,"originId":"5f276a06f0739b0e62d133b9","articleId":314,"userId":620,"content":"[@orzv](/user/orzv) 感谢支持呀\r\n目前提供的底层计算资源分为两种，一种是云函数（Function as a Service 模式），一种是 Serverless 云应用（Container as a Service模式），两种都是可以支持弹性伸缩，自动扩缩容以及按量付费的\r\n\r\nServerless 云应用的自定义程度非常高，可以通过 Dockerfile 来自定义各种各样的执行环境和应用，比如我们提供的 Dart 插件，底层实际上就是使用到了这个能力 https://github.com/TencentCloudBase/cloudbase-framework/tree/master/packages/framework-plugin-dart\r\n\r\n所以使用 Deno 来开发，可以写完 Deno 代码之后搞个简单的Dockerfile\r\n类似下面这样的 Dockerfile\r\n```\r\nFROM hayd/alpine-deno:1.2.2\r\n\r\nEXPOSE 80  # The port that your application listens to.\r\n\r\nWORKDIR /app\r\n\r\n# Prefer not to run as root.\r\nUSER deno\r\n\r\n# Cache the dependencies as a layer (the following two steps are re-run only when deps.ts is modified).\r\n# Ideally cache deps.ts will download and compile _all_ external files used in main.ts.\r\nCOPY deps.ts .\r\nRUN deno cache deps.ts\r\n\r\n# These steps will be re-run upon each file change in your working directory:\r\nADD . .\r\n# Compile the main app so that it doesn't need to be compiled each startup/entry.\r\nRUN deno cache main.ts\r\n\r\nCMD [\"run\", \"--allow-net\", \"main.ts\"]\r\n```\r\n\r\n然后使用  https://github.com/TencentCloudBase/cloudbase-framework 一键检测并部署就可以了\r\n\r\n```bash\r\ncloudbase init --without-template && cloudbase framework:deploy \r\n```\r\n\r\n也可以考虑提供一个模板来让大家快速玩转起来～","createdAt":1596418566898},{"id":1890,"originId":"5f27e2ebf0739b0e62d135b7","articleId":314,"userId":89,"content":"[@binggg](/user/binggg) 太不自然了。哈哈哈哈，这几个头像做的太生硬了","createdAt":1596449515854},{"id":1891,"originId":"5f280894f0739b0e62d13616","articleId":314,"userId":620,"content":"[@i5ting](/user/i5ting) 狼叔你太逗了，哈哈哈","createdAt":1596459156672},{"id":1892,"originId":"5f298b2b4b61050e36e7df0c","articleId":314,"userId":876,"content":"[@binggg](/user/binggg) 试玩了一下  感觉可以   这个现在是不是有bug\r\n![image.png](//static.cnodejs.org/Fk019wv5rII6L8GVlZXlWCeBSYCf)\r\n今天下午部署的  晚上一看这使用量吓尿了  你们是不是想骗我的房子","createdAt":1596558123281},{"id":1893,"originId":"5f2a11a0f0739b0e62d13a65","articleId":314,"userId":620,"content":"[@orzv](/user/orzv) 不要慌，问题不大，这个是单位显示的问题，明明很小的用量，看起来有点吓人，产品已经在优化了\r\n\r\n另外，现在内测期间不收费～","createdAt":1596592544202},{"id":1894,"originId":"5f2a12d0f0739b0e62d13a70","articleId":314,"userId":620,"content":"[@orzv](/user/orzv) 这个显示单位现在用的是s，不太直观，后面会改为小时\r\n\r\n例如你这里的 CPU 用量 就是 7.82 CPUh","createdAt":1596592848220},{"id":1895,"originId":"5f2bd091f0739b0e62d13f46","articleId":314,"userId":135,"content":"[@orzv](/user/orzv) 哈哈哈哈羡慕有房子可以骗的\r\n[@binggg](/user/binggg) 如果要用来部署aliyun  改动大不大啊(不是砸场子","createdAt":1596706961141},{"id":1896,"originId":"5f2be9fdf0739b0e62d13f86","articleId":314,"userId":620,"content":"[@abiuDoIT](/user/abiuDoIT) 如果你要是只用了托管的能力。比如部署静态网站，动态网站等，不使用云开发的后端服务能力，比如云调用，登录体系，安全规则，NoSQL 数据库等\r\n\r\n那基本没啥改动","createdAt":1596713469807},{"id":1897,"originId":"5f2b7b684b61050e36e7e31f","articleId":316,"userId":845,"content":"[点击查看原文](https://github.com/zhulinwei/design-pattern/blob/master/singletion/README.md)","createdAt":1596685160332},{"id":1898,"originId":"5f2a1ca04b61050e36e7dfcc","articleId":317,"userId":89,"content":"component是一个通用方案，CloudBase基于component做衍生周边生态，应该是有种束手束脚的感觉。\r\n\r\nCloudBase易用性上是不错的，但没有一些比较有亮点的具有faas特色东西，遗憾。成也Serverless.com败也Serverless.com。加油吧","createdAt":1596595360459},{"id":1899,"originId":"5f2a1dbef0739b0e62d13aae","articleId":317,"userId":620,"content":"[@i5ting](/user/i5ting) 狼叔可能没太关注咱们产品形态，目前是 BaaS + FaaS + CaaS 的形式， FaaS 始终还是有局限性的","createdAt":1596595646600},{"id":1900,"originId":"5f2a42f3f0739b0e62d13b05","articleId":317,"userId":89,"content":"[@binggg](/user/binggg) 不是黑，这是我自己觉得客观的看法","createdAt":1596605171781},{"id":1901,"originId":"5f2aab98f0739b0e62d13c91","articleId":317,"userId":620,"content":"[@i5ting](/user/i5ting) \r\n明白，不过应该对咱们了解还不太深，狼叔最近还在搞 Serverless 么","createdAt":1596631960564},{"id":1902,"originId":"5bbdca6b37a6965f59052065","articleId":318,"userId":878,"content":"可以啊，还有埋点操作，后端用什么搞得呀？","createdAt":1539164779489},{"id":1903,"originId":"5bbdce5237a6965f59052067","articleId":318,"userId":877,"content":"[@Helovebai](/user/Helovebai) 后台必须是node呀  koa","createdAt":1539165778852},{"id":1904,"originId":"5bbdd5f515e4fd1923f48ddf","articleId":318,"userId":879,"content":"(๑•̀ㅂ•́)و✧","createdAt":1539167733786},{"id":1905,"originId":"5bbef36d37a6965f590520a2","articleId":318,"userId":251,"content":"Mark, 支持！","createdAt":1539240813964},{"id":1906,"originId":"5bbf016a37a6965f590520ae","articleId":318,"userId":641,"content":"可以啊","createdAt":1539244394216},{"id":1907,"originId":"5bbf3c2337a6965f590520de","articleId":318,"userId":877,"content":"优化了一下登录.\r\n登后可以上传图片 , 可以保存自己设计的模版.","createdAt":1539259427609},{"id":1908,"originId":"5bc013c137a6965f59052110","articleId":318,"userId":880,"content":"会开源不 , 那个渐变控件我好喜欢,  双击加颜色, 拖走删除 用得很爽 ","createdAt":1539314625966},{"id":1909,"originId":"5bc0339b37a6965f59052118","articleId":318,"userId":877,"content":"[@csc860](/user/csc860) 代码太乱 没脸开源   \r\n\r\n渐变控件依赖 `element` 的 `color-picker` 控件, 需要的放我发给你. ","createdAt":1539322779054},{"id":1910,"originId":"5f28b6954b61050e36e7dbf7","articleId":318,"userId":881,"content":"想要一份楼主的代码，284438799@qq.com","createdAt":1596503701883},{"id":1911,"originId":"5edc9b0282b588109b647c95","articleId":319,"userId":558,"content":"干货，必须点赞n","createdAt":1591515906322},{"id":1912,"originId":"5edef6cf82b588109b647fae","articleId":319,"userId":11,"content":"这个硬核，v0.0.1 就写了这么多了","createdAt":1591670479730},{"id":1913,"originId":"5f15afa14b61050e36e7b454","articleId":319,"userId":147,"content":"[@alphakid](/user/alphakid) 谢谢支持","createdAt":1595256737835},{"id":1914,"originId":"5f15afc44b61050e36e7b458","articleId":319,"userId":147,"content":"[@hyj1991](/user/hyj1991) 尽量多写点","createdAt":1595256772224},{"id":1915,"originId":"5f1e31c8f0739b0e62d122ab","articleId":319,"userId":150,"content":"好东西，但是现在上面的下载链接下载不了","createdAt":1595814344105},{"id":1916,"originId":"5f25b2be4b61050e36e7d833","articleId":319,"userId":147,"content":"[@ddzyan](/user/ddzyan) 我点击还可以下载哦","createdAt":1596306110805},{"id":1917,"originId":"5f2864994b61050e36e7dbb5","articleId":319,"userId":882,"content":"喜欢, 谢谢","createdAt":1596482713747},{"id":1918,"originId":"5d2befd8c5fe2549619ae6fc","articleId":320,"userId":883,"content":"Consul 我没了解过，想问下这个与Apollo配置中心有什么异同的地方？","createdAt":1563160536256},{"id":1919,"originId":"5d2bf34d51637b492bb0ecaa","articleId":320,"userId":13,"content":"[@zhongjixiuxing](/user/zhongjixiuxing) Apollo 这个只是大概看过，不是太了解，关于两者异同有哪位用过的大佬可以分享下，Consul 类似于 Zookeeper","createdAt":1563161421761},{"id":1920,"originId":"5d2e7517c5fe2549619aef14","articleId":320,"userId":884,"content":"node太强大. consul module都有了.","createdAt":1563325719017},{"id":1921,"originId":"5d2e774751637b492bb0f573","articleId":320,"userId":885,"content":"在维护老的express系统，业务量不大，是分布式的架构却没使用注册/发现服务，在纠结是用consul/zk，还是直接上serverless，楼主有啥建议吗","createdAt":1563326279668},{"id":1922,"originId":"5d2fb455b2b9222961dabafa","articleId":320,"userId":13,"content":"[@WXFSnowMan](/user/WXFSnowMan) 是你想象不到的强大 哈哈😄","createdAt":1563407445418},{"id":1923,"originId":"5d2fb6439969a529571d4eda","articleId":320,"userId":13,"content":"[@yort-feng](/user/yort-feng) Consul 还好，当作一个中间件引入，新服务可以尝试接入下，个人觉得做为配置中心还是挺 Nice 的哈。之前写了一个系列的包括 **Consul入门、集群搭建、服务注册与发现实践、Node.js 和 Java 客户端的链接**，想要实践可以参考下 [https://www.nodejs.red/#/microservice/consul](https://www.nodejs.red/#/microservice/consul)","createdAt":1563407939198},{"id":1924,"originId":"5d2fbc38b2b9222961dabb0a","articleId":320,"userId":886,"content":"为何不上k8s","createdAt":1563409464467},{"id":1925,"originId":"5d3a5d1eb4725a628e268c48","articleId":320,"userId":887,"content":"👍，服务的注册与发现有没有实践？","createdAt":1564106014404},{"id":1926,"originId":"5d3a6cbe9969a529571d750d","articleId":320,"userId":888,"content":"跟阿里的Nacos有什么区别?","createdAt":1564110014196},{"id":1927,"originId":"5d3a7e6ab4725a628e268d39","articleId":320,"userId":13,"content":"[@yay2008](/user/yay2008) 都是服务发现与配置管理的一种，区别的话，大致可以参考下这个图 https://blog.csdn.net/qq_34508530/article/details/90024492","createdAt":1564114538378},{"id":1928,"originId":"5d3a7ee0b4725a628e268d3e","articleId":320,"userId":13,"content":"[@brucecodezone](/user/brucecodezone) https://www.nodejs.red/#/microservice/consul\r\n\r\n![image.png](//static.cnodejs.org/FuCKGjVwdXBAPaiDgY7gmmP4WrUo)","createdAt":1564114656588},{"id":1929,"originId":"5d3a7fb2b4725a628e268d42","articleId":320,"userId":13,"content":"[@shadow88sky](/user/shadow88sky) 不一样的东西吧，还是您的意思是 K8S 环境下部署 Consul？","createdAt":1564114866895},{"id":1930,"originId":"5d3aa824b4725a628e268e11","articleId":320,"userId":829,"content":"赞","createdAt":1564125220590},{"id":1931,"originId":"5d3bb0cd9969a529571d78ba","articleId":320,"userId":545,"content":"consul 看这个： https://github.com/nest-cloud/nestcloud/blob/master/docs/consul.md\r\n\r\n其他微服务周边  https://github.com/nest-cloud/nestcloud","createdAt":1564192973943},{"id":1932,"originId":"5d3e577f9969a529571d7c3d","articleId":320,"userId":13,"content":"[@zuohuadong](/user/zuohuadong) 👍","createdAt":1564366719626},{"id":1933,"originId":"5f23605f4b61050e36e7d507","articleId":320,"userId":123,"content":"apollo 配置中心也不错，https://github.com/lvgithub/ctrip-apollo-client","createdAt":1596153951148},{"id":1934,"originId":"5f2768514b61050e36e7d8ff","articleId":320,"userId":13,"content":"[@lvgithub](/user/lvgithub) 👍","createdAt":1596418129116},{"id":1935,"originId":"5f2235614b61050e36e7d208","articleId":321,"userId":135,"content":"你们现在的部署方案是  用一个函数做入口,然后路由分发吧. 但是这样每次运行消耗的资源内存都比较大.\r\n能不能根据路由来 按需引用,然后 自动配置函数呢?  这样一个路由对应一个函数,资源和效率都可以优化.","createdAt":1596077409939},{"id":1936,"originId":"5f2243f1f0739b0e62d12c99","articleId":321,"userId":357,"content":"[@abiuDoIT](/user/abiuDoIT) v1.1的传统应用整个迁移是这样的没错，而如果是v1.0函数开发，非聚合形态下，是单个路由单个函数执行的","createdAt":1596081137566},{"id":1937,"originId":"5f22b85d4b61050e36e7d43b","articleId":321,"userId":889,"content":"\"非聚合形态下，是单个路由单个函数执行\"\r\n\r\n 这个是 egg 默认加载了所有的 loadUnit，然后只开放的某个路由的方式么？ ","createdAt":1596110941304},{"id":1938,"originId":"5f2392da4b61050e36e7d5fe","articleId":321,"userId":357,"content":"[@y5ma](/user/y5ma) 不是的，纯函数跟egg关系不大，是 midway自己生成了路由，通过ioc动态调用到某个函数。","createdAt":1596166874041},{"id":1939,"originId":"5f2374e44b61050e36e7d54c","articleId":322,"userId":620,"content":"多谢[@i5ting](/user/i5ting) 推荐","createdAt":1596159204997},{"id":1940,"originId":"5f238423f0739b0e62d13030","articleId":322,"userId":89,"content":"[@binggg](/user/binggg) 我的态度，不偏向阿里云，也不偏向腾讯云。具体看内容，好的内容可以加精，符合社区风向的，可以置顶","createdAt":1596163107351},{"id":1941,"originId":"56f366830a5a2cfb3ad149b1","articleId":323,"userId":18,"content":"据说 2012 的时候在深圳搞过一次 nodeparty。。。","createdAt":1458792067908},{"id":1942,"originId":"56f366d902c237a73a1a8ac8","articleId":323,"userId":358,"content":"赞","createdAt":1458792153562},{"id":1943,"originId":"56f366f002c237a73a1a8aca","articleId":323,"userId":863,"content":"[@alsotang](/user/alsotang)  4年前的，看这里：http://techparty.org/%E6%80%BB%E7%BB%93/%E6%B7%B1%E5%9C%B3/2012/01/16/2012-01-08-nodepartye6b7b1e59cb3e8819ae4bc9ae6b4bbe58aa8e59b9ee9a1bee680bbe7bb93.html","createdAt":1458792176240},{"id":1944,"originId":"56f3680a532839c33a99d181","articleId":323,"userId":890,"content":"赞 前排~~","createdAt":1458792458949},{"id":1945,"originId":"56f36820fa2ee8df3a65053e","articleId":323,"userId":891,"content":"赞，报名参加！！！\r\n\r\n没注意到还要邮箱的，加粗备注\r\n**yreenchan#gmail.com**","createdAt":1458792480374},{"id":1946,"originId":"56f36838fa2ee8df3a650540","articleId":323,"userId":891,"content":"上面贴的github地址404了?","createdAt":1458792504663},{"id":1947,"originId":"56f3684302c237a73a1a8acc","articleId":323,"userId":892,"content":"赞！！ 我要来\r\n\r\n1. think2011\r\n2. 452125301.hzplay@gmail.com","createdAt":1458792515261},{"id":1948,"originId":"56f368c6fa2ee8df3a650542","articleId":323,"userId":10,"content":"\r\n此楼层已被我承包~\\(≧▽≦)/~啦啦啦，各位退下吧！\r\n\r\n##### 报名:\r\n\r\n- [@thonatos](/user/thonatos)\r\n- thonatos.yang@gmail.com","createdAt":1458792646486},{"id":1949,"originId":"56f369a70a5a2cfb3ad149b5","articleId":323,"userId":893,"content":"wuchangming\r\nwuchangmingnice@163.com","createdAt":1458792871506},{"id":1950,"originId":"56f369aa0a5a2cfb3ad149b7","articleId":323,"userId":12,"content":"深圳，好久不见！当年也是在腾讯搞的\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1458792874694},{"id":1951,"originId":"56f36a0402c237a73a1a8ad0","articleId":323,"userId":894,"content":"[@fatefan](/user/fatefan)\r\niamfatefan000@gmail.com\r\n报名~~","createdAt":1458792964334},{"id":1952,"originId":"56f36a89fa2ee8df3a650549","articleId":323,"userId":895,"content":"[@qv-bear](/user/qv-bear)\r\nforu.fy@gmail.com\r\n报名~~","createdAt":1458793097936},{"id":1953,"originId":"56f36b36fa2ee8df3a65054c","articleId":323,"userId":193,"content":"[@longFeiLi](/user/longFeiLi)\r\nlongfeili0925@gmail.com\r\n报名","createdAt":1458793270157},{"id":1954,"originId":"56f36b8f0a5a2cfb3ad149bd","articleId":323,"userId":18,"content":"[@fengmk2](/user/fengmk2) \r\n\r\n[@lenzhang](/user/lenzhang) 当年","createdAt":1458793359672},{"id":1955,"originId":"56f36d5b02c237a73a1a8ad3","articleId":323,"userId":896,"content":"Axighi\r\nazriel.liang@gmail.com","createdAt":1458793819201},{"id":1956,"originId":"56f36d840a5a2cfb3ad149c1","articleId":323,"userId":897,"content":"winjoygao\r\ngaowj84@gmail.com\r\n报名\r\n","createdAt":1458793860876},{"id":1957,"originId":"56f36df4fa2ee8df3a65054e","articleId":323,"userId":898,"content":"报名报名~\r\nwzl610\r\n237984496@qq.com(看着全部用gmail的邮箱，都不敢报名了=_=)","createdAt":1458793972077},{"id":1958,"originId":"56f36f1b0a5a2cfb3ad149c6","articleId":323,"userId":899,"content":"报名\r\njasonhuang2532\r\n554860075@qq.com","createdAt":1458794267982},{"id":1959,"originId":"56f36fa3fa2ee8df3a650555","articleId":323,"userId":900,"content":"[@tangrui](/user/tangrui)\r\ntangrui.cn@gmail.com","createdAt":1458794403221},{"id":1960,"originId":"56f36fcc02c237a73a1a8ad9","articleId":323,"userId":901,"content":"报名\r\nshanelau\r\nshanelau1021@gmail.com","createdAt":1458794444361},{"id":1961,"originId":"56f3709c0a5a2cfb3ad149c9","articleId":323,"userId":902,"content":"报名\r\nzzxun\r\nxtkml.g@gmail.com","createdAt":1458794652202},{"id":1962,"originId":"56f370a70a5a2cfb3ad149cb","articleId":323,"userId":903,"content":"报名\r\nnicesu\r\n\r\nsulihuang0@gmail.com","createdAt":1458794663575},{"id":1963,"originId":"56f370eb532839c33a99d186","articleId":323,"userId":904,"content":"HelloJasonZhang\r\nzhangzheng3210@gmail.com","createdAt":1458794731825},{"id":1964,"originId":"56f37100532839c33a99d188","articleId":323,"userId":905,"content":"EverChris\r\nlvzhuo1213@gmail.com\r\n\r\n终于等到你~~~","createdAt":1458794752423},{"id":1965,"originId":"56f37121fa2ee8df3a650559","articleId":323,"userId":906,"content":"Shengchang\r\ngushengchang@gmail.com","createdAt":1458794785982},{"id":1966,"originId":"56f371260a5a2cfb3ad149cd","articleId":323,"userId":907,"content":"wuyanxin\r\nyanxin.wu@qq.cm","createdAt":1458794790978},{"id":1967,"originId":"56f37378532839c33a99d18b","articleId":323,"userId":908,"content":"sequoiar\r\niwebpp@gmail.com\r\n","createdAt":1458795384788},{"id":1968,"originId":"56f3737dfa2ee8df3a65055c","articleId":323,"userId":909,"content":"报名报名\r\n\r\nmaxming2333\r\n\r\nmaxming2333@gmail.com","createdAt":1458795389307},{"id":1969,"originId":"56f3738e0a5a2cfb3ad149d0","articleId":323,"userId":910,"content":"cherrywen\r\n824866400@qq.com","createdAt":1458795406940},{"id":1970,"originId":"56f3758c0a5a2cfb3ad149d2","articleId":323,"userId":911,"content":"MrliMr\r\n15360085185@163.com","createdAt":1458795916884},{"id":1971,"originId":"56f3760202c237a73a1a8adf","articleId":323,"userId":912,"content":"报名报名\r\ngithub: RandyChou\r\nzxl4189@qq.com","createdAt":1458796034351},{"id":1972,"originId":"56f379d9fa2ee8df3a650563","articleId":323,"userId":913,"content":"github:alihanniba\r\nalihanniba@gmail.com或\r\nalihanniba@qq.com","createdAt":1458797017342},{"id":1973,"originId":"56f37a7902c237a73a1a8aea","articleId":323,"userId":914,"content":"我想参加。\r\ngithub: ihefeng\r\nemail: 245993596@qq.com","createdAt":1458797177730},{"id":1974,"originId":"56f3818702c237a73a1a8aee","articleId":323,"userId":77,"content":"好想去","createdAt":1458798983528},{"id":1975,"originId":"56f382b2fa2ee8df3a65056a","articleId":323,"userId":915,"content":"github: denghongcai\r\nemail: admin#dhchouse.com","createdAt":1458799282154},{"id":1976,"originId":"56f382d50a5a2cfb3ad149de","articleId":323,"userId":916,"content":"github: skyblue\r\nemail: skyblue.null#gmail.com","createdAt":1458799317663},{"id":1977,"originId":"56f3831cfa2ee8df3a65056c","articleId":323,"userId":917,"content":"github: zenboss\r\nemail ：zenyes(艾特)gmail.com\r\n\r\n来自 深圳node.js大本营 群","createdAt":1458799388187},{"id":1978,"originId":"56f38322fa2ee8df3a65056f","articleId":323,"userId":918,"content":"报名\r\ngithub: hellopao\r\nemail: qinjia@outlook.com\r\n","createdAt":1458799394093},{"id":1979,"originId":"56f3835a02c237a73a1a8af0","articleId":323,"userId":919,"content":"我要去！\r\ngithub:**lichenbuliren**\r\nemail: **[lichenbuliren@gmail.com](lichenbuliren@gmail.com)**","createdAt":1458799450548},{"id":1980,"originId":"56f383bb532839c33a99d191","articleId":323,"userId":920,"content":"> 可惜在北京","createdAt":1458799547361},{"id":1981,"originId":"56f38413532839c33a99d193","articleId":323,"userId":921,"content":"github: paicha\r\nemail: paicha.me@gmail.com","createdAt":1458799635673},{"id":1982,"originId":"56f38583532839c33a99d198","articleId":323,"userId":922,"content":"github:jailbreakc\r\nemail: geek@vgee.cn","createdAt":1458800003485},{"id":1983,"originId":"56f386f202c237a73a1a8af5","articleId":323,"userId":923,"content":"email:byangpei@126.com","createdAt":1458800370727},{"id":1984,"originId":"56f387130a5a2cfb3ad149e7","articleId":323,"userId":923,"content":"github:youngpei\r\nemail:byangpei@126.com","createdAt":1458800403906},{"id":1985,"originId":"56f387fc02c237a73a1a8af7","articleId":323,"userId":924,"content":"github:senlin-wei\r\nemail:894587507@qq.com","createdAt":1458800636270},{"id":1986,"originId":"56f38a2bfa2ee8df3a650578","articleId":323,"userId":925,"content":"报名喽(ง •̀_•́)ง{\n  github: fghpdf,\n  email: quxiangxuan@xiyouant.org\n}\n\n来自(๑˙❥˙๑)憋说话吻我的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1458801195464},{"id":1987,"originId":"56f38b51fa2ee8df3a65057a","articleId":323,"userId":926,"content":"github:jeffreyluo\r\nemail:234700284@qq.com","createdAt":1458801489187},{"id":1988,"originId":"56f38bb60a5a2cfb3ad149ee","articleId":323,"userId":927,"content":"github:jimliang\r\nemail:769925821@qq.com","createdAt":1458801590425},{"id":1989,"originId":"56f38c8c0a5a2cfb3ad149f1","articleId":323,"userId":928,"content":"Github:Conan9912345\r\nemail:yinshule@163.com\r\n报名参加活动，如有需要，我可以做一些前端方面的小分享，，","createdAt":1458801804435},{"id":1990,"originId":"56f38dee0a5a2cfb3ad149f5","articleId":323,"userId":929,"content":"github:gengfire\r\nemail:gengfire@foxmail.com","createdAt":1458802158296},{"id":1991,"originId":"56f38e6302c237a73a1a8afe","articleId":323,"userId":930,"content":"报名。。。。\r\nGithub：Seven0711\r\nemail：1362752394@qq.com","createdAt":1458802275183},{"id":1992,"originId":"56f38fca532839c33a99d1a5","articleId":323,"userId":931,"content":"github:dragonGreat\r\nemail:dragongreat111@gmai.com","createdAt":1458802634829},{"id":1993,"originId":"56f390230a5a2cfb3ad149f9","articleId":323,"userId":932,"content":"github: yhb241\r\nemail: yhb241@163.com\r\n报名...","createdAt":1458802723783},{"id":1994,"originId":"56f393e0fa2ee8df3a650589","articleId":323,"userId":933,"content":"github: xosuperpig\r\nemail: zombieyang@tencent.com","createdAt":1458803680519},{"id":1995,"originId":"56f3996fdd3dade17726fe74","articleId":323,"userId":934,"content":"报名\r\ngithub: cavacn\r\nemail: admin@cavacn.com\r\n\r\n","createdAt":1458805103183},{"id":1996,"originId":"56f399dbdd3dade17726fe76","articleId":323,"userId":935,"content":"报名\r\ngithub: boylufeng20141007\r\nemail: boylufeng@gmail.com","createdAt":1458805211211},{"id":1997,"originId":"56f39c8fd1ebfb8d77aecd9f","articleId":323,"userId":23,"content":"AsherTan\r\njxtanzhiqiang@gmail.com","createdAt":1458805903959},{"id":1998,"originId":"56f39f39dd3dade17726fe7c","articleId":323,"userId":936,"content":"报名：\r\nseasonxin6190\r\nseasonxin619@163.com","createdAt":1458806585730},{"id":1999,"originId":"56f3a5a6ce1f18c57719a4c6","articleId":323,"userId":937,"content":"报名：\r\ngithub: SimonWuQM\r\nemail: simon007wu@gmail.com","createdAt":1458808230730},{"id":2000,"originId":"56f3b37ace1f18c57719a4d7","articleId":323,"userId":938,"content":"报名：\r\ngithub: Ganother\r\nemail: wangcong_1993@foxmail.com","createdAt":1458811770260},{"id":2001,"originId":"56f3b42bce1f18c57719a4d9","articleId":323,"userId":939,"content":"github: finmily\r\nemail: fblhalo@gmail.com\r\n期待","createdAt":1458811947128},{"id":2002,"originId":"56f3b4a7dd3dade17726fe88","articleId":323,"userId":940,"content":"支持支持","createdAt":1458812071335},{"id":2003,"originId":"56f3b5ff9f24439945cd3f28","articleId":323,"userId":941,"content":"报名： \r\ngithub: Chalin-Shi\r\nemail: 15926180298@163.com","createdAt":1458812415283},{"id":2004,"originId":"56f3b85875c1c361451a8575","articleId":323,"userId":942,"content":"报名：\r\ngithub: json-Li\r\nemail: jsonfront@163.com","createdAt":1458813016123},{"id":2005,"originId":"56f3b8968f72be7d45471eb2","articleId":323,"userId":943,"content":"报名，谢谢~\r\nFujiBilly\r\nccb992654908@gmail.com OR 13751378117@163.com OR 992654908@qq.com","createdAt":1458813078079},{"id":2006,"originId":"56f3c9719f24439945cd3f33","articleId":323,"userId":944,"content":"github: latelx64\r\nemail: latelx64@icloud.com","createdAt":1458817393908},{"id":2007,"originId":"56f3c99475c1c361451a8578","articleId":323,"userId":945,"content":"github: miwoy\r\nemail: miwoes@163.com","createdAt":1458817428337},{"id":2008,"originId":"56f3ca1f9f24439945cd3f37","articleId":323,"userId":946,"content":"报名\r\ncifer\r\nemail: zeshare@qq.com","createdAt":1458817567924},{"id":2009,"originId":"56f3ca2875c1c361451a857a","articleId":323,"userId":947,"content":"github:tagsT\r\nemail:xiaochun123@qq.com","createdAt":1458817576329},{"id":2010,"originId":"56f3f66e75c1c361451a858a","articleId":323,"userId":948,"content":"github:wwgc\r\nemail:j60017268@gmail.com","createdAt":1458828910049},{"id":2011,"originId":"56f3f8709f24439945cd3f3d","articleId":323,"userId":949,"content":"github：hoorace\r\nemail：longtask#qq.com","createdAt":1458829424798},{"id":2012,"originId":"56f402739f24439945cd3f43","articleId":323,"userId":576,"content":"**报名**\r\nGitHub: JerryC8080\r\nEmail: huangjerryc@gmail.com","createdAt":1458831987809},{"id":2013,"originId":"56f4098b9f24439945cd3f46","articleId":323,"userId":950,"content":"报名：\r\nGitHub： hiddaorear\r\nEmail: hiddaorear#outlook.com\r\n谢谢分享。","createdAt":1458833803348},{"id":2014,"originId":"56f414ada294f4b545961b17","articleId":323,"userId":951,"content":"github: alpha-huang\r\nemail: huangdong2015@outlook.com","createdAt":1458836653360},{"id":2015,"originId":"56f426c6a294f4b545961b1a","articleId":323,"userId":18,"content":"[@JerryC8080](/user/JerryC8080) 你在深圳？","createdAt":1458841286104},{"id":2016,"originId":"56f478868f72be7d45471ede","articleId":323,"userId":620,"content":"GitHub：binggg\r\n Email: being99@qq.com","createdAt":1458862214054},{"id":2017,"originId":"56f4937575c1c361451a8598","articleId":323,"userId":952,"content":"github: booxood\r\nemail: liucw.mail@gmail.com","createdAt":1458869109984},{"id":2018,"originId":"56f4944375c1c361451a859a","articleId":323,"userId":576,"content":"[@alsotang](/user/alsotang) 在深圳的对面「珠海」😏","createdAt":1458869315809},{"id":2019,"originId":"56f49b5e75c1c361451a859f","articleId":323,"userId":953,"content":"github : zwlcoding\r\n邮箱: porzhang@gmail.com","createdAt":1458871134044},{"id":2020,"originId":"56f49f5e75c1c361451a85a2","articleId":323,"userId":954,"content":"github:tl_snow\r\n邮箱：335069951@qq.com","createdAt":1458872158182},{"id":2021,"originId":"56f4ac109f24439945cd3f6d","articleId":323,"userId":955,"content":"啥时候到上海？","createdAt":1458875408085},{"id":2022,"originId":"56f4ae2e8f72be7d45471ef3","articleId":323,"userId":956,"content":"github: nepaul\r\ne-mail: xs.nepaul@gmail.com","createdAt":1458875950463},{"id":2023,"originId":"56f4ae9e8f72be7d45471ef5","articleId":323,"userId":957,"content":"报名。 最近正在研究用node做react同构网站\r\n1.  [alexsunxl](https://github.com/alexsunxl)\r\n2.  alexsunxl@163.com","createdAt":1458876062749},{"id":2024,"originId":"56f4b46fa294f4b545961b35","articleId":323,"userId":958,"content":"报名：\r\ngithub:fyudeyinji2015\r\ne-mail:fyudeyinji@163.com","createdAt":1458877551239},{"id":2025,"originId":"56f4ba508f72be7d45471ef9","articleId":323,"userId":959,"content":"报名：\r\ngithub:JohnLi1989\r\nemail:lj85046673@hotmail.com\r\n","createdAt":1458879056300},{"id":2026,"originId":"56f4c28e8f72be7d45471efc","articleId":323,"userId":379,"content":"github     wlf92\r\n邮箱    wlf92@163.com","createdAt":1458881166513},{"id":2027,"originId":"56f4cfa09f24439945cd3f82","articleId":323,"userId":960,"content":"github  tielang2253\r\nemail   927547779@qq.com","createdAt":1458884512594},{"id":2028,"originId":"56f4d1429f24439945cd3f84","articleId":323,"userId":961,"content":"名额满了没？\r\n报名：\r\nGithub: wusuopu\r\nEmail: admin@longchangjin.cn","createdAt":1458884930806},{"id":2029,"originId":"56f4d1849f24439945cd3f86","articleId":323,"userId":18,"content":"[@wusuopu](/user/wusuopu) 200人场地，够的","createdAt":1458884996961},{"id":2030,"originId":"56f4de0ba54df2e06e64358b","articleId":323,"userId":962,"content":"#### 报名\r\ngit :  Gemicat\r\nem : gemicat@163.com","createdAt":1458888203918},{"id":2031,"originId":"56f4e02e3291db186f1a7b97","articleId":323,"userId":963,"content":"报名:\r\ngithub:hua345\r\nemail:2290910211@qq.com","createdAt":1458888750281},{"id":2032,"originId":"56f4f30f3291db186f1a7ba4","articleId":323,"userId":964,"content":"github: CAIN\r\nEmail: lzh5531773@qq.com","createdAt":1458893583383},{"id":2033,"originId":"56f521049753c3386fd24f11","articleId":323,"userId":317,"content":"git :leehomeok\r\nemail:313958965@qq.com\r\n报名","createdAt":1458905348872},{"id":2034,"originId":"56f53b523291db186f1a7bc3","articleId":323,"userId":965,"content":"报名：\r\nGithub: rupertqin\r\nEmail: rupert.qing a t gmail.com","createdAt":1458912082282},{"id":2035,"originId":"56f5589f3291db186f1a7bcf","articleId":323,"userId":966,"content":"报名：\r\nGithub: IssicLzx\r\nEmail: 1162993192@qq.com","createdAt":1458919583257},{"id":2036,"originId":"56f5e2543291db186f1a7bd4","articleId":323,"userId":967,"content":"报名：\r\nGithub: gaohailang\r\nEmail: ghlndslpsp@gmail.com","createdAt":1458954836458},{"id":2037,"originId":"56f5fc8f3291db186f1a7bdc","articleId":323,"userId":968,"content":"报名：\r\nGithub: hankewins\r\nEmail: me@hankewins.com","createdAt":1458961551461},{"id":2038,"originId":"56f626e0a54df2e06e6435dc","articleId":323,"userId":969,"content":"报名： \r\nGithub: zheiop\r\nEmail: lonelylookfor@gmail.com","createdAt":1458972384194},{"id":2039,"originId":"56f63a7987688ffc6e356e80","articleId":323,"userId":970,"content":"就在附近~\r\nWilliam17\r\nsuperbill2012{at}qq.com","createdAt":1458977401913},{"id":2040,"originId":"56f64bb2a54df2e06e6435e9","articleId":323,"userId":971,"content":"报名\r\nwebbought\r\nwanhao.huang@outlook.com","createdAt":1458981810741},{"id":2041,"originId":"56f6500e9753c3386fd24f40","articleId":323,"userId":972,"content":"这天，我生日！","createdAt":1458982926856},{"id":2042,"originId":"56f6893a3291db186f1a7bfc","articleId":323,"userId":973,"content":"报名\r\ngit:wikelgc\r\nQQemail:1245788423@qq.com\r\n","createdAt":1458997562442},{"id":2043,"originId":"56f68ce29753c3386fd24f4b","articleId":323,"userId":380,"content":"感觉去不了了，我在杭州等着下一次😂😂\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1458998498163},{"id":2044,"originId":"56f79a1ab819f527325e7851","articleId":323,"userId":974,"content":"报名\r\n1.github: yangqiong\r\n2.邮箱：yangqionggo@icloud.com","createdAt":1459067418692},{"id":2045,"originId":"56f7a266b819f527325e7854","articleId":323,"userId":975,"content":"周六有课来不了。。后面会有视频吗","createdAt":1459069542862},{"id":2046,"originId":"56f81bd732c4bdf531357280","articleId":323,"userId":976,"content":"报名\r\n1.github: green68599\r\n2.邮箱：540476284@qq.com","createdAt":1459100631035},{"id":2047,"originId":"56f8793b32c4bdf531357284","articleId":323,"userId":977,"content":"**报名**\r\n1. github：y3093\r\n2. 邮箱：y3093@163.com","createdAt":1459124539360},{"id":2048,"originId":"56f88926e2d0ba0b323886f9","articleId":323,"userId":978,"content":"报名\r\n\r\n1、github：Roonie1\r\n2、邮箱：wangliuzhan163@163.com","createdAt":1459128614203},{"id":2049,"originId":"56f93f1793a6967159553961","articleId":323,"userId":979,"content":"报名\r\n1. github:ChenYangY\r\n2.邮箱:hn2cyy@163.com","createdAt":1459175191821},{"id":2050,"originId":"56f954308a612c5559d169ad","articleId":323,"userId":980,"content":"报名\r\nGitHub: myxvisual\r\n邮箱: myxvisual@live.com","createdAt":1459180592532},{"id":2051,"originId":"56f9ee478265278d59c7e279","articleId":323,"userId":981,"content":"报名\r\nGitHub: boyishwei\r\n邮箱: boyishwei@gmail.com","createdAt":1459220039775},{"id":2052,"originId":"56fa08b58265278d59c7e286","articleId":323,"userId":982,"content":"caiwangqin\r\nme@caiwangqin.com\r\n","createdAt":1459226805632},{"id":2053,"originId":"56fa1f7b8265278d59c7e28f","articleId":323,"userId":983,"content":"Github：LelesBox\r\nEmail：[li_xiaoliang@foxmail.com](mailto:li_xiaoliang@foxmail.com)","createdAt":1459232635550},{"id":2054,"originId":"56fa202ac5f5b4a959e915f0","articleId":323,"userId":984,"content":"报名\r\nGithub：SevenInches\r\nEmail：[lijinghao333@aliyun.com](mailto:lijinghao333@aliyun.com)","createdAt":1459232810871},{"id":2055,"originId":"56fa3b2e8265278d59c7e2ab","articleId":323,"userId":985,"content":"Github: xiaoyuze88\r\nEmail: xiaoyuze88@gmail.com","createdAt":1459239726933},{"id":2056,"originId":"56fa8897c5f5b4a959e9162f","articleId":323,"userId":986,"content":"报名！！！\r\nGithub:soracc\r\nEmail:sorac2sora@gmail.com","createdAt":1459259543694},{"id":2057,"originId":"56fa8d2d93a69671595539d2","articleId":323,"userId":987,"content":"Github:isagoodguy,\r\nEmail:2416762675@qq.com","createdAt":1459260717964},{"id":2058,"originId":"56fa9ec7c5f5b4a959e91633","articleId":323,"userId":988,"content":"github:amghost\r\nemail:zhengweitao93@gmail.com\r\n到时候可以直接过去了~~","createdAt":1459265223337},{"id":2059,"originId":"56faaf5993a69671595539da","articleId":323,"userId":931,"content":"请问一下，是报名了就可以去了，还是说？？","createdAt":1459269465295},{"id":2060,"originId":"56fabb61c5f5b4a959e9163a","articleId":323,"userId":18,"content":"[@dragonGreat](/user/dragonGreat) 报名了就能来。报名只是简单统计一下人数，没有门槛限制。","createdAt":1459272545144},{"id":2061,"originId":"56fb4280c5f5b4a959e91655","articleId":323,"userId":989,"content":"报名~\r\ngithub    hujiwei\r\nemail     hujiwei.87@gmail.com\r\n近距离看大神们(*^__^*) ","createdAt":1459307136171},{"id":2062,"originId":"56fb8402c5f5b4a959e91686","articleId":323,"userId":990,"content":"报名--\r\nzhxh0313@gmail.com","createdAt":1459323906098},{"id":2063,"originId":"56fb9146c5f5b4a959e91693","articleId":323,"userId":991,"content":"有空我也过去听听，不知容得下那么多人么~~","createdAt":1459327302475},{"id":2064,"originId":"56fbceff8265278d59c7e336","articleId":323,"userId":992,"content":"报名\r\nlsw2013\r\n*******[@qq](/user/qq).com","createdAt":1459343103181},{"id":2065,"originId":"56fbd39bc5f5b4a959e916b4","articleId":323,"userId":18,"content":"[@qoredl](/user/qoredl) 200人场，够的","createdAt":1459344283282},{"id":2066,"originId":"56fc896c8265278d59c7e364","articleId":323,"userId":993,"content":"JeterLin\r\njeterlin2012@gmail.com","createdAt":1459390828706},{"id":2067,"originId":"56fc8b628a612c5559d16a8e","articleId":323,"userId":991,"content":"为何都是男大牛们讲课，有没有美女大牛讲课呢~~","createdAt":1459391330814},{"id":2068,"originId":"56fc98988265278d59c7e36d","articleId":323,"userId":994,"content":"Github: yanmingzhao\t\r\nEmail: zhaoyanmingfei@qq.com","createdAt":1459394712849},{"id":2069,"originId":"56fc9a848265278d59c7e36f","articleId":323,"userId":18,"content":"[@qoredl](/user/qoredl) 我想招个女开发都招不到，更别说女讲师了。。","createdAt":1459395204779},{"id":2070,"originId":"56fca9afc5f5b4a959e916e1","articleId":323,"userId":995,"content":"limfa\r\nlimfa@qq.com","createdAt":1459399087268},{"id":2071,"originId":"56fcd6b48265278d59c7e38b","articleId":323,"userId":931,"content":"[@alsotang](/user/alsotang) 好的","createdAt":1459410612941},{"id":2072,"originId":"56fcdcc5c5f5b4a959e91708","articleId":323,"userId":996,"content":"报个名\r\nteen@163.com","createdAt":1459412165889},{"id":2073,"originId":"56fcde7fc5f5b4a959e91711","articleId":323,"userId":997,"content":"报名\r\ngithub: carmanchang\r\nemail: karman330@gmail.com","createdAt":1459412607959},{"id":2074,"originId":"56fcec03c5f5b4a959e91719","articleId":323,"userId":998,"content":"报名\r\ngithub:pusongyang\r\nemail:uk@turingcat.com","createdAt":1459416067078},{"id":2075,"originId":"56fd55b8c5f5b4a959e91749","articleId":323,"userId":999,"content":"沪啥时候有","createdAt":1459443128510},{"id":2076,"originId":"56fde65e93a6967159553ae1","articleId":323,"userId":1000,"content":"报名\r\ngithub danwell7\r\nemail: danwell@live.cn","createdAt":1459480158822},{"id":2077,"originId":"56fdeb0a8a612c5559d16b0f","articleId":323,"userId":1001,"content":"报名\r\ngithub : LukeCG\r\n邮箱: cheng765961445@gmail.com","createdAt":1459481354962},{"id":2078,"originId":"56fe0b65c5f5b4a959e91775","articleId":323,"userId":1002,"content":"报名\r\ngithub：qiushijie\r\n邮箱：qiushijie@outlook.com","createdAt":1459489637484},{"id":2079,"originId":"56fe16a78265278d59c7e416","articleId":323,"userId":1003,"content":"报名\r\nGithub: chioin\r\n邮箱: ycr668_AT_gmail.com","createdAt":1459492519997},{"id":2080,"originId":"56fe2610c5f5b4a959e9178b","articleId":323,"userId":1004,"content":"报名\r\nCHNLion\r\nchnlion#gmail.com","createdAt":1459496464410},{"id":2081,"originId":"56fe268cc5f5b4a959e9178e","articleId":323,"userId":1005,"content":"报名：\r\ngithub:winsky027\r\n邮箱：orandofang@qq.com","createdAt":1459496588312},{"id":2082,"originId":"56fe28b393a6967159553b1b","articleId":323,"userId":1006,"content":"* Github：FengYuHe\r\n* 邮箱：heyufeng8080@gmail.com","createdAt":1459497139658},{"id":2083,"originId":"56fe28b68265278d59c7e429","articleId":323,"userId":1007,"content":"报名：\r\ngithub:  [jovey-zheng](https://github.com/jovey-zheng)\r\nEmail：jovey.zheng@qq.com","createdAt":1459497142702},{"id":2084,"originId":"56fe2a11c5f5b4a959e91790","articleId":323,"userId":1008,"content":"报名\r\nGithub:linan-syner\r\nEmail:linan#synergister.com","createdAt":1459497489824},{"id":2085,"originId":"56fe2bb0c5f5b4a959e91792","articleId":323,"userId":1009,"content":"报名\r\nGithub:wjl00\r\nEmail:277483014@qq.com","createdAt":1459497904240},{"id":2086,"originId":"56fe30758265278d59c7e42d","articleId":323,"userId":1010,"content":"报名\r\nHeldenFu\r\nheldenfu#synergister.com","createdAt":1459499125932},{"id":2087,"originId":"56fe319a8265278d59c7e42f","articleId":323,"userId":991,"content":"忘了写上报名号了\r\nGithub:qoredl\r\nEmail:qoredl@163.com\r\n先占个位，到时要是有空就过去~~","createdAt":1459499418166},{"id":2088,"originId":"56fea2b893a6967159553b52","articleId":323,"userId":1011,"content":"github:ty4z2008\r\nemail:ty4z2008@gmail.com","createdAt":1459528376550},{"id":2089,"originId":"56ff5ddec5f5b4a959e917cb","articleId":323,"userId":1012,"content":"github:yudawei1230\r\nemail:374149489@qq.com\r\n\r\n一定要参加啊啊啊啊啊~~~~~~~~~~~~~~","createdAt":1459576286136},{"id":2090,"originId":"56ff5de8c5f5b4a959e917cd","articleId":323,"userId":1013,"content":"Github:Jarvin-Guan\r\nEmail:jarivn_g@126.com","createdAt":1459576296375},{"id":2091,"originId":"5700dd668265278d59c7e48b","articleId":323,"userId":1014,"content":"BruceWangNo1\r\n2819931971@qq.com","createdAt":1459674470236},{"id":2092,"originId":"5700e24e8265278d59c7e48d","articleId":323,"userId":1015,"content":"mark","createdAt":1459675726930},{"id":2093,"originId":"5701cb4f93a6967159553bab","articleId":323,"userId":1016,"content":"报名\r\ngithub: liaoyu\r\nemail:  liaoyu753@163.com","createdAt":1459735375577},{"id":2094,"originId":"570299458a612c5559d16bdf","articleId":323,"userId":1017,"content":"报名\r\nGithub：ucoker\r\nEmail: ucoker@ucoker.com","createdAt":1459788101337},{"id":2095,"originId":"570319868a612c5559d16bf8","articleId":323,"userId":48,"content":"报名\r\nGithub：kiroChen\r\nEmail: 330558685@qq.com","createdAt":1459820934316},{"id":2096,"originId":"570322b093a6967159553be2","articleId":323,"userId":1018,"content":"报名\r\nlpcong\r\n441884957@qq.com","createdAt":1459823280865},{"id":2097,"originId":"57032e868265278d59c7e4e0","articleId":323,"userId":1019,"content":"报名\r\nGithub：yige142\r\nEmail: 279290309@qq.com","createdAt":1459826310033},{"id":2098,"originId":"570339bac5f5b4a959e91872","articleId":323,"userId":1020,"content":"github.com/iamcc\r\nsic.hcq@gmail.com","createdAt":1459829178130},{"id":2099,"originId":"57033a808265278d59c7e4e7","articleId":323,"userId":1021,"content":"github:  [flfwzgl](https://github.com/flfwzgl)\r\nemail: [flfwzgl@qq.com](mailto:flfwzgl@qq.com)","createdAt":1459829376228},{"id":2100,"originId":"5703444c93a6967159553bf2","articleId":323,"userId":1022,"content":"报名:目前在做nodejs和react方面的工作.\r\ngithub: jokerdrake\r\nEmail: joker92919@gmail.com","createdAt":1459831884966},{"id":2101,"originId":"5703530c8265278d59c7e4ed","articleId":323,"userId":1023,"content":"报名：\r\ngithub:https://github.com/rumbleKK\r\nEmail:395134629@qq.com","createdAt":1459835660509},{"id":2102,"originId":"570360b48265278d59c7e4f6","articleId":323,"userId":1024,"content":"报名：\r\ngithub:shenxinghua\r\nEmail:348914779@qq.com","createdAt":1459839156589},{"id":2103,"originId":"570368488265278d59c7e502","articleId":323,"userId":1025,"content":"github：catericy\r\nEmail：catpink8@vip.qq.com","createdAt":1459841096300},{"id":2104,"originId":"5703832c93a6967159553c22","articleId":323,"userId":1026,"content":"github：liugc\r\nEmail：610368688@qq.com","createdAt":1459847980884},{"id":2105,"originId":"570462108a612c5559d16c3d","articleId":323,"userId":1027,"content":"github: ixoywell\r\nemail: ixoywell#gmail.com","createdAt":1459905040526},{"id":2106,"originId":"570481608a612c5559d16c57","articleId":323,"userId":1028,"content":"github: zzbo\r\nemail: bodenyes@qq.com","createdAt":1459913056929},{"id":2107,"originId":"570481898265278d59c7e54b","articleId":323,"userId":1029,"content":"github: moonye6\r\nemail: 464461539@qq.com","createdAt":1459913097658},{"id":2108,"originId":"570485178265278d59c7e551","articleId":323,"userId":1030,"content":"报名：\r\nGithub: tooone\r\nEmail: yhjdiy@gmail.com","createdAt":1459914007704},{"id":2109,"originId":"570485a8c5f5b4a959e918ce","articleId":323,"userId":1031,"content":"github: coolriver\r\nemail: 670644959@qq.com","createdAt":1459914152374},{"id":2110,"originId":"5704a2dd93a6967159553c4e","articleId":323,"userId":1032,"content":"github: bojueWjt\r\nemail: jiataotx@163.com","createdAt":1459921629573},{"id":2111,"originId":"5704a36c8265278d59c7e562","articleId":323,"userId":1033,"content":"github: Hedgehogking\r\nemail: 465016678@qq.com","createdAt":1459921772495},{"id":2112,"originId":"5704a6f58265278d59c7e569","articleId":323,"userId":1034,"content":"github.com/24365\r\nemail: me@zengxingqi.com\r\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1459922677747},{"id":2113,"originId":"5704a6fb8a612c5559d16c69","articleId":323,"userId":1035,"content":"github: JudonH\r\nemail: judonh@163.com","createdAt":1459922683435},{"id":2114,"originId":"5704ebf38a612c5559d16c8a","articleId":323,"userId":1036,"content":"mark!!!\r\ngithub:longjichun\r\nemail:longhtml5@163.com","createdAt":1459940339795},{"id":2115,"originId":"5705cc2493a6967159553c98","articleId":323,"userId":1037,"content":"报名!!\r\ngithub: CatalystDP\r\nemail: 469589860@qq.com","createdAt":1459997732618},{"id":2116,"originId":"5705ccbfc5f5b4a959e91928","articleId":323,"userId":1038,"content":"github：https://github.com/babyfacer0104\r\nemail: 492588775@qq.com","createdAt":1459997887214},{"id":2117,"originId":"5705d04ac5f5b4a959e9192c","articleId":323,"userId":1039,"content":"github：liufubin\r\nemail: liufubinz@gmail.com","createdAt":1459998794091},{"id":2118,"originId":"5705d237c5f5b4a959e91931","articleId":323,"userId":1040,"content":"报名\r\ngithub: https://github.com/VaJoy\r\nemail: vajoy@qq.com","createdAt":1459999287430},{"id":2119,"originId":"5705d2d2c5f5b4a959e91935","articleId":323,"userId":1041,"content":"github: https://github.com/yeehone\r\nemail: yeehone@gmail.com","createdAt":1459999442698},{"id":2120,"originId":"5705da828265278d59c7e5d8","articleId":323,"userId":1042,"content":"GitHub: hotcha\r\nEmail: hotcha.py#gmail.com","createdAt":1460001410967},{"id":2121,"originId":"5705f17e93a6967159553cb3","articleId":323,"userId":1043,"content":" 报个名\r\n github:[yueisme](https://github.com/yueisme)\r\n email: [yue_isme@foxmail.com](mailto:yue_isme@foxmail.com)","createdAt":1460007294019},{"id":2122,"originId":"5705f1f6c5f5b4a959e9193f","articleId":323,"userId":1044,"content":"github：chaozh\r\nemail：zhenghart@icloud.com","createdAt":1460007414932},{"id":2123,"originId":"5705f28893a6967159553cb5","articleId":323,"userId":1045,"content":"github：Wilberway\r\nemail：644645377@qq.com","createdAt":1460007560517},{"id":2124,"originId":"57062a99c5f5b4a959e9195f","articleId":323,"userId":1046,"content":"github：biqing\r\nemail：biqing.kwok@qq.com","createdAt":1460021913931},{"id":2125,"originId":"5706483993a6967159553cf6","articleId":323,"userId":1047,"content":"github:neverlandzl\r\nemail:313382197@qq.com","createdAt":1460029497273},{"id":2126,"originId":"57064ce9c5f5b4a959e91969","articleId":323,"userId":896,"content":"Axighi\t\r\nazriel.liang@gmail.com","createdAt":1460030697355},{"id":2127,"originId":"57065596c5f5b4a959e9196e","articleId":323,"userId":1048,"content":"报名：\r\ngithub:cblh\r\nemail:chenbeiliuhuo@gmail.com","createdAt":1460032918045},{"id":2128,"originId":"570662908a612c5559d16d0a","articleId":323,"userId":1015,"content":"wuliang1992\r\nw670847695@163.com","createdAt":1460036240995},{"id":2129,"originId":"57066e4693a6967159553d00","articleId":323,"userId":1049,"content":"kennyluck\r\nkennyluckco@gmail.com","createdAt":1460039238000},{"id":2130,"originId":"5706867893a6967159553d07","articleId":323,"userId":1050,"content":"github:qiantang.    email:qiantangjiang@live.com\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1460045432641},{"id":2131,"originId":"57068d1c8a612c5559d16d13","articleId":323,"userId":655,"content":"github:awong1900\r\nmail: wangtengoo7@gmail.com","createdAt":1460047132990},{"id":2132,"originId":"57068e598265278d59c7e62c","articleId":323,"userId":1051,"content":"Github:lanselambor\r\n757016515@qq.com","createdAt":1460047449059},{"id":2133,"originId":"57069e0d8a612c5559d16d19","articleId":323,"userId":1052,"content":"都194了？还有机会报名么\r\nGithub:ApeNirvana\r\n272332472@qq.com\r\n想争取这次机会，现在凌晨1:50了，必须抓住这个机会","createdAt":1460051469045},{"id":2134,"originId":"57070a168265278d59c7e633","articleId":323,"userId":1053,"content":"github:qlboob\r\nemail:ql2008@126.com","createdAt":1460079126303},{"id":2135,"originId":"570715c78a612c5559d16d23","articleId":323,"userId":1054,"content":"报名报名啊，{github:liunix61;\t\temail:ly87802541@gmail.com}","createdAt":1460082119599},{"id":2136,"originId":"5707194093a6967159553d1d","articleId":323,"userId":948,"content":"怎么确认报名生效了？报名了好像还没答复。","createdAt":1460083008343},{"id":2137,"originId":"57071c31c5f5b4a959e91999","articleId":323,"userId":1055,"content":"will-min\r\nwlm195@icloud.com","createdAt":1460083761764},{"id":2138,"originId":"570722b28265278d59c7e64a","articleId":323,"userId":1056,"content":"rongwenjin1993@gmail.com","createdAt":1460085426025},{"id":2139,"originId":"57073149528439031edc7e82","articleId":323,"userId":1057,"content":"jyanchen ijyan.chen@gmail.com","createdAt":1460089161195},{"id":2140,"originId":"57074d0b528439031edc7e93","articleId":323,"userId":1058,"content":"报名\r\nzixiinlian\r\njialee63@hotmail.com","createdAt":1460096267406},{"id":2141,"originId":"57074d7a528439031edc7e95","articleId":323,"userId":1059,"content":"报名\r\ngithub:SunShinewyf\r\n2632807692@qq.com","createdAt":1460096378334},{"id":2142,"originId":"570769ffde442ee71db36b2a","articleId":323,"userId":1060,"content":"github: Sunny-L\r\nemail: 260851801@qq.com","createdAt":1460103679326},{"id":2143,"originId":"570771520928c91f1e7784e4","articleId":323,"userId":1061,"content":"lizhongliang\r\n2076398354@qq.com","createdAt":1460105554943},{"id":2144,"originId":"57077543cecd91cb1def782c","articleId":323,"userId":1062,"content":"github：jaking-Z\r\nemail：381158345@qq.com","createdAt":1460106563712},{"id":2145,"originId":"5707833bcecd91cb1def7835","articleId":323,"userId":1063,"content":"github: caibinterry\r\nemail: 1097311105@qq.com","createdAt":1460110139112},{"id":2146,"originId":"5707cb25de442ee71db36b50","articleId":323,"userId":1064,"content":"用户名：hztzsz\r\n邮箱：295917843@qq.com\r\n","createdAt":1460128549457},{"id":2147,"originId":"570858ee0928c91f1e77851a","articleId":323,"userId":1065,"content":"github: ppkidpp\r\nemail: ctx813@gmail.com","createdAt":1460164846537},{"id":2148,"originId":"5708629cde442ee71db36b5d","articleId":323,"userId":1066,"content":"github:anderw\r\nemail:zhao18684744099@gmail.com","createdAt":1460167324269},{"id":2149,"originId":"5708770cde442ee71db36b6e","articleId":323,"userId":1012,"content":"github: Richole\r\nemail: 120831070@qq.com","createdAt":1460172556480},{"id":2150,"originId":"57087a73528439031edc7eef","articleId":323,"userId":1067,"content":"DDRoxanne   826587009@qq.com","createdAt":1460173427191},{"id":2151,"originId":"57087be8cecd91cb1def7877","articleId":323,"userId":1068,"content":"haozi23333\r\nhaozi23333@gmail.com","createdAt":1460173800682},{"id":2152,"originId":"570889590928c91f1e778521","articleId":323,"userId":1069,"content":"designer.shen@gmail.com","createdAt":1460177241951},{"id":2153,"originId":"57088d9dde442ee71db36b7b","articleId":323,"userId":970,"content":"William17  临时有事去不了","createdAt":1460178333609},{"id":2154,"originId":"57089817528439031edc7ef6","articleId":323,"userId":1070,"content":"yinshawnrao\r\nyinshawnrao@tencent.com","createdAt":1460181015949},{"id":2155,"originId":"5f2379404b61050e36e7d57e","articleId":323,"userId":440,"content":"又四年了，今年或者明年考虑在深圳/广州办一次吗 ~ [@alsotang](/user/alsotang) ","createdAt":1596160320845},{"id":2156,"originId":"5f23802cf0739b0e62d1300d","articleId":323,"userId":18,"content":"[@zhoumingque](/user/zhoumingque) 目前没这个打算","createdAt":1596162092780},{"id":2157,"originId":"5ef944ab13f8b244e57cbf1f","articleId":324,"userId":145,"content":"之前因为没有找到合适的 `Apollo` 客户端(主要是目前是ts项目, 找了几个都没有types文件), 自己就抽空写了个. 然后模仿 `java` 客户端加了个 `change` 事件, 特别是对比`json`, 配置的不同, 感觉写的好乱. 看了一下楼主的这种热更新方法也挺好的.","createdAt":1593394347280},{"id":2158,"originId":"5ef999d013f8b244e57cc14b","articleId":324,"userId":1071,"content":"支持支持，之前也是使用Apollo作为配置中心，所以我们也造了一个，不过是中间件的形式，方便koa使用\r\n[think\\_apollo](https://github.com/thinkkoa/think_apollo)","createdAt":1593416144388},{"id":2159,"originId":"5f032a94b2a7c073cb32ada9","articleId":324,"userId":123,"content":"[@zhangxh1023](/user/zhangxh1023) 谢谢","createdAt":1594043028760},{"id":2160,"originId":"5f236030f0739b0e62d12f56","articleId":324,"userId":123,"content":"[@richenlin](/user/richenlin) 👍","createdAt":1596153904914},{"id":2161,"originId":"5f20ff9c4b61050e36e7cf73","articleId":328,"userId":11,"content":"做的挺用心的","createdAt":1595998108550},{"id":2162,"originId":"5f213492f0739b0e62d12b2d","articleId":328,"userId":753,"content":"**王婆卖瓜？**","createdAt":1596011666630},{"id":2163,"originId":"5f20de16f0739b0e62d12943","articleId":329,"userId":148,"content":"pm2会自动将请求均分到不同的进程里? pm2做了负载均衡的工作？","createdAt":1595989526291},{"id":2164,"originId":"5f210751f0739b0e62d12a29","articleId":329,"userId":148,"content":"[@muyoucun557](/user/muyoucun557) 我out了，看了下文档确实是这样，好奇是怎么实现的，继续学习一下","createdAt":1596000081926},{"id":2165,"originId":"5f210dc2f0739b0e62d12a3c","articleId":329,"userId":358,"content":"跟 PM2 没啥关系，就是 Node Cluster 做的。","createdAt":1596001730078},{"id":2166,"originId":"5f1f7989f0739b0e62d125c9","articleId":330,"userId":21,"content":"最怕别人问“NodeJS 与Vue.Js有什么区别”\r\n别人期望的回答是“一个前端框架一个后端框架”\r\n而自己的内心的OS却是“草泥马奔腾”","createdAt":1595898249288},{"id":2167,"originId":"5f1f8cadf0739b0e62d1266c","articleId":330,"userId":525,"content":"\"NodeJS 与Vue.Js有什么区别\"\r\n这都不是一个数量级的东西","createdAt":1595903149493},{"id":2168,"originId":"5f1f988df0739b0e62d12695","articleId":330,"userId":22,"content":"\"NodeJS 与Vue.Js有什么区别\"? Whaaaaaaat?","createdAt":1595906189732},{"id":2169,"originId":"5f1f9966f0739b0e62d126a3","articleId":330,"userId":22,"content":"过分了，一共发了5篇文章。4篇是卖课的，1篇是灌水的","createdAt":1595906406127},{"id":2170,"originId":"5f1fa17f4b61050e36e7cc1d","articleId":330,"userId":358,"content":"最不能忍的是 `NodeJs` 这个拼写。","createdAt":1595908479607},{"id":2171,"originId":"5f1fe8b6f0739b0e62d127e8","articleId":330,"userId":1077,"content":"啊，我的眼！","createdAt":1595926710957},{"id":2172,"originId":"5f20138ef0739b0e62d1288b","articleId":330,"userId":89,"content":"[@justjavac](/user/justjavac) [@atian25](/user/atian25) 已经屏蔽了","createdAt":1595937678410},{"id":2173,"originId":"5f202452f0739b0e62d128a0","articleId":330,"userId":59,"content":"哎～～～","createdAt":1595941970664},{"id":2174,"originId":"5f06839f13f8b244e57cde25","articleId":333,"userId":134,"content":"卧槽. 和我一直想的一样","createdAt":1594262431386},{"id":2175,"originId":"5f0d25aae39d0e515220376d","articleId":333,"userId":1078,"content":"[@zhangshichuan](/user/zhangshichuan) 嘿嘿","createdAt":1594697130839},{"id":2176,"originId":"5f0d4e9bc92745511149122d","articleId":333,"userId":541,"content":"1. 多数不一定正确，这样会容不下少数意见\r\n2. 乌合之众 不是开玩笑\r\n3. 技术手段上你可能难以辨识真人","createdAt":1594707611439},{"id":2177,"originId":"5f0d6b3a4b61050e36e7a52d","articleId":333,"userId":1078,"content":"[@AnzerWall](/user/AnzerWall) \r\n\r\n1. 物以类聚，人以群分。很多事情没有对错，只有合适不合适。不适合自己的圈子，融进去了，也只会让所有人都不舒服。而且，我相信绝大多数人都有一定的包容不同意见的能力。投票更多的是给与他们抵制一些喷子，键盘侠，这种人的能力。\r\n2. 乌合之众也是众。你不能说喝咖啡就高雅，吃大蒜就低俗。我对社区的发展方向没有定位，只要不违法，能满足\"乌合之众\"的需求，他们爱聊什么聊什么，我都接受。\r\n3. 技术手段，的确很难辨识真人，但是可以提高刷票的门槛，通过手机号，验证码等等方式，如果有必要的话。但是这就一普通社区，花费太高的代价进行刷票没有太多的商业价值。所以暂时也不是太担心。","createdAt":1594714938292},{"id":2178,"originId":"5efdeb6ab2a7c073cb32a43a","articleId":334,"userId":21,"content":"防平台锁定还是很有吸引力啊。\r\n路漫漫，现在玩这个的还是少部分人，要不就是个人开发者，毕竟这个东西是真的便宜","createdAt":1593699178431},{"id":2179,"originId":"5f03021b13f8b244e57cd5a9","articleId":334,"userId":2,"content":"提效50%是怎么得出来的？🤔️","createdAt":1594032667220},{"id":2180,"originId":"5f0358b5b2a7c073cb32ae38","articleId":334,"userId":1079,"content":"冲鸭，之前 DI 的文档助我扫盲成功，致谢 MidwayJs 团队，+鸡腿。","createdAt":1594054837648},{"id":2181,"originId":"5f03836a13f8b244e57cd689","articleId":334,"userId":109,"content":"跟不上啊～","createdAt":1594065770481},{"id":2182,"originId":"5f048e29b2a7c073cb32b1e5","articleId":334,"userId":158,"content":"额~","createdAt":1594134057167},{"id":2183,"originId":"5f05867213f8b244e57cdc14","articleId":334,"userId":38,"content":"赞","createdAt":1594197618920},{"id":2184,"originId":"5f0d1427c927455111491118","articleId":334,"userId":1080,"content":"[@lellansin](/user/lellansin) 赞","createdAt":1594692647337},{"id":2185,"originId":"5f16aa514b61050e36e7b682","articleId":334,"userId":846,"content":"[@czy88840616](/user/czy88840616) ，Midway 的文档有打算翻译为英文吗？兴许 breword 可以帮忙。\r\n[breword](https://www.breword.com) 是一个专注翻译开源项目文档的翻译工具。\r\n提供 google translate 预翻译，可视化 editor, 协作审校，文档下载等功能，\r\n更加具体的内容可以查看网站首页介绍。","createdAt":1595320913914},{"id":2186,"originId":"5f16b716f0739b0e62d1131e","articleId":334,"userId":191,"content":"赞 棒棒的","createdAt":1595324182210},{"id":2187,"originId":"5f1ec07a4b61050e36e7c998","articleId":334,"userId":1076,"content":"[nodejs十大项目案例教程](http://study.tongpankt.com/course/22)","createdAt":1595850874947},{"id":2188,"originId":"5f1a91fd4b61050e36e7c180","articleId":335,"userId":90,"content":"最佳实践👍","createdAt":1595576829324},{"id":2189,"originId":"583c9f296add41f206000d53","articleId":336,"userId":281,"content":"👍\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1480367913044},{"id":2190,"originId":"583cd6403633d8307a162efd","articleId":336,"userId":89,"content":"gm画也可以的，不过依赖要多一些，你这个是一个好的解决方案","createdAt":1480382016420},{"id":2191,"originId":"583cdddfd1257d4c0dffaf84","articleId":336,"userId":315,"content":"good\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1480383967549},{"id":2192,"originId":"583ce626efa98d907a52817f","articleId":336,"userId":1081,"content":"[@i5ting](/user/i5ting) 之所以选择images就是因为不需要额外安装依赖,省却运维麻烦","createdAt":1480386086491},{"id":2193,"originId":"583d1abe254727447987ca5f","articleId":336,"userId":965,"content":"感觉可以防爬虫","createdAt":1480399550578},{"id":2194,"originId":"583e3078efa98d907a5281dd","articleId":336,"userId":218,"content":"Mark","createdAt":1480470648653},{"id":2195,"originId":"583e8df2d1257d4c0dffb006","articleId":336,"userId":146,"content":"发现好东西了","createdAt":1480494578144},{"id":2196,"originId":"583ed58e27d001d606ac1b00","articleId":336,"userId":148,"content":"mark一下，正在学习中。这段程序对我来说最难的还是异步的处理，正在加紧学习中。","createdAt":1480512910986},{"id":2197,"originId":"583f5f3d27d001d606ac1b0c","articleId":336,"userId":1082,"content":"mark，学习了\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1480548157684},{"id":2198,"originId":"5c808d6190c14711cc8cb193","articleId":336,"userId":44,"content":"mark","createdAt":1551928673949},{"id":2199,"originId":"5c81c67990c14711cc8cb60d","articleId":336,"userId":1083,"content":"Flash 和 H5 轻轻松松就能实现这个要求啊。","createdAt":1552008825835},{"id":2200,"originId":"5cdec6bb518e0954fc40f588","articleId":336,"userId":1084,"content":"楼主 你好  请问 mac 64位的不支持 images包 还有什么好的解决方案吗？\r\nerror：images does not yet support your current environment: OS X 64-bit ","createdAt":1558103739346},{"id":2201,"originId":"5ce27ddb518e0954fc40feaf","articleId":336,"userId":389,"content":"[@1049229070](/user/1049229070) 感觉[sharp](https://github.com/lovell/sharp)比image好用很多,你可以试一下, 楼主这个功能用sharp很容易实现, 性能比image要高很多, 因为可以不用调svg2png()这个方法, svg转png是真的很慢","createdAt":1558347227883},{"id":2202,"originId":"5ee6baf9b703280f0bcb97ba","articleId":336,"userId":388,"content":"[@nar142857](/user/nar142857) 我使用[sharp](https://github.com/lovell/sharp)重写了，代码奉上😂\r\n\r\n## 示例代码\r\n\r\n```js\r\nconst TextToSVG = require('text-to-svg');\r\nconst sharp = require('sharp')\r\nconsole.time(\"png\")\r\nconst textToSVG = TextToSVG.loadSync('./DENG.TTF');\r\n\r\nconst svg1 = textToSVG.getSVG('魏长青-人人讲App', {\r\n    x: 0,\r\n    y: 0,\r\n    fontSize: 24,\r\n    anchor: 'top',\r\n});\r\n\r\nconst svg2 = textToSVG.getSVG('邀请您参加', {\r\n    x: 0,\r\n    y: 0,\r\n    fontSize: 16,\r\n    anchor: 'top',\r\n});\r\n\r\nconst svg3 = textToSVG.getSVG('人人讲课程', {\r\n    x: 0,\r\n    y: 0,\r\n    fontSize: 32,\r\n    anchor: 'top',\r\n});\r\n\r\n\r\n(async function run(){\r\n    const sourceImg = sharp('./bg.png')\r\n    const target1Img = sharp(Buffer.from(svg1))\r\n    const target2Img = sharp(Buffer.from(svg2))\r\n    const target3Img = sharp(Buffer.from(svg3))\r\n    \r\n    const [\r\n        {width:sWidth , height:sHeight },\r\n        {width:t1Width , height:t1Height },\r\n        {width:t2Width , height:t2Height },\r\n        {width:t3Width , height:t3Height }]= await Promise.all([\r\n            sourceImg.metadata(),\r\n            target1Img.metadata(),\r\n            target2Img.metadata(),\r\n            target3Img.metadata()])\r\n\r\n    const offsetX1 = parseInt((sWidth - t1Width) / 2);\r\n    const offsetY1 = 200;\r\n    \r\n    const offsetX2 = parseInt((sWidth - t2Width) / 2);\r\n    const offsetY2 = 240;\r\n    \r\n    const offsetX3 = parseInt((sWidth - t3Width) / 2);\r\n    const offsetY3 = 270;\r\n\r\n    const [target1Buffer,target2Buffer,target3Buffer] = await Promise.all([\r\n        target1Img.toBuffer(),\r\n        target2Img.toBuffer(),\r\n        target3Img.toBuffer()])\r\n\r\n    await sourceImg\r\n        .composite([\r\n            {input:target1Buffer,left:offsetX1, top:offsetY1},\r\n            {input:target2Buffer,left:offsetX2, top:offsetY2},\r\n            {input:target3Buffer,left:offsetX3, top:offsetY3}\r\n        ])\r\n        .sharpen()\r\n        .withMetadata()\r\n        .png()\r\n        .toFile('./card.png')\r\n})()\r\n\r\nconsole.timeEnd(\"png\")\r\n```","createdAt":1592179449267},{"id":2203,"originId":"5f1e34174b61050e36e7c6f8","articleId":336,"userId":1085,"content":"为啥 需要从 text -> svg -> png，我看网上有从 text -> png 的库呢","createdAt":1595814935584},{"id":2204,"originId":"5f18ed634b61050e36e7bbd6","articleId":339,"userId":191,"content":"适合入门的朋友学习，已经入门的路过一哈就可以了…","createdAt":1595469155624},{"id":2205,"originId":"5f18e98af0739b0e62d1178b","articleId":340,"userId":1089,"content":"https://plugins.jetbrains.com/plugin/10841-run-configuration-for-typescript/","createdAt":1595468170956},{"id":2206,"originId":"5f0d1705c927455111491128","articleId":341,"userId":21,"content":"https://github.com/ipfs/ipfs\r\nhttps://github.com/kubernetes/kubernetes\r\nhttps://github.com/knative/docs","createdAt":1594693381357},{"id":2207,"originId":"5f0d2136c92745511149114d","articleId":341,"userId":523,"content":"👍","createdAt":1594695990287},{"id":2208,"originId":"5f0d230ec927455111491157","articleId":341,"userId":358,"content":"有反向翻译不？把中文文档翻译为英文","createdAt":1594696462656},{"id":2209,"originId":"5f0d257ce39d0e5152203768","articleId":341,"userId":846,"content":"[@atian25](/user/atian25) 可以的，中 -> 英的翻译效果会更好，欢迎提供需要翻译的项目。","createdAt":1594697084807},{"id":2210,"originId":"5f0e996d4b61050e36e7a8ec","articleId":341,"userId":358,"content":"[@92hackers](/user/92hackers) \r\n\r\nhttps://eggjs.github.io/\r\nhttps://eggjs.org/","createdAt":1594792301581},{"id":2211,"originId":"5f1110e04b61050e36e7adf2","articleId":341,"userId":11,"content":"[@92hackers](/user/92hackers) \r\n这个 https://www.yuque.com/hyj1991/easy-monitor 能加入考虑不。。。","createdAt":1594953952196},{"id":2212,"originId":"5f15479f4b61050e36e7b2f5","articleId":341,"userId":117,"content":"[https://github.com/sequelize/sequelize](https://github.com/sequelize/sequelize)","createdAt":1595230111847},{"id":2213,"originId":"5f169d3ef0739b0e62d1129c","articleId":341,"userId":846,"content":"[@hyj1991](/user/hyj1991) 目前只能支持抓取 github 上面托管的文档，在 yuque 上面的文档还不支持抓取。\r\n\r\n可以考虑将你的文档 copy 到 github 上的项目代码仓库内，或者新建一个文档项目专门用于存放 easy-monitor 的项目文档。\r\n\r\n这样翻译完了之后，可以提交 PR 合并到你的仓库中。","createdAt":1595317566532},{"id":2214,"originId":"5f16a2bb4b61050e36e7b656","articleId":341,"userId":11,"content":"[@92hackers](/user/92hackers) OK，我搞个仓库把文档放到 github 上，如果能帮忙翻译下真是太感谢了，我正在计划做 i18n，只是自己英文水平只能看不能写。。。怕被喷","createdAt":1595318971814},{"id":2215,"originId":"5f16a4e7f0739b0e62d112bf","articleId":341,"userId":846,"content":"[@chenkai0520](/user/chenkai0520) \r\n\r\nSequelize 在 breword 上面的中文文档翻译项目地址：\r\n\r\nhttps://www.breword.com/projects/5f16a188b1836a001beb781a/\r\n\r\n感兴趣你也可以来翻译，具体翻译指南可以点击网站顶部的 **快速入门**","createdAt":1595319527558},{"id":2216,"originId":"5f16a598f0739b0e62d112c6","articleId":341,"userId":846,"content":"[@hyj1991](/user/hyj1991) 没事，勇敢点，：）\r\n\r\n好的，然后你可以考虑在 breword 上面，用你的文档仓库地址创建一个英文文档翻译项目，（创建的时候，翻译语言记得选择 中文  ->  英文）\r\n\r\n然后，你就是该项目管理员了，我会跟我的小伙伴们翻译你的项目，同时，你可以审校翻译质量，提出修改意见等等。\r\n\r\n翻译完成后，你可以下载文档，自行部署，或者用 breword 默认提供的托管方式也可以。","createdAt":1595319704002},{"id":2217,"originId":"5f16a6884b61050e36e7b670","articleId":341,"userId":11,"content":"[@92hackers](/user/92hackers) 我试试看，这个是你们的产品？","createdAt":1595319944190},{"id":2218,"originId":"5f16a7a44b61050e36e7b67a","articleId":341,"userId":846,"content":"[@hyj1991](/user/hyj1991) 恩，想要把更多优秀的项目文档翻译到国内，同时随着国内开源社区的发展，也希望能够翻译更多国内项目的文档到英文世界。\r\n\r\n","createdAt":1595320228411},{"id":2219,"originId":"5f17ac124b61050e36e7b834","articleId":341,"userId":11,"content":"[@92hackers](/user/92hackers) 我试了下，像这种 https://github.com/hyj1991/easy-monitor/tree/master/docs 貌似没法正确同步过去，同步到了 2.x 的文档，而且文档也没提供 github 更新后同步的功能，这样子只能是一篮子买卖了，后续原始文档的更新的话也同步不过来","createdAt":1595386898639},{"id":2220,"originId":"5f17ad0af0739b0e62d114b8","articleId":341,"userId":11,"content":"[@92hackers](/user/92hackers) 另外最好能给个删除项目的功能，比如同步错误了啥的可以清理掉已创建的项目，有没有群呢，我同步文档的时候遇到了不少问题","createdAt":1595387146819},{"id":2221,"originId":"5f17b4f74b61050e36e7b859","articleId":341,"userId":846,"content":"[@hyj1991](/user/hyj1991) 给你的 gmail 邮箱发邮件了，咱们后续可以在邮件中沟通 easy-monitor 翻译相关问题。","createdAt":1595389175872},{"id":2222,"originId":"5f17bb384b61050e36e7b86d","articleId":341,"userId":846,"content":"[@atian25](/user/atian25) 文档已经抓取下来了。\r\n\r\n在 breword 上的项目地址为： https://www.breword.com/projects/5f17ba35b1836a001beb782c\r\n\r\n有个疑问：我看到 eggjs.org 上面已经有了英文文档，为何还要搞一个 eggjs.github.io 这个站点？\r\n","createdAt":1595390776296},{"id":2223,"originId":"5f17eba44b61050e36e7b945","articleId":341,"userId":358,"content":"[@92hackers](/user/92hackers) 前者组织过一次翻译，但感觉质量一般。\r\n\r\n后者是准备搞的新文档，不过还没写完。","createdAt":1595403172186},{"id":2224,"originId":"5f1835c8f0739b0e62d11680","articleId":341,"userId":846,"content":"哦，那么可以让 eggjs 团队人员直接在 breword 上面翻译就好了，集成了 google translate 预翻译功能，帮助提高翻译效率。\r\n同时在源文档更新时，能够直接在译文文档高亮处修改的部分，降低译文文档的维护成本。\r\n\r\neggjs 文档在 breword 上的翻译项目地址为: https://www.breword.com/projects/5f17ba35b1836a001beb782c\r\n\r\n目前项目管理员是我，后期有需要，可以将管理员转让给你们的团队人员，这样能够对译文质量有更好的把控。","createdAt":1595422152274},{"id":2225,"originId":"5f182b284b61050e36e7ba04","articleId":342,"userId":36,"content":"厉害了","createdAt":1595419432628},{"id":2226,"originId":"5f1793b14b61050e36e7b730","articleId":344,"userId":22,"content":"第一条和第二条的排版好像有问题","createdAt":1595380657969},{"id":2227,"originId":"5f150a554b61050e36e7b22c","articleId":348,"userId":254,"content":"嗯同道，我之前也做过很多socket\r\n\r\nunnue.com\r\n![方法.png](//static.cnodejs.org/Fv_mBuE3teeRUU683SWZtA3pYGRd)","createdAt":1595214421701},{"id":2228,"originId":"5f1252214b61050e36e7af30","articleId":349,"userId":99,"content":"还有视频\r\nhttps://www.bilibili.com/video/BV16f4y1U7oT?from=search&seid=14197697959667999007\r\n\r\nhttps://www.bilibili.com/video/BV11t411k79h?from=search&seid=14197697959667999007","createdAt":1595036193907},{"id":2229,"originId":"5f106563f0739b0e62d10a52","articleId":350,"userId":610,"content":"顶！！！","createdAt":1594910051108},{"id":2230,"originId":"5f0d805a4b61050e36e7a5cc","articleId":353,"userId":1078,"content":"有一个问题，恶意违规的帖子，你没有一个屏蔽机制。我也是实现了一个自治社区：https://www.u2pier.com ，基于投票机制。","createdAt":1594720346948},{"id":2231,"originId":"5f0e76334b61050e36e7a861","articleId":353,"userId":1091,"content":"[@GGBond1989](/user/GGBond1989) 你这个也挺好，很棒","createdAt":1594783283817},{"id":2232,"originId":"5f081aa3f9700d0938eb404d","articleId":355,"userId":636,"content":"今天打开一直CPU100%，大佬有空看一下呗。\r\n![image.png](//static.cnodejs.org/FoQ3hlLb8ngmd40RxHxrryFgNRUj)","createdAt":1594366627824},{"id":2233,"originId":"5f09ef7fc927455111490ba7","articleId":355,"userId":1093,"content":"[@blackmatch](/user/blackmatch) 尝试用下浏览器的无痕模式，禁用所有扩展后看看还有没有问题","createdAt":1594486655703},{"id":2234,"originId":"5f0c52bce39d0e51522036d4","articleId":355,"userId":636,"content":"[@star7th](/user/star7th) 我的问题，无痕模式下是正常的，懒得排查是哪个插件的问题了。谢谢哈","createdAt":1594643132110},{"id":2235,"originId":"5f05889d13f8b244e57cdc1c","articleId":357,"userId":134,"content":"umi不是可以一键开启 ssr 嘛","createdAt":1594198173324},{"id":2236,"originId":"5f03db0513f8b244e57cd76f","articleId":358,"userId":59,"content":"LeanCloud 做的也是这件事","createdAt":1594088197765},{"id":2237,"originId":"5f0413ddb2a7c073cb32afbf","articleId":358,"userId":89,"content":"  思路不错，把client也实现了。代码上可以优化一下，基于lerna会好一点。https://github.com/starkwang/quickr 这个的实现也不错的，可以参考","createdAt":1594102749634},{"id":2238,"originId":"5f0424b613f8b244e57cd8a7","articleId":358,"userId":1095,"content":"[@i5ting](/user/i5ting) lerna好像不错哦，我研究一下。","createdAt":1594107062453},{"id":2239,"originId":"5f0424e9b2a7c073cb32b060","articleId":358,"userId":1095,"content":"[@liangtongzhuo](/user/liangtongzhuo) LeanCloud我好像没有找到类似的东西，还是说我忽略了？不知有没有链接分享一下。","createdAt":1594107113031},{"id":2240,"originId":"5f0685d8b2a7c073cb32b5ec","articleId":358,"userId":59,"content":"https://leancloud.cn/docs/leanengine_cloudfunction_guide-node.html#hash20005220\r\n```\r\n// 客户端\r\nAV.Cloud.run('averageStars', {\r\n  movie: '夏洛特烦恼'\r\n}).then(function (data) {\r\n  // 调用成功，得到成功的应答 data\r\n}, function (error) {\r\n  // 处理调用失败\r\n});\r\n\r\n// 服务器注册函数\r\nAV.Cloud.define('averageStars', function (request) {\r\n\r\n});\r\n```","createdAt":1594263000325},{"id":2241,"originId":"5f06e7c513f8b244e57cdf72","articleId":358,"userId":1095,"content":"[@liangtongzhuo](/user/liangtongzhuo) 对，他也是不用发起HTTP请求来请求服务端的云函数。\r\n\r\n但LeanCloud的访问方式只对他们家的云函数有效，并不能访问其它的云函数，比如阿里函数计算，腾讯的云函数的，相对比较局限。","createdAt":1594288069006},{"id":2242,"originId":"5f06e934b2a7c073cb32b737","articleId":358,"userId":59,"content":"[@ruder](/user/ruder) 对","createdAt":1594288436090},{"id":2243,"originId":"5ed786f982b588109b6475a4","articleId":359,"userId":1097,"content":"6666666666666666666666","createdAt":1591183097675},{"id":2244,"originId":"5ed8e4b582b588109b6477cb","articleId":359,"userId":1096,"content":"[@siyue543241338](/user/siyue543241338) 谢谢~","createdAt":1591272629065},{"id":2245,"originId":"5ee6d024b703280f0bcb97d9","articleId":359,"userId":829,"content":"大赞","createdAt":1592184868294},{"id":2246,"originId":"5ef1fc31472c7975b04b728f","articleId":359,"userId":1096,"content":"[@OXOYO](/user/OXOYO) 谢谢~","createdAt":1592917041483},{"id":2247,"originId":"5ef2b5f3472c7975b04b72fe","articleId":359,"userId":528,"content":"真实发问，\r\n其实去了解一个库的原理是好的，但是去细分析它的源码的实际意义是什么呢？\r\n因为大部分人、大部分情况下是不需要动源码的。","createdAt":1592964595004},{"id":2248,"originId":"5ef2d43e472c7975b04b7375","articleId":359,"userId":1096,"content":"[@Hanggi](/user/Hanggi) 要看是想当一辈子的下忍还是像火影的目标前进，努力吧！年轻人！这就是青春！——来自迈特凯","createdAt":1592972350243},{"id":2249,"originId":"5ef2e08613f8b244e57cb409","articleId":359,"userId":528,"content":"[@hkcmly](/user/hkcmly) 还以为能听到什么有价值的东西，看来你也说不出个所以然。\r\n","createdAt":1592975494532},{"id":2250,"originId":"5ef2e3b913f8b244e57cb413","articleId":359,"userId":1096,"content":"[@Hanggi](/user/Hanggi) 这就是你的理解能力和水平问题了","createdAt":1592976313404},{"id":2251,"originId":"5ef2eab6472c7975b04b73ad","articleId":359,"userId":528,"content":"[@hkcmly](/user/hkcmly)\r\n你既然打算做一个源码解析的分享项目，那就应该说清楚为什么需要看源码、哪些人需要看源码、看源码能得到什么。\r\n\r\n我只是好奇像 Vue 这种山寨主流框架的项目源码有什么价值。\r\n看源码不如直接看 React 和 Angular 源码，反正主题思路都是从这些框架借鉴的。\r\n\r\n有水平的开发者直接 fork 项目就在那儿看了，也不用等你写教程。\r\n所以你这个是给新手看的，问题是新手其实不需要看源码，对于新手首要的是上手做项目。\r\n\r\n如果你是认真想做这个项目，请好好回答，也是在给你自己做宣传，传递一种价值。\r\n如果你只是想挂个捐助二维码赚点外快，祝楼主财源广进。","createdAt":1592978102151},{"id":2252,"originId":"5ef2edaa472c7975b04b73fe","articleId":359,"userId":1096,"content":"[@Hanggi](/user/Hanggi) 我写东西分享阻碍你了？过惯了伸手还有理了吗，你这么厉害你来，我这边不欢迎你，再说你强迫你打赏了吗？","createdAt":1592978858223},{"id":2253,"originId":"5ef305b2472c7975b04b7472","articleId":359,"userId":528,"content":"[@hkcmly](/user/hkcmly) 不好意思，可能是理念不同，真的没有什么恶意。\r\n\r\n只是想听听楼主的见解来着。\r\n\r\n个人还是比较支持楼主的项目的，希望楼主的项目发展顺利。","createdAt":1592985010628},{"id":2254,"originId":"5ef95644472c7975b04b7f1b","articleId":359,"userId":1098,"content":"感觉vue源码都快被人写烂了，::>_<::， 我写了剖析vue2的源码《逐行剖析vuejs源码》，后来把仓库都关了，太多人写了，react至今没有成体系的源码解析文章","createdAt":1593398852070},{"id":2255,"originId":"5efac356472c7975b04b82e9","articleId":359,"userId":1096,"content":"[@NLRX-WJC](/user/NLRX-WJC) 我的出发点是写给自己总结，然后才是别人看~","createdAt":1593492310822},{"id":2256,"originId":"5efe8cdd13f8b244e57ccd29","articleId":359,"userId":1099,"content":"[@Hanggi](/user/Hanggi) 拿去面试不行吗","createdAt":1593740509939},{"id":2257,"originId":"5f06cfc813f8b244e57cdf10","articleId":359,"userId":510,"content":"[@Hanggi](/user/Hanggi) 看你经常在人家的回复下面推angular踩vue 来cnode 6，7年了倒是分享一点干货呀 大佬。","createdAt":1594281928941},{"id":2258,"originId":"5ed46f0a82b588109b646e1e","articleId":362,"userId":605,"content":"这么多大伙都看了，就没人想说的啥么","createdAt":1590980362900},{"id":2259,"originId":"5ed4786582b588109b646e48","articleId":362,"userId":21,"content":"难道我要说：\r\n![image.png](//static.cnodejs.org/FuliDShpo4rlG5RhhstBgLysFhKP)","createdAt":1590982757584},{"id":2260,"originId":"5ed4b6a7b703280f0bcb7bb7","articleId":362,"userId":145,"content":"确实...楼上也是我想说的....hhhh\r\n酸了酸了","createdAt":1590998695301},{"id":2261,"originId":"5ed503cab703280f0bcb7ce8","articleId":362,"userId":90,"content":"有没有想法做个组织者，带队旅游哈哈，收费的那种。","createdAt":1591018442372},{"id":2262,"originId":"5ed5abd6b703280f0bcb7d65","articleId":362,"userId":615,"content":"[@zy445566](/user/zy445566) 233333","createdAt":1591061462876},{"id":2263,"originId":"5ed5c5b4b703280f0bcb7deb","articleId":362,"userId":605,"content":"[@jxycbjhc](/user/jxycbjhc) 这两周在考虑下次出游，上海的可以约下一起啊，志趣相投就好，不收费，目标东山岛","createdAt":1591068084771},{"id":2264,"originId":"5ed5fea282b588109b647295","articleId":362,"userId":90,"content":"[@ops-coffee](/user/ops-coffee) 我意思是作为一个组织者全程把控行程，收费能把行程做的更完美。有行程列表么？","createdAt":1591082658325},{"id":2265,"originId":"5ed623ebb703280f0bcb7f5f","articleId":362,"userId":605,"content":"[@jxycbjhc](/user/jxycbjhc) 我明白你的意思，只是当这件事情变成生意的时候，就失去了他本能带给我的享受和快乐，所以暂时不会考虑做这个\r\n\r\n大概时间在6月的某个周末，只有目的地，没有具体的行程，比较随性，觉得哪里风景好就会在哪里停留，不喜欢安排好的（像是走流程），准备好了接受意外或惊喜","createdAt":1591092203413},{"id":2266,"originId":"5efadadb472c7975b04b8325","articleId":362,"userId":605,"content":"最新更新：[https://blog.ops-coffee.cn/s/ykll0ihdne3u9k79d1uyqw](https://blog.ops-coffee.cn/s/ykll0ihdne3u9k79d1uyqw)","createdAt":1593498331602},{"id":2267,"originId":"5f02958513f8b244e57cd4a2","articleId":362,"userId":205,"content":"不错","createdAt":1594004869218},{"id":2268,"originId":"5f05964613f8b244e57cdc90","articleId":362,"userId":79,"content":"羡慕","createdAt":1594201670199},{"id":2269,"originId":"5f03edf8b2a7c073cb32af61","articleId":364,"userId":1101,"content":"自己来一波AD。已经有一些童鞋将 Ovine 使用起来了, 如果你也有 **表单多，页面多**的 管理系统需求，欢迎尝试一下Ovine，提出各种BUG。","createdAt":1594093048136},{"id":2270,"originId":"5f034e2d13f8b244e57cd63e","articleId":366,"userId":1103,"content":"要换友链的同学直接在这里评价就好。","createdAt":1594052141420},{"id":2271,"originId":"5f034e8a13f8b244e57cd646","articleId":366,"userId":1103,"content":"另外该项目主要面向初学者（我本人也是），大佬轻喷。","createdAt":1594052234316},{"id":2272,"originId":"5f01824f13f8b244e57cd299","articleId":369,"userId":59,"content":"在这种情况下的异常已经丢失上下文了，还是要前置一些","createdAt":1593934415938},{"id":2273,"originId":"5f02983b13f8b244e57cd4b0","articleId":369,"userId":145,"content":"```js\r\n  // 关闭当前请求的链接\r\n  for (const server of servers) {\r\n    console.log('server instanceof http.Server: ', server instanceof http.Server);\r\n    if (server instanceof http.Server) {\r\n      server.on('request', (req, res) => {\r\n        req.shouldKeepAlive = false;\r\n        res.shouldKeepAlive = false;\r\n        if (!res._header) {\r\n          res.setHeader('Connection', 'close');\r\n        }\r\n      });\r\n    }\r\n  }\r\n  ```\r\n  在这边是不是 `server.close()` 拒绝后续的请求, 会好一点, 如果只是关闭当前连接, 等 `killTimeout` 时间到了, 才退出进程, 而且可能会有正在处理的请求被中断.","createdAt":1594005563439},{"id":2274,"originId":"5f02a877b2a7c073cb32aca4","articleId":369,"userId":13,"content":"[@liangtongzhuo](/user/liangtongzhuo) \r\n\r\nuncaughtException 捕获的错误，通过 error.stack 是可以拿到错误堆栈信息的，通过 unhandledRejection 捕获的 Reject 异常这个好像不能。“还是要前置一些” 这个前置是指的什么？","createdAt":1594009719651},{"id":2275,"originId":"5f02aa3313f8b244e57cd4d7","articleId":369,"userId":13,"content":"[@zhangxh1023](/user/zhangxh1023) ```server.close()``` 也可以 如果只是关闭当前连接, 还会偶发被中端","createdAt":1594010163303},{"id":2276,"originId":"5f02eed113f8b244e57cd58a","articleId":369,"userId":59,"content":"[@Q-Angelo](/user/Q-Angelo) 在 uncaughtException 已经没有办法 ctx 返回相应错误代码了，只能日志记录错误信息了。","createdAt":1594027729976},{"id":2277,"originId":"5f03029cb2a7c073cb32ad71","articleId":369,"userId":2,"content":"Process也可以做这个","createdAt":1594032796383},{"id":2278,"originId":"5efe92b6b2a7c073cb32a4d2","articleId":370,"userId":158,"content":"叫你们不好好学angular， 萌新``时间剩余``都被react消耗，大佬转型，青黄不接，环境浮躁","createdAt":1593742006812},{"id":2279,"originId":"5efea2fbb2a7c073cb32a525","articleId":370,"userId":711,"content":"[@zhhb](/user/zhhb) angular不能赚钱 利益转化率太低了","createdAt":1593746171252},{"id":2280,"originId":"5efeb1c413f8b244e57ccdef","articleId":370,"userId":158,"content":"[@genaller](/user/genaller) 哪有语言和框架主要是为了赚钱的，业务才是啊，时间成本和维护成本，做企业的业务的用 ng不香么，非要用react自己再造轮子和把react全家桶做成ng的样子然后天天加班， react很优秀，但你很可能这是需要它的思想，除了大企业要做到极致外，特别在ToB的应用上用react太想不开了","createdAt":1593749956221},{"id":2281,"originId":"5efff9ad13f8b244e57ccfdb","articleId":370,"userId":1101,"content":"我怎么感觉你们讨论这个问题跑题了。。。半天没看懂上下文。","createdAt":1593833901438},{"id":2282,"originId":"5efffc4e13f8b244e57ccff1","articleId":370,"userId":1104,"content":"我今年也有这个错觉，不知道其他社区咋样","createdAt":1593834574194},{"id":2283,"originId":"5f001a76b2a7c073cb32a7dc","articleId":370,"userId":103,"content":"这可能不是错觉，这两年环境所致，Java的招聘量不见减少，nodejs的招聘很少见到，很多是和前端绑定的，使用少了自然没什么需要讨论了。","createdAt":1593842294806},{"id":2284,"originId":"5f02865213f8b244e57cd43f","articleId":370,"userId":1105,"content":"不知道和angular有什么关系..... ","createdAt":1594000978600},{"id":2285,"originId":"5f02249cb2a7c073cb32ab8c","articleId":371,"userId":109,"content":"> TCP会缓存小的数据包, 攒够了之后再一起发出去;\r\n\r\n这句话感觉不严谨，应该是 TCP 会利用缓**冲**区来处理发送数据（流）。而不是缓**存**，也不是数据**包**。\r\n","createdAt":1593975964834},{"id":2286,"originId":"5ef86c8f13f8b244e57cbd8d","articleId":372,"userId":89,"content":"# CNodejs每日新闻(2020-06-28)\r\n\r\n1. Easy-Monitor 3.0 开源 - 基于 Egg 的 Node.js 性能监控解决方案  https://cnodejs.org/topic/5ee1ee83b703280f0bcb922a\r\n2. think-mongo 升级适配 MongoDB 4. https://cnodejs.org/topic/5ef42b6513f8b244e57cb82e\r\n3. 通过linux源码分析nodejs的keep-alive https://cnodejs.org/topic/5ef441cc472c7975b04b77db\r\n4. esvu是一个帮你安装各种ECMAScript实现的命令行工具。 https://github.com/devsnek/esvu\r\n5. 《Learning Google V8》https://github.com/danbev/learning-v8\r\n\r\n编辑: i5ting\r\n订阅新闻: http://tinyletter.com/cnodejs\r\n招聘专区: https://cnodejs.org/?tab=job\r\nCNodejs每日新闻归档: https://cnodejs.org/topic/5ef86c7713f8b244e57cbd8a\r\n","createdAt":1593339023505},{"id":2287,"originId":"5ef8811a13f8b244e57cbdd5","articleId":372,"userId":1104,"content":"招聘专区可还行，每次都能看到招聘前排占位 =。=","createdAt":1593344282805},{"id":2288,"originId":"5ef88998472c7975b04b7d79","articleId":372,"userId":11,"content":"为啥放到回复里","createdAt":1593346456258},{"id":2289,"originId":"5ef92f2a13f8b244e57cbeec","articleId":372,"userId":1106,"content":"谢谢分享","createdAt":1593388842076},{"id":2290,"originId":"5ef9ec10472c7975b04b81ed","articleId":372,"userId":89,"content":"[@hyj1991](/user/hyj1991) 你说的对，确实不合适，放到正文里了","createdAt":1593437200197},{"id":2291,"originId":"5efb3ffe13f8b244e57cc621","articleId":372,"userId":89,"content":"# CNodejs每日新闻(2020-06-30)\r\n\r\n1. 刚刚公开的基于jamstack设计的电商网站，里面用到了gatzby和react，具有一定学习参考意义 https://github.com/rauchg/jamstack-ecommerce\r\n2. 世界上第一个为SSD和存储类内存设计的开源存储引擎：hse 内存存储引擎，目前是c编写的，大家如果感兴趣也可以写写node c/c++ addon扩展 https://github.com/hse-project/hse\r\n3. 快来了解一下EasyType：开源的基于TypeScript的动态类型反射系统  https://cnodejs.org/topic/5eeef3ea472c7975b04b69e3\r\n4. 理解Websocket的原理   https://cnodejs.org/topic/5efa04f3472c7975b04b8213\r\n5. 通用Serverless Side Render 框架ssr 重磅来袭， 快来瞄一下  https://zhuanlan.zhihu.com/p/134655275\r\n\r\n编辑: i5ting\r\n招聘专区: https://cnodejs.org/?tab=job\r\nCNodejs每日新闻归档: https://cnodejs.org/topic/5ef86c7713f8b244e57cbd8a","createdAt":1593524222922},{"id":2292,"originId":"5efc804ab2a7c073cb32a05a","articleId":372,"userId":89,"content":"\r\n# CNodejs每日新闻(2020-07-01)\r\n\r\n1. ApostropheCMS：最高级的开源Node.js CMS即将发布 3.0 Alpha 版本。     https://medium.com/the-node-js-collection/apostrophecms-the-most-advanced-open-source-node-js-cms-prepares-for-3-0-alpha-release-29a3ba3c0332 需要梯子，当然github直接搜也是可以的\r\n2. 使用 Node 来完成机器学习任务 https://alibaba.github.io/pipcook/#/zh-cn/tutorials/machine-learning-overview\r\n3. Strapi使用体验，在 API 创建方面做到了简单，安全和快速。 https://www.jianshu.com/p/dba11d575e5b\r\n4. SSVM is a high performance, extensible, and hardware optimized WebAssembly Virtual Machine for cloud, AI, and blockchain applications  www.secondstate.io/\r\n5. Node.js最佳实践，近5万个star的项目，还不错的。 https://github.com/goldbergyoni/nodebestpractices\r\n\r\n编辑: i5ting\r\n招聘专区: https://cnodejs.org/?tab=job\r\nCNodejs每日新闻归档: https://cnodejs.org/topic/5ef86c7713f8b244e57cbd8a\r\n\r\n\r\n","createdAt":1593606218767},{"id":2293,"originId":"5efdbdb013f8b244e57ccc6e","articleId":372,"userId":89,"content":"# CNodejs每日新闻(2020-07-02)\r\n\r\n1. 这个项目是使用Jest 测试 MongoDB的模块，主要使用mongodb的内存版本，结合jest测试方面的优势，整体还是很不错的。  https://github.com/shelfio/jest-mongodb\r\n2. 利用require-vm实现一个更安全的引用，更好的防止内存泄漏篇  https://cnodejs.org/topic/5efd934fb2a7c073cb32a2b5\r\n3. 推荐一个node编写的git工具：ungit https://github.com/FredrikNoren/ungit\r\n4. 阿里 Midway 正式发布 Serverless v1.0，研发提效 50%  https://cnodejs.org/topic/5efdafbc13f8b244e57ccb6f\r\n5. 创建ppt和keynote等 Open Office XML (OOXML) 模块，功能很强大。https://github.com/gitbrent/PptxGenJS\r\n\r\n编辑: i5ting\r\n招聘专区: https://cnodejs.org/?tab=job\r\nCNodejs每日新闻归档: https://cnodejs.org/topic/5ef86c7713f8b244e57cbd8a\r\n","createdAt":1593687472768},{"id":2294,"originId":"5efece2113f8b244e57cce25","articleId":372,"userId":383,"content":"狼叔，每天发一个帖子吧，太不好找了都发一个帖子里 （;￣O￣）","createdAt":1593757217018},{"id":2295,"originId":"5efeed1db2a7c073cb32a64d","articleId":372,"userId":90,"content":"https://github.com/gitbrent/PptxGenJS \r\n这个功能很强，之前在公司技术调研搞过，营销团队最喜欢这玩意 ，PPT一甩谁都不爱。","createdAt":1593765149918},{"id":2296,"originId":"5e4fd5c9267721420912c0fd","articleId":373,"userId":21,"content":"已填，这个调查有什么现实意义么？比如产生什么价值，除上面三条外。","createdAt":1582290377411},{"id":2297,"originId":"5e4fdb49267721420912c112","articleId":373,"userId":38,"content":"感谢 [@zy445566](/user/zy445566) ，这个更多的人直观的了解这个语言的现状，比如\r\n\r\n- 帮助社区梳理这个语言的技术栈\r\n- 帮助开发者找准这个语言的定位（用来干什么的）\r\n- 帮助新人缩减/定位学习范围\r\n- 让喜爱这个语言的人找到贡献生态的方式\r\n- 还可以帮助企业招聘\r\n\r\n等等，还挺多的。","createdAt":1582291785486},{"id":2298,"originId":"5e55e0031225c9423dcdafb1","articleId":373,"userId":3,"content":"已填写，希望node.js能发展的越来越好。","createdAt":1582686211552},{"id":2299,"originId":"5e5e685db5a36940fe1ceb31","articleId":373,"userId":1108,"content":"顶","createdAt":1583245405350},{"id":2300,"originId":"5e6768fb23bc9e20b4e32fc1","articleId":373,"userId":1109,"content":"s's'ssssss'sss\r\ns's'ssss","createdAt":1583835387165},{"id":2301,"originId":"5e67699423bc9e20b4e32fd5","articleId":373,"userId":1109,"content":"1111","createdAt":1583835540572},{"id":2302,"originId":"5e67699723bc9e20b4e32fd9","articleId":373,"userId":1109,"content":"111","createdAt":1583835543125},{"id":2303,"originId":"5e68c11b3cadb020b916098d","articleId":373,"userId":135,"content":"已填, 平时逛和node相关的也就本社区了. 总觉得我们这个社区蛮冷清的😂","createdAt":1583923483304},{"id":2304,"originId":"5e6aeb3823bc9e20b4e339a5","articleId":373,"userId":99,"content":"+1","createdAt":1584065336013},{"id":2305,"originId":"5e8c1b7d64259617c49a4b1c","articleId":373,"userId":50,"content":"+1\r\n","createdAt":1586240381577},{"id":2306,"originId":"5e8eff9d58ab6717beb7ed86","articleId":373,"userId":1110,"content":"1\r\n","createdAt":1586429853903},{"id":2307,"originId":"5e91eaf164259617c49a564f","articleId":373,"userId":1111,"content":"尽量靠近了史蒂夫","createdAt":1586621169306},{"id":2308,"originId":"5e91eb1858ab6717beb7f28a","articleId":373,"userId":1111,"content":"[@xjm11](/user/xjm11) 史蒂夫","createdAt":1586621208445},{"id":2309,"originId":"5e9468bc64259617c49a5aed","articleId":373,"userId":189,"content":"希望node.js能发展的越来越好","createdAt":1586784444710},{"id":2310,"originId":"5e96880264259617c49a5f26","articleId":373,"userId":1112,"content":"DONE","createdAt":1586923522613},{"id":2311,"originId":"5e9fbfa8d870946c6b6bd754","articleId":373,"userId":57,"content":"唉，就这个社区了","createdAt":1587527592972},{"id":2312,"originId":"5ea1a3190275394e76882dc3","articleId":373,"userId":1113,"content":"done","createdAt":1587651353392},{"id":2313,"originId":"5ea1f742d870946c6b6bdd2d","articleId":373,"userId":1114,"content":"done","createdAt":1587672898069},{"id":2314,"originId":"5ea5037f0275394e768834c4","articleId":373,"userId":1115,"content":"希望越来越好","createdAt":1587872639758},{"id":2315,"originId":"5eba42c0e785ec40b04fba81","articleId":373,"userId":1116,"content":"nice\r\n","createdAt":1589265088466},{"id":2316,"originId":"5eba47782d0afc4087f54800","articleId":373,"userId":1117,"content":"希望越来越好","createdAt":1589266296207},{"id":2317,"originId":"5ebb8bd42d0afc4087f54df6","articleId":373,"userId":1118,"content":"测试一下","createdAt":1589349332549},{"id":2318,"originId":"5eca60bf67c8a45803da15ba","articleId":373,"userId":3,"content":"[@xuejiancnode](/user/xuejiancnode) 怎么了？？","createdAt":1590321343318},{"id":2319,"originId":"5efea5a513f8b244e57ccd99","articleId":373,"userId":1,"content":"厉害了","createdAt":1593746853400},{"id":2320,"originId":"5efa9899472c7975b04b8265","articleId":377,"userId":150,"content":"先赞后看","createdAt":1593481369334},{"id":2321,"originId":"5ef889b7472c7975b04b7d7f","articleId":383,"userId":90,"content":"👍","createdAt":1593346487222},{"id":2322,"originId":"5ebf344be785ec40b04fd0af","articleId":390,"userId":611,"content":"好冷清呵，自己手动消灭0回复~~🙄","createdAt":1589589067848},{"id":2323,"originId":"5ebf45f72d0afc4087f55f0a","articleId":390,"userId":3,"content":"好像没有收录我的博客\r\n\r\nhttps://darrenliuwei.com\r\n\r\nhttps://sphard.com","createdAt":1589593591685},{"id":2324,"originId":"5ebf51f4e785ec40b04fd0d4","articleId":390,"userId":611,"content":"[@darrenliuwei](/user/darrenliuwei) 👀，嗯，现在的爬取收录还不完全，先记上，后面一并建立上~~~","createdAt":1589596660580},{"id":2325,"originId":"5ec5e4a5a87fc8583363d700","articleId":390,"userId":611,"content":"昨天做了一版手机端的适配，现在可以在手机端查看了；\r\n后面会添加  热门博客列表top100，添加国外博客收录索引等功能；\r\n如果大家觉得好用，可以广而告之身边的朋友，一起适用这个小搜索，后面会一直维护该产品；\r\n大家有啥建议都可以一起交流分享\r\n> 微信号:funer80\r\n","createdAt":1590027429553},{"id":2326,"originId":"5ec5f97067c8a45803da0e72","articleId":390,"userId":1126,"content":"请收录我的博客，感谢🙏\r\nhttps://gsbk.org","createdAt":1590032752472},{"id":2327,"originId":"5ec603ada87fc8583363d7a5","articleId":390,"userId":611,"content":"[@kelvv](/user/kelvv) 后面会把收录博客的功能外放出去，敬请期待！！","createdAt":1590035373370},{"id":2328,"originId":"5ee9a562472c7975b04b5d73","articleId":390,"userId":611,"content":"小蛇搜搜http://xiaoshesoso.com/  新增了几个模块，欢迎来用啊","createdAt":1592370530999},{"id":2329,"originId":"5ee9a9f5472c7975b04b5d92","articleId":390,"userId":3,"content":"[@funeyu](/user/funeyu) 为什么不上HTTPS呢？","createdAt":1592371701779},{"id":2330,"originId":"5ee9b890472c7975b04b5e50","articleId":390,"userId":1127,"content":"兄弟，你的cdn 失效了","createdAt":1592375440125},{"id":2331,"originId":"5ee9cd8c13f8b244e57ca1dd","articleId":390,"userId":611,"content":"[@darrenliuwei](/user/darrenliuwei) 后面会给加上，😆😆","createdAt":1592380812165},{"id":2332,"originId":"5ee9cde513f8b244e57ca1e4","articleId":390,"userId":611,"content":"[@tanlianghao](/user/tanlianghao) 用的是https://www.bootcdn.cn/  这个免费的，可能有的地方这个cdn会失效？？","createdAt":1592380901994},{"id":2333,"originId":"5eeadb67472c7975b04b6211","articleId":390,"userId":1128,"content":"兄弟，好奇问下，你是怎么筛选出来个人博客的呢？","createdAt":1592449895174},{"id":2334,"originId":"5eeaddb7472c7975b04b6220","articleId":390,"userId":611,"content":"[@tw7613781](/user/tw7613781) 根据关键词匹配筛选的~~~","createdAt":1592450487859},{"id":2335,"originId":"5ef1bbd2472c7975b04b7212","articleId":390,"userId":1129,"content":"谢谢分享~","createdAt":1592900562067},{"id":2336,"originId":"5e7c705558ab6717beb7ccb2","articleId":391,"userId":33,"content":"好奇失败经历，跨境电商为啥干黄了。","createdAt":1585213525525},{"id":2337,"originId":"5e7cbb9864259617c49a3111","articleId":391,"userId":581,"content":"[Shake] 过段时间写篇文章回顾一下","createdAt":1585232792197},{"id":2338,"originId":"5e82f74c58ab6717beb7d865","articleId":391,"userId":220,"content":"![image.png](//static.cnodejs.org/Fh8dLju9Q8vnCZyuZdkpcfP4y1Tq)不行啊,死循环 在这里","createdAt":1585641292861},{"id":2339,"originId":"5e832f5c64259617c49a3c87","articleId":391,"userId":581,"content":"[@qxl1231](/user/qxl1231) 抱歉, 构建系统这几天会执行的很慢，前几天突然来了很多用户，这几天一直升级底层。\r\n预计这几天会完成，构建速度会更更流畅。加我微信: `tobiasgarrick`, 上线了第一时间通知各位\r\n谢谢支持!","createdAt":1585655644049},{"id":2340,"originId":"5e87111c64259617c49a450b","articleId":391,"userId":581,"content":"已经扩容完成了，需要的可以再试试.","createdAt":1585910044214},{"id":2341,"originId":"5e9002e864259617c49a533b","articleId":391,"userId":1131,"content":"怎么感觉 github action 就能做？\r\n不过我也就部署个静态页面...","createdAt":1586496232968},{"id":2342,"originId":"5e9006f358ab6717beb7ef6c","articleId":391,"userId":581,"content":"[@Yaob1990](/user/Yaob1990) 静态网页比较简单，如果是后端服务, Node Express, Python Django/Flask, Ruby Rails这种，用这个工具部署就很省心了.","createdAt":1586497267167},{"id":2343,"originId":"5e900f8458ab6717beb7efbc","articleId":391,"userId":1131,"content":"[@tobyglei](/user/tobyglei) 看了下，可以直接跑后端服务，相当于一个简化的ecs，还不需要自己管理。挺方便~","createdAt":1586499460150},{"id":2344,"originId":"5e90100558ab6717beb7efc0","articleId":391,"userId":1131,"content":"这个价格。。。。。都用的话100一个月...打扰了...","createdAt":1586499589562},{"id":2345,"originId":"5e90124958ab6717beb7efc8","articleId":391,"userId":581,"content":"[@Yaob1990](/user/Yaob1990) 马上会有学生计划和团队计划开...感兴趣加我进行内测: tobiasgarrick","createdAt":1586500169953},{"id":2346,"originId":"5e94675b58ab6717beb7f759","articleId":391,"userId":581,"content":"学生计划/便宜计划已经上线了","createdAt":1586784091157},{"id":2347,"originId":"5ea428fd0275394e768833c1","articleId":391,"userId":226,"content":"按道理说，14年15年那会是跨境电商顺风顺水的时候，不管是独立站还是亚马逊等平台很多人都做起来了。\r\n你这么厉害，为什么失败了呢？","createdAt":1587816701715},{"id":2348,"originId":"5ea62e120275394e76883642","articleId":391,"userId":513,"content":"「因为自己是技术出身，所以一直以来都比较缺乏business mind，现在自己一个人做项目了，越来越意识到技术只是手段，时间应该专注到业务逻辑上，和用户交流、去获取反馈，而不应该浪费时间去做配置、反复处理不同环境或运维的问题」\r\n\r\n你说的：「时间应该专注到业务逻辑上，和用户交流、去获取反馈」，这个是对的，特别是创业！\r\n更多时间还要去关注、发现可能的市场需求。\r\n\r\n看好你~","createdAt":1587949074020},{"id":2349,"originId":"5ea642dcd870946c6b6be506","articleId":391,"userId":110,"content":"想问下大家自己做项目，在哪里接的项目呢？","createdAt":1587954396045},{"id":2350,"originId":"5ea6e4bdd870946c6b6be772","articleId":391,"userId":581,"content":"[@huadelaotou](/user/huadelaotou) 之后我写一篇博客回顾一下","createdAt":1587995837177},{"id":2351,"originId":"5ea6e4ebd870946c6b6be77a","articleId":391,"userId":581,"content":"[@Solomonqoo](/user/Solomonqoo) 谢谢, 我每周写博客同步项目进度，感兴趣可以关注: https://blog.21yunbox.com/","createdAt":1587995883184},{"id":2352,"originId":"5ea7f6ac30176508da9b6d20","articleId":391,"userId":513,"content":"[@tobyglei](/user/tobyglei) 一定给你关注！","createdAt":1588065964312},{"id":2353,"originId":"5eafdde7e785ec40b04fa9c0","articleId":391,"userId":581,"content":"第4周更新已经同步到博客了，不想错过每一篇文章更新可以订阅公众号\r\n\r\n![image.png](//static.cnodejs.org/FrwbMhGgxGJCEf83BzD12JLo8uCw)","createdAt":1588583911252},{"id":2354,"originId":"5ec3959867c8a45803da08e2","articleId":391,"userId":438,"content":"楼主的很多思想值得学习","createdAt":1589876120827},{"id":2355,"originId":"5ec8cb6767c8a45803da1418","articleId":391,"userId":581,"content":"第5周进度已经更新到博客了，不想错过每一篇文章更新可以订阅公众号\r\n![image.png](//static.cnodejs.org/FrwbMhGgxGJCEf83BzD12JLo8uCw)","createdAt":1590217575811},{"id":2356,"originId":"5ef15b7813f8b244e57cb0c1","articleId":391,"userId":581,"content":"第 6 周进度已经更新到博客了\r\n","createdAt":1592875896559},{"id":2357,"originId":"5ef08bce13f8b244e57cb007","articleId":392,"userId":1133,"content":"能不能搞一个自动检测黄图并删除的?","createdAt":1592822734371},{"id":2358,"originId":"5ef0635413f8b244e57caf25","articleId":394,"userId":1135,"content":"github: https://github.com/skyunBoss/fsxy","createdAt":1592812372998},{"id":2359,"originId":"5ed51a31b703280f0bcb7d22","articleId":399,"userId":442,"content":"原来迷渡老哥和ry有这样的渊源 😱","createdAt":1591024177550},{"id":2360,"originId":"5ed5a2bf82b588109b6470c1","articleId":399,"userId":26,"content":"赞大拇指👍👍","createdAt":1591059135465},{"id":2361,"originId":"5ed5b1b682b588109b6470f9","articleId":399,"userId":89,"content":"直接cnode开个版本，如何？\r\n","createdAt":1591062966103},{"id":2362,"originId":"5ed5c8f982b588109b6471a5","articleId":399,"userId":22,"content":"[@i5ting](/user/i5ting) 我用 discourse 做了一个","createdAt":1591068921914},{"id":2363,"originId":"5ed608deb703280f0bcb7f0f","articleId":399,"userId":1137,"content":"赞👍","createdAt":1591085278364},{"id":2364,"originId":"5ed761deb703280f0bcb81b6","articleId":399,"userId":356,"content":"我觉得还是放在cnode好，不用太需要标新立异，这样能够资源最大化共享","createdAt":1591173598820},{"id":2365,"originId":"5ed766b982b588109b647557","articleId":399,"userId":419,"content":"cnode进化为jser.org吧  分为node deno 前端 人工智能 嵌入式等板块![](https://img04.sogoucdn.com/app/a/100520093/e18d20c94006dfe0-9eef65073f0f6be0-739b2c71423b4fb573affef9bf5c58fa.jpg)","createdAt":1591174841635},{"id":2366,"originId":"5edb928e82b588109b647bb2","articleId":399,"userId":22,"content":"[@yuu2lee4](/user/yuu2lee4) cjser 😄","createdAt":1591448206300},{"id":2367,"originId":"5edda41582b588109b647d91","articleId":399,"userId":18,"content":"加了个精华","createdAt":1591583765683},{"id":2368,"originId":"5ee1e02682b588109b648529","articleId":399,"userId":387,"content":"https://denocn.org 之前不是这个社区吗？\r\n现在改战地了~","createdAt":1591861286489},{"id":2369,"originId":"5ee6d5a382b588109b648b2b","articleId":399,"userId":829,"content":"赞👍","createdAt":1592186275501},{"id":2370,"originId":"5eec80ad13f8b244e57ca8a6","articleId":400,"userId":1137,"content":"单例？单利？","createdAt":1592557741283},{"id":2371,"originId":"5eec836913f8b244e57ca8c7","articleId":400,"userId":612,"content":"[@kidbai](/user/kidbai) 妈耶~ 整错了","createdAt":1592558441901},{"id":2372,"originId":"5eec2a0113f8b244e57ca735","articleId":401,"userId":33,"content":"弄个开源远程ui框架吧，","createdAt":1592535553367},{"id":2373,"originId":"5eec4794472c7975b04b6603","articleId":401,"userId":301,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 其实单纯的UI框架不是特别有必要，我只是举个例子，可以做到将一个按钮嵌入进去。","createdAt":1592543124913},{"id":2374,"originId":"5eec5b0813f8b244e57ca7b8","articleId":401,"userId":33,"content":"[@1340641314](/user/1340641314) 原理貌似和jq的loadhtml类似，方案有了，在能提供一些官方的远程组件岂不是更好。","createdAt":1592548104939},{"id":2375,"originId":"5eec68e013f8b244e57ca80f","articleId":401,"userId":301,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 有道理，不过还需要一台服务器，能提供接口才行，就比较费劲。","createdAt":1592551648031},{"id":2376,"originId":"5ee9e950472c7975b04b6071","articleId":403,"userId":19,"content":"点赞","createdAt":1592387920779},{"id":2377,"originId":"5ee9ffb7472c7975b04b6095","articleId":403,"userId":610,"content":"赞！！！","createdAt":1592393655667},{"id":2378,"originId":"5eead256472c7975b04b61bd","articleId":403,"userId":1128,"content":"写文档的人也不上心哦","createdAt":1592447574995},{"id":2379,"originId":"5ee85a6db703280f0bcb9b4b","articleId":405,"userId":33,"content":"大佬赶紧维护维护nestjs-redis吧","createdAt":1592285805793},{"id":2380,"originId":"5ee87230b703280f0bcb9b8e","articleId":405,"userId":1140,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) -_-","createdAt":1592291888556},{"id":2381,"originId":"5ee95331472c7975b04b5bd2","articleId":405,"userId":1140,"content":"github: [https://github.com/skunight/desktop-recorder](https://github.com/skunight/desktop-recorder)","createdAt":1592349489613},{"id":2382,"originId":"5ee5f1beb703280f0bcb9738","articleId":408,"userId":419,"content":"赞","createdAt":1592127934864},{"id":2383,"originId":"5ee60043b703280f0bcb9747","articleId":408,"userId":1142,"content":"[@yuu2lee4](/user/yuu2lee4) 谢谢哦~","createdAt":1592131651345},{"id":2384,"originId":"5edf04c0b703280f0bcb8ca7","articleId":412,"userId":1143,"content":"公众号**ITvlog**有视频版的 大家可以去看看","createdAt":1591674048113},{"id":2385,"originId":"5edef666b703280f0bcb8c81","articleId":413,"userId":89,"content":"好东西","createdAt":1591670374205},{"id":2386,"originId":"5ede428a82b588109b647ee6","articleId":414,"userId":1145,"content":"1","createdAt":1591624330208},{"id":2387,"originId":"5ede50b9b703280f0bcb8be5","articleId":414,"userId":90,"content":"我怀疑你在开水果机店。","createdAt":1591627961448},{"id":2388,"originId":"5edeb88582b588109b647f26","articleId":414,"userId":1073,"content":"[@jxycbjhc](/user/jxycbjhc) 相应国家号召，全民摆摊","createdAt":1591654533351},{"id":2389,"originId":"5edee37582b588109b647f5c","articleId":414,"userId":90,"content":"[@kamibababa](/user/kamibababa) 那都是忽悠，过段时间就是全民讨厌投诉了，坐等凉凉。","createdAt":1591665525085},{"id":2390,"originId":"5ed707c0b703280f0bcb809e","articleId":415,"userId":21,"content":"[@jxycbjhc](/user/jxycbjhc) 记仇了，看看这篇有没有比原来少1%的水","createdAt":1591150528339},{"id":2391,"originId":"5ed7154382b588109b647442","articleId":415,"userId":90,"content":"[@zy445566](/user/zy445566) 老铁，稳健，图片是我辈楷模啊。。。 我要是帅哥，会特么少女朋友。![截屏2020-06-03 上午11.11.40.png](//static.cnodejs.org/Fh9XZIHv6hF00DNXsv1eCC718pIr)  看下了效果正面没毛病。","createdAt":1591153987220},{"id":2392,"originId":"5ed71f13b703280f0bcb80ce","articleId":415,"userId":21,"content":"[@jxycbjhc](/user/jxycbjhc) 其实识别了多个，但我只选了最后一个输出。你看到的案例是直接在浏览器里实现的，没服务端","createdAt":1591156499884},{"id":2393,"originId":"5ede5247b703280f0bcb8beb","articleId":415,"userId":90,"content":"[@zy445566](/user/zy445566) 这玩意投入回报比咋样？太低直接就和老板说了不写了，我是来赚钱的。","createdAt":1591628359073},{"id":2394,"originId":"5edeb953b703280f0bcb8c09","articleId":415,"userId":1073,"content":"WebAssembly牛逼！emscripten牛逼！opencv.js牛逼！Node.js牛逼！JS牛逼！深以为然。\r\n可以用 JavaScript 来写的应用，最终都会用 JavaScript 来写。\r\n","createdAt":1591654739395},{"id":2395,"originId":"5eded71db703280f0bcb8c11","articleId":415,"userId":21,"content":"[@jxycbjhc](/user/jxycbjhc) 你是说人脸识别？还是wasm？如果是人脸识别，回报比不是很强。但如果是wasm，尤其是已经移植到wasm的库或简单的C++改的wasm来替代c++扩展的话，回报比爆表。","createdAt":1591662365748},{"id":2396,"originId":"5eded7c782b588109b647f31","articleId":415,"userId":21,"content":"[@kamibababa](/user/kamibababa) 简单的C++扩展完全可以使用wasm替代，可维护性比原生大十倍。复杂的比如调用很多大的C++库不方便移植或调用V8本身的特性再考虑C++扩展了。","createdAt":1591662535858},{"id":2397,"originId":"5ededa40b703280f0bcb8c1f","articleId":415,"userId":21,"content":"前几天还把我数字水印的库移植到了wasm，现在服务器不用装C++库也不需要依赖node-gyp编译了。而且一般来说只要编译一次C++库，以后都可以直接复用。\r\n\r\nhttps://github.com/zy445566/node-digital-watermarking/pull/8/files","createdAt":1591663168883},{"id":2398,"originId":"5edee337b703280f0bcb8c33","articleId":415,"userId":90,"content":"[@zy445566](/user/zy445566) wasm 看来要看看了。","createdAt":1591665463310},{"id":2399,"originId":"5eddd92282b588109b647e0d","articleId":416,"userId":1146,"content":"这个，一上来就这么细节，我还以为会自顶向下呢。。","createdAt":1591597346974},{"id":2400,"originId":"5edde112b703280f0bcb8b42","articleId":416,"userId":1096,"content":"[@xesam](/user/xesam) 哈哈哈，具体使用可以看官方文档","createdAt":1591599378670},{"id":2401,"originId":"5edced29b703280f0bcb89a2","articleId":418,"userId":13,"content":"👍","createdAt":1591536937436},{"id":2402,"originId":"5ed73e27b703280f0bcb8117","articleId":424,"userId":89,"content":"点赞","createdAt":1591164455513},{"id":2403,"originId":"5ec4b29fa87fc8583363d493","articleId":425,"userId":734,"content":"感谢文艺青年的贡献 :p","createdAt":1589949087212},{"id":2404,"originId":"5ed0c9fe82b588109b646982","articleId":425,"userId":1149,"content":"流弊流弊， 收租快乐","createdAt":1590741502907},{"id":2405,"originId":"5ed0dd3db703280f0bcb7668","articleId":425,"userId":628,"content":"支持 装饰器 么。官方没看到例子。","createdAt":1590746429017},{"id":2406,"originId":"5ed3ca5fb703280f0bcb79c9","articleId":425,"userId":440,"content":"[@zhuweiyou](/user/zhuweiyou) 是指哪个支持装饰器","createdAt":1590938207781},{"id":2407,"originId":"5ed6fefeb703280f0bcb802c","articleId":425,"userId":628,"content":"[@zhoumingque](/user/zhoumingque)  python 的，用 boa  调用，该怎么写。","createdAt":1591148286082},{"id":2408,"originId":"5ed7215482b588109b647459","articleId":425,"userId":734,"content":"[@zhuweiyou](/user/zhuweiyou) 可以来个 issue，不过目测不好支持，毕竟 JS 自己的装饰器都还用得比较麻烦","createdAt":1591157076763},{"id":2409,"originId":"5ed5dd4982b588109b6471d5","articleId":427,"userId":335,"content":"本次主要使用react hooks开发cnode社区，欢迎留言","createdAt":1591074121848},{"id":2410,"originId":"5ed4e5a982b588109b647002","articleId":428,"userId":89,"content":"牛逼，都发过来吧","createdAt":1591010729940},{"id":2411,"originId":"5ed4eca1b703280f0bcb7ca9","articleId":428,"userId":1151,"content":"[@i5ting](/user/i5ting) 😄 ","createdAt":1591012513026},{"id":2412,"originId":"5ed50b71b703280f0bcb7d0d","articleId":428,"userId":1152,"content":"楼主加油，很好的入门指导；\r\n看了下楼主的代码主要是使用`@truffle/hdwallet-provider` 和  `web3.eth.sendTransaction`; \r\n建议学习时候，不要用`@truffle/hdwallet-provider`，可以了解下`web3.eth.accounts.decrypt`,`web3.eth.accounts.signTransaction`,`web3.eth.sendSignedTransaction`；\r\n发送成功后使用`web3.eth.getTransaction`,`web3.eth.getBlock`这些，感觉这样会让学习的人更容易理解ETH网络的运行原理。\r\n以前开发我也是用gannache，不过我用的是gannache-cli，现在都是`Rinkeby`网络，直接怼😄，反正不要钱，网络也不堵。\r\n\r\n加油！！！","createdAt":1591020401776},{"id":2413,"originId":"5ed5b477b703280f0bcb7dad","articleId":428,"userId":1151,"content":"[@Broszhu](/user/Broszhu) 谢谢你的建议\r\n使用 [@truffle](/user/truffle)/hdwallet-provider，用户会更快的上手跑通 demo。\r\n\r\n`web3.eth.getTransaction`，`web3.eth.getBlock` 这些方法属于 web3.js 的具体使用方式了，想着在后续章节里单独详解 web3.js 的\r\n\r\n`gannache-cli` 和 `testrpc` 都可以在 terminal 下使用，也是为了便于初学者快速开始，所以选择了用 `Gannache` 。\r\n\r\nRinkeby 还是作为线上的测试环境比较好，本地测试环境用 Rinkeby 速度还是跟不上的，尤其是生产环境要跑测试脚本的情况下，一次 `npm run test` 就要消耗 好多个ETH。这种情况下还是本地的 `Testrpc` 或者 `Rinkeby` 更方便。\r\n\r\n还是感谢你的建议 ：）","createdAt":1591063671410},{"id":2414,"originId":"5ecf348482b588109b6465f7","articleId":429,"userId":90,"content":"建议有想法的同学不去，他们公司是一顿操作猛如虎，一问待遇2500.","createdAt":1590637700284},{"id":2415,"originId":"5ecf831db703280f0bcb736c","articleId":429,"userId":2,"content":"这种公司纯粹是恶心人","createdAt":1590657821798},{"id":2416,"originId":"5ecf9cb5b703280f0bcb73ca","articleId":429,"userId":98,"content":"你先问请楚技术有没有看过简历，没看过的一律不去，还有就是绝对不要接受达不到你预期薪资的工作","createdAt":1590664373294},{"id":2417,"originId":"5ed0717ab703280f0bcb74b2","articleId":429,"userId":36,"content":"感觉是HR的锅，没有过滤","createdAt":1590718842168},{"id":2418,"originId":"5ed0737ab703280f0bcb74c0","articleId":429,"userId":18,"content":"负责招聘的人这么干是图个啥呢，不也浪费他自己时间吗","createdAt":1590719354665},{"id":2419,"originId":"5ed0b865b703280f0bcb75b5","articleId":429,"userId":57,"content":"太没诚意了","createdAt":1590736997358},{"id":2420,"originId":"5ed0c74482b588109b646971","articleId":429,"userId":1153,"content":"搞不懂他们这通操作是想干啥，反正是把我恶心得不行\r\n以后有面试去之前确实应该问问清楚","createdAt":1590740804417},{"id":2421,"originId":"5ed45d4782b588109b646dc6","articleId":429,"userId":636,"content":"我之前也面过这家公司，感觉不咋地。明明约好了时间，过去的时候却说面试官不在，临时找个人来面。","createdAt":1590975815887},{"id":2422,"originId":"5ed47204b703280f0bcb7aab","articleId":429,"userId":16,"content":"去年面的，一面一个小弟随便问了几个问题，然后就把老大叫来了，就问我能不能996，完事就是压薪资，然后我就撤了，感觉公司氛围很压抑，还是不要去的好","createdAt":1590981124947},{"id":2423,"originId":"5ebc8b4b2d0afc4087f550ec","articleId":431,"userId":97,"content":"消灭零回复","createdAt":1589414731926},{"id":2424,"originId":"5ebdfa1ee785ec40b04fce68","articleId":431,"userId":873,"content":"哈哈 前端和node不分家的把","createdAt":1589508638774},{"id":2425,"originId":"5ec68301a87fc8583363d9d3","articleId":431,"userId":655,"content":"用react重构有什么好处呀。","createdAt":1590067969107},{"id":2426,"originId":"5ec734a2a87fc8583363dacf","articleId":431,"userId":1156,"content":"服务端渲染的性能是个巨坑","createdAt":1590113442571},{"id":2427,"originId":"5ed08738b703280f0bcb7519","articleId":431,"userId":1155,"content":"[@awong1900](/user/awong1900)  在使用nodejs做服务端渲染的前提，使用react比其他模板引擎的优势如下：\r\n1. 语言的使用人数。会用react的前端一大把一大把，但是会用handlebar或jade或其他模板引擎的人非常好，所以从团队招聘的角度上讲，使用react更容易找到人。\r\n2. 语言的流行程度。其实和第一条有点像，语言越流行，使用的必要性就越大。加入jade比react流行，那么完全可以使用jade\r\n3. 前端的复杂性。加入前端很复杂，需要管理多种数据，组件之间还需要通信，共享数据之类的，那么模板引擎是做不到的。\r\n4. 开发效率和网页性能。使用框架的开发效率是很高的，而且容易构建复杂的前端应用程序。众所周知，数据驱动的性能是最佳的\r\n5. 逻辑解耦。react可以使用ref获取元素，二模板只能使用jquery，如果有人重构你的dom，但是忘记把相应的jquery选择的元素删除，会在逻辑层面引发不可知的问题。因为在dom上完全看不出来到底有没有jquery在用这些dom。如果使用ref就没有这些顾虑了。此外react组件复用比模板引擎好用\r\n6. 优秀的延展性。项目越大，维护模板引擎的成本就越高，最后容易引起牵一发而动全身。而react的模块管理使得项目结构和逻辑相对清晰。","createdAt":1590724408093},{"id":2428,"originId":"5ed0878cb703280f0bcb751d","articleId":431,"userId":1155,"content":"[@muyuxingguang](/user/muyuxingguang) 这里的性能指的是服务器的性能吗？服务端渲染一大优势在于提供良好的用户体验，尽快显示网页给用户。","createdAt":1590724492918},{"id":2429,"originId":"5ed0885e82b588109b6468a6","articleId":431,"userId":1155,"content":"[@guizhiyicao](/user/guizhiyicao) 是的，据我所知，大部分node工程师是从前端转过来的。前端越来越复杂，然后就会发现后端好简单。只要不是特别大的项目，后端只需处理下db和redis，数据发送到前端进行处理。保证数据的完整性和原始性。减少有时候改需求既要改前端还要改后端的尴尬场景","createdAt":1590724702359},{"id":2430,"originId":"5ed0b81fb703280f0bcb75b0","articleId":431,"userId":57,"content":"前端工程化，找react生态解决就好了","createdAt":1590736927399},{"id":2431,"originId":"5eccc5f4a87fc8583363e1e6","articleId":432,"userId":89,"content":"\t别断章取义哈，学会学习、思考、总结，在cnode上坚持发文两年只是个途径而已。\r\n\t\r\n\t加油","createdAt":1590478324762},{"id":2432,"originId":"5eccc6d067c8a45803da1902","articleId":432,"userId":1157,"content":"[@i5ting](/user/i5ting) 哈哈,只是定个目标而已,谁知道两年后会怎样!","createdAt":1590478544612},{"id":2433,"originId":"5ecd1909b703280f0bcb6ece","articleId":432,"userId":21,"content":"听谁说的？我在cnode也发了2，3年了，我怎么不知道？","createdAt":1590499593868},{"id":2434,"originId":"5ecdbc9b82b588109b646318","articleId":432,"userId":90,"content":"[@zy445566](/user/zy445566) 那说明是灌水帖～","createdAt":1590541467209},{"id":2435,"originId":"5ece0dda82b588109b646430","articleId":432,"userId":1157,"content":"[@zy445566](/user/zy445566) 狼叔  => 我说的\r\n","createdAt":1590562266489},{"id":2436,"originId":"5ece4a77b703280f0bcb7093","articleId":432,"userId":21,"content":"[@jxycbjhc](/user/jxycbjhc) 摸鱼摸出来的文章，水也正常。","createdAt":1590577783413},{"id":2437,"originId":"5ece4b2e82b588109b6464b7","articleId":432,"userId":21,"content":"[@865881900](/user/865881900) 那你加油哦，羡慕年轻人还有冲劲啊","createdAt":1590577966666},{"id":2438,"originId":"5ed05ce9b703280f0bcb745a","articleId":432,"userId":641,"content":"为啥一定要进阿里呢?为啥一定要想着打工呢？想不明白","createdAt":1590713577426},{"id":2439,"originId":"5ed071ba82b588109b646868","articleId":432,"userId":36,"content":"加油哦","createdAt":1590718906943},{"id":2440,"originId":"5ecf2fc9b703280f0bcb71ce","articleId":435,"userId":1159,"content":"### 安装puppeteer错误\r\n\r\n```shell\r\nERROR: Failed to set up Chromium r737027! Set \"PUPPETEER_SKIP_DOWNLOAD\" env variable to skip download.\r\n```\r\n\r\n解决方案\r\n```shell\r\nPUPPETEER_DOWNLOAD_HOST=https://npm.taobao.org/mirrors npm i puppeteer\r\n```","createdAt":1590636489810},{"id":2441,"originId":"5ece012db703280f0bcb6fcb","articleId":436,"userId":89,"content":"其实csr和ssr合在一起，一套写法，分开部署，可以在降级上有优势的。","createdAt":1590559021443},{"id":2442,"originId":"5ece290ab703280f0bcb7039","articleId":436,"userId":301,"content":"[@i5ting](/user/i5ting) 其实我们的CSR和纯粹的CSR渲染还是有些差异，我们还是需要调接口拿到相关的全局配置，然后通过CSR渲染输出在模板中。目前只有SSR渲染失败的时候会降级到CSR渲染返回内容，或者远程组件调用的时候也是走CSR。未来的话，我们一个业务的服务，支持web的响应式、以及APP中的混合开发的离线包（走CSR渲染）","createdAt":1590569226563},{"id":2443,"originId":"5ece299582b588109b64645a","articleId":436,"userId":301,"content":"我们生产环境的实际数据测试，页面渲染的性能瓶颈都在接口端的请求响应，Vue的SSR在数据准备就绪的时候，渲染还是非常快的。","createdAt":1590569365491},{"id":2444,"originId":"5ece2a5e82b588109b646465","articleId":436,"userId":301,"content":"其实我们公司内部的后台管理系统，也是经过好几年的超大型项目，业务量巨大，后续我们也是打算使用远程组件来调用新的业务，独立部署。","createdAt":1590569566245},{"id":2445,"originId":"5ece2b50b703280f0bcb7041","articleId":436,"userId":301,"content":"![image.png](//static.cnodejs.org/FsYjCiIZZHYipHEuKupkuLLO32jl)\r\n这个是我们聚合服务，调用其它的SSR服务渲染的耗时，一次渲染包含了一次获取用户信息的接口、一次调用远程服务的内容。基本上渲染的效率还是在可以接受的范围的。","createdAt":1590569808851},{"id":2446,"originId":"5ece2c01b703280f0bcb704f","articleId":436,"userId":301,"content":"![image.png](//static.cnodejs.org/FpoVQBU8C53NDwCYEZp-gcphV4vP)\r\n\r\n这个是我们信号服务，CSR渲染基本上没什么耗时，SSR渲染的时候，倒是会花费一些时间。","createdAt":1590569985916},{"id":2447,"originId":"5ece2bd9b703280f0bcb7049","articleId":437,"userId":1161,"content":"已报名，😁","createdAt":1590569945346},{"id":2448,"originId":"5ec4c91ea87fc8583363d4e6","articleId":439,"userId":107,"content":"楼主了解下[concent](https://github.com/concentjs/concent)? 一个内置依赖收集，可预测、零入侵、渐进式、高性能的react开发框架\r\n[doc](https://concentjs.github.io/concent-doc/)","createdAt":1589954846426},{"id":2449,"originId":"5ec74789a87fc8583363db13","articleId":439,"userId":1104,"content":"[@fantasticsoul](/user/fantasticsoul) 已star，目前项目都在用dva，saga的一些异步写法想换很久了。","createdAt":1590118281426},{"id":2450,"originId":"5ecca4d967c8a45803da187c","articleId":439,"userId":107,"content":"[@wbget](/user/wbget) \r\nconcent的工作原理和Provider Cosumer没关系，所以你可以在现有的项目局部使用起来体验下😀。","createdAt":1590469849369},{"id":2451,"originId":"5ec72627a87fc8583363da5f","articleId":440,"userId":1163,"content":"大佬🐂","createdAt":1590109735044},{"id":2452,"originId":"5ec72edf67c8a45803da117d","articleId":440,"userId":89,"content":"挺好的","createdAt":1590111967234},{"id":2453,"originId":"5ec76ffea87fc8583363db79","articleId":440,"userId":191,"content":"厉害了哥  Deno 资源网站分享个","createdAt":1590128638694},{"id":2454,"originId":"5ec78e9467c8a45803da12b8","articleId":440,"userId":1147,"content":"刚好在安利这个项目，就发现了本尊","createdAt":1590136468082},{"id":2455,"originId":"5ec7926567c8a45803da12d0","articleId":440,"userId":41,"content":"[@zhmushan](/user/zhmushan) 在哪儿看到的呀？","createdAt":1590137445964},{"id":2456,"originId":"5ec797a6a87fc8583363dbe9","articleId":440,"userId":22,"content":"[@i5ting](/user/i5ting) 我之前 markdown 生成 html 都是用狼叔的 i5ting_ztree_toc。目录很赞","createdAt":1590138790260},{"id":2457,"originId":"5ec7bf8b67c8a45803da132e","articleId":440,"userId":1147,"content":"[@xcatliu](/user/xcatliu) github的Explore repositories给我自动推荐的emmm","createdAt":1590149003506},{"id":2458,"originId":"5ecb2854a87fc8583363df4c","articleId":440,"userId":18,"content":"名字取得好","createdAt":1590372436084},{"id":2459,"originId":"5ecb24cea87fc8583363df25","articleId":441,"userId":89,"content":"ssr定制性通常都很高，next/nuxt这些都有点过度封装了。挺好的，虽然不懂vue，点个赞","createdAt":1590371534902},{"id":2460,"originId":"5ecb27a0a87fc8583363df35","articleId":441,"userId":301,"content":"[@i5ting](/user/i5ting) 多谢大佬点赞。","createdAt":1590372256227},{"id":2461,"originId":"5ec8a971a87fc8583363dd02","articleId":442,"userId":3,"content":"有电报交流群。\r\nTelegram交流群: https://t.me/sphard","createdAt":1590208881870},{"id":2462,"originId":"5ec8c25167c8a45803da140a","articleId":442,"userId":1164,"content":"[@darrenliuwei](/user/darrenliuwei) 感谢！","createdAt":1590215249252},{"id":2463,"originId":"5ec660a2a87fc8583363d996","articleId":443,"userId":89,"content":"看看 https://github.com/egoist/esbuild-loader ","createdAt":1590059170203},{"id":2464,"originId":"5ec756d167c8a45803da121c","articleId":443,"userId":846,"content":"[@i5ting](/user/i5ting) 感觉 esbuild 的野心挺大，应该不会满足于仅仅作为 webpack 的一个 plugin 或者 loader。\r\n为了达到 esbuild 的那种打包效果，并不是仅仅让 compile 那步快就可以了的。","createdAt":1590122193499},{"id":2465,"originId":"5ec75ae567c8a45803da1224","articleId":443,"userId":89,"content":"[@92hackers](/user/92hackers) 我研究研究","createdAt":1590123237876},{"id":2466,"originId":"5ec76f76a87fc8583363db71","articleId":443,"userId":191,"content":"厉害了","createdAt":1590128502930},{"id":2467,"originId":"5eb9045d2d0afc4087f5446c","articleId":444,"userId":117,"content":"就不该用`push`方法","createdAt":1589183581367},{"id":2468,"originId":"5eb925eae785ec40b04fb856","articleId":444,"userId":541,"content":"一楼说得对，本来就不该用push。\r\n写下一行代码应该对对代码有复杂度的粗略估计。\r\n解构也是有迭代耗时的。\r\n解构一个超过10长度的数组本来就值得警惕 \r\n\r\n======================\r\n\r\n参数栈这个如果c学得扎实应该有点概念，以前写c还有入栈顺序，返回值放哪的协议呢\r\n传递1w个指针，💥\r\n不过js解释器聪明点这块说不定能自己优化掉，","createdAt":1589192170590},{"id":2469,"originId":"5eb94d2c2d0afc4087f54527","articleId":444,"userId":109,"content":"楼主问题是把解构出来的值当作函数参数， 那如果有10k个元素就会10k个参数，肯定会爆栈的。\r\n使用解构方法一定得注意这个问题。\r\n\r\n还有apply也有类似陷阱：\r\nhttps://github.com/ruanyf/es6tutorial/pull/520 \r\n","createdAt":1589202220143},{"id":2470,"originId":"5eb952752d0afc4087f54531","articleId":444,"userId":21,"content":"[@waitingsong](/user/waitingsong) \r\n嗯，我现在思考的是调用栈只是为了保证方法的执行顺序，按照道理来说数据都已经在内存中，根本没必要在调用栈中存参数，所以我认为这是一个设计失误，下次假期抽点时间看看它为什么非要存参数。","createdAt":1589203573660},{"id":2471,"originId":"5eb975fbe785ec40b04fb8bf","articleId":444,"userId":109,"content":"[@zy445566](/user/zy445566) 我猜测可能是因为解构数组导致函数参数个数不定，于是执行环境无法做某些（针对固定参数个数的）优化。于是……\r\n要不你试试看把例子改成固定超大个数参数（比如你测试环境下面参数个数），看看是否也爆栈","createdAt":1589212667882},{"id":2472,"originId":"5eba05e62d0afc4087f545f7","articleId":444,"userId":18,"content":"length `2**17` 这么大的数组，感觉还有其他坑在等着","createdAt":1589249510299},{"id":2473,"originId":"5ebb70162d0afc4087f54d67","articleId":444,"userId":541,"content":"[@waitingsong](/user/waitingsong) 我觉得apply这个陷阱比解构这个更加值得注意，比较容易忽略和失去警惕性","createdAt":1589342230219},{"id":2474,"originId":"5ebbf584e785ec40b04fc30b","articleId":444,"userId":109,"content":"[@AnzerWall](/user/AnzerWall) 所以过于精妙的奇技淫巧还是少用。","createdAt":1589376388293},{"id":2475,"originId":"5ec4855a67c8a45803da0a44","articleId":444,"userId":405,"content":"[@chenkai0520](/user/chenkai0520) 我觉得这个跟push没有关系，他问题的关键是解构之后参数数量太多导致栈爆了，如果楼主用for循环，然后每次push时候只只传一个参数应该没有问题","createdAt":1589937498164},{"id":2476,"originId":"5ec5397ba87fc8583363d65d","articleId":444,"userId":21,"content":"[@youth7](/user/youth7) \r\n对的，即使是console. log也有相同的问题。其实不管是不是解构，只要参数够多，目前爆栈就一定存在。","createdAt":1589983611956},{"id":2477,"originId":"5ec6278fa87fc8583363d841","articleId":444,"userId":405,"content":"[@zy445566](/user/zy445566) 那是当然，关键原理就是x86的计算模型就是通过寄存器/栈来传递参数，寄存器放不下了就放栈，栈也放不小了就栈爆了","createdAt":1590044559407},{"id":2478,"originId":"5ec736fc67c8a45803da11bb","articleId":444,"userId":21,"content":"[@youth7](/user/youth7) 学习了，估计V8自己实现了一套，但是基本原理应该不变。","createdAt":1590114044819},{"id":2479,"originId":"5ec22ad767c8a45803da059d","articleId":447,"userId":419,"content":"好像还可以","createdAt":1589783255090},{"id":2480,"originId":"5ec22fbea87fc8583363cf21","articleId":447,"userId":1166,"content":"[@yuu2lee4](/user/yuu2lee4) 有什么问题欢迎反馈~","createdAt":1589784510863},{"id":2481,"originId":"5ec6822967c8a45803da109a","articleId":447,"userId":655,"content":"能不能一段话介绍一下工具解决的问题。 好让我们外行的人明白是解决什么问题，更有兴趣试用。","createdAt":1590067753772},{"id":2482,"originId":"5ec61bf3a87fc8583363d80c","articleId":448,"userId":89,"content":"据了解，招node工程师哦，大家可以","createdAt":1590041587525},{"id":2483,"originId":"5ec63ace67c8a45803da0fd8","articleId":448,"userId":1138,"content":"哈哈  多谢狼叔 ","createdAt":1590049486015},{"id":2484,"originId":"5ec4fbeba87fc8583363d5e0","articleId":450,"userId":90,"content":"图片挂了～","createdAt":1589967851416},{"id":2485,"originId":"5ebe2aefe785ec40b04fcf18","articleId":451,"userId":1168,"content":"俺不想学了","createdAt":1589521135976},{"id":2486,"originId":"5ebe48db2d0afc4087f55e10","articleId":451,"userId":190,"content":"node还没有学好呢","createdAt":1589528795710},{"id":2487,"originId":"5ebeb5462d0afc4087f55ead","articleId":451,"userId":1079,"content":"[@905868332](/user/905868332) 咱學不動了。","createdAt":1589556550128},{"id":2488,"originId":"5ebfd8872d0afc4087f55fb8","articleId":451,"userId":3,"content":"node还没有学好呢","createdAt":1589631111382},{"id":2489,"originId":"5ec25301a87fc8583363cf90","articleId":451,"userId":22,"content":"学不动了","createdAt":1589793537404},{"id":2490,"originId":"5ec2943367c8a45803da06ce","articleId":451,"userId":1079,"content":"[@justjavac](/user/justjavac) 目前不兼容 node，缺乏動力啊=。=","createdAt":1589810227216},{"id":2491,"originId":"5ec2ae41a87fc8583363d04e","articleId":451,"userId":22,"content":"[@jaylin1011](/user/jaylin1011) 等 std 库吧，会兼容的","createdAt":1589816897676},{"id":2492,"originId":"5ec32f53a87fc8583363d098","articleId":451,"userId":26,"content":"感觉就像纯异步单线程的go","createdAt":1589849939081},{"id":2493,"originId":"5ec33dbb67c8a45803da079b","articleId":451,"userId":405,"content":"[@justjavac](/user/justjavac) \r\n我去你太假了，segment fault上明明写着\r\n> 10 年前端开发经验，目前正在和 Node.js 之父一起开发下一代服务端 JavaScript 平台：Deno\r\n\r\n另外我想问下为何deno的标准库没有类似net之类的能够操纵tcp socket的模块","createdAt":1589853627946},{"id":2494,"originId":"5ec3659867c8a45803da0830","articleId":451,"userId":14,"content":"deno 不是 \"node\".split(\"\").sort().join(\"\")吗   :\\","createdAt":1589863832147},{"id":2495,"originId":"5ec39ad667c8a45803da0903","articleId":451,"userId":641,"content":"deno到底是要来干啥？","createdAt":1589877462426},{"id":2496,"originId":"5ec493be67c8a45803da0ab3","articleId":451,"userId":516,"content":"[@youth7](/user/youth7) 他还在做deno的中文网.....","createdAt":1589941182773},{"id":2497,"originId":"5ec4a35767c8a45803da0b1b","articleId":451,"userId":1079,"content":"[@chunjiu](/user/chunjiu) Node 更新太慢了，我們重做吧。","createdAt":1589945175775},{"id":2498,"originId":"5ec48c1567c8a45803da0a70","articleId":453,"userId":26,"content":"进入thread好像没有返回的导航，有点别扭啊","createdAt":1589939221615},{"id":2499,"originId":"5ec4907067c8a45803da0a9b","articleId":453,"userId":1169,"content":"[@HobaiRiku](/user/HobaiRiku) 谢谢，确实自己一直习惯点浏览器自带的返回没有考虑到。现在已经在thread界面添加了返回按钮。","createdAt":1589940336330},{"id":2500,"originId":"5eba7a4e2d0afc4087f549ea","articleId":454,"userId":191,"content":"用的什么框架","createdAt":1589279310604},{"id":2501,"originId":"5ebb48332d0afc4087f54ae5","articleId":454,"userId":65,"content":"[@xuemeifenglin](/user/xuemeifenglin) gin","createdAt":1589332019714},{"id":2502,"originId":"5ebb6aa3e785ec40b04fc003","articleId":454,"userId":1171,"content":"golang实现一遍是什么体验？","createdAt":1589340835029},{"id":2503,"originId":"5ec3991067c8a45803da08f6","articleId":454,"userId":65,"content":"[@udbmnm](/user/udbmnm) 无聊","createdAt":1589877008006},{"id":2504,"originId":"5ec12f0767c8a45803da03b4","articleId":456,"userId":1174,"content":"厉害ｂ(￣▽￣)ｄ","createdAt":1589718791946},{"id":2505,"originId":"5ebf64b9e785ec40b04fd0fa","articleId":458,"userId":1175,"content":"写文档不易，支持一下","createdAt":1589601465200},{"id":2506,"originId":"5ebde6f4e785ec40b04fce22","articleId":459,"userId":3,"content":"![WeChat Screenshot_20200515084805.png](//static.cnodejs.org/Fp-5fqdTU9kmWAyn8FAzmdizHJw6)\r\n![22.png](//static.cnodejs.org/FmGuG_DnIr8SBKz_Dbpm4719UIIX)\r\n图片挂掉了。。。","createdAt":1589503732774},{"id":2507,"originId":"5ebdee13e785ec40b04fce3d","articleId":459,"userId":1176,"content":"[@darrenliuwei](/user/darrenliuwei) , 咦？奇怪，我这边是正常的，或者通过 [github](https://github.com/zhangwinning/show-node-api) 地址查看下\r\n![F3BEC7BC-8334-4E5C-A3F1-63873433D3AF.png](//static.cnodejs.org/Fv0J-IFsLsqIqEFbebNo2uNvxVFJ)","createdAt":1589505555939},{"id":2508,"originId":"5ebdee7d2d0afc4087f55c6f","articleId":459,"userId":1176,"content":"采用的图床是微博的，可能会有些问题，这个我再看下 [@darrenliuwei](/user/darrenliuwei) ","createdAt":1589505661034},{"id":2509,"originId":"5ebdf3882d0afc4087f55c82","articleId":459,"userId":3,"content":"[@WenNingZhang](/user/WenNingZhang) 嗯，微博限制了外链。\r\n\r\n可能你的浏览器登录了微博账号，而我已经几年没有登录过微博了","createdAt":1589506952875},{"id":2510,"originId":"5eb231572d0afc4087f53774","articleId":460,"userId":11,"content":"用 svg 做散点图会有性能问题吧，当散点数量比较多的时候创建了太多的 `<circle>` dom 节点，相对而言 line chart 倒是还好，因为再多的数据实际上只是一个 `<path>` 节点","createdAt":1588736343852},{"id":2511,"originId":"5eb524e82d0afc4087f53e40","articleId":460,"userId":1177,"content":"[@hyj1991](/user/hyj1991)  学习为主 未来有空的话会打算增加canvas的渲染方式的 ","createdAt":1588929768853},{"id":2512,"originId":"5ebd3094e785ec40b04fccee","articleId":460,"userId":878,"content":"如果可视化选型D3的话需求方面就是要高度定制化, 你又给搞成配置式的了,  那感觉还不如用 echarts.    =，=","createdAt":1589457044249},{"id":2513,"originId":"5ebd1705e785ec40b04fcb09","articleId":461,"userId":79,"content":"![点赞.png](//static.cnodejs.org/FjdlvnAhOucVdALSu79bS_LF0LYw)![点赞.png](//static.cnodejs.org/FjdlvnAhOucVdALSu79bS_LF0LYw)![点赞.png](//static.cnodejs.org/FjdlvnAhOucVdALSu79bS_LF0LYw)","createdAt":1589450501871},{"id":2514,"originId":"5eba31a7e785ec40b04fb9d2","articleId":463,"userId":33,"content":"webgl 被一笔带过了，，现在的3d看房，看车啥的，什么试戴试穿啥的，不是很多吗，这是真真的商业化场景，其他什么效率工具架构啥的，赚不来钱啊","createdAt":1589260711123},{"id":2515,"originId":"5eba3dc12d0afc4087f546b4","articleId":463,"userId":90,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 朝上才能赚钱的。。。你做那些效率工具赚啥钱～，说白点那叫省钱。所以我都是建议进到最赚钱的部门，其他的去干嘛等被裁么。线上做到把大部分人的需求满足，线下满足高要求需求，相应的线下会淘汰那些不专业的。","createdAt":1589263809873},{"id":2516,"originId":"5eba6488e785ec40b04fbcbd","articleId":463,"userId":33,"content":"[@jxycbjhc](/user/jxycbjhc) 产品卖得不就是用户端？ 你背后做的再好有啥用，3d看房省大把时间，，跟你背后架构再好有啥关系，用户只关心他能看见啥","createdAt":1589273736409},{"id":2517,"originId":"5eba930ae785ec40b04fbd4b","articleId":463,"userId":90,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 产品卖的是满足用户需求～。3d看房首先得解决真实房源的问题，这个不解决4D看房都没有用。还不如自己去做房地产中介，链家里已经有复旦大学、同济大学毕业的。","createdAt":1589285642157},{"id":2518,"originId":"5ebb50d4e785ec40b04fbe96","articleId":463,"userId":33,"content":"[@jxycbjhc](/user/jxycbjhc) 自己建造的房子，，真实房源有啥问题，你敢不放真实的吗，那不是找骂找退货吗。。","createdAt":1589334228130},{"id":2519,"originId":"5eba6210e785ec40b04fbc9e","articleId":464,"userId":1092,"content":"看上去不错","createdAt":1589273104826},{"id":2520,"originId":"5eba7d4c2d0afc4087f54a00","articleId":464,"userId":1139,"content":"[@miser](/user/miser) 欢迎点star","createdAt":1589280076723},{"id":2521,"originId":"5eb5ffe02d0afc4087f53eec","articleId":465,"userId":89,"content":"挺好~","createdAt":1588985824656},{"id":2522,"originId":"5eba7069e785ec40b04fbcfd","articleId":465,"userId":747,"content":"哈哈，我也做个一个类似的轻量级mock工具。https://github.com/brizer/http-mocker/blob/dev/readme_zh.md 。\r\n可以多交流技术啊，以下几个功能我觉得还比较好，特别是利用serviceworker来支持跨域接口的mock这个point：\r\n1、通过配置文件.httpmockrc.json或者package.json文件中的httpmock字段来进行mock映射关系；\r\n\r\n2、支持mockjs语法,灵活配置动态化的mock返回值;\r\n\r\n3、基于path-to-regexp识别express风格的url\r\n\r\n4、基于http-mockjs-ui，通过可视化的方式管理配置文件和mock文件内容，提高效率。\r\n\r\n5、方便的初始化和GUI编辑体验。\r\n\r\n6、支持mock和proxy跨域的接口，通过service worker\r\n\r\n7、支持js定制复杂的规则。\r\n\r\n8、支持对body参数的校验。","createdAt":1589276777299},{"id":2523,"originId":"5ea642c40275394e768836a6","articleId":467,"userId":528,"content":"给每个状态事件起名字累不累？switch case 字符串不会觉得很不优雅吗？","createdAt":1587954372860},{"id":2524,"originId":"5ea6c34cd870946c6b6be742","articleId":467,"userId":1136,"content":"[@Hanggi](/user/Hanggi) Redux 最佳实践建议起名字 😂","createdAt":1587987276165},{"id":2525,"originId":"5ea75b6830176508da9b6b7e","articleId":467,"userId":442,"content":"[@Hanggi](/user/Hanggi) 这是为了应对复杂逻辑时，各种状态变更一目了然，轻松定位问题，还能“时光机”回溯。","createdAt":1588026216189},{"id":2526,"originId":"5ea7920930176508da9b6bef","articleId":467,"userId":1136,"content":"[@szy0syz](/user/szy0syz) 是的，复杂应用确实需要这样去定义","createdAt":1588040201213},{"id":2527,"originId":"5ea85bb030176508da9b6de3","articleId":467,"userId":107,"content":"来试试[concent](https://github.com/concentjs/concent)的todo-list呀，更有趣更简单\r\nhttps://codesandbox.io/s/todoapp-react-concent-fvgvc","createdAt":1588091824850},{"id":2528,"originId":"5eaf72e3fd11584365d2cf97","articleId":467,"userId":528,"content":"不知道你有么有尝试过上百个用字符串定义的状态间跳来跳去，还一目了然，轻松定位？\r\nRedux 太啰嗦，太墨迹了。\r\n\r\nRedux 的状态管理还不如 Flutter 的状态管理来的方便好用，用结构体定义状态肯定比字符串来得清晰，感兴趣可以了解下。","createdAt":1588556515098},{"id":2529,"originId":"5eb976e8e785ec40b04fb8c5","articleId":467,"userId":109,"content":"[@Hanggi](/user/Hanggi) 啰嗦其实不是最重要的，在case 字符串状态中跳转定位（的麻烦）才是问题。","createdAt":1589212904342},{"id":2530,"originId":"57de53097e77820e3acfdfd5","articleId":474,"userId":1181,"content":"想顺便问一下：我在RN上用了async/await，但是很奇怪的是，在赋值语句里let v1 = await XXX();的确会等待执行结果，但是如果后面使用了v1进行的任何操作都不会等待，即使是使用了await标记，这是为什么啊？","createdAt":1474188041517},{"id":2531,"originId":"59c0b1eeb53b601512be4221","articleId":474,"userId":1059,"content":"写得很赞~","createdAt":1505800686153},{"id":2532,"originId":"5aaba3face4a27f8675271a4","articleId":485,"userId":11,"content":"@了我这么多次，愧不敢当，你这边给出的细节也很详细，不然看不到代碼我也不可能这么快找到问题点，哈哈\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1521198074137},{"id":2533,"originId":"5aaba487e7b166bb7b9ecb12","articleId":485,"userId":1185,"content":"[@hyj1991](/user/hyj1991) 感谢感谢，再次感谢 哈哈","createdAt":1521198215763},{"id":2534,"originId":"5aac9f6af5dfc27d7ad988c2","articleId":485,"userId":12,"content":"好详细，感谢分享宝贵经验\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1521262442213},{"id":2535,"originId":"5aaca0f9ce4a27f8675271c8","articleId":485,"userId":358,"content":"感谢分享。","createdAt":1521262841245},{"id":2536,"originId":"5aaca53be7b166bb7b9ecb32","articleId":485,"userId":358,"content":"> 我们使用了alinode进行监控，在[@hyj1991](/user/hyj1991) 的帮助下，几分钟就定位到了疑似泄漏点的地方\r\n\r\n[@DerekYeung](/user/DerekYeung) 这里无图无真相啊... 用 alinode 怎么就能快速定位到这了？补几张图吧","createdAt":1521263931238},{"id":2537,"originId":"5aacadb8e7b166bb7b9ecb35","articleId":485,"userId":133,"content":"这种问题好难定位，只有耐心才能解决。","createdAt":1521266104800},{"id":2538,"originId":"5aacba30ce4a27f8675271cc","articleId":485,"userId":358,"content":"[@simongfxu](/user/simongfxu) 不会的，alinode 可以直接帮你很快定位到。","createdAt":1521269296360},{"id":2539,"originId":"5aacc78de7b166bb7b9ecb40","articleId":485,"userId":1185,"content":"[@atian25](/user/atian25) 说来惭愧，因为定位的过程是[@hyj1991](/user/hyj1991) 帮忙操作的，所以对具体的操作流程没有办法分享给大家，只知道最后分析出来的结果，方便的话也可以让[@hyj1991](/user/hyj1991) 帮忙补几张图 哈哈","createdAt":1521272717001},{"id":2540,"originId":"5aacc84ff5dfc27d7ad988cb","articleId":485,"userId":1185,"content":"[@simongfxu](/user/simongfxu) 确实需要耐心，不过工具也很重要，如果没用alinode的话，有耐心也不一定能这么快找到问题","createdAt":1521272911456},{"id":2541,"originId":"5aacc9a7e7b166bb7b9ecb45","articleId":485,"userId":36,"content":"egg 配合ailnode配置也很简单","createdAt":1521273255786},{"id":2542,"originId":"5aacf72af5dfc27d7ad988d9","articleId":485,"userId":1186,"content":"这个问题之前在看`require`模块的时候有研究过\r\n这个[博客](http://fex.baidu.com/blog/2015/05/nodejs-hot-swapping/)讲的比较详细","createdAt":1521284906782},{"id":2543,"originId":"5aad1f4919b2e3db18959e9b","articleId":485,"userId":21,"content":"厉害厉害，佩服佩服！\r\n涨知识了，缓存居然在数组里\r\n是我也可能查不到这个原因，看来删除require.cache 还不能直接用\r\n\r\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1521295177589},{"id":2544,"originId":"5aae139fce4a27f8675271fb","articleId":485,"userId":1187,"content":"厉害厉害 之前做模块热更新也遇到过类似的问题","createdAt":1521357727401},{"id":2545,"originId":"5aae7389ce4a27f86752721c","articleId":485,"userId":1188,"content":"mark","createdAt":1521382281321},{"id":2546,"originId":"5aaf6df3ce4a27f867527251","articleId":485,"userId":358,"content":"[@DerekYeung](/user/DerekYeung) 看到 [@hyj1991](/user/hyj1991) 的分析出来了： https://zhuanlan.zhihu.com/p/34702356","createdAt":1521446387807},{"id":2547,"originId":"5aaf7cfef5dfc27d7ad98979","articleId":485,"userId":1185,"content":"[@atian25](/user/atian25) 看到了，这个是技术文，比我这个有用的多哈哈，我了文章里require一下","createdAt":1521450238942},{"id":2548,"originId":"5d53e3b3697873456c6bd563","articleId":485,"userId":1189,"content":"mark!","createdAt":1565778867848},{"id":2549,"originId":"5d78c80dd50f572345913b5e","articleId":485,"userId":712,"content":"虽然漏洞解决了，但是你这样使用nodejs其实是不好的，其实是技术或者架构规划的不好导致的一系列的问题，首先我看到了你们使用prototype的类原型操作，es6就已经引入class的方式了。如果想代码更加整洁可读严谨，建议使用TypeScript写代码，然后编译成js运行","createdAt":1568196621881},{"id":2550,"originId":"5eaf836830176508da9b7574","articleId":485,"userId":1190,"content":"感谢分享","createdAt":1588560744248},{"id":2551,"originId":"5eaeadfa30176508da9b74f5","articleId":488,"userId":1192,"content":"mark 一下","createdAt":1588506106934},{"id":2552,"originId":"5ead7e75fd11584365d2cdfa","articleId":489,"userId":1193,"content":"厉害","createdAt":1588428405226},{"id":2553,"originId":"563883c18e90ab7c391e9dd1","articleId":491,"userId":1195,"content":"那些代理ip大概有多少可用的？而且ip会过期吧。","createdAt":1446544321090},{"id":2554,"originId":"563952546d966e1a39996ac4","articleId":491,"userId":378,"content":"[@zysam](/user/zysam) 每天会更新，很多不可用或者会过期，所以需要扫描并测试，还有不少其他的源需要加进去","createdAt":1446597204430},{"id":2555,"originId":"563967f78e90ab7c391e9dfb","articleId":491,"userId":1195,"content":"哦，可以把parseHtml封装下，解析不同的页面。以前也写过类似的，爬ss账号。","createdAt":1446602743576},{"id":2556,"originId":"5639aff47320b237394c5a28","articleId":491,"userId":378,"content":"[@zysam](/user/zysam) enen","createdAt":1446621172092},{"id":2557,"originId":"5e917da358ab6717beb7f1dc","articleId":492,"userId":109,"content":"中小应用啥语言都行，看团队技术栈以及水平。纯 nodejs 在后期维护上可能麻烦些，上 typescript 就基本解决问题。\r\n","createdAt":1586593187448},{"id":2558,"originId":"5e91bc3c58ab6717beb7f26b","articleId":492,"userId":1196,"content":"我觉得 node 可以作为纯前端出身的程序员入门后端的最佳选择吧\r\ntypescript 前后端通写蛮香啊","createdAt":1586609212032},{"id":2559,"originId":"5e92187558ab6717beb7f2b5","articleId":492,"userId":841,"content":"没错，文章表述有误！\r\n\r\n这里的nodejs意思为在 node.js 之上构建后端应用\r\n\r\n谢谢 3 楼指正","createdAt":1586632821077},{"id":2560,"originId":"5e92dc2758ab6717beb7f3a1","articleId":492,"userId":33,"content":"你说的没错，性能说到底最强就是cpu核数的aio。现在大家都是这个模式，性能差异不大。\r\n接下来就是语言本身了，bs 前端天生javascript，后台我还瞎扯什么，一样的语法不香吗","createdAt":1586682919842},{"id":2561,"originId":"5e92e9e958ab6717beb7f3b1","articleId":492,"userId":89,"content":"狼书卷一里都讲了的","createdAt":1586686441954},{"id":2562,"originId":"5e95929d58ab6717beb7f9c2","articleId":492,"userId":2,"content":"但是node的生态真的是个问题，很多东西都没有，还需要不断的完善","createdAt":1586860701264},{"id":2563,"originId":"5e966feb58ab6717beb7fabf","articleId":492,"userId":103,"content":"说不行的基本是没怎么用过，自己在瞎歪歪。PHP性能好吗？Python性能好吗？不照样开发系统。\r\n黑子喜欢用的套路基本就是：\r\n说性能不好。拿出v8怼回去后又说并发不好，你拿出事件模型怼回去又说类型不好，你拿ts怼回去又说不适合开发大项目，你说任何项目对nodejs来说都是小项目，又说生态不好，你拿npm怼回去又说npm依赖一大堆。。。\r\n你可能听到很多人说nodejs不行，但我告诉你，这是他们心虚，害怕nodejs抢他们饭碗而已","createdAt":1586917355840},{"id":2564,"originId":"5e96702c58ab6717beb7fac9","articleId":492,"userId":1197,"content":"土包子","createdAt":1586917420337},{"id":2565,"originId":"5e9c74f00275394e76882211","articleId":492,"userId":1198,"content":"其实很多连什么是 ” IO 操作“ 弄明白……计算密集型也不知道在crud里哪里体现了。理论上c++扩展 或者wasi 能弥补一些 这种加密计算的不足。 ","createdAt":1587311856248},{"id":2566,"originId":"5e9cf10e0275394e76882239","articleId":492,"userId":841,"content":"写后端不仅仅是 CRUD，如何多人写好 CRUD也是一门艺术啊……\r\n\r\n知乎上看到一句话，写后端需要考虑和研究的东西有很多：\r\n\r\n![8802036E-650D-42A3-AA14-B376AF2B2E5E.jpeg](//static.cnodejs.org/FgYat05PMd_49ssYPHj-Sj9m2Gtm)\r\n\r\n希望以后在 nodejs 社区，看到些更加深入点的这方面的思考和分享\r\n\r\n\r\n","createdAt":1587343630237},{"id":2567,"originId":"5e9d41450275394e76882378","articleId":492,"userId":109,"content":"[@suhaotian](/user/suhaotian) 这个属于（后端）架构，而非后端（服务）。 \r\n图片里说的，我感觉要么是老司机，要么是老火车司机。\r\n\r\n说个场景， nodejs/go的后端（微）服务，容器化部署时，一个普通云节点起数十个pod没啥问题吧。如果换成是java，能行么。\r\n大家都承认nodejs生态比java差远了。","createdAt":1587364165337},{"id":2568,"originId":"5e9d5252d870946c6b6bd23f","articleId":492,"userId":358,"content":"保持谦卑，真的，后端领域太大了。","createdAt":1587368530395},{"id":2569,"originId":"5e9d81190275394e76882481","articleId":492,"userId":109,"content":"[@atian25](/user/atian25) 所以，讨论时需要有个边界、结合业务场景。 不然就会出现上面图片中的情况——换成java或者任何语言一样有同样的问题。","createdAt":1587380505247},{"id":2570,"originId":"5e9e46e8d870946c6b6bd36e","articleId":492,"userId":442,"content":"有些地方nodejs的确不错，但还是那句话，没有银弹。","createdAt":1587431144379},{"id":2571,"originId":"5ea7e1fbfd11584365d2c6c6","articleId":492,"userId":2,"content":"现在很多运维的事情，云都已经做了，都2020年了，谁还在自己做运维？\r\n小公司直接上云，大公司有自己的运维系统\r\n主要是要学习的后端的知识确实很多[手动狗头]","createdAt":1588060667206},{"id":2572,"originId":"5ea7e532fd11584365d2c6d2","articleId":492,"userId":1199,"content":"[@waitingsong](/user/waitingsong) 你节点都没负载吗?没负载你开这么多意义何在?开两个做容灾就好.\r\n负载多了,就node.js的GC水平,还真不一定能比java开得多.","createdAt":1588061490066},{"id":2573,"originId":"5ea90a4d30176508da9b6e9a","articleId":492,"userId":36,"content":"不管用啥，能满足业务就行","createdAt":1588136525716},{"id":2574,"originId":"5ea982d030176508da9b6fbf","articleId":492,"userId":109,"content":"[@JsonSong89](/user/JsonSong89) 通常情况下其实差不多。我那个例子只是说说边界场景，比如faas","createdAt":1588167376026},{"id":2575,"originId":"5ea99dcb30176508da9b7005","articleId":492,"userId":536,"content":"用node写写内部系统还行，写对外商业系统想想都可怕，只怕是前端在这刷了下简历各种玩一波拍屁股走人之后留下的全是技术债后面的人来填坑，最后搞一波node服务治理","createdAt":1588174283370},{"id":2576,"originId":"5ea9a18130176508da9b7010","articleId":492,"userId":358,"content":"[@artisan](/user/artisan) 语雀就是西湖区最大的 Node.js 全栈应用。 https://www.yuque.com/seeconf/2020/dn74yy","createdAt":1588175233126},{"id":2577,"originId":"5ea8d9fa30176508da9b6e1e","articleId":495,"userId":59,"content":"iOS 小程序微信支付关了","createdAt":1588124154197},{"id":2578,"originId":"5ea94ca6fd11584365d2c997","articleId":495,"userId":1136,"content":"[@liangtongzhuo](/user/liangtongzhuo) 额。。。","createdAt":1588153510698},{"id":2579,"originId":"5ea68c4230176508da9b69fb","articleId":496,"userId":109,"content":"~~ 浮点数取整 这个忘记哪儿看的，好像不安全。","createdAt":1587973186010},{"id":2580,"originId":"5ea6f27630176508da9b6b2f","articleId":496,"userId":18,"content":"[@waitingsong](/user/waitingsong) 应该是只支持32位的数字","createdAt":1587999350930},{"id":2581,"originId":"5ea7b1b230176508da9b6c4b","articleId":496,"userId":612,"content":"[@alsotang](/user/alsotang) 你好，我专门翻了一下 《javascript 权威指南》，第34页，标题为 3.1 数字。其中有一段：\"Javascript 中的所有数字，均用浮点数表示。Javascript 采用 IEEE 745 标准 定义的64位浮点格式表示数字\"","createdAt":1588048306619},{"id":2582,"originId":"5ea7df1030176508da9b6cc1","articleId":496,"userId":11,"content":"按位取反感觉以前主要是用在以前没有 `Array.includes` 的时候拿来判断数组里存不存在某个值，类似于 `if(~a.indexOf(b))`，实际上仅当 b 不在 a 内的时候这个条件不满足 `~(-1) === 0`，这样符合代码阅读的自然逻辑","createdAt":1588059920072},{"id":2583,"originId":"5ea8e84d30176508da9b6e47","articleId":496,"userId":18,"content":"[@shixinglong007](/user/shixinglong007) \r\n> 所有的按位操作符的操作数都会被转成补码（two's complement）形式的有符号32位整数\r\n\r\nfrom https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators","createdAt":1588127821528},{"id":2584,"originId":"5ea902dffd11584365d2c8d1","articleId":496,"userId":612,"content":"[@alsotang](/user/alsotang) [赞]学到了，按位操作符 还有 &， | ，^， <<， >>， >>>","createdAt":1588134623484},{"id":2585,"originId":"5ea63fc7d870946c6b6be4f3","articleId":497,"userId":33,"content":"这里的接口不是指数据结构的interface，而是前后台交互的api地址。","createdAt":1587953607320},{"id":2586,"originId":"5ea7ed51fd11584365d2c6fa","articleId":497,"userId":2,"content":"https://github.com/alibaba/pont\r\n仅供参考","createdAt":1588063569046},{"id":2587,"originId":"5ea7fb8cfd11584365d2c721","articleId":497,"userId":33,"content":"[@dingyuanwu](/user/dingyuanwu) 太麻烦了","createdAt":1588067212902},{"id":2588,"originId":"5ea8e87dfd11584365d2c867","articleId":497,"userId":1201,"content":"思路應同 2 樓，用 Contract-First api 的方式開發","createdAt":1588127869565},{"id":2589,"originId":"5ea8fb0afd11584365d2c8ba","articleId":497,"userId":33,"content":"[@0w0](/user/0w0) 同一文件定义，前后台一起写，接口调用ajax，接口修改代码自动报错岂不是更简单。","createdAt":1588132618844},{"id":2590,"originId":"5ea8249ffd11584365d2c79b","articleId":499,"userId":194,"content":"创业不易，加油！\r\n搭配无远云开发平台简直无敌：https://wuyuan.io","createdAt":1588077727462},{"id":2591,"originId":"5e8fd8e664259617c49a52bd","articleId":501,"userId":18,"content":"maintainer 还是只有一个人。看来是作者把账号让出来了。","createdAt":1586485478506},{"id":2592,"originId":"5e91299264259617c49a550d","articleId":501,"userId":358,"content":"新版本去掉求职信息没（逃","createdAt":1586571666062},{"id":2593,"originId":"5e93bfc464259617c49a5864","articleId":501,"userId":11,"content":"都包吃包住了就不需要求职信息了吧","createdAt":1586741188972},{"id":2594,"originId":"5e93cb4858ab6717beb7f4ff","articleId":501,"userId":18,"content":"[@hyj1991](/user/hyj1991) 有道理\r\n\r\n[@atian25](/user/atian25) ","createdAt":1586744136313},{"id":2595,"originId":"5e93dbd358ab6717beb7f544","articleId":501,"userId":358,"content":"眼光要放长远啊，18 个月后还是需要求职的。","createdAt":1586748371993},{"id":2596,"originId":"5e9426a758ab6717beb7f6a1","articleId":501,"userId":89,"content":"可能18个月后就不想出来了，哈哈哈","createdAt":1586767527542},{"id":2597,"originId":"5e94282264259617c49a5a07","articleId":501,"userId":22,"content":"[@i5ting](/user/i5ting) 狼叔你是不是有个大胆的想法","createdAt":1586767906056},{"id":2598,"originId":"5e95113e64259617c49a5b4d","articleId":501,"userId":358,"content":"可能 18 个月后，里面的狱友们都成为了 core-js 的贡献者了。","createdAt":1586827582173},{"id":2599,"originId":"5e9511b358ab6717beb7f7da","articleId":501,"userId":36,"content":"牢里面更新的吗","createdAt":1586827699187},{"id":2600,"originId":"5e96b70564259617c49a5fcd","articleId":501,"userId":35,"content":"孝鼠，里面个个都是人才，出来干什么？","createdAt":1586935557481},{"id":2601,"originId":"5e96cd6149db644e3aba76f1","articleId":501,"userId":22,"content":"[@SuperHuangXu](/user/SuperHuangXu) 窃格瓦拉于 2020 年 4 月 18 日出狱，还有 3 天。到时候会有活动：随机偷取一辆幸运电动车😂","createdAt":1586941281747},{"id":2602,"originId":"5e97ff0c0275394e76881ad9","articleId":501,"userId":59,"content":"太好笑了吧","createdAt":1587019532669},{"id":2603,"originId":"5ea795e430176508da9b6c05","articleId":501,"userId":1202,"content":"这里也都是人才啊","createdAt":1588041188852},{"id":2604,"originId":"5ea79b6130176508da9b6c1b","articleId":501,"userId":38,"content":"说话好好听！","createdAt":1588042593804},{"id":2605,"originId":"5ea7dde0fd11584365d2c6ba","articleId":501,"userId":2,"content":"人才聚集地QVQ","createdAt":1588059616444},{"id":2606,"originId":"5ea1fd930275394e76882e17","articleId":503,"userId":1114,"content":"感谢分享\r\n","createdAt":1587674515318},{"id":2607,"originId":"5ea79537fd11584365d2c623","articleId":503,"userId":852,"content":"[@kerpler](/user/kerpler) 不客气:)","createdAt":1588041015936},{"id":2608,"originId":"5ea7849730176508da9b6ba3","articleId":504,"userId":11,"content":"看了下发送 ilidilid 后，body 节点的 style 里加了个 `transform:rotateY(180deg)`\r\n\r\n虽然并不复杂但是想出来的这个程序员挺有意思的 :)","createdAt":1588036759093},{"id":2609,"originId":"5ea6c3f530176508da9b6ade","articleId":505,"userId":89,"content":"思路挺好的，看着和liferay portal很像","createdAt":1587987445563},{"id":2610,"originId":"5ea6e4e0d870946c6b6be776","articleId":505,"userId":113,"content":"[@i5ting](/user/i5ting) 感谢大佬关注，回头我也看看liferay portal\r\n","createdAt":1587995872163},{"id":2611,"originId":"5e95692d64259617c49a5cd2","articleId":506,"userId":89,"content":"这个一壶茶也搞不定","createdAt":1586850093491},{"id":2612,"originId":"5e956b0b64259617c49a5ce3","articleId":506,"userId":1136,"content":"[@i5ting](/user/i5ting) 来一桶上好的冰红茶😃","createdAt":1586850571177},{"id":2613,"originId":"5e96cafb0275394e768818f4","articleId":506,"userId":161,"content":"优秀","createdAt":1586940667965},{"id":2614,"originId":"5e96ec120275394e76881960","articleId":506,"userId":1136,"content":"[@tzbcf](/user/tzbcf) 大佬优秀","createdAt":1586949138804},{"id":2615,"originId":"5e9b7873d870946c6b6bcfb0","articleId":506,"userId":1205,"content":"你这杯是超大杯喜茶吧","createdAt":1587247219928},{"id":2616,"originId":"5e9c40240275394e768821df","articleId":506,"userId":1136,"content":"[@lijsh](/user/lijsh) 被你看穿了）逃","createdAt":1587298340641},{"id":2617,"originId":"5ea10352d870946c6b6bda9e","articleId":506,"userId":1206,"content":"把前端文件的打包也一起放进docker里做会不会逼格更高一点","createdAt":1587610450683},{"id":2618,"originId":"5ea24252d870946c6b6bdd6a","articleId":506,"userId":1136,"content":"[@qichangjun](/user/qichangjun) 打包主要是 Webpack、Rollup 之类的工具在做，可以在 Docker 运行这些命令打包","createdAt":1587692114921},{"id":2619,"originId":"5ea679c8d870946c6b6be5cf","articleId":506,"userId":134,"content":"mark","createdAt":1587968456690},{"id":2620,"originId":"5ea6c35ad870946c6b6be747","articleId":506,"userId":1136,"content":"[@zhangshichuan](/user/zhangshichuan) mark 走起","createdAt":1587987290080},{"id":2621,"originId":"5ea6798c30176508da9b6910","articleId":507,"userId":134,"content":"同一台服务器多域名呢","createdAt":1587968396231},{"id":2622,"originId":"5ea67f1ed870946c6b6be5f1","articleId":507,"userId":612,"content":"[@zhangshichuan](/user/zhangshichuan) 也可以用这个套路，其实最关键的一步就是拿到 证书。其他的都好说  https://certbot.eff.org/lets-encrypt/centos6-nginx 这是工具的官网 里面还有更多更详细的资料","createdAt":1587969822556},{"id":2623,"originId":"5cbfdf9a37faec0ce1d05c70","articleId":513,"userId":21,"content":"node-gyp一直都是尴尬的存在，N-API 也是换汤不换药。不过总体还在进步，这就够了。","createdAt":1556078490412},{"id":2624,"originId":"5cbfe009a86ae80ce64b3221","articleId":513,"userId":541,"content":"白嫖的性能提升，真好。\r\n私有域有了，啥时候有装饰器啊","createdAt":1556078601146},{"id":2625,"originId":"5cbfe111a86ae80ce64b323c","articleId":513,"userId":21,"content":"[@AnzerWall](/user/AnzerWall) 是啊，原生的装饰器确实比私有域需求更迫切啊","createdAt":1556078865240},{"id":2626,"originId":"5cc00217a86ae80ce64b344a","articleId":513,"userId":1210,"content":"恐怖如斯","createdAt":1556087319072},{"id":2627,"originId":"5cc024e337faec0ce1d0610a","articleId":513,"userId":90,"content":"[@v5sollee](/user/v5sollee) 我还以为看到了辰东的小说，恐怖如斯","createdAt":1556096227844},{"id":2628,"originId":"5cc03fa337faec0ce1d061cb","articleId":513,"userId":545,"content":"[@AnzerWall](/user/AnzerWall)   typescript 一时爽， 一直 typescript 一直爽。","createdAt":1556103075658},{"id":2629,"originId":"5cc05d1c37faec0ce1d06251","articleId":513,"userId":89,"content":"llhttp代码更新的还是挺有意思的，给猪哥点赞","createdAt":1556110620940},{"id":2630,"originId":"5cc05ed137faec0ce1d06265","articleId":513,"userId":98,"content":"有生之年一定能看到node v100","createdAt":1556111057060},{"id":2631,"originId":"5cc06dcc37faec0ce1d062bb","articleId":513,"userId":358,"content":"[@zengming00](/user/zengming00) 那你要努力活久点，少点 996 . 按当前 Node 的节奏 https://github.com/nodejs/Release ，一年是 2 个版本，到 100 的话，差不多是 2106 年。","createdAt":1556114892430},{"id":2632,"originId":"5cc06f8ca86ae80ce64b38e9","articleId":513,"userId":1211,"content":"> 奇丑无比的 Private Class Fields \r\n\r\n+10086","createdAt":1556115340351},{"id":2633,"originId":"5cc10abc37faec0ce1d06425","articleId":513,"userId":98,"content":"[@atian25](/user/atian25) 从未996，最惨的时候是17年在兔展大小周，我基本上都是准时上下班的。18年更是从未加过班，我的原则就是加班时间效率约等于0","createdAt":1556155068356},{"id":2634,"originId":"5cc11a3437faec0ce1d065b2","articleId":513,"userId":151,"content":"非常不错，觉得Node12是继引入async await后又一个重要的更新","createdAt":1556159028617},{"id":2635,"originId":"5cc1301537faec0ce1d06737","articleId":513,"userId":358,"content":"[@zengming00](/user/zengming00) 就最终目标（活到 2106 年）而言，感觉 9 不 9 都没啥区别，哈哈","createdAt":1556164629730},{"id":2636,"originId":"5cc1347237faec0ce1d0676b","articleId":513,"userId":1212,"content":"期待LTS","createdAt":1556165746561},{"id":2637,"originId":"5cc13a13a86ae80ce64b3d24","articleId":513,"userId":22,"content":"恐怖如斯","createdAt":1556167187778},{"id":2638,"originId":"5cc2602237faec0ce1d06cc9","articleId":513,"userId":1213,"content":"[@atian25](/user/atian25) \r\n一年两个版本  100 个版本，需要到 2106年，欺负我小学数学没学好吗？","createdAt":1556242466816},{"id":2639,"originId":"5cc2629237faec0ce1d06cea","articleId":513,"userId":358,"content":"[@vellengs](/user/vellengs) 终于有人发现了~","createdAt":1556243090383},{"id":2640,"originId":"5cc2803937faec0ce1d06ef2","articleId":513,"userId":1214,"content":"[@atian25](/user/atian25) 站在巨人的肩膀上","createdAt":1556250681834},{"id":2641,"originId":"5cc2d80ca86ae80ce64b4797","articleId":513,"userId":862,"content":"[@atian25](/user/atian25) 感觉小学数学收到了挑战","createdAt":1556273164505},{"id":2642,"originId":"5cc5269337faec0ce1d0784f","articleId":513,"userId":11,"content":"node-v100.0.0，想想就 emmm","createdAt":1556424339560},{"id":2643,"originId":"5cc6e29ba86ae80ce64b572d","articleId":513,"userId":1215,"content":"[@zengming00](/user/zengming00) 只有虵才能看到吧","createdAt":1556538011114},{"id":2644,"originId":"5cc6fe80a86ae80ce64b579d","articleId":513,"userId":22,"content":"[@JacksonTian](/user/JacksonTian) node12 都出了，深入浅出2 什么时候出啊","createdAt":1556545152222},{"id":2645,"originId":"5cc7074ca86ae80ce64b57b8","articleId":513,"userId":358,"content":"[@justjavac](/user/justjavac) 很明显要等 node 20 啊","createdAt":1556547404478},{"id":2646,"originId":"5ccba8b7776fb66e0d17189a","articleId":513,"userId":688,"content":"[@zuohuadong](/user/zuohuadong) 目前配合ts还是有bug，不过官方在修了（本来打算业余新工程直接上node12的。。。","createdAt":1556850871221},{"id":2647,"originId":"5cce3c7e5a5bae6e07812c71","articleId":513,"userId":545,"content":"[@wujohns](/user/wujohns)  后端一直在用 nest.js ，也推荐 midway 之类的框架，默认就是 ts ~","createdAt":1557019774496},{"id":2648,"originId":"5cce54d65a5bae6e07812d9a","articleId":513,"userId":368,"content":"ES6 模块仍然还在实验阶段，不过有了新的方式，具体参见这篇文章。\r\n链接打不开\r\n404We couldn’t find this page.","createdAt":1557026006644},{"id":2649,"originId":"5cce5cf75a5bae6e07812e0b","articleId":513,"userId":358,"content":"[@chapgaga](/user/chapgaga) https://medium.com/@nodejs/announcing-a-new-experimental-modules-1be8d2d6c2ff\r\n\r\n貌似是 CNode 的 BUG，cc [@alsotang](/user/alsotang)","createdAt":1557028087282},{"id":2650,"originId":"5ccf9e185a5bae6e07813431","articleId":513,"userId":18,"content":"[@atian25](/user/atian25) 我改改这个这则试试","createdAt":1557110296702},{"id":2651,"originId":"5ccff083776fb66e0d1727e3","articleId":513,"userId":875,"content":"[@AnzerWall](/user/AnzerWall) 等装饰器有了，离spring boot.js 不远了。","createdAt":1557131395115},{"id":2652,"originId":"5cd00e935a5bae6e07813811","articleId":513,"userId":1216,"content":"以关注","createdAt":1557139091787},{"id":2653,"originId":"5cd0e406776fb66e0d172bf9","articleId":513,"userId":191,"content":"node 更新速度有些快哦     难道是用的人多了吗","createdAt":1557193734325},{"id":2654,"originId":"5cd0e47e5a5bae6e07813ad1","articleId":513,"userId":358,"content":"[@xuemeifenglin](/user/xuemeifenglin) 正常速度，看下 https://github.com/nodejs/Release 就知道了，正常的迭代速度而已，类似 Chromium","createdAt":1557193854061},{"id":2655,"originId":"5cd13c10da4b2a7fe61d9255","articleId":513,"userId":18,"content":"[@atian25](/user/atian25) 修了","createdAt":1557216272829},{"id":2656,"originId":"5cd151b1da4b2a7fe61d9390","articleId":513,"userId":1217,"content":"站在巨人的肩膀上  加油","createdAt":1557221809274},{"id":2657,"originId":"5cd3937ae333b24979ca9961","articleId":513,"userId":36,"content":"期待","createdAt":1557369722741},{"id":2658,"originId":"5cd7da16d5fff6772a2fddb6","articleId":513,"userId":1218,"content":"恐怖如斯, 恐怖如斯\r\n\r\n\r\n","createdAt":1557649942513},{"id":2659,"originId":"5cde8a37e57aac76fed2ba30","articleId":513,"userId":1219,"content":"[@AnzerWall](/user/AnzerWall) 1111","createdAt":1558088247682},{"id":2660,"originId":"5cde8a7f518e0954fc40f4f1","articleId":513,"userId":1219,"content":"[@zy445566](/user/zy445566) kdfkgdfg","createdAt":1558088319286},{"id":2661,"originId":"5ce4b6714d4b857836e85621","articleId":513,"userId":1220,"content":"111","createdAt":1558492785398},{"id":2662,"originId":"5ce4d853e57aac76fed2d0a6","articleId":513,"userId":1221,"content":"1111","createdAt":1558501459661},{"id":2663,"originId":"5ce5f6114036f24194cf586e","articleId":513,"userId":1222,"content":"[@kwoktung](/user/kwoktung) 2222","createdAt":1558574609242},{"id":2664,"originId":"5cf63b091fe902120f31c0f1","articleId":513,"userId":1223,"content":"编译c++ 模块就傻眼了 ~.~","createdAt":1559640841633},{"id":2665,"originId":"5cf6602d95fcc914aa2661ce","articleId":513,"userId":109,"content":"[@spitWind](/user/spitWind) node-gyp v4.0  已经支持 nodejs v12","createdAt":1559650349074},{"id":2666,"originId":"5cfcbb5b95fcc914aa267183","articleId":513,"userId":1223,"content":"[@waitingsong](/user/waitingsong) 模块编译不出来， 底层的库不支持  ~","createdAt":1560066907942},{"id":2667,"originId":"5cfe141e1fe902120f31d630","articleId":513,"userId":1224,"content":"[@zuohuadong](/user/zuohuadong) 自从掌握TS后，真香！","createdAt":1560155166931},{"id":2668,"originId":"5cff43b51fe902120f31da64","articleId":513,"userId":77,"content":"node 真好。爱生活，爱拉芳。","createdAt":1560232885276},{"id":2669,"originId":"5d06fc811fe902120f31fa3e","articleId":513,"userId":675,"content":"11","createdAt":1560738945202},{"id":2670,"originId":"5d079f541fe902120f31ffc6","articleId":513,"userId":1225,"content":"11","createdAt":1560780628121},{"id":2671,"originId":"5d19ce16cdb1f967c157756d","articleId":513,"userId":77,"content":"[@lhpyfc](/user/lhpyfc) 111","createdAt":1561972246168},{"id":2672,"originId":"5d26ddc58a8bf909209cd775","articleId":513,"userId":679,"content":"恐怖如斯 必须更新","createdAt":1562828229703},{"id":2673,"originId":"5d280df0fa8ef0094e06452c","articleId":513,"userId":1226,"content":"[@zy445566](/user/zy445566) 666","createdAt":1562906096338},{"id":2674,"originId":"5d40e8a9b4725a628e269d23","articleId":513,"userId":1227,"content":"[@zy445566](/user/zy445566) ddd","createdAt":1564534953888},{"id":2675,"originId":"5d43beab9969a529571d8e95","articleId":513,"userId":1228,"content":"用node 的express 框架写的服务端，现扫描出Slow HTTP Denial of Service Attack漏洞，要怎么弄？？","createdAt":1564720811710},{"id":2676,"originId":"5d4be99212a01945444153f2","articleId":513,"userId":545,"content":"[@wushanchao](/user/wushanchao)  现在 nest.js 就有这些\r\njs 原生支持 估计得有些日子了~","createdAt":1565256082447},{"id":2677,"originId":"5d544129697873456c6bd629","articleId":513,"userId":1229,"content":"sss","createdAt":1565802793885},{"id":2678,"originId":"5d5a720812a0194544417c8d","articleId":513,"userId":1230,"content":"值得期待","createdAt":1566208520966},{"id":2679,"originId":"5d651bb0dcd8e81121a6172e","articleId":513,"userId":1231,"content":"这么快又发布新版本了！！！！","createdAt":1566907312742},{"id":2680,"originId":"5d67a62c421846662d985bf8","articleId":513,"userId":1232,"content":"期待","createdAt":1567073836914},{"id":2681,"originId":"5d71ff45d50f572345912302","articleId":513,"userId":1233,"content":"[@hxwyx](/user/hxwyx) 测试message","createdAt":1567752005500},{"id":2682,"originId":"5d71ffd8a7474a231a5898d8","articleId":513,"userId":1233,"content":"[@hywyx](/user/hywyx) 测试message","createdAt":1567752152831},{"id":2683,"originId":"5d73780aa7474a231a589c36","articleId":513,"userId":1232,"content":"厉害","createdAt":1567848458612},{"id":2684,"originId":"5d8d66458b9e1c0d6dc5e55e","articleId":513,"userId":1234,"content":"[@binbinecust](/user/binbinecust) ","createdAt":1569547845619},{"id":2685,"originId":"5d8d6653e86cfb0d2a646117","articleId":513,"userId":1234,"content":"[@tianyaxingge](/user/tianyaxingge) 好的","createdAt":1569547859002},{"id":2686,"originId":"5d975288865a9844a30198e9","articleId":513,"userId":1235,"content":"[@AnzerWall](/user/AnzerWall) ","createdAt":1570198152997},{"id":2687,"originId":"5d975707ece3813ad9ba0070","articleId":513,"userId":1235,"content":"[@zengming00](/user/zengming00) ","createdAt":1570199303415},{"id":2688,"originId":"5d975866865a9844a30198ef","articleId":513,"userId":1235,"content":"女大三 送金砖 女大三十 送江山 女大三百 送仙丹 女大三千 位列仙班","createdAt":1570199654289},{"id":2689,"originId":"5dac2045865a9844a301c7b5","articleId":513,"userId":109,"content":"12 就快 LTS 了。","createdAt":1571561541319},{"id":2690,"originId":"5dad90a6865a9844a301cba5","articleId":513,"userId":109,"content":"LTS 12.13.0 released\r\nhttps://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V12.md#12.13.0","createdAt":1571655846948},{"id":2691,"originId":"5db28cc0865a9844a301dbda","articleId":513,"userId":358,"content":"[@waitingsong](/user/waitingsong) 应该把 12.0 ~ 12.13 的 ChangeLog 整合下看看有什么增加的大一点的变化\r\n\r\n大概肉眼过了下 Notable changes，没有太多需要注意的。","createdAt":1571982528459},{"id":2692,"originId":"5db57694ece3813ad9ba471a","articleId":513,"userId":1236,"content":"GGG可以试试","createdAt":1572173460851},{"id":2693,"originId":"5db657a6865a9844a301e187","articleId":513,"userId":1237,"content":"666","createdAt":1572231078764},{"id":2694,"originId":"5dbb6581865a9844a301f26c","articleId":513,"userId":1238,"content":"[@zy445566](/user/zy445566) fghhhh","createdAt":1572562305552},{"id":2695,"originId":"5dbfc8c4865a9844a301fb50","articleId":513,"userId":730,"content":"[@hxy-gg](/user/hxy-gg) 1111111111","createdAt":1572849860045},{"id":2696,"originId":"5dc39e70ece3813ad9ba6df9","articleId":513,"userId":1239,"content":"[@zy445566](/user/zy445566) 11111","createdAt":1573101168678},{"id":2697,"originId":"5dc3b699865a9844a3020738","articleId":513,"userId":1240,"content":"[@JacksonTian](/user/JacksonTian) 111","createdAt":1573107353625},{"id":2698,"originId":"5dc7964fece3813ad9ba763b","articleId":513,"userId":1241,"content":"太好了","createdAt":1573361231365},{"id":2699,"originId":"5dccc961ece3813ad9ba84e8","articleId":513,"userId":1242,"content":"[@zubincheung](/user/zubincheung) 同期待","createdAt":1573701985516},{"id":2700,"originId":"5dcfaa647651572e0955d786","articleId":513,"userId":109,"content":"[@atian25](/user/atian25)  v10-v12 没多少 breaking change。nodejs 架构已经成熟，js 既往的坑也填得差不多。major版本主要是增加 ECMA 的新功能。\r\n对于常用场景的服务我觉得只要ci能过就不会有啥问题。","createdAt":1573890660863},{"id":2701,"originId":"5dcfc7677651572e0955d7c1","articleId":513,"userId":358,"content":"[@waitingsong](/user/waitingsong) 我之前的意思是，看看有什么是 12 lts 比 12 stable 多的功能在这篇文章没有","createdAt":1573898087152},{"id":2702,"originId":"5dcfcca37651572e0955d7c7","articleId":513,"userId":109,"content":"[@atian25](/user/atian25)  \r\nv12 LTS 和 v12 stable  区别是啥呢，有点糊涂……\r\nv12 stable 你指的是 v12.13 之前的版本吧？","createdAt":1573899427289},{"id":2703,"originId":"5dcfd1197651572e0955d7cd","articleId":513,"userId":358,"content":"[@waitingsong](/user/waitingsong) 嗯，因为这篇文章是 12 的第一个 stable 版本时写的，但 12 进入 lts 中间有过好几个版本，上面的意思是要看这期间有什么值得补充的变更。(已看完没啥特别的","createdAt":1573900569208},{"id":2704,"originId":"5dd5f6f18287937a65af5dc8","articleId":513,"userId":1243,"content":"[@v5sollee](/user/v5sollee) ","createdAt":1574303473248},{"id":2705,"originId":"5dd983bd34a8a07a2dab6bae","articleId":513,"userId":709,"content":"装饰器呀！！！还不上。。\r\n\r\n我还是期待下deno/ts 吧！","createdAt":1574536125744},{"id":2706,"originId":"5e13fd6881adfe260207a2bf","articleId":513,"userId":1244,"content":"图挂了？","createdAt":1578368360625},{"id":2707,"originId":"5e79c04264259617c49a29d1","articleId":513,"userId":109,"content":"v14 就要上线了～","createdAt":1585037378362},{"id":2708,"originId":"5e7b17ff58ab6717beb7c9e9","articleId":513,"userId":1245,"content":"很好","createdAt":1585125375319},{"id":2709,"originId":"5e7b182664259617c49a2d4b","articleId":513,"userId":1245,"content":"[@youarenode](/user/youarenode) node 速度就是快","createdAt":1585125414102},{"id":2710,"originId":"5e7c5a9064259617c49a2fe6","articleId":513,"userId":1102,"content":"天猪前辈，我是与子同袍——支援海外同胞的志愿者，老王。很开心能跟您建立连接，如果有需要可否方便进一步沟通 https://eleduck.com/posts/eR3fvn","createdAt":1585207952386},{"id":2711,"originId":"5ea0014b0275394e768829b3","articleId":513,"userId":22,"content":"v14 上线了","createdAt":1587544395636},{"id":2712,"originId":"5ea2610c0275394e76882f6c","articleId":513,"userId":1246,"content":"[@zengming00](/user/zengming00) 您好，我在node.js社区上留意到您正在找工作，我目前在招nodejs后端开发工程师，请问您感兴趣吗？\r\n","createdAt":1587699980453},{"id":2713,"originId":"5ea00540d870946c6b6bd8b1","articleId":517,"userId":3,"content":"![WeChat Screenshot_20200422164940.png](//static.cnodejs.org/FjSkW65XnbzQhqQaSrfjA5QJXw7C)\r\n\r\n图片全挂了...","createdAt":1587545408630},{"id":2714,"originId":"5ea017c4d870946c6b6bd91a","articleId":517,"userId":1247,"content":"[@darrenliuwei](/user/darrenliuwei) 图片用的是微博图床，我这里是好的。。很奇怪\r\n![CKS81BC(0DUV70DXOKZ7ETL.png](//static.cnodejs.org/FoKyJZMLCAUUfi27fuufl2o-NxvH)","createdAt":1587550148285},{"id":2715,"originId":"5ea02787d870946c6b6bd967","articleId":517,"userId":3,"content":"[@ikomom](/user/ikomom) 是不是浏览器上没有登录微博就看不到，我已经七八年没有用过微博了。\r\n鼠标右键打开图片显示403\r\n![WeChat Screenshot_20200422191536.png](//static.cnodejs.org/Fskfh560i2loP7qyz0PDdnxkcuGB)","createdAt":1587554183659},{"id":2716,"originId":"5ea02c2dd870946c6b6bd980","articleId":517,"userId":1247,"content":"[@darrenliuwei](/user/darrenliuwei) 微博现在好像限制外链了，我换了图床，应该可以了","createdAt":1587555373842},{"id":2717,"originId":"5ea037abd870946c6b6bd99d","articleId":517,"userId":3,"content":"[@ikomom](/user/ikomom) 嗯，现在可以正常看到了。","createdAt":1587558315175},{"id":2718,"originId":"5ea11202d870946c6b6bdae4","articleId":517,"userId":28,"content":"试用了下小程序,感觉不错\r\n已经推荐给私群的小伙伴","createdAt":1587614210278},{"id":2719,"originId":"5ea17e400275394e76882d61","articleId":517,"userId":1247,"content":"[@hlsky1988](/user/hlsky1988) 多谢推荐","createdAt":1587641920191},{"id":2720,"originId":"5ea14e02d870946c6b6bdbad","articleId":519,"userId":558,"content":"不错，实用","createdAt":1587629570536},{"id":2721,"originId":"57e1d37fc4ae8ff239776de9","articleId":522,"userId":1250,"content":"思路不错，用习惯`request`的人一般会选择 [https://github.com/request/request-promise](https://github.com/request/request-promise)","createdAt":1474417535855},{"id":2722,"originId":"57e1f7f67d8293463a01e791","articleId":522,"userId":1249,"content":"[@welchwsy](/user/welchwsy) 目瞪口呆，马克了","createdAt":1474426870677},{"id":2723,"originId":"57e294a47e77820e3acfe0fd","articleId":522,"userId":110,"content":"我之前测试过市面上几乎所有的request类型的库，也为request库提过一个解决内存泄露的PR已经合并。开始以为axios很好用，后来发现里面坑很多，记得当时form-data只能以json形式提交，很多国内的站不支持。后来换成了superagent，出自node界传奇人物TJ手笔（现已叛变到Go阵营）， 各种问题全部能够通过配置或者使用插件解决，有很多插件上手即用，非常方便，原生支持promise，兼容前后端，也比axios轻量且插件机制非常灵活，比got之流直观方便，功能强悍。request就不多说了，臃肿强大略微麻烦。推荐楼主使用superagent。或者想要简单点的直接用isomorphic-fetch也行","createdAt":1474466980425},{"id":2724,"originId":"57e29581c4ae8ff239776e29","articleId":522,"userId":110,"content":"另外还可以支持测试环境，直接用supertest测试，也是原生promise，还是很舒服的，自此再也不用axios之流了。而且发现request，axios这类能做的superagent都能做，最后写出的代码是最简单直观的","createdAt":1474467201603},{"id":2725,"originId":"57e338eb7e77820e3acfe109","articleId":522,"userId":1249,"content":"[@andyhu](/user/andyhu) 粗略看了一下superagent的文档，链式写法很畅快，而且支持Promise，issue区也很活跃，看了下贡献者，主力是TJ，总之是值得一试的库。axios现在其实也很灵活，但确实有坑，有些需求要自己读了源码才搞得懂。","createdAt":1474509035936},{"id":2726,"originId":"5909b3a7782dbc4b183ed00f","articleId":522,"userId":1251,"content":"思路值得学习，赞一个！👍","createdAt":1493808039693},{"id":2727,"originId":"5909c2c8782dbc4b183ed013","articleId":522,"userId":536,"content":"好长。。。实际上没那么麻烦吧，直接\r\n```\r\nimport qs from 'qs';\r\naxios.post('/test',qs.stringify(data))\r\n\t    .then((res)=>{\r\n\t\t\r\n\t\t})\r\n```\r\n就行了，qs模块axios自带","createdAt":1493811912541},{"id":2728,"originId":"5abcc0ce0b13e3ad6954cf80","articleId":522,"userId":1252,"content":"`request-promisify` 可以解决  \r\n或许可以尝试：\r\n```javascript\r\nconst promisify = require('util').promisify\r\n```","createdAt":1522319566282},{"id":2729,"originId":"5abcc12052d7d3a8698a4929","articleId":522,"userId":1252,"content":"```javascript\r\nconst request = promisify(require('request'))\r\n```  \r\n不过，本人还没尝试过，进入request-promisify可以解决，就直接用了","createdAt":1522319648540},{"id":2730,"originId":"5abdac05679ac2ad2c492988","articleId":522,"userId":1253,"content":"[@duxytest](/user/duxytest) 666","createdAt":1522379781273},{"id":2731,"originId":"5b0cad178a4f51e140d94302","articleId":522,"userId":1254,"content":"直接传buffer就好了\r\nlet _config={\r\n            baseURL:config.baseURL,\r\n            timeout:config.timeout,\r\n            url: 'file/upload',\r\n            method: 'post',\r\n            params:{\r\n                key:opt.key,\r\n                size:opt.size\r\n            },\r\n            data: opt.stream,\r\n            headers: {\r\n                'X-token': opt.token,\r\n                'Content-Type':\"application/octet-stream\"\r\n            }\r\n        };\r\n        console.log(\"request=======>\",_config);\r\n        return axios.request(_config)","createdAt":1527557399055},{"id":2732,"originId":"5b20e4e85cd02be640901445","articleId":522,"userId":1255,"content":"FormData 的实例有 getLength 方法吗？我用的时候直接报错了，楼主你这个不能玩","createdAt":1528882408180},{"id":2733,"originId":"5d5d1f20421846662d983c0c","articleId":522,"userId":1256,"content":"https://github.com/form-data/form-data/blob/master/lib/form_data.js#L293 好像原型还有这个方法\r\n[@musclejack](/user/musclejack)","createdAt":1566383904933},{"id":2734,"originId":"5e6b05623cadb020b9160d4a","articleId":522,"userId":1257,"content":"非常感谢！解决了我的问题。","createdAt":1584072034801},{"id":2735,"originId":"5ea07e7b0275394e76882af2","articleId":522,"userId":1258,"content":"我也遇到了这个问题，按照 form-data 官方的指引解决了。\r\nhttps://www.npmjs.com/package/form-data#axios\r\n其中遇到的一个坑就是，官方写法：\r\nform.append('image', stream);\r\n没有命名，导致服务返回 500 错误，{\"status\":500,\"error\":\"Internal Server Error\",\"message\":\"String index out of range: -1\"}\r\n后加上第三个参数解决了这个问题。\r\nform.append('media',data,'test.jpg')","createdAt":1587576443139},{"id":2736,"originId":"5ea03a3cd870946c6b6bd9a6","articleId":523,"userId":939,"content":"学习了！ 🐂","createdAt":1587558972955},{"id":2737,"originId":"5ea06ebcd870946c6b6bda1b","articleId":523,"userId":1136,"content":"[@finmily](/user/finmily) 希望可以帮到你✌️","createdAt":1587572412067},{"id":2738,"originId":"5e9fa99b0275394e7688286b","articleId":524,"userId":18,"content":"在团队的前端工具还在用 node 10。。没人有动力升上去 。。","createdAt":1587521947050},{"id":2739,"originId":"5e9fad350275394e76882880","articleId":524,"userId":1259,"content":"[@alsotang](/user/alsotang) 前端不太了解，不过前端好像的确没啥动力升上去，但是我这边搞后端的node12一出就升级了，动力还是挺足的，😄","createdAt":1587522869350},{"id":2740,"originId":"5e9fb1850275394e7688289c","articleId":524,"userId":21,"content":"是的，相当于把heapdump集成了","createdAt":1587523973710},{"id":2741,"originId":"5e9fdff9d870946c6b6bd7d2","articleId":524,"userId":33,"content":"genshangdabudui","createdAt":1587535865304},{"id":2742,"originId":"5e9ff5f2d870946c6b6bd83b","articleId":524,"userId":358,"content":"[@alsotang](/user/alsotang) 工具就无所谓了。。。 我现在维护的 egg-bin 等都最小支持 6 呢。。。\r\n\r\n等 Web 应用都升级完后再慢慢升工具，反正工具一般不用那么多特性。","createdAt":1587541490056},{"id":2743,"originId":"5ea0019cd870946c6b6bd885","articleId":524,"userId":22,"content":"[@atian25](/user/atian25) 你的 node 12 文章还在置顶呢，再来篇 14 的吧，恐怖如斯","createdAt":1587544476888},{"id":2744,"originId":"5ea00453d870946c6b6bd8a6","articleId":524,"userId":3,"content":"[@atian25](/user/atian25) 大佬再来篇文章吧，标题就叫：Node 14 值得关注的新特性","createdAt":1587545171629},{"id":2745,"originId":"56ef4578fa2ee8df3a6503c2","articleId":525,"userId":1260,"content":"感谢大神分享！\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1458521464752},{"id":2746,"originId":"56ef48fa02c237a73a1a8958","articleId":525,"userId":1261,"content":"大赞👍","createdAt":1458522362066},{"id":2747,"originId":"56ef4b44532839c33a99d011","articleId":525,"userId":301,"content":"mark","createdAt":1458522948964},{"id":2748,"originId":"56ef53f1fa2ee8df3a6503cf","articleId":525,"userId":1262,"content":"mark","createdAt":1458525169122},{"id":2749,"originId":"56ef58f8fa2ee8df3a6503d5","articleId":525,"userId":1263,"content":"mark","createdAt":1458526456837},{"id":2750,"originId":"56ef5bfa02c237a73a1a8967","articleId":525,"userId":528,"content":"辛苦了~","createdAt":1458527226605},{"id":2751,"originId":"56ef61b5fa2ee8df3a6503dd","articleId":525,"userId":1264,"content":"桑总NB啊","createdAt":1458528693194},{"id":2752,"originId":"56ef6212532839c33a99d024","articleId":525,"userId":940,"content":"精华贴","createdAt":1458528786005},{"id":2753,"originId":"56ef65c202c237a73a1a8975","articleId":525,"userId":20,"content":"mark","createdAt":1458529730351},{"id":2754,"originId":"56ef69470a5a2cfb3ad14862","articleId":525,"userId":760,"content":"天呐！mark！","createdAt":1458530631606},{"id":2755,"originId":"56ef7c8c532839c33a99d02b","articleId":525,"userId":18,"content":"桑总牛逼！\r\n","createdAt":1458535564577},{"id":2756,"originId":"56ef8f73532839c33a99d030","articleId":525,"userId":1265,"content":"太感谢了！![QQ图片20160203110321.gif](//static.cnodejs.org/FgZAz4BLjY3YB2QHDFS2wh7qIyUZ)","createdAt":1458540403554},{"id":2757,"originId":"56ef92f0fa2ee8df3a6503ed","articleId":525,"userId":693,"content":"桑大总是这么geiliable","createdAt":1458541296624},{"id":2758,"originId":"56efa0640a5a2cfb3ad1487f","articleId":525,"userId":961,"content":"mark","createdAt":1458544740586},{"id":2759,"originId":"56efa1620a5a2cfb3ad14882","articleId":525,"userId":456,"content":"mark","createdAt":1458544994519},{"id":2760,"originId":"56efa45b02c237a73a1a8999","articleId":525,"userId":1266,"content":"已收藏   感谢","createdAt":1458545755190},{"id":2761,"originId":"56efa51a0a5a2cfb3ad14884","articleId":525,"userId":1267,"content":"辛苦了","createdAt":1458545946891},{"id":2762,"originId":"56efb0c902c237a73a1a89a3","articleId":525,"userId":1268,"content":"mark","createdAt":1458548937414},{"id":2763,"originId":"56efeb4302c237a73a1a89c2","articleId":525,"userId":1269,"content":"mark","createdAt":1458563907876},{"id":2764,"originId":"56f088e40a5a2cfb3ad148b0","articleId":525,"userId":1270,"content":"赞啊","createdAt":1458604260432},{"id":2765,"originId":"56f0a7bcfa2ee8df3a650423","articleId":525,"userId":1271,"content":"如题\r\nhttps://github.com/AutumnsWind/Front-end-tutorial","createdAt":1458612156516},{"id":2766,"originId":"56f0a94802c237a73a1a89ed","articleId":525,"userId":1272,"content":"前端路漫漫啊","createdAt":1458612552624},{"id":2767,"originId":"56f0bc43fa2ee8df3a650436","articleId":525,"userId":1273,"content":"[@ea7son](/user/ea7son) 对呀","createdAt":1458617411142},{"id":2768,"originId":"56f0bdb802c237a73a1a89f5","articleId":525,"userId":1273,"content":"@ jhonny-wang ","createdAt":1458617784913},{"id":2769,"originId":"56f0cde8532839c33a99d07e","articleId":525,"userId":576,"content":"做成github repository,又可以很多很多星星了😏","createdAt":1458621928497},{"id":2770,"originId":"56f0ce7efa2ee8df3a650442","articleId":525,"userId":1271,"content":"[@JerryC8080](/user/JerryC8080) https://github.com/AutumnsWind/Front-end-tutorial\r\nhttps://github.com/jsfront/src/blob/master/qq.md","createdAt":1458622078727},{"id":2771,"originId":"56f0e1b3fa2ee8df3a650448","articleId":525,"userId":576,"content":"[@Hi-Rube](/user/Hi-Rube) 好多成员啊😏","createdAt":1458626995454},{"id":2772,"originId":"56f0eb88fa2ee8df3a650452","articleId":525,"userId":1271,"content":"[@JerryC8080](/user/JerryC8080) 不知道是个什么群 0.0 呵呵","createdAt":1458629512097},{"id":2773,"originId":"56f0ff90532839c33a99d0b3","articleId":525,"userId":1274,"content":"海量信息～ 前端路漫漫呀～～\r\n","createdAt":1458634640211},{"id":2774,"originId":"56f116470a5a2cfb3ad14917","articleId":525,"userId":471,"content":"果然  ！！前(端)路漫漫呀～～","createdAt":1458640455904},{"id":2775,"originId":"56f1381bfa2ee8df3a650487","articleId":525,"userId":1275,"content":"东西真多。。","createdAt":1458649115381},{"id":2776,"originId":"56f146920a5a2cfb3ad14928","articleId":525,"userId":1276,"content":"这全面的","createdAt":1458652818820},{"id":2777,"originId":"56f14d9d02c237a73a1a8a3f","articleId":525,"userId":1277,"content":"这么多，辛苦辛苦","createdAt":1458654621025},{"id":2778,"originId":"56f159bd02c237a73a1a8a48","articleId":525,"userId":285,"content":"已收藏：）","createdAt":1458657725549},{"id":2779,"originId":"56f1e181532839c33a99d0fb","articleId":525,"userId":1278,"content":"怎么收藏啊！有空了，我们再弄个学习索引\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1458692481569},{"id":2780,"originId":"56f1e75f02c237a73a1a8a55","articleId":525,"userId":1279,"content":"mark","createdAt":1458693983988},{"id":2781,"originId":"56f1f0960a5a2cfb3ad14944","articleId":525,"userId":1280,"content":"好东西","createdAt":1458696342929},{"id":2782,"originId":"56f1f1fbfa2ee8df3a6504a5","articleId":525,"userId":1281,"content":"体量巨大！强力点赞！","createdAt":1458696699801},{"id":2783,"originId":"56f23f6c532839c33a99d129","articleId":525,"userId":1282,"content":"辛苦了，赞\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1458716524599},{"id":2784,"originId":"56f26d9ffa2ee8df3a6504e8","articleId":525,"userId":371,"content":"大爱 强力Mark","createdAt":1458728351652},{"id":2785,"originId":"56f2a38802c237a73a1a8aac","articleId":525,"userId":1261,"content":"看晕了，我就想问:前端你还好嘛……","createdAt":1458742152041},{"id":2786,"originId":"56f2bf2cfa2ee8df3a650514","articleId":525,"userId":1283,"content":"頂","createdAt":1458749228704},{"id":2787,"originId":"56f33ce2532839c33a99d162","articleId":525,"userId":1284,"content":"mark，非常感谢！","createdAt":1458781410465},{"id":2788,"originId":"56f38a9a532839c33a99d19e","articleId":525,"userId":925,"content":"mark\n\n来自(๑˙❥˙๑)憋说话吻我的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1458801306265},{"id":2789,"originId":"56f3cabd8f72be7d45471ec1","articleId":525,"userId":1285,"content":"mark\n\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1458817725946},{"id":2790,"originId":"56f3fda18f72be7d45471ecf","articleId":525,"userId":1286,"content":"太酷了，太全了，cool!!","createdAt":1458830753153},{"id":2791,"originId":"56f4ccdf8f72be7d45471f01","articleId":525,"userId":1287,"content":"Mark","createdAt":1458883807830},{"id":2792,"originId":"56f8dd8532c4bdf5313572c2","articleId":525,"userId":1288,"content":"mark","createdAt":1459150213488},{"id":2793,"originId":"56f9f81593a6967159553991","articleId":525,"userId":1289,"content":"太赞了","createdAt":1459222549707},{"id":2794,"originId":"56fa3eca93a69671595539b1","articleId":525,"userId":1290,"content":"全的一塌糊涂","createdAt":1459240650146},{"id":2795,"originId":"56fa4d7a8265278d59c7e2be","articleId":525,"userId":1291,"content":"mark\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1459244410063},{"id":2796,"originId":"56fb5027c5f5b4a959e9166e","articleId":525,"userId":1292,"content":"mark 感谢","createdAt":1459310631400},{"id":2797,"originId":"56fb56fa8265278d59c7e2ec","articleId":525,"userId":1293,"content":"请收下我的膝盖","createdAt":1459312378838},{"id":2798,"originId":"56fb85b493a6967159553a14","articleId":525,"userId":125,"content":"<div data-reactid=\".0.1.0.5.2.0.0\"><p data-reactid=\".0.1.0.5.2.0.0.$0\"><span data-reactid=\".0.1.0.5.2.0.0.$0.0\">hello</span></p></div>","createdAt":1459324340644},{"id":2799,"originId":"56fb92a6c5f5b4a959e91695","articleId":525,"userId":125,"content":"<div data-reactid=\".0.1.0.5.2.0.0\"><p data-reactid=\".0.1.0.5.2.0.0.$0\"><span data-reactid=\".0.1.0.5.2.0.0.$0.0\">支持</span></p></div>","createdAt":1459327654421},{"id":2800,"originId":"56fb94d18265278d59c7e30a","articleId":525,"userId":125,"content":"<div data-reactid=\".0.1.0.5.2.0.0\"><p data-reactid=\".0.1.0.5.2.0.0.$0\"><span data-reactid=\".0.1.0.5.2.0.0.$0.0\">支持</span></p></div>","createdAt":1459328209462},{"id":2801,"originId":"56fc933a93a6967159553a72","articleId":525,"userId":1294,"content":"mark","createdAt":1459393338593},{"id":2802,"originId":"56fce9868a612c5559d16ad3","articleId":525,"userId":1295,"content":"这是最新的东东，转裁请注明出处：\r\nhttp://www.kancloud.cn/jikeytang/qq/87646\r\n新的地址\r\nhttp://www.kancloud.cn/jsfront/month\r\n月报","createdAt":1459415430408},{"id":2803,"originId":"56fded4d93a6967159553af5","articleId":525,"userId":1296,"content":"mark","createdAt":1459481933197},{"id":2804,"originId":"56fe42d0c5f5b4a959e9179e","articleId":525,"userId":1297,"content":"掉咋天","createdAt":1459503824361},{"id":2805,"originId":"56ff86d58265278d59c7e473","articleId":525,"userId":370,"content":"前端真是日了狗了！！","createdAt":1459586773721},{"id":2806,"originId":"56ff8b6393a6967159553b75","articleId":525,"userId":1298,"content":"mark","createdAt":1459587939550},{"id":2807,"originId":"5701dc8e93a6967159553bb3","articleId":525,"userId":1299,"content":"牛","createdAt":1459739790801},{"id":2808,"originId":"57046cf2c5f5b4a959e918bd","articleId":525,"userId":1300,"content":"信息量有点大！","createdAt":1459907826490},{"id":2809,"originId":"5704db6f8a612c5559d16c84","articleId":525,"userId":894,"content":"我靠~ 感觉永远都学不完啊~~","createdAt":1459936111752},{"id":2810,"originId":"5706734bc5f5b4a959e91974","articleId":525,"userId":1301,"content":"mark一下","createdAt":1460040523910},{"id":2811,"originId":"57070f148265278d59c7e636","articleId":525,"userId":1302,"content":"mark ","createdAt":1460080404429},{"id":2812,"originId":"5708c48f528439031edc7f04","articleId":525,"userId":1303,"content":"其实我一直都想知道那个很复杂的树形图是怎么画的（根节点在左）","createdAt":1460192399547},{"id":2813,"originId":"570a3ac594b38dcb3c09a7cb","articleId":525,"userId":1304,"content":"mark","createdAt":1460288197564},{"id":2814,"originId":"570b20dc12def0933c43abf3","articleId":525,"userId":1305,"content":"厉害","createdAt":1460347100614},{"id":2815,"originId":"570b215f9bd3efeb3cdf6406","articleId":525,"userId":1305,"content":"mark\r\n","createdAt":1460347231218},{"id":2816,"originId":"570b246f9bd3efeb3cdf6408","articleId":525,"userId":1306,"content":"mark","createdAt":1460348015135},{"id":2817,"originId":"570b653294b38dcb3c09a824","articleId":525,"userId":222,"content":"MARK","createdAt":1460364594284},{"id":2818,"originId":"570b799f12def0933c43ac52","articleId":525,"userId":1307,"content":"赞","createdAt":1460369823914},{"id":2819,"originId":"570ba6d99bd3efeb3cdf6476","articleId":525,"userId":1308,"content":"辛苦辛苦～","createdAt":1460381401011},{"id":2820,"originId":"570c58b4d3220b7e4e3045dd","articleId":525,"userId":1309,"content":"台灣來參拜","createdAt":1460426932779},{"id":2821,"originId":"570c635204e7772f4eb63982","articleId":525,"userId":1310,"content":"mark!","createdAt":1460429650845},{"id":2822,"originId":"570dffb87a3d999758a3b00d","articleId":525,"userId":1311,"content":"mark!","createdAt":1460535224592},{"id":2823,"originId":"5711b81e0a1e9da252f1e3b1","articleId":525,"userId":1312,"content":"作为一个前端，不得不给赞，很全，学习的好资源","createdAt":1460779038952},{"id":2824,"originId":"5711bea10a1e9da252f1e3b3","articleId":525,"userId":1313,"content":"mark","createdAt":1460780705424},{"id":2825,"originId":"57122743434cfcfa52684aaf","articleId":525,"userId":1314,"content":"牛逼\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1460807491801},{"id":2826,"originId":"57159f7aa5f1ee7352d13b0b","articleId":525,"userId":18,"content":"已添加至 https://cnodejs.org/getstart","createdAt":1461034874318},{"id":2827,"originId":"572aa9de8bd6e27b59ff9cf1","articleId":525,"userId":1315,"content":"mark","createdAt":1462413790988},{"id":2828,"originId":"572aad148bd6e27b59ff9cf3","articleId":525,"userId":382,"content":"mark\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1462414612799},{"id":2829,"originId":"572c2aed7a370c6a177863f9","articleId":525,"userId":1316,"content":"mark","createdAt":1462512365596},{"id":2830,"originId":"572c5de57a370c6a17786426","articleId":525,"userId":478,"content":"mark","createdAt":1462525413371},{"id":2831,"originId":"572d9656afd3b34a17ff40fb","articleId":525,"userId":1317,"content":"**mark**","createdAt":1462605398856},{"id":2832,"originId":"57340c2f40b29698539811db","articleId":525,"userId":1318,"content":"mark","createdAt":1463028783222},{"id":2833,"originId":"574260904f5119e47020c67a","articleId":525,"userId":160,"content":"8错","createdAt":1463967888103},{"id":2834,"originId":"5742a53e6be4d220710d7c3e","articleId":525,"userId":1319,"content":"赞","createdAt":1463985470762},{"id":2835,"originId":"5742e8034f5119e47020c6d2","articleId":525,"userId":322,"content":"好\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1464002563570},{"id":2836,"originId":"5743d559991011691ef17aaa","articleId":525,"userId":1320,"content":"[@jikeytang](/user/jikeytang) 赞！","createdAt":1464063321594},{"id":2837,"originId":"5743e5d5754d17df1e44d973","articleId":525,"userId":1321,"content":"mark","createdAt":1464067541101},{"id":2838,"originId":"5743f77a991011691ef17ab6","articleId":525,"userId":1322,"content":"挺好，可以弄个github链接<br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1464072058463},{"id":2839,"originId":"57447278754d17df1e44d9a7","articleId":525,"userId":1323,"content":"Mark<br><a href=\"https://bitibiti.com\">自豪地采用cnodejs-vue</a>","createdAt":1464103544747},{"id":2840,"originId":"574520a8fd93c1011f94aaf5","articleId":525,"userId":1324,"content":"mark","createdAt":1464148136839},{"id":2841,"originId":"574564f1991011691ef17b23","articleId":525,"userId":1325,"content":"mark","createdAt":1464165617767},{"id":2842,"originId":"57456cc9fd93c1011f94ab05","articleId":525,"userId":577,"content":"别 mark 了，这个网站有收藏功能的","createdAt":1464167625942},{"id":2843,"originId":"57464582da0dea851e3080f5","articleId":525,"userId":578,"content":"mark 是一种态度，我就mark ","createdAt":1464223106412},{"id":2844,"originId":"574693ce754d17df1e44da3d","articleId":525,"userId":1326,"content":"mark","createdAt":1464243150586},{"id":2845,"originId":"575c03e52ad3c06f1aa3d5eb","articleId":525,"userId":1327,"content":"NICE","createdAt":1465648101144},{"id":2846,"originId":"575c0c4fe5fa62531af6e1bb","articleId":525,"userId":223,"content":"Google就在那里，清单列表都有保质期，所以虽然看上去有气势，但其实并不敏捷。","createdAt":1465650255036},{"id":2847,"originId":"575c21d0dc4ef1e71a46415f","articleId":525,"userId":1328,"content":"嗯，要寻找 Github 开源前端框架，第一时间就上 http://www.awesomes.cn ，自带分类热度和趋势分析","createdAt":1465655760974},{"id":2848,"originId":"575d34062cf5ae906e5924ca","articleId":525,"userId":1329,"content":"辛苦了","createdAt":1465725958591},{"id":2849,"originId":"575e40b8d395c3e715cf1e2a","articleId":525,"userId":1330,"content":"MK.","createdAt":1465794744207},{"id":2850,"originId":"57600bdd50312f1107e61506","articleId":525,"userId":1331,"content":"mark,感谢整理\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1465912285272},{"id":2851,"originId":"5762c616fa83165906ace415","articleId":525,"userId":1332,"content":"大大的马克\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1466091030909},{"id":2852,"originId":"5774a8f1affdb83c50b08dda","articleId":525,"userId":1333,"content":"Hi，“不错的个人简历”这个链接麻烦撤下吧，很久之前写的了，Bug 很多，代码也很烂 :）","createdAt":1467263217988},{"id":2853,"originId":"57752bc60b982e0450b74622","articleId":525,"userId":1334,"content":"收藏起来，感谢分享\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1467296710083},{"id":2854,"originId":"577536fa0b982e0450b74627","articleId":525,"userId":281,"content":"感谢\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1467299578964},{"id":2855,"originId":"5775d3dcaffdb83c50b08e4a","articleId":525,"userId":280,"content":"mark","createdAt":1467339740694},{"id":2856,"originId":"577611a70b982e0450b74663","articleId":525,"userId":465,"content":"感谢！mark","createdAt":1467355559547},{"id":2857,"originId":"5776216ba998f020500291b5","articleId":525,"userId":1335,"content":"mark\nFrom [变异后的 CNode+](https://github.com/febobo/react-native-redux-FeInn)","createdAt":1467359595173},{"id":2858,"originId":"57c3a92564fdc4346fff139f","articleId":525,"userId":1336,"content":"mark","createdAt":1472440613342},{"id":2859,"originId":"57c443eea6539d6525575217","articleId":525,"userId":1323,"content":"mark,辛苦了","createdAt":1472480238965},{"id":2860,"originId":"57c458795e0421492571d1c3","articleId":525,"userId":24,"content":"mark  感谢狼叔\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1472485497676},{"id":2861,"originId":"57c45bc1a6539d652557521e","articleId":525,"userId":1331,"content":"这总结的必须赞\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1472486337393},{"id":2862,"originId":"57c4d443ed6eb42d25d23e14","articleId":525,"userId":1337,"content":"mark","createdAt":1472517187164},{"id":2863,"originId":"57c4dd18a6539d652557522b","articleId":525,"userId":96,"content":"已收藏","createdAt":1472519448007},{"id":2864,"originId":"57f9a1090bab808265185bae","articleId":525,"userId":1338,"content":"仔细看了一下，这个知识体系真的太丰富了","createdAt":1475977481818},{"id":2865,"originId":"580476f727a1d99178a98f18","articleId":525,"userId":1339,"content":"perfect","createdAt":1476687607128},{"id":2866,"originId":"580491fefdf3bd3d651186ee","articleId":525,"userId":486,"content":"前路漫漫。。","createdAt":1476694526551},{"id":2867,"originId":"5804f4dafdf3bd3d65118718","articleId":525,"userId":497,"content":"## 桑总太牛了","createdAt":1476719834494},{"id":2868,"originId":"5806c63c27a1d99178a98f8a","articleId":525,"userId":1340,"content":"已收藏，感谢感谢，太全面了。","createdAt":1476838972340},{"id":2869,"originId":"580969930bab808265185fb4","articleId":525,"userId":280,"content":"么么哒\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1477011859751},{"id":2870,"originId":"58097933fdf3bd3d65118877","articleId":525,"userId":1126,"content":"mark\r\n","createdAt":1477015859751},{"id":2871,"originId":"58104e3c1a9a7d990953114c","articleId":525,"userId":1341,"content":"尽管做前端 也有一段时间了  很佩服  感谢","createdAt":1477463612931},{"id":2872,"originId":"581993c71a9a7d990953139e","articleId":525,"userId":1342,"content":"前人种树，后人乘凉。辛苦了。","createdAt":1478071239293},{"id":2873,"originId":"581c8db5bb9452c9052e7b3e","articleId":525,"userId":387,"content":"mark\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1478266293973},{"id":2874,"originId":"5821269bd5e70f9005343431","articleId":525,"userId":1343,"content":"马克加索尔！谢谢大神！","createdAt":1478567579884},{"id":2875,"originId":"5825aef36c4502be6ed87b51","articleId":525,"userId":1344,"content":"看完了  会不会成为神！","createdAt":1478864627178},{"id":2876,"originId":"58296df16c4502be6ed87bc2","articleId":525,"userId":1345,"content":"👍厉害\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1479110129481},{"id":2877,"originId":"582c35fad3abab717d8b4cc9","articleId":525,"userId":1346,"content":"666 我跪了  服了","createdAt":1479292410816},{"id":2878,"originId":"582d11ee67db500b79c0ffb9","articleId":525,"userId":1347,"content":"mark","createdAt":1479348718496},{"id":2879,"originId":"582d540767db500b79c0ffd8","articleId":525,"userId":1348,"content":"mark","createdAt":1479365639106},{"id":2880,"originId":"582dd59d67db500b79c10004","articleId":525,"userId":493,"content":"请标明出处吧，这是对原作者的尊重\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1479398813707},{"id":2881,"originId":"582e60ff6efc292b79ff0a61","articleId":525,"userId":89,"content":"[@Dengjiansheng](/user/Dengjiansheng) 原文链接在最上面","createdAt":1479434495444},{"id":2882,"originId":"5836a7bbba57ffba06c24929","articleId":525,"userId":1349,"content":"mark!","createdAt":1479976891039},{"id":2883,"originId":"58370cb8bde2b59e06141f53","articleId":525,"userId":1350,"content":"大神，能否给后端也来一分，node啥的资源汇总啊","createdAt":1480002744510},{"id":2884,"originId":"583783d96add41f206000c14","articleId":525,"userId":110,"content":"很不错的分享，不过建议去除sea.js, requirejs这种已经完全过时的内容，另外增加一些测试方面的文章，毕竟写js，不做测试是很不靠谱的。推荐tape, mocha, ava。覆盖率测试istanbul, nyc等也应该熟悉掌握","createdAt":1480033241476},{"id":2885,"originId":"5861e70e7461e63c7bb8aea1","articleId":525,"userId":1351,"content":"好全啊。这要学习到什么时候啊。","createdAt":1482811150915},{"id":2886,"originId":"586367a9e5c3db1339cce125","articleId":525,"userId":1352,"content":"good","createdAt":1482909609753},{"id":2887,"originId":"5863d6c8835fe2970563e9d1","articleId":525,"userId":1353,"content":"有收获。","createdAt":1482938056325},{"id":2888,"originId":"5864d5bbe5c3db1339cce176","articleId":525,"userId":1354,"content":"赞","createdAt":1483003323126},{"id":2889,"originId":"5864fba95eac96bb04d3e272","articleId":525,"userId":370,"content":"赞，有都看完的人么？","createdAt":1483013033279},{"id":2890,"originId":"58a3d215f1c732c53643a39e","articleId":525,"userId":317,"content":"mark","createdAt":1487131157180},{"id":2891,"originId":"58aa68625b904b25651b3732","articleId":525,"userId":835,"content":"哇，感谢","createdAt":1487562850496},{"id":2892,"originId":"58aaa0f8414c2f5164478888","articleId":525,"userId":501,"content":"赞,收藏","createdAt":1487577336181},{"id":2893,"originId":"58b4eb875b904b25651b39b9","articleId":525,"userId":1355,"content":"***膜拜***","createdAt":1488251783768},{"id":2894,"originId":"58b540db5b904b25651b39d5","articleId":525,"userId":1356,"content":"mark 膜拜大神\r\n","createdAt":1488273627418},{"id":2895,"originId":"58b5424de418a986315f39d9","articleId":525,"userId":1357,"content":"mark","createdAt":1488273997660},{"id":2896,"originId":"59f6c6c0323d3667540dadb6","articleId":525,"userId":767,"content":"👍厉害666！","createdAt":1509344960810},{"id":2897,"originId":"5a4d8b549ea8f8bc490e6478","articleId":525,"userId":1358,"content":"感谢大神","createdAt":1515031380416},{"id":2898,"originId":"5a5b6170afa0a121784a8bc2","articleId":525,"userId":1359,"content":"感谢","createdAt":1515938160063},{"id":2899,"originId":"5a6fc25a9288dc815328834e","articleId":525,"userId":1360,"content":"感谢社区，感谢大神分享。","createdAt":1517273690689},{"id":2900,"originId":"5a7285dbce45d44045146599","articleId":525,"userId":1221,"content":"感谢！","createdAt":1517454811312},{"id":2901,"originId":"5ac9d607e34737560fccab0f","articleId":525,"userId":57,"content":"很详细，不想成为资源收集癖","createdAt":1523176967949},{"id":2902,"originId":"5b0441b741c819fd1c832c0a","articleId":525,"userId":1361,"content":"太棒了,这简直难以置信.","createdAt":1527005623313},{"id":2903,"originId":"5b29f8b75cd02be6409015aa","articleId":525,"userId":1362,"content":"cool","createdAt":1529477303123},{"id":2904,"originId":"5b3c2a9cac8bc1e1241145ed","articleId":525,"userId":811,"content":"mark","createdAt":1530669724861},{"id":2905,"originId":"5bae5b6915e4fd1923f48b5d","articleId":525,"userId":251,"content":"٩(｡・ω・｡)﻿و  mark!","createdAt":1538153321289},{"id":2906,"originId":"5bae6fcc9545eaf107b9c6e7","articleId":525,"userId":1363,"content":"mark","createdAt":1538158540854},{"id":2907,"originId":"5bb541e837a6965f59051ea6","articleId":525,"userId":710,"content":"mark","createdAt":1538605544836},{"id":2908,"originId":"5bc157ef37a6965f5905216a","articleId":525,"userId":506,"content":"厉害了  竟然有这么多内容啊","createdAt":1539397615105},{"id":2909,"originId":"5c340a475bf06c5e7e3f2687","articleId":525,"userId":825,"content":"很全面, 学会上面这些, 应该就距离大牛不远了吧","createdAt":1546914375670},{"id":2910,"originId":"5c3544d35bf06c5e7e3f2db6","articleId":525,"userId":1364,"content":"Mark.","createdAt":1546994899339},{"id":2911,"originId":"5c4abf84595cbd1e950886c8","articleId":525,"userId":1365,"content":"Mark  马来人","createdAt":1548402564475},{"id":2912,"originId":"5d4a322112a0194544414cb1","articleId":525,"userId":1366,"content":"mark","createdAt":1565143585544},{"id":2913,"originId":"5d4a44e7697873456c6bb84e","articleId":525,"userId":1367,"content":"**太齐全了吧 **这看的我眼花缭乱了  厉害厉害 大神就是大神\r\n很多人回复“mark”，那我想问一句\r\n**mark是什么意思**？","createdAt":1565148391336},{"id":2914,"originId":"5ddcfb7b6043397a546d9a92","articleId":525,"userId":1368,"content":"mark","createdAt":1574763387231},{"id":2915,"originId":"5e9ffb71d870946c6b6bd862","articleId":525,"userId":1369,"content":"mark","createdAt":1587542897635},{"id":2916,"originId":"5e9f91ea0275394e76882808","articleId":526,"userId":513,"content":"人重自重者。\r\n自已不强大，别人不会尊重。\r\n可以加速学习、成长。\r\n但别妄想别人会无缘无故的被我们扭转\r\n","createdAt":1587515882014},{"id":2917,"originId":"5e9f9e250275394e76882831","articleId":526,"userId":1259,"content":"支持楼上，感觉楼主有点小年轻的理所当然。","createdAt":1587519013834},{"id":2918,"originId":"5e9fdd6cd870946c6b6bd7c1","articleId":526,"userId":90,"content":"[@Solomonqoo](/user/Solomonqoo) 就是自己不强大，所以需要更换操作系统，其他的不管。","createdAt":1587535212044},{"id":2919,"originId":"5e9d06f0d870946c6b6bd162","articleId":529,"userId":1198,"content":"如果有问题，请第一时间发邮件提issue ，如果用上觉得不错可以给个star ，谢谢各位老板，大佬了。","createdAt":1587349232733},{"id":2920,"originId":"5e9985f30275394e76881f38","articleId":534,"userId":3,"content":"那用户为什么不直接上电鸭社区呢？","createdAt":1587119603626},{"id":2921,"originId":"5e9998130275394e76881f48","articleId":534,"userId":1102,"content":"[@darrenliuwei](/user/darrenliuwei) \r\n我才找了一个数据源啊。\r\n你说的我知道，数据源太单一。\r\n是这个意思么？","createdAt":1587124243284},{"id":2922,"originId":"5e7b4c3d64259617c49a2de4","articleId":541,"userId":89,"content":"多传播点正能量，不必如此悲观","createdAt":1585138749632},{"id":2923,"originId":"5e7b8a5258ab6717beb7cac9","articleId":541,"userId":90,"content":"[@i5ting](/user/i5ting) 谈不上悲观，我把阿里内部的竞争看作NBA球赛，冠军只有一个，淘汰就是出局。没有冠军，每年都可能队伍重组，意味着有人需要离开。","createdAt":1585154642629},{"id":2924,"originId":"5e7d646458ab6717beb7ce8d","articleId":541,"userId":135,"content":"阿里node部门多少人啊 😳\r\n楼主呆了几年了?","createdAt":1585276004301},{"id":2925,"originId":"5e7d97dc64259617c49a32a8","articleId":541,"userId":90,"content":"[@abiuDoIT](/user/abiuDoIT) 不清楚，惭愧我没有修上福报，所以给不了答复，这个问题你可以问1楼的狼叔的，我从工作以来就没怎么加过班，可能是没有达到合伙人的级别所以不需要加班哈哈","createdAt":1585289180374},{"id":2926,"originId":"5e7d997358ab6717beb7cf10","articleId":541,"userId":1374,"content":"阿里node部门不加班么😳","createdAt":1585289587468},{"id":2927,"originId":"5e95934558ab6717beb7f9c6","articleId":541,"userId":2,"content":"加班都一样，看情况的，但是平均下来没有想象中的那么严重","createdAt":1586860869225},{"id":2928,"originId":"5e965c3758ab6717beb7fa59","articleId":541,"userId":1138,"content":"降降火 深圳aftership 欢迎你 😝 ","createdAt":1586912311573},{"id":2929,"originId":"5e965ca158ab6717beb7fa60","articleId":541,"userId":90,"content":"[@dingyuanwu](/user/dingyuanwu) 主要是加不动班了。。。有个想法，能不能拉一年的打卡记录，做成统计看看加班情况，数据不会骗人。然后再把一年上班收入统计下，看看时薪。","createdAt":1586912417815},{"id":2930,"originId":"5e96b2d358ab6717beb7fbe1","articleId":541,"userId":11,"content":"所以是因为淘宝客户端那个 bug 背锅了么","createdAt":1586934483777},{"id":2931,"originId":"5e96bb030275394e768818ae","articleId":541,"userId":90,"content":"[@wangxihua916](/user/wangxihua916) 感谢，现在公司很舒服,做着公司核心赚钱业务，引用大佬的话，进公司就进核心赚钱部门，其他的部门混混就行。","createdAt":1586936579870},{"id":2932,"originId":"5e96bcf20275394e768818ba","articleId":541,"userId":90,"content":"[@hyj1991](/user/hyj1991) 我不是那个背锅侠，背锅也是领导背，能力越大责任越大。","createdAt":1586937074460},{"id":2933,"originId":"5e96651264259617c49a5e66","articleId":542,"userId":109,"content":"Redux 设计有点复杂了，多个文件间跳转。。","createdAt":1586914578998},{"id":2934,"originId":"5e967a3258ab6717beb7fb0c","articleId":542,"userId":1136,"content":"[@waitingsong](/user/waitingsong) 是的，原始的 Redux 设计有点复杂，一般企业级开发用 [Dva](https://github.com/dvajs/dva) 或者 [Rematch](https://rematch.github.io/rematch/#/)","createdAt":1586919986131},{"id":2935,"originId":"5e96a30564259617c49a5f67","articleId":542,"userId":107,"content":"666, 楼主研究很透彻，推荐也了解下concent呀，0入侵、渐进式、高性能，内置依赖收集，与react浑然一体的开发框架\r\nhttps://github.com/concentjs/concent\r\n\r\n一篇短文介绍\r\nhttps://juejin.im/post/5e7c18d9e51d455c2343c7c4","createdAt":1586930437099},{"id":2936,"originId":"5e96ac5e64259617c49a5fa7","articleId":542,"userId":1136,"content":"[@fantasticsoul](/user/fantasticsoul) 这个厉害了，我研究研究","createdAt":1586932830168},{"id":2937,"originId":"5e8d933864259617c49a4e3a","articleId":543,"userId":33,"content":"interface 共用，，utils 共用，配合上orm 数据库字段定义共用。。。\r\n你还在为沟通字段名字苦恼吗，，，你还在为某个数据的处理谁来做而撕逼吗，，你还在为嫌弃前台（后台）写的慢而忧桑吗。。。。\r\n前后台ts一把梭。。。每人一个功能模块，，数据库共同定义，\r\n不分前后台，基于数据库结构开发。。\r\n大家开始写demo吧..\r\n","createdAt":1586336568229},{"id":2938,"originId":"5e8dbcca58ab6717beb7eb2f","articleId":543,"userId":1375,"content":"如果数据库支持的类型跟 js 基础类型一致可以考虑，可惜不是啊，所以orm那边可能需要把boolean 转成 number or string~","createdAt":1586347210829},{"id":2939,"originId":"5e8e5af164259617c49a4f5e","articleId":543,"userId":841,"content":"ORM 使用 TypeORM，再写些同步文件的脚本，就可以做到啦","createdAt":1586387697538},{"id":2940,"originId":"5e8e7b3f64259617c49a4f97","articleId":543,"userId":109,"content":"[@mosaic101](/user/mosaic101) bool类型一般我是用int来实现的，这样方便也减少麻烦。","createdAt":1586395967087},{"id":2941,"originId":"5e8e7b9d58ab6717beb7ebea","articleId":543,"userId":109,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 可以整个项目一个包用lerna来管理，这样interface类型就可以通用。 或者把类型作为npm包发布到私有库上面来实现前后端共用。","createdAt":1586396061468},{"id":2942,"originId":"5e8e7ffe58ab6717beb7ec13","articleId":543,"userId":33,"content":"[@suhaotian](/user/suhaotian) 配合typeorm真的是如虎添翼，","createdAt":1586397182396},{"id":2943,"originId":"5e8e800e64259617c49a4fb8","articleId":543,"userId":33,"content":"[@waitingsong](/user/waitingsong) 缺一个最佳实践，","createdAt":1586397198963},{"id":2944,"originId":"5e92618258ab6717beb7f2e3","articleId":543,"userId":1376,"content":"https://gitai.me/2019/06/Singularity 大概和我这个想法一样，接口驱动前后端和测试\r\n但是最后落地只剩下前端部分了，因为后端是py写的","createdAt":1586651522064},{"id":2945,"originId":"5e9263ae58ab6717beb7f2ed","articleId":543,"userId":1377,"content":"同样想法，但是公司不允许呀，提过建议，但是公司目前赶工，所以是express+js+react","createdAt":1586652078633},{"id":2946,"originId":"5e92958964259617c49a56cc","articleId":543,"userId":1378,"content":"技术栈 nestjs+react 的公司，目前不多啊。","createdAt":1586664841088},{"id":2947,"originId":"5e92bfd764259617c49a5717","articleId":543,"userId":57,"content":"用过react + nest写过一个admin项目 https://github.com/cnscorpions/React-Nest-Admin，用起来蛮顺手的","createdAt":1586675671027},{"id":2948,"originId":"5e92d4dd64259617c49a572c","articleId":543,"userId":33,"content":"[@345632828](/user/345632828) 还是得推啊。\r\n","createdAt":1586681053709},{"id":2949,"originId":"5e967c1d64259617c49a5ee9","articleId":543,"userId":1378,"content":"我前端工程师，刚学完koa ，不知道，学nest要多久，感觉这个框架蛮大","createdAt":1586920477314},{"id":2950,"originId":"5e969ce358ab6717beb7fb89","articleId":543,"userId":89,"content":"[@345632828](/user/345632828) 先学egg就好啦，然后在学nest更简单","createdAt":1586928867000},{"id":2951,"originId":"5e96a7f964259617c49a5f8a","articleId":543,"userId":545,"content":"https://github.com/nstudio/xplat  前后端公用代码~","createdAt":1586931705408},{"id":2952,"originId":"5e91addd58ab6717beb7f255","articleId":544,"userId":11,"content":"挺不错的，不过这层转换会有多大的性能损耗呢？","createdAt":1586605533912},{"id":2953,"originId":"5e91b3b258ab6717beb7f259","articleId":544,"userId":734,"content":"[@hyj1991](/user/hyj1991) 如果是说调用的性能，应该 Boa 要更好才对，毕竟 Node.js 有 v8 的夹持，在解释执行代码上会比纯 Python 快上不少，不过这个没有考虑到两个虚拟机所造成的开销。","createdAt":1586607026974},{"id":2954,"originId":"5e9545f658ab6717beb7f87e","articleId":544,"userId":688,"content":"机器比人便宜，损耗些性能应该还算可以接受吧","createdAt":1586841078905},{"id":2955,"originId":"5e954c7958ab6717beb7f88f","articleId":544,"userId":875,"content":"想法不错，手法不错。","createdAt":1586842745466},{"id":2956,"originId":"5e954f3a64259617c49a5c30","articleId":544,"userId":875,"content":"如果调用Python的业务代码库，需要通过boa.eval语句来实现吗？\r\n看示例都是调用Python本身的标准库。","createdAt":1586843450566},{"id":2957,"originId":"5e967a8d58ab6717beb7fb13","articleId":544,"userId":734,"content":"[@wushanchao](/user/wushanchao) 不需要的，直接 boa.import('...') 就可以了，跟是不是第三方没有关系的，你可以看看这个：https://github.com/alibaba/pipcook/blob/master/packages/boa/tests/base/basic.js#L41 ，这一行代码就是去 import 一个我们定义到测试目录自己写的 Python 模块，boa.eval 一般是用来执行表达式的，跟库倒没啥关系的。","createdAt":1586920077618},{"id":2958,"originId":"5e8e7bd158ab6717beb7ebef","articleId":545,"userId":109,"content":"折腾过来，可能还是会走上ng的rxjs道路～","createdAt":1586396113852},{"id":2959,"originId":"5e8e94cc58ab6717beb7ec6c","articleId":545,"userId":541,"content":"文档方面说不出的感觉，内容挺多变得有点杂，没有那种我有一个很酷的东西介绍给你的感觉。\r\n上来就是大量的example罗列，对初见者可能不太好。\r\n\r\n\r\n可能需要一个渐进式深入的文档展示，\r\n\r\n---\r\n\r\n一家之言","createdAt":1586402508037},{"id":2960,"originId":"5e8eac3958ab6717beb7eca6","articleId":545,"userId":22,"content":"难道只有我自己看不到图吗？","createdAt":1586408505005},{"id":2961,"originId":"5e8eac4158ab6717beb7ecaa","articleId":545,"userId":107,"content":"[@waitingsong](/user/waitingsong) rx主要面向流和事件，react里大部分业务场景还不需要上rx，面向数据驱动视图就可以了😀","createdAt":1586408513869},{"id":2962,"originId":"5e8eb4d864259617c49a506d","articleId":545,"userId":107,"content":"[@justjavac](/user/justjavac) 已重新存图，现在应该能看得到了吧","createdAt":1586410712036},{"id":2963,"originId":"5e8eb56364259617c49a5071","articleId":545,"userId":107,"content":"[@AnzerWall](/user/AnzerWall) 感谢建议，这一篇文章主要介绍3大框架代码风格，以此罗列区别，更多介绍可以查看我的专栏\r\nhttps://juejin.im/user/5b8e0616e51d4538e567d2c1/posts\r\n后面我整理下，逐个转过来😀","createdAt":1586410851945},{"id":2964,"originId":"5e8ed53558ab6717beb7ed0b","articleId":545,"userId":109,"content":"[@justjavac](/user/justjavac) 是的～","createdAt":1586418997241},{"id":2965,"originId":"5e944e3a64259617c49a5a9c","articleId":545,"userId":41,"content":"对 TypeScript 支持如何呢？","createdAt":1586777658107},{"id":2966,"originId":"5e9644c458ab6717beb7fa46","articleId":545,"userId":107,"content":"[@xcatliu](/user/xcatliu) \r\n相比其他数据流方案，如redux需要人工维护mapStateToProps和mapActionToProps类型定义，如mobx面向class和装饰器的模式，对类型定义过程和推导过程都比较麻烦，concent对类型支持是非常友好的，因为一切功能（state,computed,reducer）皆普通json对象和函数，提供了StateType、ComputeValType、ReducerType辅助类型帮助你用很简单的方式就可以组织起多模块的ts大型工程。\r\n\r\n这里有个在线ts项目示例： \r\nonline：https://codesandbox.io/s/concent-guide-ts-zrxd5\r\ngit repo: https://github.com/fantasticsoul/concent-guid-ts\r\n可以clone下来运行试试并了解更多。\r\n\r\n对js-doc的支持同样非常友好\r\ndemo1: https://codesandbox.io/s/concent-guide-xvcej\r\ndemo-todomvc: https://codesandbox.io/s/todoapp-react-concent-fvgvc","createdAt":1586906308559},{"id":2967,"originId":"579ea070da05b9e92af325b0","articleId":546,"userId":217,"content":"有个bug:\r\n基于原型的面 **线** 对象","createdAt":1470013552662},{"id":2968,"originId":"579ea38d41404b052be5da74","articleId":546,"userId":1380,"content":"讲的很好。尤其是对异步与并发这块讲的比较准确。","createdAt":1470014349238},{"id":2969,"originId":"579ea3b9da05b9e92af325b3","articleId":546,"userId":1380,"content":"顺便借前排广告位来一发：\r\n** React Native 互助交流群** 156750345","createdAt":1470014393943},{"id":2970,"originId":"579ea69eda05b9e92af325b7","articleId":546,"userId":1379,"content":"[@luoyjx](/user/luoyjx) 谢谢提醒😳，已修改","createdAt":1470015134935},{"id":2971,"originId":"579ea71c41404b052be5da79","articleId":546,"userId":1379,"content":"[@HugoJing](/user/HugoJing) thx~😄","createdAt":1470015260823},{"id":2972,"originId":"579ea98385dba6b12ac5858a","articleId":546,"userId":1300,"content":"有收获~","createdAt":1470015875980},{"id":2973,"originId":"579eb54d41404b052be5da82","articleId":546,"userId":1381,"content":"顶科科","createdAt":1470018893690},{"id":2974,"originId":"579ed4bdda05b9e92af325d1","articleId":546,"userId":137,"content":"setImmediate 和 process.nextTick 朴大大的深入浅出已经讲得很好了 (网上也有很多)[https://www.zhihu.com/question/23028843/answer/34597367\r\n\r\n这个从实现的角度讲了 https://www.zhihu.com/question/23028843/answer/34594257\r\n关于和传统的多线程有什么区别 我现在发现的一点就是libuv的线程数为4 也就是一个cpu一个 这样就可以省去很多上下文切换的开销","createdAt":1470026941485},{"id":2975,"originId":"579f008e23e454cd2af8180a","articleId":546,"userId":692,"content":"赞~","createdAt":1470038158780},{"id":2976,"originId":"579f01da23e454cd2af8180d","articleId":546,"userId":223,"content":"理解所谓event Loop http://latentflip.com/loupe/","createdAt":1470038490034},{"id":2977,"originId":"579fdd0b9f22cae71c654297","articleId":546,"userId":1379,"content":"[@flamingtop](/user/flamingtop) 看了很多遍，很赞~\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1470094603775},{"id":2978,"originId":"579fdd1e949d72031d501f32","articleId":546,"userId":1382,"content":"6\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1470094622454},{"id":2979,"originId":"579fdd3f949d72031d501f34","articleId":546,"userId":1379,"content":"[@gjc9620](/user/gjc9620) 👍\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1470094655525},{"id":2980,"originId":"579feec260adfb1f1db84291","articleId":546,"userId":486,"content":"mark","createdAt":1470099138889},{"id":2981,"originId":"5e95c92464259617c49a5de0","articleId":546,"userId":1383,"content":"4年前的文章，2020年才看到。","createdAt":1586874660644},{"id":2982,"originId":"5e92735364259617c49a5698","articleId":547,"userId":22,"content":"这杯茶够久的","createdAt":1586656083131},{"id":2983,"originId":"5e92dad058ab6717beb7f396","articleId":547,"userId":33,"content":"[@justjavac](/user/justjavac) 滑到底都花了我10秒钟。。","createdAt":1586682576140},{"id":2984,"originId":"5e93aed364259617c49a5822","articleId":547,"userId":1136,"content":"[@justjavac](/user/justjavac) 🙃细细品尝","createdAt":1586736851933},{"id":2985,"originId":"5e93b34c64259617c49a5833","articleId":547,"userId":22,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 可能茶杯比较大","createdAt":1586737996821},{"id":2986,"originId":"5e9591cf64259617c49a5d7a","articleId":547,"userId":2,"content":"好大一杯茶QTQ","createdAt":1586860495051},{"id":2987,"originId":"5e95941e64259617c49a5d86","articleId":547,"userId":26,"content":"逛了今天的帖子，尿频","createdAt":1586861086272},{"id":2988,"originId":"5e95a20364259617c49a5da7","articleId":547,"userId":1136,"content":"[@dingyuanwu](/user/dingyuanwu) 再来一壶冰红茶","createdAt":1586864643966},{"id":2989,"originId":"5e95a21664259617c49a5dab","articleId":547,"userId":1136,"content":"[@HobaiRiku](/user/HobaiRiku) 多尿有助于身体健康","createdAt":1586864662440},{"id":2990,"originId":"5e9400f658ab6717beb7f5d8","articleId":548,"userId":1384,"content":"深入理解计算机系统（原书第 3 版）\r\n重构 改善既有代码的设计 第 2 版\r\n算法设计与分析基础（第 3 版）\r\n数学之美（第二版）\r\n设计模式：可服用面向对象软件的基础（典藏版）\r\n这一单原价 407 。16，满减 230 后，实付 177.16 元～","createdAt":1586757878871},{"id":2991,"originId":"5e94267858ab6717beb7f698","articleId":548,"userId":89,"content":"竟然没有狼书，5555","createdAt":1586767480925},{"id":2992,"originId":"5e947c9d64259617c49a5afb","articleId":548,"userId":79,"content":"得加我一个~~","createdAt":1586789533314},{"id":2993,"originId":"5e9530b464259617c49a5bd4","articleId":548,"userId":90,"content":"家里有书架可以屯，没有还是放弃吧，每年都丢掉一些书，骂自己看的都是什么垃圾书，买个sony的电子纸平板，随时随地都能看书了。","createdAt":1586835636799},{"id":2994,"originId":"5e95917864259617c49a5d75","articleId":548,"userId":2,"content":"技术书籍电子版真的难受","createdAt":1586860408214},{"id":2995,"originId":"5dfb9ac30696c446bf64f398","articleId":550,"userId":113,"content":"经过前面的配置，我们已经可以非常便利的进行后端NodeJS打包了，而且打包后的文件已经进行了丑化。可是，有些网友认为这些工作还不够，希望打包之后的文件可以再乱一些。因此，我在文章尾部增加了一节“杀手锏”\r\n","createdAt":1576770243089},{"id":2996,"originId":"5e92f62964259617c49a5774","articleId":550,"userId":90,"content":"[@zhennann](/user/zhennann) 正好公司一些项目里面需要用到，有一个问题是需要先npm i -–save-devwebpack webpack-merge，还有如果项目是直接就用的egg框架开发的话，能不能直接用呢?","createdAt":1586689577308},{"id":2997,"originId":"5e93d29258ab6717beb7f51f","articleId":550,"userId":113,"content":"egg采用约定优先策略，直接按约定的目录结构load源码，所以，使用egg框架不能直接用这种webpack打包策略。\r\n所以，CabloyJS在egg基础之上做的一个重要改进就是：基于业务模块级别的隔离和编译\r\n","createdAt":1586746002061},{"id":2998,"originId":"5e93df6758ab6717beb7f558","articleId":550,"userId":90,"content":"[@zhennann](/user/zhennann) 看了下egg-born-backend 这个库干的就是这个活=>基于业务模块级别的隔离和编译，把egg框架需要的module直接放进去了，是这意思没错吧。","createdAt":1586749287388},{"id":2999,"originId":"5e940ec664259617c49a5996","articleId":550,"userId":113,"content":"[@jxycbjhc](/user/jxycbjhc) 是的","createdAt":1586761414090},{"id":3000,"originId":"5e92fcb658ab6717beb7f3d2","articleId":553,"userId":1386,"content":"PL","createdAt":1586691254715},{"id":3001,"originId":"5e92fcc358ab6717beb7f3d6","articleId":553,"userId":1386,"content":"[@maliaoMJ](/user/maliaoMJ) ","createdAt":1586691267264},{"id":3002,"originId":"5e8fd0ed58ab6717beb7ee9b","articleId":556,"userId":19,"content":"socket.io 真香","createdAt":1586483437379},{"id":3003,"originId":"5e90053c58ab6717beb7ef5e","articleId":556,"userId":26,"content":"很好","createdAt":1586496828178},{"id":3004,"originId":"5e90348d64259617c49a53e9","articleId":556,"userId":21,"content":"[@luanxuechao](/user/luanxuechao) 主要还是socket.io偏大，但确实兼容性和使用上都不错","createdAt":1586508941193},{"id":3005,"originId":"5e9034ad58ab6717beb7f035","articleId":556,"userId":21,"content":"[@HobaiRiku](/user/HobaiRiku) 比❤","createdAt":1586508973080},{"id":3006,"originId":"5e8bd54d58ab6717beb7e628","articleId":557,"userId":33,"content":"6","createdAt":1586222413561},{"id":3007,"originId":"5e8bf02158ab6717beb7e682","articleId":557,"userId":89,"content":"保持简单，输出json这种就不该和渲染搞到一起，做加法后面会很难控制的。","createdAt":1586229281847},{"id":3008,"originId":"5e8bfc3e64259617c49a4ac7","articleId":557,"userId":301,"content":"[@i5ting](/user/i5ting) 其实在我们公司内部的需求是，比如A的服务会直出html页面，但是B的服务也需要调用到A服务的某个页面或者某个组件，所以这个时候就由A的服务提供一个API，在B的服务通过远程组件调用。\r\n","createdAt":1586232382708},{"id":3009,"originId":"5e8c710b64259617c49a4c3f","articleId":557,"userId":1388,"content":"看上去 很美好， 不知道内功修炼的如何","createdAt":1586262283456},{"id":3010,"originId":"5e8d649258ab6717beb7e9ee","articleId":557,"userId":301,"content":"[@zanjs](/user/zanjs) 这里最难搞的，还是一个页面，多次调用其它服务，并且其它服务都是使用历史模式的。vue-router 对一个一面多个路由同步支持不够\r\n/a/ A的服务\r\n/b/ B的服务\r\n\r\n从A服务跳转到B服务，如何做到无刷新跳转，这一块的难度比较大。因为按照我们的设想，A服务挂了，B服务的页面还能被用户正常的访问。","createdAt":1586324626508},{"id":3011,"originId":"5e8d939e58ab6717beb7ea8f","articleId":557,"userId":33,"content":"[@1340641314](/user/1340641314) 子路由也不会重新刷新啊","createdAt":1586336670964},{"id":3012,"originId":"5e8dbab258ab6717beb7eb29","articleId":557,"userId":1375,"content":"一个页面，可以有多个ssr实例？ 我可以理解为一个实例即为一次reqeust？楼主是想面向组件开发吧","createdAt":1586346674259},{"id":3013,"originId":"5e8e7c6164259617c49a4f9d","articleId":557,"userId":301,"content":"[@mosaic101](/user/mosaic101) 分两种情况\r\n第一种，在服务器端拼接html的时候，就是由多个SSR实例渲染出来的内容，比如你有个服务，专门放置一些公共的网站头部的，可以通过RPC或者HTTP请求拿到这个网站头部，和当前服务的SSR实例拼接成一个完整的页面\r\n第二种，就是纯粹的在客户端渲染请求，也是一样的逻辑。请求公共头部的服务和内容区的服务。\r\n\r\n在客户端，如果多服务，都是采用历史模式，就需要做到多服务之间的路由协同。\r\n\r\n比如你有A服务、B服务，A和B都依赖C服务的网站头部，假设要更新网站头部，只需要更新C服务即可。如何直接把网站头部打包到A、B服务，那么更新网站头部的时候，就需要同时更新两个服务了。在我司的实际场景中，我们依赖网站的公共头部的项目多达十几个，每次更新公共导航都会非常耗费时间精力，为了解决这个问题，我们才耗费这么大的精力去搞这个项目。","createdAt":1586396257865},{"id":3014,"originId":"5e8e7d2864259617c49a4fa4","articleId":557,"userId":301,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 因为页面上有多个Vue 的根实例，所以路由也需要进行多次 new VueRouter({mode: 'history'})，需要保证多个Vue根实例之间的路由能够协同工作。","createdAt":1586396456503},{"id":3015,"originId":"5e8e7d9958ab6717beb7ec00","articleId":557,"userId":301,"content":"目前该项目已经应用于多个内部的项目，但是需要开源的话，还需要花费时间完善一下文档、测试用例之类的。希望在2020年也能给社区一些回馈吧。","createdAt":1586396569281},{"id":3016,"originId":"5e8feb6564259617c49a52fd","articleId":557,"userId":1375,"content":"[@1340641314](/user/1340641314) 了解了，如果client框架不统一的话，就不适用了","createdAt":1586490213291},{"id":3017,"originId":"5e900d9258ab6717beb7efaa","articleId":557,"userId":301,"content":"[@mosaic101](/user/mosaic101) 从原则上来讲，客户端框架即使不统一，也是可以使用的。比如React也是可以远程调用 Vue组件的。只不过需要自己实现加载js、css的过程。","createdAt":1586498962704},{"id":3018,"originId":"5e8d2d8264259617c49a4d00","articleId":560,"userId":38,"content":"似乎可以 resolve 和 reject 多次","createdAt":1586310530883},{"id":3019,"originId":"5e8d4c4b58ab6717beb7e9d5","articleId":560,"userId":510,"content":"[@lellansin](/user/lellansin) 谢谢 已经改善","createdAt":1586318411195},{"id":3020,"originId":"5e8d340158ab6717beb7e960","articleId":561,"userId":160,"content":"Cool","createdAt":1586312193642},{"id":3021,"originId":"5e8bfd8558ab6717beb7e6da","articleId":562,"userId":1391,"content":"厉害，几年前我也造过这个轮子，但没有做成一个体系出来，我自己的项目要用没有多少复用的场景。\r\n考虑的方式和你差不多，以html作为入口，毕竟PC端多页面开发还是很多的，我当时的老项目有几百个页面要做，一个一个的写htmlPlugin我感觉我会疯掉。\r\n我觉得你接下来一步可以考虑一下多语言的问题了，当前我造轮子的时候也是因为多语言才做起来的，基本思路是通过分析html文件中的标签来构造webpack配置。\r\n还通过自己写的模板引擎来构造最终输出的HTML，因为图片也要做国际化，webpack没找到合适的插件，所以只好自动手了。\r\n还有一个我建议你可以考虑增加局部编译的功能，毕竟大网站dev非常吃内存，局部编译只开启几个html入口，可以很大程度上降低内存开销以及提升编译速度。","createdAt":1586232709079},{"id":3022,"originId":"5e8c08de64259617c49a4ae6","articleId":562,"userId":36,"content":"自己造轮子太累了，不过还是👍一个","createdAt":1586235614308},{"id":3023,"originId":"5e8aa7f264259617c49a48a0","articleId":564,"userId":615,"content":"哇好棒，最近刚好在看oauth2的东西，感觉你这个很有参考价值","createdAt":1586145266508},{"id":3024,"originId":"5e815c8e64259617c49a3772","articleId":565,"userId":18,"content":"好意外。。。","createdAt":1585536142934},{"id":3025,"originId":"5e815e7564259617c49a3780","articleId":565,"userId":22,"content":"[@alsotang](/user/alsotang) 之前知乎有个问题，[NPM core-js 的作者为什么还没找到工作？](https://www.zhihu.com/question/338950875) 当时我去 github 看了 issue 的讨论。今年年初我又在 Twitter 和 GitHub 看了一些讨论，zloirock 说他可能要去坐牢，打开还以为 zloirock 说的是气话呢","createdAt":1585536629668},{"id":3026,"originId":"5e816fe464259617c49a37ed","articleId":565,"userId":89,"content":"摩托车好危险啊，报名了，要不要放弃","createdAt":1585541092004},{"id":3027,"originId":"5e81a96258ab6717beb7d5cb","articleId":565,"userId":875,"content":"[@i5ting](/user/i5ting) \r\n1200元的报名费不要放弃。\r\n摩托车肉包铁虽然危险，但是刺激、酷、帅、爽。\r\n遵循安全行驶手册问题不大。","createdAt":1585555810569},{"id":3028,"originId":"5e81c10764259617c49a3950","articleId":565,"userId":90,"content":"我也是刚看到这新闻，学下tinypng不香吗？《喋血战士》里开源大佬写的项目不就用在了大项目上面。","createdAt":1585561863982},{"id":3029,"originId":"5e81c18658ab6717beb7d658","articleId":565,"userId":89,"content":"[@wushanchao](/user/wushanchao) 哈哈哈哈，追求刺激的同时能够克制自己，还是非常重要的。通用的，不只是摩托车。我是抖个机灵","createdAt":1585561990872},{"id":3030,"originId":"5e82c70564259617c49a3b01","articleId":565,"userId":22,"content":"[@i5ting](/user/i5ting) 开车也要注意啊","createdAt":1585628933651},{"id":3031,"originId":"5e82c72958ab6717beb7d7b6","articleId":565,"userId":22,"content":"作者入狱后 core-js 还在一直更新，如果能再发布一个新 npm 版本大家都妥妥的放心了","createdAt":1585628969351},{"id":3032,"originId":"5e86f22c58ab6717beb7e07d","articleId":565,"userId":22,"content":"3个小时前，core-js 的代码又更新了。\r\n\r\n![](//static.cnodejs.org/Fm0dmBCvdNsaG5FdGH_PEp5XKudJ)","createdAt":1585902124982},{"id":3033,"originId":"5e40e83f267721420912b2ba","articleId":566,"userId":545,"content":"ivy 牛皮","createdAt":1581312063524},{"id":3034,"originId":"5e843cfc58ab6717beb7daea","articleId":566,"userId":1244,"content":"大版本升的太快，累觉不爱","createdAt":1585724668114},{"id":3035,"originId":"5e85483064259617c49a4021","articleId":566,"userId":528,"content":"[@mrdulin](/user/mrdulin) 大版本升级快，但是兼容性并没有改变很多。","createdAt":1585793072208},{"id":3036,"originId":"5e8583d864259617c49a40db","articleId":566,"userId":513,"content":"不追，还是以Reactr + Vue 为力","createdAt":1585808344400},{"id":3037,"originId":"5e86900164259617c49a42e9","articleId":566,"userId":22,"content":"[@mrdulin](/user/mrdulin) React 都升到 17 了","createdAt":1585876993468},{"id":3038,"originId":"5e86e99164259617c49a4431","articleId":566,"userId":1131,"content":"vue 3 还没出来...\r\n现在这版本号飚的。。。\r\n\r\n以为前端真的是一天一世界呢...","createdAt":1585899921062},{"id":3039,"originId":"5e85773464259617c49a40a6","articleId":567,"userId":22,"content":"go？","createdAt":1585805108792},{"id":3040,"originId":"5e85b0d358ab6717beb7ddf5","articleId":567,"userId":1394,"content":"[@justjavac](/user/justjavac)  😀嗯嗯，边学边写。","createdAt":1585819859681},{"id":3041,"originId":"5e85b4a964259617c49a41d5","articleId":567,"userId":103,"content":"有点意思","createdAt":1585820841401},{"id":3042,"originId":"5e85ba3064259617c49a41ed","articleId":567,"userId":1394,"content":"[@yuedun](/user/yuedun) 哈哈，主要用来学习。现在写完代码提交告诉测试在那个分支，测试自己打包验证。","createdAt":1585822256348},{"id":3043,"originId":"5e85be9d58ab6717beb7de22","articleId":567,"userId":103,"content":"[@xusenlin](/user/xusenlin) 发布包含前后端吗？","createdAt":1585823389367},{"id":3044,"originId":"5e85c80058ab6717beb7de38","articleId":567,"userId":1394,"content":"[@yuedun](/user/yuedun) 目前只是针对前端的，如果要加入后端的话，可能优先考虑 node 和 go ,因为对于其他的语言不太了解。","createdAt":1585825792630},{"id":3045,"originId":"5e84360064259617c49a3e36","articleId":570,"userId":18,"content":"营销号，翻译文。屏蔽账号。","createdAt":1585722880879},{"id":3046,"originId":"5e7d61ec58ab6717beb7ce72","articleId":571,"userId":89,"content":"有一个厉害的cto还是非常必要的，点赞","createdAt":1585275372892},{"id":3047,"originId":"5e7dc8e258ab6717beb7cff1","articleId":571,"userId":1138,"content":"[@i5ting](/user/i5ting) 哈哈 你们都是老熟人了 下次来深圳 过来给我们指点下 😝 ","createdAt":1585301730992},{"id":3048,"originId":"5e7dc95458ab6717beb7d004","articleId":571,"userId":1138,"content":"[@i5ting](/user/i5ting) 狼叔，下周一 我们推出 下 篇 ，欢迎指点下😝 ","createdAt":1585301844540},{"id":3049,"originId":"5e81b7b564259617c49a390e","articleId":571,"userId":1138,"content":"棒棒的","createdAt":1585559477144},{"id":3050,"originId":"5e83124964259617c49a3c38","articleId":571,"userId":1138,"content":"AfterShip 招聘网址：https://app.mokahr.com/apply/aftership/791#/?_k=91h5q1","createdAt":1585648201724},{"id":3051,"originId":"5e81b7a758ab6717beb7d618","articleId":572,"userId":1138,"content":"棒棒的","createdAt":1585559463918},{"id":3052,"originId":"5e81c1c958ab6717beb7d666","articleId":572,"userId":90,"content":"可以借鉴，收藏一波","createdAt":1585562057047},{"id":3053,"originId":"5e81d3cd64259617c49a39b7","articleId":572,"userId":89,"content":"这里面有很多最佳实践，对中小公司尤其有借鉴价值。大公司也没有做到这么细的培训，挺好","createdAt":1585566669267},{"id":3054,"originId":"5e82329264259617c49a3a33","articleId":572,"userId":18,"content":"厉害","createdAt":1585590930742},{"id":3055,"originId":"5e82f6ee64259617c49a3bd1","articleId":572,"userId":1138,"content":"[@i5ting](/user/i5ting) 多谢狼叔 ","createdAt":1585641198851},{"id":3056,"originId":"5e82f70958ab6717beb7d85b","articleId":572,"userId":1138,"content":"[@alsotang](/user/alsotang) 多谢老唐 加个微信 1501364171  方便不","createdAt":1585641225949},{"id":3057,"originId":"5e82f71358ab6717beb7d85f","articleId":572,"userId":1138,"content":"[@jxycbjhc](/user/jxycbjhc) 多谢多谢。","createdAt":1585641235582},{"id":3058,"originId":"5e82a0a564259617c49a3aa1","articleId":573,"userId":26,"content":"越来越多好玩的","createdAt":1585619109519},{"id":3059,"originId":"5e82a38d58ab6717beb7d767","articleId":573,"userId":89,"content":"x6的例子里有一个flowchart非常好玩，整体十分强大，对2020年的逻辑编排部分是极好的助力。感谢御术团队","createdAt":1585619853923},{"id":3060,"originId":"5e7ec7a658ab6717beb7d0fc","articleId":575,"userId":356,"content":"zan====👍","createdAt":1585366950984},{"id":3061,"originId":"5e80278164259617c49a35f1","articleId":575,"userId":26,"content":"无敌","createdAt":1585457025906},{"id":3062,"originId":"5e80734d64259617c49a3684","articleId":575,"userId":109,"content":"很不错。\r\n这儿可以扩展下：\r\n```ts\r\ninterface ApiError extends Error {\r\n    code: number;\r\n}\r\ninterface HttpError extends Error {\r\n    statusCode: number;\r\n}\r\n\r\n// 对于函数返回类型的断言\r\nfunction isApiError(error: Error): error is ApiError {\r\n    if (typeof (error as ApiError).code === 'number') {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n```","createdAt":1585476429821},{"id":3063,"originId":"5e80903e64259617c49a36aa","articleId":575,"userId":269,"content":"发一个 自己写的 TypeScript 的 校验库\r\n\r\nhttps://github.com/uinz/validate\r\n\r\n主要参考了 joi 和 io-ts,  觉得 体积 joi 太大 而 io-ts 依赖 fp-ts, 都不是很满足我的对小的需要.\r\n\r\n里面用到了断言函数, 但是目前 assert x is {type} TS 存在一个bug\r\n\r\n具体参考 mobx 作者开的 issue https://github.com/microsoft/TypeScript/issues/34596","createdAt":1585483838441},{"id":3064,"originId":"5e815f9558ab6717beb7d485","articleId":575,"userId":41,"content":"[@waitingsong](/user/waitingsong) 嗯，确实可以很自然的扩展下👍","createdAt":1585536917317},{"id":3065,"originId":"5e7ee94b64259617c49a34c5","articleId":576,"userId":545,"content":"adonisjs 和 nest.js 不香吗？ 性能还好","createdAt":1585375563560},{"id":3066,"originId":"5e7d437258ab6717beb7cd9f","articleId":580,"userId":1401,"content":"点个赞","createdAt":1585267570152},{"id":3067,"originId":"5e7b354c58ab6717beb7ca3a","articleId":582,"userId":1182,"content":"最新支持微信小程序直播","createdAt":1585132876618},{"id":3068,"originId":"5e7577ac58ab6717beb7becd","articleId":583,"userId":1402,"content":"个人主体开发的小程序服务类目太少了，申诉无果～","createdAt":1584756652681},{"id":3069,"originId":"5e757ebf58ab6717beb7beec","articleId":583,"userId":1199,"content":"小程序的审核就是很麻烦,而且它的性能其实只是理论性能上限高,但坑多难优化,正常写还不如h5\r\n如果不是强烈需要微信生态,或者微信的扫码,摄像头,语音等native功能,千万别选小程序了.","createdAt":1584758463633},{"id":3070,"originId":"5e75895264259617c49a21fd","articleId":583,"userId":1402,"content":"[@JsonSong89](/user/JsonSong89) 是的，有很多局限性，但是小程序也提供可很多开放能力，由于国内特殊情况很不利于个人开发者完善小程序的应用生态包括使用一些开放能力，那些服务类目也是定死的。","createdAt":1584761170437},{"id":3071,"originId":"5e7a1c8458ab6717beb7c7e1","articleId":583,"userId":655,"content":"我帮你发布吧。我有企业账号。","createdAt":1585060996281},{"id":3072,"originId":"5e7b09b158ab6717beb7c9af","articleId":583,"userId":1402,"content":"[@awong1900](/user/awong1900) 可以的，源代码github上有，您可以免费部署，你也可以关联此appid，后续我这边会继续维护。","createdAt":1585121713657},{"id":3073,"originId":"55a4b5c63ecc81b621bba8d4","articleId":584,"userId":1404,"content":"厉害👍","createdAt":1436857798755},{"id":3074,"originId":"55a4c5123ecc81b621bba903","articleId":584,"userId":1403,"content":"突然发现被设成精华帖了。感动死了。谢谢！","createdAt":1436861714196},{"id":3075,"originId":"55a4c6af3ecc81b621bba914","articleId":584,"userId":217,"content":"你也可以去申请机器人了，哈哈","createdAt":1436862127672},{"id":3076,"originId":"55a4fb333ecc81b621bba977","articleId":584,"userId":1403,"content":"[@luoyjx](/user/luoyjx) 谢谢提醒。alsotang已经寄出来啦。","createdAt":1436875571697},{"id":3077,"originId":"55a4ff773ecc81b621bba979","articleId":584,"userId":206,"content":"厉害","createdAt":1436876663535},{"id":3078,"originId":"55a522e63ecc81b621bba9a4","articleId":584,"userId":692,"content":"厉害","createdAt":1436885734206},{"id":3079,"originId":"55a5e593c78869230fab8df4","articleId":584,"userId":1405,"content":"好东西要支持","createdAt":1436935571063},{"id":3080,"originId":"55a653055a4b4a86539c2fac","articleId":584,"userId":1406,"content":"好东西就应该加精\n\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1436963589719},{"id":3081,"originId":"55a78d5b4ff0b93433c2fd4e","articleId":584,"userId":1407,"content":"学习了。","createdAt":1437044059324},{"id":3082,"originId":"56e630c1b5b04c8f6d4ec2ec","articleId":584,"userId":405,"content":"楼主说得好深入，但是不懂c++好些地方没看明白","createdAt":1457926337010},{"id":3083,"originId":"56e65e6e83cbb63b6d1202f5","articleId":584,"userId":445,"content":"好深入","createdAt":1457938030866},{"id":3084,"originId":"56e8177183cbb63b6d12035f","articleId":584,"userId":471,"content":"好东西 mark.","createdAt":1458050929356},{"id":3085,"originId":"59192a383504ce1c2ac45c55","articleId":584,"userId":1408,"content":"难得的好文章","createdAt":1494821432672},{"id":3086,"originId":"5946556d5ee4f56e642e87ce","articleId":584,"userId":1409,"content":"这图也太小了，里面的字根本看不清啊","createdAt":1497781613810},{"id":3087,"originId":"5e7afd7364259617c49a2d0c","articleId":584,"userId":40,"content":"图片看不到了","createdAt":1585118579507},{"id":3088,"originId":"5e70714389a5c35f11e32f33","articleId":585,"userId":22,"content":"看到狼叔也看好这次收购，我就放心了","createdAt":1584427331601},{"id":3089,"originId":"5e7072d589a5c35f11e32f46","articleId":585,"userId":89,"content":"[@justjavac](/user/justjavac) 要不要买点微软股票？","createdAt":1584427733612},{"id":3090,"originId":"5e707e0745fcf75ee50e4cf2","articleId":585,"userId":22,"content":"[@i5ting](/user/i5ting) 从没炒过股，不知道怎么买","createdAt":1584430599946},{"id":3091,"originId":"5e716a1489a5c35f11e33076","articleId":585,"userId":21,"content":"怎么不劝Apache割让maven？估计还是屁股决定脑袋，npm包多，买下成本低，正好博个名声集开源小成。","createdAt":1584491028518},{"id":3092,"originId":"5e71861f89a5c35f11e3310a","articleId":585,"userId":89,"content":"[@zy445566](/user/zy445566) \r\n\r\n```\r\nmvn deploy -Dregistry=https://maven.pkg.github.com/phanatic -Dtoken=$GH_TOKEN\r\n```","createdAt":1584498207674},{"id":3093,"originId":"5e718a6945fcf75ee50e4e8c","articleId":585,"userId":18,"content":"npm客户端继续改进，有指望了","createdAt":1584499305370},{"id":3094,"originId":"5e71915d45fcf75ee50e4eab","articleId":585,"userId":22,"content":"[@alsotang](/user/alsotang) npm 的源码真是一言难尽，不过比 node.js 源码好很多，但是和隔壁 yarn 比就差远了。微软爸爸赶紧用 ts 重构一下 npm 吧","createdAt":1584501085887},{"id":3095,"originId":"5e7194c289a5c35f11e33130","articleId":585,"userId":89,"content":"[@justjavac](/user/justjavac) yarn的cli处理模块clipanion写的很漂亮。参见 https://github.com/i5ting/clipanion-test","createdAt":1584501954875},{"id":3096,"originId":"5e71998489a5c35f11e33168","articleId":585,"userId":22,"content":"[@i5ting](/user/i5ting) 我也是看 yarn2 的源码时发现的，我正在把这个模块移植到 deno，或者在 deno 里面用类似的思想重新实现一个","createdAt":1584503172906},{"id":3097,"originId":"5e7199be45fcf75ee50e4ef3","articleId":585,"userId":22,"content":"自从用过 nest 后，就对 decorator 爱不释手了","createdAt":1584503230827},{"id":3098,"originId":"5e71a91d89a5c35f11e33185","articleId":585,"userId":89,"content":"[@justjavac](/user/justjavac) decorator合理用，最怕瞎几把用的，恶心死了。适度的加入是锦上添花","createdAt":1584507165599},{"id":3099,"originId":"5e71bfe145fcf75ee50e4f41","articleId":585,"userId":514,"content":"商业化了","createdAt":1584512993212},{"id":3100,"originId":"5e71c00d45fcf75ee50e4f47","articleId":585,"userId":109,"content":"[@i5ting](/user/i5ting) 过犹不及。 比如 await/async 的滥用（滥用是主语，前面可以换成其它技术）。\r\n个人觉得 decorator 的一个滥用就是 TypeORM 的 `@Column` （好像是这个名字） 对类型（字段）的注解。好比是画蛇添足。","createdAt":1584513037868},{"id":3101,"originId":"5e72c92058ab6717beb7b966","articleId":585,"userId":22,"content":"[@waitingsong](/user/waitingsong) 还有一个滥用（或者即将被滥用）的就是 optional chaining","createdAt":1584580896432},{"id":3102,"originId":"5e72d73264259617c49a1ca6","articleId":585,"userId":18,"content":"[@justjavac](/user/justjavac) `optional chaining` 存在也算是好多年了吧...要滥用也不等现在啊，jq不就是optional chaining的代表吗","createdAt":1584584498516},{"id":3103,"originId":"5e730fef64259617c49a1db2","articleId":585,"userId":22,"content":"[@alsotang](/user/alsotang) 以后会出现一种 code style，以安全保守的名义，所有的属性访问都使用 `?.`, 就是这种画风：`response?.data?.list?.user?.address?.city`","createdAt":1584599023625},{"id":3104,"originId":"5e7310a464259617c49a1db8","articleId":585,"userId":610,"content":"[@justjavac](/user/justjavac) 我怎么感觉npm源码比nodejs差很多啊","createdAt":1584599204541},{"id":3105,"originId":"5e73711358ab6717beb7bba4","articleId":585,"userId":22,"content":"[@1316346949](/user/1316346949) 半斤八两，但是 npm 是纯 js 写的，没有哪些歪七歪八的 C++ 代码，所以感觉不是太糟糕（虽然也很糟糕","createdAt":1584623891354},{"id":3106,"originId":"5e74273a64259617c49a1f63","articleId":585,"userId":109,"content":"[@justjavac](/user/justjavac) 最新版 vs code 和 typescript，ts 项目，如果对象类型的某个属性是可选，那么写代码的时候 vscode （or eslint？）就会自动把 `foo.name` 给你改成 `foo?.name` ……\r\n\r\n以后恐怕就是一堆的 `?.` 操作符号了，然后再加上一堆 `??`，真要疯得～～\r\n再以后，一堆的 `|>`， js 代码真成天书了……","createdAt":1584670522707},{"id":3107,"originId":"5e77649d64259617c49a2420","articleId":585,"userId":22,"content":"[@waitingsong](/user/waitingsong) 如果是 ts 还好，至少可以推断出哪些是 nullable，哪些不是。","createdAt":1584882845005},{"id":3108,"originId":"5e78437858ab6717beb7c2b3","articleId":585,"userId":1410,"content":"[@justjavac](/user/justjavac) 之前不是还看到npm有代码使用了rust吗，不过估计是接口服务的代码","createdAt":1584939896430},{"id":3109,"originId":"5e78b3f164259617c49a27a2","articleId":585,"userId":22,"content":"[@iyuq](/user/iyuq) 你是说 npm 源码，还是托管在 npm 上的包啊。如果是 npm 源码，应该没有用到任何 rust 代码。如果是托管在 npm 的包，rust 代码非常多。","createdAt":1584968689794},{"id":3110,"originId":"5e79c0f864259617c49a29d8","articleId":585,"userId":1402,"content":"很棒！期待和Azure云打通，建立统一的js生态。","createdAt":1585037560115},{"id":3111,"originId":"5e79802664259617c49a28b2","articleId":586,"userId":3,"content":"怎么又发一遍呀？","createdAt":1585020966294},{"id":3112,"originId":"5c37009d3898674067a7da36","articleId":587,"userId":38,"content":"前排支持","createdAt":1547108509618},{"id":3113,"originId":"5c37037c5bf06c5e7e3f3bbf","articleId":587,"userId":31,"content":"赞一个! 我之前也写了一个, 不过是插件扩展的, 基本上把 nest 的核心都抄了过来，不过 inject 保留了, 个人不喜欢依赖来依赖去. ","createdAt":1547109244475},{"id":3114,"originId":"5c3705c65bf06c5e7e3f3bf5","articleId":587,"userId":21,"content":"文档不错,但跟egg一样，默认给带worker了，还默认了pandora。\r\n我觉得worker这类的通过选项开启就好了，默认给最简的模式会好一些。\r\n其实像多进程和多线程或多或少都是增加了开发的复杂度，我是觉得框架还是最好少点这东西。\r\n我宁愿用pandora或pm2来启动多实例,包括egg的agent机制，我认为大多场景必要性不大。\r\n","createdAt":1547109830525},{"id":3115,"originId":"5c37075e5bf06c5e7e3f3c09","articleId":587,"userId":357,"content":"[@zy445566](/user/zy445566) 只是默认生成了一个pandora的配置文件，没有pandora依赖哦","createdAt":1547110238867},{"id":3116,"originId":"5c370cf23898674067a7dae0","articleId":587,"userId":357,"content":"[@zy445566](/user/zy445566) 类似纯 koa 开发，单进程模式的体验我们也很喜欢的，调试开发都方便，现在因为是基于 egg-core 的底层往上扩展，进程模型直接沿用了 egg 的那一套，由于有 master 的存在，似乎不太容易独立运行进程，这块我们也会思考下：）","createdAt":1547111666249},{"id":3117,"originId":"5c3714813898674067a7db5d","articleId":587,"userId":358,"content":"[@czy88840616](/user/czy88840616) 死马年前会做 egg 单进程这块","createdAt":1547113601474},{"id":3118,"originId":"5c3714d03898674067a7db6c","articleId":587,"userId":357,"content":"[@atian25](/user/atian25) 恩，我看到 issue 了","createdAt":1547113680759},{"id":3119,"originId":"5c3724733898674067a7dbe4","articleId":587,"userId":850,"content":"期待下~ ","createdAt":1547117683263},{"id":3120,"originId":"5c372ad85bf06c5e7e3f3d4e","articleId":587,"userId":121,"content":"贡献可能略显不足，但是通过参与，自己也得到很多提升和思考～    加油！🤗","createdAt":1547119320316},{"id":3121,"originId":"5c372ba45bf06c5e7e3f3d60","articleId":587,"userId":627,"content":"想问问和egg是什么关系？互补，还是同一类框架？  \n本小白对两个框架都不熟～～\n\n[CNodeMD]","createdAt":1547119524221},{"id":3122,"originId":"5c372c395bf06c5e7e3f3d66","articleId":587,"userId":545,"content":"[@atian25](/user/atian25)  这波可以，周围生态得赶紧完善～\r\n\r\n恭喜","createdAt":1547119673875},{"id":3123,"originId":"5c372c553898674067a7dc39","articleId":587,"userId":545,"content":"[@dbit-xia](/user/dbit-xia)  弥补egg 的不足，跟 nest.js  spring 是同一类框架","createdAt":1547119701836},{"id":3124,"originId":"5c372e035bf06c5e7e3f3d82","articleId":587,"userId":121,"content":"[@dbit-xia](/user/dbit-xia) 不能说是弥补egg的不足，egg和周边都已经很成熟了，midway算是基于egg进行升级和拓展吧，换了一种开发方式，支持typescript，支持IoC，同时熟悉egg开发的也会有亲切感～","createdAt":1547120131503},{"id":3125,"originId":"5c3736595bf06c5e7e3f3db1","articleId":587,"userId":189,"content":"赞赞赞     测试一波     Midway 也是淘宝团队吗？","createdAt":1547122265086},{"id":3126,"originId":"5c37396c5bf06c5e7e3f3dcb","articleId":587,"userId":357,"content":"[@sinazl](/user/sinazl) 是的, MidwayJS 隶属于淘宝技术部前端部门，产出 midway/pandora.js/sandbox 几类产品。","createdAt":1547123052358},{"id":3127,"originId":"5c373a773898674067a7dcdc","articleId":587,"userId":419,"content":"依赖注入的方式很不错，同时可以利用egg的生态，基于ts开发体验提升了一个层级","createdAt":1547123319949},{"id":3128,"originId":"5c374f765bf06c5e7e3f3e11","articleId":587,"userId":358,"content":"[@dbit-xia](/user/dbit-xia) midway / beidou 都属于 egg 的上层框架","createdAt":1547128694647},{"id":3129,"originId":"5c37520e3898674067a7dd33","articleId":587,"userId":1412,"content":" nice\n\n------\n来自[MaterialCNode](mcnode.alexlees.top)\n","createdAt":1547129358918},{"id":3130,"originId":"5c37683da4d44449266af8bf","articleId":587,"userId":1413,"content":"撒花~周末尝试看看~","createdAt":1547135037040},{"id":3131,"originId":"5c37cfa5a4d44449266af8e9","articleId":587,"userId":1414,"content":"fdsfds","createdAt":1547161509362},{"id":3132,"originId":"5c37d929a4d44449266af8f0","articleId":587,"userId":627,"content":"[@atian25](/user/atian25) [@ZQun](/user/ZQun) [@zuohuadong](/user/zuohuadong) 谢谢，了解了，看样子并不依赖egg，算不算抢egg的饭碗(￣o￣) . z Z\n\n[CNodeMD]","createdAt":1547163945661},{"id":3133,"originId":"5c37dcb33898674067a7de20","articleId":587,"userId":358,"content":"[@dbit-xia](/user/dbit-xia) 上层框架的意思就是，他们的底层是 egg...","createdAt":1547164851998},{"id":3134,"originId":"5c37dce73898674067a7de25","articleId":587,"userId":10,"content":"支持，😀\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1547164903194},{"id":3135,"originId":"5c37eaf03898674067a7de40","articleId":587,"userId":627,"content":"[@atian25](/user/atian25) \"上层框架\"怎么理解？是依赖egg 还是基于egg源码的改造？\n\n[CNodeMD]","createdAt":1547168496035},{"id":3136,"originId":"5c37f4d23898674067a7de9e","articleId":587,"userId":850,"content":"[@dbit-xia](/user/dbit-xia)  基于 egg 实现的更高一层 Level 的框架，融入 egg 生态圈。","createdAt":1547171026389},{"id":3137,"originId":"5c380179a4d44449266afa19","articleId":587,"userId":358,"content":"[@dbit-xia](/user/dbit-xia) \r\n\r\n![image.png](//static.cnodejs.org/FrbZEA59swO98Temw3ZpwtBWy8-m)\r\n\r\n如图，如果你熟悉 Egg 的话，会知道 Egg 的定位是：『框架的框架』。\r\n\r\n其中一个很重要的特性就是可以基于 Egg 构建适合自己团队或特定业务场景的上层框架。\r\n\r\n这是内置特性，用起来也几乎没啥区别，可以看下文档。或者看下我这篇 Slide : https://github.com/atian25/blog/issues/20","createdAt":1547174265216},{"id":3138,"originId":"5c3c0c4ea4d44449266b088d","articleId":587,"userId":1104,"content":"egg本身已经很不错了，midway会使node的生态会越来越好。\r\n我们招人可以更好的策反java/python程序员啦。","createdAt":1547439182788},{"id":3139,"originId":"5c44103d6955112b99436f21","articleId":587,"userId":1415,"content":"加油","createdAt":1547964477405},{"id":3140,"originId":"5c45471f6955112b994372dc","articleId":587,"userId":545,"content":"[@wbget](/user/wbget) \r\n JavaScript 明星项目！\r\nhttps://risingstars.js.org/2018/zh/\r\n\r\nnode.js框架，值得一提的是，nuxt 和 next 分别用于ssr 渲染。\r\n也就是说，今年增长最多的是 nest ，并且npm下载量已经达到了 koa 的 1/4 。\r\n\r\n![image.png](//static.cnodejs.org/FgOh-8KSCci5PVOT5x1DNufsCUv0)\r\n\r\nmidway 学习了 nest， 也比较看好。 egg ... 不建议","createdAt":1548044063797},{"id":3141,"originId":"5c45547d3b948a2b4ab6ff46","articleId":587,"userId":1104,"content":"[@zuohuadong](/user/zuohuadong) eggjs我们已经用于生产环境半年多了，满足我们本身的各种需求。\r\nnest也关注了。\r\n靠前的这些框架都很不错，大家酌情了解熟悉一到俩个，我觉得就很不错了。\r\n[人生苦短](https://zhuanlan.zhihu.com/p/52814937)，早下班才是硬道理。","createdAt":1548047485161},{"id":3142,"originId":"5c4587296955112b99437564","articleId":587,"userId":1416,"content":"地方","createdAt":1548060457922},{"id":3143,"originId":"5c47cf353b948a2b4ab70a47","articleId":587,"userId":109,"content":"请问 关于事务控制是依赖于插件还是框架本身有控制","createdAt":1548209973142},{"id":3144,"originId":"5c47e6466955112b99437ee6","articleId":587,"userId":357,"content":"[@waitingsong](/user/waitingsong) 目前 midway 做的 IoC 为控制层，事务没有涉猎。","createdAt":1548215878948},{"id":3145,"originId":"5c47e6923b948a2b4ab70b2d","articleId":587,"userId":357,"content":"[@wbget](/user/wbget) 同意，人生苦短，满足就行。。学习框架，更多的是学习下理念，设计，其他的看缘分吧。","createdAt":1548215954318},{"id":3146,"originId":"5c491ec13b948a2b4ab70fd7","articleId":587,"userId":109,"content":"[@czy88840616](/user/czy88840616) 谢谢","createdAt":1548295873716},{"id":3147,"originId":"5c4a67d1595cbd1e9508834b","articleId":587,"userId":1417,"content":"[@czy88840616](/user/czy88840616) 作为一个小白，我想请教一下，新框架的出现必定是为了解决现有框架的缺陷而诞生的。Midway 是解决什么问题，问题再具体点，我一直觉得 Express 是最简单粗暴的 Node 框架，Midway 又能做哪些 Express 不能做的事情？","createdAt":1548380113375},{"id":3148,"originId":"5c4b2224f9075c1ef7138314","articleId":587,"userId":109,"content":"[@dkvirus](/user/dkvirus) 我猜，是做到 不简单而优雅 吧","createdAt":1548427812137},{"id":3149,"originId":"5c807b1390c14711cc8cb0ab","articleId":587,"userId":109,"content":"[@czy88840616](/user/czy88840616)  请问 midway 支持作为 gRPC **服务端** 开发么（或者同时启动服务端、客户端）。官方文档里面好像没找到。","createdAt":1551923987393},{"id":3150,"originId":"5c80975e90c14711cc8cb212","articleId":587,"userId":121,"content":"[@waitingsong](/user/waitingsong) 可以关注一下   https://github.com/midwayjs/midway/issues/142#issuecomment-469662160","createdAt":1551931230701},{"id":3151,"originId":"5c80e31890c14711cc8cb3be","articleId":587,"userId":109,"content":"[@ZQun](/user/ZQun) 多谢","createdAt":1551950616579},{"id":3152,"originId":"5c81f1e45b8cb21491ca731b","articleId":587,"userId":99,"content":"会egg是不是学起来很快","createdAt":1552019940841},{"id":3153,"originId":"5c82210f5b8cb21491ca747a","articleId":587,"userId":1328,"content":"https://www.awesomes.cn/repos/NodeJS/Frameworks?sort=score","createdAt":1552032015721},{"id":3154,"originId":"5c82340dacb681372d4164f3","articleId":587,"userId":220,"content":"浓浓后端 spring的既视感...感觉这款 \"前端框架\"  是不是后端主力开发的?哈哈哈哈... controller ,service, 就差 dao了","createdAt":1552036877344},{"id":3155,"originId":"5c83869f7ce0df37324266f4","articleId":587,"userId":1418,"content":"支持一个","createdAt":1552123551825},{"id":3156,"originId":"5c8702c0acb681372d417279","articleId":587,"userId":1419,"content":"srping ioc typescript","createdAt":1552351936545},{"id":3157,"originId":"5c8722b1acb681372d417384","articleId":587,"userId":545,"content":"[@waitingsong](/user/waitingsong)  nest 有这个，在微服务里。   midway 现在生态还没完善","createdAt":1552360113078},{"id":3158,"originId":"5c8722d77ce0df3732427203","articleId":587,"userId":545,"content":"[@dkvirus](/user/dkvirus)  简单理解为 一个是工具包，一个是框架～","createdAt":1552360151929},{"id":3159,"originId":"5c875b29acb681372d41753f","articleId":587,"userId":100,"content":"支持一个","createdAt":1552374569646},{"id":3160,"originId":"5c875df1acb681372d41756e","articleId":587,"userId":121,"content":"[@phonegap100](/user/phonegap100) 会用egg，看一遍midway文档就能上手了\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1552375281960},{"id":3161,"originId":"5c87913bacb681372d41771c","articleId":587,"userId":109,"content":"[@zuohuadong](/user/zuohuadong) \r\nnest 也是一个可选项，不过暂时没时间做评估。你能否简要说说两者 (nest, midway/egg) 的优缺点？\r\n我关心的是稳定性，可维护（测试、扩展）性。 \r\n之前在zhihu好像看到有说 nest 的测试用例中不方便 DI注入于是事务控制不好做。","createdAt":1552388411516},{"id":3162,"originId":"5c87e0297ce0df373242765c","articleId":587,"userId":545,"content":"[@waitingsong](/user/waitingsong)  nest 2017 年底就发布了。  马上6.x ，生态也相对来说比较成熟了。","createdAt":1552408617204},{"id":3163,"originId":"5c8859daacb681372d4178bc","articleId":587,"userId":100,"content":"midway加油","createdAt":1552439770598},{"id":3164,"originId":"5c8b0ade7ce0df373242826b","articleId":587,"userId":191,"content":"加油","createdAt":1552616158838},{"id":3165,"originId":"5c8b1b0aacb681372d41853d","articleId":587,"userId":1420,"content":"关注看看~","createdAt":1552620298003},{"id":3166,"originId":"5c8ce7057ce0df3732428ad6","articleId":587,"userId":99,"content":"[@ZQun](/user/ZQun) 好的谢谢","createdAt":1552738053183},{"id":3167,"originId":"5ce152aae57aac76fed2beba","articleId":587,"userId":109,"content":"有个关于类型的问题：\r\ncontroller/home.ts\r\n```ts\r\nimport { controller, get, provide } from 'midway';\r\n\r\n@provide()\r\n@controller('/')\r\nexport class HomeController {\r\n\r\n  @get('/')\r\n  async index(ctx) {\r\n    ctx.body = `Welcome to midwayjs!`;\r\n  }\r\n}\r\n```\r\nindex() 方法的入口参数 ctx 并没有类型，默认是 any。 \r\n那么如何给 ctx 增加类型呢？\r\n\r\n对于 egg，这样的代码就有类型提示：\r\n```ts\r\nimport { Controller } from 'egg-win'\r\n\r\nexport default class HomeController extends Controller {\r\n  public async index() {\r\n    const { ctx } = this\r\n    ctx.body = await ctx.service.test.sayHi('sundsoft.com')\r\n  }\r\n}\r\n\r\ndeclare module 'egg' {\r\n  export interface IController {\r\n    home: HomeController\r\n  }\r\n} \r\n```\r\n","createdAt":1558270634233},{"id":3168,"originId":"5ce15774518e0954fc40f9ae","articleId":587,"userId":31,"content":"[@waitingsong](/user/waitingsong) 只能手动指定，egg 默认是继承来的声明合并后附加所有信息所以带类型，这个是参数只能指定了","createdAt":1558271860776},{"id":3169,"originId":"5ce20a84e57aac76fed2c02a","articleId":587,"userId":109,"content":"[@yviscool](/user/yviscool) 那从哪儿引入呢？\r\n比如 config.default.ts\r\negg 的有类型\r\n```ts\r\nimport { EggAppConfig, PowerPartial } from 'egg'\r\nexport default (appInfo: EggAppConfig) => {\r\n  const config = <DefaultConfig> {}\r\n  // should change to your own for every new project!\r\n  config.keys = appInfo.name + 0.00842891111\r\n  config.siteFile = {\r\n    '/favicon.ico': fs.readFileSync(path.join(appInfo.baseDir, 'app/public/favicon.png')),\r\n  }\r\n｝\r\n···\r\n\r\n而 midway 的啥都没有:\r\n\r\n```ts\r\nexport = (appInfo: any) => {\r\n  const config: any = exports = {};\r\n  // use for cookie sign key, should change to your own and keep security\r\n  config.keys = appInfo.name + '_1558269532558_9642';\r\n  // add your config here\r\n  config.middleware = [\r\n  ];\r\n  return config;\r\n};\r\n```\r\n\r\n还有文档也是胡编乱造：\r\nhttps://midwayjs.org/midway/guide.html#%E6%B3%A8%E5%85%A5%E9%85%8D%E7%BD%AE\r\n\r\n```\r\n假如 config.default.ts 中有一些代码。\r\nexport const hello = 1;\r\n```\r\n你（写文档的哥们）给我试试在 `config.default.ts` 中直接导出个 hello ？ \r\n\r\n感觉 midway 的 ts 有点简陋吧。还是 `midway-init` 生成出的 ts 模板不正确？\r\n","createdAt":1558317700815},{"id":3170,"originId":"5ce20ebf518e0954fc40fb44","articleId":587,"userId":1210,"content":"👍","createdAt":1558318783090},{"id":3171,"originId":"5ce20fe8e57aac76fed2c056","articleId":587,"userId":357,"content":"[@waitingsong](/user/waitingsong) https://github.com/midwayjs/midway/blob/86170febb2471468b79fc2a32450f4e707ed5ee6/packages/midway-web/src/index.ts#L10 大部分 egg 导出的定义都已经导出，可以直接从 midway 上取到。","createdAt":1558319080338},{"id":3172,"originId":"5ce2106fe57aac76fed2c05e","articleId":587,"userId":31,"content":"[@waitingsong](/user/waitingsong) \r\n\r\n```js\r\nimport { controller, get, provide, Context, Application, EggAppConfig } from 'midway';\r\n\r\n@provide()\r\n@controller('/')\r\nexport class HomeController {\r\n\r\n  @get('/')\r\n  async index(\r\n    ctx: Context,\r\n    next: any,\r\n    // app: Application,\r\n    // config: EggAppConfig,\r\n    ) {\r\n    ctx.body = `Welcome to midwayjs!`;\r\n  }\r\n}\r\n```\r\n这样 ctx 就能提示了，看了一下 config, mid 的没有生成类型文件，\r\n\r\n```js\r\nimport { EggAppConfig } from 'egg';\r\nimport ExportConfigDefault from '../../config/config.default';\r\ntype ConfigDefault = ReturnType<typeof ExportConfigDefault>;\r\ndeclare module 'egg' {\r\n  type NewEggAppConfig = ConfigDefault;\r\n  interface EggAppConfig extends NewEggAppConfig { }\r\n}\r\n```\r\negg 默认是生成的了 这样的一个 type/ config 然后合并就有提示类型了, [@czy88840616](/user/czy88840616) 很好奇，为什么 mid 没有","createdAt":1558319215846},{"id":3173,"originId":"5ce216b1e57aac76fed2c0bb","articleId":587,"userId":357,"content":"[@yviscool](/user/yviscool) 目前 config 没提供，是因为这个目录是少数几个强依赖目录结构的，一方面我们还在想办法换一种配置形式，另一方面目前提配置定义的用户不多，我们会考虑加进去。","createdAt":1558320817972},{"id":3174,"originId":"5ce21ac9e57aac76fed2c0ea","articleId":587,"userId":109,"content":"[@yviscool](/user/yviscool) 谢谢\r\n就是说现在用 \r\n```ts\r\nimport { provide, config } from 'midway';\r\n\r\n@provide()\r\nexport class BaseService {\r\n\r\n  @config('hello')\r\n  config;   // 1\r\n\r\n}\r\n```\r\n注入方式获取到的 config 是无法获取到类型哟？","createdAt":1558321865773},{"id":3175,"originId":"5ce21b2c518e0954fc40fbab","articleId":587,"userId":109,"content":"[@czy88840616](/user/czy88840616) \r\n我的egg配置\r\n```ts\r\nexport default (appInfo: EggAppConfig) => {\r\n  const config = <DefaultConfig> {}\r\n\r\n  // should change to your own for every new project!\r\n  config.keys = appInfo.name + 0.0084211111\r\n\r\n  config.siteFile = {\r\n    '/favicon.ico': fs.readFileSync(path.join(appInfo.baseDir, 'app/public/favicon.png')),\r\n  }\r\n\r\n  config.cors = {\r\n    origin: '*',\r\n    // allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH,OPTIONS',\r\n    allowMethods: 'GET,HEAD,POST,PATCH,OPTIONS',\r\n    maxAge: 600,\r\n  }\r\n\r\n  config.security = {\r\n    csrf: {\r\n      enable: false,\r\n    },\r\n  }\r\n\r\n  return config\r\n}\r\n```\r\n\r\n这些配置参数，没类型定义不好设置和检查呀……","createdAt":1558321964409},{"id":3176,"originId":"5ce21e97e57aac76fed2c118","articleId":587,"userId":109,"content":"[@czy88840616](/user/czy88840616) midway的类型命名是否考虑去掉 `I` 前缀呢\r\nhttps://angular.cn/guide/styleguide#style-03-03\r\n\r\n> 考虑不要在接口名字前面加 I 前缀。\r\n考虑用接口作为数据模型。\r\n为何？ [TypeScript](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines)  指导原则不建议使用 “I” 前缀。\r\n为何？单独一个类的代码量小于类+接口。\r\n为何？类可以作为接口使用（只是用 implements 代替 extends 而已）。\r\n","createdAt":1558322839576},{"id":3177,"originId":"5ce21f91518e0954fc40fbd9","articleId":587,"userId":357,"content":"[@waitingsong](/user/waitingsong) 可以的，只是示例里加了 I，实际使用 lint 里应该没限制的。","createdAt":1558323089123},{"id":3178,"originId":"5ce220afe57aac76fed2c142","articleId":587,"userId":357,"content":"[@waitingsong](/user/waitingsong) 我们之前考虑，config 大多还是单一属性或者简单的单层对象，如果是变成现在注入的形式，就会省略一个 key，这样定一个完整的 config interface 没有太大意义，反而要考虑拆分成本。\r\n\r\n```ts\r\n@config(xxx)\r\nconfig;\r\n```\r\n\r\n看起来直接写 string/number/ {xxx: xxx} 会更快。","createdAt":1558323375542},{"id":3179,"originId":"5ce2211de57aac76fed2c147","articleId":587,"userId":357,"content":"[@waitingsong](/user/waitingsong) 呃，我可以把 egg 的东西导出的时候 as 一下，但是。。。总觉得不是很好。。","createdAt":1558323485980},{"id":3180,"originId":"5ce221b7518e0954fc40fbf4","articleId":587,"userId":109,"content":"[@czy88840616](/user/czy88840616) 我这个一个ocr服务，config 相当复杂，层级有个三四层。看来用注解方式获取配置不理想（对于ts来说）。","createdAt":1558323639119},{"id":3181,"originId":"5ce22212e57aac76fed2c14f","articleId":587,"userId":109,"content":"[@czy88840616](/user/czy88840616) 底层（egg）的东西还是不改动的好。 midway 自己遵循主流风格规范吧。","createdAt":1558323730660},{"id":3182,"originId":"5ce2226f518e0954fc40fbfe","articleId":587,"userId":357,"content":"[@waitingsong](/user/waitingsong) 可以单独针对某一个复杂的 key 定义 interface，这样 config 中和实际服务中都可以用。","createdAt":1558323823661},{"id":3183,"originId":"5ce25038e57aac76fed2c249","articleId":587,"userId":109,"content":"[@czy88840616](/user/czy88840616) \r\n> 看起来直接写 string/number/ {xxx: xxx} 会更快。\r\n\r\n这是什么写法？\r\n\r\n能否这样在注解中增加类型？\r\n> [@config](/user/config)(key: FooType)\r\nconfig;\r\n\r\n\r\n呃…… 还不如这样\r\n> [@config](/user/config)(key)\r\nconfig: FooType;\r\n","createdAt":1558335544507},{"id":3184,"originId":"5ce2601ee57aac76fed2c2df","articleId":587,"userId":109,"content":"[@yviscool](/user/yviscool) 有个问题\r\n\r\n```ts\r\nimport { controller, get, provide, Context, Application, EggAppConfig } from 'midway';\r\n\r\n@provide()\r\n@controller('/')\r\nexport class HomeController {\r\n\r\n  @get('/')\r\n  async index(\r\n    ctx: Context,\r\n    next: any,\r\n    app: Application,\r\n    // config: EggAppConfig,\r\n    ) {\r\n\tthis.app ??\r\n    ctx.body = `Welcome to midwayjs!`;\r\n  }\r\n}\r\n```\r\n\r\n假如要使用 app 入口参数，那么就得把 next 形参也写上。但是如果方法里面没用到这个 next 参数，并且  tsconfig.json 里面开启了 `noUnusedLocals` 那编译就过不了。\r\n貌似类方法也没定义 this 的类型，这该咋办？\r\n","createdAt":1558339614285},{"id":3185,"originId":"5ce264b0518e0954fc40fde3","articleId":587,"userId":31,"content":"[@waitingsong](/user/waitingsong) \r\nmid 类方法应该只有 ctx 和 next 参数, 上面那个 app 和 config 是我用来演示的\r\n\r\n```js\r\n{\r\n  \"compileOnSave\": true,\r\n  \"compilerOptions\": {\r\n    \"target\": \"es2017\",\r\n    \"module\": \"commonjs\",\r\n    \"strict\": true,\r\n    \"noImplicitAny\": false,\r\n    \"experimentalDecorators\": true,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"charset\": \"utf8\",\r\n    \"allowJs\": false,\r\n    \"pretty\": true,\r\n    \"noEmitOnError\": false,\r\n    //\"noUnusedLocals\": true,\r\n    //\"noUnusedParameters\": true,\r\n    //\"allowUnreachableCode\": false,\r\n    //\"allowUnusedLabels\": false,\r\n    \"strictPropertyInitialization\": false,\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"skipLibCheck\": true,\r\n    \"skipDefaultLibCheck\": true,\r\n    \"inlineSourceMap\": true,\r\n    \"importHelpers\": true\r\n  },\r\n  \"exclude\": [\r\n    \"app/public\",\r\n    \"app/views\",\r\n    \"node_modules*\"\r\n  ]\r\n}\r\n\r\n```\r\n\r\n把这几个注释干掉就好了","createdAt":1558340784729},{"id":3186,"originId":"5ce26a88518e0954fc40fe17","articleId":587,"userId":109,"content":"[@czy88840616](/user/czy88840616) 有个类构造方法的问题\r\n\r\n```ts\r\nimport { provide, Context } from 'midway';\r\nimport { IUserService, IUserOptions, IUserResult } from '../interface';\r\n\r\n@provide('userService')\r\nexport class UserService implements IUserService {\r\n\r\n  constructor(foo) {\r\n  }\r\n\r\n  async getUser(options: IUserOptions): Promise<IUserResult> {\r\n    return {\r\n      id: options.id,\r\n      username: 'mockedName',\r\n      phone: '12345678901',\r\n      email: 'xxx.xxx@xxx.com',\r\n    };\r\n  }\r\n}\r\n```\r\n\r\n构造方法没有入口参数 （foo值为未定义）？ \r\nthis对象（constructor 方法内的或者 getUser 方法内的）除了类自身的属性和方法，类型上面没有其它属性 （egg的 this 上面有 app 等一堆对象），是设计如此么？\r\n感觉从 egg 要转移到 midway，TS的变化有点不适应……","createdAt":1558342280642},{"id":3187,"originId":"5ce26b9a518e0954fc40fe2b","articleId":587,"userId":109,"content":"[@yviscool](/user/yviscool) 你这个有点削足适屐吧\r\n我项目模板设置\r\n\r\n```\r\n  \"compilerOptions\": {\r\n    \"alwaysStrict\": true,\r\n    \"charset\": \"utf8\",\r\n    \"declaration\": false,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"importHelpers\": false,\r\n    \"inlineSourceMap\": true,\r\n    \"module\": \"commonjs\",\r\n    \"newLine\": \"lf\",\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"pretty\": true,\r\n    \"skipLibCheck\": true,\r\n    \"strict\": true, \r\n    \"noImplicitAny\": true,\r\n    \"noImplicitThis\": true,\r\n    \"noUnusedLocals\": true,\r\n    \"target\": \"ES2018\",\r\n    \"types\" : [\"node\"]\r\n  },\r\n```","createdAt":1558342554015},{"id":3188,"originId":"5ce26e7e518e0954fc40fe44","articleId":587,"userId":109,"content":"[@yviscool](/user/yviscool) 测试了下， controller 类方法入口参数只有 ctx 和 next 两个形参的。","createdAt":1558343294410},{"id":3189,"originId":"5ce27089518e0954fc40fe50","articleId":587,"userId":109,"content":"[@czy88840616](/user/czy88840616) \r\n文档 https://midwayjs.org/midway/guide.html#%E6%A1%86%E6%9E%B6%E5%A2%9E%E5%BC%BA%E6%B3%A8%E5%85%A5 下 ` injection` 的链接打不开 \r\n```\r\nweb.npm.alibaba-inc.com/package/injection\r\n```","createdAt":1558343817870},{"id":3190,"originId":"5ce920074036f24194cf688f","articleId":587,"userId":109,"content":"[@czy88840616](/user/czy88840616) [@yviscool](/user/yviscool)\r\n\r\n有个跳转定义的问题：\r\n1. 使用 `midway-init` 初始化一个新项目，选择 模板1，然后 `npm i` 安装依赖\r\n2. 用 vscode 打开项目目录\r\n3. 打开 `src/app/controller/user.ts`\r\n4. 在 行13  `const user: IUserResult = await this.service.getUser({id});` 处 getUser 方法上使用 F12\r\n\r\n结果是跳转到 `src/interface.ts` 文件中 `IUserService` 类型定义上，而非预期的 `src/service/user.ts` 中 `UserService.getUser()` 方法定义上。\r\n在类注入的 ` service: IUserService` 上面 F12 跳转也是到类型定义上。 \r\n你们是如何解决这个跳转问题的呢？","createdAt":1558781959837},{"id":3191,"originId":"5ce9538b52ccb64168ba78cd","articleId":587,"userId":31,"content":"[@waitingsong](/user/waitingsong) \r\n你可以把 IUserService 改成 service 下面的 UseSerrvice , 官方也说了 ` 接口定义文件，自由定义`，单单看这个 interface 层可能没有什么卵用，java 好多项目都是这样 IxxxxService接口 和 xxxxSerivce 实现, 各人理解是有些代码细节我不关心或者我不想暴露，再或则我换个语言重写，我只关心参数以及返回，这时候这一层可能就有用了，这个纯属个人喜好了，反正我不喜欢维护两份代码。","createdAt":1558795147963},{"id":3192,"originId":"5cea879e52ccb64168ba7aa4","articleId":587,"userId":109,"content":"[@yviscool](/user/yviscool) 多谢。 如下方式解决：\r\n\r\n```ts\r\nimport { Context, controller, get, inject, provide } from 'midway';\r\n// import { IUserService } from '../../interface';\r\nimport { UserService } from '../../service/user';\r\n\r\n@provide()\r\n@controller('/user')\r\nexport class UserController {\r\n  [@inject](/user/inject)('userService')\r\n  service: UserService;\r\n\r\n  @get('/:id')\r\n  async getUser(ctx: Context): Promise<void> {\r\n    const id: number = ctx.params.id;\r\n    const user = await this.service.getUser({id});\r\n    ctx.body = {success: true, message: 'OK', data: user};\r\n  }\r\n\r\n}\r\n```\r\n\r\n对于接口层我认为存在有意义，不过可以不按照通常（midway 模板）那样使用，可以这样：\r\n1. 方案中心或者开发组长根据概设在写详设的时候，接口设计直接以 `.ts` 文档格式提供\r\n2. 开发人员导入接口文档 ts 文件，然后 Service 类 `implements` 指定的接口\r\n3. controller 中注入的是类（就是上面我的代码那样），而非类实现的接口。这样方便F12跳转定义\r\n4. 若新增需求或者需求变更，走 `issue` 流程，然后重复步骤 2-3\r\n\r\n估计Chrome也是这么考虑的，所以在 Angular 的风格建议中不推荐接口名使用 `I` 前缀的一个原因吧： `interface` 更多是作为类型使用而非如 java 那样严格的接口设计使用。\r\n\r\n另外，感觉\r\n\r\n> [@inject](/user/inject)('userService')\r\n service: UserService\r\n \r\n  \r\n  有些累赘，不知道是否有这种实现，注入参数直接使用类：\r\n\r\n>   [@inject](/user/inject)(UserService)\r\n service;\r\n  ","createdAt":1558874014699},{"id":3193,"originId":"5cea942b4036f24194cf6aff","articleId":587,"userId":31,"content":"[@waitingsong](/user/waitingsong) \r\n 注入参数直接使用类是可以的，但就是没提示，因为 ts 只是类型标注，不能动态赋予类型的，你没标注就没提示。感觉 mid 不适合你用，强扭的瓜不甜的。还是自己扩展一个顺手的。","createdAt":1558877227784},{"id":3194,"originId":"5ceaa8b34036f24194cf6b44","articleId":587,"userId":109,"content":"[@yviscool](/user/yviscool) \r\n个人看法 egg 比较底层， nestjs 在 spring 的路上走得有些远。 midway 中庸些还行， 就是自己不大熟悉。","createdAt":1558882483120},{"id":3195,"originId":"5ceb30a152ccb64168ba7b36","articleId":587,"userId":358,"content":"[@waitingsong](/user/waitingsong) 额，这个是内网地址。。。","createdAt":1558917281993},{"id":3196,"originId":"5ceb4a4952ccb64168ba7c3e","articleId":587,"userId":109,"content":"[@yviscool](/user/yviscool) 看了文档，原来可以这样：\r\n\r\n```ts\r\nimport { Context, controller, get, inject, provide } from 'midway';\r\nimport { UserService } from '../../service/user';\r\n\r\n@provide()\r\n@controller('/user')\r\nexport class UserController {\r\n  @inject()\r\n  userService: UserService;\r\n}\r\n```","createdAt":1558923849689},{"id":3197,"originId":"5e797adb58ab6717beb7c544","articleId":587,"userId":89,"content":"挖坟","createdAt":1585019611100},{"id":3198,"originId":"5e796a8158ab6717beb7c4e0","articleId":588,"userId":3,"content":"楼主没有用typescript版egg？","createdAt":1585015425909},{"id":3199,"originId":"5e796ac058ab6717beb7c4e4","articleId":588,"userId":3,"content":"还有路由适当用一下 router.resources 会不会更好一点？","createdAt":1585015488897},{"id":3200,"originId":"5e78933558ab6717beb7c41a","articleId":589,"userId":89,"content":"这么多不同技术栈一次吃透有点贪了，一点点来吧","createdAt":1584960309507},{"id":3201,"originId":"5e7816ba58ab6717beb7c1ba","articleId":590,"userId":89,"content":"对比着https://github.com/delvedor/find-my-way讲会更好。\r\n\r\n另外对koa-router源码，核心模块也可以补充一下","createdAt":1584928442401},{"id":3202,"originId":"5e785c5f58ab6717beb7c326","articleId":590,"userId":1252,"content":"[@i5ting](/user/i5ting) 嗯嗯，感谢您的建议~ 我会研究一下的","createdAt":1584946271919},{"id":3203,"originId":"5e783e8764259617c49a25ce","articleId":591,"userId":89,"content":"是时候学一学Markdown了","createdAt":1584938631196},{"id":3204,"originId":"5e7843b858ab6717beb7c2b8","articleId":591,"userId":1423,"content":"[@i5ting](/user/i5ting) markdown一直在用，公众号的不支持，还得转一道","createdAt":1584939960509},{"id":3205,"originId":"5e775b1858ab6717beb7c10d","articleId":592,"userId":1425,"content":"[Just Subtitle —— YouTube、bilibili 字幕下载](https://wivwiv.com/youtube/?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DrT4dnHyXyGE)\r\n\r\n弄了个 YouTube 字幕下载站，用的免费 Heroku + Nest.js，你这个 YouTube 反爬虫怎么解决？\r\n\r\n\r\n![](https://cdn.bigpar.cn/wivwiv/2020-03-17-141123.png)","createdAt":1584880408455},{"id":3206,"originId":"5e7834a264259617c49a25a5","articleId":592,"userId":1424,"content":"[@wiviwiv](/user/wiviwiv)  个人学习用途， 下载量小， 未触发反爬虫。  \r\n如果考虑反爬虫， 考虑ip 代理","createdAt":1584936098291},{"id":3207,"originId":"5e5f5d9da72b853f100459de","articleId":593,"userId":121,"content":"[@lqs469](/user/lqs469) [midway-faas](https://github.com/midwayjs/midway-faas)","createdAt":1583308189974},{"id":3208,"originId":"5e5fb1a4b5a36940fe1ceda6","articleId":593,"userId":89,"content":"是个不错的想法，不过没法在生成环境应用的。vm2模块安全要好很多，可以看一下","createdAt":1583329700514},{"id":3209,"originId":"5e5fc214a72b853f10045acd","articleId":593,"userId":766,"content":"[@i5ting](/user/i5ting) 谢谢，只是想到了用vm的思路来实现了一下玩玩，生产肯定不会这样解决方案，所以也就没用vm2，只用Node API了。","createdAt":1583333908445},{"id":3210,"originId":"5e6a34f823bc9e20b4e338f1","articleId":593,"userId":1427,"content":"vm可以做开发环境的代码热更新？","createdAt":1584018680020},{"id":3211,"originId":"5e6e3e383cadb020b9161138","articleId":593,"userId":26,"content":"有没有用vm2结合woker_threads 来做` await vm.run()`的？","createdAt":1584283192573},{"id":3212,"originId":"5e75c09558ab6717beb7bf63","articleId":593,"userId":766,"content":"[@jerikchan](/user/jerikchan) vm可以在一个沙盒环境里执行目标代码。不过你说的的开发环境或许直接重启应用就足够，也不必考虑vm了。","createdAt":1584775317014},{"id":3213,"originId":"5e75c13958ab6717beb7bf68","articleId":593,"userId":766,"content":"[@HobaiRiku](/user/HobaiRiku) 可以实现的，不过vm或者vm2这类方案只适合在toy级别的项目里实验玩玩，生产环境还是算了，所以也没深究API了","createdAt":1584775481006},{"id":3214,"originId":"5e781f5b64259617c49a2547","articleId":593,"userId":26,"content":"[@lqs469](/user/lqs469) 哈哈，我们已经准备上线了，不过后续对于python和java，可能还是用阿里的函数计算省心。     \r\n\r\n```js\r\nconst Worker = require('worker_threads').Worker;\r\nconst worker_code = `\r\n  (async () => {\r\n    const { workerData, parentPort } = require('worker_threads');\r\n    const http = require('http');\r\n    const https = require('https');\r\n    const { VM } = require('vm2');\r\n    const t = Date.now();\r\n    const vm = new VM({\r\n      sandbox: {\r\n        setTimeout,\r\n        https,\r\n        http,\r\n    }});\r\n    try {\r\n      const ret = await vm.run(workerData.code);\r\n      console.log('运行\"await vm.run() 用时\" ：', Date.now() - t,'ms');\r\n      parentPort.postMessage({\r\n        data: typeof ret === 'string' ? ret : JSON.stringify(ret),\r\n      });\r\n    } catch (e) {\r\n      parentPort.postMessage({\r\n        err: e.toString(),\r\n      });\r\n    }\r\n  })();\r\n  `;\r\nconst script = `\r\n  function Fibonacci (n) {\r\n      if ( n <= 1 ) {return 1};\r\n      return Fibonacci(n - 1) + Fibonacci(n - 2);\r\n    };\r\n  async function main() {\r\n    const result = await new Promise((ok, err) => {\r\n        const req = http.get('http://127.0.0.1:3333', res => {\r\n          let data = '';\r\n          res.on('data', c => {\r\n            data += c;\r\n          });\r\n          res.on('end', () => {\r\n            Fibonacci(35);\r\n            ok(data);\r\n          });\r\n          res.on('error', error => err(error));\r\n        });\r\n        req.on('error',error => err(error));\r\n        req.end();\r\n    });\r\n    return result;\r\n  }\r\n  main();\r\n  `;\r\nasync function runJSAsync(params, code) {\r\n  return new Promise((ok, err) => {\r\n    const worker = new Worker(worker_code, {\r\n      workerData: { params, code },\r\n\t  eval: true\r\n    });\r\n    worker.on('message', msg => {\r\n      ok(msg);\r\n    });\r\n    worker.on('error', err);\r\n    worker.on('exit', code => {\r\n      if (code !== 0) {\r\n        err(new Error(`工作线程终止，code：${code}`));\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nsetImmediate(async () => {\r\n  const http = require('http');\r\n\r\n  const server = http.createServer((req, res) => {\r\n    res.end('{\"message\":\"ok\"}');\r\n  });\r\n  server.on('clientError', (err, socket) => {\r\n    socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\r\n  });\r\n  server.listen(3333);\r\n  try {\r\n    const ret = await runJSAsync(null, script);\r\n    console.log('异步运行VM2结束，运行结果：', ret);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n});\r\nlet i = 1;\r\nsetInterval(() => {\r\n  console.log('主进程其他代码--------', i++, 's');\r\n}, 1000);\r\n\r\n```\r\n\t\t","createdAt":1584930651725},{"id":3215,"originId":"5e771bee58ab6717beb7c0a6","articleId":594,"userId":718,"content":"lz 可会抓接口？  个人项目自用","createdAt":1584864238750},{"id":3216,"originId":"5e77364a58ab6717beb7c0d7","articleId":594,"userId":1428,"content":"友情提示 request 作者宣布已弃用","createdAt":1584870986231},{"id":3217,"originId":"5e76eb6858ab6717beb7c04b","articleId":596,"userId":3,"content":"![WeChat Screenshot_20200322123644.png](//static.cnodejs.org/Fq1naLB3hZbI1CRV-nutrPzeswr8)","createdAt":1584851816888},{"id":3218,"originId":"5e770b2058ab6717beb7c06d","articleId":596,"userId":1423,"content":"[@darrenliuwei](/user/darrenliuwei)  更新了，原先视频地址失效了","createdAt":1584859936595},{"id":3219,"originId":"570ca77cbc564eaf3c6a49a0","articleId":597,"userId":353,"content":"![qrcode_for_gh_ffb279ea1674_430.jpg](//static.cnodejs.org/Fp7zTIUiTIgLBcN6b-RRp7gmocTV)\r\n奇舞周刊","createdAt":1460447100856},{"id":3220,"originId":"570cad3b9bd3efeb3cdf64be","articleId":597,"userId":89,"content":"貌似就我一个Node全栈，哈哈","createdAt":1460448571869},{"id":3221,"originId":"570caea3d3220b7e4e304606","articleId":597,"userId":1430,"content":"来一个，我们是 DDFE：\r\n> 来自滴滴出行，关注前端各个领域，由滴滴各个领域的爱好分享的 FE 共同维护\r\n![qrcode_for_gh_24b9dae85adf_258.jpg](//static.cnodejs.org/FnfDVyuLql8mN8htARUqSHkonGQx)","createdAt":1460448931137},{"id":3222,"originId":"570cb85fd3220b7e4e304609","articleId":597,"userId":374,"content":"👍","createdAt":1460451423912},{"id":3223,"originId":"570cc6e0bc564eaf3c6a49bf","articleId":597,"userId":1262,"content":"[@lovevfp](/user/lovevfp) 已加上","createdAt":1460455136075},{"id":3224,"originId":"570dc97b7a3d999758a3afec","articleId":597,"userId":1262,"content":"[@yaochun](/user/yaochun) 已加上","createdAt":1460521339425},{"id":3225,"originId":"570f8531aaacd2cb71af536b","articleId":597,"userId":1430,"content":"[@JerroldLee](/user/JerroldLee)  棒棒滴~","createdAt":1460634929635},{"id":3226,"originId":"570f903c400ca111729e885b","articleId":597,"userId":125,"content":"<p>支持</p>\n","createdAt":1460637756495},{"id":3227,"originId":"5715b8270612dcfb51a20c26","articleId":597,"userId":1262,"content":"欢迎继续补充","createdAt":1461041191533},{"id":3228,"originId":"5715d9a15e5c41bb2d4db256","articleId":597,"userId":1431,"content":"有没微信群呢？","createdAt":1461049761181},{"id":3229,"originId":"571622b0877fdeb154718909","articleId":597,"userId":1430,"content":"[@kan831019](/user/kan831019) 什么类型的","createdAt":1461068464970},{"id":3230,"originId":"5716f0fa877fdeb154718948","articleId":597,"userId":111,"content":"微信支付开发调试有没有模拟器? ","createdAt":1461121274743},{"id":3231,"originId":"5717005ee84805cd5410ea5d","articleId":597,"userId":1262,"content":"[@yakczh](/user/yakczh) 微信不是有个开发者工具吗？","createdAt":1461125214113},{"id":3232,"originId":"571706305f4297955417bd8d","articleId":597,"userId":111,"content":"[@JerroldLee](/user/JerroldLee)  这个可以用来调试支付吗?","createdAt":1461126704217},{"id":3233,"originId":"581c3621e90cfbec054d768f","articleId":597,"userId":1372,"content":"前端迷\r\n![love_frontend.png](//static.cnodejs.org/FmCnz0Ev2jD1ftHUVNDNqDo-mH0S)","createdAt":1478243873894},{"id":3234,"originId":"5bbf723637a6965f590520e8","articleId":597,"userId":1432,"content":"前端指南\r\n![qrcode_for_gh_8678070efc6e_258.jpg](//static.cnodejs.org/FvHOezRAOHkpDgQeOvQl6Z6BjzqA)","createdAt":1539273270968},{"id":3235,"originId":"5cb16cd4dad66d658e408891","articleId":597,"userId":1433,"content":"前端新视界，前端干货站，公众号回复“1”领取100本前端PDF电子书\r\n![qrcode_for_gh_0e0ac579777e_1280.jpg](//static.cnodejs.org/FoLDgQKAZnTMpEJ57SqijZ5Sprdc)","createdAt":1555131604904},{"id":3236,"originId":"5e730ade58ab6717beb7ba6f","articleId":599,"userId":89,"content":"鼓励开源，先点个赞。粗扫了一眼，有几点想法，求解\r\n\r\n1）功能很强大，api设计的不是很好，还可以提升一下\r\n2）性能提升是啥原因？中间件机制自己写的么？\r\n3）src下的components没有在文档里看到咋玩的","createdAt":1584597726693},{"id":3237,"originId":"5e737af764259617c49a1eda","articleId":599,"userId":90,"content":"有点想在新项目里面用上，唯一一点可能是es7的一些东西需要学习下。还有就是中间件用order来排序，好处就是可以不按顺序写，只按照order排序，会不会到后面不好维护呢？","createdAt":1584626423414},{"id":3238,"originId":"5e742fe064259617c49a1f84","articleId":599,"userId":1434,"content":"[@i5ting](/user/i5ting) 文档还是有待加强。。。框架是按照继承的基类自动加载的，只需要在app目录下定义对应功能文件即可： https://dazejs.org/#/docs/core/autoload","createdAt":1584672736721},{"id":3239,"originId":"5e74303164259617c49a1f8a","articleId":599,"userId":1434,"content":"[@i5ting](/user/i5ting) 设计 api 方面也是最花时间的一部分了。。希望大佬指教😆","createdAt":1584672817865},{"id":3240,"originId":"5e74308158ab6717beb7bcd1","articleId":599,"userId":1434,"content":"[@jxycbjhc](/user/jxycbjhc) 默认是按照注解顺序来的，但是可以使用 [@order](/user/order)() 装饰器来自定义顺序级别，不过这个功能会在下个小版本发布","createdAt":1584672897933},{"id":3241,"originId":"5e74311c58ab6717beb7bcd9","articleId":599,"userId":1434,"content":"[@i5ting](/user/i5ting) 中间件机制是自己实现的，其实无路由的情况下和 koa 的性能差距不大，语言层面/中间件机制/响应机制都有一点关系，路由层面做了数据结构的优化，基于前缀树结构来提升寻址性能，不会因为路由数量增加而明显降低寻址性能","createdAt":1584673052442},{"id":3242,"originId":"5e74604158ab6717beb7bd47","articleId":599,"userId":89,"content":"[@czewail](/user/czewail) 那理论上和fastify一样，基于radix tree实现的","createdAt":1584685121119},{"id":3243,"originId":"5e74655164259617c49a2036","articleId":599,"userId":1434,"content":"[@i5ting](/user/i5ting) 是的，加了一些功能优化，例如内置优先级算法，全匹配路由等","createdAt":1584686417343},{"id":3244,"originId":"5e746e9e58ab6717beb7bd84","articleId":599,"userId":90,"content":"[@czewail](/user/czewail) 已经在example-order.ts里面看到了用例以及middleware下面的测试用例，我意思是如果写的时候出现了相同order如何处理？相同odrer无所谓先后？","createdAt":1584688798893},{"id":3245,"originId":"5e74726464259617c49a2073","articleId":599,"userId":1434,"content":"[@jxycbjhc](/user/jxycbjhc) 用户使用中间件一般是  `@use(middlewareClass)` ， 会按照使用的顺序进行，register 方式一般在扩展模块的时候会用的比较多","createdAt":1584689764958},{"id":3246,"originId":"5e749b0f64259617c49a2108","articleId":599,"userId":90,"content":"[@czewail](/user/czewail) 懂了。补充一下和https://www.cnblogs.com/accordion/p/10569848.html 这个有点像了。","createdAt":1584700175432},{"id":3247,"originId":"560ffcd31f6dc88c04049b19","articleId":602,"userId":1406,"content":"都没啥东西，就互粉。。。。。。github什么时候成了微博一样的东西了","createdAt":1443888339184},{"id":3248,"originId":"56108844f6ef9dc20459000d","articleId":602,"userId":567,"content":"https://github.com/\r\nhttps://jysperm.me/","createdAt":1443924036011},{"id":3249,"originId":"5610aafcf6ef9dc204590014","articleId":602,"userId":1,"content":"-. - 好歹先有料啊。\r\n\r\nhttps://github.com/xadillax","createdAt":1443932924502},{"id":3250,"originId":"5611bd7e55683b2177305da3","articleId":602,"userId":424,"content":"https://github.com/leapon\r\n58 天连续工作了","createdAt":1444003198983},{"id":3251,"originId":"5611bdb155683b2177305da5","articleId":602,"userId":424,"content":"[@xadillax](/user/xadillax) 你牛啊，211天连续工作","createdAt":1444003249097},{"id":3252,"originId":"5611c2b529ea4bf176befdf5","articleId":602,"userId":578,"content":"好了，楼上的我已经 Follow 了。\r\n相互关注，一来可以方便相互了解做的东西， 二来 很多大公司都关注应聘者  github 账户，大家相互粉下，自己的账户也有面子不是。","createdAt":1444004533772},{"id":3253,"originId":"5611c3db1e7b855577ff54a0","articleId":602,"userId":424,"content":"follow 了。不过不必拘泥 follow 人数。货好了，客就来了。","createdAt":1444004827326},{"id":3254,"originId":"5611c4b1f64593bf762658fe","articleId":602,"userId":1436,"content":"来者不拒. 不过楼主仓库里我兴趣的少我就不关注了","createdAt":1444005041519},{"id":3255,"originId":"5611c60929ea4bf176befdf6","articleId":602,"userId":578,"content":"[@jiyinyiyong](/user/jiyinyiyong) 哦，我就随便传了4个自己做的小项目，以后会多上传干货。","createdAt":1444005385547},{"id":3256,"originId":"5611ea2cf64593bf76265906","articleId":602,"userId":578,"content":"[@soliury](/user/soliury)    Github 都可以交友 ，你知道吗？（邪恶的笑声中。。。。。）","createdAt":1444014636678},{"id":3257,"originId":"56121c3429ea4bf176befe05","articleId":602,"userId":1437,"content":"要求互粉，不知啥心态，和微博不是一个档次","createdAt":1444027444461},{"id":3258,"originId":"5612361ff64593bf76265910","articleId":602,"userId":301,"content":"这是高逼格的社区，你怎么能要求互粉呢？","createdAt":1444034079608},{"id":3259,"originId":"57a996304653749872ec6f26","articleId":602,"userId":501,"content":"follow 了。不过不必拘泥 follow 人数。货好了，客就来了。","createdAt":1470731824447},{"id":3260,"originId":"57a9d8f9476898b472247d76","articleId":602,"userId":743,"content":"https://github.com/sail-sail/ejsExcel","createdAt":1470748921491},{"id":3261,"originId":"57a9dcb54653749872ec6f38","articleId":602,"userId":536,"content":"你当对方技术leader是傻么？对方也只是看你项目commit数和star数，follow数这个玩意儿，请水军帮你刷到顶，有用么？","createdAt":1470749877334},{"id":3262,"originId":"57aa0e0d4653749872ec6f4b","articleId":602,"userId":1438,"content":"https://github.com/LincolnBurrows","createdAt":1470762509548},{"id":3263,"originId":"57aa80374653749872ec6f59","articleId":602,"userId":1439,"content":"https://github.com/welefen","createdAt":1470791735862},{"id":3264,"originId":"57aaad1eba44d08f4c1cdfe5","articleId":602,"userId":1440,"content":"https://github.com/numerhero","createdAt":1470803230636},{"id":3265,"originId":"57aafb21ba44d08f4c1ce00b","articleId":602,"userId":892,"content":"https://github.com/think2011","createdAt":1470823201784},{"id":3266,"originId":"57ab1a51ba44d08f4c1ce016","articleId":602,"userId":1441,"content":"https://github.com/aedanlee","createdAt":1470831185422},{"id":3267,"originId":"57abdb0a4653749872ec6fc2","articleId":602,"userId":576,"content":"虽然我并不希望我的follow数和start数不成正比，但还是无法抗拒在此暴露一下😂\r\nhttps://github.com/JerryC8080","createdAt":1470880522485},{"id":3268,"originId":"57abe1e9476898b472247de5","articleId":602,"userId":1442,"content":"[https://github.com/huanz](https://github.com/huanz)","createdAt":1470882281036},{"id":3269,"originId":"57ad31ee9c26ea7c72260a7f","articleId":602,"userId":578,"content":"[@artisan](/user/artisan) 只是互相follow下，方便交流，你想的太多了","createdAt":1470968302344},{"id":3270,"originId":"57ad32089c26ea7c72260a81","articleId":602,"userId":578,"content":"[@cllgeek](/user/cllgeek) 只是互相follow下，方便交流","createdAt":1470968328437},{"id":3271,"originId":"57ad32109c26ea7c72260a83","articleId":602,"userId":578,"content":"[@1340641314](/user/1340641314) 只是互相follow下，方便交流","createdAt":1470968336779},{"id":3272,"originId":"57ad32554653749872ec7037","articleId":602,"userId":578,"content":"[@soliury](/user/soliury) 只是互相follow下，方便交流","createdAt":1470968405894},{"id":3273,"originId":"57ad3d8e9c26ea7c72260a8c","articleId":602,"userId":1443,"content":"学微博 刷粉吗 有意思吗","createdAt":1470971278760},{"id":3274,"originId":"57ad582eba44d08f4c1ce08e","articleId":602,"userId":1444,"content":"感觉慢慢的被人用脚本自动 follow 了","createdAt":1470978094258},{"id":3275,"originId":"57ad9d7c2e2030b1049fe28d","articleId":602,"userId":1445,"content":"哈哈 😄","createdAt":1470995836954},{"id":3276,"originId":"57ada79c4653749872ec7062","articleId":602,"userId":1271,"content":"虽然我不太喜欢互粉这种,    https://github.com/Hi-Rube  但是忍不住啊，真的忍不住啊 [https://github.com/Hi-Rube ](https://github.com/Hi-Rube )","createdAt":1470998428358},{"id":3277,"originId":"57ae90fc4653749872ec7094","articleId":602,"userId":578,"content":"[@1833183060](/user/1833183060)  哎！ 我们只是 将来方便交流，有开源项目大家都下载下来学学看看而已","createdAt":1471058172325},{"id":3278,"originId":"57aee4bc476898b472247ecd","articleId":602,"userId":1446,"content":"[@pangguoming](/user/pangguoming) 粉了就方便交流啦？  怎么方便呢？","createdAt":1471079612777},{"id":3279,"originId":"57b2ff9ce8db280a7c8650e1","articleId":602,"userId":1447,"content":"可耻的发一波github账号\r\nhttps://github.com/Kiris-tingna\r\n已关注楼主了","createdAt":1471348636232},{"id":3280,"originId":"57e944210424cced19b35caa","articleId":602,"userId":1448,"content":"这样真的好么😄\r\nhttps://github.com/pmdiano","createdAt":1474905121843},{"id":3281,"originId":"57e94a9bbb55ef3e1a17fcc7","articleId":602,"userId":1390,"content":"https://github.com/huruji\r\n无耻的发一波","createdAt":1474906779706},{"id":3282,"originId":"57e9d20bbb55ef3e1a17fcd0","articleId":602,"userId":1449,"content":"github没料或者没自己敢兴趣的料互粉了作甚？跟微博似的搞一大堆僵尸粉没必要吧~还是人以类聚，有相似开发背景的follow吧\r\n借地宣传下我的[**岛国丽人**](https://github.com/zhangjh/islandBeauty)，有兴趣的可以follow我","createdAt":1474941451039},{"id":3283,"originId":"57e9e0250424cced19b35cd0","articleId":602,"userId":1450,"content":"这样不太好吧~\r\nhttps://github.com/jwolfcn","createdAt":1474945061550},{"id":3284,"originId":"586200033692413e752df759","articleId":602,"userId":1451,"content":"web前端求互粉\r\nhttps://github.com/taoyage","createdAt":1482817539107},{"id":3285,"originId":"586204293692413e752df75d","articleId":602,"userId":1452,"content":"这样并没有什么好处,等自己上传干货了,在来社区,自然有人粉你,还有人star","createdAt":1482818601934},{"id":3286,"originId":"58620ed451aa32885d4f10da","articleId":602,"userId":434,"content":"https://github.com/open-node/","createdAt":1482821332295},{"id":3287,"originId":"5863200bddb39b4b39e08b54","articleId":602,"userId":423,"content":"https://github.com/ystyle","createdAt":1482891275896},{"id":3288,"originId":"58632292ddb39b4b39e08b57","articleId":602,"userId":1453,"content":"https://github.com/gaoxiaosong1113","createdAt":1482891922373},{"id":3289,"originId":"58646238835fe2970563e9de","articleId":602,"userId":1454,"content":"为啥这样的帖子都有？难怪现在对HR要求越来越高了","createdAt":1482973752065},{"id":3290,"originId":"586521df835fe2970563ea2a","articleId":602,"userId":863,"content":"https://github.com/leizongmin","createdAt":1483022815674},{"id":3291,"originId":"5c0b3ad215a4d545e3f4c650","articleId":602,"userId":1455,"content":"偶遇到的一个大虾写的 json-yaml-toml 等 全能转换工具  https://github.com/pytool/transfer","createdAt":1544239826565},{"id":3292,"originId":"5e742a6f58ab6717beb7bcac","articleId":602,"userId":1456,"content":"https://github.com/todaycoder001","createdAt":1584671343699},{"id":3293,"originId":"5e72c02c64259617c49a1c55","articleId":605,"userId":21,"content":"我发现很多区块链框架对js的支持度都挺高的。\r\n\r\n但都有一个问题就是无法改链的构造，只是方便基于此做APP，短期做token顶一下也还好。fabric的技术强，但长期基于此开发的人，几乎没核心技术点。\r\n","createdAt":1584578604544},{"id":3294,"originId":"5e4f388e1225c9423dcda943","articleId":606,"userId":513,"content":"值得鼓厉！加油！\r\n後面在请你分享，感谢","createdAt":1582250126436},{"id":3295,"originId":"5e538dd41225c9423dcdad1a","articleId":606,"userId":22,"content":"加油","createdAt":1582534100903},{"id":3296,"originId":"5e548bad267721420912c54d","articleId":606,"userId":1197,"content":"zf写的不比你个人写的好？\r\n就你还想收集个人信息？","createdAt":1582599085271},{"id":3297,"originId":"5e6b17c33cadb020b9160d5c","articleId":606,"userId":130,"content":"[@Solomonqoo](/user/Solomonqoo) 谢谢","createdAt":1584076739823},{"id":3298,"originId":"5e6b17cf3cadb020b9160d61","articleId":606,"userId":130,"content":"[@justjavac](/user/justjavac) 谢谢","createdAt":1584076751285},{"id":3299,"originId":"5e6b18b33cadb020b9160d68","articleId":606,"userId":130,"content":"[@ResJay](/user/ResJay) 那肯定是zf的好，但是zf的解决不了上述场景；至于收集个人信息，脑洞没这么大，谢谢。","createdAt":1584076979504},{"id":3300,"originId":"5e6d8ea223bc9e20b4e33cd6","articleId":606,"userId":1097,"content":"233333333333333333","createdAt":1584238242333},{"id":3301,"originId":"5e6d923c3cadb020b916106c","articleId":606,"userId":354,"content":"文字和输入框要是能对齐就更好了","createdAt":1584239164494},{"id":3302,"originId":"5e72bf5e64259617c49a1c4e","articleId":606,"userId":130,"content":"[@cctv1005s](/user/cctv1005s) 嗯，是的，实现有点粗糙。","createdAt":1584578398069},{"id":3303,"originId":"5e72bff264259617c49a1c52","articleId":606,"userId":130,"content":"[@siyue543241338](/user/siyue543241338) haha","createdAt":1584578546928},{"id":3304,"originId":"5e15bb2981adfe260207a7a4","articleId":607,"userId":1460,"content":"2018年10月的书额，跟现在的版本版画，却别大不大？","createdAt":1578482473596},{"id":3305,"originId":"5e16f7b881adfe260207aca3","articleId":607,"userId":1461,"content":"英语渣渣表示看不懂啊😂","createdAt":1578563512307},{"id":3306,"originId":"5e18049c1225c9423dcd7684","articleId":607,"userId":22,"content":"nodejs 发展这么快，这本是2018年的书啊","createdAt":1578632348396},{"id":3307,"originId":"5e1968bd2677214209128f4c","articleId":607,"userId":1459,"content":"[@ontheroad1992](/user/ontheroad1992) 我也是刚刚接触这个 本来想看书的 结果 只找到这一本  ","createdAt":1578723517938},{"id":3308,"originId":"5e1c306f1225c9423dcd7b48","articleId":607,"userId":701,"content":"还是看文档吧","createdAt":1578905711277},{"id":3309,"originId":"5e7224d345fcf75ee50e5049","articleId":607,"userId":490,"content":"还是看使用nest.js开发的开源项目吧\r\nGithub: https://github.com/shen100/mili","createdAt":1584538835232},{"id":3310,"originId":"5e71731045fcf75ee50e4e0c","articleId":608,"userId":22,"content":"过分了，每个月发一遍，但是3月份刚过一半，已经发第二篇了 😂","createdAt":1584493328378},{"id":3311,"originId":"5e71737045fcf75ee50e4e19","articleId":608,"userId":688,"content":"nestjs的确用起来很爽","createdAt":1584493424810},{"id":3312,"originId":"5e71956745fcf75ee50e4eba","articleId":608,"userId":545,"content":"[@justjavac](/user/justjavac)  月经那个是node.js 框架排名~\r\n这个是 nest.js 7.0 大版本发布~ 不是一个东西","createdAt":1584502119924},{"id":3313,"originId":"5e71ebd645fcf75ee50e4fde","articleId":608,"userId":109,"content":"[@justjavac](/user/justjavac) 大版本了，重要修复版本了，生日版本了，周年版本了，爆星版本了，爆流量版本了，跳蛋版本了，一个月一次怎么够啊 :D","createdAt":1584524246629},{"id":3314,"originId":"5e72084e45fcf75ee50e5018","articleId":608,"userId":1196,"content":"[@zuohuadong](/user/zuohuadong)  中文文档好久跟上","createdAt":1584531534124},{"id":3315,"originId":"5e71d64389a5c35f11e3323d","articleId":609,"userId":21,"content":"本来以为不会更新了，作者毅力真强👍","createdAt":1584518723842},{"id":3316,"originId":"5e71691889a5c35f11e33069","articleId":611,"userId":21,"content":"其实lerna link也挺方便的","createdAt":1584490776215},{"id":3317,"originId":"5e717b9e45fcf75ee50e4e43","articleId":611,"userId":301,"content":"[@zy445566](/user/zy445566) 哈哈，我试了一下，确实是可以的。看了一下，确实是创建了一个软连接。创建软连接开发的包，有时候会出现这种路径的问题。","createdAt":1584495518536},{"id":3318,"originId":"5e717bc945fcf75ee50e4e4a","articleId":611,"userId":301,"content":"原理的实现不一样，psync的策略是复制文件，而不是创建软连接。","createdAt":1584495561124},{"id":3319,"originId":"5e6eea6645fcf75ee50e4978","articleId":612,"userId":605,"content":"更新了一个版本，增加了部分资源","createdAt":1584327270773},{"id":3320,"originId":"5e6f218945fcf75ee50e4a54","articleId":612,"userId":31,"content":"还不如我这个插件好\r\n![v2-3a27890225f79d3a7ee3cb7e08e6d796_720w.jpg](//static.cnodejs.org/FjVFyIIdqcmYDoEfiYnw8Onwv1Cw)","createdAt":1584341385577},{"id":3321,"originId":"5e7039be45fcf75ee50e4c2a","articleId":612,"userId":134,"content":"已经在这个论坛里面见到 5 个以上的导航站了. 哈哈","createdAt":1584413118698},{"id":3322,"originId":"5e701f6545fcf75ee50e4bf1","articleId":613,"userId":22,"content":"一直都知道","createdAt":1584406373102},{"id":3323,"originId":"5e702f6d45fcf75ee50e4c11","articleId":613,"userId":18,"content":"我记得是题叶做的 https://www.zhihu.com/people/jiyinyiyong","createdAt":1584410477770},{"id":3324,"originId":"593a2ae6d3575f1303de3acd","articleId":615,"userId":1462,"content":"一般我自己能办到的事情，我就自己办了，比如 自己评论一下。 博主你太腻害了~~~","createdAt":1496984294075},{"id":3325,"originId":"593a3b135f5ef0e45b1b4201","articleId":615,"userId":1463,"content":"赞一下。  就冲楼主自己这评论，也要抬一手  - -    ","createdAt":1496988435905},{"id":3326,"originId":"593a3b98d3575f1303de3ad4","articleId":615,"userId":1462,"content":"[@Sily-P](/user/Sily-P) 哈哈，我只是恶搞一下了","createdAt":1496988568671},{"id":3327,"originId":"594b0325325c502917ef0cfe","articleId":615,"userId":1464,"content":"mark\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1498088229931},{"id":3328,"originId":"594b730bdc2f37a7459e5d5c","articleId":615,"userId":1465,"content":"通俗易懂  膜拜楼主","createdAt":1498116875169},{"id":3329,"originId":"594c902c642874f845d9fda2","articleId":615,"userId":1466,"content":"很棒！","createdAt":1498189868543},{"id":3330,"originId":"5959b957545d7a7b5b0b38c7","articleId":615,"userId":221,"content":"厉害！讲的很清楚.","createdAt":1499052375974},{"id":3331,"originId":"5959da35acfce9295ba07342","articleId":615,"userId":752,"content":"头皮发麻的 ++++++++++++++++++","createdAt":1499060789072},{"id":3332,"originId":"595a18ac302ae0445be7dff5","articleId":615,"userId":1467,"content":"推荐[wechat-api](https://github.com/node-webot/wechat-api),以及[co-wechat-api](https://github.com/node-webot/co-wechat-api)","createdAt":1499076780485},{"id":3333,"originId":"595affaeacfce9295ba073a0","articleId":615,"userId":1468,"content":"懂不懂是次要的重要的是我们是一群快乐的呵呵呵","createdAt":1499135918810},{"id":3334,"originId":"59c7502c242810b428f503c9","articleId":615,"userId":1469,"content":"非常有帮助，谢谢！","createdAt":1506234412444},{"id":3335,"originId":"5a092f24001f0eb571c1b05d","articleId":615,"userId":506,"content":"感谢分享","createdAt":1510551332557},{"id":3336,"originId":"5a1a7afb6190c8912ebacd75","articleId":615,"userId":1470,"content":"我想问下 ‘Node.js 启动后映射至外网’ 这个有相关的教程推荐吗？","createdAt":1511684859775},{"id":3337,"originId":"5a411601d92f2f5b185ad1f3","articleId":615,"userId":1471,"content":"楼主牛啊。\r\n不过第1章节，关于外网穿透的地方，花生壳不支持mac。后来找了另外的工具，最终实现了整个微信微信公众号的功能。\r\n赞赞赞！！！","createdAt":1514214913464},{"id":3338,"originId":"5a562c8b9288dc8153287d4f","articleId":615,"userId":1472,"content":"学习了 THX","createdAt":1515596939414},{"id":3339,"originId":"5a98b9cc543e098150cb71d1","articleId":615,"userId":1473,"content":"膜拜，之后学习下！","createdAt":1519958476950},{"id":3340,"originId":"5cd28505e333b24979ca958d","articleId":615,"userId":1474,"content":"[@SilenceHVK](/user/SilenceHVK) 感谢楼主分享, 不过图好像已经挂了","createdAt":1557300485422},{"id":3341,"originId":"5e6f5dfc89a5c35f11e32d9d","articleId":615,"userId":57,"content":"嗯嗯，帮助理清楚步骤和逻辑，谢谢","createdAt":1584356860827},{"id":3342,"originId":"5e42873e1225c9423dcd9d83","articleId":617,"userId":545,"content":"666","createdAt":1581418302639},{"id":3343,"originId":"5e42b4241225c9423dcd9dbc","articleId":617,"userId":501,"content":"golang 的域名 网站 用nest开发。。。。。","createdAt":1581429796422},{"id":3344,"originId":"5e4349d1267721420912b4f8","articleId":617,"userId":545,"content":"[@cllgeek](/user/cllgeek) 这个关注过，以前是go，但是前端有 vue ，所以 vue +go+nginx+node 部署下来很麻烦。后来他们就干脆~","createdAt":1581468113386},{"id":3345,"originId":"5e4356df1225c9423dcd9dec","articleId":617,"userId":354,"content":"首屏渲染真的太快了","createdAt":1581471455833},{"id":3346,"originId":"5e6619b023bc9e20b4e32b67","articleId":617,"userId":490,"content":"[@cllgeek](/user/cllgeek)  https://www.nodejs123.com/   \r\n这下满意了吗？😀","createdAt":1583749552237},{"id":3347,"originId":"5e668d6123bc9e20b4e32c15","articleId":617,"userId":501,"content":"[@shen100](/user/shen100) 满意","createdAt":1583779169964},{"id":3348,"originId":"5e66e3f53cadb020b91600e1","articleId":617,"userId":22,"content":"[@shen100](/user/shen100) 满意","createdAt":1583801333598},{"id":3349,"originId":"5e687df83cadb020b91607b7","articleId":617,"userId":419,"content":"掘金+简书？","createdAt":1583906296126},{"id":3350,"originId":"5e68a05023bc9e20b4e3349f","articleId":617,"userId":490,"content":"[@yuu2lee4](/user/yuu2lee4) 被你看出来了，哈哈","createdAt":1583915088085},{"id":3351,"originId":"5e699a103cadb020b9160a88","articleId":617,"userId":1477,"content":"还是把UI改了吧。\r\n这抄的太明显了。","createdAt":1583979024003},{"id":3352,"originId":"5e6e3dba3cadb020b9161132","articleId":617,"userId":1478,"content":"大佬，我的这个和你的好像，哈哈 https://github.com/maoxiaoquan/kite","createdAt":1584283066055},{"id":3353,"originId":"5e6e49333cadb020b916115a","articleId":617,"userId":490,"content":"[@maoxiaoquan](/user/maoxiaoquan)  恩，都是掘金 + 简书， 你的域名不错哦","createdAt":1584286003357},{"id":3354,"originId":"59297c649e32cc84569a747f","articleId":620,"userId":442,"content":"很详细的入门文章😉","createdAt":1495891044333},{"id":3355,"originId":"592a3f46855efbac2cf7a464","articleId":620,"userId":1462,"content":"[@szy0syz](/user/szy0syz) 谢谢","createdAt":1495940934153},{"id":3356,"originId":"592a92f6d371b6372a8afed4","articleId":620,"userId":1481,"content":"👏👏","createdAt":1495962358119},{"id":3357,"originId":"592e10b19e32cc84569a74df","articleId":620,"userId":1197,"content":"mark","createdAt":1496191153597},{"id":3358,"originId":"592e928f9e32cc84569a751f","articleId":620,"userId":218,"content":"666","createdAt":1496224399272},{"id":3359,"originId":"592e9905ba8670562a40f691","articleId":620,"userId":1482,"content":"还真是鬼畜文章","createdAt":1496226053991},{"id":3360,"originId":"592f4fe0855efbac2cf7a530","articleId":620,"userId":550,"content":"直接用node-wechat就可以了，不用自己造轮子\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1496272864182},{"id":3361,"originId":"592f69e8d371b6372a8aff7f","articleId":620,"userId":354,"content":"试用花生壳应该只是调试用吧，内网穿透的话一关机就没了。\r\n其实自己买一个服务器做反向代理也是ok的呀。","createdAt":1496279528575},{"id":3362,"originId":"592f6c029e32cc84569a753f","articleId":620,"userId":1462,"content":"[@bendise](/user/bendise) 并不是重复造轮子哦，我通过使用 node.js 去实战。如果全部都用别人做好的包的话，学习的也就只是别人的思想，并没有自己的理解","createdAt":1496280066993},{"id":3363,"originId":"592f6c769e32cc84569a7541","articleId":620,"userId":1462,"content":"[@cctv1005s](/user/cctv1005s) 是的，在文章中我也说到了，大家可以随意","createdAt":1496280182524},{"id":3364,"originId":"592f91742cace39d0de58ad9","articleId":620,"userId":1483,"content":"666 mark一下","createdAt":1496289652909},{"id":3365,"originId":"592ffb121e7e75f60c1ad839","articleId":620,"userId":1484,"content":"可以啊","createdAt":1496316690211},{"id":3366,"originId":"593030e42cace39d0de58b26","articleId":620,"userId":1215,"content":"确实是又造一个 wechat 的轮子，还有 post 请求要处理呢。","createdAt":1496330468899},{"id":3367,"originId":"5930dc6b9a99de3b489289a2","articleId":620,"userId":1485,"content":"必须mark一下！","createdAt":1496374379702},{"id":3368,"originId":"59311d179a99de3b489289c1","articleId":620,"userId":1486,"content":"thanks, mark~","createdAt":1496390935828},{"id":3369,"originId":"5931224564c9781e4812c93a","articleId":620,"userId":1487,"content":"第一次知道有内网映射到外网的软件，多谢；\r\n当初请求微信数据的时候，接受异步数据，每次都在外网上搞，烦的不行...","createdAt":1496392261955},{"id":3370,"originId":"593158bd073aa90148d8c366","articleId":620,"userId":537,"content":"mark,暑假研究研究微信相关的东西","createdAt":1496406205475},{"id":3371,"originId":"5936ca1969912fcf6b3cca6a","articleId":620,"userId":359,"content":"我想问下大神，VS Code怎么搞代码自动补全啊","createdAt":1496762905736},{"id":3372,"originId":"593754ef538dbcaa6bc7dd9f","articleId":620,"userId":1462,"content":"[@tangchi695](/user/tangchi695) VS Code 上有相应的扩展插件，比如 Node.js 我用的是 node-readme ( ext install vscode-node-readme )，更多的扩展插件可以访问 VS Code 官网 https://marketplace.visualstudio.com/vscode","createdAt":1496798447599},{"id":3373,"originId":"5945398d9079357b642b28b2","articleId":620,"userId":221,"content":"赞， 正好公司要开发公众号项目","createdAt":1497708941542},{"id":3374,"originId":"5945c489ff5813233faad98e","articleId":620,"userId":1488,"content":"好文，这个得赞一下! 希望继续装下去!!!","createdAt":1497744521558},{"id":3375,"originId":"595bb2ea302ae0445be7e06e","articleId":620,"userId":1489,"content":"配图给满分","createdAt":1499181802259},{"id":3376,"originId":"59bdedfad7cbefc51196445f","articleId":620,"userId":419,"content":"wechat填一个假的地址 然后手机 电脑同一个局域网。。。charles代理到本地服务器估计也可以吧？","createdAt":1505619450200},{"id":3377,"originId":"5b8c09636b99407c37aff395","articleId":620,"userId":1490,"content":"图片为啥都挂了？","createdAt":1535904099389},{"id":3378,"originId":"5e6e08cd3cadb020b91610bf","articleId":620,"userId":57,"content":"token验证一直失败，是需要服务器ICP备案吗？","createdAt":1584269517557},{"id":3379,"originId":"5e6e10aa23bc9e20b4e33d47","articleId":620,"userId":57,"content":"终于验证成功了","createdAt":1584271530343},{"id":3380,"originId":"5e155ea981adfe260207a5e0","articleId":622,"userId":79,"content":"![image.png](//static.cnodejs.org/Fm7thpV8TL3G_oK8x9vtnOMQ8pnw), 当时看了技术场直播","createdAt":1578458793309},{"id":3381,"originId":"5e16bcd34bea432607fcdafd","articleId":622,"userId":1410,"content":"一直以为 [@atian25](/user/atian25) 天猪是个小胖子","createdAt":1578548435255},{"id":3382,"originId":"5e16c5fb81adfe260207aa62","articleId":622,"userId":358,"content":"[@iyuq](/user/iyuq) 我的段位比 苏千 弱太多了","createdAt":1578550779663},{"id":3383,"originId":"5e17f5912677214209128d77","articleId":622,"userId":615,"content":"[@iyuq](/user/iyuq) 没想到是个精神小伙","createdAt":1578628497973},{"id":3384,"originId":"5e1a81212677214209128fe4","articleId":622,"userId":383,"content":"那个主持人小姐姐有点萌到我。。","createdAt":1578795297484},{"id":3385,"originId":"5e203c4f1225c9423dcd85a9","articleId":622,"userId":1493,"content":"名堂多","createdAt":1579170895689},{"id":3386,"originId":"5e6c965a23bc9e20b4e33c14","articleId":622,"userId":1494,"content":"长见识","createdAt":1584174682158},{"id":3387,"originId":"5e5a6e4ba72b853f1004523d","articleId":626,"userId":1123,"content":"1","createdAt":1582984779373},{"id":3388,"originId":"5e5fb380a72b853f10045aac","articleId":626,"userId":501,"content":"是时候推荐一波我用nodejs开发的学习平台了，\r\n1. [DOM探索之基础详解篇](https://www.geekjc.com/ebook/detail/5bb9b9f3e132926e1b268ec0/init)\r\n2. [React 模式](https://www.geekjc.com/ebook/detail/5bae0c10ddb4f437ecfdc708/init)\r\n3. [前端常见面试题汇总](https://www.geekjc.com/ebook/detail/5ba5bcae7143880b09cb4d54/init)","createdAt":1583330176385},{"id":3389,"originId":"5e65a81f3cadb020b915fe9a","articleId":627,"userId":89,"content":"挺好的，思路没问题的，加油！","createdAt":1583720479842},{"id":3390,"originId":"5e67332f23bc9e20b4e32dec","articleId":627,"userId":109,"content":"搞通顺就好了,再加上 ts 就更好了.","createdAt":1583821615803},{"id":3391,"originId":"5e679ccf3cadb020b91605e7","articleId":627,"userId":1496,"content":"[@i5ting](/user/i5ting) 多谢狼叔的鼓励","createdAt":1583848655342},{"id":3392,"originId":"5e679d7223bc9e20b4e331ec","articleId":627,"userId":1496,"content":"[@waitingsong](/user/waitingsong) 嗯，TS挺好的，我也期待，在我们内部框架改造的计划中","createdAt":1583848818585},{"id":3393,"originId":"5e698eab3cadb020b9160a53","articleId":627,"userId":109,"content":"[@coolliyong](/user/coolliyong) 我使用下来感觉 midway 挺不错的对ts的支持挺好，v2马上就出了并且支持fass，值得尝试。如果有精力也可尝试下 nest.js","createdAt":1583976107215},{"id":3394,"originId":"5e68b63a23bc9e20b4e33585","articleId":629,"userId":1497,"content":"更新了一把挂掉的图片。。捞自己一把。。","createdAt":1583920698177},{"id":3395,"originId":"5b14be245cd02be64090113f","articleId":631,"userId":59,"content":"第一次知道 https://nodebb.org/ 还有 node 版本，但是访问不了网站。\r\n缺少游戏类～","createdAt":1528086052998},{"id":3396,"originId":"5b190b5f29e6e510415b2907","articleId":631,"userId":1212,"content":"mark","createdAt":1528367967252},{"id":3397,"originId":"5e663ad923bc9e20b4e32ba2","articleId":631,"userId":490,"content":"自推下，使用typescript、vue、nodejs、nestjs、typeorm等技术开发的\r\nGithub: https://github.com/shen100/mili\r\n网址: https://www.nodejs123.com/","createdAt":1583758041740},{"id":3398,"originId":"5e662ee523bc9e20b4e32b88","articleId":632,"userId":490,"content":"一个使用TypeORM开发的开源社区系统\r\nGithub: https://github.com/shen100/mili\r\n网址: https://www.nodejs123.com\r\n","createdAt":1583754981135},{"id":3399,"originId":"5e65d7b423bc9e20b4e32a7e","articleId":634,"userId":21,"content":"好久没发技术文章了，这篇已经算是十分精简加白话理解区块链了吧","createdAt":1583732660135},{"id":3400,"originId":"5e65ecf23cadb020b915ff34","articleId":634,"userId":1500,"content":"[@zy445566](/user/zy445566) 老哥，我给你github上的qq邮箱发了个邮件，麻烦查收下","createdAt":1583738098277},{"id":3401,"originId":"5e65ee3023bc9e20b4e32acb","articleId":634,"userId":21,"content":"[@peze](/user/peze) 收到了，感谢\r\n","createdAt":1583738416019},{"id":3402,"originId":"5e6210f623bc9e20b4e326fc","articleId":636,"userId":1501,"content":"赞赞","createdAt":1583485174537},{"id":3403,"originId":"5e5d04edb5a36940fe1ce8f1","articleId":637,"userId":421,"content":"[@alsotang](/user/alsotang) 能上个友情链接吗","createdAt":1583154413461},{"id":3404,"originId":"5e5f0e11a72b853f10045900","articleId":637,"userId":18,"content":"[@heixiaoshan](/user/heixiaoshan) 我们只跟同等量级的社区互联","createdAt":1583287825678},{"id":3405,"originId":"5e5fcb31a72b853f10045ad8","articleId":637,"userId":90,"content":"[@heixiaoshan](/user/heixiaoshan) 你网站的PR太低了，跨级交换链接怎么可能。。。 唯一的渠道付费购买，还有就是你的关键词得用cnode","createdAt":1583336241217},{"id":3406,"originId":"5e60949c3cadb020b915f83f","articleId":637,"userId":421,"content":"[@alsotang](/user/alsotang) 额，好的吧，哈哈哈","createdAt":1583387804006},{"id":3407,"originId":"5e6094ab23bc9e20b4e3242c","articleId":637,"userId":421,"content":"[@jxycbjhc](/user/jxycbjhc) pr这个需要时间。哈哈哈","createdAt":1583387819598},{"id":3408,"originId":"5e60b68023bc9e20b4e3249e","articleId":637,"userId":90,"content":"[@heixiaoshan](/user/heixiaoshan) 时间也能用钱买的。。。不然谁要狗一波加班呢。","createdAt":1583396480509},{"id":3409,"originId":"5e61fcac3cadb020b915fb04","articleId":637,"userId":421,"content":"[@jxycbjhc](/user/jxycbjhc) 有道理，哈哈哈","createdAt":1583479980948},{"id":3410,"originId":"5e61fcec3cadb020b915fb09","articleId":637,"userId":421,"content":"欢迎大家提供留言进行收录。最好附带上网址。","createdAt":1583480044933},{"id":3411,"originId":"5e5348eb1225c9423dcdac9c","articleId":638,"userId":22,"content":"贬值太快了，我领了你的2倍","createdAt":1582516459325},{"id":3412,"originId":"5e5614c81225c9423dcdb029","articleId":638,"userId":1100,"content":"[@justjavac](/user/justjavac) 是啊，哈哈，越往后越少","createdAt":1582699720931},{"id":3413,"originId":"5e5724761225c9423dcdb17b","articleId":638,"userId":18,"content":"[@justjavac](/user/justjavac) 我一直没卖。。看来失误了","createdAt":1582769270172},{"id":3414,"originId":"5e572bd8267721420912c903","articleId":638,"userId":22,"content":"[@alsotang](/user/alsotang) 我领了6K，上周发了篇文章，读者纷纷留言说领到了2K+。前几天微信把我的文章删了，说是违反了公众号的规范","createdAt":1582771160492},{"id":3415,"originId":"5e57913a267721420912c9c9","articleId":638,"userId":1502,"content":"行情波动，下午2-4点左右可兑换价值最高","createdAt":1582797114043},{"id":3416,"originId":"5e587e3d267721420912caab","articleId":638,"userId":18,"content":"[@justjavac](/user/justjavac) 我领了接近5k","createdAt":1582857789228},{"id":3417,"originId":"5e5dc25ea72b853f10045657","articleId":638,"userId":419,"content":"没有传过ssh key 哎","createdAt":1583202910814},{"id":3418,"originId":"5e60693823bc9e20b4e323ac","articleId":638,"userId":59,"content":"难受啊，ssh key 被覆盖","createdAt":1583376696801},{"id":3419,"originId":"5e5f269cb5a36940fe1cec2f","articleId":641,"userId":1424,"content":"https://imweb.io/topic/582293894067ce9726778be9   \r\n\r\nhttps://www.zhihu.com/question/56820346  寸志 的回答\r\n疑问彻底解决","createdAt":1583294108210},{"id":3420,"originId":"5e5dd8b1a72b853f100456b3","articleId":642,"userId":1104,"content":"已star，新项目考虑用一波","createdAt":1583208625685},{"id":3421,"originId":"5e5e87dda72b853f1004586e","articleId":642,"userId":1504,"content":"已star","createdAt":1583253469532},{"id":3422,"originId":"5e5b649fa72b853f10045338","articleId":644,"userId":1506,"content":"你这是中间商赚个差价？拿私钥获取到的 BTC ，现在卖了差不多值个4000吧","createdAt":1583047839987},{"id":3423,"originId":"5e5b76d6b5a36940fe1ce669","articleId":644,"userId":1505,"content":"[@Vdan123](/user/Vdan123) 我打算赚个10块钱红包就OK了，不过发现没人满足条件呀","createdAt":1583052502592},{"id":3424,"originId":"5e5cc10ca72b853f10045551","articleId":644,"userId":1507,"content":"太黑了吧,我领的时候值5000","createdAt":1583137036988},{"id":3425,"originId":"5e5dc493a72b853f10045661","articleId":644,"userId":1478,"content":"你这中间商有点黑啊，差价赚三四千","createdAt":1583203475931},{"id":3426,"originId":"5e538d3c1225c9423dcdad13","articleId":650,"userId":89,"content":"多发点内容。好东西，也怕被埋没的","createdAt":1582533948374},{"id":3427,"originId":"5e53b2af1225c9423dcdad69","articleId":650,"userId":40,"content":"[@i5ting](/user/i5ting) 好的，狼叔","createdAt":1582543535274},{"id":3428,"originId":"5e58bdbe1225c9423dcdb41a","articleId":650,"userId":99,"content":"厉害","createdAt":1582874046428},{"id":3429,"originId":"57ae7ce84653749872ec7084","articleId":652,"userId":89,"content":"写的挺好，继续加油","createdAt":1471053032675},{"id":3430,"originId":"57af1bfb4653749872ec70ae","articleId":652,"userId":1511,"content":"学习了","createdAt":1471093755879},{"id":3431,"originId":"57b129c5144011da12ff41a5","articleId":652,"userId":1510,"content":"[@i5ting](/user/i5ting) 加油","createdAt":1471228357416},{"id":3432,"originId":"58b00cdfe418a986315f38c1","articleId":652,"userId":1512,"content":"学习了","createdAt":1487932639503},{"id":3433,"originId":"58b136a7ea21217a4486cd53","articleId":652,"userId":482,"content":"mark","createdAt":1488008871892},{"id":3434,"originId":"58c6541606dbd608756d0d03","articleId":652,"userId":939,"content":"mark","createdAt":1489392662496},{"id":3435,"originId":"58ca53667dee71e5193a53a6","articleId":652,"userId":796,"content":"不知道楼主有没有注意到[文档](https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_options_detached)中这一部分内容\r\n\r\n>When using the detached option to start a long-running process, the process will not stay running in the background after the parent exits unless it is provided with a stdio configuration that is not connected to the parent. If the parent's stdio is inherited, the child will remain attached to the controlling terminal.\r\n\r\n所以官网的 demo 是这样子写的，感觉这样子会好一些。声明：这个也是要感谢 [@XadillaX](/user/XadillaX) 的提醒才注意到的\r\n\r\n```\r\nconst spawn = require('child_process').spawn;\r\n\r\nconst child = spawn(process.argv[0], ['child_program.js'], {\r\n  detached: true,\r\n  stdio: 'ignore'\r\n});\r\n\r\nchild.unref();\r\n```\r\n","createdAt":1489654630805},{"id":3436,"originId":"58ca6b8f246a2aeb194a5455","articleId":652,"userId":347,"content":"不错","createdAt":1489660815980},{"id":3437,"originId":"58dce6e9b3e60b982d089d47","articleId":652,"userId":1513,"content":"学习了\r\n","createdAt":1490872041396},{"id":3438,"originId":"58dce9936f8b9bf02d1d0c64","articleId":652,"userId":1513,"content":"[@DuanPengfei](/user/DuanPengfei)  赞一个，更完整","createdAt":1490872723774},{"id":3439,"originId":"59357fc6538dbcaa6bc7dd07","articleId":652,"userId":579,"content":"good","createdAt":1496678342845},{"id":3440,"originId":"5d0317fc1fe902120f31ee08","articleId":652,"userId":1514,"content":"[@i5ting](/user/i5ting) 狼叔 好","createdAt":1560483836016},{"id":3441,"originId":"5da3ee9dece3813ad9ba1892","articleId":652,"userId":150,"content":"赞一个","createdAt":1571024541352},{"id":3442,"originId":"5e5882591225c9423dcdb36d","articleId":652,"userId":40,"content":"赞一个","createdAt":1582858841380},{"id":3443,"originId":"5e395211267721420912ae95","articleId":654,"userId":21,"content":"东西看起来不错","createdAt":1580814865201},{"id":3444,"originId":"5e3a97781225c9423dcd97ff","articleId":654,"userId":1460,"content":"学习成本不知道高不高了？","createdAt":1580898168046},{"id":3445,"originId":"5e44b6e71225c9423dcd9f40","articleId":654,"userId":545,"content":"跟 React  next.js 相比的优势呢？\r\nvue 也有个对应的 nuxt.js","createdAt":1581561575929},{"id":3446,"originId":"5e44c0ae267721420912b669","articleId":654,"userId":1093,"content":"“ SSR 在性能上完胜 CSR”这个结论得出不合理啊。SSR消耗的是服务器性能，你却要用客户端性能来跟csr比。这没有比较的意义。实际上，使用SSR，会极大地增加服务端的性能成本开销。\r\n","createdAt":1581564078363},{"id":3447,"originId":"5e44c10c1225c9423dcd9f4c","articleId":654,"userId":1093,"content":"SSR目前来看最大的优势在于SEO，以及加快复杂页面的首页打开速度。其他方面的优势不明显，几乎可以忽略。同时会增加各方面的成本，例如人力开发成本，服务器消耗成本，等等。这些注定了它只能成为小众，因为它带来的性价比太低了。","createdAt":1581564172642},{"id":3448,"originId":"5e454d511225c9423dcda01c","articleId":654,"userId":89,"content":"[@star7th](/user/star7th) 你了解一下ssr和csr中间的过程的。广义ssr泛指有server接入的渲染，csr和ssr共5个分级。页面里服务器渲染和客户端渲染比例是可以控制的。\r\n\r\n- 服务器成本增加，有，但多少是可以控制的。\r\n- 开发成本增加，有，但在框架层面是可以控制的。\r\n\r\n它不会小众的，性价比非常高的。ssr难点是1）比例控制，2）缓存的应用。用不好确实会非常难受。很多4core8g的机器50qps的事故。\r\n\r\n开发成本上，可以统一写法的。\r\n\r\n在写法上统一csr和ssr，采用next类似的静态的getInitialProps作为数据获取方法\r\n\r\n```\r\nfunction Page(props) {\r\n  return <div> {props.name} </div>\r\n}\r\n\r\nPage.getInitialProps = async (ctx) => {\r\n  return Promise.resolve({\r\n    name: 'Egg + React + SSR'\r\n  })\r\n}\r\n\r\nexport default Page\r\n```\r\n\r\n参见 https://github.com/ykfe/egg-react-ssr\r\n","createdAt":1581600081893},{"id":3449,"originId":"5e4767b1267721420912b874","articleId":654,"userId":110,"content":"和next比真的有优势？","createdAt":1581737905715},{"id":3450,"originId":"5e551cf4267721420912c676","articleId":654,"userId":1515,"content":"[@zuohuadong](/user/zuohuadong)  \r\n和 React 、 Vue 的解决方案相比，渲染性能是主要的优势，目前是 6x React 的优势；\r\n附加的一个点，是 Rax 应用的跨端投放能力，比如同时可以被投放到 小程序。","createdAt":1582636276778},{"id":3451,"originId":"5e551d37267721420912c67a","articleId":654,"userId":1515,"content":"[@ontheroad1992](/user/ontheroad1992) Rax 是遵循 React 标准的，所以如果熟悉  React 的同学，应该不会有太高的学习成本","createdAt":1582636343442},{"id":3452,"originId":"5e5526011225c9423dcdaf47","articleId":654,"userId":1515,"content":"[@star7th](/user/star7th)  是的，是否需要投入 SSR，需要根据实际的业务场景来评估 `成本的增加和带来的收益` 是否值得。\r\n\r\n不可否认现在仍然有大量的用户因为网络环境或设备情况，在访问 Web 页面的时候无法达到很好的体验，在无线端这个比例可能是 30% 甚至更多，如果需要提升这部分用户的体验，那么 SSR 就是一种很好的方式。\r\n\r\n目前 Rax 的在做的事情，就是希望把 SSR 的开发维护成本尽可能的降下来，使它的使用门槛不再那么高。另外，我们也正在尝试的是如何提供个性化的按需 SSR 的方案。","createdAt":1582638593427},{"id":3453,"originId":"5e586a4f267721420912ca64","articleId":654,"userId":301,"content":"[@chenjun1011](/user/chenjun1011) 我们公司也打算搞一套Vue的SSR框架，可以渐进式使用。最大的特点是特别符号微前端的这种开发理念。比如将一个页面的公共部分和中间部分，拆分到不同的服务上，由需要的服务，对SSR进行聚合","createdAt":1582852687194},{"id":3454,"originId":"5e550e3f1225c9423dcdaf26","articleId":655,"userId":89,"content":"remax是好东西，2019年年度最佳\r\n\r\n\r\n这个小程序里广告太多了","createdAt":1582632511161},{"id":3455,"originId":"5e5614d3267721420912c76f","articleId":655,"userId":1104,"content":"[@i5ting](/user/i5ting) demo工程，想着没啥人用。。。我把广告下了。","createdAt":1582699731293},{"id":3456,"originId":"5e5714ef267721420912c8c4","articleId":655,"userId":26,"content":"关注","createdAt":1582765295003},{"id":3457,"originId":"5e4bbec41225c9423dcda591","articleId":656,"userId":3,"content":"![捕获.PNG](//static.cnodejs.org/FosVjUMMcYp-VG7Td0TUrzxRTSle)\r\n楼主的图挂了。。","createdAt":1582022340013},{"id":3458,"originId":"5e4caa971225c9423dcda674","articleId":656,"userId":22,"content":"看了眼 TypeScript 的使用","createdAt":1582082711449},{"id":3459,"originId":"5e4cb7641225c9423dcda689","articleId":656,"userId":1517,"content":"学习了 TypeScript 的使用","createdAt":1582085988878},{"id":3460,"originId":"5e53b99e1225c9423dcdad7e","articleId":656,"userId":1518,"content":"都用nuxt了，首页怎么还异步加载数据呢？","createdAt":1582545310692},{"id":3461,"originId":"5ae991c302591040485baa07","articleId":657,"userId":1520,"content":"力拔山兮气盖世， 时不利兮骓不逝，阿7，我们走","createdAt":1525256643234},{"id":3462,"originId":"5d2568fa71951f750ccb9ff3","articleId":657,"userId":1521,"content":"那两个进程之间通过管道通信，发送数据的时候是同步发送还是异步的？我是win10,进程之间需要发送中等大小的文件，发送的时候主进程会不会阻塞呢","createdAt":1562732794507},{"id":3463,"originId":"5e5251361225c9423dcdabe0","articleId":657,"userId":40,"content":"大佬的 IPC 通道分享在哪里呀？","createdAt":1582453046835},{"id":3464,"originId":"5dfc771aba8f6d46c4ede5e0","articleId":658,"userId":1523,"content":"非常不错，谢谢大佬","createdAt":1576826650330},{"id":3465,"originId":"5dfc8ccb0696c446bf64f5cf","articleId":658,"userId":1524,"content":"**有Vue3.0的源码解析嘛**","createdAt":1576832203893},{"id":3466,"originId":"5dfc92380696c446bf64f5f6","articleId":658,"userId":879,"content":"👍","createdAt":1576833592787},{"id":3467,"originId":"5dfc9ac6ba8f6d46c4ede6e1","articleId":658,"userId":1098,"content":"[@gethin94](/user/gethin94) Vue3.0目前还只是alpha 状态，等彻底发布了再说吧，写作真的是太耗费精力了，233~","createdAt":1576835782056},{"id":3468,"originId":"5e044fedba8f6d46c4edf3e8","articleId":658,"userId":20,"content":"赞","createdAt":1577340909344},{"id":3469,"originId":"5e0ea84881adfe2602079a95","articleId":658,"userId":1098,"content":"赞","createdAt":1578018888816},{"id":3470,"originId":"5e1fe0292677214209129a6e","articleId":658,"userId":1098,"content":"赞","createdAt":1579147305471},{"id":3471,"originId":"5e50a49d267721420912c16e","articleId":658,"userId":1098,"content":"赞","createdAt":1582343325105},{"id":3472,"originId":"5e4f6108267721420912c03a","articleId":659,"userId":3,"content":"楼主在egg.js里用了typescript？","createdAt":1582260488391},{"id":3473,"originId":"5e4f9129267721420912c0a1","articleId":659,"userId":1086,"content":"[@darrenliuwei](/user/darrenliuwei) 嗯","createdAt":1582272809653},{"id":3474,"originId":"5d6f7062a7474a231a588c53","articleId":660,"userId":1525,"content":"好书，顶一个","createdAt":1567584354934},{"id":3475,"originId":"5d75ca24a7474a231a58a25d","articleId":660,"userId":1526,"content":"第一时间买一本","createdAt":1568000548041},{"id":3476,"originId":"5d79b12ed50f572345913d17","articleId":660,"userId":1527,"content":"好书，弱弱的问一句怎么没有在当当或京东上销售咧？","createdAt":1568256302921},{"id":3477,"originId":"5d79f7aed50f572345913e3d","articleId":660,"userId":755,"content":"能不能上架kindle呢, 实体书占地啊","createdAt":1568274350267},{"id":3478,"originId":"5d7eeb22a500d514da655865","articleId":660,"userId":852,"content":"[@yaolynzc](/user/yaolynzc) 京东有卖了：https://item.jd.com/54794149706.html","createdAt":1568598818161},{"id":3479,"originId":"5d82e5ae95464514f7ed801c","articleId":660,"userId":852,"content":"[@yinxin630](/user/yinxin630) 纸书先出，以后会上Kindle。","createdAt":1568859566560},{"id":3480,"originId":"5d88248e95464514f7ed9191","articleId":660,"userId":796,"content":"👍kindle 出来就方便了，坐等。","createdAt":1569203342356},{"id":3481,"originId":"5d88e3d853c75a4136b4cfce","articleId":660,"userId":755,"content":"[@sean-xu](/user/sean-xu) 期待哈, 到时候一定支持一波","createdAt":1569252312615},{"id":3482,"originId":"5d8da17888dc043ab1b68bde","articleId":660,"userId":852,"content":"[@yinxin630](/user/yinxin630) 谢谢支持：）","createdAt":1569563000635},{"id":3483,"originId":"5d9c38d3ece3813ad9ba0688","articleId":660,"userId":1528,"content":"试读了部分章节，语言通俗易懂，内容循序渐进，正好是我需要的","createdAt":1570519251921},{"id":3484,"originId":"5da13741865a9844a301ac04","articleId":660,"userId":852,"content":"[@chainlll](/user/chainlll) 谢谢：）","createdAt":1570846529684},{"id":3485,"originId":"5dbe1fa3865a9844a301f793","articleId":660,"userId":1529,"content":"来啦~买到书啦！对于一个产品经理，也喜欢看这样的书。虽然不能从代码上亲近程序员，但是从思维上亲近程序员，也是不错的选择吧~~","createdAt":1572741027579},{"id":3486,"originId":"5e14176c4bea432607fcd416","articleId":660,"userId":852,"content":"短片，一分钟了解《架构师修炼之道》讲什么： https://weibo.com/tv/v/Ijn5ucvek?fid=1034:4446167681925145","createdAt":1578375020220},{"id":3487,"originId":"5e4f35d31225c9423dcda931","articleId":660,"userId":513,"content":"昨天买了","createdAt":1582249427588},{"id":3488,"originId":"5e4d2621267721420912bdf0","articleId":661,"userId":18,"content":"题目叫 dom事件流 比较合适。","createdAt":1582114337046},{"id":3489,"originId":"5e4266f8267721420912b46b","articleId":667,"userId":829,"content":"大赞","createdAt":1581410040138},{"id":3490,"originId":"5e44edaa267721420912b695","articleId":667,"userId":11,"content":"赞","createdAt":1581575594596},{"id":3491,"originId":"5e4813a2267721420912b92e","articleId":667,"userId":688,"content":"mark","createdAt":1581781922112},{"id":3492,"originId":"5d4c0888697873456c6bbffa","articleId":668,"userId":605,"content":"datatables下篇文章也更新了，地址在：\r\n\r\n[前端插件之Datatables使用--下篇](https://ops-coffee.cn/s/5dZx6HrPE1Y4rdxqHTYN-g)","createdAt":1565264008148},{"id":3493,"originId":"5e4509ce1225c9423dcd9fb6","articleId":668,"userId":605,"content":"又更新了一篇，ace编辑器的：\r\n\r\n[最好用的web端代码文本编辑器ACE](https://mp.weixin.qq.com/s/TcQxURGPPzlOYPGGyAJRhw)","createdAt":1581582798142},{"id":3494,"originId":"5a55c0d2a3692d014f4f137b","articleId":671,"userId":1533,"content":"**I am hired for people to profile their fantasies, their deep dark fantasies**","createdAt":1515569362159},{"id":3495,"originId":"5a55d45bafa0a121784a8aee","articleId":671,"userId":1534,"content":"ts-express-decorators 这个感觉如何， 楼主有用过吗","createdAt":1515574363803},{"id":3496,"originId":"5a55e7a39d371d4a059ee9c9","articleId":671,"userId":1532,"content":"[@laof](/user/laof) 没用过，看了一下，有点类似，装饰器或者OOP都大同小异，关键还是要看代码设计","createdAt":1515579299692},{"id":3497,"originId":"5a55e7fc9288dc8153287d48","articleId":671,"userId":1532,"content":"[@YUFENGWANG](/user/YUFENGWANG) what does the \"dark fantasies\" mean?","createdAt":1515579388166},{"id":3498,"originId":"5a56cdd1a3692d014f4f13ad","articleId":671,"userId":1535,"content":"感觉定位有点和eggjs类似啊.","createdAt":1515638225186},{"id":3499,"originId":"5a56dd3fafa0a121784a8b0b","articleId":671,"userId":1532,"content":"[@leemove](/user/leemove) egg也是想做类似的事情，但是手法不对，跑偏了，越来越臃肿","createdAt":1515642175902},{"id":3500,"originId":"5a587182afa0a121784a8b67","articleId":671,"userId":1536,"content":"Next.js nest.js nuxt.js 晕的不行","createdAt":1515745666109},{"id":3501,"originId":"5a5884f59d371d4a059eea75","articleId":671,"userId":1532,"content":"[@yangjaixi](/user/yangjaixi) 傻傻分不清楚，哈哈","createdAt":1515750645481},{"id":3502,"originId":"5bdc278621d75b74609f348e","articleId":671,"userId":501,"content":"准备学习 nest了，现在正在写nest学习之路 系列文章","createdAt":1541154694361},{"id":3503,"originId":"5bdd0c66646a05745b7b7bca","articleId":671,"userId":887,"content":"nest.js的推荐配置文件、使用构造注入的方式不喜欢，可以期待下这个https://github.com/midwayjs/midway","createdAt":1541213286868},{"id":3504,"originId":"5bdd27d421d75b74609f36a2","articleId":671,"userId":545,"content":"[@brucecodezone](/user/brucecodezone)  nest.js现在比较成熟了，而且国外用的也不少，https://github.com/nestjs/nest/wiki/Roadmap  作者在路线图里也有计划解决这些问题。\r\nnestjs  马上破万 star 了~  看6.0 怎么解决之前的坑了","createdAt":1541220308496},{"id":3505,"originId":"5bdee27e646a05745b7b8068","articleId":671,"userId":887,"content":"[@zuohuadong](/user/zuohuadong) 是的，个人目前ts+koa+typeorm,感觉也是很不错的","createdAt":1541333630160},{"id":3506,"originId":"5bdf927721d75b74609f3b88","articleId":671,"userId":1097,"content":"国内资料还是太少 比不上有阿里踩坑。。。。\r\n\r\n**。。。话说用这东西为什么不上java呢。。。。。**","createdAt":1541378679228},{"id":3507,"originId":"5bdfa58e21d75b74609f3ca1","articleId":671,"userId":545,"content":"[@siyue543241338](/user/siyue543241338) \r\n1. 最起码一点，提交issues 有人认真回复。\r\n2. 能用 js 实现同样的事情（节省成本），为什么要 java ？  阿里也出了类似的midway","createdAt":1541383566572},{"id":3508,"originId":"5bdfa86821d75b74609f3ce2","articleId":671,"userId":490,"content":"golang123之前用golang开发的，目前正在使用nest.js来重构\r\n网址: https://www.golang123.com/\r\ngithub: https://github.com/shen100/golang123","createdAt":1541384296099},{"id":3509,"originId":"5bdfac0c646a05745b7b82dd","articleId":671,"userId":545,"content":"[@shen100](/user/shen100) 6666  这操作～","createdAt":1541385228073},{"id":3510,"originId":"5be551d521d75b74609f5df8","articleId":671,"userId":109,"content":"为啥 google 不整个框架呢","createdAt":1541755349446},{"id":3511,"originId":"5be6910c646a05745b7ba6e9","articleId":671,"userId":1537,"content":"我也觉得用法和spring差不多的话为何不直接java。好多东西不用java那套实现起来其实优雅的多\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1541837068647},{"id":3512,"originId":"5be77dff646a05745b7ba813","articleId":671,"userId":383,"content":"嘛，不是我的菜。。对我来说koa或者beego就够了","createdAt":1541897727629},{"id":3513,"originId":"5be7a47f21d75b74609f6204","articleId":671,"userId":545,"content":"[@liuzhiguo11](/user/liuzhiguo11) 相对来说成本低。\r\n而且目前来看，这种还是趋势，比如php 的 laravel ， golang 的 irls","createdAt":1541907583898},{"id":3514,"originId":"5be7a4bb21d75b74609f620b","articleId":671,"userId":545,"content":"[@vanishcode](/user/vanishcode) 项目业务复杂点的话，你这俩搞起来太费劲，尤其是团队协作","createdAt":1541907643891},{"id":3515,"originId":"5be7a5f3646a05745b7ba87f","articleId":671,"userId":545,"content":"[@shen100](/user/shen100) 话说能一起搞么，我们最近打算做个微服务版的CMS，  用户服务＋CMS服务＋CMS API (带SSR)前台 前端 可以是 vue 或者 angular，后台前端用angular 在做一套企业级后台。\r\n\r\n到时候 用户服务＋BBS 服务 ＋ BBS API ，后台可以用我们写的。\r\n用 cli 一键启动，减少部署成本。","createdAt":1541907955042},{"id":3516,"originId":"5c55803c05cc322e7b13718d","articleId":671,"userId":110,"content":"[@zuohuadong](/user/zuohuadong) 我以前也想自己搞CMS，甚至也想用Nest.js搞，现在觉得没必要，现在比较看好https://github.com/birkir/prime，不过还不成熟，暂时试用strapi中","createdAt":1549107260185},{"id":3517,"originId":"5c562bbf05cc322e7b137249","articleId":671,"userId":21,"content":"[@siyue543241338](/user/siyue543241338) [@liuzhiguo11](/user/liuzhiguo11) \n如果JAVA搭环境也能直接一个命令就搞定，那还真就JAVA好些。但事实上js多一个优秀的框架也还不错啊。\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1549151167309},{"id":3518,"originId":"5d25b32f8a8bf909209cd293","articleId":671,"userId":1538,"content":"[@andyhu](/user/andyhu) 之前用的也是strapi现在已经彻底抛弃了,迁移到了featherjs","createdAt":1562751791816},{"id":3519,"originId":"5d2a46e18a8bf909209ce132","articleId":671,"userId":110,"content":"[@a119347](/user/a119347) 能说说为什么吗？","createdAt":1563051745076},{"id":3520,"originId":"5d2c303351637b492bb0edf2","articleId":671,"userId":1538,"content":"[@andyhu](/user/andyhu) 主要还是部署比较慢,每次部署的话因为要安装他自己的插件,需要的时间比较长,然后就是单元测试不是很方便","createdAt":1563177011071},{"id":3521,"originId":"5e3fa7d61225c9423dcd9a9f","articleId":671,"userId":490,"content":"一个使用nestjs开发的社区系统，界面优雅，功能丰富😛\r\n目前已完成文章、标签、图书、沸点、评论等功能\r\nhttps://github.com/shen100/mili","createdAt":1581230038500},{"id":3522,"originId":"5cf0c6d91fe902120f31ae41","articleId":674,"userId":685,"content":"flutter现在成熟了吗","createdAt":1559283417075},{"id":3523,"originId":"5cf23f0695fcc914aa2652c6","articleId":674,"userId":100,"content":"[@eggper](/user/eggper) 现在比去年好很多了，基本没有bug了","createdAt":1559379718161},{"id":3524,"originId":"5cf488c395fcc914aa26570e","articleId":674,"userId":685,"content":"[@youmenglinzi](/user/youmenglinzi) 访问摄像头  消息推送  微信支付宝支付  这些都成熟吗","createdAt":1559529667178},{"id":3525,"originId":"5cf4e50e95fcc914aa265ae2","articleId":674,"userId":97,"content":"[@youmenglinzi](/user/youmenglinzi) 难说[这个](https://github.com/flutter/flutter/issues/19718)问题拖了很久了","createdAt":1559553294061},{"id":3526,"originId":"5d10444fcdb1f967c15753f3","articleId":674,"userId":1540,"content":"mark!","createdAt":1561347151771},{"id":3527,"originId":"5d117ed634bca667bc6e2856","articleId":674,"userId":161,"content":"感谢作者共享","createdAt":1561427670726},{"id":3528,"originId":"5d50b61c12a0194544415d05","articleId":674,"userId":685,"content":"[@eggper](/user/eggper) 成熟了 https://pub.dev/  这个上面有常见的插件的","createdAt":1565570588934},{"id":3529,"originId":"5d80da0d53c75a4136b4b21c","articleId":674,"userId":189,"content":"[@phonegap](/user/phonegap)目前 flutter主要是开发跨平台app的吗?","createdAt":1568725517109},{"id":3530,"originId":"5d896ea395464514f7ed9716","articleId":674,"userId":189,"content":"[@phonegap100](/user/phonegap100) 好的谢谢 已近入门了","createdAt":1569287843036},{"id":3531,"originId":"5db44e6b865a9844a301de7f","articleId":674,"userId":1541,"content":"mark!!","createdAt":1572097643769},{"id":3532,"originId":"5dce0cedece3813ad9ba8880","articleId":674,"userId":189,"content":"[@xuemeifenglin](/user/xuemeifenglin) 能学到东西的","createdAt":1573784813777},{"id":3533,"originId":"5e01751dba8f6d46c4edecc9","articleId":674,"userId":99,"content":"[@eggper](/user/eggper) 能实现   大地老师讲了  百度搜it营大地       Dart入门基础教程14讲、Flutter基础、Flutter国际化、Flutter Native、Flutter仿京东商城项目(真实Api接口、真实交互、真实企业级项目实战)、Flutter签名验证、Flutter打包android应用、Flutter打包ios应用、上传Appstore、Flutter常见插件、Flutter Dio3.x、以及Flutter拍照上传 、Flutter升级应用、Flutter扫码二维码、Flutter打开外部应用、Flutter状态管理、Flutter Event_Bus 事件驱动、Flutter本地存储、Flutter微信支付、Flutter支付宝支付、Flutter微信分享。\r\n\r\n\r\nFlutter拓展教程新增：Flutter Android极光推送、Flutter Ios极光推送、Flutter指定设备推送、Flutter Socket.io即时通讯 、直播流程（推流、拉流）、借助腾讯云直播、自己搭建直播服务器、Flutter中实现直播、flutter生物识别认证 、Fluuter指纹认证、人脸认证等。","createdAt":1577153821810},{"id":3534,"originId":"5e1061f14bea432607fccdd0","articleId":674,"userId":100,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 访问摄像头  消息推送  微信支付宝支付, Flutter中实现直播, Flutter扫码二维码、Flutter打开外部应用、Flutter状态管理、Flutter Event_Bus 事件驱动、Flutter本地存储  这些功能都比较完善了","createdAt":1578131953791},{"id":3535,"originId":"5e10944b4bea432607fccdfb","articleId":674,"userId":1459,"content":"果然是大地 看了很多楼主的视频 非常棒~","createdAt":1578144843334},{"id":3536,"originId":"5e302b3f267721420912a9d7","articleId":674,"userId":189,"content":"[@fhefh2015](/user/fhefh2015) 我也是","createdAt":1580215103152},{"id":3537,"originId":"5e3a4ff6267721420912aef4","articleId":674,"userId":685,"content":"大地老师还是比较给力的","createdAt":1580879862801},{"id":3538,"originId":"5e1a75842677214209128fd5","articleId":675,"userId":89,"content":"rax-server-renderer放在哪里？","createdAt":1578792324930},{"id":3539,"originId":"5e3823ef267721420912ade3","articleId":675,"userId":1515,"content":"👍👍👍\r\n加上 [babel-plugin-transform-jsx-to-html](https://github.com/raxjs/rax-scripts/tree/master/packages/babel-plugin-transform-jsx-to-html)  这个 babel 的 plugin， Rax 的性能优势会更明显，预计可以达到 React 的 6x 。 这是一个 Rax SSR 的 [benchmark](https://github.com/raxjs/server-side-rendering-comparisonk)\r\n\r\n","createdAt":1580737519519},{"id":3540,"originId":"5e2d97261225c9423dcd921c","articleId":676,"userId":21,"content":"其实魔改babel-parse很容易搞中文解释器。当然自己搞，技术要求可能高一些，但是要在实际场景使用还是借用babel会快很多，毕竟babel通过大量测试用例","createdAt":1580046118157},{"id":3541,"originId":"5e37e5361225c9423dcd9637","articleId":676,"userId":1543,"content":"嗯，其实这个就是用acorn.js改的，用他的第一个提交版本。代码少比较简单，语法一点点参考着改，撸完基本搞清楚解析ast是怎么玩的了，比纯看理论强。","createdAt":1580721462602},{"id":3542,"originId":"5e2d95bd1225c9423dcd920e","articleId":680,"userId":21,"content":"干嘛不用json，我觉的json比xml要简单些啊，还有变量如何串联问题可能这样配置会麻烦很多，因为涉及变量串联，中国语序和外国语序很多时候是不一样的。\r\n","createdAt":1580045757625},{"id":3543,"originId":"5e2e79d41225c9423dcd9245","articleId":680,"userId":1544,"content":"[@zy445566](/user/zy445566) 本身不是用的xml ,只是说有能力编译xml哈，至于变量串联问题，指的是一句话多个变量么？ 不同语言顺序不一样？ 这个问题在这个项目应该时没问题，翻译同学可以自己定义变量位置的呀：\r\n\r\n比如:\r\n```\r\n\"welcome_messages\": (...arg) =>\\`你好, ${arg[0]}! 你有 ${arg[1]} 新消息.`\r\n```\r\n也可以是： \r\n```\r\n\"welcome_messages\": (...arg) =>\\`你好, ${arg[1]}! 你有 ${arg[0]} 新消息.`\r\n```\r\n这个类似于android 上 多语言处理，strings.xml的处理方法；\r\n\r\n至于为什么不用json, 有考虑过接送，个人是觉得json灵活性不及js高，索性直接用js了\r\n\r\n已上不知道能不能回答您说的问题，\r\n","createdAt":1580104148076},{"id":3544,"originId":"5e311cde1225c9423dcd9302","articleId":680,"userId":21,"content":"[@weivea](/user/weivea) 客气了，意思差不多。就是变量在中文可能会在前面在英文却可能会在中间或后面。但这个在xml里面配置中就很难体现了","createdAt":1580276958554},{"id":3545,"originId":"5e327e901225c9423dcd9390","articleId":680,"userId":1544,"content":"[@zy445566](/user/zy445566) xml里面也可以标识顺序的哈","createdAt":1580367504971},{"id":3546,"originId":"5e2d962e1225c9423dcd9217","articleId":681,"userId":21,"content":"状态模式和策略模式有点相似，有没有想过具体区别。提个小意见，文章尽可能代码为辅，因为看大篇幅代码是个很累的事情。","createdAt":1580045870147},{"id":3547,"originId":"5e2be155267721420912a882","articleId":682,"userId":21,"content":"我觉得这时候应该大力宣传的是远程办公","createdAt":1579934037339},{"id":3548,"originId":"5e2be8441225c9423dcd919d","articleId":682,"userId":1545,"content":"[@zy445566](/user/zy445566) 其实不用大力宣传。甚至都没必要宣传。年后上班时就会有很多公司主动让一些人在家办公23333。\r\n我也在纠结过几天上班时怎么办...全程戴口罩是基本的了。但要是周围人有咳嗽的我该怎么反应？立刻申请第二天远程办公还是等...","createdAt":1579935812699},{"id":3549,"originId":"5e2d94e21225c9423dcd9209","articleId":682,"userId":21,"content":"[@shuiRong](/user/shuiRong) 这只是我突然想到的，因为现在远程办公意识和能力都很差，而且马上假期就要过去了，说实话有点担忧。实时播报也很棒，两者不冲突","createdAt":1580045538667},{"id":3550,"originId":"5e28fa0e1225c9423dcd90d7","articleId":683,"userId":11,"content":"很有意思的项目","createdAt":1579743758047},{"id":3551,"originId":"5e290501267721420912a7bc","articleId":683,"userId":1197,"content":"我这一年没写代码？\r\n![10D52767CF5F64643CFE3A93C9756926.jpg](//static.cnodejs.org/FiLcmXaTe5wyW3ldpEM0nv8b7ko2)","createdAt":1579746561974},{"id":3552,"originId":"5e2958c91225c9423dcd910b","articleId":683,"userId":829,"content":"凑个热闹\r\n![image.png](//static.cnodejs.org/Fs5ki4NKhwqtKEbG2lfkfN2NMWlG)****","createdAt":1579768009444},{"id":3553,"originId":"5e296b0d1225c9423dcd9125","articleId":683,"userId":1545,"content":"[@ResJay](/user/ResJay) emmmmm，貌似有bug，大佬来帮忙排个bug吧2333333。","createdAt":1579772685690},{"id":3554,"originId":"5e29dc7f267721420912a82e","articleId":683,"userId":296,"content":"没有处理接口返回异常的情况。\r\n\r\n![image.png](//static.cnodejs.org/Fkce1w0HaPBBHFylzejFEEDsEejw)","createdAt":1579801727631},{"id":3555,"originId":"5e29dd48267721420912a832","articleId":683,"userId":296,"content":"好像找到原因了。。。仓库为空。\r\n\r\n![image.png](//static.cnodejs.org/FrQtjYZfBBFX0AssdxXMasupKC5_)","createdAt":1579801928369},{"id":3556,"originId":"5e2ab6e2267721420912a861","articleId":683,"userId":1545,"content":"[@JZLeung](/user/JZLeung) 欢迎PR啊，老哥 https://github.com/shuiRong/github-annual-report/issues/2","createdAt":1579857634335},{"id":3557,"originId":"5dbd5704865a9844a301f730","articleId":684,"userId":98,"content":"千不该万不该在js社区推py","createdAt":1572689668950},{"id":3558,"originId":"5dbd6d2bece3813ad9ba5e50","articleId":684,"userId":108,"content":"[@zengming00](/user/zengming00) 这个是一个技术社区，应该讨论和发布关于 nodejs 的帖，而不是其他技术的就让他出门左转，甚至拉出去枪毙。\r\n\r\n这又不是信仰，是大伙恰饭的工具而已","createdAt":1572695339976},{"id":3559,"originId":"5dbe3576865a9844a301f7ac","articleId":684,"userId":605,"content":"[@zengming00](/user/zengming00) 对不住，前端渣渣，之所以在这里发是因为觉得这个社区氛围很好，没啥戾气，不知道有咩有block功能，如果有麻烦你把我block了吧，抱歉","createdAt":1572746614129},{"id":3560,"originId":"5dbe35a2865a9844a301f7b0","articleId":684,"userId":605,"content":"[@axetroy](/user/axetroy) 千言万语化成一句感谢！","createdAt":1572746658607},{"id":3561,"originId":"5dbf72c0ece3813ad9ba6081","articleId":684,"userId":513,"content":"[@ops-coffee](/user/ops-coffee)\r\n很欢迎的~~~","createdAt":1572827840113},{"id":3562,"originId":"5dbfa0c4865a9844a301fab0","articleId":684,"userId":358,"content":"挺不错的，不过从我个人角度来看，现在的趋势是越来越不给开发者直接上服务器的权限了，尤其是安全容器出来后，ssh 和 sh 指令都没了。","createdAt":1572839620367},{"id":3563,"originId":"5dbfb8b7865a9844a301faeb","articleId":684,"userId":605,"content":"[@atian25](/user/atian25) 正常情况下，开发者是没有生产服务器登陆权限的，不过开发、测试环境还可以给嘛，毕竟要查问题，另外这个webssh下一步会添加录像的功能，也就是所有操作都会录制下来，可以回放，用在生产环境，给运维人员使用也更有保障，录像功能下篇文章介绍","createdAt":1572845751039},{"id":3564,"originId":"5dbfbf53865a9844a301fb09","articleId":684,"userId":358,"content":"[@ops-coffee](/user/ops-coffee) 我们这边是更倾向于通过日志来排查问题，通过单测来保障质量，通过平台来运维。","createdAt":1572847443120},{"id":3565,"originId":"5dbfedb4ece3813ad9ba6392","articleId":684,"userId":605,"content":"[@atian25](/user/atian25) 大佬厉害了，我们也有完善的系统流程保障，不过登陆服务器这种操作，不能完全避免，偶尔还是需要","createdAt":1572859316470},{"id":3566,"originId":"5dbff29f865a9844a301fcc4","articleId":684,"userId":358,"content":"像现在看到基础措施团队在调研 https://github.com/GoogleContainerTools/distroless 做安全镜像，到时镜像里面，连 vi 和 ssh 都没有了。如果是 Node 的话，就一个 node cli，连 npm 都没。再加上日志无盘化，只读镜像。","createdAt":1572860575239},{"id":3567,"originId":"5dbff574865a9844a301fcd5","articleId":684,"userId":605,"content":"[@atian25](/user/atian25) 我们这么干过，，but，，这个需要整个团队都有很高的能力，很好的合作，实验下来效果不好，主要是因为我们太菜了。。。不过这也是未来的方向","createdAt":1572861300736},{"id":3568,"originId":"5dc0008b865a9844a301fcfc","articleId":684,"userId":1546,"content":"我的系统还真的需要你的这个应用 [VueOS](http://vueos.jspapa.com/)","createdAt":1572864139148},{"id":3569,"originId":"5dc0bbfc865a9844a301fdde","articleId":684,"userId":545,"content":"[@biggerV](/user/biggerV)  node.js 也一样可以。","createdAt":1572912124395},{"id":3570,"originId":"5dc0cb59ece3813ad9ba64d5","articleId":684,"userId":11,"content":"蛮好玩的","createdAt":1572916057870},{"id":3571,"originId":"5dc0ed2eece3813ad9ba65b4","articleId":684,"userId":89,"content":"[@zengming00](/user/zengming00) 拿node写一个，别怂","createdAt":1572924718801},{"id":3572,"originId":"5dc124ee865a9844a301fff6","articleId":684,"userId":98,"content":"[@i5ting](/user/i5ting) 怂，懒，不写，两三年前写过一个类似的玩意，但是要简单得多，只能执行配置好的命令，有部署在公司服务器上，但从未真正用上\r\n```js\r\n    socket.on('message', function (msg: string) {\r\n      socket.send(`> ${msg}`);\r\n\r\n      kill();\r\n\r\n      if (!util.isString(msg) || !currentUser) {\r\n        return;\r\n      }\r\n      const msgStr = msg.trim();\r\n      if (!msgStr) {\r\n        return;\r\n      }\r\n\r\n      let command: string | null = null;\r\n\r\n      // 查找命令\r\n      for (const cmd of currentUser.cmds) {\r\n        if (cmd.name === msgStr) {\r\n          command = cmd.cmd;\r\n          break;\r\n        }\r\n      }\r\n      if (!command) {\r\n        socket.send(`找不到 ${msgStr} 命令`);\r\n        return;\r\n      }\r\n      socket.send(`>> ${command}`);\r\n      const arr = command.split(/\\s+/);\r\n      cp = child_process.spawn(arr[0], arr.slice(1));\r\n\r\n      function sendMsg(data: any) {\r\n        socket.send(data.toString());\r\n      }\r\n\r\n      cp.stdout.on('data', sendMsg);\r\n      cp.stderr.on('data', sendMsg);\r\n      cp.on('error', sendMsg);\r\n      cp.on('close', (code) => {\r\n        socket.send(`\\r\\nchild process exited with code ${code} \\r\\n\\r\\n`);\r\n        cp = null;\r\n      });\r\n\r\n    });\r\n```","createdAt":1572938990975},{"id":3573,"originId":"5dc39e45865a9844a30206e6","articleId":684,"userId":36,"content":"[@i5ting](/user/i5ting) 我正在用node写类似的运维系统，其实在想是不是用py写更有优势啊","createdAt":1573101125435},{"id":3574,"originId":"5dc3b7c7865a9844a3020751","articleId":684,"userId":89,"content":"[@dengnan123](/user/dengnan123) 大多linux会内置py，除此以外，没看出来","createdAt":1573107655087},{"id":3575,"originId":"5dc4cc06ece3813ad9ba7073","articleId":684,"userId":1158,"content":"做过一个内部使用的工具集成了这个功能， 就是 node 撸的（electron客户端工具），使用 ws + node-pty + xterm.js 。\r\n单独抽出来的话，加上 express 可以部署成 web terminal。","createdAt":1573178374539},{"id":3576,"originId":"5dd4b306a9f4592e749e1e92","articleId":684,"userId":605,"content":"更新一下，添加了录像功能，可以对所有操作进行录像，并回放\r\n\r\n文章地址：https://ops-coffee.cn/s/XBKEfJKaucTFFcj-cS95LQ\r\n\r\n![20191119.gif](//static.cnodejs.org/FmLGc8KRJULIyubmSCUul-jC36sk)\r\n","createdAt":1574220550333},{"id":3577,"originId":"5de08cd68c1ac97aa630abeb","articleId":684,"userId":1547,"content":"没发现源码啊","createdAt":1574997206353},{"id":3578,"originId":"5de0a95139af564604bbf564","articleId":684,"userId":605,"content":"再更新一下，有添加了**实时在线监控**和**强制踢用户下线**功能\r\n\r\n[https://ops-coffee.cn/s/GXhkc8rBHhjjf_wHxd7j3w](https://ops-coffee.cn/s/GXhkc8rBHhjjf_wHxd7j3w)\r\n\r\n![](https://blz.nosdn.127.net/sre/images/20191128.gif)","createdAt":1575004497361},{"id":3579,"originId":"5de74cdc39af564604bc0acb","articleId":684,"userId":108,"content":"挺有意思的，我找了半天也没找到源码ˇ，OGM\r\n\r\n最近在写一套系统，管理服务器的，前端 Nodejs + Nuxt, 后端 Golang\r\n\r\n开发/运维人员无需知道服务器的密码/密钥，只需简单的配置，邀请人员加入工作组即可在 web 端操作服务器\r\n\r\n![截屏2019-12-0413.51.47.png](//static.cnodejs.org/FsrsPAQsbEm5ZgoZKr9vKkhN20Nw)\r\n\r\n后面加上\r\n- 终端录像： 自动记录终端的每一次输入和输出，支持播放。没看你的实现思路，但把整个流信息存储起来，再输出到终端即可\r\n- 终端限时：限制一次回话终端打开时间，超时则断开连接\r\n- 终端分享：把终端以一个 URL 的形式，分享给其他人，打开 URL 即可操作终端，连接只可用一次，不能重新打开\r\n\r\n思路已经有了，也开始做了，稍微晚点，待完善点之后，再开源","createdAt":1575439580306},{"id":3580,"originId":"5de88a96484806122a97d63d","articleId":684,"userId":605,"content":"[@axetroy](/user/axetroy) 非常棒！","createdAt":1575520918676},{"id":3581,"originId":"5dea075414ffa4125a544b5b","articleId":684,"userId":605,"content":"翻遍了google都没有找到答案，最后各种源码解读，有添加了新功能lrzsz支持文件上传下载，这功能现在各大云厂商的web终端似乎都还没有支持\r\n\r\nhttps://ops-coffee.cn/s/poC2i859LQwIY1USq2Rfjw\r\n\r\n![20191206.gif](//static.cnodejs.org/Fi0ZsAWDVFGmSFZIBcIdV6lchLz5)","createdAt":1575618388320},{"id":3582,"originId":"5dea145c14ffa4125a544baf","articleId":684,"userId":38,"content":"上面这个功能可能让服务器的安全系数降低很多。不是没有大厂支持，而是觉得没有必要。","createdAt":1575621724565},{"id":3583,"originId":"5deb880e484806122a97df6a","articleId":684,"userId":605,"content":"[@lellansin](/user/lellansin) 具体说说怎么降低了，既然提供了ssh功能","createdAt":1575716878421},{"id":3584,"originId":"5def4e7514ffa4125a5455eb","articleId":684,"userId":44,"content":"[@axetroy](/user/axetroy) 给了我一个很好的思路","createdAt":1575964277209},{"id":3585,"originId":"5def6312df1b9a40d14c5da3","articleId":684,"userId":38,"content":"[@ops-coffee](/user/ops-coffee) 常见的情况是从 CI/CD 过程自动部署 artifacts 到机器上（or 生成 docker 来自动拉起等），禁止开发者通过非正规流程上传代码和 assets，并且所有文件只有 read 权限禁止用户修改线上的任何东西。ssh 仅供 check 状态，不能用来做任何变更。一旦用户通过 ssh 来做变更，那么下一次正规的流程下来这个应用很可能就挂了（特别是开发者人数大于 2 的时候）。","createdAt":1575969554670},{"id":3586,"originId":"5def8c35078f8a4119917b2c","articleId":684,"userId":605,"content":"[@lellansin](/user/lellansin) 你说的这个仅仅是特定场景，几乎所有正规的公司生产环境服务器都不允许开发登陆","createdAt":1575980085294},{"id":3587,"originId":"5defd770c9ab2e579c214e01","articleId":684,"userId":38,"content":"[@ops-coffee](/user/ops-coffee) Emmm, I work for Alibaba. I'm sure I can.","createdAt":1575999344514},{"id":3588,"originId":"5df04501c9ab2e579c214e34","articleId":684,"userId":605,"content":"[@lellansin](/user/lellansin) 只能说明阿里这块管理也是烂，生产都应该是ops，sre的活，或者如果有devops职位的话","createdAt":1576027393313},{"id":3589,"originId":"5df07dfadf1b9a40d14c6035","articleId":684,"userId":38,"content":"[@ops-coffee](/user/ops-coffee) 生产可能出现的问题很复杂, 比如网络问题，只能跑到机器上去 check 状态。查看 TIME_WAIT、CLOSE_WAIT、IO-Hang 等等状态，很多这种状态的异常通常跟项目的编码和部署没有任何关系，只跟服务器当前的状态有关。\r\n\r\n系统一点的话，推荐你看 Brendan Gregg 的《性能之巅》或者他的[博客](http://www.brendangregg.com/overview.html)。可以了解一些常见的登录服务器排查问题的方法，比如《性能之巅》里提到的 USE 方法，它包含 30 种衡量和排查服务器问题的维度以及对应的工具方法推荐。","createdAt":1576041978829},{"id":3590,"originId":"5df081e6df1b9a40d14c6045","articleId":684,"userId":605,"content":"[@lellansin](/user/lellansin) 其实我的本职工作是运维，Troubleshooting是运维的基础，写WebSSH纯粹是对开发的喜爱，没有需求也米有KPI，感谢大佬推荐，我好好学习下","createdAt":1576042982461},{"id":3591,"originId":"5e16cf0581adfe260207aaa1","articleId":684,"userId":108,"content":"![screenshot.gif](https://github.com/axetroy/wsm/raw/master/screenshot/1.gif)\r\n\r\n前面楼说了要写这么个东西\r\n\r\n已经实现了终端回放了\r\n\r\n真开源: https://github.com/axetroy/wsm\r\n\r\n欢迎一起交流学习\r\n","createdAt":1578553093722},{"id":3592,"originId":"5e16efd54bea432607fcdce4","articleId":684,"userId":36,"content":"[@axetroy](/user/axetroy) 很棒,那个监控怎么玩的","createdAt":1578561493166},{"id":3593,"originId":"5e16fab281adfe260207acbf","articleId":684,"userId":108,"content":"[@dengnan123](/user/dengnan123) 什么监控？终端的录像吗？\r\n\r\n其实就像歌词一样，把终端的流，一帧一帧得记录下来。\r\n\r\n做成这样的格式\r\n```\r\n(2020-01-09 15:14:33.929) ls -lh\r\n(2020-01-09 15:14:33.929) vim xxx.md\r\n(2020-01-09 15:14:33.929) exit\r\n```\r\n\r\n源码这里\r\n\r\n![1.png](//static.cnodejs.org/FrQ2mrUIZ3C05o4lxpvJc1lYaR29)\r\n\r\n然后返回给前端，解析然后逐条数据进行渲染","createdAt":1578564274066},{"id":3594,"originId":"5e16fcca81adfe260207accc","articleId":684,"userId":36,"content":"[@axetroy](/user/axetroy) 👌，懂了","createdAt":1578564810906},{"id":3595,"originId":"5e1704894bea432607fcdd5c","articleId":684,"userId":605,"content":"[@axetroy](/user/axetroy) 大佬 666，继续做的更好呀","createdAt":1578566793726},{"id":3596,"originId":"5e2577b4267721420912a509","articleId":684,"userId":1548,"content":"[@axetroy](/user/axetroy) 哈哈哈哈","createdAt":1579513780251},{"id":3597,"originId":"5e29de1b267721420912a839","articleId":684,"userId":296,"content":"66666.\r\n\r\n这贴的东西好新奇。","createdAt":1579802139224},{"id":3598,"originId":"5e2804a71225c9423dcd905c","articleId":685,"userId":109,"content":"ES6 之后尽量不使用 call、apply","createdAt":1579680935709},{"id":3599,"originId":"5e2806121225c9423dcd9063","articleId":685,"userId":335,"content":"[@waitingsong](/user/waitingsong) 只是带着理解一下call,apply,bind","createdAt":1579681298410},{"id":3600,"originId":"5e26d9c81225c9423dcd8faf","articleId":686,"userId":117,"content":"没写完发毛线😒","createdAt":1579604424666},{"id":3601,"originId":"5e270eb31225c9423dcd8fc6","articleId":686,"userId":1428,"content":"问题好像有点多\r\n正确的应该是这样吧\r\n```js\r\nclass Test {\r\n  static instance?: Test\r\n\r\n  static getInstance() {\r\n    if (!this.instance) {\r\n      this.instance = new Test()\r\n    }\r\n    return this.instance\r\n  }\r\n}\r\n```","createdAt":1579617971103},{"id":3602,"originId":"5e27bb42267721420912a6b6","articleId":686,"userId":335,"content":"[@chenkai0520](/user/chenkai0520) 谁说没有写完就不能发了，后面继续完善吖~~","createdAt":1579662146684},{"id":3603,"originId":"5e27c667267721420912a6db","articleId":686,"userId":335,"content":"[@xingo4](/user/xingo4) 还没有写完就下班了","createdAt":1579664999989},{"id":3604,"originId":"5e2558ca1225c9423dcd8dcf","articleId":690,"userId":3,"content":"图片全都挂了。。","createdAt":1579505866244},{"id":3605,"originId":"5e255b22267721420912a4b2","articleId":690,"userId":1497,"content":"[@darrenliuwei](/user/darrenliuwei) 已修。。","createdAt":1579506466302},{"id":3606,"originId":"5e1c180e2677214209129215","articleId":691,"userId":21,"content":"强！showdoc很早之前在php就用过，如果用github生态的话，任务管理其实可以直接使用github项目中的projects功能，其实也是看板功能\r\n","createdAt":1578899470910},{"id":3607,"originId":"5e210edd2677214209129cc7","articleId":691,"userId":79,"content":"优秀！","createdAt":1579224797304},{"id":3608,"originId":"5e213c932677214209129dc5","articleId":691,"userId":22,"content":"输入密码后不能使用回车进入，必须要点击登录按钮","createdAt":1579236499955},{"id":3609,"originId":"5e21746c1225c9423dcd87c3","articleId":691,"userId":1549,"content":"哈哈哈","createdAt":1579250796188},{"id":3610,"originId":"5e21cf7a2677214209129f74","articleId":693,"userId":1548,"content":"你好好","createdAt":1579274106792},{"id":3611,"originId":"5e21d2941225c9423dcd8896","articleId":693,"userId":1551,"content":"[@yangzong18](/user/yangzong18) 😄","createdAt":1579274900329},{"id":3612,"originId":"5e22bc33267721420912a05b","articleId":693,"userId":829,"content":"膜拜大佬！","createdAt":1579334707168},{"id":3613,"originId":"5e22de601225c9423dcd89a9","articleId":693,"userId":1551,"content":"[@OXOYO](/user/OXOYO) 不敢当，都是🧱的😅","createdAt":1579343456096},{"id":3614,"originId":"5e2461ea1225c9423dcd8c68","articleId":693,"userId":1548,"content":"大家啊厚爱吼吼啊哈","createdAt":1579442666966},{"id":3615,"originId":"5e1f15ea1225c9423dcd8254","articleId":694,"userId":1552,"content":"简单看了下，如有错误请别见怪\r\n1、通过zdd排序,hset设置的消息。没看到删除。\r\n2、hash存放数据key过多的情况下没看到分组。\r\n3、消息多个订阅者情况、以及消息处理失败。\r\n","createdAt":1579095530050},{"id":3616,"originId":"5e1ffb812677214209129a97","articleId":694,"userId":1176,"content":"[@wangkunmeng](/user/wangkunmeng) hi 先谢谢你的指点哈\r\n1、这是mq。消息的删除是在消费后删除的，你如果仔细看代码是通过一段lua脚本删除的。\r\n2、暂时没考虑分组的意义是啥? 如果是怕field-value 数量的限制，也有2^32-1 个。应该是够用的。\r\n3、暂时确实还没想用发布-订阅的模型，后期可能会考虑。现阶段只支持点对点(queue)的模型。消息处理失败的这种情况确实没考虑过，这点容我想下再回答。\r\n","createdAt":1579154305024},{"id":3617,"originId":"5e1ffd581225c9423dcd83f9","articleId":694,"userId":1493,"content":"[bull](https://github.com/OptimalBits/bull) 不香吗，不用重复造轮子，遇到问题可以一起造。","createdAt":1579154776849},{"id":3618,"originId":"5e20297e1225c9423dcd8552","articleId":694,"userId":1176,"content":"[@riichg5](/user/riichg5) 这个 bull 或者 [Agenda](https://github.com/agenda/agenda) 之类是属于 队列(queue)。ioredisMq的是 mq。我觉得还是有本质的区别的。\r\n另外说下发布这个依赖的原因，其实和 [rsmq](https://github.com/smrchy/rsmq)功能类似，但是 rsmp 是基于 redis 这个依赖。我们有个项目中代码依赖于ioredis这个项目，如果使用rsmp 。还需要多安装一个依赖 redis，这是我比较厌烦的。另外rsmp中有发送消息不可见的功能(vt参数控制)，个人觉的比较鸡肋，消息处理完成后，直接删除就行了。因此基于上面两个问题开发了 ioredismq。","createdAt":1579166078008},{"id":3619,"originId":"5e2029bd2677214209129be2","articleId":694,"userId":1552,"content":"[@riichg5](/user/riichg5) 英语水平太差，一个月前研究了会没看懂文档和Demo在讲啥...中文科普有点少。后来就看了AMQP资料，感觉还是RabbitMQ可能更方便点。","createdAt":1579166141107},{"id":3620,"originId":"5e202b212677214209129bf9","articleId":694,"userId":1176,"content":"[@wangkunmeng](/user/wangkunmeng) 个人觉的，数据量小的情况下,向 redis 这种 mq 是可以解决的。如果需要数据量大的mq。kafka 或者RabbitMQ可以考虑下，毕竟是这些都是分布式的mq。量少的话就没必要了。","createdAt":1579166497470},{"id":3621,"originId":"5e202c162677214209129c15","articleId":694,"userId":1552,"content":"[@WenNingZhang](/user/WenNingZhang) 嗯，基于redis list的brpop和push也做了一个简单的消息暂存、排队","createdAt":1579166742915},{"id":3622,"originId":"5e23d3a71225c9423dcd8adc","articleId":694,"userId":1553,"content":"[@WenNingZhang](/user/WenNingZhang) bull 也可作为消息队列的","createdAt":1579406247081},{"id":3623,"originId":"5e23f254267721420912a239","articleId":694,"userId":1493,"content":"[@wangkunmeng](/user/wangkunmeng) bull 在基于redis的消息队列里面，属于node里面非常成熟的一款，并且非常轻量。适合中小规模的消息处理中间件。我非常推荐使用。之前我还用过kue，没有bull成熟。我最早接触到的用redis做消息队列组件，比较成熟的是ruby里面的sidekiq，以前sidekiq是免费的，现在开始做收费了。node的bull不比当年我使用的sidekiq差。\r\nbull真的好用，哈哈","createdAt":1579414100362},{"id":3624,"originId":"5e22bd7c1225c9423dcd8985","articleId":696,"userId":829,"content":"赞！","createdAt":1579335036988},{"id":3625,"originId":"5c38888fa4d44449266afef1","articleId":697,"userId":419,"content":"赞","createdAt":1547208847524},{"id":3626,"originId":"5c38ad493898674067a7e475","articleId":697,"userId":638,"content":"什么是 PWA https://juejin.im/post/5a9e8ad5f265da23a40456d4\r\n刚才查到的解释 \r\n这种pwa主要是用在什么场景中呢? h5 ?","createdAt":1547218249332},{"id":3627,"originId":"5c38b830a4d44449266affa5","articleId":697,"userId":1555,"content":"[@vipzrx](/user/vipzrx) 你可以理解为Google提出的“小程序”，微信的小程序其实就是模仿PWA，只不过PWA更开放一些，有多个厂家支持，不依赖某个账号体系。\n\n对开发者来说，可以节约开发成本，用WEB技术就能开发出接近原生应用的体验，而且因为是跨平台的，不需要针对各个平台单独开发。\n\n对用户来说，节约了手机内存，一个PWA所有静态资源的大小一般不会超过1M，这对低端手机用户是比较友好的。\n\n比较成功的例子就是Twitter Lite，它的用户量还挺高的，基本可以替代原生应用了。\n\n来自 [CNode-V](https://github.com/oodzchen/CNode-V)","createdAt":1547221040755},{"id":3628,"originId":"5c38b97a3898674067a7e495","articleId":697,"userId":638,"content":"感谢解答 我学习下","createdAt":1547221370297},{"id":3629,"originId":"5c38bb3d3898674067a7e49a","articleId":697,"userId":638,"content":"![image.png](//static.cnodejs.org/FoG69pDI2gQDS7tUhzEiV30eeFYV)\r\n这个access token 是做什么用的?\r\naccess_token 这里有讲解文章  http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html","createdAt":1547221821985},{"id":3630,"originId":"5c38bc2ba4d44449266affb4","articleId":697,"userId":1555,"content":"[@vipzrx](/user/vipzrx) 你的账号授权，需要从cnodejs.org官网的设置界面获取\n\n来自 [CNode-V](https://github.com/oodzchen/CNode-V)","createdAt":1547222059571},{"id":3631,"originId":"5c38bca73898674067a7e49f","articleId":697,"userId":638,"content":"[@oodzchen](/user/oodzchen) 我的帐号的 access token找到了, 我先看下阮的文章理解下access tonken的作用和原理","createdAt":1547222183776},{"id":3632,"originId":"5c38c0413898674067a7e4a8","articleId":697,"userId":638,"content":"谷歌之类的授权,是直接弹出一个确认对话框,提示用户,需要获得的权限,点击 同意 就可以. 你这个还要手动填写. 为什么不做成那样的呢?","createdAt":1547223105063},{"id":3633,"originId":"5c38c1203898674067a7e4ac","articleId":697,"userId":1555,"content":"[@vipzrx](/user/vipzrx) 社区官方没提供OAuth授权方式，我也没办法 [摊手]\n\n来自 [CNode-V](https://github.com/oodzchen/CNode-V)","createdAt":1547223328255},{"id":3634,"originId":"5c38c4d03898674067a7e4bb","articleId":697,"userId":638,"content":"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html 这个里面的 授权码方式 不是现在cnode采用的吗?\r\n\r\nconde的源码在这里 你看看呢 https://github.com/cnodejs/egg-cnode\r\n\r\ncnode的api https://github.com/eggjs/examples/tree/master/cnode-api","createdAt":1547224272632},{"id":3635,"originId":"5c395616a4d44449266b0054","articleId":697,"userId":1555,"content":"[@vipzrx](/user/vipzrx) 好像并没有找到\n\n来自 [CNode-V](https://github.com/oodzchen/CNode-V)","createdAt":1547261462958},{"id":3636,"originId":"5c3a0344a4d44449266b0301","articleId":697,"userId":413,"content":"safari 上体验真不错，差点就以为是app了。。","createdAt":1547305796442},{"id":3637,"originId":"5c3a04d6a4d44449266b031a","articleId":697,"userId":419,"content":"做个扫码登陆嘛。。\n\n来自 [CNode-V](https://github.com/oodzchen/CNode-V)","createdAt":1547306198166},{"id":3638,"originId":"5c3a1010a4d44449266b033b","articleId":697,"userId":1555,"content":"[@yuu2lee4](/user/yuu2lee4) 哈？登录页那个相机按钮不就是扫码登录，你没发现吗。。。\n\n来自 [CNode-V](https://github.com/oodzchen/CNode-V)","createdAt":1547309072521},{"id":3639,"originId":"5c3a10663898674067a7e806","articleId":697,"userId":1555,"content":"[@yuu2lee4](/user/yuu2lee4) 看来我要调整交互了\n\n来自 [CNode-V](https://github.com/oodzchen/CNode-V)","createdAt":1547309158576},{"id":3640,"originId":"5c3a9d043898674067a7e834","articleId":697,"userId":419,"content":"[@oodzchen](/user/oodzchen) 真没注意到😂","createdAt":1547345156177},{"id":3641,"originId":"5c3ac627a4d44449266b03d0","articleId":697,"userId":655,"content":"楼主大赞. 我一定要测试一下. 最近我部署了一个教练社区 http://bbs.zuqiuxunlian.com  但是在mobile web上一直体验不佳\n\n\n来自 [CNode-V](https://github.com/oodzchen/CNode-V)","createdAt":1547355687353},{"id":3642,"originId":"5c3c0976a4d44449266b0865","articleId":697,"userId":638,"content":"[@oodzchen](/user/oodzchen) 没有找到什么?","createdAt":1547438454798},{"id":3643,"originId":"5c3c09a5a4d44449266b0869","articleId":697,"userId":638,"content":"[@tomoya92](/user/tomoya92) 我看到你之前也给cnode写了一个ios的客户端 因为开发证书缺少,停滞了. ","createdAt":1547438501840},{"id":3644,"originId":"5c3c0b9b3898674067a7ed41","articleId":697,"userId":18,"content":" 赞","createdAt":1547439003412},{"id":3645,"originId":"5c3c0cd0a4d44449266b08a4","articleId":697,"userId":1104,"content":"棒啊，star了，最近正在如pwa的坑。","createdAt":1547439312843},{"id":3646,"originId":"5c3c18f2a4d44449266b08f7","articleId":697,"userId":413,"content":"[@vipzrx](/user/vipzrx) 是的，不给上架，大佬有办法让它上架吗？如果可以的话，求帮忙上架\n\n来自实用的 [CNodeJS-Swift](https://github.com/tomoya92/CNodeJS-Swift)","createdAt":1547442418972},{"id":3647,"originId":"5c3c26c5a4d44449266b096e","articleId":697,"userId":1556,"content":"棒棒的","createdAt":1547445957084},{"id":3648,"originId":"5c3c3761a4d44449266b0a20","articleId":697,"userId":829,"content":"star","createdAt":1547450209734},{"id":3649,"originId":"5c3d4060a4d44449266b0f11","articleId":697,"userId":1104,"content":"最近入自己挖的坑, umijs,dva,ant-mobile,pwa, 看到题主的想法后，也做了一个react的cnode，还在开发中，功能会继续完善，希望能对新入坑的小伙伴提供一些帮助吧。\r\n[cnode-react](https://github.com/wbget/cnode-react)","createdAt":1547518048740},{"id":3650,"originId":"5c3d45aca4d44449266b0f81","articleId":697,"userId":247,"content":"楼主, 手机上运行, 存在一点点的样式问题哈\r\n![webwxgetmsgimg.jpeg](//static.cnodejs.org/Fq75cJ8ZPAQNbDy0jN6NpgH8idc4)","createdAt":1547519404455},{"id":3651,"originId":"5c3d59c1a4d44449266b10c7","articleId":697,"userId":1555,"content":"[@MeetTheBest](/user/MeetTheBest) 具体哪里的样式问题能否说说，是列表顶部被遮挡吗？\n\n来自 [CNode-V](https://github.com/oodzchen/CNode-V)","createdAt":1547524545197},{"id":3652,"originId":"5c3dd2373898674067a7f8a1","articleId":697,"userId":419,"content":"html lang=\"en\", 导致每次打开都提示我翻译页面","createdAt":1547555383590},{"id":3653,"originId":"5c3ddaa83898674067a7f8cc","articleId":697,"userId":10,"content":"棒\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1547557544748},{"id":3654,"originId":"5c3de0a53898674067a7f8e7","articleId":697,"userId":1555,"content":"[@yuu2lee4](/user/yuu2lee4) 收到\n\n来自 [CNode-V](https://github.com/oodzchen/CNode-V)","createdAt":1547559077889},{"id":3655,"originId":"5c40abd83898674067a804e8","articleId":697,"userId":1557,"content":"为啥你做的pwa在安卓下会多一个chrome的角标，你是不是有什么配置没弄对。。。（我之前做的pwa都是不出现角标的）\n另外图标颜色和主题色一致了，导致最近任务页看图标就是一个绿色圆形。。。\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1547742168412},{"id":3656,"originId":"5c40acf23898674067a804ec","articleId":697,"userId":1557,"content":"刚看了一下，重新添加到桌面就没角标了，迷\n\n图标的问题见截图 http://imgur.com/a/bKgOoWA\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1547742450151},{"id":3657,"originId":"5c4134683898674067a805be","articleId":697,"userId":189,"content":"牛","createdAt":1547777128212},{"id":3658,"originId":"5c98500ffd41137eb7661417","articleId":697,"userId":1558,"content":"证书过期了","createdAt":1553485839643},{"id":3659,"originId":"5c9869c700bcfd7eb2be5c92","articleId":697,"userId":413,"content":"[@oodzchen](/user/oodzchen) 请问楼主，pwa的推送，如果保存到桌面上的pwa app没有打开，服务端发的推送还可以收到吗？","createdAt":1553492423723},{"id":3660,"originId":"5c9898d8fd41137eb766171d","articleId":697,"userId":1559,"content":"证书错误","createdAt":1553504472185},{"id":3661,"originId":"5c98a05f00bcfd7eb2be5f74","articleId":697,"userId":36,"content":"👍","createdAt":1553506399925},{"id":3662,"originId":"5cba8286a86ae80ce64b14f5","articleId":697,"userId":1555,"content":"[@tomoya92](/user/tomoya92) 是可以做的的，有个Push API专门用于管理服务端推送，即使离线也能接受推送并使用浏览器的Push接口，当然前提是已经获得用户的授权","createdAt":1555726982297},{"id":3663,"originId":"5e2287791225c9423dcd892d","articleId":697,"userId":1560,"content":"打不开","createdAt":1579321209356},{"id":3664,"originId":"5bc6966e9545eaf107b9cbaa","articleId":698,"userId":633,"content":"写的非常好了，很多点都非常实用！！！赞，感谢分享。","createdAt":1539741294165},{"id":3665,"originId":"5bc6d3da9545eaf107b9cbc1","articleId":698,"userId":549,"content":"[@EryouHao](/user/EryouHao) 谢谢~ 才发现csdn的图片都挂了，图片重新上传cnode了","createdAt":1539757018210},{"id":3666,"originId":"5bc6dd1f15e4fd1923f48fea","articleId":698,"userId":26,"content":"学习，很有用","createdAt":1539759391736},{"id":3667,"originId":"5bc826e415e4fd1923f49046","articleId":698,"userId":1562,"content":"赞 干活","createdAt":1539843812866},{"id":3668,"originId":"5bcdd0f69545eaf107b9cd67","articleId":698,"userId":1563,"content":"赞","createdAt":1540215030942},{"id":3669,"originId":"5bce748a7a248c7f50334c66","articleId":698,"userId":1254,"content":"赞，我也最近刚把electron写的项目，用sqlite3替换了本地的json文件存储，效率大大的提升","createdAt":1540256906099},{"id":3670,"originId":"5e21e03d1225c9423dcd88a9","articleId":698,"userId":655,"content":"👍","createdAt":1579278397128},{"id":3671,"originId":"5e0eee174bea432607fccbca","articleId":699,"userId":655,"content":"UP","createdAt":1578036759793},{"id":3672,"originId":"5e0f2aa94bea432607fcccc5","articleId":699,"userId":655,"content":"UP\r\n","createdAt":1578052265851},{"id":3673,"originId":"5e17dde11225c9423dcd75cf","articleId":699,"userId":1565,"content":"react不行吗？","createdAt":1578622433472},{"id":3674,"originId":"5e21df991225c9423dcd88a2","articleId":699,"userId":655,"content":"[@duzitengg](/user/duzitengg) 哈哈，原来那包code用的VUE","createdAt":1579278233617},{"id":3675,"originId":"5e21dff12677214209129f97","articleId":699,"userId":655,"content":"感谢 [@CaanDoll](/user/CaanDoll)， https://github.com/CaanDoll， 的帮忙。顺利完成了集成工作。 ","createdAt":1579278321722},{"id":3676,"originId":"5e216e182677214209129e89","articleId":703,"userId":442,"content":"同在边疆开荒，支持~","createdAt":1579249176326},{"id":3677,"originId":"5e2173dc1225c9423dcd87af","articleId":703,"userId":22,"content":"> 在cnode上，部分代码没有高亮显示\r\n\r\n应该是你不会使用编辑器吧。作为一个 nodejs 交流的社区，怎么可能会没有代码高亮功能呢","createdAt":1579250652733},{"id":3678,"originId":"5e1d845d26772142091295b4","articleId":704,"userId":545,"content":"666  支持","createdAt":1578992733493},{"id":3679,"originId":"5e1e7a3a26772142091296d4","articleId":704,"userId":109,"content":"https://www.npmjs.com/package/sm4js#config 这行 乱码了","createdAt":1579055674120},{"id":3680,"originId":"5e202d361225c9423dcd8573","articleId":704,"userId":1566,"content":"[@waitingsong](/user/waitingsong)  改了哈哈","createdAt":1579167030583},{"id":3681,"originId":"5709ad599bd3efeb3cdf6387","articleId":707,"userId":458,"content":"6666","createdAt":1460251993349},{"id":3682,"originId":"5709bfc79bd3efeb3cdf638f","articleId":707,"userId":205,"content":"取消不是 clearTimeout / clearInterval 么~哈哈","createdAt":1460256711231},{"id":3683,"originId":"5709ca00bc564eaf3c6a48d2","articleId":707,"userId":693,"content":"你上面的匿名函数是不行，但写成这种是可以的\r\nvar testFunction=function(){  \r\n  \r\n     console.log(\"can cancel?\");  \r\n  \r\n }  \r\n  \r\n var timer=setInterval(testFunction,1000);  \r\n  \r\n timer.unref();//取消setTimeout和setInterval的调用\r\n  \r\n timer.ref();//恢复setTimeout和setInterval的调用\r\n unref取消的是它调用的函数","createdAt":1460259328457},{"id":3684,"originId":"5709dee094b38dcb3c09a7b0","articleId":707,"userId":18,"content":"[@jiangliqin](/user/jiangliqin) \r\n\r\n```\r\nvar timer = setInterval(function () {\r\n\tconsole.log(new Date, 1)\r\n}, 1000)\r\n\r\nvar fn = function () {\r\n\tconsole.log(new Date, 2)\r\n}\r\n\r\nvar timer2 = setInterval(fn, 1000)\r\n\r\ntimer2.unref()\r\n```\r\n\r\n你真的跑过？","createdAt":1460264672054},{"id":3685,"originId":"5709e67b12def0933c43ab93","articleId":707,"userId":1261,"content":"[@alsotang](/user/alsotang)  根据你提供的官网文档, 这个地方` but if it is the only item left in the event loop, it won't keep the program running`指明如果调用了`unref`函数的定时器在事件循环中是仅存在的一个, 那么程序不会继续运行下去, 测试了下:\r\n```\r\na> var timer = setInterval(function () {\r\n\tconsole.log(new Date, 1)\r\n}, 1000)\r\nvar fn = function () {\r\n\tconsole.log(new Date, 2)\r\n}\r\nvar timer2 = setInterval(fn, 1000)\r\ntimer2.unref()\r\n```\r\n函数中a处如果被注释掉, 此时相当于事件循环队列中只有一个timer2因此程序退出,如果把a处的setInterval换成setTimeout即让timer也仅运行一次, 那么timer和timer2都只会允许一次, 我理解的是timer 在的时候timer2在事件队列中不是唯一的因此它会继续执行.然而如果不调用`unref`函数不管怎么样程序都会一直运行下去","createdAt":1460266619154},{"id":3686,"originId":"5709f1b8bc564eaf3c6a48e1","articleId":707,"userId":1568,"content":"针对handle而言，判断loop是否存活只要看loop->active_handles是否大于0，大于0则存活。\r\n\r\n具体代码参看  https://github.com/libuv/libuv/blob/v1.x/src/uv-common.h\r\n\r\nuv__handle_init, uv__handle_start, uv__handle_stop, uv__handle_ref,  uv__handle_unref\r\n\r\n比较下面几种情况，可能会有利于理解unref的作用。\r\n\r\n第一种\r\n\r\n```js\r\nvar timer1 = setTimeout(function(){\r\n  console.log(new Date, 1);\r\n}, 1000);\r\n// setTimeout=>uv_timer_start(timer1)  active_handles = 1\r\n\r\nvar timer2 = setInterval(function(){\r\n  console.log(new Date, 2);\r\n}, 1000);\r\n// setInterval=>uv_timer_start(timer2) active_handles = 2\r\n\r\n// 1: ative_handles > 0 => loop()\r\n// timer1 timeout => uv_timer_stop(timer1) active_handles = 1  => callback()\r\n// timer2 timeout => uv_timer_stop(timer2) active_handles = 0  => callback() => uv_timer_start(timer2) active_handles = 1\r\n// 2: active_handles > 0 =>  loop()\r\n// timer2 timeout => uv_timer_stop(timer2) active_handles = 0  => callback() => uv_timer_start(timer2) active_handles = 1\r\n// goto 2\r\n```\r\n\r\n第二种\r\n\r\n```js\r\nvar timer1 = setTimeout(function(){\r\n  console.log(new Date, 1);\r\n}, 1000);\r\n// setTimeout=>uv_timer_start(timer1)  active_handles = 1\r\n\r\nvar timer2 = setInterval(function(){\r\n  console.log(new Date, 2);\r\n}, 1000);\r\n// setInterval=>uv_timer_start(timer2) active_handles = 2\r\n\r\ntimer2.unref();\r\n// uv_unref(timer2) active_handles = 1\r\n\r\n// ative_handles > 0 => loop()\r\n// timer1 timeout => uv_timer_stop(timer1) active_handles = 0  => callback()\r\n// timer2 timeout => uv_timer_stop(timer2) active_handles = 0  => callback() => uv_timer_start(timer2) active_handles = 0\r\n// active_handles == 0 =>  exit_process\r\n```\r\n\r\n第三种\r\n\r\n```js\r\nvar timer1 = setInterval(function(){\r\n  console.log(new Date, 1);\r\n}, 1000);\r\n// setInterval=>uv_timer_start(timer1)  active_handles = 1\r\n\r\nvar timer2 = setInterval(function(){\r\n  console.log(new Date, 2);\r\n}, 1000);\r\n// setInterval=>uv_timer_start(timer2) active_handles = 2\r\n\r\n// 1: ative_handles > 0 => loop()\r\n// timer1 timeout => uv_timer_stop(timer1) active_handles = 1  => callback() => uv_timer_start(timer1) active_handles = 2\r\n// timer2 timeout => uv_timer_stop(timer2) active_handles = 1  => callback() => uv_timer_start(timer2) active_handles = 2\r\n// goto 1\r\n```\r\n\r\n第四种\r\n\r\n```js\r\nvar timer1 = setInterval(function(){\r\n  console.log(new Date, 1);\r\n}, 1000);\r\n// setInterval=>uv_timer_start(timer1)  active_handles = 1\r\n\r\nvar timer2 = setInterval(function(){\r\n  console.log(new Date, 2);\r\n}, 1000);\r\n// setInterval=>uv_timer_start(timer2) active_handles = 2\r\n\r\ntimer2.unref()\r\n// uv_unref(timer2) active_handles = 1\r\n\r\n// 1: ative_handles > 0 => loop()\r\n// timer1 timeout => uv_timer_stop(timer1) active_handles = 0  => callback() => uv_timer_start(timer1) active_handles = 1\r\n// timer2 timeout => uv_timer_stop(timer2) active_handles = 1  => callback() => uv_timer_start(timer2) active_handles = 1\r\n// goto 1\r\n```\r\n\r\n第五种\r\n\r\n```js\r\nvar timer1 = setInterval(function(){\r\n  console.log(new Date, 1);\r\n}, 1000);\r\n// setInterval=>uv_timer_start(timer1)  active_handles = 1\r\n\r\ntimer1.unref()\r\n// uv_unref(timer1) active_handles = 0\r\n\r\nvar timer2 = setInterval(function(){\r\n  console.log(new Date, 2);\r\n}, 1000);\r\n// setInterval=>uv_timer_start(timer2) active_handles = 1\r\n\r\ntimer2.unref()\r\n// uv_unref(timer2) active_handles = 0\r\n\r\n// ative_handles == 0 => exit process\r\n```","createdAt":1460269496965},{"id":3687,"originId":"5709f2dd12def0933c43ab97","articleId":707,"userId":1568,"content":"[@jiangliqin](/user/jiangliqin) \r\n\r\n[@alsotang](/user/alsotang) 和 [@ncuzp](/user/ncuzp)  的理解是正确的，主要还是看循环是否结束，循环结束了，进程退出了，回调函数当然不会执行了。\r\n\r\nuv__hanlde_init(handle) => handle->flags = UV__HANDLE_REF\r\n\r\nuv__handle_unref(handle) 清除 handle->flags上的UV__HANDLE_REF位，没有被ref标记位，uv__handle_start(handle), uv__handle_stop(handle) 就不会影响loop->active_handles。\r\n\r\n一些文章要么是错的，要么是过时的，最好还是直接去看源代码。https://github.com/libuv/libuv/blob/v1.x/src/uv-common.h ","createdAt":1460269789770},{"id":3688,"originId":"5709f49094b38dcb3c09a7b9","articleId":707,"userId":89,"content":"[@coordcn](/user/coordcn) 受教","createdAt":1460270224322},{"id":3689,"originId":"5709f70a94b38dcb3c09a7bc","articleId":707,"userId":1261,"content":"[@coordcn](/user/coordcn) 赞","createdAt":1460270858384},{"id":3690,"originId":"570b1ce112def0933c43abee","articleId":707,"userId":18,"content":"[@coordcn](/user/coordcn) 受教","createdAt":1460346081106},{"id":3691,"originId":"5712f93e434cfcfa52684adc","articleId":707,"userId":319,"content":"[@coordcn](/user/coordcn) 受教","createdAt":1460861246226},{"id":3692,"originId":"5848d8c0f3576dd333f86ac5","articleId":707,"userId":1569,"content":"学习了~~","createdAt":1481169088167},{"id":3693,"originId":"5849878c3ebad99b336b1ebd","articleId":707,"userId":1350,"content":"[@coordcn](/user/coordcn) 666，涨知识","createdAt":1481213836358},{"id":3694,"originId":"584988b1f3576dd333f86b07","articleId":707,"userId":1350,"content":"[@coordcn](/user/coordcn) 向大神学习，感叹知道的好少","createdAt":1481214129632},{"id":3695,"originId":"59ddf8b361932717683d2249","articleId":707,"userId":1570,"content":"[@coordcn](/user/coordcn) 学习了，看了express-rate-limit这个中间件的实现 ，里面有用到unref，当时也不理解。\r\n\t'use strict';\r\n\tfunction MemoryStore(windowMs) {\r\n\t  var hits = {};\r\n\t\r\n\t  this.incr = function(key, cb) {\r\n\t\t  if (hits[key]) {\r\n\t\t\t  hits[key]++;\r\n\t\t  } else {\r\n\t\t\t  hits[key] = 1;\r\n\t\t  }\r\n\t\r\n\t\t  cb(null, hits[key]);\r\n\t  };\r\n\t\r\n\t  this.resetAll = function() {\r\n\t\t  hits = {};\r\n\t  };\r\n\t\r\n\t  // export an API to allow hits from one or all IPs to be reset\r\n\t  this.resetKey = function(key) {\r\n\t\t  delete hits[key];\r\n\t  };\r\n\t\r\n\t  // simply reset ALL hits every windowMs\r\n\t  var interval = setInterval(this.resetAll, windowMs);\r\n\t  if (interval.unref) {\r\n\t\tinterval.unref();\r\n\t  }\r\n\t}\r\n\t\r\n\tmodule.exports = MemoryStore;","createdAt":1507719347424},{"id":3696,"originId":"5e20209a1225c9423dcd8511","articleId":707,"userId":1571,"content":"专门注册一个账号膜拜大佬～～","createdAt":1579163802035},{"id":3697,"originId":"5e1d765c1225c9423dcd7f06","articleId":709,"userId":90,"content":"会玩，有追求","createdAt":1578989148157},{"id":3698,"originId":"5e1d87aa26772142091295cc","articleId":709,"userId":21,"content":"声音转电波，666","createdAt":1578993578981},{"id":3699,"originId":"5e1da31d1225c9423dcd7f85","articleId":709,"userId":545,"content":"牛逼了\r\n","createdAt":1579000605748},{"id":3700,"originId":"5e1ef48c1225c9423dcd822e","articleId":709,"userId":829,"content":"膜拜大佬","createdAt":1579086988299},{"id":3701,"originId":"5e12a53b81adfe2602079f60","articleId":714,"userId":113,"content":"感谢分享，提供了非常好的学习指引👍","createdAt":1578280251410},{"id":3702,"originId":"5e12c00581adfe2602079fd1","articleId":714,"userId":22,"content":"不错","createdAt":1578287109782},{"id":3703,"originId":"5e12c45f81adfe2602079fea","articleId":714,"userId":1574,"content":"👍","createdAt":1578288223512},{"id":3704,"originId":"5e158fe64bea432607fcd7b5","articleId":714,"userId":1011,"content":"总结的很好","createdAt":1578471398731},{"id":3705,"originId":"5e15a6d381adfe260207a779","articleId":714,"userId":1575,"content":"👍 ","createdAt":1578477267021},{"id":3706,"originId":"5e1681884bea432607fcd8ff","articleId":714,"userId":442,"content":"厉害得很~","createdAt":1578533256368},{"id":3707,"originId":"5e16beff4bea432607fcdb0b","articleId":714,"userId":528,"content":"现在还有必要使用 babel 吗？一个 ts 不就可以了嘛？","createdAt":1578548991491},{"id":3708,"originId":"5e16ccb24bea432607fcdb5c","articleId":714,"userId":36,"content":"学习了","createdAt":1578552498117},{"id":3709,"originId":"5e1944ac1225c9423dcd77da","articleId":714,"userId":1576,"content":"大佬","createdAt":1578714284606},{"id":3710,"originId":"5de461d139af564604bbfbf2","articleId":715,"userId":545,"content":"nest.js 中文文档： https://docs.nestjs.cn/\r\n相关教程及资料： https://docs.nestjs.cn/6/awesome","createdAt":1575248337499},{"id":3711,"originId":"5de4730c6043397a546dab28","articleId":715,"userId":686,"content":"nest.js 教程  https://cnodejs.org/topic/5d9be327ece3813ad9ba04cc   ","createdAt":1575252748186},{"id":3712,"originId":"5de4a17b39af564604bbfe11","articleId":715,"userId":1577,"content":"这种推广毫无意义啊","createdAt":1575264635510},{"id":3713,"originId":"5de4b30239af564604bbff18","articleId":715,"userId":152,"content":"[@junxing1025](/user/junxing1025) 利益相关罢了","createdAt":1575269122765},{"id":3714,"originId":"5de5bc9c39af564604bc0316","articleId":715,"userId":685,"content":"eggjs目前国内的用户量肯定要比nestjs多, 还有很多国内的通过cnpm下载的，数据说明不了什么","createdAt":1575337116798},{"id":3715,"originId":"5de5c52d6043397a546db13c","articleId":715,"userId":545,"content":"[@eggper](/user/eggper)  cnpm 没有公布相关数据，但从 npm 10月1日——10月7日 下滑量来看，nest.js 国内用户并不比egg 少。\r\n另外， nest.js 也同样有使用 cnpm 的。何况 cnpm 并不会超过 npm 。\r\n","createdAt":1575339309294},{"id":3716,"originId":"5de5c66e6043397a546db14f","articleId":715,"userId":545,"content":"[@junxing1025](/user/junxing1025)  可以去看知乎上相关评论，对 node.js 的批评大多集中在 js 太灵活，维护困难。\r\n这也就解释了，2015 年前后还刮前后端大一统，后来就没然后了的原因。\r\n因为当时，没有一个框架具有真正意义的大后端能力。\r\n 直到 nest.js  loopback   midwayjs 这类AOP 思想框架的相继出现，才开始改变了现状。\r\n 或者说，只有 nest.js 这类框架才能让其他后端看得起，从而慢慢用上 node.js 。\r\n \r\n ","createdAt":1575339630361},{"id":3717,"originId":"5de77bfa484806122a97d1a9","articleId":715,"userId":686,"content":"[@zuohuadong](/user/zuohuadong) 有道理的","createdAt":1575451642355},{"id":3718,"originId":"5def3376484806122a97e6ac","articleId":715,"userId":545,"content":"[@Gitforxuyang](/user/Gitforxuyang)  非要说既得利益的话，这些年投入开源的，远远高于回报，甚至目前还没看到回报。\r\n原先喜欢 PHP， 推 laravel ，后来尝试 node.js 后觉得更有发展前景，喜欢上了 nest.js ，以及翻译了 nest.js 中文文档。\r\n\r\nhttps://github.com/nestcn/docs.nestjs.cn  底部有些主机的广告，但目前加起来收入没超过 40美金，不够 docs  VPS 一年的费用（目前运行两年多了），加上两万多行的翻译提交。\r\n\r\nhttps://gitee.com/notadd/docs.nestjs.cn   这里目前收到的捐赠总共50 块钱。\r\n\r\nQQ千人群： 277386223  。 目前也不存在广告。如果有合作，也欢迎。\r\n\r\n喜欢 nest.js 的原因很简单， 很显然，这是 node.js 唯一一个能在后端翻身的框架。  \r\n以往的框架都被嘲笑“小儿科”，不然 2015年 那会，大家喊前后端大一统的时候.....\r\n如果说非要有什么私心的话，希望 node.js 好，自己团队也好招人~\r\n\r\n\r\n","createdAt":1575957366655},{"id":3719,"originId":"5def5513484806122a97e79e","articleId":715,"userId":688,"content":"[@zuohuadong](/user/zuohuadong) 不过 nestjs 对标的话对应的是 spring boot。。。。nodejs 界的 Spring cloud 是否还有希望出现","createdAt":1575965971690},{"id":3720,"originId":"5def618ddf1b9a40d14c5d8c","articleId":715,"userId":513,"content":"之前跟作者在某篇文章中有多次的交流。我当时环境受人力水平、资源所限，在开发内部系统时，选择egg.js + ext.js，以js为\r\n技术线，也顺利在3个月内完成开发、测试、上线。\r\n\r\n很庆幸当时选择了这个组合方案，让技术难点的问题降至最低，同时也为这批技术水平不足的同仁，累积了一次完整全栈的实战经验。\r\n在规划上，此系统开发完成，只能算是过渡版本与快速实战累积经验，在很多地方，没有办法像正规软件公司那样有一套实施的方法论。\r\n不过.......................上面目标交付下来，只能尽力在有限的资源下解决，毕竟代码後面怎麽写，只有自已知道。\r\n\r\n然而，还是要将软件开发方法导回正道，以及使用当下可能的主流技术线。\r\n\r\n所以在10月底系统开发完成之後，内部逐步的引入新的前後框架；Ext.js包含了所有需要的东西，而React.js只能算是库，它还要搭配一\r\n整套的全家桶，如react、react-router、redux、redux-saga、UI组件(material-ui、ant design)，团队又比较倾向阿里开源出来的技术，\r\n所以目前前端框架使用ant design pro(react、dva、umi、ant design)，仍然采用v2( javascript版本)，而後端，我们慢慢往nestJS框架移\r\n动，待人员适应後，前端也会转用typescript版本的ant design pro。\r\n\r\negg.js确实快速，小型的案子，可以很快产出原型，若要往下发展，可能就要考虑对应java spring boot的一些开发特色及优势。至於当时\r\n请教作者有关工作流引擎的部份，我也另外做了决定，选用了java方案的camunda，目前顺利开发中(通过RESTful API来操作工作流引擎\r\n与流程实例)，表单的部份，则是开发在ant design pro这边 ，目前还算顺利。\r\n\r\n感谢作者不遗馀力的推广nestJS，团队也去了某教育视频网站，购买了nestJS的教学视频，目前感觉还不错。\r\n以上分享\r\n\r\n","createdAt":1575969165949},{"id":3721,"originId":"5def6c6bdf1b9a40d14c5e04","articleId":715,"userId":688,"content":"[@Solomonqoo](/user/Solomonqoo) 你们也做工作流么！！！","createdAt":1575971947618},{"id":3722,"originId":"5def7e5bdf1b9a40d14c5e47","articleId":715,"userId":545,"content":"[@wujohns](/user/wujohns)  国内有个做了 nestcloud ，不过还任重而道远。","createdAt":1575976539825},{"id":3723,"originId":"5df0f22bdf1b9a40d14c61e1","articleId":715,"userId":513,"content":"[@wujohns](/user/wujohns) 内部用户需要，我们只能做，不过尽量的利用资源，ant design pro搭配egg/nest可以开发许多应用，如果具备工作流能力，那可做的事情会更多，自认内部的开发动能完全不足，所以自已调研了jBPM、Activiti、Flowable、camunda这些有名的工作流软件，最後选定camunda，而目前开发难点也都排除。\r\n\r\n我只把camunda作为独立的工作流中心，同时供多组的应用系统调用RESTful API，这样使用起来相当的便利。同时又具备camunda Modeler工具，来进行绘制流程的工作，可说是相当的友好。\r\n\r\n同时集成kettle ETL工具，利用其E \"T\" L，的T：转换/计算的能力，来解决经常改变的需求公式，而不是直接使用代码开发/修改，kettle可以将制作好的job发布为url资源，让我调用驱动资料流转，在由Ant design pro作页面的资料显示渲染。\r\n\r\n一切都还在学习进步中\r\n以上~~","createdAt":1576071723348},{"id":3724,"originId":"5e0061a70696c446bf64fa57","articleId":715,"userId":1507,"content":"nest用起来确实舒服,总算没刀耕火种的感觉了","createdAt":1577083303200},{"id":3725,"originId":"5e0177900696c446bf64fca3","articleId":715,"userId":100,"content":" nest.js 难道会火的节奏","createdAt":1577154448180},{"id":3726,"originId":"5e01e2000696c446bf64fe3b","articleId":715,"userId":829,"content":"学无止境","createdAt":1577181696022},{"id":3727,"originId":"5e18305b1225c9423dcd76cd","articleId":715,"userId":885,"content":"19年08月开始开发NestJS的应用，大爱其代码分层结构，前些年写java比较多，现在发现动静态语言都在互相学习，NestJS真的很有Spring 5的感觉了，期待Nest Cloud也能有Spring Cloud一样完整的生态!!!","createdAt":1578643547556},{"id":3728,"originId":"5e16f8464bea432607fcdd1f","articleId":716,"userId":259,"content":"赞👍！","createdAt":1578563654392},{"id":3729,"originId":"5e06e313ba8f6d46c4edf93c","articleId":718,"userId":545,"content":"还有个  ncc ，编译成单个js~","createdAt":1577509651846},{"id":3730,"originId":"5e07336dba8f6d46c4edf9e8","articleId":718,"userId":17,"content":"还有国人出的这两个~ \r\nhttps://github.com/pmq20/node-packer\r\nhttp://enclose.io/","createdAt":1577530221601},{"id":3731,"originId":"5e1452084bea432607fcd50e","articleId":718,"userId":1578,"content":"[@lizheming](/user/lizheming)  这个  node-packer  已经两年没有更新了","createdAt":1578390024158},{"id":3732,"originId":"5e0d5ef2f628e05aa2172e60","articleId":719,"userId":1580,"content":"2020: 来了老弟！996啊！","createdAt":1577934578358},{"id":3733,"originId":"5e0d62d201c0915a9d9bd829","articleId":719,"userId":133,"content":"大新闻","createdAt":1577935570652},{"id":3734,"originId":"5e0d84b3f628e05aa2172ef3","articleId":719,"userId":1581,"content":"小草+ 3player？","createdAt":1577944243384},{"id":3735,"originId":"5e0da3fef628e05aa2172fa8","articleId":719,"userId":40,"content":"666","createdAt":1577952254269},{"id":3736,"originId":"5e14000781adfe260207a2eb","articleId":719,"userId":1244,"content":"因缺斯挺","createdAt":1578369031281},{"id":3737,"originId":"5e13de424bea432607fcd294","articleId":720,"userId":354,"content":"注意 markdown 格式","createdAt":1578360386604},{"id":3738,"originId":"5e13ff884bea432607fcd39c","articleId":720,"userId":1244,"content":"代码格式看着难受","createdAt":1578368904649},{"id":3739,"originId":"5e0a98f90696c446bf650e20","articleId":723,"userId":21,"content":"![20191231083947-Fqmexqdii4lk39oa3c3l7i8bxhSF.png](//static.cnodejs.org/Fqmexqdii4lk39oa3c3l7i8bxhSF)","createdAt":1577752825544},{"id":3740,"originId":"5e0ade06ba8f6d46c4ee0030","articleId":723,"userId":79,"content":"得看个直播","createdAt":1577770502424},{"id":3741,"originId":"5e0af283ba8f6d46c4ee007a","articleId":723,"userId":1583,"content":"记录一下 值得","createdAt":1577775747545},{"id":3742,"originId":"5e0c65b4f628e05aa2172d1d","articleId":723,"userId":1584,"content":"哈哈哈哈","createdAt":1577870772875},{"id":3743,"originId":"5e0dc86701c0915a9d9bda0e","articleId":723,"userId":2,"content":"直播还是可以看的","createdAt":1577961575223},{"id":3744,"originId":"5e0e721181adfe26020799fe","articleId":723,"userId":358,"content":"紧张","createdAt":1578005009616},{"id":3745,"originId":"5e0ebe2d4bea432607fccb19","articleId":723,"userId":1585,"content":"得看个直播","createdAt":1578024493275},{"id":3746,"originId":"5e0f090a81adfe2602079c0a","articleId":723,"userId":390,"content":"受益于egg.js框架，[@atian25](/user/atian25) 支持你，大佬","createdAt":1578043658748},{"id":3747,"originId":"5b87b8af08d0b0fb2d8e6d35","articleId":724,"userId":1587,"content":"1073452822@qq.com  感谢","createdAt":1535621295124},{"id":3748,"originId":"5b88e3c7632c7f422e5b832a","articleId":724,"userId":1588,"content":"mark，虽然感觉看文档就行了，但还是收藏一波。","createdAt":1535697863079},{"id":3749,"originId":"5b8b472e632c7f422e5b839e","articleId":724,"userId":1589,"content":"+1支持一下","createdAt":1535854382014},{"id":3750,"originId":"5b8b51862a585e4e2f2700b3","articleId":724,"userId":1590,"content":"收藏，1291953408@qq.com","createdAt":1535857030368},{"id":3751,"originId":"5b8cd6b33224281a3eeb2910","articleId":724,"userId":1591,"content":"Eggjs 也是nodejs吗？","createdAt":1535956659093},{"id":3752,"originId":"5b8de132bf116a8c0e425798","articleId":724,"userId":1592,"content":"[@zlnvsheng](/user/zlnvsheng) 对的 egg.js基于Koa  koa基于nodejs","createdAt":1536024882503},{"id":3753,"originId":"5b8e112cbf116a8c0e4257ac","articleId":724,"userId":853,"content":"576430815@qq.com","createdAt":1536037164143},{"id":3754,"originId":"5b8e18e982f0728f354d73de","articleId":724,"userId":1593,"content":"[@strugglexiang](/user/strugglexiang) nice","createdAt":1536039145190},{"id":3755,"originId":"5b8e18ff82f0728f354d73e1","articleId":724,"userId":1593,"content":"卜阿勒","createdAt":1536039167389},{"id":3756,"originId":"5b991defce9d14c2254df989","articleId":724,"userId":1594,"content":"知道出处了[https://www.itying.com/goods-905.html](https://www.itying.com/goods-905.html)","createdAt":1536761327671},{"id":3757,"originId":"5b99c4c3a333b7bd25442009","articleId":724,"userId":1595,"content":"都是基础吗？","createdAt":1536804035907},{"id":3758,"originId":"5b9b64157895e5575997970c","articleId":724,"userId":1591,"content":"[@openkeyer](/user/openkeyer) 谢谢 我已经入门了","createdAt":1536910357693},{"id":3759,"originId":"5b9b6df97895e55759979716","articleId":724,"userId":1596,"content":"douxuesong@outlook.com  感谢分享","createdAt":1536912889633},{"id":3760,"originId":"5b9f1d564222769e07dd92fe","articleId":724,"userId":1594,"content":"收藏一波","createdAt":1537154390068},{"id":3761,"originId":"5baae0b19545eaf107b9c600","articleId":724,"userId":1597,"content":"[@yibo5220](/user/yibo5220) 爱老虎油是什么意思","createdAt":1537925297213},{"id":3762,"originId":"5bad7cea15e4fd1923f48afe","articleId":724,"userId":686,"content":"哈哈，I  love you","createdAt":1538096362428},{"id":3763,"originId":"5bd17be389665c365e9442a7","articleId":724,"userId":1597,"content":"不错的教程，感谢","createdAt":1540455395343},{"id":3764,"originId":"5bd6c108d00aac1004de5205","articleId":724,"userId":1598,"content":"支持 支持   牛","createdAt":1540800776608},{"id":3765,"originId":"5bdbbf0b646a05745b7b74bb","articleId":724,"userId":1599,"content":"感谢分享，1138463266@qq.com","createdAt":1541127947866},{"id":3766,"originId":"5bdbc03121d75b74609f2fda","articleId":724,"userId":1600,"content":"<p>666</p>","createdAt":1541128241512},{"id":3767,"originId":"5bdfabfa21d75b74609f3d2f","articleId":724,"userId":1601,"content":"666  支持支持","createdAt":1541385210808},{"id":3768,"originId":"5bec1323a05b0e0ae443b2de","articleId":724,"userId":1595,"content":"3487995586@qq.com  感谢","createdAt":1542198051785},{"id":3769,"originId":"5becd6b6be1b120abac59803","articleId":724,"userId":725,"content":"13691938206@163.com 谢谢","createdAt":1542248118510},{"id":3770,"originId":"5bf12bfbbe1b120abac5a88f","articleId":724,"userId":685,"content":"网盘点不了         难道是我网络问题","createdAt":1542532091733},{"id":3771,"originId":"5bfb4922d6104a4f803a15b5","articleId":724,"userId":1586,"content":"[@eggper](/user/eggper) 换个浏览器试试      或者手机开个热点用热点访问试试。一般是网络问题引起的","createdAt":1543194914919},{"id":3772,"originId":"5bfcf1c9d6104a4f803a203f","articleId":724,"userId":167,"content":"184821967@qq.com","createdAt":1543303625640},{"id":3773,"originId":"5bfdf64dd6104a4f803a2432","articleId":724,"userId":54,"content":"谢谢楼主！！！\r\n1160030724@qq.com","createdAt":1543370317978},{"id":3774,"originId":"5bfdfee2d6104a4f803a249e","articleId":724,"userId":1083,"content":"4576 368 76@qq.com\r\n空格省略","createdAt":1543372514746},{"id":3775,"originId":"5bfe4bc8be1b120abac5dc45","articleId":724,"userId":368,"content":"[@zzx0106](/user/zzx0106) 百度网盘最近变得很难用啊","createdAt":1543392200289},{"id":3776,"originId":"5c106caef3d48d2397c103e2","articleId":724,"userId":1602,"content":"1206761222@qq.com\r\n有总比没有好\r\n谢谢","createdAt":1544580270982},{"id":3777,"originId":"5c18f39ef3d48d2397c12b24","articleId":724,"userId":686,"content":"很不错，感谢分享","createdAt":1545139102643},{"id":3778,"originId":"5c37fdf0a4d44449266af9ed","articleId":724,"userId":781,"content":"27926528982qq.com谢谢","createdAt":1547173360863},{"id":3779,"originId":"5c3bdce1a4d44449266b0609","articleId":724,"userId":1603,"content":"ElkFly@qq.com谢谢 收藏一波","createdAt":1547427041252},{"id":3780,"originId":"5c4bcaf2f9075c1ef71383d4","articleId":724,"userId":686,"content":"开始项目了，感谢楼主！","createdAt":1548471026222},{"id":3781,"originId":"5c64d338f53f161dbaeb37be","articleId":724,"userId":686,"content":"egg 有实战分享吗?","createdAt":1550111544123},{"id":3782,"originId":"5c64d467f53f161dbaeb37d5","articleId":724,"userId":1604,"content":"lygm1062@gmail.com 感谢楼主！","createdAt":1550111847535},{"id":3783,"originId":"5c7940cd5b8cb21491ca50ee","articleId":724,"userId":1605,"content":"谢谢老板","createdAt":1551450317720},{"id":3784,"originId":"5c85a8547ce0df3732426abb","articleId":724,"userId":1605,"content":"2123083610@qq.com","createdAt":1552263252425},{"id":3785,"originId":"5cba700c37faec0ce1d03ea1","articleId":724,"userId":1217,"content":"junjufeng@163.com  感谢楼主！","createdAt":1555722252109},{"id":3786,"originId":"5cd8b960e57aac76fed29d6b","articleId":724,"userId":1217,"content":"没废话 不拖拉 不错","createdAt":1557707104125},{"id":3787,"originId":"5ce8b29f52ccb64168ba76fa","articleId":724,"userId":100,"content":"1657965137@qq.com 感谢","createdAt":1558753951579},{"id":3788,"originId":"5d29fd348a8bf909209ce10f","articleId":724,"userId":189,"content":"107245282@qq.com 感谢楼主！","createdAt":1563032884878},{"id":3789,"originId":"5d50e72112a0194544415df9","articleId":724,"userId":189,"content":"楼主 typescrip教程的地址失效拉  可以补下吗？\r\n","createdAt":1565583137648},{"id":3790,"originId":"5d529b7a697873456c6bd0f0","articleId":724,"userId":1606,"content":"389491729@qq.com\t 感谢楼主","createdAt":1565694842507},{"id":3791,"originId":"5d886d5853c75a4136b4ccb6","articleId":724,"userId":189,"content":"感谢 ","createdAt":1569221976276},{"id":3792,"originId":"5e0eb76081adfe2602079ad4","articleId":724,"userId":189,"content":"2019年Koa2 Typescript Eggjs Vue2教程网盘下载地址：[https://www.itying.com/category-79-b0-min0-max0-attr0.4916.html](https://www.itying.com/category-79-b0-min0-max0-attr0.4916.html)","createdAt":1578022752218},{"id":3793,"originId":"5e0ac15e0696c446bf650ef7","articleId":728,"userId":89,"content":"优秀","createdAt":1577763166832},{"id":3794,"originId":"5e0afb2cba8f6d46c4ee0093","articleId":728,"userId":296,"content":"大哥，你在看清楚点，是  Safari6+，IE 7+。","createdAt":1577777964878},{"id":3795,"originId":"5e0b200a0696c446bf651011","articleId":728,"userId":1137,"content":"优秀","createdAt":1577787402991},{"id":3796,"originId":"5e0b35a40696c446bf65103a","articleId":728,"userId":1545,"content":"[@JZLeung](/user/JZLeung) 谢大哥提醒，改过来了。","createdAt":1577792932568},{"id":3797,"originId":"553451ac9138f09b6296750a","articleId":729,"userId":1609,"content":"学习了","createdAt":1429492140942},{"id":3798,"originId":"553453989138f09b6296750e","articleId":729,"userId":692,"content":"干货，赞","createdAt":1429492632721},{"id":3799,"originId":"5534548d9138f09b62967510","articleId":729,"userId":1610,"content":"赞赞赞","createdAt":1429492877558},{"id":3800,"originId":"553486661796393c45c6f21d","articleId":729,"userId":940,"content":"哎哟，被加精了，感谢感谢~.~","createdAt":1429505638229},{"id":3801,"originId":"553492521796393c45c6f235","articleId":729,"userId":1286,"content":"赞！！","createdAt":1429508690881},{"id":3802,"originId":"5534d5441796393c45c6f2ac","articleId":729,"userId":696,"content":"##学习了","createdAt":1429525828171},{"id":3803,"originId":"56ea6d44a70420bd420d0052","articleId":729,"userId":1611,"content":"这样的防御csrf机制，只是防御一些url劫持或xss之后的csrf，加了token  就算你判断referrer  也不可能防刷。\r\n如果写一个自动化的脚本，自动化地执行以下逻辑： 先向种token的url发起一个get请求取得token，再向需要刷的/api接口发送post/get请求，这层防御机制就被破了。\r\n加referrer也是对于来自浏览器的http请求进行了限制，  但是黑客写自动化脚本伪造的请求，你根本不可能用token+referrer的形式防住。\r\n要防，还是得上万恶的验证码。","createdAt":1458203972542},{"id":3804,"originId":"56eb5687c95e8f992473c594","articleId":729,"userId":940,"content":"[@zhuyingda](/user/zhuyingda) csrf是防止跨站请求伪造。\r\n比如你在一台机器同时打开了两个标签页a网站和b网站， 如果用户a网站已经登入，并打开b网站点击了某个按钮，刚好这个按钮背后伪造并发起a网站的请求，比如购买商品的请求，因为cookie对同一个url是共享的，会导致用户被恶意购买商品。\r\n\r\ncsrf是解决此类问题，并不是为了解决防刷问题。要解决防刷应该在服务端对ip等信息做访问限制，万恶的验证码也可以，不过验证码用户体验真的太差了，登入的时候用用也就可以了。","createdAt":1458263687161},{"id":3805,"originId":"56eb5be1c95e8f992473c596","articleId":729,"userId":1278,"content":"mark","createdAt":1458265057516},{"id":3806,"originId":"56eb60205c2db1d12494416c","articleId":729,"userId":1612,"content":"还设置了不允许外部网站使用iframe引入cnode\r\nX-Frame-Options:SAMEORIGIN","createdAt":1458266144574},{"id":3807,"originId":"56ef9728532839c33a99d033","articleId":729,"userId":981,"content":"rails的默认做法， 贴出了node的实现， 当赞！","createdAt":1458542376664},{"id":3808,"originId":"56f15a6afa2ee8df3a650496","articleId":729,"userId":1611,"content":"[@nqdy666](/user/nqdy666) 对于什么是csrf，道哥的《白帽子web安全》清楚地说了，“如果一个请求中所有参数都是可以预期的，那么这个请求就有被csrf的风险”，我在博客中也对csrf的各种应用场景和实践经历进行了描述：\r\n [浅谈CSRF攻击](https://www.zhuyingda.com/blog/b5.html)\r\n \r\n 如果一定要抱着“跨站请求伪造”这个带有历史原因的漏洞名字不放， 那么XSS的名字还叫跨站脚本攻击呢，你能说你在一个留言板里直接输入个alert(1)那不算xss吗？","createdAt":1458657898321},{"id":3809,"originId":"56f8f8d6a335b3e931b164a6","articleId":729,"userId":48,"content":"mark","createdAt":1459157206036},{"id":3810,"originId":"56f916eaa335b3e931b164b6","articleId":729,"userId":18,"content":"[@boyishwei](/user/boyishwei) 哈哈","createdAt":1459164906101},{"id":3811,"originId":"591f9ac4d371b6372a8afbc6","articleId":729,"userId":319,"content":"学习mark","createdAt":1495243460704},{"id":3812,"originId":"59212616ba8670562a40f30f","articleId":729,"userId":482,"content":"mark","createdAt":1495344662930},{"id":3813,"originId":"596c157fdb0b6aec18a28597","articleId":729,"userId":1613,"content":"赞","createdAt":1500255615047},{"id":3814,"originId":"596de37327c8372819db0c26","articleId":729,"userId":1614,"content":"mark","createdAt":1500373875757},{"id":3815,"originId":"5996b714ee602e88524b4398","articleId":729,"userId":1615,"content":"也就是说，如果刻意写代码来获取token，然后伪造请求，这种攻击这个方法是不是就防止不了？","createdAt":1503049492283},{"id":3816,"originId":"5ba0d0bb8f5b0c1c59ea0f8f","articleId":729,"userId":1616,"content":"[@codepandy](/user/codepandy) 我的理解，貌似如果先去获取到token，是不是就防止不了呢","createdAt":1537265851039},{"id":3817,"originId":"5bb1d7529545eaf107b9c791","articleId":729,"userId":251,"content":"学习一下","createdAt":1538381650923},{"id":3818,"originId":"5df5c22128dce75de5435c94","articleId":729,"userId":1617,"content":"[@zhuyingda](/user/zhuyingda) 我想问下，你说的 再向需要刷的/api接口发送post/get请求，这层防御机制就被破了。这里不用考虑跨域的问题吗？\r\n另外 [@nqdy666](/user/nqdy666) 上文中如果优先用参数的token 是有问题的，如果伪造一个地址 用iframe 嵌个form表单（例如收藏文章接口，虽然有X-Frame-Options 但只是不能显示 不影响提交）然后随便在网站上拿个token写死，别人访问这个地址，就能收藏这篇文章了。 所以，验证参数上的token是不安全的","createdAt":1576387105207},{"id":3819,"originId":"5e0717b60696c446bf6508a9","articleId":730,"userId":1618,"content":"尴尬 打破0回复","createdAt":1577523126328},{"id":3820,"originId":"5e074612ba8f6d46c4edfa07","articleId":730,"userId":627,"content":"演示地址好像打不开","createdAt":1577534994027},{"id":3821,"originId":"5e080f67ba8f6d46c4edfac8","articleId":730,"userId":1618,"content":"[@dbit-xia](/user/dbit-xia) 可以啊 我刚才试了下没问题","createdAt":1577586535644},{"id":3822,"originId":"5e09981a0696c446bf650c58","articleId":730,"userId":516,"content":"推荐看这个 [N年前的抽奖](https://github.com/fouber/lottery)","createdAt":1577687066281},{"id":3823,"originId":"5e096fc80696c446bf650bac","articleId":731,"userId":516,"content":"存储时间戳，哪里要什么格式给他变什么格式咯","createdAt":1577676744918},{"id":3824,"originId":"56d378b39f876b7e665857dd","articleId":734,"userId":1286,"content":"赞\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1456699571078},{"id":3825,"originId":"56d37c1ebbfa359b66cf5fd9","articleId":734,"userId":89,"content":"加起来不过1000行吧","createdAt":1456700446067},{"id":3826,"originId":"56d393dc96c5cd5e6658451a","articleId":734,"userId":1621,"content":"必须要在VPS执行吗？我在本地执行，感觉没任何日志输出呀。\r\n还有个问题，下载后的种子保存在哪里了呢？","createdAt":1456706524034},{"id":3827,"originId":"56d3a5c2a3e318b766ffb9f3","articleId":734,"userId":1622,"content":" 初略的看了一下代码，你是不是在某几个站里面爬到里面所有的磁链接，然后用node某些模块通过磁链接来下载？","createdAt":1456711106771},{"id":3828,"originId":"56d3a5d796c5cd5e6658451c","articleId":734,"userId":1620,"content":"[@tanshanli](/user/tanshanli) 建议公网的主机来运行.  局域网里几乎无效. 保存种子的代码需要自己去写, 方便定制. 因为有些人想保存到 json 文件里, 有的想远程传输到别的服务器去.","createdAt":1456711127383},{"id":3829,"originId":"56d3a5f496c5cd5e6658451e","articleId":734,"userId":1620,"content":"[@i5ting](/user/i5ting) 才500多行","createdAt":1456711156321},{"id":3830,"originId":"56d3a68cbbfa359b66cf5fe3","articleId":734,"userId":1620,"content":"[@satrong](/user/satrong) 恰恰相反, 我是真的从 DHT 网络里爬取的. 你在代码里看到的网址, 那是初始节点. 是加入 DHT 网络, 就好像你要加入某个圈子, 总得有个人带你进这个圈子对吧?\r\n\r\n我没用\"某些Node 模块\"去下载磁力链接. 都是自己造的轮子.","createdAt":1456711308366},{"id":3831,"originId":"56d3a7349f876b7e665857e1","articleId":734,"userId":1622,"content":"[@laomayi](/user/laomayi) 看着很牛逼的样子，我得好好的阅读代码了","createdAt":1456711476970},{"id":3832,"originId":"56d3a83cbbfa359b66cf5fe8","articleId":734,"userId":1620,"content":"[@satrong](/user/satrong) 求Star :)","createdAt":1456711740450},{"id":3833,"originId":"56d3a939a3e318b766ffb9f9","articleId":734,"userId":1623,"content":"对dht协议很感兴趣呢，只是不用qq群。。。","createdAt":1456711993229},{"id":3834,"originId":"56d3ac179f876b7e665857e3","articleId":734,"userId":1620,"content":"[@reverland](/user/reverland) QQ群只是用来快速交流. 虽然看起来很 Low, 但是有用就行. ","createdAt":1456712727196},{"id":3835,"originId":"56d3c032bbfa359b66cf5ff5","articleId":734,"userId":1623,"content":"[@laomayi](/user/laomayi) 不low啊。。。不用而已。。。","createdAt":1456717874473},{"id":3836,"originId":"56d3dd52bbfa359b66cf5ffc","articleId":734,"userId":1208,"content":"楼主的github 用户名霸气侧漏啊","createdAt":1456725330520},{"id":3837,"originId":"56d3e482a3e318b766ffba0a","articleId":734,"userId":1624,"content":"用了一下。。。就出现番号了。。。\r\n\r\n看来dht最活跃的还是这东西啊。。。。","createdAt":1456727170696},{"id":3838,"originId":"56d3f1329f876b7e665857f4","articleId":734,"userId":1180,"content":"mark，不为用，只为源码","createdAt":1456730418943},{"id":3839,"originId":"56d403709f876b7e665857fb","articleId":734,"userId":1620,"content":"[@timqian](/user/timqian) 哈哈, 都只有你注意到了我用户名.","createdAt":1456735088556},{"id":3840,"originId":"56d4038996c5cd5e66584533","articleId":734,"userId":1620,"content":"[@youxiachai](/user/youxiachai) 哈哈, 别说话, 赞我. ","createdAt":1456735113635},{"id":3841,"originId":"56d5513a6f57517277f46512","articleId":734,"userId":1439,"content":"[@laomayi](/user/laomayi) 把你的代码用 ES6 重写了下，已发 pull request","createdAt":1456820538432},{"id":3842,"originId":"56d81394820d3c9b3d63e2c3","articleId":734,"userId":1625,"content":"mark","createdAt":1457001364284},{"id":3843,"originId":"5e07f60e0696c446bf6509aa","articleId":734,"userId":1626,"content":"如何只是爬下来存成静态的种子，似乎对[磁力下载](https://dlge.net)的帮助不大吧？还是爬虫可以实时动态地解析磁力链接对应的资源？\r\n\r\n","createdAt":1577580046170},{"id":3844,"originId":"551371afe26684ed7ff21a40","articleId":735,"userId":1628,"content":"必须点赞。","createdAt":1427337647873},{"id":3845,"originId":"551372ade26684ed7ff21a46","articleId":735,"userId":452,"content":" ![QQ截图20150326104440.png](//static.cnodejs.org/FjxKY0T6sCh9Y632c_t9mOTI8nc6)","createdAt":1427337901424},{"id":3846,"originId":"5513766ae26684ed7ff21a4e","articleId":735,"userId":1629,"content":"赞,貌似搜索页的源码不在这里么","createdAt":1427338858111},{"id":3847,"originId":"551378a5e26684ed7ff21a56","articleId":735,"userId":452,"content":"[@luicfer](/user/luicfer) 对的，这个只是爬虫，搜索的部分没什么技术含量，Express.js做个简单的站点就好了，Elasticsearch有nodejs的客户端程序，很方便的。","createdAt":1427339429731},{"id":3848,"originId":"5513bac7e26684ed7ff21ad1","articleId":735,"userId":452,"content":"[@luicfer](/user/luicfer) 而且目前 [http://findit.so](http://findit.so) 的功能比较简单。但是只要能爬到数据，不管用什么语言、设计什么功能、玩什么创意，都是可以的，看想象力了。","createdAt":1427356359982},{"id":3849,"originId":"5513c6cde26684ed7ff21b0a","articleId":735,"userId":448,"content":"对于大牛们，我只能欣然点赞","createdAt":1427359437267},{"id":3850,"originId":"5513c905e26684ed7ff21b15","articleId":735,"userId":1630,"content":"赞一个","createdAt":1427360005520},{"id":3851,"originId":"5513d508e26684ed7ff21b2f","articleId":735,"userId":696,"content":"真的很牛逼啊，学了nodejs这么久，都没有脑子去做这种东西","createdAt":1427363080691},{"id":3852,"originId":"55152525e26684ed7ff21cfe","articleId":735,"userId":452,"content":"现在出现个蛋疼的问题，mongodb一不小心已经15G了，VPS总空间才20G左右，硬盘剩余不足5%。\r\n打算新开一个更大的vps转移一下数据，有什么好方法，再不停机的情况下以最快的速度搞定？","createdAt":1427449125056},{"id":3853,"originId":"55152a7be26684ed7ff21d08","articleId":735,"userId":1631,"content":"赞，最近我也在看DHT的东西~~~","createdAt":1427450491494},{"id":3854,"originId":"55152ab3e26684ed7ff21d0a","articleId":735,"userId":1632,"content":"楼主简直淫才啊，造福广大淫民群众","createdAt":1427450547583},{"id":3855,"originId":"55159160e26684ed7ff21d81","articleId":735,"userId":1633,"content":"我擦。。。楼主真的太牛了。。。。必须点赞！","createdAt":1427476832963},{"id":3856,"originId":"55181291687c387d2f5b2918","articleId":735,"userId":452,"content":"哭晕了，晚点电影看一半，收到邮件mongodb的服务器挂了，打开findit试试，果然打不开了\r\n重启服务器，坑爹的mongo起不来了\r\n删除lock文件，执行repair，磁盘空间不足 \r\n ![9152357162005.gif](//static.cnodejs.org/Fu0AAB2FYpjuIdWJGhvEDYor7lfX)\r\n 上digitalocean rezie成20刀的VPS，总算是重启来了。。。","createdAt":1427640977562},{"id":3857,"originId":"5518a666687c387d2f5b2951","articleId":735,"userId":1622,"content":"这站小心被封","createdAt":1427678822075},{"id":3858,"originId":"5518bb64687c387d2f5b297b","articleId":735,"userId":1634,"content":"不错 mark","createdAt":1427684196386},{"id":3859,"originId":"5518fb26687c387d2f5b2a02","articleId":735,"userId":1635,"content":"赞赞赞","createdAt":1427700518054},{"id":3860,"originId":"55190923687c387d2f5b2a1d","articleId":735,"userId":452,"content":"[@satrong](/user/satrong) 封了就不玩了，我都没钱充VPS了 %>_<%","createdAt":1427704099412},{"id":3861,"originId":"55191151687c387d2f5b2a43","articleId":735,"userId":203,"content":"最近正好在搞反爬虫，有机会让你测测~哈哈","createdAt":1427706193290},{"id":3862,"originId":"551914c0687c387d2f5b2a4c","articleId":735,"userId":1636,"content":"大神，能发点爬虫的资料嘛2692387426@qq.com ，正被要求写爬虫，写的我不要不要的","createdAt":1427707072325},{"id":3863,"originId":"55193480687c387d2f5b2a73","articleId":735,"userId":452,"content":"[@CarlosRen](/user/CarlosRen) [@DoubleSpout](/user/DoubleSpout) 其实也不算爬虫，只是伪装成一个p2p的节点，等待别的用户向我“询问”资源，然后我把这个资源记录下来而已","createdAt":1427715200047},{"id":3864,"originId":"5519fb98687c387d2f5b2ae6","articleId":735,"userId":1636,"content":"[@keenwon](/user/keenwon)  我这工作需要一个事实的外汇接口，动态的每隔一段时间爬一次外汇的数据，网址是http://quote.fx168.com/showration/ 您能给我点思路吗？ 我现在卡在如何用cheerio去分析提取数据","createdAt":1427766168237},{"id":3865,"originId":"5519ff13687c387d2f5b2aeb","articleId":735,"userId":452,"content":"[@CarlosRen](/user/CarlosRen) \r\ncheerio这个我star了，但是没用过，最简单的就是直接http.request获取网页内容，然后用cheerio或者正则提取数据了。","createdAt":1427767059401},{"id":3866,"originId":"551a065c687c387d2f5b2b27","articleId":735,"userId":1636,"content":"[@keenwon](/user/keenwon) http://www.shousibaocai.com/ 您能看出这个网站的实现思路吗？ 也是做的p2p？","createdAt":1427768924740},{"id":3867,"originId":"551a069e687c387d2f5b2b2b","articleId":735,"userId":1636,"content":"[@keenwon](/user/keenwon) https://cnodejs.org/topic/551a0078687c387d2f5b2af1\r\n我把问题详尽的描述了下，就是cheerio不太会用，您看能帮忙出出主意吗","createdAt":1427768990327},{"id":3868,"originId":"551a073b687c387d2f5b2b31","articleId":735,"userId":452,"content":"[@CarlosRen](/user/CarlosRen) 思路是一样的","createdAt":1427769147791},{"id":3869,"originId":"551a07af687c387d2f5b2b37","articleId":735,"userId":452,"content":"[@CarlosRen](/user/CarlosRen) 下面已经有两个人回复你了，数据是异步加载进来的（jsonp），所以直接爬页面是看不到数据的，不过这样更省事，你可以直接调用他的接口，cheerio或者正则什么的都不需要了","createdAt":1427769263958},{"id":3870,"originId":"551a35fa687c387d2f5b2bb2","articleId":735,"userId":1636,"content":"[@keenwon](/user/keenwon) 多谢 顺便请教一下您关于爬虫的经验  什么场景或者条件下使用爬虫比较合适？","createdAt":1427781114930},{"id":3871,"originId":"551a73c9687c387d2f5b2c1e","articleId":735,"userId":452,"content":"[@CarlosRen](/user/CarlosRen) \r\n好大的问题啊，爬虫也没什么准确定义，所以只要实现你的需求就好了\r\n就算你直接访问jsonp接口可以取到数据，不需要获取页面，从页面里抽取数据，这样的程序也可以叫爬虫呀。","createdAt":1427796937806},{"id":3872,"originId":"551c93f933e515e6764064ec","articleId":735,"userId":1622,"content":"[@DoubleSpout](/user/DoubleSpout) 怎么做的？到时候分享一下","createdAt":1427936249628},{"id":3873,"originId":"5526a51590b89d6154393b7f","articleId":735,"userId":1633,"content":"[@CarlosRen](/user/CarlosRen)  你感觉实在搞不定的这种页面，推荐用 casperjs， 再加一个redis的pubsub就能实时坚挺他们家的数据","createdAt":1428595989203},{"id":3874,"originId":"55272ae8cde195f05a17f2ef","articleId":735,"userId":1636,"content":"感谢，已经hold住了，当时主要是对cheerio的$不理解","createdAt":1428630248908},{"id":3875,"originId":"55273f8acde195f05a17f32c","articleId":735,"userId":1637,"content":"这种网站很多。\r\n\r\nbtbook.net \r\nbtku.org\r\n\r\n被举报存证，楼主等着洗干净屁股进去吧。","createdAt":1428635530509},{"id":3876,"originId":"5527479fcde195f05a17f341","articleId":735,"userId":452,"content":"[@fising](/user/fising) 好害怕啊","createdAt":1428637599632},{"id":3877,"originId":"5528be5e831bc33a414106c3","articleId":735,"userId":1638,"content":"用mysql应该可以节省一半以上空间。虽然mongodb很方便。","createdAt":1428733534613},{"id":3878,"originId":"5528c009831bc33a414106c5","articleId":735,"userId":1137,"content":"好网站。。","createdAt":1428733961879},{"id":3879,"originId":"552dc5dee10460475e7f755e","articleId":735,"userId":1639,"content":"🐂\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1429063134698},{"id":3880,"originId":"552e3c5d76ee78bb6049d29c","articleId":735,"userId":1640,"content":" ![$1YVQC@A%8I5PN1_GTDYL}3.jpg](//static.cnodejs.org/FrbKSH1b4GzCb-FBuOuoz4WjaiAs)\r\n 我只能说：好人一生平安","createdAt":1429093469409},{"id":3881,"originId":"5e07f5400696c446bf65099e","articleId":735,"userId":1626,"content":"如果是国内资源搜出来[磁力链接](https://dlge.net)磁力链接用处也不大，本来活跃度就很有限，很多得手动加tracker才可能下完，现在国内BT太不济了，都被迅雷抢了流量。","createdAt":1577579840193},{"id":3882,"originId":"5df8c4d228dce75de5436420","articleId":736,"userId":1641,"content":"在下载安装的时候, 可能弹出 google play的 提示, 点击安装就好啦~~~~\r\n顶~~~~~~~\r\n","createdAt":1576584402201},{"id":3883,"originId":"5df8e3610696c446bf64eda0","articleId":736,"userId":1641,"content":"我顶~~~~~~~","createdAt":1576592225427},{"id":3884,"originId":"5df9b1d2ba8f6d46c4eddf6b","articleId":736,"userId":627,"content":"赞,看安装包挺小的, 仅用到flutter吗? 看源码里还有kotlin?","createdAt":1576645074961},{"id":3885,"originId":"5dfaddbeba8f6d46c4ede1d0","articleId":736,"userId":1641,"content":"[@dbit-xia](/user/dbit-xia) 纯 flutter 但是有的三方库可能用到了 kotlin 实现, 比如扫码功能","createdAt":1576721854887},{"id":3886,"originId":"5dfade0f0696c446bf64f130","articleId":736,"userId":1641,"content":"顶啊啊啊啊啊啊啊啊啊啊~\r\n有没有人点个赞的~~~~","createdAt":1576721935645},{"id":3887,"originId":"5dfda5500696c446bf64f71f","articleId":736,"userId":1641,"content":"没事 我就顶顶看","createdAt":1576904016763},{"id":3888,"originId":"5dfdbd8e0696c446bf64f73f","articleId":736,"userId":111,"content":"flutter支持webp格式的图片吗？","createdAt":1576910222126},{"id":3889,"originId":"5dff804f0696c446bf64f85c","articleId":736,"userId":1642,"content":"大哥，用的哪个梯子，能否推荐下！","createdAt":1577025615861},{"id":3890,"originId":"5e0093c00696c446bf64fb2c","articleId":736,"userId":167,"content":"帖子回复item干嘛不用webview支持图片？","createdAt":1577096128227},{"id":3891,"originId":"5e00d13b0696c446bf64fbc8","articleId":736,"userId":1641,"content":"[@binbin0915](/user/binbin0915) 因为最开始写这个的时候 就是想学习flutter的各个控件用法, 所以没有用webview 展示回复 item, 其实在点击用户头像进入个人中心之后, 再点击用户昵称可以进入 github 主页的","createdAt":1577111867529},{"id":3892,"originId":"5e00d15eba8f6d46c4edec14","articleId":736,"userId":1641,"content":"[@takaximina](/user/takaximina) emmm 自己搭的","createdAt":1577111902630},{"id":3893,"originId":"5e00d1770696c446bf64fbcc","articleId":736,"userId":1641,"content":"[@yakczh](/user/yakczh) 这个 我没试过哎 晚点试试看","createdAt":1577111927443},{"id":3894,"originId":"5e00d1d60696c446bf64fbd0","articleId":736,"userId":1641,"content":"有没有人能点个赞哇🤩","createdAt":1577112022121},{"id":3895,"originId":"5e01780c0696c446bf64fcb0","articleId":736,"userId":1641,"content":"[@binbin0915](/user/binbin0915) 还有个问题是接口返回的数据类型, 也不能直接用webview 打开吧? 因为不是个网页啊","createdAt":1577154572832},{"id":3896,"originId":"5e0189520696c446bf64fcf5","articleId":736,"userId":1641,"content":"[@yakczh](/user/yakczh) 支持的 试过了~","createdAt":1577158994856},{"id":3897,"originId":"5e03289c0696c446bf6500a0","articleId":736,"userId":167,"content":"[@cWatermelon](/user/cWatermelon) 你的编译环境是啥 具体版本 为什么我的Android studio+Flutter最新版本下编译报错？","createdAt":1577265308758},{"id":3898,"originId":"5e044b1f0696c446bf6502d6","articleId":736,"userId":1641,"content":"[@binbin0915](/user/binbin0915) 报错信息贴出来看看呢? 我这边环境是  flutter 1.12.13+hotfix.5 dart 2.7.0 android-29 build-tools29.0.2","createdAt":1577339679038},{"id":3899,"originId":"5dfc8ed90696c446bf64f5e5","articleId":737,"userId":18,"content":"七牛，社区赞助商，可置顶。","createdAt":1576832729053},{"id":3900,"originId":"5e037101ba8f6d46c4edf20b","articleId":737,"userId":1644,"content":"最近在上海出差，下周末可以回去刚好参加","createdAt":1577283841368},{"id":3901,"originId":"5e0179290696c446bf64fcbc","articleId":739,"userId":99,"content":"如果要筛选 inventory_docs中的字段的话就按照上面的写法\r\n\r\n**返回指定字段**：\r\n\r\n```\r\ndb.order.aggregate([\r\n    {\r\n      $lookup:\r\n        {\r\n          from: \"order_item\",\r\n          localField: \"order_id\",\r\n          foreignField: \"order_id\",\r\n          as: \"items\"\r\n        }\r\n   },\r\n {\r\n\t$match:{\"all_price\":{$gte:90}}\r\n },{\r\n    $project:{order_id:1,uid:1,trade_no:1,all_price:1,all_num:1,cate:{ items:1，price:1}}\r\n    \r\n  }\r\n\r\n])\r\n```","createdAt":1577154857172},{"id":3902,"originId":"5e00ad3a0696c446bf64fb8a","articleId":741,"userId":829,"content":"赞\r\n\r\n也贴一个，基于G6的 [http://oxoyo.co/X-Flowchart-Vue/](http://oxoyo.co/X-Flowchart-Vue/)","createdAt":1577102650916},{"id":3903,"originId":"5df7157528dce75de5435e8c","articleId":742,"userId":89,"content":"无实质内容，再发封号","createdAt":1576473973097},{"id":3904,"originId":"5df7159976a67b5e0e418453","articleId":742,"userId":89,"content":"做一个后台管理用ssr，意义何在？","createdAt":1576474009946},{"id":3905,"originId":"5e0021850696c446bf64f8ed","articleId":742,"userId":1459,"content":"挺好的 楼主 学习了 😁 已star","createdAt":1577066885026},{"id":3906,"originId":"5e0029400696c446bf64f91b","articleId":742,"userId":1478,"content":"[@i5ting](/user/i5ting) 打扰了，可能我的标题起的有问题，但是内容并不是如你诉述，\r\n我也只是一个node的学习者，我喜欢node，分享下自己学的做的，可能写的不是很好\r\n标签我写的是分享，我不太清楚，cnode社区，分享下做的东西需要的文章格式是啥，\r\n\r\n虽然可能您的时间比较忙，没有点链接查看就，就批判，\r\n很大原因可能是我的标题描述有问题，在cnode社区，\r\n我也用了三年多，虽然我不咋发贴，但是这个社区，不说每天，每个星期我几乎都会关注，\r\n我觉得最权威，也最关注的就是您，但是让我今天看到这个消息有点难过，\r\n这个文章，大概在您回复下后，我会删除，\r\n我在cnode没写过啥，就分享了两次，一般只会看消息，您应该有权限，可以把这个文章删了，\r\n然后帐号，我看下，能删除了，我自己就删除了，\r\n打扰了，我写这个回复，没有任何别的意思，仅仅是表达下不满，希望不要引起其他的......\r\n","createdAt":1577068864085},{"id":3907,"originId":"5e002a1f0696c446bf64f928","articleId":742,"userId":1478,"content":"再次回复，仅仅是表达下","createdAt":1577069087221},{"id":3908,"originId":"5e00a0370696c446bf64fb42","articleId":742,"userId":89,"content":"[@maoxiaoquan](/user/maoxiaoquan) \r\n\r\n只发url地址真的没意义，如果想分享，就把技术栈，架构，思考，遇到的难点详细的写写。这个才是真的分享。目前你的主贴，只有一些名词，然后求star，我个人感觉缺少诚意。\r\n写作其实成就是自己，受益最大的也是自己，希望你能明白。我并没有针对你，别人这样我看到了也会这样说的。\r\n\r\n对于ssr，主要是c端用。在管理后台里，价值不大。性能要求不大，也没有seo需求，你想想是不是","createdAt":1577099319266},{"id":3909,"originId":"5e00a757ba8f6d46c4edebbb","articleId":742,"userId":1478,"content":"[@i5ting](/user/i5ting) ssr是用在c端的, 看来还是的我的标题有很大的问题，\r\n前台界面是vue ssr ,  \r\n后台界面是 react spa,  管理后台我咋会用ssr, 我觉得我得改善下写文的表达能力了，这篇文章我改写下\r\n您看下上面的图片就知道了，我已经改写了下，后面再继续优化下这个文章\r\n","createdAt":1577101143294},{"id":3910,"originId":"5d905262865a9844a3018fd6","articleId":743,"userId":1527,"content":"介绍“Dockerfile 编写”这一节，里面的“COPY package.json /usr/src/app/package.json  RUN cd /usr/src/app/” 这两行命令中的“app”应该是“nodejs”吧？","createdAt":1569739362421},{"id":3911,"originId":"5d905c2fece3813ad9b9f791","articleId":743,"userId":109,"content":"docker-cn.com 这个镜像早就废了。建议用中科大和网易的。","createdAt":1569741871969},{"id":3912,"originId":"5d90631eece3813ad9b9f7b6","articleId":743,"userId":109,"content":"```json\r\n\"registry-mirrors\": [ \"https://hub-mirror.c.163.com\", \"https://docker.mirrors.ustc.edu.cn\" ]\r\n```","createdAt":1569743646754},{"id":3913,"originId":"5d9176f0ece3813ad9b9fa43","articleId":743,"userId":13,"content":"[@yaolynzc](/user/yaolynzc) 是的呢，已修改哈","createdAt":1569814256155},{"id":3914,"originId":"5d917a61ece3813ad9b9fa5a","articleId":743,"userId":13,"content":"[@waitingsong](/user/waitingsong) 谢谢","createdAt":1569815137798},{"id":3915,"originId":"5e0032b9ba8f6d46c4ede9e5","articleId":743,"userId":805,"content":"这有Docker视频教程\r\n[https://www.sucaihuo.com/video/405.html](https://www.sucaihuo.com/video/405.html)","createdAt":1577071289202},{"id":3916,"originId":"5df37777df1b9a40d14c6893","articleId":744,"userId":21,"content":"接触很多语言，还是js的语法检测工具最强","createdAt":1576236919857},{"id":3917,"originId":"5df38e0cdf1b9a40d14c68ce","articleId":744,"userId":109,"content":"不知道 Prettier 那个nc的 if/else 换行风格可定制了没？","createdAt":1576242700795},{"id":3918,"originId":"5df3a42b28dce75de5435b17","articleId":744,"userId":1646,"content":"哎？去腾讯了？","createdAt":1576248363529},{"id":3919,"originId":"5df3e90276a67b5e0e418114","articleId":744,"userId":22,"content":"原来对比的是 star 数啊，我还以为 npm 下载量呢。不过，依然可喜可贺","createdAt":1576265986887},{"id":3920,"originId":"5df5d23f76a67b5e0e418269","articleId":744,"userId":41,"content":"[@gxmari007](/user/gxmari007) 嗯，来两年了","createdAt":1576391231477},{"id":3921,"originId":"5df5d32d76a67b5e0e41826e","articleId":744,"userId":41,"content":"[@justjavac](/user/justjavac) npm 下载量还差一大截。。不过之前一直没有做国际化，stars 全是中国人，估计有大部分都是从 cnpm 上下载的","createdAt":1576391469196},{"id":3922,"originId":"5df6e29728dce75de5435d92","articleId":744,"userId":89,"content":"优秀","createdAt":1576460951064},{"id":3923,"originId":"5df6e6cd76a67b5e0e418389","articleId":744,"userId":418,"content":"支持啊。最好再研究一下repo的语言分类，争取分类也能分到英语里面。","createdAt":1576462029125},{"id":3924,"originId":"5df97ee90696c446bf64ee17","articleId":744,"userId":755,"content":"支持一波","createdAt":1576632041129},{"id":3925,"originId":"5dfaf2e00696c446bf64f1c9","articleId":744,"userId":1647,"content":"[@waitingsong](/user/waitingsong) 好像还是不行","createdAt":1576727264245},{"id":3926,"originId":"5dfb20590696c446bf64f25e","articleId":744,"userId":109,"content":"[@lear-cash](/user/lear-cash) 团队太固执了","createdAt":1576738905048},{"id":3927,"originId":"5dfb8f56ba8f6d46c4ede449","articleId":744,"userId":41,"content":"[@steambap](/user/steambap) 如何看是否被分到了英语呢？","createdAt":1576767318742},{"id":3928,"originId":"5e0024cfba8f6d46c4ede979","articleId":744,"userId":418,"content":"[@xcatliu](/user/xcatliu) \r\n不知道怎么看呀。现在唯一已知的是 GitHub 现在好像不扫描副标题，只扫描 readme 来决定语言。比如今天就有人混进英语里面了： https://github.com/A3M4/YouTube-Report","createdAt":1577067727504},{"id":3929,"originId":"5df19aa1df1b9a40d14c62a8","articleId":745,"userId":1648,"content":"阿里云双12活动最后一天！！！\r\n 1核-2G-1M，1年89元，3年229。 \r\n2核-4G-3M，2年469元，3年799。\r\n 2核-8G-5M，3年899元。 \r\n1核-1G-1M，香港服务器1年119块。 \r\n2核-4G-5M，香港服务器3年2926块。\r\n链接：https://www.aliyun.com/minisite/goods?userCode=wbqjs7bw&share_source=copy_link\r\n（凡是下单者截图给我领取精美礼品一份，数量有限先到先得）\r\n腾讯云双12活动\r\nhttps://cloud.tencent.com/act/cps/redirect?redirect=1052&cps_key=73ac213ef7b5241a47942f6e14fb5a29&from=console\r\n\r\n ","createdAt":1576114849378},{"id":3930,"originId":"5dfb26530696c446bf64f278","articleId":745,"userId":1648,"content":"阿里云，上线云小站，服务器低至86/年","createdAt":1576740435882},{"id":3931,"originId":"5dfb5e52ba8f6d46c4ede3ff","articleId":745,"userId":518,"content":"老用户怎么办呢","createdAt":1576754770044},{"id":3932,"originId":"5dff0532ba8f6d46c4ede864","articleId":745,"userId":1648,"content":"[@weizhuanhua](/user/weizhuanhua) 老用户找我下单也有精美礼品送！！！","createdAt":1576994098643},{"id":3933,"originId":"5af53464adea947348e76325","articleId":746,"userId":98,"content":"上面那个在windows下使用napi无法编译，刚刚发现了更屌的\r\nhttps://github.com/vladimirvivien/go-cshared-examples\r\n在因为不同的平台扩展名是不同的，实际上他会自动去找，所以需要改改他的代码：\r\n```\r\n// var awesome = ffi.Library(\"./awesome.so\", {\r\nvar awesome = ffi.Library(\"./awesome\", {\r\n```\r\n然后在go编译时\r\n```\r\ngo build -o awesome.dll -buildmode=c-shared awesome.go\r\n```\r\n```\r\n// 用相同的测试发现，大约比js快三倍\r\n$ node --version\r\nv8.9.4\r\njs: Time in ms to complete loop 2545 ms\r\ngo: Time in ms to complete loop 886 ms\r\n```\r\n在一些场景下可以考虑用go来开发\r\n\r\n刚刚又在linux服务器上试了一下，有5倍多的差距\r\n```\r\ngo build -o awesome.so -buildmode=c-shared awesome.go\r\n$ node --version\r\nv6.10.1\r\njs: Time in ms to complete loop 6411 ms\r\ngo: Time in ms to complete loop 1149 ms\r\n```","createdAt":1526019172808},{"id":3934,"originId":"5af6652a02591040485bada1","articleId":746,"userId":21,"content":"mark一下，有时间试下","createdAt":1526097194548},{"id":3935,"originId":"5af6e2fc02591040485badca","articleId":746,"userId":363,"content":"有没有使用场景\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1526129404499},{"id":3936,"originId":"5b87e00d2a585e4e2f27000a","articleId":746,"userId":862,"content":"这块有点意思，不过需要考虑的是go与node这两个运行时的垃圾回收，对内存的控制以及程序运行（stop the world）可不太友好","createdAt":1535631373384},{"id":3937,"originId":"5dfde9d80696c446bf64f776","articleId":746,"userId":1649,"content":"mark一下试试","createdAt":1576921560829},{"id":3938,"originId":"5dd6841d34a8a07a2dab651f","articleId":747,"userId":109,"content":"一般很少遇到这种需求。","createdAt":1574339613007},{"id":3939,"originId":"5dfb3097ba8f6d46c4ede363","articleId":747,"userId":1650,"content":"[@waitingsong](/user/waitingsong) 比如文中提到的同时使用多版本的数据库。还有比如，维护老代码既想要新版本特性，又不想升级旧版本造成兼容性问题。","createdAt":1576743063072},{"id":3940,"originId":"5df8c65d28dce75de5436424","articleId":748,"userId":877,"content":"无人愿意接手","createdAt":1576584797639},{"id":3941,"originId":"5df8ccd876a67b5e0e418978","articleId":748,"userId":109,"content":"为啥没人接手呢","createdAt":1576586456225},{"id":3942,"originId":"5df8da6328dce75de5436448","articleId":748,"userId":89,"content":"点赞~","createdAt":1576589923944},{"id":3943,"originId":"5df99acf0696c446bf64ee9c","articleId":748,"userId":726,"content":"点赞！","createdAt":1576639183129},{"id":3944,"originId":"5df9b70aba8f6d46c4eddf8c","articleId":748,"userId":545,"content":"[@cnwhy](/user/cnwhy)  国外四巨头都在~\r\nEcma  不是想加就能加的~","createdAt":1576646410648},{"id":3945,"originId":"5df9cf0b0696c446bf64efb5","articleId":748,"userId":22,"content":"赞","createdAt":1576652555971},{"id":3946,"originId":"5def64ea078f8a4119917a73","articleId":749,"userId":38,"content":"挽尊","createdAt":1575970026652},{"id":3947,"originId":"5def8cfc078f8a4119917b32","articleId":749,"userId":605,"content":"[@lellansin](/user/lellansin) 刚搜了下这啥意思\r\n\r\n挽尊（wǎn zūn），网络用语，全称是挽救（楼主）尊严。一般是指楼主发完帖子后，长时间没有人回复，或者楼主发的内容比较冷、无聊，其他人回复时戏谑楼主的意思。 \r\n","createdAt":1575980284045},{"id":3948,"originId":"5df20411c9ab2e579c2152bf","articleId":749,"userId":687,"content":"所以，开源吗？\r\n如果开源，请贴地址。","createdAt":1576141841156},{"id":3949,"originId":"5df9ad97ba8f6d46c4eddf59","articleId":749,"userId":1652,"content":"可以贴开源地址吗","createdAt":1576643991856},{"id":3950,"originId":"5df9adaaba8f6d46c4eddf5d","articleId":749,"userId":1652,"content":"想要开源地址","createdAt":1576644010836},{"id":3951,"originId":"5d9d32e3ece3813ad9ba08a9","articleId":750,"userId":21,"content":"![shafa.png](//static.cnodejs.org/Fqmexqdii4lk39oa3c3l7i8bxhSF)","createdAt":1570583267217},{"id":3952,"originId":"5da12f99865a9844a301abd8","articleId":750,"userId":89,"content":"有没有面基的？留名约哈","createdAt":1570844569895},{"id":3953,"originId":"5da7203cece3813ad9ba2305","articleId":750,"userId":1653,"content":"> **666***666*","createdAt":1571233852170},{"id":3954,"originId":"5da80d5fece3813ad9ba263f","articleId":750,"userId":1654,"content":"[@Jiny3213](/user/Jiny3213) yes","createdAt":1571294559267},{"id":3955,"originId":"5da987a2ece3813ad9ba2c6e","articleId":750,"userId":1655,"content":"666","createdAt":1571391394793},{"id":3956,"originId":"5db79e43ece3813ad9ba4e0f","articleId":750,"userId":1656,"content":"为啥子不在北京哇.....12月份我还在封闭.......","createdAt":1572314691615},{"id":3957,"originId":"5ddb871d8287937a65af69f4","articleId":750,"userId":741,"content":"为啥子不在成都哇 好希望来一次成都","createdAt":1574668061308},{"id":3958,"originId":"5de84d9214ffa4125a544311","articleId":750,"userId":1657,"content":"666","createdAt":1575505298428},{"id":3959,"originId":"5debadf214ffa4125a544e37","articleId":750,"userId":1641,"content":"顶","createdAt":1575726578036},{"id":3960,"originId":"5dec96c9484806122a97e004","articleId":750,"userId":1658,"content":"[@501981732](/user/501981732) 是啊","createdAt":1575786185227},{"id":3961,"originId":"5dec96d514ffa4125a544ea9","articleId":750,"userId":1658,"content":"我也想去啊","createdAt":1575786197926},{"id":3962,"originId":"5df9ac05ba8f6d46c4eddf4b","articleId":750,"userId":1652,"content":"[@Jiny3213](/user/Jiny3213) 顶","createdAt":1576643589913},{"id":3963,"originId":"5c1c9b4d3898674067a76d22","articleId":751,"userId":341,"content":"先看一眼","createdAt":1545378637414},{"id":3964,"originId":"5c1ca13476c4964062a1c454","articleId":751,"userId":796,"content":"😂","createdAt":1545380148635},{"id":3965,"originId":"5c1cb1113898674067a76e6a","articleId":751,"userId":161,"content":"pdf版本先试看下，哈哈","createdAt":1545384209229},{"id":3966,"originId":"5c1fba2b76c4964062a1cd00","articleId":751,"userId":552,"content":"明天就下单\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1545583147497},{"id":3967,"originId":"5c24028976c4964062a1e30e","articleId":751,"userId":1528,"content":"非常好的Node.js 学习教程，一直在我的入门必看书单里","createdAt":1545863817672},{"id":3968,"originId":"5c24688476c4964062a1e5a5","articleId":751,"userId":1660,"content":"然并卵","createdAt":1545889924688},{"id":3969,"originId":"5c24bad076c4964062a1e805","articleId":751,"userId":866,"content":"试读了下   还不错","createdAt":1545910992335},{"id":3970,"originId":"5c27421d3898674067a79a56","articleId":751,"userId":866,"content":"[@phper-chen](/user/phper-chen) 前面的确实还可以   不过后面的node-red感觉水水的","createdAt":1546076701612},{"id":3971,"originId":"5c3ff03f3898674067a80110","articleId":751,"userId":1661,"content":"谢谢楼主分享！\r\n还可以看看Node.js视频教程[https://www.sucaihuo.com/video/224-0-0](https://www.sucaihuo.com/video/224-0-0)","createdAt":1547694143842},{"id":3972,"originId":"5c40907da4d44449266b2228","articleId":751,"userId":1104,"content":"已购～","createdAt":1547735165642},{"id":3973,"originId":"5c412644a4d44449266b229f","articleId":751,"userId":562,"content":"抽奖没中 自己入手了一本 过年回家看~","createdAt":1547773508482},{"id":3974,"originId":"5c413dd33898674067a8062e","articleId":751,"userId":1662,"content":"我也是抽奖没中，自己买了一本，感觉内容有点少啊。","createdAt":1547779539113},{"id":3975,"originId":"5c41a1653b948a2b4ab6f5f7","articleId":751,"userId":1180,"content":"通读了一遍，还是有些干货，但是有些粗糙。","createdAt":1547805029330},{"id":3976,"originId":"5c6a2007f53f161dbaeb4bbe","articleId":751,"userId":828,"content":"90块啊","createdAt":1550458887882},{"id":3977,"originId":"5c89090cacb681372d417d34","articleId":751,"userId":798,"content":"看书静不下心","createdAt":1552484620532},{"id":3978,"originId":"5ca96b5bd68ff5064921a925","articleId":751,"userId":790,"content":"mark","createdAt":1554606939491},{"id":3979,"originId":"5cc5b2dca86ae80ce64b5219","articleId":751,"userId":804,"content":"读过的老铁说说怎么样","createdAt":1556460252380},{"id":3980,"originId":"5ccf93f0776fb66e0d172451","articleId":751,"userId":1161,"content":"看了前三章，感觉干货少了些，适合入门的童鞋。。","createdAt":1557107696755},{"id":3981,"originId":"5ccfcaa45a5bae6e07813545","articleId":751,"userId":853,"content":"留下足迹","createdAt":1557121700255},{"id":3982,"originId":"5cd01bdf776fb66e0d1729d5","articleId":751,"userId":79,"content":"华科出版的😂","createdAt":1557142495210},{"id":3983,"originId":"5d16445f34bca667bc6e3c7d","articleId":751,"userId":1661,"content":"要不要下手呢","createdAt":1561740383496},{"id":3984,"originId":"5d19819a34bca667bc6e4338","articleId":751,"userId":1663,"content":"感觉适合我","createdAt":1561952666596},{"id":3985,"originId":"5d26ae588a8bf909209cd640","articleId":751,"userId":153,"content":"mark","createdAt":1562816088524},{"id":3986,"originId":"5d26e2be8a8bf909209cd7db","articleId":751,"userId":679,"content":"有在微信读书上架吗，习惯了在微信读书买","createdAt":1562829502386},{"id":3987,"originId":"5d43be7e9969a529571d8e8f","articleId":751,"userId":1228,"content":"用node 的express 框架写的服务端，现扫描出Slow HTTP Denial of Service Attack漏洞，要怎么弄？？","createdAt":1564720766308},{"id":3988,"originId":"5d4ba89f12a019454441527f","articleId":751,"userId":1664,"content":"是express的啊","createdAt":1565239455319},{"id":3989,"originId":"5dbfceca865a9844a301fba9","articleId":751,"userId":1665,"content":"阿里云双十一特惠活动正式开启！\r\n 1核-2G-1M，1年86元，3年229。 \r\n2核-4G-3M，3年799元。\r\n 2核-8G-5M，3年1399元。 \r\n4核-8G-5M，1年5621元。 \r\n8核-16G-8M，3年12209元。 \r\n1核-1G-1M，香港服务器1年119块。 \r\n2核-4G-5M，香港服务器3年2926块。\r\n现在下单就可以买。拼团链接：https://www.aliyun.com/1111/2019/group-buying-share?ptCode=F9E6C0F5F69CFE2439882EFC16E69926647C88CF896EF535&userCode=wbqjs7bw&share_source=copy_link","createdAt":1572851402437},{"id":3990,"originId":"5df98fe70696c446bf64ee6e","articleId":751,"userId":852,"content":"微信读书上有吗","createdAt":1576636391653},{"id":3991,"originId":"5df5efc276a67b5e0e418293","articleId":752,"userId":1377,"content":"巧了，我之前写了个权限控制，不过我的只控制到网页级别，按钮就只靠vue-admin-template自带到v-permission和v-for了\r\n现在准备换个后台，从ts+express换成nest","createdAt":1576398786001},{"id":3992,"originId":"5df8eb660696c446bf64edac","articleId":752,"userId":1392,"content":"[@Josh119891](/user/Josh119891) 我的实现,只控制http请求, 不控制页面.","createdAt":1576594278988},{"id":3993,"originId":"5df875b828dce75de54362b6","articleId":753,"userId":36,"content":"可以，多多分享","createdAt":1576564152973},{"id":3994,"originId":"5df79e2d28dce75de54360f9","articleId":754,"userId":358,"content":"不用那么复杂，bodyparser 的 extendTypes 配置下，把 xml 映射为 text，然后自己引入个 xmk 库 parse 下 rawbody 即可","createdAt":1576508973560},{"id":3995,"originId":"5df829f376a67b5e0e418700","articleId":754,"userId":113,"content":"[@atian25](/user/atian25)  👍已更正","createdAt":1576544755710},{"id":3996,"originId":"5df8424776a67b5e0e418770","articleId":754,"userId":358,"content":"[@zhennann](/user/zhennann) CabloyJS 其实可以内置一个中间件，判断是这种类型的，自动把 `ctx.request.body = xml.parse(ctx.request.rawBody)` parse 下就好了，不用额外加个 getPayload，开发者体验就一致了。","createdAt":1576550983302},{"id":3997,"originId":"5df8435476a67b5e0e418778","articleId":754,"userId":113,"content":"[@atian25](/user/atian25) 有道理。我考虑一下","createdAt":1576551252813},{"id":3998,"originId":"5d15696934bca667bc6e36f3","articleId":755,"userId":853,"content":"mark","createdAt":1561684329506},{"id":3999,"originId":"5d156d5dcdb1f967c15767b2","articleId":755,"userId":161,"content":"666.我一直想开发，但是懒癌晚期。最终开发了个半成品","createdAt":1561685341444},{"id":4000,"originId":"5d15789e34bca667bc6e37a7","articleId":755,"userId":518,"content":"我喜欢你的域名 有空可以弄个https","createdAt":1561688222830},{"id":4001,"originId":"5d157e6234bca667bc6e37ef","articleId":755,"userId":1667,"content":"[@strugglexiang](/user/strugglexiang) thanks!","createdAt":1561689698356},{"id":4002,"originId":"5d157eb634bca667bc6e37f8","articleId":755,"userId":1667,"content":"[@tzbcf](/user/tzbcf) 做这个项目，坚持维护了一年，大大小小的修改，最近学习了更多的nodejs知识和总结工作的项目经验，再次更新完善了，欢迎指点，O(∩_∩)O谢谢","createdAt":1561689782654},{"id":4003,"originId":"5d157ed3cdb1f967c1576885","articleId":755,"userId":1667,"content":"[@weizhuanhua](/user/weizhuanhua) 好的，谢谢，我也很喜欢这个域名，有空我再上SSL","createdAt":1561689811843},{"id":4004,"originId":"5d15860434bca667bc6e3868","articleId":755,"userId":829,"content":"膜拜大佬","createdAt":1561691652231},{"id":4005,"originId":"5d158f9934bca667bc6e38d6","articleId":755,"userId":1668,"content":"正好缺练手项目不错","createdAt":1561694105143},{"id":4006,"originId":"5d15a482cdb1f967c1576967","articleId":755,"userId":1667,"content":"[@OXOYO](/user/OXOYO) 在这社区里这么多大佬，我还不到大佬的级别啊，让大佬见笑了，共勉。","createdAt":1561699458092},{"id":4007,"originId":"5d15a4a334bca667bc6e3931","articleId":755,"userId":1667,"content":"[@Ansel-T](/user/Ansel-T) 嘻嘻，多谢，这项目坚持了一年了，我花了挺多心思去重构的，现在加了参数验证器，分层开发，中间件处理身份验证，全局错误处理，数据库表设计等等，也使用了七牛的CDN回源，体验打开网站的速度应该很快的，欢迎指点，共勉！：）","createdAt":1561699491351},{"id":4008,"originId":"5d5cfe6a421846662d983b75","articleId":755,"userId":1669,"content":"666，最近打算学习node，刚好可以参考你的项目，学习学习～","createdAt":1566375530611},{"id":4009,"originId":"5d5dec97e79eaa6628beb5c3","articleId":755,"userId":400,"content":"这blog样式也很赞啊","createdAt":1566436503065},{"id":4010,"originId":"5d6110cedcd8e81121a60b13","articleId":755,"userId":1259,"content":"博主，我拿你的前端项目做自己的个人博客可以吗","createdAt":1566642382378},{"id":4011,"originId":"5d636f1ddcd8e81121a61030","articleId":755,"userId":1670,"content":"赞","createdAt":1566797597838},{"id":4012,"originId":"5d64d755dcd8e81121a615dc","articleId":755,"userId":1671,"content":"最近正好想自己做博客，此时看见楼主帖子，太棒了","createdAt":1566889813629},{"id":4013,"originId":"5db95887ece3813ad9ba53fa","articleId":755,"userId":1667,"content":"[@heguangda](/user/heguangda) 可以啊，也可以一起优化做好~","createdAt":1572427911109},{"id":4014,"originId":"5db9c6caece3813ad9ba5515","articleId":755,"userId":1672,"content":"我最近也搞了一下blog，不过用的是Thinkjs、参考了很多东西，大半成品吧。直接结果分享给大家吧。[blog.shengchao.top](http://blog.shengchao.top/article/2)","createdAt":1572456138785},{"id":4015,"originId":"5dbe3112ece3813ad9ba5eaf","articleId":755,"userId":111,"content":"koa2 怎么接收axios post的 json数据？ \r\n前端post \r\n> \r\naxios.post('/api/test', {'value':100}).then(res => {  console.log(res.data); });\r\n\r\n后端打印 ctx.request.body 为空\r\n查看  ctx.request是 \r\n>   'content-type': 'application/json; charset=UTF-8',\r\n     'x-requested-with': 'XMLHttpRequest',\r\n     'content-length': '13',\r\n     connection: 'keep-alive',","createdAt":1572745490278},{"id":4016,"originId":"5dcff368a9f4592e749e135d","articleId":755,"userId":1667,"content":"[@s749312025](/user/s749312025) 不错哦","createdAt":1573909352610},{"id":4017,"originId":"5dcff47aa9f4592e749e1362","articleId":755,"userId":1667,"content":"[@yakczh](/user/yakczh) 首先你检查一下是否发送正确吧，一般接收的对象分为这几种：\r\n\r\n```\r\nbody: ctx.request.body,\r\nquery: ctx.request.query,\r\npath: ctx.params,\r\nheader: ctx.request.header\r\n```\r\n\r\n","createdAt":1573909626869},{"id":4018,"originId":"5dcff4c67651572e0955d7fe","articleId":755,"userId":1667,"content":"今天更新迭代了，优化了查询接口方法，提高性能，同时新增了专栏，回复等功能，欢迎一起学习，共勉！","createdAt":1573909702832},{"id":4019,"originId":"5dd122fb7651572e0955d8ec","articleId":755,"userId":1673,"content":"做一个拦截器 将admin 接口拦截掉 限制访问 同在广州 交流下 我qq 605214875","createdAt":1573987067638},{"id":4020,"originId":"5dd19d927651572e0955d9c3","articleId":755,"userId":705,"content":"建议加上SSR","createdAt":1574018450215},{"id":4021,"originId":"5dd1e839a9f4592e749e14f9","articleId":755,"userId":1667,"content":"[@nwljy](/user/nwljy) 好啊~","createdAt":1574037561314},{"id":4022,"originId":"5dd1e8e3a9f4592e749e1501","articleId":755,"userId":1667,"content":"[@gawinwu](/user/gawinwu) 谢谢建议，如果选择SSR技术方案，我可能偏向于Koa2 ejs模板渲染，做这个开源项目的目的是为了帮助更多人一起学习进步，做一个参考学习，当然，有更多朋友的建议会让项目更加完善，谢谢你哦~","createdAt":1574037731188},{"id":4023,"originId":"5dd207747651572e0955daaa","articleId":755,"userId":103,"content":"3秒的时候我就关闭了网页，后来测试一下8秒打开，你确定博客用Vue开发好吗？","createdAt":1574045556875},{"id":4024,"originId":"5dd20ed77651572e0955daf2","articleId":755,"userId":1667,"content":"[@yuedun](/user/yuedun) 你好，我刚才优化了一下，你可以再测试一下，是否打开速度快多了？","createdAt":1574047447803},{"id":4025,"originId":"5dd20fe7a9f4592e749e164e","articleId":755,"userId":1667,"content":"[@yuedun](/user/yuedun) 欢迎测试：www.boblog.com","createdAt":1574047719010},{"id":4026,"originId":"5dd213ce7651572e0955db26","articleId":755,"userId":103,"content":"[@liangfengbo](/user/liangfengbo) 现在是快了，1秒打开。","createdAt":1574048718637},{"id":4027,"originId":"5dd214ada9f4592e749e168a","articleId":755,"userId":1667,"content":"[@yuedun](/user/yuedun) 嗯嗯，谢谢你哦~","createdAt":1574048941716},{"id":4028,"originId":"5dd214c67651572e0955db34","articleId":755,"userId":1674,"content":"小白问个问题，就是我项目跑起来后，密码登录的时候访问路径直接显示  Cannot GET /login  是什么原因。  后台项目好像我除了/的重定向后访问的地址可以，其他的都没办法直接通过路径打开（显示 Cannot GET /  或Cannot POST）","createdAt":1574048966583},{"id":4029,"originId":"5dd2153ca9f4592e749e1699","articleId":755,"userId":1667,"content":"[@lzb93](/user/lzb93) 请问是你启动我这个项目出现的问题？","createdAt":1574049084365},{"id":4030,"originId":"5dd216727651572e0955db4c","articleId":755,"userId":1667,"content":"[@lzb93](/user/lzb93) 已修复了，谢谢你哦，你可以 git pull 拉取一下最新代码哦！","createdAt":1574049394870},{"id":4031,"originId":"5dd235b37651572e0955dbc5","articleId":755,"userId":1674,"content":"登录鉴权失败 跳回/login的页面，让我一直觉得有问题，密码错了没有提示直接刷新页面= =  。","createdAt":1574057395455},{"id":4032,"originId":"5dd238bb7651572e0955dbdb","articleId":755,"userId":1674,"content":"感谢楼主值得学习哈~~~慢慢摸索，学着打包到线上","createdAt":1574058171151},{"id":4033,"originId":"5dd240f3a9f4592e749e1772","articleId":755,"userId":1667,"content":"[@lzb93](/user/lzb93)  谢谢你的指正，我已经优化这种情况了，你可以 git pull 拉取一下最新代码哦！","createdAt":1574060275619},{"id":4034,"originId":"5dd24173a9f4592e749e177c","articleId":755,"userId":1667,"content":"[@lzb93](/user/lzb93) 好呀，一起学习进步，共勉~","createdAt":1574060403359},{"id":4035,"originId":"5dd2a5ac7651572e0955dd77","articleId":755,"userId":636,"content":"想了解下楼主服务器配置，还有前端打包加速方案。还望赐教。","createdAt":1574086060130},{"id":4036,"originId":"5dd3371a7651572e0955dddd","articleId":755,"userId":1667,"content":"[@blackmatch](/user/blackmatch) 服务器配置是最低配1核1G，前端优化主要做了按需加载，CDN储存静态资源等","createdAt":1574123290109},{"id":4037,"originId":"5dd3422ba9f4592e749e19d4","articleId":755,"userId":1674,"content":"[@liangfengbo](/user/liangfengbo) node搭建服务器项目环境有啥好的教程吗~\r\n","createdAt":1574126123003},{"id":4038,"originId":"5dd34473a9f4592e749e19e1","articleId":755,"userId":1667,"content":"[@lzb93](/user/lzb93) Google，baidu一大堆啦，我部署时除了基本的环境，还有Git用来拉取代码，MySQL数据库，Nginx转发等，pm2启动管理koa2项目，建议自己一边搜Google，一边配置，遇到问题想办法解决，这样会有意义，且大大提升自己：）","createdAt":1574126707979},{"id":4039,"originId":"5dd345c2a9f4592e749e1a0a","articleId":755,"userId":1674,"content":"[@liangfengbo](/user/liangfengbo) 行哈，谢谢楼主","createdAt":1574127042039},{"id":4040,"originId":"5dd3f5067651572e0955e0ec","articleId":755,"userId":705,"content":"[@liangfengbo](/user/liangfengbo) Koa2 + ejs 不错，加油啊，支持你","createdAt":1574171910883},{"id":4041,"originId":"5df630a976a67b5e0e4182d7","articleId":755,"userId":1667,"content":"[@gawinwu](/user/gawinwu) 你好，应你的所的需求，新增了 ejs 服务端渲染，也做了一些优化工作，对比前端分离的项目，各自有优点，从中也学习到不少的知识，谢谢你的支持与建议。","createdAt":1576415401417},{"id":4042,"originId":"5df6315828dce75de5435cea","articleId":755,"userId":1667,"content":"[@2019-12-15](/user/2019-12-15) 更新迭代了新代码，主要新增的内容有：\r\n1. 新增了 ejs 模板渲染\r\n2. 使用了 Redis 缓存\r\n3. 做了一些性能优化，如缓存机制，事件的节流，图片懒加载等等在项目中实际运用。\r\n欢迎大家查阅与多多指教，谢谢(#^.^#)","createdAt":1576415576828},{"id":4043,"originId":"5df6e35c76a67b5e0e418374","articleId":755,"userId":113,"content":"[@liangfengbo](/user/liangfengbo) 很喜欢你博客的风格，可否为[Cabloy-CMS](https://cabloy.com/zh-cn/articles/cms-introduce.html)开发一套主题，然后发布到[Cabloy商店](https://store.cabloy.com/zh-cn/)里面？","createdAt":1576461148249},{"id":4044,"originId":"5df826bd28dce75de5436189","articleId":755,"userId":1667,"content":"[@zhennann](/user/zhennann) Hello~ 我刚刚看了一下 Cabloy-CMS，发现网站主题和开源内容不错呀，做得很棒👍","createdAt":1576543933779},{"id":4045,"originId":"5df8383676a67b5e0e418735","articleId":755,"userId":113,"content":"[@s749312025](/user/s749312025) 你的博客登录github失败","createdAt":1576548406724},{"id":4046,"originId":"5df37b0dc9ab2e579c2156e5","articleId":756,"userId":21,"content":"对于依赖重合度较高的项目，其实可以装到一个目录内，然后软链到多个自己的项目","createdAt":1576237837120},{"id":4047,"originId":"5df3e89b76a67b5e0e418110","articleId":756,"userId":22,"content":"小姐姐们的视频是挺占空间的，我一个朋友说，他可以帮你保存","createdAt":1576265883123},{"id":4048,"originId":"5df48f6728dce75de5435ba2","articleId":756,"userId":1197,"content":"900g的女朋友表示无压力","createdAt":1576308583511},{"id":4049,"originId":"5df506ff76a67b5e0e418205","articleId":756,"userId":108,"content":"要代码还是要小姐姐，自己看着办","createdAt":1576339199070},{"id":4050,"originId":"5df6f5b376a67b5e0e4183e4","articleId":756,"userId":1676,"content":"我就是2楼的那个朋友","createdAt":1576465843831},{"id":4051,"originId":"5df301d0df1b9a40d14c6648","articleId":757,"userId":109,"content":"不支持 ts 没前途。","createdAt":1576206800586},{"id":4052,"originId":"5df30256c9ab2e579c2154c9","articleId":757,"userId":886,"content":"直接用nest.js不就行了...","createdAt":1576206934046},{"id":4053,"originId":"5df3069cc9ab2e579c2154e3","articleId":757,"userId":545,"content":"哈 ，楼上老哥也说了，直接用 nest.js   https://docs.nestjs.cn/","createdAt":1576208028265},{"id":4054,"originId":"5df30916df1b9a40d14c6679","articleId":757,"userId":111,"content":"直接用trails  \r\n>  Create New Model\r\n    yo trails:model <model-name>\r\n\r\n  Create New Controller\r\n    yo trails:controller <controller-name>\r\n\r\n  Create New Policy\r\n    yo trails:policy <policy-name>\r\n\r\n  Create New Service\r\n    yo trails:service <service-name>\r\n\t\r\n\tnode server.js","createdAt":1576208662512},{"id":4055,"originId":"5df37936c9ab2e579c2156d6","articleId":757,"userId":21,"content":"写的不错，但是事实上都是设计模式的变形。\r\n对于密钥，其实k8s提供了很好的secret方案，使用环境变量注入和文件覆盖重写都提供了很好的手段。当然.env方案在设施不健全也挺好使的","createdAt":1576237366175},{"id":4056,"originId":"5df4e66b76a67b5e0e4181ee","articleId":757,"userId":22,"content":"1. 直接用 nest。\r\n2. 目录结构不推荐使用角色/功能来划分，而应该基于模块划分。","createdAt":1576330859569},{"id":4057,"originId":"5c4695153b948a2b4ab7058a","articleId":758,"userId":21,"content":"支持，文章可以说是越来越好了\r\n\r\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1548129557112},{"id":4058,"originId":"5c492ac23b948a2b4ab7106f","articleId":758,"userId":845,"content":"get it\r\n但这种级别的代码优化工作，是不是交给webpack这类的工具自动处理更合适？","createdAt":1548298946465},{"id":4059,"originId":"5c4956c43b948a2b4ab7118c","articleId":758,"userId":1678,"content":"好文。支持一下","createdAt":1548310212634},{"id":4060,"originId":"5c4a5edbf9075c1ef7137e05","articleId":758,"userId":1679,"content":"mark","createdAt":1548377819154},{"id":4061,"originId":"5c4fbb873819b801aa5a24b8","articleId":758,"userId":1680,"content":"好文章 mark","createdAt":1548729223975},{"id":4062,"originId":"5c514a65a4647e02328f26e3","articleId":758,"userId":377,"content":"学习了，用了十年的JS了，还有好多细节看了文章才明白。","createdAt":1548831333585},{"id":4063,"originId":"5c514e283819b801aa5a2cc3","articleId":758,"userId":171,"content":"先mark","createdAt":1548832296282},{"id":4064,"originId":"5c78fb2f0d249a149624f405","articleId":758,"userId":1681,"content":"赞👍","createdAt":1551432495751},{"id":4065,"originId":"5c7dce535b8cb21491ca5d61","articleId":758,"userId":406,"content":"赞👍\r\n就是内容有写老，刚看了几页，发现其中：“V8 不使用中间字节码，从而不需要解释器。”，这个已经在V8 的某个版本后，引入了TurboFan，解释器 Ignition 根据语法树生成字节码，这个是默认打开。","createdAt":1551748691555},{"id":4066,"originId":"5c7e252a5b8cb21491ca6137","articleId":758,"userId":1197,"content":"好文章","createdAt":1551770922185},{"id":4067,"originId":"5df4812c28dce75de5435b85","articleId":758,"userId":1682,"content":"深度好文","createdAt":1576304940717},{"id":4068,"originId":"5df1d2d6df1b9a40d14c6372","articleId":759,"userId":133,"content":"ding~","createdAt":1576129238689},{"id":4069,"originId":"5df2ee05df1b9a40d14c65aa","articleId":759,"userId":615,"content":"这个想法6啊","createdAt":1576201733907},{"id":4070,"originId":"5df0fecedf1b9a40d14c6202","articleId":760,"userId":513,"content":"我以为是分享","createdAt":1576074958220},{"id":4071,"originId":"5de9d3ce14ffa4125a544a8a","articleId":761,"userId":1684,"content":"厉害, 学习了","createdAt":1575605198443},{"id":4072,"originId":"5df0b672c9ab2e579c214ff1","articleId":761,"userId":167,"content":"控制手机原理是啥??","createdAt":1576056434308},{"id":4073,"originId":"5def1a2d484806122a97e655","articleId":763,"userId":111,"content":"不想让微信防问的链接可以用socket.io来发 \r\nserver.js\r\n```JS\r\nvar fs = require('fs');\r\nvar app = require('http').createServer( (req,resp)=>{\r\n fs.readFile(__dirname + '/client.htm',(err,data)=>{\r\n    resp.writeHead(200);\r\n    resp.end(data);\r\n  });\r\n})\r\n\r\nvar io = require('socket.io')(app);\r\napp.listen(8080);\r\n \r\nio.on('connection',  (socket) =>{\r\n  socket.on('links', (data) => {    io.emit('links', data);  });\r\n});\r\n```\r\nclient.htm\r\n```HTM\r\n<!DOCTYPE HTML>\r\n<html lang=\"en-US\">\r\n<head>\r\n\t<meta charset=\"UTF-8\">\r\n\t<title></title>\r\n<script src=\"/socket.io/socket.io.js\"></script>\r\n<script>\r\n  var socket = io('http://localhost:8080');\r\n  socket.on('links', function (data) {\r\n    document.getElementById('list').innerHTML+=\"<li>\"+data.msg;\r\n  });\r\n\r\nfunction send(){\r\n    socket.emit('links', { msg: document.getElementById('msg').value });\r\n}\r\n</script>\r\n</head>\r\n<body>\r\n<ul id='list'></ul>\r\n\t<input id=\"msg\" /><button onclick=\"send()\" >send </button>\r\n</body>\r\n</html>\r\n```\r\n","createdAt":1575950893727},{"id":4074,"originId":"5def374e484806122a97e6bb","articleId":763,"userId":135,"content":"[@yakczh](/user/yakczh) 你这是把链接封装在一个页面里面请求啊.. 这不用socket的也一样绕过了.\r\n没有介意它请求,就是吐槽下哈哈哈😁","createdAt":1575958350720},{"id":4075,"originId":"5def394214ffa4125a545565","articleId":763,"userId":1507,"content":"支付宝,闲鱼好像都会","createdAt":1575958850533},{"id":4076,"originId":"5def447214ffa4125a5455a7","articleId":763,"userId":358,"content":"应该是预读取标题和 meta，然后显示为 卡片 的那个功能导致的。","createdAt":1575961714998},{"id":4077,"originId":"5defa240df1b9a40d14c5ea4","articleId":763,"userId":22,"content":"为了读取 meta 吧，一般网站都会读取，比如知乎、medium、twitter、微博。。。。。","createdAt":1575985728243},{"id":4078,"originId":"5df09a3fdf1b9a40d14c60ce","articleId":763,"userId":109,"content":"正常的。","createdAt":1576049215495},{"id":4079,"originId":"5def220714ffa4125a5454e3","articleId":765,"userId":688,"content":"8000次150还是有点小贵","createdAt":1575952903984},{"id":4080,"originId":"5c74ae20ab86b86ddf6b2dad","articleId":766,"userId":568,"content":"真有心","createdAt":1551150624020},{"id":4081,"originId":"5c74b1d5a667ed6d807b91f9","articleId":766,"userId":132,"content":"有心了, 学习一下表设计","createdAt":1551151573080},{"id":4082,"originId":"5c74b4bba667ed6d807b921d","articleId":766,"userId":1689,"content":"厉害","createdAt":1551152315683},{"id":4083,"originId":"5c74d694ab86b86ddf6b2e96","articleId":766,"userId":359,"content":"已star，太牛了","createdAt":1551160980865},{"id":4084,"originId":"5c74e313a667ed6d807b932b","articleId":766,"userId":151,"content":"很棒","createdAt":1551164179072},{"id":4085,"originId":"5c75058aab86b86ddf6b305e","articleId":766,"userId":1197,"content":"写是可以写出来 但是我好奇这种东西 怎么做成产品","createdAt":1551173002645},{"id":4086,"originId":"5c7529c0a667ed6d807b9532","articleId":766,"userId":1688,"content":"谢谢大家，感谢star😄","createdAt":1551182272338},{"id":4087,"originId":"5c7529dea667ed6d807b9535","articleId":766,"userId":1688,"content":"[@ResJay](/user/ResJay) 😂服务器就是硬伤","createdAt":1551182302979},{"id":4088,"originId":"5c755115ab86b86ddf6b317d","articleId":766,"userId":1690,"content":"不错 支持 \r\n有空研究学习下","createdAt":1551192341539},{"id":4089,"originId":"5c75808fa667ed6d807b9615","articleId":766,"userId":1691,"content":"已star 支持学习下","createdAt":1551204495105},{"id":4090,"originId":"5c75ebbba667ed6d807b96df","articleId":766,"userId":1197,"content":"[@aermin](/user/aermin)  不是 就算服务器不是硬伤 你准备怎么扩大用户和盈利","createdAt":1551231931329},{"id":4091,"originId":"5c75f55aab86b86ddf6b32c4","articleId":766,"userId":1688,"content":"[@ResJay](/user/ResJay)  如果是创业的话  用户量和盈利是要考虑  可是这是个开源项目😂 而且也不会像Telegram那么牛 蛮想把这个弄成对github开发者有用的工具的（所以开发方向是多跟github做集成），有想法和建议的话求指导","createdAt":1551234394585},{"id":4092,"originId":"5c7cb9525b8cb21491ca5916","articleId":766,"userId":1688,"content":"更新： ![image.png](//static.cnodejs.org/FjCKDXuMOHNH9MkW4NmU1-tqc01K)","createdAt":1551677778545},{"id":4093,"originId":"5c81e84a5b8cb21491ca72e6","articleId":766,"userId":1688,"content":"更新功能：\r\n聊天列表选中背景颜色\r\n群里@某人\r\n\r\n![image.png](//static.cnodejs.org/FoMPYiHW_veVv2kr5rZOYNmIV0FI)","createdAt":1552017482232},{"id":4094,"originId":"5c83c1b5acb681372d4168cb","articleId":766,"userId":1418,"content":"膜拜大佬","createdAt":1552138677269},{"id":4095,"originId":"5c83e427acb681372d41693d","articleId":766,"userId":1688,"content":"[@liub1934](/user/liub1934) 不是大佬😂一起学习交流😄","createdAt":1552147495325},{"id":4096,"originId":"5c85c3b87ce0df3732426b7c","articleId":766,"userId":829,"content":"膜拜大佬","createdAt":1552270264706},{"id":4097,"originId":"5c8e62547ce0df3732428f71","articleId":766,"userId":1688,"content":"更新： 支持PWA(缓存那块有待挖掘) 修复若干bug\r\n\r\n![image](https://user-images.githubusercontent.com/24861316/54493301-59b3ce00-4909-11e9-9e0b-ce80d04d51e1.png)\r\n![image](https://user-images.githubusercontent.com/24861316/54492992-42271600-4906-11e9-8828-a79e018af1c8.png)\r\n\r\n\r\nTips: 如何在chrome浏览器中开启对PWA的支持?\r\n\r\n![image](https://user-images.githubusercontent.com/24861316/54492876-3ab33d00-4905-11e9-8283-089f2af82399.png)\r\n![image](https://user-images.githubusercontent.com/24861316/54493160-9e3e6a00-4907-11e9-8f26-427c6753e2a4.png)","createdAt":1552835156530},{"id":4098,"originId":"5c8ee6e4acb681372d4190e8","articleId":766,"userId":661,"content":"[@ruyuejun2345](/user/ruyuejun2345)","createdAt":1552869092149},{"id":4099,"originId":"5c96483afd41137eb7660d66","articleId":766,"userId":1688,"content":"我又来更新啦\r\n更新：修了些小瑕疵 和 \r\n1.支持图片查看\r\n![图片查看](https://cdn.aermin.top/1_1552127570812_WechatIMG301.jpeg)\r\n\r\n2.刷新或重开页面，未读信息的数目将仍然且准确显示（[实现思路及代码](https://github.com/aermin/blog/issues/60)）\r\n![未读消息](https://cdn.aermin.top/333333333333333.gif)\r\n\r\n\r\n\r\n\r\n\r\n\r\n","createdAt":1553352762301},{"id":4100,"originId":"5c984120fd41137eb76612dc","articleId":766,"userId":755,"content":"我也有个聊天室, 交流一下\r\nhttps://fiora.suisuijiang.com/","createdAt":1553482016255},{"id":4101,"originId":"5c98d097fd41137eb76618f8","articleId":766,"userId":1688,"content":"[@yinxin630](/user/yinxin630)  🐂🍺 赞👍","createdAt":1553518743671},{"id":4102,"originId":"5ca2bb0931010b2dfbb420c9","articleId":766,"userId":1688,"content":"更新：\r\n1.按需加载js文件，加载时间2.3s缩短为1.3s\r\n2.可直接发送在输入框粘贴复制的图\r\n3.修复了移动端的若干bug\r\n4.群主可编辑群资料\r\n\r\n![image.png](//static.cnodejs.org/FpQVSWYSGpPULqGBtCXv1X7A7u1i)\r\n\r\n","createdAt":1554168585816},{"id":4103,"originId":"5ca2bdfb31010b2dfbb42101","articleId":766,"userId":1692,"content":"非常不错","createdAt":1554169339767},{"id":4104,"originId":"5cce824d776fb66e0d171f4b","articleId":766,"userId":1688,"content":"又来更新进度啦：\r\n支持多设备同时登陆\r\n分享群|联系人给其他的人|群（应用内|外都支持）\r\n接口请求频率限制 \r\n404页面\r\n删除好友","createdAt":1557037645440},{"id":4105,"originId":"5ccf9184776fb66e0d172438","articleId":766,"userId":1161,"content":"看起来不错哦！！","createdAt":1557107076079},{"id":4106,"originId":"5ccf95c9776fb66e0d17246e","articleId":766,"userId":419,"content":"666","createdAt":1557108169310},{"id":4107,"originId":"5cd152c4bd52e97fe19e1bcd","articleId":766,"userId":1693,"content":"小白觉得狠厉害，触不可及。","createdAt":1557222084995},{"id":4108,"originId":"5cd22df3bd52e97fe19e1e92","articleId":766,"userId":59,"content":"http://bsj.test.bxd365.com/#/  功能超级全","createdAt":1557278195208},{"id":4109,"originId":"5cd40634e333b24979ca9d2b","articleId":766,"userId":1694,"content":"后台代码跑步起来呀","createdAt":1557399092795},{"id":4110,"originId":"5cd4f0bbce97fe69027a4043","articleId":766,"userId":1688,"content":"[@fenxiangHappy](/user/fenxiangHappy) 报什么错呢 很多人试过了都可以的 ","createdAt":1557459131547},{"id":4111,"originId":"5cd8d042e57aac76fed29e43","articleId":766,"userId":1694,"content":"![1557712760(1).jpg](//static.cnodejs.org/FuY2eTwzmq6YBb_7PlI_LGGMWI46)，sql语句跑步起来。![1557712806(1).jpg](//static.cnodejs.org/FirCpre5UaySt3ivo88q6VpF7a3p)，D:\\ghChat-master\\server>进入到这个目录npm run start。","createdAt":1557712962566},{"id":4112,"originId":"5cd8dc44d5fff6772a2fe08b","articleId":766,"userId":1688,"content":"[@fenxiangHappy](/user/fenxiangHappy) ![image.png](//static.cnodejs.org/FpjJkg1V8Co6tZ9AWfDil5I6iRZ9)   有没有按照这个来呢  ?? 避免回复等太久，可以加群聊 https://im.aermin.top/group_chat/ddbffd80-3663-11e9-a580-d119b23ef62e   ","createdAt":1557716036159},{"id":4113,"originId":"5cd91e38e57aac76fed2a0e6","articleId":766,"userId":1694,"content":"有啊","createdAt":1557732920674},{"id":4114,"originId":"5cd91e43e57aac76fed2a0e9","articleId":766,"userId":1694,"content":"群号多少呀","createdAt":1557732931002},{"id":4115,"originId":"5cd91fdbe57aac76fed2a0f0","articleId":766,"userId":1688,"content":"[@fenxiangHappy](/user/fenxiangHappy) https://im.aermin.top/group_chat/ddbffd80-3663-11e9-a580-d119b23ef62e 点击直接可以加进来","createdAt":1557733339506},{"id":4116,"originId":"5cd94362d5fff6772a2fe412","articleId":766,"userId":1694,"content":"好的","createdAt":1557742434819},{"id":4117,"originId":"5cd94b7de57aac76fed2a231","articleId":766,"userId":132,"content":"观摩一下","createdAt":1557744509804},{"id":4118,"originId":"5de914a314ffa4125a54490d","articleId":766,"userId":1688,"content":"[@afacode](/user/afacode) 感谢啦\r\n\r\n借此更新进度：（半年内断断续续有点点更新😂\r\n1.更新优化了websocket管理，准确的断开重连，一直只维持一条websocket连接\r\n2. 滚动条卡顿\r\n3. 群成员一次性展示太多没必要，先展示在线成员；\r\n4.后端支持ts及重构\r\n5.其他各种小问题的修补\r\n","createdAt":1575556259359},{"id":4119,"originId":"5de9b6c2484806122a97dabf","articleId":766,"userId":1547,"content":"考虑视频和语音吗[@aermin](/user/aermin)","createdAt":1575597762783},{"id":4120,"originId":"5de9bbbf14ffa4125a5449db","articleId":766,"userId":1688,"content":"[@shenjianzch](/user/shenjianzch) 视频感觉可以考虑 感谢建议😄","createdAt":1575599039160},{"id":4121,"originId":"5dedda08484806122a97e314","articleId":766,"userId":33,"content":"[@aermin](/user/aermin) 图片不能左右移动啊，很难受，","createdAt":1575868936778},{"id":4122,"originId":"5def0e28484806122a97e62a","articleId":766,"userId":44,"content":"mark","createdAt":1575947816535},{"id":4123,"originId":"5ded99aa484806122a97e1e0","articleId":767,"userId":358,"content":"太赞了。。。 整理下排版投稿一份到我们的知乎专栏吧。\r\n\r\n这个问题之前偶尔也会有人反馈 issue，但没 Win 机器，感觉楼主很仔细的分析。\r\n\r\nPS：惭愧，egg-init 是我当时参与到 Egg 时开始写的第一份代码，那段代码一直很不满意，一直没有时间重构。","createdAt":1575852458181},{"id":4124,"originId":"5dedaf2314ffa4125a545083","articleId":767,"userId":5,"content":"[@atian25](/user/atian25) 好的，重构了就没有我啥事了哈哈","createdAt":1575857955217},{"id":4125,"originId":"5dedd8b914ffa4125a545138","articleId":767,"userId":11,"content":"很有意思的问题，看了下感觉像是 libuv 使用 IOCP 在 windows 下实现 eventloop 的一个 bug，demo3 的 setInterval 不生效是因为 inquirer 里选择完毕后会去 close readline：\r\n```\r\n// lib/baseUI.js\r\nthis.rl.output.end();\r\nthis.rl.pause();\r\nthis.rl.close();\r\n```\r\n然而 readline close 逻辑导致了 event loop 阻塞了，但是也不是主线程死循环的那种阻塞，而是单纯的无法进入下一个 tick。我试了下，在这种情况下就算起一个额外的 uv thread 线程，然后等 demo3 选择完卡住后，在外部触发其调用 uv\\_async\\_send 也无法再触发主线程注册的回调，但是同样的例子在 mac/linux 下都是好的，说明基于 kqueue/epoll 实现的 event loop 是没有这个 bug 的","createdAt":1575868601879},{"id":4126,"originId":"5dede9a4484806122a97e35c","articleId":767,"userId":615,"content":"太强了。。。","createdAt":1575872932164},{"id":4127,"originId":"5dee005614ffa4125a54524a","articleId":767,"userId":36,"content":"一路调试到底，很猛","createdAt":1575878742574},{"id":4128,"originId":"5dee102214ffa4125a5452bb","articleId":767,"userId":109,"content":"这个坑是nodejs还是windows呢～","createdAt":1575882786560},{"id":4129,"originId":"5dee1147484806122a97e44a","articleId":767,"userId":31,"content":"想必费了很大精力，佩服佩服","createdAt":1575883079778},{"id":4130,"originId":"5dee3b16484806122a97e4be","articleId":767,"userId":1644,"content":"值得学习了~","createdAt":1575893782601},{"id":4131,"originId":"5dee4715484806122a97e4d6","articleId":767,"userId":5,"content":"[@hyj1991](/user/hyj1991) 赞，奇怪的是以下的rl.close()不会阻塞\r\n```js\r\nconst readline = require(\"readline\");\r\n\r\nconst rl = readline.createInterface({\r\n input: process.stdin,\r\n output: process.stdout\r\n});\r\nrl.input.on('keypress', () => {\r\n rl.close();\r\n})\r\n\r\nsetInterval(() => {\r\n console.log('test')\r\n}, 1000);\r\n```\r\n但是如果换成这样就阻塞了\r\n```js\r\nconst readline = require(\"readline\");\r\n\r\nconst rl = readline.createInterface({\r\n input: process.stdin,\r\n output: process.stdout\r\n});\r\n\r\n setTimeout(() => {\r\n     rl.close();\r\n }, 1000);\r\nsetInterval(() => {\r\n console.log('test')\r\n}, 5000);\r\n```","createdAt":1575896853705},{"id":4132,"originId":"5debb1bf14ffa4125a544e44","articleId":768,"userId":1695,"content":"👍","createdAt":1575727551793},{"id":4133,"originId":"5dedb4f6484806122a97e2a0","articleId":768,"userId":418,"content":"写的很详细，支持，如果有更复杂的例子就好了","createdAt":1575859446399},{"id":4134,"originId":"5de5d7d16043397a546db1fd","articleId":769,"userId":109,"content":"何来之坑？","createdAt":1575344081947},{"id":4135,"originId":"5de5dab76043397a546db213","articleId":769,"userId":117,"content":"[@waitingsong](/user/waitingsong) 返回天数从1开始返回月份从零开始还不坑啊","createdAt":1575344823529},{"id":4136,"originId":"5de5ea1139af564604bc048d","articleId":769,"userId":171,"content":"本来就是这样啊，自己不看文档怪谁","createdAt":1575348753474},{"id":4137,"originId":"5de6308239af564604bc0719","articleId":769,"userId":109,"content":"[@chenkai0520](/user/chenkai0520) \r\n如果这么说，那么 js，php等等语言迭代数组的下标从0开始而非1也是坑啊～～\r\n只能说语言设计如此。不了解的下脚都是坑，爬不出来的都是洞。","createdAt":1575366786234},{"id":4138,"originId":"5de66ac56043397a546db600","articleId":769,"userId":22,"content":"JS说：“Java老大哥把这个锅背一下”","createdAt":1575381701703},{"id":4139,"originId":"5de7045e6043397a546db668","articleId":769,"userId":726,"content":"有意思","createdAt":1575421022764},{"id":4140,"originId":"5de7139639af564604bc0943","articleId":769,"userId":18,"content":"这个坑早就有了。我现在见过比较多的是，js手动拼接 YYYYMMDD 的日期，月份经常忘记补上0，拼成 2019112 这种。","createdAt":1575424918948},{"id":4141,"originId":"5de8689714ffa4125a544525","articleId":769,"userId":516,"content":"Data 不足的地方moment补上，这样还不够的话，，，","createdAt":1575512215202},{"id":4142,"originId":"5de8918f484806122a97d7a0","articleId":769,"userId":1696,"content":"楼上正解！或是使用 dayjs","createdAt":1575522703634},{"id":4143,"originId":"5de8b58b484806122a97d8c8","articleId":769,"userId":109,"content":"[@alsotang](/user/alsotang) 2019112  这个属于挖坑。。","createdAt":1575531915053},{"id":4144,"originId":"5de8c8fb484806122a97d932","articleId":769,"userId":1507,"content":"Java 也是这样的, js当初抄Java把这个坑也抄过来了","createdAt":1575536891390},{"id":4145,"originId":"5dea274b484806122a97dd61","articleId":769,"userId":59,"content":"月份的这个坑确实不符合常理","createdAt":1575626571399},{"id":4146,"originId":"5dea2afd484806122a97dd66","articleId":769,"userId":1697,"content":"js 在日期处理这块确实到处都是坑，需要 moment 这类的库来抹平","createdAt":1575627517923},{"id":4147,"originId":"5dea596314ffa4125a544c7e","articleId":769,"userId":108,"content":"moment 和 day.js 都太重. 使用函数式的 date-fns 才是未来","createdAt":1575639395122},{"id":4148,"originId":"58f376dd49056f034834793b","articleId":770,"userId":1614,"content":"666","createdAt":1492350685934},{"id":4149,"originId":"58f3908bbbaf2f3f569bdee9","articleId":770,"userId":314,"content":"666666\n\n[🚀🚀🚀🚀](https://lzq920.top)","createdAt":1492357259551},{"id":4150,"originId":"58f412649116585a56e2061e","articleId":770,"userId":406,"content":"又重复造轮子，还乐此不疲。。。毫无意义，再说了，我个人觉得，mvvm 才是nodejs 适合的实践模式，而不是mvc！\r\nmvc 应用于java这种工程语言比较适合，用于nodejs。。。。好吧，我看到了IOC。。这个从java 引入的概念，你知道为啥java需要ioc，\r\njava 是个OO 的东西。要符合一切都是XXX。。nodejs 是么？js更多的是FN。。。\r\n再说了，不少用MVC抱怨的Java童鞋，都觉得能做个 状态-行为-模型（State-Action-Model，SAM）的SAM框架才是出路吗？mvc 的弊端多啊。\r\n好了，这些nodejs 还自己玩mvc ，还是重复的轮子。。。。。\r\n\r\n","createdAt":1492390500305},{"id":4151,"originId":"58f42148bbaf2f3f569bdefb","articleId":770,"userId":1699,"content":"推荐thinkjs","createdAt":1492394312320},{"id":4152,"originId":"58f42f2f9116585a56e20637","articleId":770,"userId":89,"content":"网友说不如egg","createdAt":1492397871997},{"id":4153,"originId":"58f4ab5d9116585a56e20681","articleId":770,"userId":1698,"content":"[@cnlile](/user/cnlile) 如果你不知道Laravel在PHP界的地位就不会明白我为什么要做这件事情。","createdAt":1492429661030},{"id":4154,"originId":"58f4ab7abbaf2f3f569bdf3d","articleId":770,"userId":1698,"content":"[@zhentaoo](/user/zhentaoo) 如果你不知道Laravel在PHP界的地位就不会明白我为什么要做这件事情。","createdAt":1492429690386},{"id":4155,"originId":"58f4ab7fbbaf2f3f569bdf3f","articleId":770,"userId":1698,"content":"[@i5ting](/user/i5ting) 如果你不知道Laravel在PHP界的地位就不会明白我为什么要做这件事情。","createdAt":1492429695279},{"id":4156,"originId":"58f4c32e523b9d0956dad676","articleId":770,"userId":1700,"content":"又是新轮子，才入行不久的萌新，感到太眼花缭乱了\n\n来自酷炫吊炸天的 CNodeMD","createdAt":1492435758222},{"id":4157,"originId":"58f4c546dcf05024569408a0","articleId":770,"userId":21,"content":"[@cnlile](/user/cnlile) 人家又没损失你什么，没必要抨击。支持作者，毕竟产出不易。","createdAt":1492436294295},{"id":4158,"originId":"58f4d65fbbaf2f3f569bdf55","articleId":770,"userId":419,"content":"顶。。。。。","createdAt":1492440671042},{"id":4159,"originId":"58f4e390dcf05024569408a5","articleId":770,"userId":1499,"content":"楼上都是一群搞前端的，你不会搭理他们\n\n来自 [KoaHub.js](https://github.com/koahubjs/koahub)","createdAt":1492444048835},{"id":4160,"originId":"58f55dc9523b9d0956dad67f","articleId":770,"userId":383,"content":"先静静看看，到底效果怎样\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1492475337717},{"id":4161,"originId":"58f573e2523b9d0956dad68a","articleId":770,"userId":466,"content":"。。。。。每一款产品出来都自称是 XX 界的老大，世界最 X，全国最 X","createdAt":1492480994122},{"id":4162,"originId":"58f59022523b9d0956dad6b0","articleId":770,"userId":1698,"content":"[@rwing](/user/rwing) 额，有么","createdAt":1492488226905},{"id":4163,"originId":"58f592d3523b9d0956dad6b4","articleId":770,"userId":1701,"content":"感觉有很多其他语言的概念 强行拿来搞 node 了 ","createdAt":1492488915404},{"id":4164,"originId":"58f5971f9116585a56e206ca","articleId":770,"userId":1698,"content":"[@jkjk77](/user/jkjk77) 一开始是会有点不适应，尝试一下","createdAt":1492490015105},{"id":4165,"originId":"58f5986e9116585a56e206cc","articleId":770,"userId":1698,"content":"[@einsqing](/user/einsqing) 哈哈，好东西出来总是会有一批人有抵触心理的。","createdAt":1492490350411},{"id":4166,"originId":"58f598a99116585a56e206ce","articleId":770,"userId":1698,"content":"[@zy445566](/user/zy445566) 哈哈不要误会，我们只是翻译，原产品是 https://github.com/adonisjs","createdAt":1492490409500},{"id":4167,"originId":"58f598e7bbaf2f3f569bdf7d","articleId":770,"userId":1698,"content":"[@lamb2014](/user/lamb2014) 老司机建议别走弯路，搞个这个还能和一大波PHP的伙伴愉快滴聊天","createdAt":1492490471835},{"id":4168,"originId":"58f5c3d8523b9d0956dad6da","articleId":770,"userId":1702,"content":"相比 adonisjs, 更看好 feathersjs","createdAt":1492501464325},{"id":4169,"originId":"58f5c934bbaf2f3f569bdfb1","articleId":770,"userId":1698,"content":"[@thREam](/user/thREam) 拭目以待","createdAt":1492502836906},{"id":4170,"originId":"58f9d237bbaf2f3f569be103","articleId":770,"userId":917,"content":"我发现每出现一种新技术，就会有人把官网拔下来翻译成中文，再注册个技术同名的.cn域名。\r\n仅仅是发现了这个规律而已，没啥别的意思。","createdAt":1492767287263},{"id":4171,"originId":"58f9f66fbbaf2f3f569be111","articleId":770,"userId":380,"content":"[@zenwong](/user/zenwong) 同发现了这个问题","createdAt":1492776559356},{"id":4172,"originId":"58fa032e31e8c2bb1c3dcc91","articleId":770,"userId":1698,"content":"[@zenwong](/user/zenwong) [@XGHeaven](/user/XGHeaven)  可惜很多人连这事儿都懒得做，导致现在很多技术连繁体中文都有，就是没有简体中文，整天还只会说中国这个不行那个不好。","createdAt":1492779822785},{"id":4173,"originId":"58fada5e31e8c2bb1c3dcc9e","articleId":770,"userId":1703,"content":"翻了一下官方文档, 没看到benchmark结果啊, 楼主有链接么","createdAt":1492834910335},{"id":4174,"originId":"58fb2bf231e8c2bb1c3dccb1","articleId":770,"userId":1698,"content":"[@Smallpath](/user/Smallpath) 我不知道有benchmark呀","createdAt":1492855794438},{"id":4175,"originId":"5dea29d914ffa4125a544c19","articleId":770,"userId":1697,"content":"AdonisJs 确实解决了一些痛点。例如 Laravel 的 command 在维护数据时就很有用。","createdAt":1575627225688},{"id":4176,"originId":"5de9c00814ffa4125a5449f5","articleId":771,"userId":829,"content":"赞","createdAt":1575600136203},{"id":4177,"originId":"5de877bd484806122a97d5d4","articleId":773,"userId":829,"content":"赞","createdAt":1575516093462},{"id":4178,"originId":"5de87bb514ffa4125a5445d5","articleId":773,"userId":1704,"content":"[@OXOYO](/user/OXOYO) 谢谢鼓励","createdAt":1575517109640},{"id":4179,"originId":"5de8d9f4484806122a97d975","articleId":773,"userId":1705,"content":"👍","createdAt":1575541236920},{"id":4180,"originId":"5dd73d128287937a65af6183","articleId":774,"userId":354,"content":"啤酒也不错","createdAt":1574386962369},{"id":4181,"originId":"5dd7b20234a8a07a2dab68cd","articleId":774,"userId":26,"content":"这么一说今晚菜市场来一斤","createdAt":1574416898594},{"id":4182,"originId":"5dda57378287937a65af6771","articleId":774,"userId":79,"content":"身体是我们的本钱，嘿嘿","createdAt":1574590263718},{"id":4183,"originId":"5ddb435e34a8a07a2dab6e12","articleId":774,"userId":1193,"content":"666","createdAt":1574650718187},{"id":4184,"originId":"5ddb8ef134a8a07a2dab6f51","articleId":774,"userId":741,"content":"> 66666","createdAt":1574670065829},{"id":4185,"originId":"5ddc77d86043397a546d97e1","articleId":774,"userId":726,"content":"这么玩，红酒牛肉也保不住","createdAt":1574729688614},{"id":4186,"originId":"5ddcf3538c1ac97aa630a257","articleId":774,"userId":155,"content":"身体重要，身体垮了，什么都换不回来","createdAt":1574761299117},{"id":4187,"originId":"5dddf47d6043397a546d9c7a","articleId":774,"userId":1707,"content":"熬夜带来的损伤无法恢复","createdAt":1574827133209},{"id":4188,"originId":"5dde4ddf8c1ac97aa630a605","articleId":774,"userId":1199,"content":"你这应该只是酒精的刺激,其实损伤还在.\r\n还是保证睡眠吧","createdAt":1574850015450},{"id":4189,"originId":"5dde6bf58c1ac97aa630a64b","articleId":774,"userId":1644,"content":"看一下今天某明星猝死的新闻，还是多多休息吧","createdAt":1574857717832},{"id":4190,"originId":"5de4e01e39af564604bc011e","articleId":774,"userId":134,"content":"老哥. 红酒对心脏没有任何好处. 别被骗了. ","createdAt":1575280670114},{"id":4191,"originId":"5de736146043397a546db833","articleId":774,"userId":38,"content":"酒精可以促进身体分泌肾上腺素..\r\n\r\n熬夜的过程中可以大量喝水（大于1L， 少于2L，超过会水中毒），我一般晚上熬夜值班的时候会买一瓶 1.5L 的矿泉水，慢慢的喝，然后多上几次厕所，整个人会舒服一些 。\r\n白天的时候可以考虑买一些西洋参含片咀嚼，日摄入建议不超过 2g。\r\n睡眠建议服用一些 L-茶多酚、GAGA 物质的保健品，缓解焦虑、保护深度睡眠。\r\n不要暗示自己没睡够。1 天 5 个小时的睡眠绝对能满足需求，如果总是暗示自己要多睡或者没睡够，会加重焦虑，无益于缓解身体状态。","createdAt":1575433748899},{"id":4192,"originId":"5de74a346043397a546db879","articleId":774,"userId":194,"content":"你们的项目管理者要对造成这样加班的原因负责，不是简单调休能弥补的","createdAt":1575438900617},{"id":4193,"originId":"5de784e8484806122a97d1de","articleId":774,"userId":1197,"content":"[@dafanzhi](/user/dafanzhi)  前同事 加班 n个小时 直接调休一个星期  换工作跑了","createdAt":1575453928009},{"id":4194,"originId":"5de87bd8484806122a97d5fc","articleId":774,"userId":36,"content":"平时注意蛋白补充，适量运动，才能持续保持旺盛的精力","createdAt":1575517144200},{"id":4195,"originId":"5de7977f14ffa4125a544267","articleId":775,"userId":615,"content":"感觉可以 围观一下","createdAt":1575458687867},{"id":4196,"originId":"5b67fc9a792f59ae501bf7d6","articleId":776,"userId":518,"content":"不做前端好多年，跟不上节凑了","createdAt":1533541530211},{"id":4197,"originId":"5d64ec04dcd8e81121a61668","articleId":776,"userId":1710,"content":"但是tab之间的切换 怎么保存状态呢","createdAt":1566895108794},{"id":4198,"originId":"5de78053484806122a97d1ca","articleId":776,"userId":1711,"content":"使用新版antd 有个bug           onClose={(e) => this.handleClose(pathname,e)}\r\n需要在handleClose 里阻止冒泡\r\n","createdAt":1575452755430},{"id":4199,"originId":"5de5d31d39af564604bc03fb","articleId":777,"userId":1712,"content":"app定价1元，为付费下载\r\n放几个码，先到先得\r\n\r\nAYXHH4RPK33T\r\nPR739RKFK6WK\r\nPHAXMXKMRW4K\r\nEYFMF7WRK47E\r\nEAWJ33X6F449\r\nJYPF3FXMMNW3\r\nAANRFK64ERTJ\r\nM7TFMTL6HTTK\r\n","createdAt":1575342877938},{"id":4200,"originId":"5de71be76043397a546db73e","articleId":777,"userId":1713,"content":"AYXHH4RPK33T 已使用","createdAt":1575427047457},{"id":4201,"originId":"5de7232439af564604bc09cf","articleId":777,"userId":829,"content":"创意不错","createdAt":1575428900777},{"id":4202,"originId":"5de705bb39af564604bc08dc","articleId":779,"userId":726,"content":"很有意思，可以慢慢把功能建起来，让更多人参与进来","createdAt":1575421371828},{"id":4203,"originId":"555739ed7cabb7b45ee6bcdd","articleId":780,"userId":1717,"content":"其实这个vs没有必要拉进来process.nextTick()这个毋庸置疑的优先级最高，核心点在于setTimeout（0）和setImmediate（），而setTimeout的创建要涉及到创建红黑树等性能消耗，所以如果是想创建异步操作的话毋庸置疑是使用setImmediate，但是如果硬要比较他们俩谁先执行，个人感觉没有必要。毕竟setTimeout（0）的目的就是创建异步。","createdAt":1431779821963},{"id":4204,"originId":"55574bdd7cabb7b45ee6bce4","articleId":780,"userId":1716,"content":"[@haozxuan](/user/haozxuan) 哈哈哈，是的，直接用`setImmediate()`就好，但之前用的稀里糊涂的。","createdAt":1431784413606},{"id":4205,"originId":"5de5f3fa39af564604bc04ad","articleId":780,"userId":1084,"content":"setTimeout的创建要涉及到创建红黑树等性能消耗 , 这句话如何验证？看源码吗？","createdAt":1575351290416},{"id":4206,"originId":"5ac0bb7a52d7d3a8698a4a02","articleId":782,"userId":1719,"content":"qaq<br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1522580346145},{"id":4207,"originId":"5ac182f696f344940fbbac10","articleId":782,"userId":1718,"content":"[@qiuyi116](/user/qiuyi116) 请问, 你这个是直接打包, 放到 coding 上的吗?","createdAt":1522631414819},{"id":4208,"originId":"5de4ddfa6043397a546daf3f","articleId":782,"userId":1718,"content":"该项目已经再次启动了，喜欢的朋友可以继续关注哟。","createdAt":1575280122755},{"id":4209,"originId":"5de0e6f96043397a546da52e","articleId":783,"userId":383,"content":"小建议：分页，然后进入某个变电所页面的返回按钮","createdAt":1575020281598},{"id":4210,"originId":"5de135c76043397a546da5e0","articleId":783,"userId":513,"content":"这是用umiJS脚手架工具搭的，或是用Ant Design Pro修改的","createdAt":1575040455602},{"id":4211,"originId":"5de4689339af564604bbfc46","articleId":783,"userId":1720,"content":"[@vanishcode](/user/vanishcode) 嗯 这个的确开发的时候就犹豫，有机会会加上","createdAt":1575250067587},{"id":4212,"originId":"5de468c339af564604bbfc4d","articleId":783,"userId":1720,"content":"[@Solomonqoo](/user/Solomonqoo) 没有用脚手架倒是，自己有一个快速搭建的模板直接用的那个","createdAt":1575250115086},{"id":4213,"originId":"5de33b6e6043397a546da8c8","articleId":784,"userId":1722,"content":"Web Development with Node and Express, 2nd Edition\r\nhttps://www.letmeread.net/web-development-with-node-and-express-2nd-edition/\r\n![](https://images-na.ssl-images-amazon.com/images/I/51IgZ-mtGsL.jpg)\r\n","createdAt":1575172974586},{"id":4214,"originId":"5dde43666043397a546d9df0","articleId":786,"userId":1723,"content":"图挂了","createdAt":1574847334438},{"id":4215,"originId":"5ddfe99d6043397a546da1ff","articleId":786,"userId":1495,"content":"https://www.yuque.com/antv/blog/wy2qd6   原文链接","createdAt":1574955421770},{"id":4216,"originId":"5c34a7d73898674067a7cc0a","articleId":787,"userId":798,"content":"楼主，推荐一个素材站，资源很丰富的，可以考虑收录\r\n[https://www.sucaihuo.com](https://www.sucaihuo.com)","createdAt":1546954711266},{"id":4217,"originId":"5c36c1075bf06c5e7e3f3975","articleId":787,"userId":1724,"content":"[@Nancygirl](/user/Nancygirl) 好的，已收录","createdAt":1547092231261},{"id":4218,"originId":"5c506426a4647e02328f2377","articleId":787,"userId":828,"content":"666，不错的导航站","createdAt":1548772390223},{"id":4219,"originId":"5c50fc4da4647e02328f2424","articleId":787,"userId":22,"content":"博客加上 React 大佬的 https://overreacted.io","createdAt":1548811341119},{"id":4220,"originId":"5c5467a505cc322e7b136fc3","articleId":787,"userId":1724,"content":"[@justjavac](/user/justjavac) 已添加，可以看网站评价呦 [网站评价](https://www.frontendjs.com/site/5c5466c0d982246e8a66b5f0)","createdAt":1549035429368},{"id":4221,"originId":"5c5467b905cc322e7b136fc7","articleId":787,"userId":1724,"content":"[@jtghaha](/user/jtghaha) 感谢支持哈","createdAt":1549035449251},{"id":4222,"originId":"5c55bd5ce6aaad2ea76deb72","articleId":787,"userId":1697,"content":"挺好的，就是看着百度搜索很不顺眼","createdAt":1549122908882},{"id":4223,"originId":"5c568f8305cc322e7b1372ae","articleId":787,"userId":1724,"content":"[@shiny](/user/shiny) 可以换成Google或者其他社区搜索","createdAt":1549176707198},{"id":4224,"originId":"5c83cc887ce0df37324267e0","articleId":787,"userId":798,"content":"好东西","createdAt":1552141448087},{"id":4225,"originId":"5cbf16ee37faec0ce1d055e6","articleId":787,"userId":804,"content":"收集了挺多不错的网站","createdAt":1556027118214},{"id":4226,"originId":"5cbf394e37faec0ce1d05672","articleId":787,"userId":1724,"content":"[@whoknowme](/user/whoknowme) 多多支持","createdAt":1556035918936},{"id":4227,"originId":"5cbfb9c537faec0ce1d057a1","articleId":787,"userId":829,"content":"不错，内容可以更丰富些","createdAt":1556068805320},{"id":4228,"originId":"5cc01a0aa86ae80ce64b36af","articleId":787,"userId":1725,"content":"如果有 twitter,medium, dev.to这些，那就更完美了","createdAt":1556093450487},{"id":4229,"originId":"5cd02a485a5bae6e078138ad","articleId":787,"userId":1724,"content":"[@xiaohesong](/user/xiaohesong) 嗯嗯，还在不断丰富中","createdAt":1557146184792},{"id":4230,"originId":"5cd0d0515a5bae6e0781399c","articleId":787,"userId":79,"content":"good","createdAt":1557188689334},{"id":4231,"originId":"5cf3d63695fcc914aa26556c","articleId":787,"userId":804,"content":"不知道楼主的导航站流量怎么样?","createdAt":1559483958284},{"id":4232,"originId":"5cf4717895fcc914aa265634","articleId":787,"userId":853,"content":"你流量怕是要蹦哦","createdAt":1559523704806},{"id":4233,"originId":"5cf622b31fe902120f31c034","articleId":787,"userId":1724,"content":"[@strugglexiang](/user/strugglexiang) 还好，可以扛住","createdAt":1559634611410},{"id":4234,"originId":"5cf622da1fe902120f31c038","articleId":787,"userId":1724,"content":"[@whoknowme](/user/whoknowme) 目前还行，可以帮忙推广推广","createdAt":1559634650049},{"id":4235,"originId":"5d0b394e34bca667bc6e1402","articleId":787,"userId":1726,"content":"看看这个还不错的python集合。https://pythonawesome.com/","createdAt":1561016654496},{"id":4236,"originId":"5d5eaa46dcd8e81121a605fb","articleId":787,"userId":804,"content":"这个值得收藏","createdAt":1566485062484},{"id":4237,"originId":"5d648c31dcd8e81121a61420","articleId":787,"userId":1724,"content":"[@whoknowme](/user/whoknowme) 感谢哦^_^","createdAt":1566870577300},{"id":4238,"originId":"5d64a790421846662d9851b1","articleId":787,"userId":1373,"content":"[这个更全，资源更多~](https://geekdocs.cn/)","createdAt":1566877584800},{"id":4239,"originId":"5d87846653c75a4136b4c8ac","articleId":787,"userId":804,"content":"[@WuYinMan](/user/WuYinMan) 也不错,先收藏,有空慢慢看","createdAt":1569162342460},{"id":4240,"originId":"5db59f4e865a9844a301e04c","articleId":787,"userId":790,"content":"看了下,还不错的","createdAt":1572183886188},{"id":4241,"originId":"5db652dfece3813ad9ba48b3","articleId":787,"userId":1724,"content":"[@alber1986](/user/alber1986) 嗯嗯","createdAt":1572229855857},{"id":4242,"originId":"5ddf68bc6043397a546da0b0","articleId":787,"userId":1724,"content":"新增了动态模块 [动态](https://www.frontendjs.com/trend)\r\n\r\n![WX20191128-142555.png](//static.cnodejs.org/Fs5uyezGUWx0wig0HqXygl3BB02i)","createdAt":1574922428177},{"id":4243,"originId":"5dddeb976043397a546d9c3c","articleId":789,"userId":615,"content":"有没有demo的项目啊 完全看不懂怎么使用？","createdAt":1574824855915},{"id":4244,"originId":"5dde1a678c1ac97aa630a4d9","articleId":789,"userId":434,"content":"提醒的很好，我去写个例子去。","createdAt":1574836839351},{"id":4245,"originId":"5dde1b4d8c1ac97aa630a4e6","articleId":789,"userId":434,"content":"[@974806047](/user/974806047) \r\n需要调试的进程代码里引入 antman。实例化后通过 regist 函数注册你要允许操作的变量\r\n\r\n之后调用 antman.start(port) 来启动soket监听。\r\n```js\r\nconst antman = require('[@open-node](/user/open-node)/antman')();\r\n\r\nantman.regist('key', value, '这个key的含义');\r\nantman.start(9099);\r\n```\r\n\r\n客户端安装 npm -i [@open-node](/user/open-node)/antman -g 之后命令行 antman connect 9099 就可以进入窥探的交互模式了。\r\n你注册的变量都在 $ 上，也可以执行 help 来查看有哪些信息","createdAt":1574837069975},{"id":4246,"originId":"5dde1cb28c1ac97aa630a4f1","articleId":789,"userId":47,"content":"运维不把你弄死？","createdAt":1574837426574},{"id":4247,"originId":"5dde21158c1ac97aa630a4fe","articleId":789,"userId":434,"content":"[@HeavenZhangHr](/user/HeavenZhangHr) 怎么个弄死法？你想说安全问题，是不是。","createdAt":1574838549085},{"id":4248,"originId":"5dde21266043397a546d9d26","articleId":789,"userId":434,"content":"[@HeavenZhangHr](/user/HeavenZhangHr) 有ip绑定，有身份验证。","createdAt":1574838566866},{"id":4249,"originId":"5dde270d8c1ac97aa630a52a","articleId":789,"userId":47,"content":"[@stonephp](/user/stonephp) 可是一般开发也不能碰生产环境啊","createdAt":1574840077437},{"id":4250,"originId":"5dde2c058c1ac97aa630a559","articleId":789,"userId":434,"content":"[@HeavenZhangHr](/user/HeavenZhangHr) 没有一个东西适合所有人。给需要的人就可以了。","createdAt":1574841349240},{"id":4251,"originId":"5dde33536043397a546d9d9b","articleId":789,"userId":205,"content":"留后门...","createdAt":1574843219696},{"id":4252,"originId":"5dde583b8c1ac97aa630a624","articleId":789,"userId":434,"content":"[@magicdawn](/user/magicdawn) 呵呵","createdAt":1574852667514},{"id":4253,"originId":"5ddded1d8c1ac97aa630a437","articleId":790,"userId":615,"content":"```\r\nfunction compose(middleware) {\r\n  return dispatch(0);\r\n  async function dispatch(i) {\r\n    let fn = middleware[i];\r\n    try {\r\n      await fn(dispatch.bind(null, i + 1));\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n  }\r\n}\r\n```\r\n这样写可不可以？","createdAt":1574825245929},{"id":4254,"originId":"5dde049d8c1ac97aa630a480","articleId":790,"userId":117,"content":"[@974806047](/user/974806047) 这样没办法传递给中间件参数","createdAt":1574831261143},{"id":4255,"originId":"5db94bf4865a9844a301ec87","articleId":792,"userId":21,"content":"动画演示挺好玩的，想想之前还体验过你写的跳一跳外挂呢","createdAt":1572424692620},{"id":4256,"originId":"5dc0db27ece3813ad9ba6546","articleId":792,"userId":264,"content":"[@zy445566](/user/zy445566) 有时候比较爱折腾","createdAt":1572920103670},{"id":4257,"originId":"5dc37832865a9844a3020622","articleId":792,"userId":1730,"content":"这个方法 小兵一多就卡了 怎么优化？","createdAt":1573091378708},{"id":4258,"originId":"5dca5d30865a9844a302166b","articleId":792,"userId":264,"content":"[@lwcbest](/user/lwcbest) 理论上不会因为 小兵 多就卡。  如果没理解错，小兵  也算是障碍物吧。那么取决于你地图的复杂性。可以想办法把一些明显不能去到的地图规避掉。","createdAt":1573543216434},{"id":4259,"originId":"5dd634eb8287937a65af5f09","articleId":792,"userId":1730,"content":"[@sbfkcel](/user/sbfkcel) 每个兵都需要做寻路，小兵不是障碍物，有什么优化方案吗？","createdAt":1574319339277},{"id":4260,"originId":"5dddd9d66043397a546d9bf7","articleId":792,"userId":264,"content":"[@lwcbest](/user/lwcbest) 这样的话还是运算量较大。建议将小兵按区域归成组。每只组只寻一次。","createdAt":1574820310761},{"id":4261,"originId":"5dd50d4b34a8a07a2dab600b","articleId":793,"userId":829,"content":"赞","createdAt":1574243659356},{"id":4262,"originId":"5dd7669334a8a07a2dab66e9","articleId":793,"userId":1208,"content":"[@OXOYO](/user/OXOYO) 谢谢😊","createdAt":1574397587474},{"id":4263,"originId":"5ddcc98b8c1ac97aa630a165","articleId":793,"userId":655,"content":"有用。","createdAt":1574750603218},{"id":4264,"originId":"5d9bdef9865a9844a3019d34","articleId":795,"userId":21,"content":"。。。你这样egg玩家会难过的😂😂😂","createdAt":1570496249717},{"id":4265,"originId":"5d9be2f9865a9844a3019d48","articleId":795,"userId":545,"content":"[@zy445566](/user/zy445566)  egg 也推出类似的框架了—— midwayjs","createdAt":1570497273196},{"id":4266,"originId":"5d9bf208865a9844a3019dbe","articleId":795,"userId":109,"content":"[@zy445566](/user/zy445566) 各有所需，各有所长。","createdAt":1570501128332},{"id":4267,"originId":"5d9c0fd6ece3813ad9ba05e8","articleId":795,"userId":1547,"content":"总感觉你老是拿egg来做对比  ","createdAt":1570508758219},{"id":4268,"originId":"5d9c5c8cece3813ad9ba0763","articleId":795,"userId":545,"content":"[@shenjianzch](/user/shenjianzch) 增加了其他框架来对比","createdAt":1570528396280},{"id":4269,"originId":"5db79766865a9844a301e67d","articleId":795,"userId":89,"content":"不想说话，你要知道cnpm和淘宝源，有多少下载量就不说话了。这样比较意义何在","createdAt":1572312934154},{"id":4270,"originId":"5db79ae9ece3813ad9ba4dec","articleId":795,"userId":545,"content":"[@i5ting](/user/i5ting)  国内确实用cnpm 和 淘宝源的多，但 egg 在国外呢，还是不增长。\r\n\r\n而且 就算用 koa  express  nest.js 这些 同样也有用淘宝源的。\r\n\r\n如果可以的话，也希望 cnpm 和 淘宝源公开这几个框架的数据。 数据累加起来对比，更具有意义。","createdAt":1572313833672},{"id":4271,"originId":"5db7d122ece3813ad9ba4efe","articleId":795,"userId":189,"content":"学习中，谁有学过[Nestjs仿小米商城企业级Nodejs项目实战教程](https://www.itying.com/goods-1139.html)","createdAt":1572327714840},{"id":4272,"originId":"5db91dfd865a9844a301eb5c","articleId":795,"userId":1731,"content":"正在学习中","createdAt":1572412925550},{"id":4273,"originId":"5dd4a58c7651572e0955e1f9","articleId":795,"userId":545,"content":"https://docs.nestjs.cn/   6.x 二次校对已经全部更新完毕，如有问题，欢迎提交 PR ~","createdAt":1574217100843},{"id":4274,"originId":"5dd605bf34a8a07a2dab62f1","articleId":795,"userId":33,"content":"[@zuohuadong](/user/zuohuadong) 给力","createdAt":1574307263979},{"id":4275,"originId":"5dd74d6d34a8a07a2dab666f","articleId":795,"userId":688,"content":"用egg最蛋疼的地方在于其自带的多进程管理，感觉这个特性应该单独抽取出来而不是作为框架本身。\r\n其他地方的话则是各有千秋：\r\negg\r\n1. egg更容易上手\r\n2. 集中式路由方便管理\r\n3. 结构上天然解决循环依赖\r\n...\r\n\r\nnestjs：\r\n1. 不依赖单独的helper，直接对ide友好\r\n2. 对已有的koa或express基建复用更友好\r\n3. 按照module的方式做工程规范便于多人的工程协作\r\n...\r\n\r\n不过就 starter up 来说 egg 给人的挫折感比较强（多进程引起的繁琐的断点调试，没有helper对于ide来说如同回到了sublime时代）\r\n现在唯一觉得nestjs不爽的地方就是非集中式路由和中间件管理（spring的糟粕处）","createdAt":1574391149741},{"id":4276,"originId":"5dd74d9d34a8a07a2dab6676","articleId":795,"userId":688,"content":"现在工作用egg，业余开坑用nestjs","createdAt":1574391197765},{"id":4277,"originId":"5dd752938287937a65af6215","articleId":795,"userId":111,"content":"新出的玩意坑多  要稳定还是要 express \r\nLoopback，MEAN 、Keystone、 Sails 都是用express做基础搭建","createdAt":1574392467544},{"id":4278,"originId":"5dd75b0734a8a07a2dab66b0","articleId":795,"userId":688,"content":"[@yakczh](/user/yakczh) egg和nest的话现在都很稳定，写小工程用express还行，但是稍微大点的工程用express就会很痛苦","createdAt":1574394631053},{"id":4279,"originId":"5dd75c3334a8a07a2dab66bc","articleId":795,"userId":111,"content":"[@wujohns](/user/wujohns)  大部分公司的nodejs项目都是小工程 ，12306的项目不会用nodejs 搞不定大工程的公司已经开始用微服务，在docker里弄一堆express 互相调用  微服务  pk 大而全  明显微服务更灵活，维护性更好","createdAt":1574394931971},{"id":4280,"originId":"5dd7601934a8a07a2dab66d8","articleId":795,"userId":545,"content":"[@yakczh](/user/yakczh)  微服务跟框架的大小并不冲突。\r\n我们就是 k8s + istio + nest.js (grpc/graphql)\r\n框架其实决定了可维护性和生态。\r\n\r\n\r\n微服务的拆分并不是把一个人 拆成 左胳膊，右胳膊，头.... 这样的。\r\n而是拆分成，防御层，消化层，能量层，中枢层...... 要求的是低耦合，可拓展，好维护，比如 在java 里是 springboot 这样的，而不是 其他更轻量级框架。\r\n\r\nnode.js 在2015年左右，很多人在说统一大后端，却看到 express  koa 这样的框架不可置否，压根做不了后端，热潮褪去。\r\n\r\n如果当时是 nest.js 呢？ 可能 node.js 份额趁着这股热劲拿到更多市场。","createdAt":1574395929584},{"id":4281,"originId":"5dd7698434a8a07a2dab66f5","articleId":795,"userId":688,"content":"[@yakczh](/user/yakczh) 这里的小工程是指单人维护，代码量在10k行以下的工程，工程再大一些很多地方就很难受了，具体有：\r\n1. 依赖关系管理\r\n2. 工程代码结构治理\r\n3. 启动时的预加载管理（在egg中有生命周期规范，在nestjs中可以采用ioc配合global module处理，自己写也行但属于重复造不怎么可靠的轮子）\r\n4. web中常用的安全策略\r\n等等...\r\n\r\n(话说微服务也不是你说的那种用法啊。。。","createdAt":1574398340517},{"id":4282,"originId":"5dd77d828287937a65af62ad","articleId":795,"userId":111,"content":"[@wujohns](/user/wujohns)  微服务怎么用法，你可以开个培训班，趁着现在微服务火的热劲肯定拿更多市场，就看多少人能报名，说不定就象马云说的万一梦想实现了就发了，从此不用996收福报了","createdAt":1574403458251},{"id":4283,"originId":"5dd77db08287937a65af62b3","articleId":795,"userId":111,"content":"[@zuohuadong](/user/zuohuadong)\r\n1用你的原话 “ 微服务跟框架的大小并不冲突。 “  所以微服务器跟框架可大可小，并没有钦定用什么框架 微服务的定义中并不绑定nest.js\r\n2 微服务的拆分并没有规定必须垂直拆分,怎么拆分依赖于需求场景，其实垂直的拆分已经在web容器的时代就已经拆成N层了很普遍了，只是原来在web容器的结构下不能独自布署，是栈式调用的  随着虚拟机和docker的兴起只是把原来已经拆分的N层用容器包装起来了，更加独立了，从栈式变成组合式，从一条线串起来的单一结构变成网状结构  另外springboot只是微服务的一种实现，你用netty做个容器，只要能接入springclound统一管理  一样是微服务  一种方案有N多实现工具 方案和工具并没有绑定\r\n3 nodejs的本质决定了nodejs只是事件流程处理中的一个补充方案，而且是边缘化的方案，比如象现在前端build工具链的位置，所有想统一大后端，趁着什么热劲拿更多市场的，终将会收到市场的教育","createdAt":1574403504597},{"id":4284,"originId":"5dd83a008287937a65af64ac","articleId":795,"userId":688,"content":"[@yakczh](/user/yakczh) 先说一下立场吧：\r\nnestjs/egg/koa/express/spring 无论在工作中还是业余挖坑中我都在用，这里我这边只是指出相比于express选用nest或者egg的优势与原因（即使在微服务这种单个工程的工程大小可控的情况下）\r\n另外就是 [@zuohuadong](/user/zuohuadong) 在宣传 nest 上的确比较激进，其实有一说一，没有必要通过贬低其他框架的方式抬高nest，这个很容易让人反感\r\n\r\n“在docker里弄一堆express 互相调用  微服务” 这个说法很容让人误解（就像我这边没有在一开始明确小工程具体是有多小），比如多个微服务在公用同样的数据源时，该怎么保证这里的使用不会混乱，一般的做法是不会让每个微服务直接调用数据源，而是会通过统一的一个微服务调用，诸如此类的在整个微服务集群的治理上，实际是会有垂直拆分的需要的。\r\n\r\n我在一开始入坑 egg/nest/spring 的时候也是感觉很不舒服，因为如果能用express/koa简单完成工程何必还会需要那么繁琐的用法呢，但后来的工程推进中，发现对基于express/koa的工程治理中实际添加了很多在 egg/nest 中很多公用的特性，也就是再造轮子。这些也都是实际做过对应的工程才会有的感触。\r\n\r\n另外就是对于完全的新人不建议从 egg/nest 入坑，推荐从 express/koa 开始，先了解基础并有一定的工程经验，这个时候再入坑 egg/nest/spring 的时候就会有恍然大悟的感觉（如果时间较多的话可以了解下其他的各个框架，扩宽下视野，毕竟每个框架都有不同的核心目标，相关的设计都可以作为学习）\r\n\r\n最后就是讨论这个，就事论事，没必要这么阴阳怪气。","createdAt":1574451712151},{"id":4285,"originId":"5ddc92bf8c1ac97aa630a052","articleId":795,"userId":545,"content":"[@yakczh](/user/yakczh)  这个问题上并没有什么本质不本质的事情，C++或者汇编 的本质就什么都能干....\r\n说白了，只要生态好，其他的问题都是小事。\r\n案例一： java vs .net core\r\n案例二： node.js  vs  PHP\r\n案例三： quickjs  vs  lua\r\n生态好，就有人不断填坑，如果没生态，就没案例2和3。\r\n\r\n如果 2015年， node.js 有类似 spring 这样的框架，进而出现一系列大型项目的解决方案，生态如 java ，然后又反向推动 node.js 的更新迭代，那结果未可知。\r\n语言就是不断吸收其他语言的特性，没有什么一成不变的。\r\n\r\njs 的 callback 现在也演变成  async/await了","createdAt":1574736575958},{"id":4286,"originId":"5ddb3e4334a8a07a2dab6df3","articleId":796,"userId":98,"content":"老板说：感谢你们这一年加班加点的努力让我开上了法拉利，希望你们继续努力争取明年让我再买一辆","createdAt":1574649411456},{"id":4287,"originId":"5ddb935634a8a07a2dab6f78","articleId":796,"userId":194,"content":"**你才刚毕业就说什么选择大于努力？你且说说你付出了多少努力？先搬砖至少三年再说吧，没有谁能走捷径，别人告诉你的捷径，自己没经历过，也不能深刻体会，只能当个正确道理而明白，不具备任何实际意义。现在认为是掉在坑里，以后你会发现，走过的路，每一步都算数。\r\n另外，如果不想搬砖，现在只需要打开浏览器写SQL就能直接快速开发系统了：https://wuyuan.io**","createdAt":1574671190936},{"id":4288,"originId":"5ddb984134a8a07a2dab6f97","articleId":796,"userId":358,"content":"> 新毕业生进大公司都是入坑\r\n\r\n说的好像，新毕业生进入一个朝夕不保的小公司，就不是入坑似的。。。 ","createdAt":1574672449467},{"id":4289,"originId":"5ddb99e134a8a07a2dab6fa2","articleId":796,"userId":1199,"content":"1.程序员不会翻墙怪谁?\r\n2.百度医疗竞价可以黑,但要实事求是 \r\n[node.js 使用esm](https://www.baidu.com/s?wd=node.js%20使用esm)\r\n这个搜索结果差吗?\r\n3.大框架都找不到自己要的资料,那你用小框架不更是完蛋?\r\n\r\n题主逻辑混乱.\r\n\r\n","createdAt":1574672865590},{"id":4290,"originId":"5d2e8e06c5fe2549619aeffd","articleId":797,"userId":259,"content":"挺好的， 不过我推荐更强大的  [发现导航](http://nav.xiejiahe.com)","createdAt":1563332102585},{"id":4291,"originId":"5d2e900dc5fe2549619af01e","articleId":797,"userId":1373,"content":"[@xjh22222228](/user/xjh22222228) 貌似没有我推荐的强大哇 (๑ŐдŐ)b","createdAt":1563332621568},{"id":4292,"originId":"5d2e954a51637b492bb0f68d","articleId":797,"userId":97,"content":"原来不是 云风 是 风云吗","createdAt":1563333962160},{"id":4293,"originId":"5d2ebba1b2b9222961dab6b6","articleId":797,"userId":1373,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 哇 好细心 还真没注意到，已反馈，谢谢~","createdAt":1563343777951},{"id":4294,"originId":"5d2ec5c2b2b9222961dab70a","articleId":797,"userId":501,"content":"程序猿界的简书写作学习平台\r\n\r\n极客教程-致力于推广各种编程语言技术，也为了未来数字化世界，让人更容易找到操作数字化的方式，为了未来而生的编程学习平台。\r\n\r\n优化了写作方式（类简书式，更友好）。如下图：\r\n\r\n![QQ20190404-142843@2x.png](//static.cnodejs.org/Fh4GgpAT-sBntotCsCexsP_FYz1n)\r\n![QQ20190404-142938@2x.png](//static.cnodejs.org/FnLeguxk7154pelL9d5hTdEuokrx)\r\n\r\n欢迎体验, 地址: https://www.geekjc.com","createdAt":1563346370245},{"id":4295,"originId":"5d2f10979969a529571d4d27","articleId":797,"userId":1373,"content":"大家有什么建议尽管可以提出，我会及时反馈。","createdAt":1563365527992},{"id":4296,"originId":"5d2fcab0b2b9222961dabb8b","articleId":797,"userId":1373,"content":"早上起来顶一顶~","createdAt":1563413168307},{"id":4297,"originId":"5d309034b2b9222961dac018","articleId":797,"userId":790,"content":"楼主，素材火[https://www.sucaihuo.com/](https://www.sucaihuo.com/) 求收录","createdAt":1563463732030},{"id":4298,"originId":"5d311bd59969a529571d5518","articleId":797,"userId":1373,"content":"[@alber1986](/user/alber1986) 暂时还没有源码栏目，以后会添加会收录的，谢谢","createdAt":1563499477451},{"id":4299,"originId":"5d32bcea9969a529571d5bad","articleId":797,"userId":1373,"content":"周末加班顶一顶~","createdAt":1563606250806},{"id":4300,"originId":"5d80dd4295464514f7ed7941","articleId":797,"userId":804,"content":"路过帮顶吧","createdAt":1568726338983},{"id":4301,"originId":"5d818ecb95464514f7ed7a0d","articleId":797,"userId":153,"content":"顶一下，真心不错哦","createdAt":1568771787588},{"id":4302,"originId":"5d91babfece3813ad9b9fb24","articleId":797,"userId":1524,"content":"[牛逼的前端导航](https://www.frontendjs.com)，感觉这个也很强大呀","createdAt":1569831615170},{"id":4303,"originId":"5dda971434a8a07a2dab6d1e","articleId":797,"userId":805,"content":"域名不是很好记啊","createdAt":1574606612830},{"id":4304,"originId":"5ddb8f2a34a8a07a2dab6f5b","articleId":797,"userId":741,"content":"不错哈 搜藏了","createdAt":1574670122905},{"id":4305,"originId":"5cc3b8b037faec0ce1d07312","articleId":798,"userId":1732,"content":"喜欢可以star呀~ 🌟","createdAt":1556330672006},{"id":4306,"originId":"5cc3be6da86ae80ce64b4958","articleId":798,"userId":21,"content":"> 手机新浪网的高清图整站（目前落地页100% Daruk，使用TypeScript开发），频道首等其他页面还在灰度中（原来是PHP项目），流量一天1500-2000万，QPS峰值700多。\r\n\r\n鸟哥的PHP还是被干了","createdAt":1556332141568},{"id":4307,"originId":"5cc3bfd837faec0ce1d0733d","articleId":798,"userId":358,"content":"🐂","createdAt":1556332504897},{"id":4308,"originId":"5cc3c035a86ae80ce64b496b","articleId":798,"userId":1733,"content":"点赞👍很轻量.,但是为什么要集成ejs呢，如何前后端分离开发呢,或者使用ssr","createdAt":1556332597968},{"id":4309,"originId":"5cc3c2ea37faec0ce1d0735a","articleId":798,"userId":1732,"content":"[@zy445566](/user/zy445566) 并不是啦，php下沉到更底层的服务或者去开发go服务，我们接管BFF而已，目前来看，效率和性能都有提升，当然这里面也有重构的功劳。总之，互相不冲突。","createdAt":1556333290973},{"id":4310,"originId":"5cc3fbe9a86ae80ce64b4a72","articleId":798,"userId":1732,"content":"[@yanqi321](/user/yanqi321) 只是脚手架里做了对应配置，daruk本身是没有提供ejs的哈，也可以不用，或者换别的。","createdAt":1556347881376},{"id":4311,"originId":"5cc40ce9a86ae80ce64b4abd","articleId":798,"userId":851,"content":"已star","createdAt":1556352233258},{"id":4312,"originId":"5cc4234037faec0ce1d07517","articleId":798,"userId":98,"content":"QPS峰值才700多？，看来我做过一万五峰值的项目能吹很多年了","createdAt":1556357952078},{"id":4313,"originId":"5cc44c1b37faec0ce1d07574","articleId":798,"userId":545,"content":"[@xiaojue](/user/xiaojue) https://docs.nestjs.com/\r\n为何不直接考虑 nest.js ，阿里也是学习 nest.js ,出了 midway ","createdAt":1556368411632},{"id":4314,"originId":"5cc45ff1a86ae80ce64b4b9f","articleId":798,"userId":1732,"content":"[@zengming00](/user/zengming00) 业务场景不一样的哈，我只是说一下实际情况，这个量确实不大哈，大了加机器，加机器 😂","createdAt":1556373489733},{"id":4315,"originId":"5cc46123a86ae80ce64b4ba3","articleId":798,"userId":1732,"content":"[@zuohuadong](/user/zuohuadong) 我是这么想的，ts不光是只有装饰器，nest太依赖装饰器，当然我不是说装饰器不好，只是可能个人偏好上我更喜欢oop，但是我们下一个版本也会开始丰富我们的装饰器，初衷写这个框架的目的有一个点是为了让用习惯express和koa的同事能无成本的切换ts，不需要强行去接受AOP那些概念。","createdAt":1556373795386},{"id":4316,"originId":"5cc46175a86ae80ce64b4ba7","articleId":798,"userId":1732,"content":"[@zengming00](/user/zengming00) 主要是量大的老板也不敢让我们直接上，这算是拿nodejs第一次在我们那边做c端的尝试吧。","createdAt":1556373877232},{"id":4317,"originId":"5cc4ffb837faec0ce1d076b3","articleId":798,"userId":545,"content":"[@xiaojue](/user/xiaojue)   所有程序的最终实践还是 ror 和 spring 那套，大型项目必然会走向 AOP 。\r\nphp 的 swoft  ， node 的 nest.js  ，go 的iris ....\r\n阿里 midway 学了nest.js 、 loopback4 也是学nest 重构了 。\r\n只要用 ts ， 就会发现nest 是真的把  ts 用到了极致，而且跟 angular 通用。\r\n我们现在也是，招 javaer 来做 nest ,很方便，没spring boot 那么啰嗦，开发效率高，性能又好。 要说问题的话，可能是 分布式事务了。\r\nnode 多年来一直没在后端领域有大的建树，一定程度上归咎于框架，express/koa 这些在常规后端来看，就是工具，谈不上框架。\r\n基于 nest.js 做二次开发其实比较合适， nest 的适配器可以换成  fastify 提高性能。","createdAt":1556414392027},{"id":4318,"originId":"5cc5178ba86ae80ce64b4e12","articleId":798,"userId":89,"content":"棒棒哒，终于等出来了，粗看了一些，koa上的ts封装，有一定扩展性，持续关注","createdAt":1556420491536},{"id":4319,"originId":"5cc518fa37faec0ce1d077c6","articleId":798,"userId":1562,"content":"[@zuohuadong](/user/zuohuadong) 老哥 问“为何不直接考虑 nest.js”这就有点杠精了\r\n\r\n人家做的这套框架说不定和nestjs是同时起步的。\r\n然后已经有业务落地了， 所以现在有了nestjs 就要把以前的成果扔掉重构？","createdAt":1556420858036},{"id":4320,"originId":"5cc51baaa86ae80ce64b4e2d","articleId":798,"userId":1734,"content":"[@zuohuadong](/user/zuohuadong) 我看介绍说midway是阿里内部沉淀很久了吧.","createdAt":1556421546798},{"id":4321,"originId":"5cc51d3637faec0ce1d077e9","articleId":798,"userId":545,"content":"[@tao1991123](/user/tao1991123)  midway 比 nest.js 早那么多年，新版本也是重构了。\r\nloopback4 也是，我觉得一定程度上确实能说明 nest.js 这玩意确实有价值。\r\n要不然也不会那么多项目在后来考虑 ts 重构的时候都想学 nest ","createdAt":1556421942698},{"id":4322,"originId":"5cc51d4ba86ae80ce64b4e41","articleId":798,"userId":545,"content":"[@xiaozhongliu](/user/xiaozhongliu) 是，然后18年的新版本是重构后的，之前版本完全不一样。","createdAt":1556421963274},{"id":4323,"originId":"5cc51def37faec0ce1d077f6","articleId":798,"userId":1212,"content":"已star","createdAt":1556422127291},{"id":4324,"originId":"5cc57b6037faec0ce1d07af0","articleId":798,"userId":1732,"content":"[@zuohuadong](/user/zuohuadong) 嗯 每个框架出生的时候都有自己的使命和任务，如果nest是最终的解决方案，那么大家在实践中就会不约而同的像他靠齐。\r\n\r\n但是自己开发一个公司内部的基础框架，考虑的不仅仅是你说的那几点，为什么阿里会自己开发midway而不是直接选择nest，很大的一个原因是可控，可快速响应，对内白盒，我们当时的考虑也有很大一部分是因为这个。\r\n\r\n我还没有仔细读nest的源码，也许最终也会 \"借鉴\" 一些它的优点，但是如果我纯换nest，日后我想给框架增加一些其他features就很困难了。\r\n\r\n这个世界不是一个非黑即白的选择题哈。","createdAt":1556446048003},{"id":4325,"originId":"5cc57b8837faec0ce1d07af4","articleId":798,"userId":1732,"content":"[@i5ting](/user/i5ting) 大佬求带。","createdAt":1556446088585},{"id":4326,"originId":"5cc57bb4a86ae80ce64b516e","articleId":798,"userId":1732,"content":"[@xiaozhongliu](/user/xiaozhongliu) 沉淀了很久，我感觉主要是基建，开源其实并不久吧 - -。","createdAt":1556446132858},{"id":4327,"originId":"5cc581b837faec0ce1d07b48","articleId":798,"userId":545,"content":"[@xiaojue](/user/xiaojue)  阿里midway 在 nest 之前就出来了，所以只是后面升级的时候参考了nest.js 。\r\nAOP 这套思想本身就很灵活，方便后期加 features 。\r\n基于 nest.js 二次开发也是一个选择。\r\n说实话，我对大多数 noder 的印象还是觉得对架构和大型项目接触太少，很多都是从前端过来，如果接触多的话就像阿里一样，会有midway 这样的产品了。\r\n","createdAt":1556447672127},{"id":4328,"originId":"5cc58b2837faec0ce1d07b7a","articleId":798,"userId":1734,"content":"[@xiaojue](/user/xiaojue) 对, 前段时间开源大家都知道的.","createdAt":1556450088352},{"id":4329,"originId":"5cc5c22d37faec0ce1d07c29","articleId":798,"userId":1732,"content":"[@zuohuadong](/user/zuohuadong) 二次开发和自主开发还是有差别。你说的大部分noder的问题我也同意，且行且珍惜吧，不挖坑怎么成长。😄","createdAt":1556464173880},{"id":4330,"originId":"5cc63cd837faec0ce1d07c84","articleId":798,"userId":1735,"content":"[@zuohuadong](/user/zuohuadong) 大厂要是不造轮子，哪里来的 kpi","createdAt":1556495576648},{"id":4331,"originId":"5cc6623837faec0ce1d07dc6","articleId":798,"userId":887,"content":"持续关注~","createdAt":1556505144145},{"id":4332,"originId":"5cc6682b37faec0ce1d07e23","articleId":798,"userId":545,"content":"[@xiaojue](/user/xiaojue)  其实想着你们要是能把这块做好，没准能换掉 yaf ，哈哈~","createdAt":1556506667018},{"id":4333,"originId":"5cc67a91a86ae80ce64b549d","articleId":798,"userId":261,"content":"目前感觉无论是 Spring Boot 还是 Nest.js、Egg.js 等都有点重，这些还是先前的一些老的单体应用的思想。其实无论是先前的流行微服务、还是当前的 FAAS 最重要的一个特点就是去除依赖，增强对全链路的管理功能。本身一个接口就是一个链路，链路直接如何监控、如何检查是否有循环依赖等等这才是趋势，而大型项目其实已经过时了，以后每个项目都很小，所有的小项目构成一个大的生态，基础架构慢慢沉淀变为无感知的服务。","createdAt":1556511377974},{"id":4334,"originId":"5cc67c0005ae566f637fd72e","articleId":798,"userId":261,"content":"Service 层和 Controller 层会慢慢趋向合并，如果 Service 层只为当前项目服务那就不是 Service 了，服务化最终是一个个的服务交织而成一个服务网格。","createdAt":1556511744581},{"id":4335,"originId":"5cc6925805ae566f637fd7a7","articleId":798,"userId":1734,"content":"[@helloyou2012](/user/helloyou2012) 项目内分层还是很有必要的，方便维护","createdAt":1556517464002},{"id":4336,"originId":"5cc6a3bfa86ae80ce64b5561","articleId":798,"userId":358,"content":"[@helloyou2012](/user/helloyou2012) 等年底的时候再回头看看，我预测会涌现出一批 Serverless BFF 的实现。","createdAt":1556521919392},{"id":4337,"originId":"5cc6c36405ae566f637fd923","articleId":798,"userId":1562,"content":"[@zuohuadong](/user/zuohuadong) 回复17楼的帖子\r\n\r\n我并没有说 nest有任何不好  他有他的价值\r\n问题是人家新开源Daruk 框架 你非要跑这下面来问 “为何不直接考虑 nest.js”？\r\nJava领域Spring 全家桶如日中天, 不还是存在Jfinal play spark的用武之地 。\r\n而且谁会成为Node领域的 Spring还是未知数。可现在语气给人的感觉 nestjs就是 nodejs 框架的终极解决方案。非常不友好\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","createdAt":1556530020211},{"id":4338,"originId":"5cc6caf5a86ae80ce64b5684","articleId":798,"userId":358,"content":"[@tao1991123](/user/tao1991123) 习惯了就好。","createdAt":1556531957478},{"id":4339,"originId":"5cc6cc0ca86ae80ce64b5691","articleId":798,"userId":850,"content":"框架再好还是得看用的人～","createdAt":1556532236081},{"id":4340,"originId":"5cc6cf48a86ae80ce64b56ab","articleId":798,"userId":998,"content":"[@zuohuadong](/user/zuohuadong) 对midway的历史这么了解，莫非你是midway的开发者之一？","createdAt":1556533064918},{"id":4341,"originId":"5cc7a0b205ae566f637fdb35","articleId":798,"userId":545,"content":"[@pusongyang](/user/pusongyang) https://www.oschina.net/news/103513/midway-1-0-released\r\n一直比较关注midway ，多看看发布新闻","createdAt":1556586674883},{"id":4342,"originId":"5cc7a14ea86ae80ce64b5884","articleId":798,"userId":545,"content":"[@tao1991123](/user/tao1991123)  我也说明了目的：希望 Daruk 在内部做好，甚至替代 yaf 。\r\n从各家的实践来看，借鉴nest 是必然趋势。\r\nnest 不一定是最终解决方案，目前来看是先行者，没别的意思，不要误解。\r\nspring 也好 ror 也好，在 java，在ruby 领域的使用量都是碾压其他框架的存在。 \r\n前文中想表达的意思是，既然 java .net 的大多数开发者都对 AOP 这套思想情有独钟，并且有这十几年的沉淀，那 noder 在做后端的时候，是不是应该把这些因素考虑进去？\r\n我只想说的是：对这个世界多一点宽容，对后端多一点敬畏。","createdAt":1556586830040},{"id":4343,"originId":"5cc811f6a86ae80ce64b5c4c","articleId":798,"userId":1732,"content":"[@zuohuadong](/user/zuohuadong) 大家说的都有道理，口味问题，不要强求。存在即合理，这几天我也好好学习一下nestjs，😄","createdAt":1556615670968},{"id":4344,"originId":"5cc816f5a86ae80ce64b5ca6","articleId":798,"userId":545,"content":"[@xiaojue](/user/xiaojue)  哈，期待 node.js 在新浪的发展~","createdAt":1556616949365},{"id":4345,"originId":"5cca792705ae566f637fe1ed","articleId":798,"userId":845,"content":"关于路由的实现有一点疑问喔\r\n\r\n在koa中，执行完上一个中间件，很自然就可以到下一个中间件了，但是在Daruk中路由和控制层合并了，即：\r\n```js\r\n  @get(\"/\")\r\n  public async index(ctx: Context, next: Function) {\r\n    ctx.body = \"Hello world\";\r\n  }\r\n```\r\n问题：执行完index函数后，如果我还有接下来的流程需要处理，如何执行下一个函数的逻辑？","createdAt":1556773159686},{"id":4346,"originId":"5ccae4eea86ae80ce64b6026","articleId":798,"userId":358,"content":"[@zhulinwei](/user/zhulinwei) Koa 的 Router 是最后一个中间件，然后就往外走了，如果你需要返回阶段处理，应该是放在前面，然后在 await next() 后面处理。可以再看看洋葱模型理解下","createdAt":1556800750204},{"id":4347,"originId":"5ccaf4d805ae566f637fe2f9","articleId":798,"userId":1734,"content":"[@atian25](/user/atian25) 刚好也有个问题，在中间件处理参数验证，中间件只能挂在router上面对吧，只有这样才能拿到routerName.","createdAt":1556804824751},{"id":4348,"originId":"5ccb08cf5a5bae6e078127e7","articleId":798,"userId":358,"content":"[@xiaozhongliu](/user/xiaozhongliu) 必然，还是上面说的，路由是最里面的一个中间件。所以你肯定要等它的路由匹配后，才能拿到你要的东西，所以需要配置为路由自身的中间件","createdAt":1556809935463},{"id":4349,"originId":"5ccb097a776fb66e0d17181d","articleId":798,"userId":1734,"content":"[@atian25](/user/atian25) ok","createdAt":1556810106675},{"id":4350,"originId":"5ccbbe09776fb66e0d1718c6","articleId":798,"userId":845,"content":"[@atian25](/user/atian25) 谢大牛提点哈哈","createdAt":1556856329686},{"id":4351,"originId":"5cd41fb7ce97fe69027a3e71","articleId":798,"userId":1732,"content":"[@zhulinwei](/user/zhulinwei) 用next实现就行了，和中间件写法一样。","createdAt":1557405623247},{"id":4352,"originId":"5ddb8f1b34a8a07a2dab6f56","articleId":798,"userId":741,"content":"好高端的感觉啊","createdAt":1574670107665},{"id":4353,"originId":"5dd5130e34a8a07a2dab6037","articleId":799,"userId":111,"content":"vue是前端界的thinkphp ","createdAt":1574245134609},{"id":4354,"originId":"5dd5fd808287937a65af5e05","articleId":799,"userId":528,"content":"早早放弃 Vue，投入 Angular 的怀抱。","createdAt":1574305152766},{"id":4355,"originId":"5dd5fef334a8a07a2dab62b0","articleId":799,"userId":1737,"content":"难吗。。。我这边，公司写ios，测试的妹子，写java后端都会vue, 好难混啊~~~","createdAt":1574305523988},{"id":4356,"originId":"5dd601f534a8a07a2dab62d4","articleId":799,"userId":111,"content":"[@pretty-foam](/user/pretty-foam)    选择越容易的技术，自然越来越难混，看选thinkphp的都混到送快递了 ","createdAt":1574306293040},{"id":4357,"originId":"5dd7853034a8a07a2dab67bc","articleId":799,"userId":1199,"content":"vue不是三大框架里面最简单的吗?","createdAt":1574405424907},{"id":4358,"originId":"5ddb7d1c8287937a65af69c8","articleId":799,"userId":1738,"content":"vue3要出来了","createdAt":1574665500266},{"id":4359,"originId":"5ddb873734a8a07a2dab6f18","articleId":799,"userId":741,"content":"前端更新太快了啊 ","createdAt":1574668087368},{"id":4360,"originId":"590a84ea5bb7efe417431fc6","articleId":800,"userId":1739,"content":"👍","createdAt":1493861610209},{"id":4361,"originId":"590ca462d371b6372a8af5ff","articleId":800,"userId":21,"content":"每次作者出的都是实用的干货，必须顶","createdAt":1494000738799},{"id":4362,"originId":"590d32d93504ce1c2ac458fe","articleId":800,"userId":171,"content":"不好用，昨天优化webpack+vue的打包文件时，出timeout错。。。。\r\n而且vue作者尤雨溪也不建议在生产环境中使用。。。。","createdAt":1494037209800},{"id":4363,"originId":"590d37b6ba8670562a40ed61","articleId":800,"userId":11,"content":"[@weiweicat333](/user/weiweicat333) 本来就是还处于试验性阶段呀，官网也说了目前不能用在生产。\r\n我觉得重要的是fb团队的思路...他们总是能从特殊的角度对现有技术做优化...","createdAt":1494038454701},{"id":4364,"originId":"590d3d38cfb837012a59b416","articleId":800,"userId":171,"content":"[@hyj1991](/user/hyj1991)  哦！","createdAt":1494039864743},{"id":4365,"originId":"590ed791ba8670562a40eda6","articleId":800,"userId":535,"content":"哇，好厉害！","createdAt":1494144913455},{"id":4366,"originId":"590ed881ba8670562a40eda8","articleId":800,"userId":535,"content":"Facebook这创意，非常佩服！这貌似是不可能做到的啊，怎么判断哪些函数能计算哪些不能计算呢？","createdAt":1494145153052},{"id":4367,"originId":"590f2ebacfb837012a59b47a","articleId":800,"userId":11,"content":"[@zhanzhenzhen](/user/zhanzhenzhen) 拦截构建 AST 抽象语法树阶段是可以做到的","createdAt":1494167226519},{"id":4368,"originId":"590f2ee23504ce1c2ac4594c","articleId":800,"userId":11,"content":"[@zhanzhenzhen](/user/zhanzhenzhen) 当然现在问题也很多，比如 for 循环，会被拆成一个个的循环字段...","createdAt":1494167266465},{"id":4369,"originId":"590fdda4cfb837012a59b48c","articleId":800,"userId":1740,"content":"看起来很吊的样子","createdAt":1494212004237},{"id":4370,"originId":"5a728402ce45d44045146590","articleId":800,"userId":610,"content":"mack","createdAt":1517454338348},{"id":4371,"originId":"5a72ab51afa0a121784a91cb","articleId":800,"userId":1741,"content":"看起来很有前途的工具，期待稳定版和webpack插件","createdAt":1517464401556},{"id":4372,"originId":"5dd97ace34a8a07a2dab6ba3","articleId":800,"userId":709,"content":"这件事应该v8 自己来做更合适吧","createdAt":1574533838781},{"id":4373,"originId":"5dd749d88287937a65af61d0","articleId":801,"userId":98,"content":"不仅如此，我现在都不怎么愿意公开分享技术了，因为技术已经白菜价了，市面上的编程书，99%都是《xx从入门到精通》《xx天学会xx》《xx实战》《xx程序设计》，把官方文档翻译一遍就敢《xx权威指南》，基本上全是入门级的，后来明白了，高级的技术真的不能分享出去，会的人越多，越不值钱，各行各业的人都来学编程了，前段时间我帮公司招前端，拿到拉勾的企业账号去看简历，简直让我相当震惊，有相当多的人要的薪水是多少？3-5k ！！！，而现在房奴这么多，又促使房奴们多低的薪资，多长的加班时间都能接受，看看华为那些HR是怎么算计技术的","createdAt":1574390232289},{"id":4374,"originId":"5dd7d38834a8a07a2dab6905","articleId":801,"userId":1742,"content":"我一般都是star 很少fork","createdAt":1574425480025},{"id":4375,"originId":"5dd7f6938287937a65af6457","articleId":801,"userId":21,"content":"反正我做分享倒不是为了回报或点星，主要还是给自己看。\r\n还有就是针对抨击分享的，其实很多分享也好，书也好。虽然看起来很垃圾，但要是换自己写，可能垃圾都不知道该怎么出来。\r\n做分享能把肚子里的货写出十分之一都很难，所以即使想把精华分享出来，往往都是心有余而力不足。\r\n现在环境也确实差，想换个不加班的，真的比登天还难，甚至于加班都成共识了。","createdAt":1574434451582},{"id":4376,"originId":"5dd9134b8287937a65af6627","articleId":801,"userId":79,"content":"额额， follow people ...","createdAt":1574507339645},{"id":4377,"originId":"5dd93fcf8287937a65af665c","articleId":801,"userId":829,"content":"一 star\r\n二 follow\r\n三 fork\r\n","createdAt":1574518735649},{"id":4378,"originId":"5dd4ef1534a8a07a2dab5f7e","articleId":802,"userId":1743,"content":"api可以提供给大家使用","createdAt":1574235925030},{"id":4379,"originId":"5dd6565734a8a07a2dab649a","articleId":802,"userId":1744,"content":"其实可以提取出一些公共的部分，来满足爬取各种各样的网页。\r\nhttps://github.com/LuckyHH/WebSpider\r\nhttp://www.aiyou.life/spider/crawl/api?user=Thomas&cid=2a8da447-5b6d-47fc-9b08-3f965b02db42","createdAt":1574327895854},{"id":4380,"originId":"5dd753aa8287937a65af6221","articleId":802,"userId":1745,"content":"[@liuoulin](/user/liuoulin) 能格式化一下吗？看着难受","createdAt":1574392746311},{"id":4381,"originId":"5dcf7425a9f4592e749e1289","articleId":805,"userId":1748,"content":"我们遇到什么困难也不要怕,微笑着面对他,消除恐惧的最好办法就是面对恐惧。坚持,才是胜利!加油!奥利给!","createdAt":1573876773379},{"id":4382,"originId":"5dcf7bf87651572e0955d735","articleId":805,"userId":98,"content":"要全力为工作，牺牲也值得","createdAt":1573878776797},{"id":4383,"originId":"5dcfa0d0a9f4592e749e12f3","articleId":805,"userId":1747,"content":"老哥，稳","createdAt":1573888208931},{"id":4384,"originId":"5dcfb798a9f4592e749e131d","articleId":805,"userId":433,"content":"有什么能比加班更快乐的？哪估计也只有通宵加班了吧！！","createdAt":1573894040875},{"id":4385,"originId":"5dd065e4a9f4592e749e139e","articleId":805,"userId":1197,"content":"[@zengming00](/user/zengming00) 南无阿弥陀佛","createdAt":1573938660064},{"id":4386,"originId":"5dd1e3cea9f4592e749e14d8","articleId":805,"userId":1749,"content":"![QQ图片20191118081928.jpg](//static.cnodejs.org/FpVljVF5Ooff6AZjhWysZum-Tm-Y)  你有我&nbsp；吗？\r\n","createdAt":1574036430350},{"id":4387,"originId":"5dd247477651572e0955dc4e","articleId":805,"userId":1750,"content":"[@Dxw05](/user/Dxw05) 奥利给!","createdAt":1574061895667},{"id":4388,"originId":"5dd33e587651572e0955ddf0","articleId":805,"userId":726,"content":"牛逼","createdAt":1574125144247},{"id":4389,"originId":"5dd53c5c8287937a65af5c84","articleId":805,"userId":111,"content":"![bingliang.png](//static.cnodejs.org/FhScPUvzorcj19xpbDxNgrJmJjwg)\r\n 钱在银行 人在天堂真快乐，你的快乐是建立在别人的痛苦之上的","createdAt":1574255708020},{"id":4390,"originId":"5dd51b768287937a65af5c20","articleId":806,"userId":1751,"content":"这真的是太惨了 还有这世道。。","createdAt":1574247286620},{"id":4391,"originId":"5dd51bbe34a8a07a2dab605f","articleId":806,"userId":111,"content":"[@gakaki](/user/gakaki)  让你赶上了","createdAt":1574247358610},{"id":4392,"originId":"5dd51d8434a8a07a2dab6069","articleId":806,"userId":98,"content":"身为大神，有责任教导下一代程序猿不要996","createdAt":1574247812086},{"id":4393,"originId":"5dc0b8e2865a9844a301fdbe","articleId":808,"userId":545,"content":"angular 工程化程度更高，而且适合大项目。\r\nnest.js 做后端的话，跟angular 是亲兄弟，两个连装饰器名字都一样。\r\n学一个会俩。","createdAt":1572911330775},{"id":4394,"originId":"5dc23741865a9844a302028a","articleId":808,"userId":829,"content":"啥也不想说  [http://oxoyo.co/X-WebDesktop-Vue/](http://oxoyo.co/X-WebDesktop-Vue/)","createdAt":1573009217158},{"id":4395,"originId":"5dc2950dece3813ad9ba6bb6","articleId":808,"userId":161,"content":"做的很好，特别是ichat机器人回复\r\n","createdAt":1573033229303},{"id":4396,"originId":"5dc370a3865a9844a30205ea","articleId":808,"userId":728,"content":"做这种东西有啥意义呢？？？","createdAt":1573089443183},{"id":4397,"originId":"5dc387e7ece3813ad9ba6d66","articleId":808,"userId":18,"content":"好厉害。。。","createdAt":1573095399848},{"id":4398,"originId":"5dc390c3ece3813ad9ba6dc8","articleId":808,"userId":36,"content":"有点意思","createdAt":1573097667206},{"id":4399,"originId":"5dc3b8f3ece3813ad9ba6e73","articleId":808,"userId":829,"content":"[@tzbcf](/user/tzbcf) 用的图灵机器人。","createdAt":1573107955229},{"id":4400,"originId":"5dc4c7a4865a9844a30208f6","articleId":808,"userId":1754,"content":"这是啥东西哦，搞不懂","createdAt":1573177252330},{"id":4401,"originId":"5dd3bbfe7651572e0955e06b","articleId":808,"userId":1546,"content":"好像站长给我评论了，不管是真心还是吐槽，🙏\r\n这个东西不是说有什么用，而是一种尝试而已，大家可以持续关注一下，我一直在想能不能以后一个webos就能让我随处工作学习","createdAt":1574157310937},{"id":4402,"originId":"5dd49a017651572e0955e1be","articleId":808,"userId":686,"content":"结合下智能电视应用才有意义","createdAt":1574214145505},{"id":4403,"originId":"5dd49c3da9f4592e749e1de5","articleId":808,"userId":1546,"content":"[@yibo5220](/user/yibo5220) 非常好的建议！","createdAt":1574214717041},{"id":4404,"originId":"5dd4b97a8518b67016023118","articleId":808,"userId":1193,"content":"厉害！","createdAt":1574222202631},{"id":4405,"originId":"5b8f4e6c82f0728f354d7420","articleId":809,"userId":1595,"content":"都没有人支持一下  我要哭了","createdAt":1536118380917},{"id":4406,"originId":"5b8f4f504cdb88f72f5a9096","articleId":809,"userId":1592,"content":"+1 支持一下 ","createdAt":1536118608868},{"id":4407,"originId":"5b8f75bf82f0728f354d7438","articleId":809,"userId":1756,"content":"支持","createdAt":1536128447354},{"id":4408,"originId":"5b908c3e37b3005a0b0e6bd7","articleId":809,"userId":291,"content":"支持一波！","createdAt":1536199742783},{"id":4409,"originId":"5b908ff2bf116a8c0e425842","articleId":809,"userId":1757,"content":"支持一波+1\r\n","createdAt":1536200690117},{"id":4410,"originId":"5b9091e937b3005a0b0e6bdd","articleId":809,"userId":792,"content":"plus1\nvia [CNode](https://github.com/nswbmw/cnode-swift)","createdAt":1536201193378},{"id":4411,"originId":"5b9092dbbf116a8c0e425844","articleId":809,"userId":1758,"content":"老铁，我很喜欢egg,从express到koa到egg.感觉越来越符合我的风格，给你点个赞","createdAt":1536201435156},{"id":4412,"originId":"5b9097424cdb88f72f5a90de","articleId":809,"userId":1759,"content":"老铁 我支持你 egg非常优秀，可以让nodejs具备开发大型企业项目的能力。","createdAt":1536202562054},{"id":4413,"originId":"5b90a1564cdb88f72f5a90e2","articleId":809,"userId":1760,"content":"支持","createdAt":1536205142594},{"id":4414,"originId":"5b912e364cdb88f72f5a9134","articleId":809,"userId":1595,"content":"[@1134506391](/user/1134506391) 谢谢老铁的支持 点赞","createdAt":1536241206943},{"id":4415,"originId":"5b912e434cdb88f72f5a9136","articleId":809,"userId":1595,"content":"谢谢老铁们的支持+1","createdAt":1536241219755},{"id":4416,"originId":"5b91d30ebf116a8c0e425892","articleId":809,"userId":1758,"content":"[@zlyuanteng](/user/zlyuanteng) 老铁是买了大地的课程蚂","createdAt":1536283406722},{"id":4417,"originId":"5b91df124cdb88f72f5a914d","articleId":809,"userId":1595,"content":"[@1134506391](/user/1134506391) 不告诉你  淘宝买的","createdAt":1536286482013},{"id":4418,"originId":"5b91e460bf116a8c0e4258a0","articleId":809,"userId":1758,"content":"[@zlyuanteng](/user/zlyuanteng) 后面实际的小米商城用的是mondgob吗，不是mysql瞬间不想买了","createdAt":1536287840634},{"id":4419,"originId":"5b91f6ff37b3005a0b0e6c57","articleId":809,"userId":390,"content":"支持\r\n","createdAt":1536292607784},{"id":4420,"originId":"5b947096f1e8bc7579c78369","articleId":809,"userId":1595,"content":"[@1134506391](/user/1134506391) cnodejs也是mongodb哦。会mysql用mysql照样可以开发哦","createdAt":1536454806735},{"id":4421,"originId":"5b947d0bf1e8bc7579c7836f","articleId":809,"userId":1761,"content":"支持","createdAt":1536457995784},{"id":4422,"originId":"5b947d204cdb88f72f5a91b9","articleId":809,"userId":1761,"content":"支持","createdAt":1536458016201},{"id":4423,"originId":"5b95dcaabf116a8c0e425988","articleId":809,"userId":1758,"content":"[@zlyuanteng](/user/zlyuanteng) 老铁，有些问题请教一下，加个好友吧 QQ:1134506391 \r\n","createdAt":1536548010392},{"id":4424,"originId":"5b962f4dbf116a8c0e4259b7","articleId":809,"userId":1595,"content":"[@1134506391](/user/1134506391) 好的","createdAt":1536569165703},{"id":4425,"originId":"5b99c4e2f1e8bc7579c7854d","articleId":809,"userId":1595,"content":"[@bupafengyu](/user/bupafengyu) 给你个飞吻","createdAt":1536804066355},{"id":4426,"originId":"5b99d30cce9d14c2254df9af","articleId":809,"userId":866,"content":"敢哭 打爆你","createdAt":1536807692175},{"id":4427,"originId":"5b9a250bf1e8bc7579c785b4","articleId":809,"userId":1595,"content":"[@phper-chen](/user/phper-chen) 呵呵呵，这么幽默。","createdAt":1536828683282},{"id":4428,"originId":"5b9b62fd8f5b0c1c59ea0dcd","articleId":809,"userId":1595,"content":"[@supperjet](/user/supperjet) 谢谢支持","createdAt":1536910077997},{"id":4429,"originId":"5b9b63047895e5575997970a","articleId":809,"userId":1595,"content":"[@wuwangju](/user/wuwangju) 谢谢支持","createdAt":1536910084631},{"id":4430,"originId":"5b9d02457895e557599797ac","articleId":809,"userId":1594,"content":"支持+1","createdAt":1537016389221},{"id":4431,"originId":"5b9d21d9a5ed9d2159fa31de","articleId":809,"userId":879,"content":"支持👍","createdAt":1537024473169},{"id":4432,"originId":"5b9e008c7895e557599797c1","articleId":809,"userId":1591,"content":"支持+1","createdAt":1537081484665},{"id":4433,"originId":"5b9fb57c9545eaf107b9c3e9","articleId":809,"userId":1594,"content":"喜欢egg","createdAt":1537193340869},{"id":4434,"originId":"5ba2565b15e4fd1923f4891d","articleId":809,"userId":1595,"content":"[@sunmoon22](/user/sunmoon22) 嘿嘿  喜欢蛋蛋","createdAt":1537365595321},{"id":4435,"originId":"5ba4550b9545eaf107b9c50c","articleId":809,"userId":1762,"content":"感谢！","createdAt":1537496331131},{"id":4436,"originId":"5ba4555c9545eaf107b9c50e","articleId":809,"userId":1762,"content":"[@zlyuanteng](/user/zlyuanteng)  加个好友呗 1669666567 QQ 希望有问题可以问你 哈哈","createdAt":1537496412307},{"id":4437,"originId":"5bac539d15e4fd1923f48ace","articleId":809,"userId":1763,"content":"支持  eggjs国内还是比较少","createdAt":1538020253967},{"id":4438,"originId":"5bbf45b8ede204052db80498","articleId":809,"userId":1597,"content":"支持一波 +1","createdAt":1539261880933},{"id":4439,"originId":"5bc3351037a6965f590521b2","articleId":809,"userId":1764,"content":"支持支持 公司正好要用egg开发项目 先学下基础","createdAt":1539519760403},{"id":4440,"originId":"5bc6f66037a6965f590522ed","articleId":809,"userId":1765,"content":"给力","createdAt":1539765856499},{"id":4441,"originId":"5bc7eec637a6965f59052327","articleId":809,"userId":1595,"content":"[@zdingfeng](/user/zdingfeng) 你们公司用egg写什么项目","createdAt":1539829446880},{"id":4442,"originId":"5bc938d615e4fd1923f490ad","articleId":809,"userId":1595,"content":"[@nodeper](/user/nodeper) 谢谢老铁的支持 点赞","createdAt":1539913942457},{"id":4443,"originId":"5bc938dc15e4fd1923f490af","articleId":809,"userId":1595,"content":"[@wuwangju](/user/wuwangju) 谢谢老铁的支持 点赞","createdAt":1539913948569},{"id":4444,"originId":"5bcae1f737a6965f590523f9","articleId":809,"userId":1597,"content":"讲的不错","createdAt":1540022775769},{"id":4445,"originId":"5bd7aee3d00aac1004de5233","articleId":809,"userId":1597,"content":"厉害了，快更新完了吧","createdAt":1540861667821},{"id":4446,"originId":"5bda5bad04de603bdb44854e","articleId":809,"userId":1601,"content":"厉害了，更新这么多了","createdAt":1541036973668},{"id":4447,"originId":"5be1159221d75b74609f4657","articleId":809,"userId":1599,"content":"给力 666","createdAt":1541477778159},{"id":4448,"originId":"5bf3ccbbbe1b120abac5b2a1","articleId":809,"userId":1595,"content":"[@magege666](/user/magege666) http://bbs.itying.com/  这个网站就是egg.js开发的","createdAt":1542704315430},{"id":4449,"originId":"5bf3ccc4be1b120abac5b2a5","articleId":809,"userId":1595,"content":"[@wuwangju](/user/wuwangju) 快更新完成了","createdAt":1542704324879},{"id":4450,"originId":"5bfb49c2be1b120abac5cafa","articleId":809,"userId":1595,"content":"[@vueper](/user/vueper) 是的rbac关系搞明白，其实就是curd          主要就是关系逻辑复杂","createdAt":1543195074267},{"id":4451,"originId":"5bfcbe72be1b120abac5d39f","articleId":809,"userId":359,"content":"我买了这个，还没看完，电脑坏了怎么破？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1543290482687},{"id":4452,"originId":"5c00da59be1b120abac5e850","articleId":809,"userId":1591,"content":"看上去很不错","createdAt":1543559769571},{"id":4453,"originId":"5c04be2e39c0af64fddb81b2","articleId":809,"userId":1589,"content":"[@eggper](/user/eggper) 会了就不难了","createdAt":1543814702247},{"id":4454,"originId":"5c0575be1c62d833493504b3","articleId":809,"userId":1364,"content":"Mark","createdAt":1543861694870},{"id":4455,"originId":"5c0cfd2d7ec239239ff55037","articleId":809,"userId":1595,"content":"[@tangchi695](/user/tangchi695) 不影响","createdAt":1544355117887},{"id":4456,"originId":"5c1200237ec239239ff56718","articleId":809,"userId":1598,"content":"[@eggper](/user/eggper) 数据库自己会什么可以用什么哦","createdAt":1544683555716},{"id":4457,"originId":"5c125ccdf3d48d2397c10ff0","articleId":809,"userId":1595,"content":"[@nodeper](/user/nodeper) 一般那个数据库会更好","createdAt":1544707277301},{"id":4458,"originId":"5c17052e7ec239239ff576a1","articleId":809,"userId":1598,"content":"[@zlyuanteng](/user/zlyuanteng) mysql   mongodb都挺好  看公司需求  以及看看公司技术人员水平","createdAt":1545012526146},{"id":4459,"originId":"5c1b40683898674067a76628","articleId":809,"userId":1595,"content":"[@nodeper](/user/nodeper) 对的","createdAt":1545289832659},{"id":4460,"originId":"5c1e4fa23898674067a77331","articleId":809,"userId":710,"content":"Mark","createdAt":1545490338207},{"id":4461,"originId":"5c22e4c976c4964062a1dd74","articleId":809,"userId":725,"content":"Mark  6666","createdAt":1545790665619},{"id":4462,"originId":"5c2dfeed5bf06c5e7e3f0e51","articleId":809,"userId":1598,"content":"[@zlyuanteng](/user/zlyuanteng) 用什么都可以的","createdAt":1546518253044},{"id":4463,"originId":"5c31779f5bf06c5e7e3f1c20","articleId":809,"userId":1595,"content":"[@nodeper](/user/nodeper) 对的  看公司需求","createdAt":1546745759236},{"id":4464,"originId":"5c3317d75bf06c5e7e3f2348","articleId":809,"userId":686,"content":"[@nodeper](/user/nodeper) nodejs和mongodb组合对于前端来说比较简单吧 会mysql node+mysql也可以的","createdAt":1546852311853},{"id":4465,"originId":"5c3318dd3898674067a7c269","articleId":809,"userId":1766,"content":"支持一下  讲的非常好   egg也非常强大","createdAt":1546852573613},{"id":4466,"originId":"5c331a335bf06c5e7e3f235f","articleId":809,"userId":1766,"content":"还在更新呢，已经更新到支付宝支付了 ,来一起学习啊 ","createdAt":1546852915548},{"id":4467,"originId":"5c396a7ba4d44449266b0086","articleId":809,"userId":1767,"content":"[@zuumau](/user/zuumau)你买了吗","createdAt":1547266683988},{"id":4468,"originId":"5c3f4136a4d44449266b1c7a","articleId":809,"userId":686,"content":"讲的不错","createdAt":1547649334594},{"id":4469,"originId":"5c3ff6013898674067a80133","articleId":809,"userId":1767,"content":"[@yibo5220](/user/yibo5220) 你看完了吗  ","createdAt":1547695617833},{"id":4470,"originId":"5c568d6605cc322e7b1372a5","articleId":809,"userId":686,"content":"快完了","createdAt":1549176166882},{"id":4471,"originId":"5c5ff021e6aaad2ea76df3d5","articleId":809,"userId":831,"content":"留个名字\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1549791265320},{"id":4472,"originId":"5c6d628de1a81129a7ad8e57","articleId":809,"userId":685,"content":"为什么现在nodejs都是用mongodb   有讲Sequelize吗","createdAt":1550672525360},{"id":4473,"originId":"5c6e2127e1a81129a7ad91e1","articleId":809,"userId":1767,"content":"[@eggper](/user/eggper) mysql也可以的，mongodb简单一些","createdAt":1550721319686},{"id":4474,"originId":"5c754c65a667ed6d807b95a0","articleId":809,"userId":1767,"content":"[@eggper](/user/eggper) 还没有","createdAt":1551191141879},{"id":4475,"originId":"5c7c0add90c14711cc8c9cb3","articleId":809,"userId":1768,"content":"不能在线播放。。。","createdAt":1551633117493},{"id":4476,"originId":"5c7c98135b8cb21491ca57ba","articleId":809,"userId":1767,"content":"[@g8up](/user/g8up) B站找找","createdAt":1551669267138},{"id":4477,"originId":"5c7cd4c290c14711cc8ca10a","articleId":809,"userId":831,"content":"🐴一下\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1551684802564},{"id":4478,"originId":"5c7d20895b8cb21491ca5c46","articleId":809,"userId":685,"content":"[@gougou168](/user/gougou168) 在线播放地址 https://www.bilibili.com/video/av38372787?from=search&seid=3180256622756357174     ","createdAt":1551704201485},{"id":4479,"originId":"5c7f46765b8cb21491ca65af","articleId":809,"userId":1605,"content":"Egg.js 公司里面用的多吗","createdAt":1551844982688},{"id":4480,"originId":"5c85f603acb681372d416ea2","articleId":809,"userId":1605,"content":"[@phonegap100](/user/phonegap100) 哪些公司在用知道吗","createdAt":1552283139824},{"id":4481,"originId":"5c8754687ce0df373242733e","articleId":809,"userId":685,"content":"[@nodeper666](/user/nodeper666) https://cnodejs.org/topic/5b7ac9c7c52ad1482eb940bf    看看这个帖子就知道了","createdAt":1552372840783},{"id":4482,"originId":"5c8c8ce1acb681372d418abb","articleId":809,"userId":100,"content":"战略性Mark","createdAt":1552714977006},{"id":4483,"originId":"5c9439ac00bcfd7eb2be4cec","articleId":809,"userId":1767,"content":"[@eggper](/user/eggper) 谢谢老弟","createdAt":1553217964740},{"id":4484,"originId":"5c958caf00bcfd7eb2be52ed","articleId":809,"userId":1605,"content":"[@eggper](/user/eggper) 用的公司这么多啊  呜呜","createdAt":1553304751867},{"id":4485,"originId":"5c98315700bcfd7eb2be59b2","articleId":809,"userId":685,"content":"[@nodeper666](/user/nodeper666) egg早都火了","createdAt":1553477975566},{"id":4486,"originId":"5cac1d327edd13064e053b97","articleId":809,"userId":191,"content":"[@eggper](/user/eggper) github的星星才一万多了,可能全栈工程师要比前端少一些吧","createdAt":1554783538336},{"id":4487,"originId":"5cce43ce5a5bae6e07812ca4","articleId":809,"userId":99,"content":"[@nodeper666](/user/nodeper666) \r\n    深度使用的： 阿里，全民直播\r\n    使用并有分享过使用经验的：去哪儿，摩拜，点评\r\n    有个别团队咨询过试水但最终有没有落地的不知道：美团，新浪，百度，腾讯，YY 等\r\n","createdAt":1557021646698},{"id":4488,"originId":"5cce601d5a5bae6e07812e46","articleId":809,"userId":1769,"content":"[@phonegap100](/user/phonegap100) 你怎么知道的","createdAt":1557028893073},{"id":4489,"originId":"5ccea01b5a5bae6e07813032","articleId":809,"userId":1770,"content":"支持支持","createdAt":1557045275026},{"id":4490,"originId":"5cd1515ebd52e97fe19e1baf","articleId":809,"userId":1217,"content":"支持支持","createdAt":1557221726660},{"id":4491,"originId":"5ce3f043e57aac76fed2cc9a","articleId":809,"userId":100,"content":"讲的非常好 egg也非常强大","createdAt":1558442051825},{"id":4492,"originId":"5cef29514036f24194cf7c34","articleId":809,"userId":100,"content":"[@g8up](/user/g8up) [https://www.bilibili.com/video/av38372787?from=search&seid=3180256622756357174](https://www.bilibili.com/video/av38372787?from=search&seid=3180256622756357174)","createdAt":1559177553192},{"id":4493,"originId":"5cf48f2b1fe902120f31b875","articleId":809,"userId":99,"content":"[@xiaofenlin](/user/xiaofenlin) 百度搜下就知道了","createdAt":1559531307894},{"id":4494,"originId":"5d1d66142beced2efd51f57c","articleId":809,"userId":1771,"content":"赞","createdAt":1562207764069},{"id":4495,"originId":"5d21962371951f750ccb91f6","articleId":809,"userId":191,"content":"[@youmenglinz](/user/youmenglinz) 支持","createdAt":1562482211275},{"id":4496,"originId":"5d392c869969a529571d713e","articleId":809,"userId":685,"content":"[@gougou168](/user/gougou168) 知道了","createdAt":1564028038137},{"id":4497,"originId":"5d70be4aa7474a231a589489","articleId":809,"userId":189,"content":"有些问题请教一下，求大神加个好友","createdAt":1567669834060},{"id":4498,"originId":"5dd498897651572e0955e1a1","articleId":809,"userId":686,"content":"[@youmenglinzi](/user/youmenglinzi) 牛","createdAt":1574213769922},{"id":4499,"originId":"5dd3f5a17651572e0955e0f0","articleId":810,"userId":21,"content":"很详细，很有意思","createdAt":1574172065189},{"id":4500,"originId":"5a1683c3fa68dfbc62addf7f","articleId":811,"userId":1774,"content":"star了，额去试一下。","createdAt":1511424963950},{"id":4501,"originId":"5a168838476ea1170b733a66","articleId":811,"userId":1773,"content":"[@dlyt](/user/dlyt) 谢谢","createdAt":1511426104183},{"id":4502,"originId":"5a16bab243efb10d09ef8a3c","articleId":811,"userId":627,"content":"star\n\n```\n\n\n```\n\n```\n \n```\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1511439026124},{"id":4503,"originId":"5a16ca3b476ea1170b733a74","articleId":811,"userId":1773,"content":"[@dbit-xia](/user/dbit-xia) 谢谢","createdAt":1511443003764},{"id":4504,"originId":"5dd3b3f27651572e0955e046","articleId":811,"userId":1775,"content":"赞","createdAt":1574155250932},{"id":4505,"originId":"5433d866e737cbe96dcef313","articleId":813,"userId":424,"content":"我喜欢你的写作风格","createdAt":1412683878981},{"id":4506,"originId":"5433e51ce737cbe96dcef315","articleId":813,"userId":18,"content":"[[[[@leapon](/user/leapon)](/user/leapon)](/user/leapon)](/user/leapon) 原来你喜欢扯淡式风格","createdAt":1412687132158},{"id":4507,"originId":"5433f893e737cbe96dcef31f","articleId":813,"userId":206,"content":"不错呀, 楼主继续哟, 将来就是一本书了","createdAt":1412692115184},{"id":4508,"originId":"54340970e737cbe96dcef32c","articleId":813,"userId":892,"content":"非常感谢，我会学的，我会学的，我会仔细仔细的学的。：D","createdAt":1412696432916},{"id":4509,"originId":"54340e24e737cbe96dcef32e","articleId":813,"userId":892,"content":" ![屏幕快照 2014-10-07 23.58.26.png](//static.cnodejs.org/FqEiClQn3O4jdq8Vy4DTb1d_oWXy)\r\n \r\n 太郁闷了，Lesson 0 就出问题了，让我 `trying to update` 但是我不知道怎么做，我尝试进入 `~/.nvm`，再执行 `install.sh` 一样的结果。","createdAt":1412697636045},{"id":4510,"originId":"54341143e737cbe96dcef330","articleId":813,"userId":1777,"content":"略屌，先顶","createdAt":1412698435871},{"id":4511,"originId":"54341627e737cbe96dcef332","articleId":813,"userId":18,"content":"[@think2011](/user/think2011) 需要 source 一下，教程下面的答疑应该有涉及这方面。","createdAt":1412699687933},{"id":4512,"originId":"54341a57e737cbe96dcef336","articleId":813,"userId":892,"content":"[@alsotang](/user/alsotang) 哦，刚开始上手OS X，还不太明白。\r\n\r\n\r\nLesson 6 关于测试方面的内容很有帮助，期待后续的教程！","createdAt":1412700759916},{"id":4513,"originId":"54348542e737cbe96dcef33b","articleId":813,"userId":1011,"content":"good job 太棒了","createdAt":1412728130151},{"id":4514,"originId":"54349a58e737cbe96dcef34b","articleId":813,"userId":1778,"content":"感谢分享！","createdAt":1412733528458},{"id":4515,"originId":"54349cfee737cbe96dcef351","articleId":813,"userId":18,"content":"[@songtanjichuan](/user/songtanjichuan) 还没写啊。。。","createdAt":1412734206852},{"id":4516,"originId":"54349fb4e737cbe96dcef357","articleId":813,"userId":1430,"content":"赞一个~","createdAt":1412734900671},{"id":4517,"originId":"5434a36ce737cbe96dcef35d","articleId":813,"userId":1779,"content":"[@think2011](/user/think2011) nvm在安装完之后，会在profile文件里头添加上自己的export信息，在unix系统中，多个环境变量配置文件可能会互相冲突（优先级）。\r\n\r\n如果你曾经装过例如homebrew等修改过环境变量的程序之后，可能会创建.bashrc文件，然后把环境变量写入到这个文件中。\r\n但是nvm会将自己的信息添加到.profile中，unix默认设置下，如果有bashrc就不再加载profile了，所以你去把profile里头的东西复制到bashrc里头就行。\r\n\r\n中心思想就是：mac下的nonlogin-shell和login=-shell的两个配置文件profile、bashrc是不共存的，除非你在其中一个配置文件中source了另一个配置文件，否则这两个配置文件只会有一个被执行，检查一下你的目录看看里头如果有多个配置文件就可能有问题了\r\n\r\n（上述文件名啥的早就忘了可能会说错，意思就是这个意思）","createdAt":1412735852006},{"id":4518,"originId":"5434a7fe5a68db8073c4a22e","articleId":813,"userId":18,"content":"[@friskit-china](/user/friskit-china) [@think2011](/user/think2011) 我在 .bash\\_profile 中 source 了 .profile","createdAt":1412737022640},{"id":4519,"originId":"5434deb55a68db8073c4a281","articleId":813,"userId":1,"content":"发 Mac 了好幸福 QAQ","createdAt":1412751029051},{"id":4520,"originId":"5434df795a68db8073c4a283","articleId":813,"userId":18,"content":"[@xadillax](/user/xadillax) 来阿里照样有！","createdAt":1412751225104},{"id":4521,"originId":"54351dbe9a5a282178cef6ec","articleId":813,"userId":1780,"content":"npm install superagent --save   出错   npm ERR! cb() never called!安装出错了","createdAt":1412767166164},{"id":4522,"originId":"5435dfeb9a5a282178cef727","articleId":813,"userId":1781,"content":"nice","createdAt":1412816875727},{"id":4523,"originId":"54362dd19a5a282178cef783","articleId":813,"userId":146,"content":"唉，格了正版window8，是时候装个centOS了！学起学起","createdAt":1412836817043},{"id":4524,"originId":"543634239a5a282178cef78a","articleId":813,"userId":1782,"content":"WIN也可以安装NODE.JS呀","createdAt":1412838435087},{"id":4525,"originId":"54364b719a5a282178cef7b1","articleId":813,"userId":1783,"content":"我自己写了个简单的爬虫，用到了cheerio，但是如果目标网页是非utf8的话，拿到的中文全是乱码，这个怎么解决呢？我没有用superagent，就是用的node的http.get，谢谢","createdAt":1412844401510},{"id":4526,"originId":"54364d4e9a5a282178cef7b5","articleId":813,"userId":18,"content":"[@hwoarangzk](/user/hwoarangzk) 建议用 superagent 配合 superagentparse 使用。如果坚持使用 http.get 的话，concat buffer 的时候使用 bufferhelper，转换编码使用 iconv-lite","createdAt":1412844878257},{"id":4527,"originId":"543653d99a5a282178cef7bd","articleId":813,"userId":1783,"content":"嗯，刚才用iconv的时候，没注意第一个参数必须是个buffer，我之前用的是字符串，怪不得一直不成功，后来改成用buffer就好了","createdAt":1412846553732},{"id":4528,"originId":"543686739a5a282178cef7f2","articleId":813,"userId":203,"content":"进来从头再学一遍，教程真是简明扼要，收获不少啊~\r\n我就是在windows下开发node.js的哇，哈哈哈哈~","createdAt":1412859507013},{"id":4529,"originId":"54369a7d9a5a282178cef7fe","articleId":813,"userId":18,"content":"[@snoopy](/user/snoopy) 大神真看得起这种入门教程啊！看来以后要更认真对待了，同行 review 什么的最可怕了。","createdAt":1412864637349},{"id":4530,"originId":"5436b7c49a5a282178cef818","articleId":813,"userId":1784,"content":"我猜楼主是搞java的","createdAt":1412872132441},{"id":4531,"originId":"5436b98e9a5a282178cef81a","articleId":813,"userId":18,"content":"[@adminparry](/user/adminparry) 能不能猜我是搞 ruby 的谢谢！","createdAt":1412872590464},{"id":4532,"originId":"54373ceed73c7ebc269adb1a","articleId":813,"userId":205,"content":"mac吊炸天...","createdAt":1412906222783},{"id":4533,"originId":"54376f1ed73c7ebc269adb50","articleId":813,"userId":1785,"content":"为啥win下没讲 ","createdAt":1412919070327},{"id":4534,"originId":"5437749cd73c7ebc269adb56","articleId":813,"userId":18,"content":"[@ychow](/user/ychow) win 下时不时有不兼容的问题，所以放弃了。","createdAt":1412920476914},{"id":4535,"originId":"5438174da220049637e41934","articleId":813,"userId":1786,"content":"坐等mongo，实现自己的小想法。","createdAt":1412962125385},{"id":4536,"originId":"5438e1980a81cb4c4881c304","articleId":813,"userId":1787,"content":"必须顶！","createdAt":1413013912870},{"id":4537,"originId":"543ba11e6732efc86e5d104f","articleId":813,"userId":1788,"content":"这类的课程完全是浪费时间，\r\n学javasript 入门一下 + 实战 + 加各类编程思想，程序设计书籍足矣。\r\n不断实践、思考、改进，不断编码实现。\r\n时间的积累，代码量的积累一上来，自然而然豁然开朗。","createdAt":1413194014735},{"id":4538,"originId":"543bb2406732efc86e5d1054","articleId":813,"userId":18,"content":"[@liveinjs](/user/liveinjs) 好像也有点道理，呵呵","createdAt":1413198400837},{"id":4539,"originId":"543c9d1091eadb0f73aa3439","articleId":813,"userId":1789,"content":"[@liveinjs](/user/liveinjs)  不同意你的说法。对项目作者自己，是一个整理自身所学的过程，能够查漏补缺，增强理解。对于读者，一是step by  step的教程有助于减少入门的挫折感，二是作为例程可以在自己的项目里复用，三是学习思路和一些模块的用法。同时作为公开项目，可以众包建设、可以不断改进。这种模式可以说是一石多鸟，必将大行其道，取代现有的计算机类书籍。 [@alsotang](/user/alsotang)  加油~","createdAt":1413258512199},{"id":4540,"originId":"543cb60291eadb0f73aa3464","articleId":813,"userId":18,"content":"[@pockry](/user/pockry) ....至少我是喜欢这种做题的方式..","createdAt":1413264898600},{"id":4541,"originId":"543d220691eadb0f73aa3506","articleId":813,"userId":1406,"content":"[@alsotang](/user/alsotang) 我也挺喜欢，看起来不太费劲，但是，小心，别把蛋扯碎了。。。。。。\r\n\r\n\r\nBTW, BDD是不是也是TDD的一种？ 查了不少资料，说BDD是TDD的变种，但是实际驱动开发的时候，是不是也和TDD一样，先写测试。只不过两者关注点不一样，是不是呀？\r\n","createdAt":1413292550254},{"id":4542,"originId":"543d288591eadb0f73aa3512","articleId":813,"userId":18,"content":"[@soliury](/user/soliury) 对，关注点不一样，bdd 看问题的层面更高一点。tdd 被认为更倾向于测接口，而 bdd 被认为要模拟用户的行为来测试。\r\n\r\n了解一下就好了。","createdAt":1413294213448},{"id":4543,"originId":"543d2cf791eadb0f73aa351b","articleId":813,"userId":1406,"content":"[@alsotang](/user/alsotang) 嗯嗯。 那nodeclub的测试是BDD类型的？should.js好像就是BDD的断言库。","createdAt":1413295351057},{"id":4544,"originId":"543d3d6d91eadb0f73aa3535","articleId":813,"userId":18,"content":"[@soliury](/user/soliury) should.js 是 bdd 的类型库，assert 就比较像 tdd 的了。不过是哪种不重要，主要是测试用例覆盖齐不齐。","createdAt":1413299565881},{"id":4545,"originId":"54408fe36ab98d6c509e0123","articleId":813,"userId":1790,"content":"[@liveinjs](/user/liveinjs) 整理这些课程也并不简单，每个人的基础不一样，学习方法也不一样，你不能用 “这类的课程完全是浪费时间” 一句话说写，也给自己留点余地，感谢\r\n[@alsotang](/user/alsotang) 的分享","createdAt":1413517283243},{"id":4546,"originId":"5441da366ab98d6c509e01fe","articleId":813,"userId":1791,"content":"观众还是一边倒， [@liveinjs](/user/liveinjs)  要加油了，看了一下你的repos， https://github.com/liveinjs/myfn   `abtest,js` 视乎得改个名。\r\n也不是找茬，纯粹好奇就过去瞄了一眼。\r\n想说，贡献代码、文档是一件积极美好的事情，在否定美好的时候，请带来更美好的！\r\n和[@alsotang](/user/alsotang) 私下沟通过，他不是要做21天精通node.js,  而是用node.js 来串讲web开发这件事。\r\n教程还在不断完善中， `talking or laughing is cheap, show me the code`","createdAt":1413601846540},{"id":4547,"originId":"54426db377ae2641089ac66a","articleId":813,"userId":1792,"content":"死等`Lesson 8: 《Mongodb 与 Mongoose 的使用》`","createdAt":1413639603684},{"id":4548,"originId":"5442786e77ae2641089ac672","articleId":813,"userId":1793,"content":"[@liuzhengming](/user/liuzhengming) 额，这个lesson计划可能是我写，这么看来还是 [@alsotang](/user/alsotang) 来写比较好","createdAt":1413642350580},{"id":4549,"originId":"5442820977ae2641089ac677","articleId":813,"userId":18,"content":"[@Ricardo-Li](/user/Ricardo-Li) 你写，我帮你修订。","createdAt":1413644809513},{"id":4550,"originId":"544290b477ae2641089ac67d","articleId":813,"userId":648,"content":"express 4.xx后变化很大，node 代码14年开始的代码简直全变化了，这可能是12年开始的node学习的一个分水岭阶段。","createdAt":1413648564195},{"id":4551,"originId":"544291d977ae2641089ac67f","articleId":813,"userId":648,"content":"急需一个 express 4.xx +mysql 这种例子应用，哪里能找到呢","createdAt":1413648857506},{"id":4552,"originId":"5442b53777ae2641089ac68d","articleId":813,"userId":18,"content":"[@gotolnc](/user/gotolnc) mysql 的使用没有什么特殊的地方啊，express 用好了就 ok 了。","createdAt":1413657911809},{"id":4553,"originId":"5443188b77ae2641089ac694","articleId":813,"userId":1792,"content":"[@Ricardo-Li](/user/Ricardo-Li) 期待，期待... ","createdAt":1413683339179},{"id":4554,"originId":"5444121c4ca29a4d4c08c2f1","articleId":813,"userId":648,"content":"[@alsotang](/user/alsotang) 现在网上全是express 4以前的例子，哪里有最新的例子想看一下，发现3的例子基本上不能运行","createdAt":1413747228713},{"id":4555,"originId":"5444c8359657d9ab12567d97","articleId":813,"userId":1794,"content":"恩，不错，赞一个，希望noder越来越多","createdAt":1413793845194},{"id":4556,"originId":"5445ea90649ac9220757b747","articleId":813,"userId":18,"content":"[@songtanjichuan](/user/songtanjichuan) 写东西也累的啊..周末..","createdAt":1413868176465},{"id":4557,"originId":"5445f8ea649ac9220757b76c","articleId":813,"userId":1795,"content":"[@klamtlne](/user/klamtlne) 学习啦","createdAt":1413871850959},{"id":4558,"originId":"54461349649ac9220757b794","articleId":813,"userId":1796,"content":"短小精悍，但是每章看起来都很充实！","createdAt":1413878601070},{"id":4559,"originId":"544778da649ac9220757b919","articleId":813,"userId":1797,"content":"好东西，找机会玩一下","createdAt":1413970138724},{"id":4560,"originId":"5447a19a7a48e1f907397faf","articleId":813,"userId":18,"content":"[@mexiQQ](/user/mexiQQ) 一起来搞搞社区呗：）","createdAt":1413980570271},{"id":4561,"originId":"5448caa90db243142305fdbf","articleId":813,"userId":1798,"content":"1. nodejs + mysql\r\n2. http（server和client）、request模块","createdAt":1414056617716},{"id":4562,"originId":"544933160db243142305fe34","articleId":813,"userId":1799,"content":"把学生会的事情忙完一定好好跟你学，，\r\n之前看的是教程是 [这个](https://github.com/nswbmw/N-blog/wiki/_pages)\r\n感觉你讲的更详细呢，好评","createdAt":1414083350542},{"id":4563,"originId":"54493d170db243142305fe3d","articleId":813,"userId":18,"content":"[@noctiomg](/user/noctiomg) 都是好教程：）","createdAt":1414085911892},{"id":4564,"originId":"545083821cd45acd2e6622ce","articleId":813,"userId":1800,"content":"用windows，第一课就卡住了：（","createdAt":1414562690373},{"id":4565,"originId":"54509d63d0c2f0fe2f533949","articleId":813,"userId":1800,"content":"![](http://img.itc.cn/photo/jZofGs195Cj)\r\n只要安装0.8.17版本，怎么还自动安装了1.2.0版本？","createdAt":1414569315598},{"id":4566,"originId":"5450a05cd0c2f0fe2f53394d","articleId":813,"userId":1800,"content":"[@gotolnc](/user/gotolnc) 之前都白学了，要重新学？","createdAt":1414570076006},{"id":4567,"originId":"5450b65ad0c2f0fe2f533998","articleId":813,"userId":1801,"content":"[@fenode](/user/fenode) nvm ls-remote是什么？ 不能直接nvm install v0.10.32么？","createdAt":1414575706776},{"id":4568,"originId":"5450cdf1d0c2f0fe2f5339b4","articleId":813,"userId":734,"content":"[@alsotang](/user/alsotang) https://github.com/alsotang/node-lessons/tree/master/lesson6 介绍一下`istanbul`的ignore语法会更全面一些，我觉得可以在：\r\n```\r\n其实这覆盖率是 100% 的，24 25 两行没法测。\r\n```\r\n这里展开讲解，我中文不行，就不提PR了 哈哈（我这也算半同行review了哈）","createdAt":1414581745779},{"id":4569,"originId":"5450cf71d0c2f0fe2f5339bf","articleId":813,"userId":18,"content":"[@yorkie](/user/yorkie) 这个也太细节了吧","createdAt":1414582129714},{"id":4570,"originId":"5450d0a1d0c2f0fe2f5339c3","articleId":813,"userId":734,"content":"[@alsotang](/user/alsotang) 哈哈 我个人比较强迫症，但是“没法”两个字会给读者一种无能为力的赶脚，或者给个原文链接做拓展可好","createdAt":1414582433059},{"id":4571,"originId":"5451b88ad0c2f0fe2f533a44","articleId":813,"userId":1802,"content":"[@alsotang](/user/alsotang)  你好，在学习到  Lesson 4: 《使用 eventproxy 控制并发》 ，有问题，\r\n\r\n\r\ntopicUrls.forEach(function (topicUrl) {\r\n\r\n      console.log(topicUrl);\r\n\r\n      superagent.get(topicUrl)\r\n        .end(function (err, res) {\r\n\t\t\r\n\t\t\r\n \t\tconsole.log(topicUrl);\r\n\t\t\r\n\t\t\r\n          console.log('fetch ' + topicUrl + ' successful');\r\n          ep.emit('topic_html', [topicUrl, res.text]);\r\n        });\r\n    });\r\n\t\r\n\t发现这段代码\r\n\t两个console.log(topicUrl); 出来的 url 不一样，导致 抓取的数据不对，\r\n","createdAt":1414641802090},{"id":4572,"originId":"545223fdd0c2f0fe2f533ab7","articleId":813,"userId":1803,"content":"拥有一个能用的例子来供学习，这种感觉真是幸福\\(^o^)/~","createdAt":1414669309091},{"id":4573,"originId":"54583dc76537f4d52c414e68","articleId":813,"userId":1804,"content":"课说得很清楚哦！很好懂。不过。\r\n第五课有一些不是很明白。\r\nvar fetchUrl = function(url, callback){\r\nvar delay = parseInt((Math.random() * 10000000) % 2000, 10);\r\n\tconcurrencyCount++;\r\n\tconsole.log('现在的并发数是', concurrencyCount, '，正在抓取的是', url, '，耗时' + delay + '毫秒')\r\n\t\r\n\tsetTimeout(function(){\r\n\t\tconcurrencyCount--;\r\n\t\tcallback(null, url + 'html content');\r\n\t},delay)\r\n}\r\n定时器里的不是很明白。","createdAt":1415069127987},{"id":4574,"originId":"5458deb36537f4d52c414f33","articleId":813,"userId":1805,"content":"[@ihqn](/user/ihqn) \r\nsetTimeout用来模拟一个一步操作。\r\n```js\r\nsetTimeout(function(){\r\n   //concurrencyCount是一个计数器，用来统计现在有多少个异步操作在执行。这里把计数器减一，是因为定时器到点了，那么模拟的这个异步操作就算是\r\n   //执行完了，所以呢把这个计数器减掉一\r\n    concurrencyCount--;\r\n\t//定时器到点，执行我们定义的回调函数。function(err,data)，因为没有错误发生，所以将err设为null.\r\n    callback(null, url + 'html content');\r\n},delay)\r\n```","createdAt":1415110323811},{"id":4575,"originId":"545f6af060c7cf8708aa9420","articleId":813,"userId":1797,"content":"[@alsotang](/user/alsotang) 汗，最近忙着找实习工作，今天刚刚安顿下来，好啊，你不嫌弃我渣的话","createdAt":1415539440337},{"id":4576,"originId":"545f6c8d60c7cf8708aa9424","articleId":813,"userId":18,"content":"[@mexiQQ](/user/mexiQQ) 实习找到哪里了？","createdAt":1415539853536},{"id":4577,"originId":"545f6d7760c7cf8708aa9427","articleId":813,"userId":1797,"content":"[@alsotang](/user/alsotang) segmentFault","createdAt":1415540087999},{"id":4578,"originId":"546030710994da5e12d853f2","articleId":813,"userId":18,"content":"[@mexiQQ](/user/mexiQQ) 也在杭州啊","createdAt":1415590001194},{"id":4579,"originId":"54604f810994da5e12d8541b","articleId":813,"userId":1797,"content":"[@alsotang](/user/alsotang) 对啊对啊Y(^_^)Y约吗？","createdAt":1415597953162},{"id":4580,"originId":"546057bf0994da5e12d8542b","articleId":813,"userId":18,"content":"[@mexiQQ](/user/mexiQQ) .................................. [@Ricardo-Li](/user/Ricardo-Li) 举报","createdAt":1415600063833},{"id":4581,"originId":"54607023789ab1f8158e1ba5","articleId":813,"userId":1797,"content":"[@alsotang](/user/alsotang) 管理员，这回复该删了","createdAt":1415606307819},{"id":4582,"originId":"546e8d1ac4922d383a82974a","articleId":813,"userId":464,"content":"做lesson4的练习时， ![error.jpg](//static.cnodejs.org/Fn4rCeRCAiZqBbOvJUj1in10w16A),使用url.resolve这个方法，提示参数必须为\r\n字符串，但我这个确实字符串啊，求教什么原因啊\r\n","createdAt":1416531226405},{"id":4583,"originId":"5525bfc4cafb495830a9fb5f","articleId":813,"userId":89,"content":"继续写啊","createdAt":1428537284259},{"id":4584,"originId":"552605f59fdd6d3b01b41ad9","articleId":813,"userId":18,"content":"[@i5ting](/user/i5ting) 太监了。。。","createdAt":1428555253649},{"id":4585,"originId":"552614d29fdd6d3b01b41ae6","articleId":813,"userId":696,"content":"顶一个","createdAt":1428559058222},{"id":4586,"originId":"5528eaa7831bc33a414106e2","articleId":813,"userId":869,"content":"还不错，先收录了\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1428744871464},{"id":4587,"originId":"57625f65e8689e7906af7463","articleId":813,"userId":1806,"content":"流弊\r\n\r\n","createdAt":1466064741224},{"id":4588,"originId":"5ae14d8ca86ec1f308ec2578","articleId":813,"userId":1807,"content":"#你的计划呢 三年了","createdAt":1524714892199},{"id":4589,"originId":"5ae1accdc5debbc0086fc99b","articleId":813,"userId":1808,"content":"哈哈哈","createdAt":1524739277273},{"id":4590,"originId":"5ae358a81b02288048bd0abc","articleId":813,"userId":18,"content":"[@iceonion](/user/iceonion) 放弃了。。。","createdAt":1524848808198},{"id":4591,"originId":"5ae58fbbadea947348e75f20","articleId":813,"userId":1807,"content":"[@alsotang](/user/alsotang) 男人  怎么可以随随便便就放弃呢  雄起。。雄起。。雄起","createdAt":1524993979706},{"id":4592,"originId":"5ae80ebaadea947348e75f78","articleId":813,"userId":1809,"content":"谢谢楼主  \n ☆ 来自微信小程序 [cnode助手](https://github.com/strawbreey/mpvue-cnode)","createdAt":1525157562445},{"id":4593,"originId":"5ae80ebd39a81e4548f45890","articleId":813,"userId":1809,"content":"  \n ☆ 来自微信小程序 [cnode助手](https://github.com/strawbreey/mpvue-cnode)","createdAt":1525157565110},{"id":4594,"originId":"5ae80ec31b02288048bd0b5d","articleId":813,"userId":1809,"content":"谢谢  \n ☆ 来自微信小程序 [cnode助手](https://github.com/strawbreey/mpvue-cnode)","createdAt":1525157571575},{"id":4595,"originId":"5bba2e269545eaf107b9c8cd","articleId":813,"userId":1810,"content":"[@alsotang](/user/alsotang) 请教，做lesson4的挑战题取积分的时候，遇到一个难点，不知道怎样用superagent里面取到的变量取修改外面的全局变量，代码（部分）如下：\r\n\r\n\t    var topicUrl = topicPair[0];\r\n\t    var topicHtml = topicPair[1];\r\n\t    var $ = cheerio.load(topicHtml);\r\n\t\t//取评论人的积分\r\n\t\t var authorUrl = url.resolve(cnodeUrl,$('.dark.reply_author').eq(0).attr('href'));\r\n\t\t let score1 =0;\r\n\t\t superagent.get(authorUrl)\r\n\t\t .end(function (err, sres) {\r\n\t\t \t// 常规的错误处理\r\n\t\t \tif (err) {\r\n\t\t \treturn next(err);\r\n\t\t \t}\r\n\t\t  const $2 = cheerio.load(sres.text);\r\n\t\t  score1 = $2('.unstyled .big').eq(0).text().trim();\r\n\t\t  console.log(\"In ,score1:\"+score1);\t\t  \r\n\t\t})\r\n\t\treturn ({\r\n\t      title: $('.topic_full_title').text().trim(),\r\n\t      href: topicUrl,\r\n\t      comment1: $('.reply_content').eq(0).text().trim(),\r\n\t\t  author1: $('.dark.reply_author').eq(0).text().trim(),\r\n\t\t  score1: score1\r\n\t    });\r\n\t\tsuperagent里面的score1已经取到积分了，但没办法传出来。。。谢谢","createdAt":1538928166555},{"id":4596,"originId":"5ccff34a776fb66e0d17282f","articleId":813,"userId":1811,"content":"mark ，收藏","createdAt":1557132106476},{"id":4597,"originId":"5cf9de5795fcc914aa266da8","articleId":813,"userId":1812,"content":"[@magicdawn](/user/magicdawn) win也不错","createdAt":1559879255344},{"id":4598,"originId":"5d04fff395fcc914aa269531","articleId":814,"userId":1661,"content":"太高深","createdAt":1560608755112},{"id":4599,"originId":"5d727ceca7474a231a589acc","articleId":814,"userId":804,"content":"look","createdAt":1567784172639},{"id":4600,"originId":"5d97640d865a9844a3019902","articleId":814,"userId":790,"content":"[@missheying](/user/missheying) 也有基础的","createdAt":1570202637231},{"id":4601,"originId":"5dd2aa1b7651572e0955dd92","articleId":814,"userId":805,"content":"值得学习吗","createdAt":1574087195996},{"id":4602,"originId":"5dd22d77a9f4592e749e16d7","articleId":816,"userId":111,"content":"完全看不懂，有看懂的说一声到底在说啥","createdAt":1574055287273},{"id":4603,"originId":"5dd24d04a9f4592e749e17ed","articleId":816,"userId":107,"content":"[@yakczh](/user/yakczh) 这个偏前端领域react方向，主要是说setup在react的实现，可以到在线IDE修改试试哦","createdAt":1574063364694},{"id":4604,"originId":"5dd17b7e7651572e0955d99c","articleId":817,"userId":705,"content":"不错","createdAt":1574009726607},{"id":4605,"originId":"57d76639cb441239368989e1","articleId":818,"userId":1285,"content":"感谢分享","createdAt":1473734201822},{"id":4606,"originId":"57d76f498fdd801b36d5f535","articleId":818,"userId":1815,"content":"[@kevin1211](/user/kevin1211) 希望对你有用:)","createdAt":1473736521902},{"id":4607,"originId":"57d793decb6f605d36010603","articleId":818,"userId":11,"content":"其实event是由uv_run驱动的，并且是在UV_RUN_ONCE的模式下执行\r\nUV_RUN_ONCE就是你文中描述的\r\n\r\n\tpoll 阶段: 获取新的I/O事件, 适当的条件下node将阻塞在这里;\r\n中的“适当条件”，它会阻塞在kqueue的kevent()函数中（这里以mac为例，linux下这一块由epoll_wait()函数处理，windows下则是IOCP）\r\n这里描述UV_RUN_ONCE为适当条件，是因为uv_run还有两种模式，对于UV_RUN_NOWAIT的模式，io_poll不会阻塞，会立即触发超时结束当前的event_loop，进入下一次循环（v4.4.2版本中仅用在进程退出前的最后检查）\r\n实际上，你描述的timer，在一次event loop中可能在两个地方执行：\r\n\t\r\n\t最开始以及close callbacks结束之后\r\n为什么这么说呢，就算不看源代码，我们也可以思考这样的一个场景：\r\n当你设置了一个超时timer，那么第一次进入uv_run_timer时，超时时间未到；此时进入kevent()阻塞等待\r\n如果此处不提供超时机制，那就会永远阻塞在kevent()的I/O等待中；所以我们在\r\n当前的event loop循环中的某一次时，如果存在timer且为达到设定时间，则会把最近的一个timer剩余超时时间作为参数传入io_poll()中，这样kevent()等待时，如果没有任何I/O事件触发，也会由timerout触发跳出等待的操作，结束本次时间循环\r\n所以呢，在UV_RUN_ONCE的模式下，每次循环结束前，即你说的close callback执行结束后，会再执行一次对timer的超时判断\r\n具体涉及到的代码如下：\r\n\r\n\t//deps/uv/src/unix/core.c\r\n\tint uv_run(uv_loop_t *loop, uv_run_mode mode) {\r\n    \tint timeout;\r\n    \tint r;\r\n    \tint ran_pending;\r\n    \t//uv__loop_alive返回的是event loop中是否还有待处理的handle或者request\r\n    \t//以及closing_handles是否为NULL,如果均没有,则返回0\r\n    \tr = uv__loop_alive(loop);\r\n    \t//更新当前event loop的时间戳,单位是ms\r\n    \tif (!r)\r\n        \tuv__update_time(loop);\r\n    \twhile (r != 0 && loop->stop_flag == 0) {\r\n        \t//使用Linux下的高精度Timer hrtime更新loop->time,即event loop的时间戳\r\n        \tuv__update_time(loop);\r\n        \t//执行判断当前loop->time下有无到期的Timer,显然在同一个loop里面timer拥有最高的优先级\r\n        \tuv__run_timers(loop);\r\n        \t//判断当前的pending_queue是否有事件待处理,并且一次将&loop->pending_queue中的uv__io_t对应的cb全部拿出来执行\r\n        \tran_pending = uv__run_pending(loop);\r\n        \t//实现在loop-watcher.c文件中,一次将&loop->idle_handles中的idle_cd全部执行完毕(如果存在的话)\r\n        \tuv__run_idle(loop);\r\n        \t//实现在loop-watcher.c文件中,一次将&loop->prepare_handles中的prepare_cb全部执行完毕(如果存在的话)\r\n        \tuv__run_prepare(loop);\r\n\r\n        \ttimeout = 0;\r\n        \t//如果是UV_RUN_ONCE的模式,并且pending_queue队列为空,或者采用UV_RUN_DEFAULT(在一个loop中处理所有事件),则将timeout参数置为\r\n        \t//最近的一个定时器的超时时间,防止在uv_io_poll中阻塞住无法进入超时的timer中\r\n        \tif ((mode == UV_RUN_ONCE && !ran_pending) || mode == UV_RUN_DEFAULT)\r\n            \ttimeout = uv_backend_timeout(loop);\r\n        \t//进入I/O处理的函数(重点分析的部分),此处挂载timeout是为了防止在uv_io_poll中陷入阻塞无法执行timers;并且对于mode为\r\n        \t//UV_RUN_NOWAIT类型的uv_run执行,timeout为0可以保证其立即跳出uv__io_poll,达到了非阻塞调用的效果\r\n        \tuv__io_poll(loop, timeout);\r\n        \t//实现在loop-watcher.c文件中,一次将&loop->check_handles中的check_cb全部执行完毕(如果存在的话)\r\n        \tuv__run_check(loop);\r\n        \t//执行结束时的资源释放,loop->closing_handles指针指向NULL\r\n        \tuv__run_closing_handles(loop);\r\n\r\n        \tif (mode == UV_RUN_ONCE) {\r\n            \t//如果是UV_RUN_ONCE模式,继续更新当前event loop的时间戳\r\n            \tuv__update_time(loop);\r\n            \t//执行timers,判断是否有已经到期的timer\r\n            \tuv__run_timers(loop);\r\n        \t}\r\n        \tr = uv__loop_alive(loop);\r\n        \t//在UV_RUN_ONCE和UV_RUN_NOWAIT模式中,跳出当前的循环\r\n        \tif (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)\r\n            \tbreak;\r\n    \t\t}\r\n\t\t\t\r\n    \t//标记当前的stop_flag为0,表示当前的loop执行完毕\r\n    \tif (loop->stop_flag != 0)\r\n        \tloop->stop_flag = 0;\r\n    \t//返回r的值\r\n    \treturn r;\r\n\t}\r\n对于node事件循环的核心驱动函数uv_run写的一些注释，随便看看吧~","createdAt":1473745886859},{"id":4608,"originId":"57d79f1fcb6f605d36010607","articleId":818,"userId":1815,"content":"[@hyj1991](/user/hyj1991) 谢谢你的注释，我只是看了官方文档，加了自己的一些理解，\r\n\r\n我会结合你的注释去看看源码。\r\n请教个问题\r\n```\r\nsetTimeout(function timeout () {\r\n  console.log('timeout');\r\n},0);\r\n\r\nsetImmediate(function immediate () {\r\n  console.log('immediate');\r\n});\r\n```\r\n执行的顺序不确定，就是因为每一次loop,最开始和结束时都检查timer的缘故么？","createdAt":1473748767906},{"id":4609,"originId":"57d7b1f53f3cb94e6b326746","articleId":818,"userId":11,"content":"[@vincentLiuxiang](/user/vincentLiuxiang) \r\n是的，在node中，setTimeout(cb, 0) === setTimeout(cb, 1);\r\n而setImmediately属于uv_run_check的部分\r\n确实每次loop进来，都是先检查uv_run_timer的，但是由于cpu工作耗费时间，比如第一次获取的hrtime为0\r\n那么setTimeout(cb, 1)，超时时间就是loop->time = 1(ms，node定时器精确到1ms，但是hrtime是精确到纳秒级别的)\r\n所以第一次loop进来的时候就有两种情况：\r\n\r\n\t1.由于第一次loop前的准备耗时超过1ms，当前的loop->time >=1 ，则uv_run_timer生效，timeout先执行\r\n\t2.由于第一次loop前的准备耗时小于1ms，当前的loop->time = 0，则本次loop中的第一次uv_run_timer不生效，那么io_poll后先执行uv_run_check，即immediate先执行，然后等close cb执行完后，继续执行uv_run_timer\r\n\r\n那么你说的为什么在回调中，一定是先immediate执行呢，其实也很容易理解\r\n你可以思考一下你写的场景\r\n由于你的timeout和immediate的事件注册是在readFile的回调执行时，触发的\r\n所以必然的，在readFile的回调执行前的每一次event loop进来的uv_run_timer都不会有超时事件触发\r\n那么当readFile执行完毕，kevent收到监听的fd事件完成后，执行了该回调，此时\r\n\r\n\t1.timeout事件注册\r\n\t2.immediate事件注册\r\n\t3.由于readFile的回调执行完毕，那么就会从uv_io_poll中出来，此时立即执行uv_run_check，所以immediate事件被执行掉\r\n\t4.最后的uv_run_timer检查timeout事件，执行timeout事件\r\n所以你会发现，在I/O回调中注册的两者，永远都是immediately先执行","createdAt":1473753589391},{"id":4610,"originId":"57d7ef9d03e01d2f6b17acaf","articleId":818,"userId":1815,"content":"[@hyj1991](/user/hyj1991) 当时看文档的时候，这块儿就没太弄明白，太感谢了！写的非常清楚。","createdAt":1473769373749},{"id":4611,"originId":"57d8a07b3f3cb94e6b326774","articleId":818,"userId":11,"content":"[@vincentLiuxiang](/user/vincentLiuxiang) 不客气哈，不过我也蛮佩服你的，看文档就能理清这么多哇。我当时是查文档看的晕，资料也少，无奈下直接去读源代码的。。。","createdAt":1473814651886},{"id":4612,"originId":"57d8ed4d03e01d2f6b17ace4","articleId":818,"userId":1407,"content":"感谢分享，精彩的讨论。","createdAt":1473834317516},{"id":4613,"originId":"57e0f1c4c4ae8ff239776db7","articleId":818,"userId":693,"content":"楼主真是真知灼见啊","createdAt":1474359748809},{"id":4614,"originId":"57e0f4103af3942a3aa3b8f2","articleId":818,"userId":277,"content":"mark\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1474360336325},{"id":4615,"originId":"57e1ff0e3af3942a3aa3b91f","articleId":818,"userId":1323,"content":" 先收藏一波~~~","createdAt":1474428686361},{"id":4616,"originId":"5808a003fdf3bd3d65118853","articleId":818,"userId":1323,"content":"[@JacksonTian](/user/JacksonTian) 大佬觉得这篇文章说的对不对","createdAt":1476960259878},{"id":4617,"originId":"58b51fb6e418a986315f39bf","articleId":818,"userId":1816,"content":"文档链接貌似404了。专门去旧分支找链接 https://github.com/nodejs/node/blob/v6.x/doc/topics/event-loop-timers-and-nexttick.md 搜到了这里，拜读了。","createdAt":1488265142904},{"id":4618,"originId":"58b59867ea21217a4486ce55","articleId":818,"userId":1815,"content":"[@shellphon](/user/shellphon) 老早前写的文章了，谢啦～ 我去重新编辑一下","createdAt":1488296039845},{"id":4619,"originId":"58fd611231e8c2bb1c3dcd46","articleId":818,"userId":1817,"content":"补充点：  我的疑问：poll 中执行了 i/o callback 为什么还要I/O callbacks。。\r\n “[node原理介绍](http://www.cnblogs.com/bingooo/p/6720540.html) ”  引用：查阅了libuv 的文档后发现，在 libuv 的 event loop 中，I/O callbacks 阶段会执行 Pending callbacks。绝大多数情况下，在 poll 阶段，所有的 I/O 回调都已经被执行。但是，在某些情况下，有一些回调会被延迟到下一次循环执行。也就是说，在 I/O callbacks 阶段执行的回调函数，是上一次事件循环中被延迟执行的回调函数。\r\n 不知道 对不对0 0 ","createdAt":1493000466020},{"id":4620,"originId":"58fd779f523b9d0956dad93e","articleId":818,"userId":1739,"content":"hao","createdAt":1493006239957},{"id":4621,"originId":"58fdc0acbbaf2f3f569be1ef","articleId":818,"userId":1815,"content":"[@LastKing](/user/LastKing) 你可以参考下源码\r\n```\r\n while (r != 0 && loop->stop_flag == 0) {\r\n    uv__update_time(loop);\r\n    uv__run_timers(loop);\r\n\t// 下面这一段就是i/o callbacks阶段，来专门执行pending_queue\r\n    ran_pending = uv__run_pending(loop);\r\n    uv__run_idle(loop);\r\n    uv__run_prepare(loop);\r\n\r\n    timeout = 0;\r\n    if ((mode == UV_RUN_ONCE && !ran_pending) || mode == UV_RUN_DEFAULT)\r\n      timeout = uv_backend_timeout(loop);\r\n\r\n    uv__io_poll(loop, timeout);\r\n    uv__run_check(loop);\r\n    uv__run_closing_handles(loop);\r\n\r\n    if (mode == UV_RUN_ONCE) {\r\n      /* UV_RUN_ONCE implies forward progress: at least one callback must have\r\n       * been invoked when it returns. uv__io_poll() can return without doing\r\n       * I/O (meaning: no callbacks) when its timeout expires - which means we\r\n       * have pending timers that satisfy the forward progress constraint.\r\n       *\r\n       * UV_RUN_NOWAIT makes no guarantees about progress so it's omitted from\r\n       * the check.\r\n       */\r\n      uv__update_time(loop);\r\n      uv__run_timers(loop);\r\n    }\r\n\r\n    r = uv__loop_alive(loop);\r\n    if (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)\r\n      break;\r\n  }\r\n```","createdAt":1493024940269},{"id":4622,"originId":"58fdc3a2523b9d0956dad965","articleId":818,"userId":1818,"content":"额，其实很久以前有个老外讲得还蛮清楚的： http://latentflip.com/loupe/ ，虽然不是专门给 node.js 写的。","createdAt":1493025698164},{"id":4623,"originId":"58feab1431e8c2bb1c3dcdc5","articleId":818,"userId":1815,"content":"[@LastKing](/user/LastKing) \r\n\r\n严格来说，i/o callbacks并不是处理文件i/o的callback\r\n而是处理一些系统调用错误，比如网络 stream, pipe, tcp, udp通信的错误callback。[参考](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#i-o-callbacks)\r\n因为，pending_queue的入列（queue_insert_tail）是通过一个叫 uv__io_feed 的api来调用的\r\n而 uv__io_feed API是在tcp/udp/stream/pipe等相关API调用","createdAt":1493084948268},{"id":4624,"originId":"58ff022a523b9d0956dad9d6","articleId":818,"userId":1817,"content":"[@vincentLiuxiang](/user/vincentLiuxiang)  谢谢 ！~  源码阅读能力不够。多谢 指导！~","createdAt":1493107242543},{"id":4625,"originId":"58ff1a74bbaf2f3f569be265","articleId":818,"userId":1819,"content":"```\r\nvar fs = require('fs');\r\nvar events = require('events');\r\nvar emitter = new events.EventEmitter();\r\n\r\nemitter.on('someEvent', function(arg1, arg2) {\r\n\tconsole.log('listener');\r\n});\r\n\r\nfunction someAsyncOperation (callback) {\r\n  // 花费2毫秒\r\n  fs.readFile(__dirname + '/' + __filename, callback);\r\n}\r\n\r\nvar timeoutScheduled = Date.now();\r\nvar fileReadTime = 0;\r\n\r\nsetTimeout(function () {\r\n  var delay = Date.now() - timeoutScheduled;\r\n  console.log('setTimeout: ' + (delay) + \"ms have passed since I was scheduled\");\r\n  console.log('fileReaderTime',fileReadtime - timeoutScheduled);\r\n}, 10);\r\n\r\nsomeAsyncOperation(function () {\r\n  fileReadtime = Date.now();\r\n  while(Date.now() - fileReadtime < 20) {\r\n\t\r\n  }\r\n  \r\n  setImmediate(function(){\r\n\t  console.log('setImmediate');\r\n  })\r\n  emitter.emit('someEvent');\r\n});\r\n```\r\n运行结果：\r\n```\r\nlistener\r\nsetImmediate\r\nsetTimeout: 31ms have passed since I was scheduled\r\nfileReaderTime 2\r\n\r\n```\r\n[@vincentLiuxiang](/user/vincentLiuxiang),请问emitter.emit('someEvent');这个的事件处理是在poll阶段吗？\r\n在处理'someEvent'事件的时候是不是都一直在poll阶段，没有阶段切换？\r\n因为如果有阶段切换，那么结果一定是setImmediate先于listener。\r\n 不知这样分析是否正确。\r\n","createdAt":1493113460631},{"id":4626,"originId":"5900837f523b9d0956dada70","articleId":818,"userId":1815,"content":"[@qiulanzhu](/user/qiulanzhu) 不是！\r\n\r\nevents，timer 不是libuv层面实现的，应该是v8层实现。\r\n\r\n所谓 check / poll 阶段是针对libuv层面实现的。\r\n\r\n虽然 timer (settimeout) 不是libuv层面实现，但其在uv_run 内执行，因此才有timer阶段。\r\n\r\nevents注册的事件, 其实是存在了一个eventqueue里，\r\n\r\n```js\r\n// 以下是伪代码\r\ne.on('test', cb);\r\n// 等价于 eventqueue['test'].push(cb)\r\ne.emit('test');\r\n// 等价于 eventqueue['test'].map(cb => cb())，这是伪代码\r\n```\r\n\r\n因此，可以看出，event是同步的！当执行 emit触发时，会先于上述六个阶段执行。\r\n\r\n具体例子，和源码分析，等过段时间再贴。。。最尽有点忙\r\n\r\n","createdAt":1493205887377},{"id":4627,"originId":"590159db523b9d0956dadaa3","articleId":818,"userId":1820,"content":"例子没有关于io callback阶段的？为什么readfile 的callback在poll阶段完成？","createdAt":1493260763256},{"id":4628,"originId":"590169d9bbaf2f3f569be340","articleId":818,"userId":1815,"content":"[@isbdnt](/user/isbdnt) 等有空了写一个吧。。。\r\n\r\n在19楼回复了原理，至于例子，你也可以去写写","createdAt":1493264857346},{"id":4629,"originId":"59016c549116585a56e20a83","articleId":818,"userId":1820,"content":"也就是说网络io cb在io cb阶段完成吧，并不想自己写，我是伸手党，嘻嘻","createdAt":1493265492193},{"id":4630,"originId":"5907dff793aa348e3d40e77a","articleId":818,"userId":1819,"content":"[@vincentLiuxiang](/user/vincentLiuxiang) 非常感谢，这样讲清晰多了！","createdAt":1493688311042},{"id":4631,"originId":"5982edd8c1eb855961dd6113","articleId":818,"userId":1821,"content":"[@hyj1991](/user/hyj1991) [@vincentLiuxiang](/user/vincentLiuxiang)  \r\n看了好多网上的资料和书，都没用搞懂node是怎样使用epoll完成网络I/O的，大多数资料只重点讲了使用线程池实现文件I/O，但对于网络I/O都是直接说用epoll一带而过。我个人觉得可能是我对epoll不够理解造成的。我不明白的有以下几点：\r\n1.event loop 是不是跑在node主线程上的？执行完同步代码后，再去一遍遍的循环，还是说event loop实际上另外一条线程。\r\n2.网络请求来时候，node会不会再新起一个线程去处理。或者说，用哪个线程去处理，是主线程自行处理吗？\r\n3.epoll会阻塞线程，若使用epoll 的是主线程，那主线程岂不是被epoll阻塞了？如果一直没有网络连接，会一直阻塞到这吗？","createdAt":1501752792336},{"id":4632,"originId":"5982fdad07cef83a61770a10","articleId":818,"userId":89,"content":"[@Julyrainy](/user/Julyrainy) \r\n\r\n- 1）event loop 是跑在node主线程上的，while true一直执行uv_run，\r\n- 2）会的，请求来的时候，已经丢在event loop 里的任务了\r\n- 3）epoll操作都在thread pool里，只有机器没有执行资源，才会阻塞。\r\n","createdAt":1501756845105},{"id":4633,"originId":"59832a4228607f916122dc64","articleId":818,"userId":1815,"content":"[@Julyrainy](/user/Julyrainy) \r\nepoll主要有三个api\r\n\r\n```\r\nepoll_create\r\nepoll_ctl\r\nepoll_wait\r\n```\r\n\r\n要理解 node 的 epoll 模型，epoll 的原理还是先要去理解的。\r\n这里我简单讲一下：\r\n* 1. epollfd = epoll_create(size), 创建 epoll 句柄；\r\n* 2. epoll_ctl(epollfd, Mode, other_fd, &event), 设置epollfd，监听的事件类型\r\n* 3. event_number = epoll_wait(epollfd, events, max_size, timeout), \r\n\t* epoll等待事件到来，event_number表示到来的事件数量，events通常是空数组，直到事件来临后，events会从0开始，把event_number个事件装到events里，timeout表示阻塞时间，-1将永久等待，直到有监听事件到来；\r\n\r\n基于这个基础，那么在node里是怎么做的呢？\r\n我贴一段 libuv的核心代码片段( linux-core.c )，你看看就懂了\r\n```\r\n...\r\n// uv__io_poll, poll阶段\r\n\r\nnfds，是ready事件的数量\r\n...\r\nnfds = uv__epoll_wait(loop->backend_fd,\r\n                             events,\r\n                             ARRAY_SIZE(events),\r\n                             timeout,\r\n                             sigmask);\r\n...\r\n// epoll cb执行\r\n\r\nfor (i = 0; i < nfds; i++) {\r\n      pe = events + i;\r\n      fd = pe->data;\r\n \t  w = loop->watchers[fd];\r\n     ....\r\n     // 执行 回调 函数，epoll 网络相关部分，我读代码是没发现有 所谓 thread pool，就是单线程。\r\n     w->cb(loop, w, pe->events);\r\n\r\n     nevents++;\r\n}\r\n```\r\n\r\n\r\nepoll_wait 阻塞返回后，回调函数就在uv_run主线程里执行，是没有多线程的.\r\n因此，很容易理解一个现象，当我们在回调函数里执行 while(1) {}, 整个服务都无法响应了。\r\n\r\n至于是epoll 好 还是 多线程／线程池好，这个google一下nginx相关文章有很多分析的。\r\n还有我所说的线程是 用户态的应用层 线程， 不是硬件／物理线程。物理线程就那么多，应用层线程池大了，来回切换也是开销。","createdAt":1501768258388},{"id":4634,"originId":"59832b4d28607f916122dc66","articleId":818,"userId":1815,"content":"[@hyj1991](/user/hyj1991) [@i5ting](/user/i5ting) 也请大神们看看，我理解不一定对。","createdAt":1501768525620},{"id":4635,"originId":"5983ca6607cef83a61770a29","articleId":818,"userId":11,"content":"[@vincentLiuxiang](/user/vincentLiuxiang) 对 epoll 和 uv_run 描述的比较清晰，没问题的。不过 uv_run 实现了跨平台，在 mac 下使用的不是 epoll 而是 kqueue，但是大致的原理是一致的","createdAt":1501809254234},{"id":4636,"originId":"5983daadc1eb855961dd6170","articleId":818,"userId":1815,"content":"[@hyj1991](/user/hyj1991) 嗯啊，我主要分析 linux-core.c , 其他平台我浅以为是类似的，而 epoll 被大家说得最多。\r\n而且还有人把它和多线程混在一起谈。epoll 在 linux 老版本里多线程有惊群现象，在内核 3.x 还是 4.x 版本（具体忘了）有个内核设置可以解决该问题。\r\n","createdAt":1501813421603},{"id":4637,"originId":"5985a8a6e78b15b4168350d9","articleId":818,"userId":1821,"content":"[@i5ting](/user/i5ting) 多谢狼叔指点！","createdAt":1501931686886},{"id":4638,"originId":"5985a9f50f9d52591a8877f2","articleId":818,"userId":1821,"content":"[@vincentLiuxiang](/user/vincentLiuxiang) 多谢您的耐心指点，我大概已经有些了解了。也就是说epoll在等待网络I/O数据就绪的时候，一直是阻塞的，此时无法响应如文件I/O和计时器事件，直到所有网络I/O完成或者超时，才能继续event loop是吗？","createdAt":1501932021531},{"id":4639,"originId":"5985e5380f9d52591a88782b","articleId":818,"userId":1815,"content":"[@Julyrainy](/user/Julyrainy) 下一份 node 源码，自己编译/运行printf一下，什么都清晰了。","createdAt":1501947192585},{"id":4640,"originId":"5987147f2d4b0af4750352d6","articleId":818,"userId":1821,"content":"[@vincentLiuxiang](/user/vincentLiuxiang) ok，主要是我基础比较差，想先了解一下原理再去看源码，看来我还是得死死地啃一遍源码，多谢您耐心的回答。","createdAt":1502024831776},{"id":4641,"originId":"59cc5bd50cd3ddc71115692e","articleId":818,"userId":1822,"content":"c的高手 搞js 很简单呀","createdAt":1506565077851},{"id":4642,"originId":"5a4f762aa3692d014f4f1234","articleId":818,"userId":1823,"content":"请问, node事件循环中是否有体现浏览器 宏任务(macrotask) 和 微任务(microtask) 机制的地方? 如果有, 它与上述文中所说的node事件循环机制有何联系?   如何把他们串起来、讲得通?\r\n[浏览器中的macrotask、microtask](https://segmentfault.com/a/1190000010622146)\r\n[知乎macrotask、microtask](https://www.zhihu.com/question/36972010)\r\n谢谢!","createdAt":1515157034000},{"id":4643,"originId":"5aa2368ece4a27f867526f5b","articleId":818,"userId":1815,"content":"[@MrStronger](/user/MrStronger) 突然发现有5个月没上 cnode 了，两者没关系。。。","createdAt":1520580238615},{"id":4644,"originId":"5ac47e97e34737560fccaa03","articleId":818,"userId":1824,"content":"[@vincentLiuxiang](/user/vincentLiuxiang) [@hyj1991](/user/hyj1991) 大佬好 请问 如果process.nextTick是在事件循环的每个phase结束后执行，那么这样的一段代码：\r\n```\t\r\nsetTimeout(function() {\r\n\tconsole.log('timeout');\r\n}， 0);\r\nsetImmediate(function() {\r\n\tconsole.log('setImmediate');\r\n});\r\nprocess.nextTick(function() {\r\n\tconsole.log('nextTick');\r\n});\r\n```\r\n为什么process.nextTick总是第一个执行？\r\n已知在第一次进入event loop的时候，有可能准备时间大于1ms，于是uv_run_timer调用回调函数，那不是应该先执行setTimeout，然后在切换到下一个phase的中间来执行process.nextTick吗？\r\n还是说在每次进入event loop的时候先会去执行一次process.nextTick，然后再开始update_time,进入timer阶段？\r\n","createdAt":1522826903289},{"id":4645,"originId":"5ac556d837f5d1510f57c8dd","articleId":818,"userId":11,"content":"[@ProfutW](/user/ProfutW) [@ProfutW](/user/ProfutW) 进入 event loop 前会清空一次 next tick queue 的\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1522882264740},{"id":4646,"originId":"5ac55bbd96f344940fbbad5b","articleId":818,"userId":11,"content":"[@ProfutW](/user/ProfutW) 具体实现没记错的话在 lib/module.js 的 runMain 方法里面\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1522883517778},{"id":4647,"originId":"5ac5a89237f5d1510f57c8e5","articleId":818,"userId":1824,"content":"[@hyj1991](/user/hyj1991) 好的 谢谢大佬了 我去看看","createdAt":1522903186329},{"id":4648,"originId":"5ae9525fadea947348e75fb7","articleId":818,"userId":1825,"content":"[@vincentLiuxiang](/user/vincentLiuxiang) [@hyj1991](/user/hyj1991) 有一段代码的运行结果始终不能理解。\r\n\tsetTimeout(function () {\r\n    \tconsole.log('setTimeout1')\r\n    \tPromise.resolve().then(function () {\r\n        \tconsole.log('promise')\r\n    \t});\r\n\t})\r\n\tsetTimeout(function () {\r\n    \tconsole.log('setTimeout2');\r\n\t});\r\n\t\r\n我预想的输出应该是：setTimeout1, promise, setTimeout2\r\n但是实际结果是：setTimeout1, promise, setTimeout2 或者 setTimeout1, setTimeout2, promise。\r\n请问这该如何理解\r\n","createdAt":1525240415223},{"id":4649,"originId":"5bfdfb2dbe1b120abac5d9bb","articleId":818,"userId":1826,"content":"[@hyj1991](/user/hyj1991) [@vincentLiuxiang](/user/vincentLiuxiang) \r\n有个疑惑，按照这个说法，\r\n```\r\nsetTimeout(() => {\r\n  setTimeout(() => {\r\n    console.log('timeout')\r\n  }, 0)\r\n  setImmediate(() => {\r\n    console.log('immediate')\r\n  })\r\n}, 0)\r\n```\r\ntimer阶段之后是poll/check,下次的timer应该在check之后\r\n输出的顺序也应该是固定的`immediate`,`timeout`，但是实测顺序还是不确定的","createdAt":1543371565363},{"id":4650,"originId":"5dd1569a7651572e0955d95e","articleId":818,"userId":1827,"content":"来晚了，虽然有些还是不懂，但感谢","createdAt":1574000282136},{"id":4651,"originId":"5dc779dfece3813ad9ba75fc","articleId":819,"userId":740,"content":"OK","createdAt":1573353951497},{"id":4652,"originId":"5dced1b3865a9844a30224cd","articleId":819,"userId":636,"content":"我也是服了。。。竟然还有人开车，别上传黄图啊！我可不想被请喝茶。。。还有，我的小服务器性能有限，拿来练手自动化测试的请绕道吧。我写这个东西纯粹是为了练手学习，在此请教各位前端大佬，如何让我的小服务器发挥最大的性能？我现在项目build后最大的一个js文件是1.1M，尽管服务器开了gzip，但是首页首次加载还是要十几秒，好惨啊，我试过打包成多个很小的文件（60多个文件），但是没啥效果，甚至更慢，貌似是浏览器一次只能并行加载4-5个文件，所以拆成很多个小文件的方案貌似不行。cdn的话感觉比较麻烦，目前还没测试，求前端大佬指教。","createdAt":1573835187870},{"id":4653,"originId":"5dce6a0d865a9844a30223c7","articleId":820,"userId":1829,"content":"手机浏览器可直接访问：https://m.q.qq.com/a/a2f6806268bf0ca10c47df194d04b942","createdAt":1573808653078},{"id":4654,"originId":"5dce0eb5865a9844a30221fb","articleId":823,"userId":20,"content":"mark","createdAt":1573785269734},{"id":4655,"originId":"5d8c0fbe8b9e1c0d6dc5e149","articleId":824,"userId":545,"content":"26 日更新，nest 增加0.3k。 adonis 增加0.1k 。\r\n其他框架暂未变动。","createdAt":1569460158975},{"id":4656,"originId":"5d8c169c8b9e1c0d6dc5e170","articleId":824,"userId":89,"content":"意义不是特别大，生态足够多，大家按需选择就好了\r\n\r\n- 喜欢简单，自己组装koa或者直接express\r\n- 喜欢生态和插件，甚至是开箱即用，egg\r\n- 喜欢ts，就选midway或nest\r\n- 做个api，选hapi或restify\r\n\r\n其实也未必star多就好。比如thinkjs，比如https://github.com/darukjs/daruk，虽不在列，但也都是非常优秀的。","createdAt":1569461916025},{"id":4657,"originId":"5d8c3f4de86cfb0d2a645d9b","articleId":824,"userId":109,"content":"百花齐放是好事。","createdAt":1569472333793},{"id":4658,"originId":"5d94c2efece3813ad9b9fe41","articleId":824,"userId":522,"content":"百花齐放是好事。","createdAt":1570030319272},{"id":4659,"originId":"5d9bddbdece3813ad9ba049e","articleId":824,"userId":545,"content":"10月8日再次更新，nest.js 增长 0.3k  ，express 增加0.2k ，koa 增加  0.1k，egg 增加0.1k，fastify增加0.1k，hapi 增加0.1k","createdAt":1570495933728},{"id":4660,"originId":"5da03d7c865a9844a301aa5b","articleId":824,"userId":60,"content":"现在用的是express和egg","createdAt":1570782588780},{"id":4661,"originId":"5da28140865a9844a301af38","articleId":824,"userId":1830,"content":"国内还是 express koa 多人用","createdAt":1570931008506},{"id":4662,"originId":"5da3e207865a9844a301b109","articleId":824,"userId":545,"content":"[@Nick233333](/user/Nick233333) \r\nnode.js 一直没在后端领域有大的起色，其实主要还是 传统的 express  koa 框架并不能很好解决大型项目以及团队开发的场景。\r\nnest.js 等一众框架能快速增长，恰恰也是解决了这个问题。\r\n从 AOP 思想在其他语言的发展来看， ruby on rails，spring ，laravel  。  nest 也会走向这样的趋势。\r\n所以得看解决了什么问题了\r\n","createdAt":1571021319125},{"id":4663,"originId":"5dabd0f1ece3813ad9ba2f17","articleId":824,"userId":191,"content":"[@zuohuadong](/user/zuohuadong) 国内用的不多吧   有没有开源项目参考一下","createdAt":1571541233015},{"id":4664,"originId":"5dacfdea865a9844a301c853","articleId":824,"userId":545,"content":"[@xuemeifenglin](/user/xuemeifenglin) https://docs.nestjs.cn/6/awesome   这里有","createdAt":1571618282907},{"id":4665,"originId":"5dc0ba69865a9844a301fdcb","articleId":824,"userId":545,"content":"11月5日更新 ，nest.js 上升至第三。","createdAt":1572911721504},{"id":4666,"originId":"5dc231d7ece3813ad9ba6917","articleId":824,"userId":111,"content":"![39XMN728WA3P~(IGYD)B~X6.png](//static.cnodejs.org/FlMmD-MaTx1fCEqzvZjWhMbP5JuV)","createdAt":1573007831119},{"id":4667,"originId":"5dc253b6865a9844a3020315","articleId":824,"userId":545,"content":"[@yakczh](/user/yakczh)  感谢供图","createdAt":1573016502715},{"id":4668,"originId":"5dc38001865a9844a302066b","articleId":824,"userId":1373,"content":"国内使用，大概率要看是否有中文文档~","createdAt":1573093377112},{"id":4669,"originId":"5dc3888dece3813ad9ba6d78","articleId":824,"userId":189,"content":"[Nestjs仿小米商城企业级Nodejs项目实战](https://www.itying.com/goods-1139.html)","createdAt":1573095565914},{"id":4670,"originId":"5dc39eb8ece3813ad9ba6e08","articleId":824,"userId":545,"content":"[@WuYinMan](/user/WuYinMan)   有 https://docs.nestjs.cn/\r\n资料：\r\nhttps://docs.nestjs.cn/6/awesome","createdAt":1573101240609},{"id":4671,"originId":"5dce0e07ece3813ad9ba889c","articleId":824,"userId":191,"content":"很给力 **nest入门教程**:    https://cnodejs.org/topic/5d9be327ece3813ad9ba04cc","createdAt":1573785095311},{"id":4672,"originId":"5dcbb79bece3813ad9ba81cc","articleId":825,"userId":829,"content":"点赞","createdAt":1573631899499},{"id":4673,"originId":"5dcd39b3865a9844a30220a5","articleId":825,"userId":146,"content":"技术栈挺好玩的","createdAt":1573730739964},{"id":4674,"originId":"5dcd0821865a9844a3021f2f","articleId":826,"userId":1086,"content":"开源地址：https://github.com/apgzs/cool-admin-api","createdAt":1573718049570},{"id":4675,"originId":"5dcd0722865a9844a3021f1d","articleId":827,"userId":1832,"content":"扫码体验\r\n\r\n![image.png](//static.cnodejs.org/Fv6VHc2AuBEIgeJsq6CSQRdnG3wi)","createdAt":1573717794646},{"id":4676,"originId":"596d7a3c27c8372819db0be8","articleId":828,"userId":89,"content":"开源项目写，公司项目看情况，其他不写。。。","createdAt":1500346940011},{"id":4677,"originId":"596d7f5d8f0313ff0d08d514","articleId":828,"userId":541,"content":"开源项目【想】写，公司项目看情况（目前还没有要求写的），其他不写\r\n\r\n\r\n\r\n就像eslint，之前感觉碍手碍脚的，后来用上了，体会到了，现在感觉不用不舒服。。\r\n\r\ntest大家都说好，但是现在还没应用上。。。\r\n\r\n\r\n\r\n==============================\r\n\r\n好，现在用上了，感受：有点用，找出了不少错误。挺爽的，补测试挺累。。看覆盖率上升很开心","createdAt":1500348253646},{"id":4678,"originId":"596d85cb27c8372819db0bed","articleId":828,"userId":539,"content":"尽量有","createdAt":1500349899855},{"id":4679,"originId":"596db8be27c8372819db0c0d","articleId":828,"userId":146,"content":"最近每天奔走于活动页之间，还要兼容IE7，和 test 有毛线的关系","createdAt":1500362942055},{"id":4680,"originId":"596df550db0b6aec18a28641","articleId":828,"userId":434,"content":"所有项目都有。开源项目追求100%的覆盖度。公司项目测试覆盖度维持在 70% 左右。","createdAt":1500378448077},{"id":4681,"originId":"596e07e08f0313ff0d08d54d","articleId":828,"userId":1833,"content":"开源项目,公司的底层项目写,其他的看情况","createdAt":1500383200871},{"id":4682,"originId":"596eb655db0b6aec18a28663","articleId":828,"userId":535,"content":"极其重要的项目有，和安全有关的项目有，其他没有。","createdAt":1500427861352},{"id":4683,"originId":"596ebe2f27c8372819db0c58","articleId":828,"userId":1834,"content":"看到你们这么说，我就放心了。","createdAt":1500429871358},{"id":4684,"originId":"596ec09d8f05de0819fdb30e","articleId":828,"userId":1835,"content":"有","createdAt":1500430493881},{"id":4685,"originId":"596ec52c8f0313ff0d08d568","articleId":828,"userId":516,"content":"看到你们这么说，我就放心了。","createdAt":1500431660588},{"id":4686,"originId":"596efd2c0c87675e746745fd","articleId":828,"userId":1836,"content":"看到你们这么说，我就放心了。","createdAt":1500445996489},{"id":4687,"originId":"596f0722db0b6aec18a28696","articleId":828,"userId":1609,"content":" 看到你们这么说，我就及其放心了。","createdAt":1500448546834},{"id":4688,"originId":"596f2da30c87675e7467462c","articleId":828,"userId":1818,"content":"要求项目必须写，关注覆盖率，但不搞 TDD。","createdAt":1500458403380},{"id":4689,"originId":"596f31e70c87675e7467462f","articleId":828,"userId":1837,"content":"看到你们这么说我就放心了","createdAt":1500459495626},{"id":4690,"originId":"597164810c87675e746746cf","articleId":828,"userId":11,"content":"想请教一个问题，单元测试，是针对重要的核心无状态模块以及核心有状态的模块打 mock 后做覆盖率测试就可以，还是一定要包含所有的涉及到的代码呢，比如项目的 http 启动服务入口这样的？","createdAt":1500603521790},{"id":4691,"originId":"59716a798f0313ff0d08d657","articleId":828,"userId":568,"content":"基本不寫，自己開心就好","createdAt":1500605049963},{"id":4692,"originId":"59716b518f0313ff0d08d65b","articleId":828,"userId":1104,"content":"底层跟重要的业务逻辑写，普通的不写。","createdAt":1500605265389},{"id":4693,"originId":"597173840c87675e746746e8","articleId":828,"userId":18,"content":"基本不写","createdAt":1500607364726},{"id":4694,"originId":"597196643f0ab31540ed4c14","articleId":828,"userId":743,"content":"看到你们这么说，我就及其放心了。","createdAt":1500616292924},{"id":4695,"originId":"597196750c87675e7467470c","articleId":828,"userId":649,"content":"单人作战的我，不写，不会写，找时间体会一下","createdAt":1500616309298},{"id":4696,"originId":"59719cb568aa87c774e5ea40","articleId":828,"userId":1838,"content":"公司的项目基本没人写。大多忙于业务、上线。\r\n自己的开源项目，那肯定是要写的，没有测试谁敢用！","createdAt":1500617909735},{"id":4697,"originId":"5973150e3f0ab31540ed4c6e","articleId":828,"userId":354,"content":"部分有，但是单元测试还是覆盖不到每一行代码","createdAt":1500714254657},{"id":4698,"originId":"597ebe6168aa87c774e5ed91","articleId":828,"userId":1839,"content":"用egg做的公司单点登陆，怕有意外，单测覆盖率80%以上。\r\n\r\n公司java有70+人，对node做公司单点登陆一直耿耿于怀，自己则对所有质量环节，特别不敢怠慢。\r\n\r\nBTW，没有强类型，nodejs在企业级应用中确实比较累，很容易出现低级错误。。","createdAt":1501478497967},{"id":4699,"originId":"597ed74e68aa87c774e5ed9f","articleId":828,"userId":406,"content":"[@johnnychen](/user/johnnychen) 别怕。java 问题同样很多。主要看人的能力，而不是人数。。。。而且出了问题，java 更加难以搞定","createdAt":1501484878338},{"id":4700,"originId":"597eddef8f0313ff0d08d97c","articleId":828,"userId":535,"content":"好像有人说过，强类型并不能使错误减少","createdAt":1501486575176},{"id":4701,"originId":"597eed3fe72077ff35fbbefe","articleId":828,"userId":1840,"content":"写呀，单元测试是个好习惯。","createdAt":1501490495192},{"id":4702,"originId":"597fc702e72077ff35fbbf32","articleId":828,"userId":21,"content":"[@zhanzhenzhen](/user/zhanzhenzhen) \r\n逻辑问题那肯定一样了\r\n但传参这里的问题可以规避，更具有规范\r\n所以弱类型高手适合写，强类型适合菜鸟历练，哈哈\r\n同理，写弱类型的不一定是大神，写强类型的也不一定是菜鸟\r\n自认代码一流的我，当然是学弱类型啦！😚\r\n这样束缚少了，写代码快一些\r\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1501546242307},{"id":4703,"originId":"598030d08f0313ff0d08d9f0","articleId":828,"userId":1121,"content":" 写什么写","createdAt":1501573328662},{"id":4704,"originId":"59f0266042f3823871bb85e5","articleId":828,"userId":36,"content":"看到你们这么说，我就放心了。我刚准备学习单元呢 哈哈","createdAt":1508910688055},{"id":4705,"originId":"59f026da42f3823871bb85e7","articleId":828,"userId":109,"content":"[@johnnychen](/user/johnnychen) 上TS可以极大提升效率","createdAt":1508910810701},{"id":4706,"originId":"59f0276028137001719a81f1","articleId":828,"userId":109,"content":"开源的尽量写。公司项目遇上赶工的。。。\r\n\r\nlz，egg啥时候改为ts呢。我计划让egg-bin支持win32平台部署","createdAt":1508910944666},{"id":4707,"originId":"59f031f428137001719a81f6","articleId":828,"userId":59,"content":"没有写，开源项目也没写 - -。。。。。。 所以说我 star 很少","createdAt":1508913652427},{"id":4708,"originId":"59f037e975e507e55b05de11","articleId":828,"userId":358,"content":"[@waitingsong](/user/waitingsong) egg 本身暂时没计划，应用的话现在就可以用 TS 了啊，蚂蚁那边都是 TS 写 egg 业务应用的。\r\n\r\negg-bin 一直有支持 win 的，就是 egg-scripts 不支持而已（进程判断麻烦，而且部署都是在 linux，就懒的搞）","createdAt":1508915177445},{"id":4709,"originId":"59f0511a28137001719a8202","articleId":828,"userId":482,"content":"看到你们这么说，我就及其放心了。","createdAt":1508921626161},{"id":4710,"originId":"59f0581c28137001719a8205","articleId":828,"userId":1841,"content":"我也放心了","createdAt":1508923420004},{"id":4711,"originId":"59f06224a2f4138a5b7fedcf","articleId":828,"userId":707,"content":"公司的项目主要做Api，这种项目单元测试的意义不大，入参校验严格处理就可以。\r\n看了这么多我也放心了","createdAt":1508925988087},{"id":4712,"originId":"59f0964d28137001719a8212","articleId":828,"userId":109,"content":"[@atian25](/user/atian25) 我这儿有部署win32的需求。在写外围插件控制窗口以及获取进程","createdAt":1508939341737},{"id":4713,"originId":"59f09edbe86c0b115ca07bdc","articleId":828,"userId":358,"content":"[@waitingsong](/user/waitingsong) 那你写个 cli 继承下 egg-scripts 就可以了，我们可以暴露相关接口来覆盖。","createdAt":1508941531792},{"id":4714,"originId":"59f0a59ca2f4138a5b7feddc","articleId":828,"userId":109,"content":"[@atian25](/user/atian25) 我计划是用node ffi调用user32.dll来控制窗口以及获取pid。不过就需要安装gyp，这个依赖了一堆 东西，  \r\n安装失败率不低。 估计得有个开关来控制是否使用win扩展模式(就是我计划实现的插件)","createdAt":1508943260763},{"id":4715,"originId":"59f0a62628137001719a8219","articleId":828,"userId":109,"content":"或者先把.node文件编译好然后直接调用？不知道这个办法是否可行","createdAt":1508943398253},{"id":4716,"originId":"59f13b0842f3823871bb861f","articleId":828,"userId":1842,"content":"看到这么多人不写单元测 我也就放心了 \r\n","createdAt":1508981512645},{"id":4717,"originId":"59f1434d28137001719a8229","articleId":828,"userId":562,"content":"我们有单元测试  写个单元测试和写业务代码一样多  ","createdAt":1508983629724},{"id":4718,"originId":"59f1451da2f4138a5b7fedfd","articleId":828,"userId":1843,"content":"用的egg.js  肯定有的","createdAt":1508984093318},{"id":4719,"originId":"59f146e3a2f4138a5b7fee01","articleId":828,"userId":358,"content":"[@waitingsong](/user/waitingsong) 之前我试过用 https://www.npmjs.com/package/find-process 这个库来处理 pid，但在某些 win 上有兼容性问题，所以后面也懒得搞了。\r\n\r\n目前 npm 上支持 win process 的库，要不就是跟上面那样，用 `WMIC path win32_process` 要不就是用 Native C 来写。\r\n\r\n而后者会导致平台安装兼容性之类的问题，所以评估之后，egg-scripts 官方暂时不打算支持 Windows。\r\n\r\n你这边业务有需要的话，可以自己写个 cli，继承 egg-scripts 来实现即可。","createdAt":1508984547385},{"id":4720,"originId":"59f182b542f3823871bb863e","articleId":828,"userId":109,"content":"[@atian25](/user/atian25)  \"可以自己写个 cli，继承 egg-scripts 来实现即可。\" 你指的是“集成”么？\r\n\r\n我写的 win32-api 库是基于node-ffi 调用系统user32.dll等核心链接库，然后封装了一个操作windows窗口的库用于窗口操作：改变窗口title（可用于查找egg-script进程窗口的hWnd以及pid），隐藏窗口等。 详情可见我资料的github地址","createdAt":1508999861913},{"id":4721,"originId":"59f18703a2f4138a5b7fee0e","articleId":828,"userId":38,"content":"单侧只是一种工具。重点的地方是覆盖，覆盖什么（代码行、条件、路径等）、怎么覆盖、怎么检查目标的覆盖率。","createdAt":1509000963112},{"id":4722,"originId":"5a162cdd476ea1170b733a39","articleId":828,"userId":1187,"content":"写单元测试有助于信心提升啊~ 说实话egg的单测体验还是很好的~","createdAt":1511402717598},{"id":4723,"originId":"5a1632f043efb10d09ef89ff","articleId":828,"userId":1375,"content":"部署在硬件上的项目写了(为了稳定性)，放在云服务上的项目基本上没写","createdAt":1511404272252},{"id":4724,"originId":"5a16633b476ea1170b733a4c","articleId":828,"userId":1844,"content":"单元测试必须要写，而且eggjs的测试用起来很方便的。","createdAt":1511416635689},{"id":4725,"originId":"5a16766e43efb10d09ef8a19","articleId":828,"userId":215,"content":"我们公司的测试都是产品去点的,哈哈","createdAt":1511421550275},{"id":4726,"originId":"5dcce9a4865a9844a3021e78","articleId":828,"userId":1845,"content":"看到你们这么说，我就放心了","createdAt":1573710244205},{"id":4727,"originId":"58c9620c7dee71e5193a537a","articleId":835,"userId":1614,"content":"6666","createdAt":1489592844108},{"id":4728,"originId":"58cabffb9aa9bafe76762a50","articleId":835,"userId":1848,"content":"mark!","createdAt":1489682427246},{"id":4729,"originId":"58cb36845835325e61140a91","articleId":835,"userId":216,"content":"mark!","createdAt":1489712772091},{"id":4730,"originId":"58cb455bef3f9df178e0e2a1","articleId":835,"userId":413,"content":"star","createdAt":1489716571793},{"id":4731,"originId":"58cb782c5835325e61140ab2","articleId":835,"userId":1849,"content":"mark","createdAt":1489729580578},{"id":4732,"originId":"58d0c32a17f61387400b7dc7","articleId":835,"userId":1850,"content":"我先来用用","createdAt":1490076458000},{"id":4733,"originId":"58d1d9e52b2f9e0c3612174b","articleId":835,"userId":286,"content":"大 mark!","createdAt":1490147813849},{"id":4734,"originId":"5a6a990c9288dc815328822e","articleId":835,"userId":1851,"content":"网站是不是挂了","createdAt":1516935436605},{"id":4735,"originId":"5a6d6d4b9d371d4a059eef27","articleId":835,"userId":772,"content":"不行呢老铁","createdAt":1517120843157},{"id":4736,"originId":"5ab21249e7b166bb7b9eccc4","articleId":835,"userId":1852,"content":"根本没法用！！！！！！！！！！！！！！！！！\r\n![image.png](//static.cnodejs.org/FpmxL1vnJZ3CnVn221DS9-bq_C-y)\r\n![image.png](//static.cnodejs.org/FkS1Sy2rEbVOPxj0l0kIAg9SYdBp)","createdAt":1521619529207},{"id":4737,"originId":"5b19760f5cd02be6409012cd","articleId":835,"userId":223,"content":"https://github.com/googleapis/nodejs-translate/tree/master/samples\r\n国内用google api要[翻墙](https://indx.cc/exp)","createdAt":1528395279572},{"id":4738,"originId":"5ba7916337a6965f59051bf5","articleId":835,"userId":1853,"content":"已经没法用了，我在我美国的服务器上跑，报403错误了，另一个 google-translate-api同样不能用","createdAt":1537708387697},{"id":4739,"originId":"5dbde13c865a9844a301f784","articleId":835,"userId":173,"content":"[@flftfqwxf](/user/flftfqwxf) https://cnodejs.org/topic/5db66f89ece3813ad9ba498d","createdAt":1572725052583},{"id":4740,"originId":"5dc77e43865a9844a3020f2f","articleId":835,"userId":223,"content":"https://cnodejs.org/topic/5db66f89ece3813ad9ba498d ","createdAt":1573355075149},{"id":4741,"originId":"5dc60f7cece3813ad9ba7429","articleId":836,"userId":545,"content":"这个很多跟 nest.js 很像了。但是不全。\r\n可以考虑直接上 nest.js 省事","createdAt":1573261180194},{"id":4742,"originId":"5dc62a8eece3813ad9ba746b","articleId":836,"userId":829,"content":"M","createdAt":1573268110443},{"id":4743,"originId":"5dc67377865a9844a3020e06","articleId":836,"userId":1197,"content":"在cn说话就得用中文","createdAt":1573286775379},{"id":4744,"originId":"55bf18fbde6dd660622bf254","articleId":843,"userId":1857,"content":"用find跟limit，如果我想看第x页的数据，要怎么操作呢？","createdAt":1438587131421},{"id":4745,"originId":"55bf1cc8de6dd660622bf25b","articleId":843,"userId":89,"content":"[@kiinlam](/user/kiinlam) 你仔细看过上面的文章么？\r\n\r\n```\r\n抽象一下就是：检索第n页的代码应该是这样的\r\n\r\ndb.users.find().skip(pagesize*(n-1)).limit(pagesize)\r\n```","createdAt":1438588104723},{"id":4746,"originId":"55c035785d946aad0c4db634","articleId":843,"userId":1857,"content":"[@i5ting](/user/i5ting) 抱歉，我没说清楚问题。\r\n由于skip在数据量大的时候会有性能问题，所以只能抛开。find的话需要指定具体查询的字段，在不知道第x页的第一条文档内容情况下，find也起不到作用了，这要怎么破？\r\n\r\n见过其他方式，各有特色，但缺点也是很明显，难以取舍：\r\n1、自定义一个递增的id，通过该id获取一定数量的文档。缺点是文档不能被删掉，否则获取到的文档数就变少了。\r\n参考：http://www.hacksparrow.com/mongodb-pagination-using-range-queries.html\r\n\r\n2、自定义一个数组存放文档，自己维护一个统计数，通过数组方法`$slice`来获取数据。缺点很明显，文档被塞到一个字段里，不能直接查询到，导致数据结构缺失，还要维护计数值。\r\n参考：http://www.hacksparrow.com/mongodb-pagination-using-slice.html","createdAt":1438659960347},{"id":4747,"originId":"55c038bb5d946aad0c4db639","articleId":843,"userId":89,"content":"[@kiinlam](/user/kiinlam) 你还是没有细看上面的文章。。。。\r\n\r\n第二种是根据_id处理的\r\n\r\n```\r\ndb.usermodels.find({'_id' :{ \"$gt\" :ObjectId(\"55940ae59c39572851075bfd\")} }).limit(20).sort({_id:-1})\r\n```","createdAt":1438660795698},{"id":4748,"originId":"55c15f84ffd82de21c21dd3a","articleId":843,"userId":1858,"content":"[@i5ting](/user/i5ting) 我猜他的意思应该是，如果在首页，但是想跳到第5页 ，但是没第4页的最后id   然后怎么用\r\ndb.usermodels.find({'_id' :{ \"$gt\" :ObjectId(\"55940ae59c39572851075bfd\")} }).limit(20).sort({_id:-1}) 这个","createdAt":1438736260780},{"id":4749,"originId":"55c1643cffd82de21c21dd48","articleId":843,"userId":1859,"content":"[@gangdiedao](/user/gangdiedao) 这个在移动端有很积极的意义，下拉刷新什么的，PC的话页数可以跳着点就麻烦了点","createdAt":1438737468700},{"id":4750,"originId":"55c168b9ffd82de21c21dd54","articleId":843,"userId":89,"content":"[@gangdiedao](/user/gangdiedao) 一般根据id查询的都不会有这样的需求的，比如下拉刷新，然后看下一页，下一页，实际上在list的交互里就不会有快捷跳到第几页的设计的，所以这个问题多虑了\r\n\r\n","createdAt":1438738617359},{"id":4751,"originId":"55c168c9ffd82de21c21dd56","articleId":843,"userId":89,"content":"[@wldlzt](/user/wldlzt) id分页就是解决这个的","createdAt":1438738633386},{"id":4752,"originId":"55c382c3b98f51142b367abf","articleId":843,"userId":275,"content":"另外看到一篇博文解释了mongooDB的limit原理，查询只是构造函数，使用limit会生成很多层的代码。","createdAt":1438876355581},{"id":4753,"originId":"55c4bc0839273b9219336233","articleId":843,"userId":1860,"content":"码","createdAt":1438956552031},{"id":4754,"originId":"55c4c6e539273b921933623c","articleId":843,"userId":1861,"content":"赞一下，不错，收藏了","createdAt":1438959333067},{"id":4755,"originId":"55cb0664e7d02c86694ba128","articleId":843,"userId":1862,"content":"这个情况只适合没有排序的情况下，如果要按特定组合来排序还是不行","createdAt":1439368804764},{"id":4756,"originId":"55cb178be7d02c86694ba151","articleId":843,"userId":89,"content":"[@chloe](/user/chloe) why？","createdAt":1439373195350},{"id":4757,"originId":"55cb2b42e7d02c86694ba157","articleId":843,"userId":1862,"content":"[@i5ting](/user/i5ting) 顺序就与objectid无关了啊","createdAt":1439378242646},{"id":4758,"originId":"55cb35ace7d02c86694ba15e","articleId":843,"userId":89,"content":"[@chloe](/user/chloe) 可是排序后取到的lastid是不一样的啊，所以还是使用的\r\n\r\n比如我的mongoosedao里\r\n\r\n\r\n根据id直接返回，长度看第二个参数，下面的例子是50，不带带有排序条件\r\n\r\n```\r\nTop.pageByLastId(one._id, 100, {\"username\" : \"fixture-user-41\"}, function(err, new_tops){\r\n```\r\n\r\n根据id直接返回，长度看第二个参数，下面的例子是50，带有排序条件，created_at是升序\r\n\r\n```\r\nTop.pageByLastId(one._id, 100, {\"username\" : \"fixture-user-41\"}, {created_at:'asc'}, function(err, new_tops){\r\n```","createdAt":1439380908826},{"id":4759,"originId":"55cb45d6b25bd72150842b17","articleId":843,"userId":18,"content":"[@i5ting](/user/i5ting) [@chloe](/user/chloe) 根据这里来说：http://docs.mongodb.org/manual/reference/object-id/ 。ObjectId 的 string 大小确实是递增的。\r\n但就 mongodb 的 nosql 思想来说，objectid 应该被看做是个唯一 key，而不应该利用他们之间的顺序关系。在这种场景下我应该会专门建立一个 `create_at` 字段。","createdAt":1439385046680},{"id":4760,"originId":"55cb59ddb25bd72150842b33","articleId":843,"userId":1863,"content":"[@chloe](/user/chloe) 说的应该是按非id列排序，这种情况下 lastId 就不能作为断页的依据，比如说按标题或者作者来排序。\r\n\r\n但其实在实际应用中，分页要考虑的情况不外乎数据量小(变动相对缓慢），和数据量大（变动相对频繁）的两种情形。\r\n\r\n**在数据量小的情况下**，是不是按lastId来作区分，还是用 skip limit 有区别但不是很明显，而一般情况下也就是数据量小的数据才会有按非id字段排序的需求。比如说产品，了不起几千个产品很多了（淘宝、京东等除外），弄个index排起来速度不会有问题。这样的数据相对变动不太频繁，跳页也是有一定意义的，比如说按型号排序后，大概跳多少页可以看到想要看的数据。因此 skip limit 反而是相对优秀的方式。\r\n\r\n**在数据量大的情况下**，一般都是随时间会不停增长的数据，比如说发贴。这种类型的数据正常不会有需要按非ID字段排序的。所以按 lastId 来分上下页还是很实用的，跳页当然是不行的，但其实也不是很有必要，因为这种数据一般变动相对较快，跳页意义就不是很大了。大家回想一下自己在本站跳过几次页就知道了，我想大多数人都是顺序浏览的。\r\n\r\n我测试过 postgres， 在大概一亿条数据的情况下，lastId 是最快的，12ms，skip limit 本身也没想象中那么慢，24ms。(postgres自带管理工具纪录的时间，仅供参考）。\r\n最要命的是 count 函数，需要十几秒。而 skip limit， 一般要搭配 count 聚合 （要实现跳页功能）。总而言之没有银弹，只能根据情况因地制宜。","createdAt":1439390173878},{"id":4761,"originId":"55d1d10e9bdae50c477e6ea5","articleId":843,"userId":1862,"content":"[@klesh](/user/klesh) [@i5ting](/user/i5ting) [@alsotang](/user/alsotang) 假如数有一些记录，这些是人的数据吧，我们要按某些指标来排序，这个就用不了","createdAt":1439813902529},{"id":4762,"originId":"55d1f0f59bdae50c477e6eb9","articleId":843,"userId":1863,"content":"[@chloe](/user/chloe) 根据情况灵活运用啊。像你说的这种，就应该用SKIP LIMIT的方式去做，建好索引就行了，不会太慢的。按ID或者按SKIP LIMIT都有自己的适用场景，根据情况该用哪种就用哪种。","createdAt":1439822069942},{"id":4763,"originId":"55d30a3647ad99e878759912","articleId":843,"userId":1862,"content":"[@klesh](/user/klesh) 你说得对啊，所以我认为skip limit完全够用","createdAt":1439894070937},{"id":4764,"originId":"55dea81f197f2ddc0b8b59ba","articleId":843,"userId":301,"content":"没看懂","createdAt":1440655391446},{"id":4765,"originId":"55deb1d828f7851f3946367d","articleId":843,"userId":89,"content":"[@1340641314](/user/1340641314) 再看看，估计是场景你不太熟悉吧","createdAt":1440657880431},{"id":4766,"originId":"55dec1545ad9b9321a60064f","articleId":843,"userId":301,"content":"[@i5ting](/user/i5ting) 好像有点明白了，晚上回家去看看","createdAt":1440661844970},{"id":4767,"originId":"55dec182c61f30df2e65ebd4","articleId":843,"userId":1864,"content":"复合索引的情形要复杂一些，比如 2dsphere 与 _id 的复合索引……","createdAt":1440661890471},{"id":4768,"originId":"55dec2235ad9b9321a600655","articleId":843,"userId":89,"content":"[@SoaringTiger](/user/SoaringTiger) 恕我愚钝，没太看懂","createdAt":1440662051273},{"id":4769,"originId":"55deef2303c62cff729ed547","articleId":843,"userId":1864,"content":"[@i5ting](/user/i5ting) 按照某个地点的坐标进行查询和排序   { $near : { $geometry : point, $maxDistance : maxDistance}}，出来的默认结果是按照距离point的远近来排序的。如果没有做复合索引，单独按照{'_id' :{ \"$gt\" :ObjectId(\"xxx\")} } 来分页，得到的下一页结果就是错误的。\r\n在这种情形下，如果符合条件的总数不多，分页用skip还是相当简单的。","createdAt":1440673571770},{"id":4770,"originId":"57f0b196ce6d47326a822db0","articleId":843,"userId":1069,"content":"Mark 一下","createdAt":1475391894098},{"id":4771,"originId":"5833097d0249714d79d41ba6","articleId":843,"userId":319,"content":"今天撸到了，最后选择无脑skip。另外加一个链接可以看看 http://blog.sina.com.cn/s/blog_56545fd30101442b.html\r\n","createdAt":1479739773428},{"id":4772,"originId":"58330d0467db500b79c10153","articleId":843,"userId":1350,"content":"这个做法很6啊，性能上肯定有很大提升啊，感触颇深。这几点都会，就是想不到","createdAt":1479740676972},{"id":4773,"originId":"583bee6a6add41f206000d2c","articleId":843,"userId":1865,"content":"还没到这布呢？\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1480322666262},{"id":4774,"originId":"59634f2c1b534b4408190bbf","articleId":843,"userId":484,"content":"顶一个 ","createdAt":1499680556601},{"id":4775,"originId":"5dc259d8ece3813ad9ba69ec","articleId":843,"userId":1684,"content":"谢谢, 学习了","createdAt":1573018072389},{"id":4776,"originId":"5dc0f643ece3813ad9ba65e2","articleId":844,"userId":358,"content":"- Node.js 知名框架 WebPack Babel 都在使用的 fs 模块你了解吗？\r\n- Node.js 知名框架 Express Koa 都在使用的 http 模块你了解吗？\r\n- 。。。","createdAt":1572927043765},{"id":4777,"originId":"5dc0f8faece3813ad9ba65e8","articleId":844,"userId":13,"content":"[@atian25](/user/atian25) 大佬，已改！ :joy:","createdAt":1572927738558},{"id":4778,"originId":"5dc1102eece3813ad9ba6646","articleId":844,"userId":358,"content":"Events 这块，其实需要注意几点的：\r\n- `编码实现` 这里的例子其实不是很合适的，毕竟朴老师那个年代毕竟早了，那时候还没有 async 啥的，只能用 eventproxy 来解决异步协同问题。\r\n- events 如何和 async 协作，也是一个值得探讨的问题，譬如这是我们之前 events 转 Promise 踩过的坑：https://www.yuque.com/egg/nodejs/xcnxmg","createdAt":1572933678344},{"id":4779,"originId":"5dc1252aece3813ad9ba669e","articleId":844,"userId":187,"content":"once 解决了高并发？\r\n人家发了多次请求，你只解决第一次，你说你解决了高并发？","createdAt":1572939050481},{"id":4780,"originId":"5dc157c9865a9844a3020131","articleId":844,"userId":13,"content":"[@atian25](/user/atian25) **编码实现** 那里是看到利用 once 来解决高并发雪崩问题，感觉也不妨是一种办法，所以就写了下。和 async 协作的 events 转 promise 这个还真没想到过，学习了哈","createdAt":1572952009526},{"id":4781,"originId":"5dc15ed4865a9844a3020140","articleId":844,"userId":13,"content":"[@ounana](/user/ounana) 不是说解决高并发，是指的高并发下的雪崩问题，在缓存失效情况下，例如查询 DB，十次相同的 SQL 查询，可以做到只查询一次 DB，后面相同的都可以复用这一次结果。","createdAt":1572953812033},{"id":4782,"originId":"5dc16dc5ece3813ad9ba67cb","articleId":844,"userId":358,"content":"[@Q-Angelo](/user/Q-Angelo) 那也跟 events 没啥关系吧 😂","createdAt":1572957637978},{"id":4783,"originId":"5dc171dbece3813ad9ba67d4","articleId":844,"userId":13,"content":"[@atian25](/user/atian25) 我的理解下面这块代码 emitter 是 events 上的一个实例对象，而 once 是 emitter 的一个方法，和 events 有关系吧 😂\r\n\r\n```js\r\nconst events = require('events');\r\nconst emitter = new events.EventEmitter();\r\nconst fs = require('fs');\r\nconst status = {};\r\n\r\nconst select = function(file, filename, cb) {\r\n    emitter.once(file, cb);\r\n    \r\n    if (status[file] === undefined) {\r\n        status[file] = 'ready'; // 不存在设置默认值\r\n    }\r\n    if (status[file] === 'ready') {\r\n        status[file] = 'pending';\r\n        fs.readFile(file, function(err, result) {\r\n            console.log(filename);\r\n            emitter.emit(file, err, result.toString());\r\n            status[file] = 'ready';\r\n            \r\n            setTimeout(function() {\r\n                delete status[file];\r\n            }, 1000);\r\n        });\r\n    }\r\n}\r\n```","createdAt":1572958683693},{"id":4784,"originId":"5dc18cb7ece3813ad9ba67f8","articleId":844,"userId":358,"content":"这段代码，不就是 Promise + lrucache 的手动版么？改写下就几行代码。\r\n\r\n```js\r\nconst { fs } = require('mz');\r\nconst LRU = require(\"lru-cache\");\r\nconst cache = new LRU({ max: 10, maxAge: 1000 * 60 * 60 });\r\n\r\nconst select = async function(file) {\r\n  if (!cache.has(file)) {\r\n    const content = await fs.readFile(file, 'utf-8');\r\n    cache.set(file, content);\r\n  }\r\n  return cache.get(file);\r\n}\r\n```\r\n\r\nPS：你的 `fs.readFile` 里面没有做错误处理，是有 bug 的。","createdAt":1572965559549},{"id":4785,"originId":"5dc204a2ece3813ad9ba6836","articleId":844,"userId":89,"content":"用event来处理并发，真的量上来，确定不会有问题？Listeners是有数量限制的","createdAt":1572996258058},{"id":4786,"originId":"5dc21136ece3813ad9ba6848","articleId":844,"userId":13,"content":"[@i5ting](/user/i5ting) 谢谢狼叔回复，下面是个人的理解，主要以下两点，如果有误之处，还请指教下：\r\n\r\n1. select 方法在接收到请求之后做的第一件事 emitter.once(file, cb); 注册了一个事件\r\n2. fs.readFile(file, function(err, result) {emitter.emit(file, err, result.toString());} （可以换成 DB 查询）这里在读取到数据之后，会触发这个事件，同时监听器会被移除\r\n\r\n这里会遇到问题是对同一个事件的监听超过 10 个会报警告，需要通过 emitter.setMaxListeners() 来修改，如果完全来处理并发可能也不会这样做吧，觉得好的一点是对于缓存雪崩，可以减少 DB 的相同语句重复查询。","createdAt":1572999478182},{"id":4787,"originId":"5dc2133dece3813ad9ba6852","articleId":844,"userId":358,"content":"emitter 和缓存雪崩真没什么关系 😂\r\n\r\n你这里想表达的是用 **单机缓存** 来解决 **缓存雪崩** 问题，先不说这个对不对。\r\n\r\n你这里的 `emitter` 只是你写 **单机缓存** 的一种代码实现方式而已，同理我也可以换个标题，叫 **用 callback 解决缓存雪崩问题**。\r\n\r\n或者上面我更新的 Promise 版本，叫  **用 Promise 解决缓存雪崩问题**？\r\n\r\n这里最多只能叫做：用 emitter 实现异步回调的协作问题，避免函数的多次调用，`throttle/debounce` 方法的另一种实现。\r\n\r\nPS：你的 fs.readFile 里面没有做错误处理，是有 bug 的。\r\n","createdAt":1572999997044},{"id":4788,"originId":"5dc21f41865a9844a30201e8","articleId":844,"userId":13,"content":"[@atian25](/user/atian25) 谢谢天猪大佬指教！","createdAt":1573003073267},{"id":4789,"originId":"5dc2320fece3813ad9ba691d","articleId":844,"userId":89,"content":"[@Q-Angelo](/user/Q-Angelo) 减少 DB 的相同语句重复查询。这点使用redis缓存就好了。需要理解db和cache的。","createdAt":1573007887885},{"id":4790,"originId":"5dc234cbece3813ad9ba6933","articleId":844,"userId":13,"content":"[@i5ting](/user/i5ting) 好的 谢谢狼叔！","createdAt":1573008587474},{"id":4791,"originId":"5dc23bdb865a9844a30202c0","articleId":844,"userId":89,"content":"社区分享，重在沟通，梳理是自己的，别人指出问题，也是自己成长，加油","createdAt":1573010395066},{"id":4792,"originId":"5dc24904865a9844a3020303","articleId":844,"userId":13,"content":"[@i5ting](/user/i5ting) 是的哈 谢谢大家的指教！这个社区很活跃的 很 Nice","createdAt":1573013764329},{"id":4793,"originId":"5dc12be1865a9844a3020033","articleId":845,"userId":627,"content":"厉害 支持开源","createdAt":1572940769903},{"id":4794,"originId":"5dc235f1ece3813ad9ba693d","articleId":845,"userId":829,"content":"看着很厉害的样子！","createdAt":1573008881273},{"id":4795,"originId":"5dc0d977865a9844a301fe78","articleId":846,"userId":153,"content":"mark","createdAt":1572919671995},{"id":4796,"originId":"5d4be7ae697873456c6bbef2","articleId":849,"userId":853,"content":"蛤","createdAt":1565255598642},{"id":4797,"originId":"5d4bfb2512a0194544415458","articleId":849,"userId":356,"content":"赞，浏览了一遍，确实非常不错的产品，用心做的。","createdAt":1565260581867},{"id":4798,"originId":"5d4bfcf9697873456c6bbfb9","articleId":849,"userId":1867,"content":"[@TimLiu1](/user/TimLiu1) 谢谢，欢迎使用，吐槽","createdAt":1565261049578},{"id":4799,"originId":"5d4cc35b697873456c6bc132","articleId":849,"userId":2,"content":"赞👍","createdAt":1565311835114},{"id":4800,"originId":"5d4cd346697873456c6bc1b5","articleId":849,"userId":753,"content":"居然只有英文版","createdAt":1565315910219},{"id":4801,"originId":"5d4cd839697873456c6bc1ef","articleId":849,"userId":1867,"content":"[@moshuchao](/user/moshuchao) 在 0.17.0 版本会支持国际版，敬请期待","createdAt":1565317177280},{"id":4802,"originId":"5d4d379512a01945444158db","articleId":849,"userId":1868,"content":"点赞","createdAt":1565341589602},{"id":4803,"originId":"5d4d392a697873456c6bc460","articleId":849,"userId":50,"content":"80多m，里面有什么😏\r\n","createdAt":1565341994755},{"id":4804,"originId":"5db2a965ece3813ad9ba43a1","articleId":849,"userId":1869,"content":"我想问一下有没有这样一个功能？就是通过命令行就直接可以打开md文件\r\n例如sublime text编辑器一样，在环境中添加了运行命令别名后，就直接采用\r\n> subl 当前路径下的文件名.md\r\n\r\n这样就用可以直接用mark text 软件打开md文件","createdAt":1571989861101},{"id":4805,"originId":"5dbefc1eece3813ad9ba603d","articleId":849,"userId":1867,"content":"[@helax000](/user/helax000) 可以通过命令行直接打开的，可以参考这篇文档： https://github.com/marktext/marktext/blob/develop/docs/CLI.md\r\n\r\n有什么疑问，欢迎留言","createdAt":1572797470213},{"id":4806,"originId":"5dbfd385865a9844a301fbd0","articleId":849,"userId":62,"content":"[@DuJiming](/user/DuJiming) 基于electron开发的，nodejs和chromium少不了的吧？","createdAt":1572852613289},{"id":4807,"originId":"5a9e40d719b2e3db18959ad6","articleId":850,"userId":1870,"content":"你这是黑社会专用编辑器. 我们是长在红旗下的所用用 ia writer","createdAt":1520320727932},{"id":4808,"originId":"5a9e504ff5dfc27d7ad984f1","articleId":850,"userId":1867,"content":"[@phpsmarter](/user/phpsmarter) 可以选择 light 主题。\r\n\r\n![light.jpg](//static.cnodejs.org/FjeAJ5tYfy_AAFsqTkS2cv7H07MH)","createdAt":1520324687308},{"id":4809,"originId":"5a9e5ef2ce4a27f867526dff","articleId":850,"userId":108,"content":"能撸编辑器的，都是大神级的人物\r\n\r\n![](http://i01.pic.sogou.com/a89b5dc81a21f3c6)","createdAt":1520328434280},{"id":4810,"originId":"5a9e62fc19b2e3db18959af1","articleId":850,"userId":1867,"content":"[@axetroy](/user/axetroy) 不是大神，就是造了一个轮子，欢迎 pr 或 star。","createdAt":1520329468984},{"id":4811,"originId":"5aa1575519b2e3db18959c10","articleId":850,"userId":1867,"content":"MarkText 新增斗图功能，强大的斗图库，让斗图从未如此简单。","createdAt":1520523093387},{"id":4812,"originId":"5aa1e19619b2e3db18959c17","articleId":850,"userId":633,"content":"强","createdAt":1520558486625},{"id":4813,"originId":"5aa25888ce4a27f867526f6a","articleId":850,"userId":263,"content":"![](http://i01.pic.sogou.com/be5cf5dd2e4cb115)","createdAt":1520588936606},{"id":4814,"originId":"5aa270ecce4a27f867526f72","articleId":850,"userId":1871,"content":"骚\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1520595180148},{"id":4815,"originId":"5aa2a770ce4a27f867526f81","articleId":850,"userId":1867,"content":"[@kinglisky](/user/kinglisky) 感谢原作者\r\n\r\n![](http://img03.sogoucdn.com/app/a/100520093/e18d20c94006dfe0-9eef65073f0f6be0-76a7f26dee3c2d2922d2e9e1d35d1bb6.jpg)","createdAt":1520609136146},{"id":4816,"originId":"5aa3229419b2e3db18959c56","articleId":850,"userId":59,"content":"[@Jocs](/user/Jocs) 已经 Star 如何转换成 Markdown 格式的 ? ","createdAt":1520640660741},{"id":4817,"originId":"5aa36e7ae7b166bb7b9ec8fb","articleId":850,"userId":36,"content":"6","createdAt":1520660090397},{"id":4818,"originId":"5aa3739de7b166bb7b9ec8fd","articleId":850,"userId":1867,"content":"[@hi363138911](/user/hi363138911)\r\n\r\n![1520661306131.jpg](//static.cnodejs.org/FiFb_r-ergNFGO-eTl4ddHoRjR7F)\r\n\r\n选择图片会自动生成 markdown 图片格式，\r\n\r\n然后如上图，复制到你想复制的地方就行。","createdAt":1520661405371},{"id":4819,"originId":"5aa7cbb919b2e3db18959d49","articleId":850,"userId":1867,"content":"Mark Text 终于支持 Windows 和 Linux 版本了。\r\n![](http://img01.sogoucdn.com/app/a/100520093/e18d20c94006dfe0-2857e2f09ca9e0a0-d7d7559663b4442ab155ae65303e18b9.jpg)","createdAt":1520946105118},{"id":4820,"originId":"5aa9e765f5dfc27d7ad98801","articleId":850,"userId":829,"content":"不错","createdAt":1521084261827},{"id":4821,"originId":"5aa9f46bf5dfc27d7ad9880d","articleId":850,"userId":1550,"content":"赞，\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1521087595043},{"id":4822,"originId":"5aaa0f9a19b2e3db18959dc6","articleId":850,"userId":1550,"content":"突然发现自己博客上的编辑功能也可以拿下来做一个web，在线md编辑器\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1521094554268},{"id":4823,"originId":"5aaa0fc7e7b166bb7b9eca97","articleId":850,"userId":1550,"content":"这个应用是前辈自己开发的嘛\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1521094599656},{"id":4824,"originId":"5aaa379319b2e3db18959de8","articleId":850,"userId":545,"content":"能像 editor.md 那样照顾一些普通用户，我就觉得挺不错了～","createdAt":1521104787200},{"id":4825,"originId":"5aaa3ebee7b166bb7b9ecab4","articleId":850,"userId":1867,"content":"[@zuohuadong](/user/zuohuadong) 哈，请问下怎么照顾普通用户？我们一直在努力，尽量满足更多用户需求","createdAt":1521106622405},{"id":4826,"originId":"5aaba51619b2e3db18959e65","articleId":850,"userId":545,"content":"[@Jocs](/user/Jocs)  http://pandao.github.io/editor.md/examples/simple.html","createdAt":1521198358966},{"id":4827,"originId":"5aae8fd9e7b166bb7b9ecba6","articleId":850,"userId":1867,"content":"[@zuohuadong](/user/zuohuadong) 好的，谢谢","createdAt":1521389529749},{"id":4828,"originId":"5aaf817cf5dfc27d7ad9897e","articleId":850,"userId":545,"content":"[@Jocs](/user/Jocs) 因为想整合到编辑器里，同时需要照顾下普通用户～","createdAt":1521451388054},{"id":4829,"originId":"5aaf9c5319b2e3db18959f30","articleId":850,"userId":1550,"content":"可npm下载使用？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1521458259804},{"id":4830,"originId":"5ab1ea5619b2e3db18959fdc","articleId":850,"userId":1867,"content":"[@zuohuadong](/user/zuohuadong) 后期会考虑出 web 版本的。通过 npm 安装使用。","createdAt":1521609302552},{"id":4831,"originId":"5ab1ea7ece4a27f8675272ee","articleId":850,"userId":1867,"content":"[@Freen247](/user/Freen247) 现在还没有 web 版本，后期会开源一个 web 版本，供 web 开发使用，可以通过 NPM 安装。","createdAt":1521609342223},{"id":4832,"originId":"5ac3040f96f344940fbbacac","articleId":850,"userId":1867,"content":"[@all](/user/all) 发布 v0.9.25版本，支持自动补全图片路径以及数学表达式","createdAt":1522729999434},{"id":4833,"originId":"5ac394b0e34737560fcca9d9","articleId":850,"userId":1872,"content":"大神，请收下我的膝盖！\r\n很像 **Typora**","createdAt":1522767024165},{"id":4834,"originId":"5b29e06529e6e510415b2bf1","articleId":850,"userId":1867,"content":"支持 sidebar 和 tabs ，不考虑下载下来玩玩吗？","createdAt":1529471077255},{"id":4835,"originId":"5b2b20155cd02be640901619","articleId":850,"userId":1089,"content":"可惜太過簡潔 不適合我這種想要用滑鼠解決語法的白痴","createdAt":1529552917300},{"id":4836,"originId":"5bd1d2b9b56c42645edb7cbf","articleId":850,"userId":1867,"content":"支持快速插入段落，以及行内样式浮窗了。还有很多新的功能，下载下来试试吧。https://github.com/marktext/marktext/releases","createdAt":1540477625664},{"id":4837,"originId":"5bd1d54aad50495f5e2fbb41","articleId":850,"userId":21,"content":"👍厉害，要是能分享一点核心实现逻辑就更好了","createdAt":1540478282105},{"id":4838,"originId":"5bd2f3ecb56c42645edb7d12","articleId":850,"userId":91,"content":"可以粘贴板贴图片吗？","createdAt":1540551660502},{"id":4839,"originId":"5bdb160721d75b74609f2d29","articleId":850,"userId":1867,"content":"[@sonong](/user/sonong) 暂时还不支持","createdAt":1541084679944},{"id":4840,"originId":"5d9ff011ece3813ad9ba1084","articleId":850,"userId":1873,"content":"大佬 ，你这个被我老板看见了，他需要一个web版，让我开发一个web版，我需要你的帮助","createdAt":1570762769004},{"id":4841,"originId":"5dbefc3cece3813ad9ba6043","articleId":850,"userId":1867,"content":"[@non-player](/user/non-player) 可以联系我。","createdAt":1572797500712},{"id":4842,"originId":"5ce3bd63e57aac76fed2cac6","articleId":851,"userId":1545,"content":"先学会善用搜索引擎：https://www.google.com.hk/search?hl=zh-CN&q=site:cnodejs.org+vue%20%E5%AD%A6%E4%B9%A0&cad=h","createdAt":1558429027561},{"id":4843,"originId":"5d0b9a95cdb1f967c15745c2","articleId":851,"userId":1661,"content":"给楼主推荐套视频教程\r\n[https://www.sucaihuo.com/video/56.html](https://www.sucaihuo.com/video/56.html)","createdAt":1561041557434},{"id":4844,"originId":"5d3a4dd5b4725a628e268be4","articleId":851,"userId":523,"content":"官网，我觉得官网是最容易入门的","createdAt":1564102101877},{"id":4845,"originId":"5d64cb3ddcd8e81121a61586","articleId":851,"userId":73,"content":"官方文档加应用实践吧，相互对照，自己是这样做的","createdAt":1566886717910},{"id":4846,"originId":"5d66299edcd8e81121a619d5","articleId":851,"userId":1373,"content":" 看我签名，站点栏目有vue相关，在线教程也有~","createdAt":1566976414155},{"id":4847,"originId":"5d8a2a958b9e1c0d6dc5dd9e","articleId":851,"userId":804,"content":"撸起袖子一通学","createdAt":1569335957241},{"id":4848,"originId":"5dbee400865a9844a301f92f","articleId":851,"userId":790,"content":"努力很重要，天赋也很重要","createdAt":1572791296552},{"id":4849,"originId":"5db6a6dd865a9844a301e3f3","articleId":852,"userId":89,"content":"习大大厉害了，这把火可以","createdAt":1572251357320},{"id":4850,"originId":"5dbea5e5ece3813ad9ba5faa","articleId":852,"userId":566,"content":"[@i5ting](/user/i5ting) 直接从7k拉到了10k，大写的服；","createdAt":1572775397248},{"id":4851,"originId":"5bf23536e6481c5709f5d124","articleId":859,"userId":1877,"content":"[@afacode](/user/afacode) 好人，分享一下 wwwmewww@163.com","createdAt":1542599990082},{"id":4852,"originId":"5bf65e97be1b120abac5be29","articleId":859,"userId":1877,"content":"[@afacode](/user/afacode) 收到 3Q","createdAt":1542872727396},{"id":4853,"originId":"5bfb6382be1b120abac5cc6e","articleId":859,"userId":167,"content":"[@afacode](/user/afacode) 谢谢分享~","createdAt":1543201666474},{"id":4854,"originId":"5c021cbfd6104a4f803a3628","articleId":859,"userId":1878,"content":"[@afacode](/user/afacode) 链接失效了","createdAt":1543642303443},{"id":4855,"originId":"5c02484a39c0af64fddb7aa1","articleId":859,"userId":1083,"content":"感谢分享","createdAt":1543653450056},{"id":4856,"originId":"5c03ecf4887c5864fafe1c52","articleId":859,"userId":1232,"content":"[@afacode](/user/afacode) 大哥，给我发一份。binbinecust@163.com 好人一生平安","createdAt":1543761140132},{"id":4857,"originId":"5c048caf887c5864fafe1d81","articleId":859,"userId":1878,"content":"[@afacode](/user/afacode) 一毛，尽力了","createdAt":1543802031490},{"id":4858,"originId":"5c172121f3d48d2397c11e6e","articleId":859,"userId":805,"content":"66666","createdAt":1545019681891},{"id":4859,"originId":"5c2f63395bf06c5e7e3f1701","articleId":859,"userId":1661,"content":"看看吧","createdAt":1546609465909},{"id":4860,"originId":"5c30c5123898674067a7ba47","articleId":859,"userId":626,"content":"标记下","createdAt":1546700050872},{"id":4861,"originId":"5c331e0f3898674067a7c2a6","articleId":859,"userId":1879,"content":"[@afacode](/user/afacode) 大佬发我一份jiangyou_wu@163.com\r\n","createdAt":1546853903559},{"id":4862,"originId":"5c7166b2e1a81129a7ad9f17","articleId":859,"userId":1880,"content":"[@afacode](/user/afacode) 大佬麻烦你发我一份 红包感谢zuohong_xie@163.com","createdAt":1550935730056},{"id":4863,"originId":"5c73b3a0c1ba21650a204b74","articleId":859,"userId":144,"content":"[@afacode](/user/afacode) 老哥，借一部说话 nierongsheng2012@163.com","createdAt":1551086496517},{"id":4864,"originId":"5c73d728a667ed6d807b8f55","articleId":859,"userId":1881,"content":"[@afacode](/user/afacode) 大佬发我一份，sminocence@gmail.com，谢谢","createdAt":1551095592354},{"id":4865,"originId":"5c93a31afd41137eb7660457","articleId":859,"userId":798,"content":"MongoDB还没学呢","createdAt":1553179418228},{"id":4866,"originId":"5c93a927fd41137eb766049f","articleId":859,"userId":556,"content":"[@codeofking](/user/codeofking) 大兄弟，分享下，3QQQQQ，zhaoxbrun@gmail.com","createdAt":1553180967231},{"id":4867,"originId":"5c944202fd41137eb76605c4","articleId":859,"userId":149,"content":"[@afacode](/user/afacode) 分享一下，谢谢了，siasplus@163.com","createdAt":1553220098390},{"id":4868,"originId":"5c983ad100bcfd7eb2be5a54","articleId":859,"userId":1882,"content":"[@afacode](/user/afacode) 老哥，分享一下 592409939@qq.com","createdAt":1553480401505},{"id":4869,"originId":"5c99ec81fd41137eb7661e27","articleId":859,"userId":1883,"content":"[@afacode](/user/afacode)  老哥 分享下  13918718009@163.com","createdAt":1553591425406},{"id":4870,"originId":"5c9acd4e00bcfd7eb2be6863","articleId":859,"userId":1884,"content":"[@binbin0915](/user/binbin0915) 兄dei，分享一下 583214339@qq.com","createdAt":1553648974067},{"id":4871,"originId":"5cb882f437faec0ce1d0379c","articleId":859,"userId":804,"content":"我也要","createdAt":1555596020089},{"id":4872,"originId":"5cd81d72d5fff6772a2fde76","articleId":859,"userId":798,"content":"有的老铁给我份1992115758@qq.com","createdAt":1557667186328},{"id":4873,"originId":"5cd821a4d5fff6772a2fde9c","articleId":859,"userId":1885,"content":"老铁分一杯羹 444812002@qq.com","createdAt":1557668260961},{"id":4874,"originId":"5cd90f1ae57aac76fed2a079","articleId":859,"userId":1886,"content":"谢谢大佬 382967255@qq.com","createdAt":1557729050462},{"id":4875,"originId":"5cde926c518e0954fc40f51f","articleId":859,"userId":1887,"content":"谢谢大佬分享 1246691129@qq.com","createdAt":1558090348151},{"id":4876,"originId":"5cdf6828518e0954fc40f5db","articleId":859,"userId":1888,"content":"老铁分一杯羹 97381013@qq.com","createdAt":1558145064406},{"id":4877,"originId":"5ce0bcace57aac76fed2bd24","articleId":859,"userId":1889,"content":"好人求一个 390058699@qq.com","createdAt":1558232236314},{"id":4878,"originId":"5d064f7f95fcc914aa2697ce","articleId":859,"userId":1661,"content":"谢谢大佬分享 1135760809@qq.com","createdAt":1560694655590},{"id":4879,"originId":"5d59fb4712a019454441797c","articleId":859,"userId":1890,"content":"谢谢大佬分享 1960474385@qq.com","createdAt":1566178119046},{"id":4880,"originId":"5d5a1a3912a0194544417a80","articleId":859,"userId":1891,"content":"大佬分享一下： hdbaiyu22008@qq.com","createdAt":1566186041679},{"id":4881,"originId":"5d5ab65f12a0194544417d38","articleId":859,"userId":1892,"content":"大佬,分享一下  347106739@qq.com","createdAt":1566226015101},{"id":4882,"originId":"5d7a56b1a7474a231a58b56e","articleId":859,"userId":804,"content":"345762058@qq.com 求分享","createdAt":1568298673968},{"id":4883,"originId":"5d81f06653c75a4136b4b5dd","articleId":859,"userId":1893,"content":"2827322475@qq.com 求分享","createdAt":1568796774711},{"id":4884,"originId":"5d82320a53c75a4136b4b7f8","articleId":859,"userId":1894,"content":"大佬发我一份，谢谢 1107136500@qq.com","createdAt":1568813578432},{"id":4885,"originId":"5d832fe895464514f7ed82ac","articleId":859,"userId":1524,"content":"大佬求发我一份，谢谢 gethin@aliyun.com","createdAt":1568878568929},{"id":4886,"originId":"5d897c7d4f109e79ef5ff13f","articleId":859,"userId":1895,"content":"求分享一份哈    516121228@qq.com","createdAt":1569291389842},{"id":4887,"originId":"5dbc488e865a9844a301f57e","articleId":859,"userId":790,"content":"怎么样啊","createdAt":1572620430296},{"id":4888,"originId":"5dbd4cbeece3813ad9ba5e20","articleId":859,"userId":1896,"content":"求分享，13965376131@163.com，谢谢！[@wwwmewww](/user/wwwmewww) ","createdAt":1572687038284},{"id":4889,"originId":"5db576acece3813ad9ba471f","articleId":860,"userId":1236,"content":"ggg2确实","createdAt":1572173484699},{"id":4890,"originId":"5db58e0fece3813ad9ba4769","articleId":860,"userId":1898,"content":"各有利弊，纸质书占太多空间","createdAt":1572179471794},{"id":4891,"originId":"5db5afee865a9844a301e060","articleId":860,"userId":114,"content":"我现在更喜欢电子书，各有所好","createdAt":1572188142979},{"id":4892,"originId":"5db64c63865a9844a301e13d","articleId":860,"userId":1373,"content":"纸质书虽然好，但是我还是看电子书，因为方便~","createdAt":1572228195235},{"id":4893,"originId":"5db66149865a9844a301e1eb","articleId":860,"userId":516,"content":"分类型，阅读型的适合电子版，工具类的还是纸质的好一些吧","createdAt":1572233545371},{"id":4894,"originId":"5db6ce14865a9844a301e51a","articleId":860,"userId":1459,"content":"文学书籍 都是实体书 \r\n编程类的 全是电子书 😁","createdAt":1572261396147},{"id":4895,"originId":"5dbd32e9ece3813ad9ba5e01","articleId":860,"userId":223,"content":"如果拿技术纸质书和书籍或者kindle电子书比，多半还是纸质书体验好，但如果是和iPad或者surface比呢？就未必了。","createdAt":1572680425962},{"id":4896,"originId":"5db24925ece3813ad9ba4146","articleId":861,"userId":26,"content":"好难找到一个拥有这种觉悟的队友或者团队","createdAt":1571965221062},{"id":4897,"originId":"5db249efece3813ad9ba414f","articleId":861,"userId":358,"content":"vue、react、angular 这些的价值在于社区，标准化带来的学习成本、团队沟通成本、经验沉淀成本降低。除非你觉得世界上那么多用 vue、react、angular 的人都是傻子。\r\n\r\n自己随便玩玩可以，在业务中就要慎重了，再简单的场景，再简单的代码，除非你只有一个应用，否则你最后还是会封装为自己的一个『框架』，然后随着业务的演进必然会集成越来越多的功能，不可避免的会走向勇士成为恶龙的道路，哪天你离职后就是给后人埋雷。\r\n\r\n前端的深水区那么多，有那么多可以深挖的地方（CloudIDE、可视化、富文本编辑器、AR/VR。。。），就别在已经基本标准化完成的前端框架这一领域浪费时间了，人生苦短，要找到有真正价值（不仅仅对自己，还有团队和社区）的地方去奋斗。","createdAt":1571965423318},{"id":4898,"originId":"5db24efdece3813ad9ba419c","articleId":861,"userId":21,"content":"[@atian25](/user/atian25) \r\n其实取标题的时候，我也犹豫过要不要叫“web components快速实现框架功能”，想想不够震惊。说白了，即使在小团队内使用也一定会存在功能的封装，随着封装加剧，也会像框架一样。\r\n\r\n评论很犀利，很多地方貌似直击要害，但可能又不算要害。\r\n\r\n标准确实能带来很多好处，但是如果抛开我上面实现的功能来说。vue、react、angular 属于一种公司或私立的框架标准。而web components属于浏览器标准，为什么要选择框架标准而放弃浏览器标准？\r\n\r\n其实在业务中，不管是vue、react、angular，公司内部往往会在它之上添加很多自己公司特色的功能，可以说是框架的框架。而使用web components其实也一样，不管如何都会在公司内部再封装一层，所以恶龙是不可避免的，埋雷总是存在的，不管是用什么框架或标准。\r\n\r\n其实现在觉得抵制的人，很多就是和当年Jquery的人的心态一致，就是我已经用它构建了这么多有意义的东西了，为什么还要用我不熟悉的vue、react、angular？然而我觉得学一样新东西未必就是坏事。\r\n","createdAt":1571966717178},{"id":4899,"originId":"5db25109865a9844a301daa2","articleId":861,"userId":111,"content":"自己能根据公司的业务封装框架，和直接用现成的框架对码农来说，哪种选择更有益？","createdAt":1571967241435},{"id":4900,"originId":"5db2510d865a9844a301daa6","articleId":861,"userId":21,"content":"[@HobaiRiku](/user/HobaiRiku) \r\n老实说我觉得目前这个东西很适合给团队内部或基建工作引入，因为这个东西目前所带来的价值之一就是提升团队的技术面同时可以先沉淀，先平筛选出优缺点。如果以后社区支持度更高的时候，也可以优先把这方面沉淀公布不仅仅能给社区带来贡献，也能给团队带来价值。即使以后不会流行就当会点新东西，感觉也亏不到哪去。","createdAt":1571967245363},{"id":4901,"originId":"5db259a4ece3813ad9ba41fd","articleId":861,"userId":103,"content":"你的想法和我如出一辙，首先用一个真实数据做对比，我们的pc官网和wap网站的性能对比差了10倍，打开速度pc网站0.3s,wap网站3s。因为pc做的比较早，使用了最基础的jquery开发，而wap网站为了追求新技术使用了vue，使用框架的结果是增加了开发难度，编译变慢，引入了体积较大了js。框架对于开发复杂项目会降低开发难度，但是对于简单网站却是增加了难度。\r\n\r\n","createdAt":1571969444245},{"id":4902,"originId":"5db25a75865a9844a301db17","articleId":861,"userId":103,"content":"个人观点：使用什么技术是技术人的向上追求，当别人都很原始的时候我使用新技术，新框架就比别人强，当所有人都使用框架的时候我回归自然，使用最简单原始的开发方式就会显得我更懂底层原理。这是一个周期性的波动特性。","createdAt":1571969653399},{"id":4903,"originId":"5db25b26865a9844a301db1f","articleId":861,"userId":358,"content":"[@zy445566](/user/zy445566) web components 成为标准的那一天，vue、react、angular 它们也肯定已经做了平滑的支持。它们的内部完全可以重构为 web components，而对于上层开发者是无感知的。就像 Vue 2 -> 3 把 defineProperty 改为 Proxy 绝大部分情况是对上层开发者无感知的（当然因为有其他的优化和对浏览器有要求所以发了大版本）。\r\n\r\n而且 `web components` 的标准化过程中，必然会考虑到 vue、react、angular 的，所有的标准定制都是从事实标准中演化过来的。如果 `web components` 的标准化是完全抛开三大框架，那它必然会是另一个 ES4。\r\n\r\n我并没有表达我抵制 `web components`，我表达的是作为一个团队的 Leader，从我的角度我会更倾向于找到一种平衡的演进路线，更何况三大框架只有  `web components`  这一点么？我会判断我团队的价值应该落到哪里，我并不认为我的团队做的东西会超过三大框架，我更宁愿参与进去三大框架来演进到那个未来。\r\n\r\n屁股决定脑袋，不同的团队，不同的阶段，看的的价值都是不一样的，我也不是在犀利的攻击你的观点，我只是表达从我的角度我会做的选择。\r\n\r\nend of discussion~ 我都已经淡出前端框架这个领域了~ 当我没回复吧。","createdAt":1571969830789},{"id":4904,"originId":"5db26711865a9844a301db79","articleId":861,"userId":21,"content":"[@yuedun](/user/yuedun) \r\n其实很多人就是发现了这个问题，所以现在有人也在研究按需加载的轻量框架。\r\n","createdAt":1571972881571},{"id":4905,"originId":"5db29967ece3813ad9ba4343","articleId":861,"userId":1899,"content":"对于笔者的观点我很支持，vue和react 个人更加偏向于使用业务复杂的，对于简单的内容类网站确实不是很适用\r\n现在大部分初级前端vue和react 都会用，但是只是会用，面试的时候一问，原理都不知道，都是按照网上的说的，继续问，什么也不会，原生js，基本上都不会，\r\n最近在思考原生js，不是做前端的基本功吗?  对框架使用很熟练，就好像一直在做一件重复的是，很难跳出舒适圈，个人更加认为应该学习原理！而不应该局限在熟练使用框架，","createdAt":1571985767860},{"id":4906,"originId":"5db29d47ece3813ad9ba4366","articleId":861,"userId":21,"content":"[@dixiaoping](/user/dixiaoping) 谢谢支持","createdAt":1571986759324},{"id":4907,"originId":"5db2da10ece3813ad9ba4450","articleId":861,"userId":259,"content":"无聊，这种问题三天两头蹦出来没啥意义。","createdAt":1572002320249},{"id":4908,"originId":"5db4ff53ece3813ad9ba460e","articleId":861,"userId":1707,"content":"想到一点 如果是社交应用（前端时间一个jq老项目被搞） 还得考虑xss 但是三大框架帮你考虑了 你这加一下应该也不难 不过成本高啊  得考虑团队每一个人是不是都有安全意识  是不是都能把这个问题处理好 \r\n就像说用hooks实现状态管理多么轻量 结果呢 真的那么简单就撸出来一个状态管理到生产里面用么","createdAt":1572142931086},{"id":4909,"originId":"5dbc2cd6865a9844a301f550","articleId":861,"userId":1900,"content":"用框架也不耽误学习底层的js知识，只能说有些人自己把自己搞成框架工程师","createdAt":1572613334760},{"id":4910,"originId":"5db98663ece3813ad9ba54b1","articleId":862,"userId":545,"content":"新版本好像是 llhttp 了，ts写的","createdAt":1572439651133},{"id":4911,"originId":"5dbaf48c865a9844a301f214","articleId":862,"userId":147,"content":"[@zuohuadong](/user/zuohuadong) 学不动了","createdAt":1572533388975},{"id":4912,"originId":"5db81797865a9844a301e92b","articleId":863,"userId":18,"content":"我还挺喜欢知乎专栏的，可以跟读者有更多互动","createdAt":1572345751802},{"id":4913,"originId":"5db81ce9865a9844a301e938","articleId":863,"userId":1208,"content":"[@alsotang](/user/alsotang) 很早就看到，为了追求更多读者，alsotang跑到了知乎专栏😂","createdAt":1572347113834},{"id":4914,"originId":"5db8f95dece3813ad9ba5202","articleId":863,"userId":1647,"content":"现在不是一篇博客发遍所有端吗😂","createdAt":1572403549089},{"id":4915,"originId":"5db8fabdece3813ad9ba5215","articleId":863,"userId":173,"content":"[@alsotang](/user/alsotang) +1","createdAt":1572403901609},{"id":4916,"originId":"5dbabd9bece3813ad9ba58bf","articleId":863,"userId":1208,"content":"[@lear-cash](/user/lear-cash) 是的, 在考虑如何多自动帮你多一个端😅\r\n","createdAt":1572519323755},{"id":4917,"originId":"5dba9c7f865a9844a301f0d6","articleId":864,"userId":195,"content":"支持一下~","createdAt":1572510847787},{"id":4918,"originId":"5dba39d3ece3813ad9ba55a9","articleId":865,"userId":358,"content":"你有硬件背景，可以去看看深圳那些开源硬件，或幼儿编程教育类的岗位，（如 makeblock 啥的）应该可以找到 硬件 + 前端 的结合点。","createdAt":1572485587350},{"id":4919,"originId":"5dba93b0865a9844a301f0aa","articleId":865,"userId":1901,"content":"[@atian25](/user/atian25) 的确实是个好主意，但是没看见相关的招聘信息","createdAt":1572508592988},{"id":4920,"originId":"5dba6f70865a9844a301efec","articleId":866,"userId":1902,"content":"双11拼团链接：\r\nhttps://www.aliyun.com/1111/2019/group-buying-share?ptCode=6398CD32E5CE71B0A1F5CABA683BB60E647C88CF896EF535&userCode=lybdc2bn&share_source=copy_link","createdAt":1572499312613},{"id":4921,"originId":"5db3ce5aece3813ad9ba4536","articleId":867,"userId":21,"content":"有点意思，可以考虑","createdAt":1572064858152},{"id":4922,"originId":"5db651bbece3813ad9ba48a4","articleId":867,"userId":103,"content":"这个考察面基本覆盖了node所有模块，但实际工作可能支用了不到30%的模块，等待后续有人分享考试心得。","createdAt":1572229563693},{"id":4923,"originId":"5db65d9fece3813ad9ba48ec","articleId":867,"userId":418,"content":"300刀，我考不起","createdAt":1572232607396},{"id":4924,"originId":"5db683e3865a9844a301e2f5","articleId":867,"userId":1903,"content":"本来挺高兴的, 看到 300刀的考试费用...............emmmmmmmmmmmmmmmm","createdAt":1572242403328},{"id":4925,"originId":"5db7a52a865a9844a301e6f5","articleId":867,"userId":1904,"content":"$300，抢钱呢","createdAt":1572316458104},{"id":4926,"originId":"5dba5660ece3813ad9ba56bf","articleId":867,"userId":1905,"content":"总感觉这个可以当个参考目录去学习","createdAt":1572492896509},{"id":4927,"originId":"5c8230b25b8cb21491ca75e4","articleId":868,"userId":220,"content":"写得真不错","createdAt":1552036018167},{"id":4928,"originId":"5c826c417ce0df37324264de","articleId":868,"userId":89,"content":"点个赞","createdAt":1552051265454},{"id":4929,"originId":"5c82a8227ce0df373242652e","articleId":868,"userId":1906,"content":"[@qxl1231](/user/qxl1231) thx 欢迎关注订阅号看更多内容~~~","createdAt":1552066594743},{"id":4930,"originId":"5c837721acb681372d4167c5","articleId":868,"userId":1907,"content":"受教","createdAt":1552119585768},{"id":4931,"originId":"5c85cb39acb681372d416d35","articleId":868,"userId":1906,"content":"[@ldqUndefined](/user/ldqUndefined) 修改了部分内容","createdAt":1552272185288},{"id":4932,"originId":"5c85cb3eacb681372d416d39","articleId":868,"userId":1906,"content":"[@qxl1231](/user/qxl1231) 修改了部分内容","createdAt":1552272190449},{"id":4933,"originId":"5c85cb48acb681372d416d3d","articleId":868,"userId":1906,"content":"[@i5ting](/user/i5ting) 修改了部分内容","createdAt":1552272200448},{"id":4934,"originId":"5c88b6f0acb681372d417b84","articleId":868,"userId":1908,"content":"受教，哈哈。不过我在segmentfault看到你写的这个了。辛苦了","createdAt":1552463600214},{"id":4935,"originId":"5c8919beacb681372d417d60","articleId":868,"userId":1906,"content":"[@jacksparrow68](/user/jacksparrow68) 谢谢 经常在那两个社区发文章 😂","createdAt":1552488894748},{"id":4936,"originId":"5c89b505acb681372d417e16","articleId":868,"userId":1909,"content":"点个赞！","createdAt":1552528645588},{"id":4937,"originId":"5c89be557ce0df3732427c66","articleId":868,"userId":449,"content":"总结的蛮好","createdAt":1552531029956},{"id":4938,"originId":"5c8b616cacb681372d41876c","articleId":868,"userId":1910,"content":"mark 面试反复问的问题 自己也确实没搞明白的 感谢楼主","createdAt":1552638316745},{"id":4939,"originId":"5c8b709e7ce0df373242862b","articleId":868,"userId":568,"content":"很不好的语法设计","createdAt":1552642206624},{"id":4940,"originId":"5c8bc784acb681372d418940","articleId":868,"userId":1906,"content":"[@AspirinMrmi](/user/AspirinMrmi) 最近要面试 正好趁此机会梳理一下😂","createdAt":1552664452787},{"id":4941,"originId":"5c8bc79bacb681372d418944","articleId":868,"userId":1906,"content":"[@captainblue2013](/user/captainblue2013) 没有办法作为一个前端又必须要会😢","createdAt":1552664475263},{"id":4942,"originId":"5c8f0ded7ce0df373242923f","articleId":868,"userId":568,"content":"[@oliyg](/user/oliyg) 我觉得不是","createdAt":1552879085005},{"id":4943,"originId":"5c8f56eb7ce0df37324295b5","articleId":868,"userId":1906,"content":"[@captainblue2013](/user/captainblue2013) 不是？指的是？哪方面","createdAt":1552897771928},{"id":4944,"originId":"5c8f9066acb681372d4199e0","articleId":868,"userId":1911,"content":"非常感谢，我是初学者收获很多","createdAt":1552912486693},{"id":4945,"originId":"5c8fb16e96558e26e1b66968","articleId":868,"userId":1906,"content":"[@JunQu](/user/JunQu) 文章有用就是最大的鼓励~~~","createdAt":1552920942725},{"id":4946,"originId":"5db7ecd7865a9844a301e83e","articleId":868,"userId":1912,"content":"点个赞~","createdAt":1572334807523},{"id":4947,"originId":"5db8e513865a9844a301e9f9","articleId":868,"userId":730,"content":"[@ldqUndefined](/user/ldqUndefined)  1","createdAt":1572398355950},{"id":4948,"originId":"5db8e580865a9844a301ea04","articleId":868,"userId":730,"content":"[@wei2573533873](/user/wei2573533873)  1","createdAt":1572398464037},{"id":4949,"originId":"5db8f105865a9844a301ea6b","articleId":868,"userId":3,"content":"图片全挂掉了额(⊙﹏⊙)\r\n![snipaste20191030_100942.png](//static.cnodejs.org/Fras1-5bG44lnBZEjfx3HxiqCzN4)","createdAt":1572401413605},{"id":4950,"originId":"5da6ee48865a9844a301bbb8","articleId":871,"userId":755,"content":"要出 5 了啊, 手动滑稽","createdAt":1571221064565},{"id":4951,"originId":"5da7bf5c865a9844a301bc81","articleId":871,"userId":33,"content":"简单看了下，polyfill 和 缓存写的都不是太好","createdAt":1571274588049},{"id":4952,"originId":"5da804f0865a9844a301bf35","articleId":871,"userId":89,"content":"略浅，学习还不错","createdAt":1571292400588},{"id":4953,"originId":"5da8051b865a9844a301bf3a","articleId":871,"userId":89,"content":"[@biggerV](/user/biggerV) 把目录和readme发出来，效果更好","createdAt":1571292443157},{"id":4954,"originId":"5dad124f865a9844a301c8ca","articleId":871,"userId":1546,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 能列举一二吗？","createdAt":1571623503443},{"id":4955,"originId":"5dad12a8865a9844a301c8cf","articleId":871,"userId":1546,"content":"[@yinxin630](/user/yinxin630) 嗯，但我这个其实在半年前就写了","createdAt":1571623592874},{"id":4956,"originId":"5dad12f3ece3813ad9ba309d","articleId":871,"userId":1546,"content":"[@i5ting](/user/i5ting) 谢谢支持，都在git上哈","createdAt":1571623667079},{"id":4957,"originId":"5dad1356865a9844a301c8d3","articleId":871,"userId":1546,"content":"[@i5ting](/user/i5ting) 是的，就是应用教程，没有什么原理的解析，原理的解析不是我这个教程的目的哈","createdAt":1571623766076},{"id":4958,"originId":"5dad1f1c865a9844a301c91f","articleId":871,"userId":187,"content":"感觉是在做无用功，各个框架的自带的脚手架，都是给你一步到位","createdAt":1571626780867},{"id":4959,"originId":"5dad1fc1ece3813ad9ba30f3","articleId":871,"userId":1546,"content":"[@ounana](/user/ounana) 是的，我吃的相当饱，手动 野狼的士高","createdAt":1571626945776},{"id":4960,"originId":"5dada855865a9844a301cbe0","articleId":871,"userId":1647,"content":"[@biggerV](/user/biggerV) 哈哈哈   这个相当饱  楼主好幽默呢","createdAt":1571661909290},{"id":4961,"originId":"5db0116e865a9844a301d499","articleId":871,"userId":1913,"content":"写的很详细 ~  感觉有些细节描述的非常好 ~","createdAt":1571819886218},{"id":4962,"originId":"5db2d716865a9844a301dd15","articleId":871,"userId":1546,"content":"[@LiHaiX](/user/LiHaiX) 大师球！抓住一个识货精灵","createdAt":1572001558099},{"id":4963,"originId":"5db6cf53ece3813ad9ba4c8f","articleId":871,"userId":1546,"content":"之前的QQ群废了，有问题可以加我微信入群，加我说明：前端群\r\n![微信图片_20191028135212.jpg](//static.cnodejs.org/Fs9JZji5rCts8lhkAVRnYSyT1AcN)","createdAt":1572261715623},{"id":4964,"originId":"5d5b47d7d53e9171e98a93f0","articleId":872,"userId":1373,"content":"沙发~","createdAt":1566263255920},{"id":4965,"originId":"5d5c9dd4421846662d98394c","articleId":872,"userId":853,"content":"沙发~","createdAt":1566350804412},{"id":4966,"originId":"5d5caf2de79eaa6628beb255","articleId":872,"userId":829,"content":"赞","createdAt":1566355245680},{"id":4967,"originId":"5d5cb5bce79eaa6628beb288","articleId":872,"userId":400,"content":"赞","createdAt":1566356924096},{"id":4968,"originId":"5d5cdfcbe79eaa6628beb34f","articleId":872,"userId":867,"content":"感觉线条不平滑，有办法吗？\r\n","createdAt":1566367691835},{"id":4969,"originId":"5d5d25f3421846662d983c21","articleId":872,"userId":1208,"content":"[@pzzcn](/user/pzzcn) emm, 看到三个地方有人说这个问题了, 有空研究下","createdAt":1566385651041},{"id":4970,"originId":"5d5d2b1a421846662d983c40","articleId":872,"userId":89,"content":"棒棒哒","createdAt":1566386970303},{"id":4971,"originId":"5d6683c5dcd8e81121a61b72","articleId":872,"userId":1914,"content":"这是什么原理\r\n\r\n感兴趣(＾－＾)V\r\n\r\n","createdAt":1566999493376},{"id":4972,"originId":"5d67add1421846662d985c11","articleId":872,"userId":1915,"content":"哎呦，不错~不错~","createdAt":1567075793749},{"id":4973,"originId":"5d6c94b9a7474a231a5881b1","articleId":872,"userId":1916,"content":"为啥我看啥都是 cxk","createdAt":1567397049856},{"id":4974,"originId":"5d6cc095d50f572345910d63","articleId":872,"userId":1208,"content":"[@yeplive](/user/yeplive) svg filter~ 具体可以看看源码\r\n","createdAt":1567408277670},{"id":4975,"originId":"5d6ce1ada7474a231a5883b3","articleId":872,"userId":1507,"content":"[@doxiaodong](/user/doxiaodong) 我也...","createdAt":1567416749915},{"id":4976,"originId":"5db58c7eece3813ad9ba4762","articleId":872,"userId":1917,"content":"赞","createdAt":1572179070322},{"id":4977,"originId":"5db66158865a9844a301e1f0","articleId":872,"userId":1827,"content":"有内味了","createdAt":1572233560801},{"id":4978,"originId":"5db6cde8865a9844a301e514","articleId":872,"userId":1459,"content":"原来是楼主做的 666 ","createdAt":1572261352825},{"id":4979,"originId":"5db679d4ece3813ad9ba49d9","articleId":873,"userId":19,"content":"居然有人在厕所门口计时，太不人道了！","createdAt":1572239828131},{"id":4980,"originId":"5db69ca6ece3813ad9ba4b19","articleId":873,"userId":1919,"content":"哪家公司，那么坑","createdAt":1572248742156},{"id":4981,"originId":"5db6a844ece3813ad9ba4baa","articleId":873,"userId":649,"content":"[@Luooojunnn](/user/Luooojunnn) 本身也是小公司  还不至于到曝光的程度  就是吐槽一下","createdAt":1572251716071},{"id":4982,"originId":"5db6a8a3865a9844a301e412","articleId":873,"userId":649,"content":"果然是自己的问题吗...?\r\n\r\n差劲而不自知的我啊","createdAt":1572251811730},{"id":4983,"originId":"5db6c8b5865a9844a301e4e9","articleId":873,"userId":97,"content":"让你加班别提加班费和调休的公司就会弹性时间","createdAt":1572260021282},{"id":4984,"originId":"5db18b49ece3813ad9ba4070","articleId":875,"userId":18,"content":"是修复了一个bug。。。不是掩盖吧。。。","createdAt":1571916617059},{"id":4985,"originId":"5db3e7a0865a9844a301de19","articleId":875,"userId":191,"content":"什么bug","createdAt":1572071328647},{"id":4986,"originId":"5cd62315d5fff6772a2fd955","articleId":876,"userId":1217,"content":"讲的很通透","createdAt":1557537557342},{"id":4987,"originId":"5cd635d7e57aac76fed29737","articleId":876,"userId":1922,"content":"用js不就是为了避免泛型、接口这些吗？\r\n怎么ts又都给弄回来了？","createdAt":1557542359346},{"id":4988,"originId":"5cd77ec5e57aac76fed29ae1","articleId":876,"userId":99,"content":"[@jyk0011](/user/jyk0011) ts就是仿照java这样的面向对象的语言            实现泛型 装饰器这些是js很大的进步","createdAt":1557626565865},{"id":4989,"originId":"5cda3e2ce57aac76fed2a5a0","articleId":876,"userId":189,"content":"[@jyk0011](/user/jyk0011) ts就是仿照java这样的面向对象的语言 ，TypeScript是为大型应用之开发而设计,目前TypeScript 已在Nodejs 、Angualr、React、Vue这些框架中广泛应用。\r\n\r\n \r\n\r\n","createdAt":1557806636405},{"id":4990,"originId":"5cda45a0d5fff6772a2fe7da","articleId":876,"userId":79,"content":"👍👍👍","createdAt":1557808544822},{"id":4991,"originId":"5cda8310e57aac76fed2a7c0","articleId":876,"userId":1922,"content":"[@phonegap100](/user/phonegap100) js不是支持最“广泛”的泛型吗？不管啥类型的都可以直接传递。","createdAt":1557824272942},{"id":4992,"originId":"5cdacaf2518e0954fc40e473","articleId":876,"userId":99,"content":"[@jyk0011](/user/jyk0011) javascript中是这样的，这样很方便使用的，尤其小项目，但是大项目多人开发中就会有问题。就是因为没有类型约束 ，没有类型校验所以项目大的时候可能会带了各种问题。typescript就是模仿java这样的后端语言的。ts是js的超集 兼容es5 es6语法","createdAt":1557842674469},{"id":4993,"originId":"5cee2faf52ccb64168ba87b2","articleId":876,"userId":100,"content":"非常不错的入门教程！感谢","createdAt":1559113647584},{"id":4994,"originId":"5cf48ab71fe902120f31b828","articleId":876,"userId":191,"content":" 这个教程比较全 感谢","createdAt":1559530167965},{"id":4995,"originId":"5d0c5d14cdb1f967c157491d","articleId":876,"userId":189,"content":"学完来感谢楼主","createdAt":1561091348008},{"id":4996,"originId":"5d0c764934bca667bc6e19e8","articleId":876,"userId":1923,"content":"[@jyk0011](/user/jyk0011) 我也很同意，为啥又带回来了，那还是脚本语言么。。。。实际运行把强类型又再转回弱类型，就是爱折腾。。。。。","createdAt":1561097801126},{"id":4997,"originId":"5d1ea359ad75d374b58bc765","articleId":876,"userId":189,"content":"会有实战吗？","createdAt":1562288985258},{"id":4998,"originId":"5d200125ad75d374b58bcbcb","articleId":876,"userId":1922,"content":"[@phonegap100](/user/phonegap100) 我也认同你的看法，大项目需要多人开发，类型没有约束确实和头疼，只是，我想的是另一种解决方法，使用插件的思路。这样就不会过于依赖类型。另外插件了，也没法约束类型。恰恰思路是相反的。","createdAt":1562378533214},{"id":4999,"originId":"5d22b2daad75d374b58bd129","articleId":876,"userId":99,"content":"[@jyk0011](/user/jyk0011) 对的","createdAt":1562555098486},{"id":5000,"originId":"5d771f2ad50f57234591330a","articleId":876,"userId":189,"content":"求课件","createdAt":1568087850985},{"id":5001,"originId":"5d785ccca7474a231a58ae42","articleId":876,"userId":725,"content":"[@sinazl](/user/sinazl) 网盘里面有","createdAt":1568169164772},{"id":5002,"originId":"5d78614ed50f572345913852","articleId":876,"userId":712,"content":"[@jyk0011](/user/jyk0011) 你说的对，但是有了类型约束就会大大减少我们代码的错误，同时也能写出美观的代码，一个方法让人一看参数就知道参数是什么类型的，这样调用方法的时候不至于需要看方法本身才能识别出需要传递的参数类型","createdAt":1568170318858},{"id":5003,"originId":"5d886e2c53c75a4136b4cccc","articleId":876,"userId":191,"content":"良心","createdAt":1569222188163},{"id":5004,"originId":"5d9eabba865a9844a301a594","articleId":876,"userId":1922,"content":"[@glj1102](/user/glj1102) 认同你的说法，而且，类型约束不仅仅是参数的类型，还包括参数（属性）的数量吧。\r\n这个是各有利弊的。\r\n喜欢js的一个原因就是，写函数传递参数的时候，不用去关心类型，啥都可以传递过来。而且类的属性数量可以很随意。\r\n比如jQuery的ajax，可以有很多属性，但是用的时候，只需要设置需要的几个属性就可以，不必每个属性都设置值。\r\n比如Vue，也有很多属性，但是也是不必都设置上，用哪个属性就给哪个属性设置值就可以。\r\nVue的Data也是可以很随意的设置结构，没有任何约束。\r\n不知道Vue3.0 之后，data会怎么约束。","createdAt":1570679738894},{"id":5005,"originId":"5da01abcece3813ad9ba1116","articleId":876,"userId":1924,"content":"楼主 网盘资源地址求更新，感谢","createdAt":1570773692048},{"id":5006,"originId":"5db0fcd1865a9844a301d64d","articleId":876,"userId":685,"content":"[@jyk0011](/user/jyk0011) ts有利有弊，总体来说利大于弊吧","createdAt":1571880145499},{"id":5007,"originId":"5db3e6a0ece3813ad9ba455d","articleId":876,"userId":189,"content":"vue3要出来了，这个是必学的","createdAt":1572071072479},{"id":5008,"originId":"5db1c245865a9844a301da07","articleId":879,"userId":150,"content":"赞","createdAt":1571930693787},{"id":5009,"originId":"5db18a16ece3813ad9ba4062","articleId":880,"userId":21,"content":"巧了，我也刚写了一篇Web Components的文章。还实现了路由，双向绑定，列表渲染，也算是给自己攒了个最佳事件。\r\n其实Web Components很多已经定案，可以用于生产了，估计很多人还不知道。","createdAt":1571916310230},{"id":5010,"originId":"5d82ddce53c75a4136b4b921","articleId":881,"userId":89,"content":"开源了么？","createdAt":1568857550509},{"id":5011,"originId":"5d84216d95464514f7ed85e8","articleId":881,"userId":1547,"content":"有兴趣 可惜没有开源","createdAt":1568940397632},{"id":5012,"originId":"5d85a31e53c75a4136b4c48d","articleId":881,"userId":36,"content":"有意思","createdAt":1569039134664},{"id":5013,"originId":"5d86f3e695464514f7ed8edb","articleId":881,"userId":23,"content":"这个好，我也做了个但是没管理系统，需要在gitlab pipline里手动触发。期待开源","createdAt":1569125350589},{"id":5014,"originId":"5d9bf054ece3813ad9ba052c","articleId":881,"userId":605,"content":"用起来不错","createdAt":1570500692442},{"id":5015,"originId":"5d9ca444ece3813ad9ba0838","articleId":881,"userId":701,"content":"[@Asher-Tan](/user/Asher-Tan) 不同的分支有不同的域名进行测试么？","createdAt":1570546756158},{"id":5016,"originId":"5da72d59865a9844a301bc51","articleId":881,"userId":605,"content":"新添加了WebSSH的功能：https://ops-coffee.cn/s/FHDyvHsh-oO1cn7AXk_4WA\r\n\r\n![20191016.gif](//static.cnodejs.org/Fh1GV3svNgXj9k3d38wFy0EIIYKS)","createdAt":1571237209806},{"id":5017,"originId":"5dad0d0f865a9844a301c8b7","articleId":881,"userId":605,"content":"继续更新，翻了很多源码，解决了上边最后遗留的那个Kubernetes Pod WebSSH窗口大小调整的问题\r\n全网仅有的完整解决方案：https://ops-coffee.cn/s/4jE9hivFG4GmbIA4kKq7Wg","createdAt":1571622159562},{"id":5018,"originId":"5db14210ece3813ad9ba3eef","articleId":881,"userId":769,"content":"可以可以","createdAt":1571897872417},{"id":5019,"originId":"5d9c299aece3813ad9ba0646","articleId":882,"userId":3,"content":"![1.PNG](//static.cnodejs.org/Fn0kQTyW_0Dz9U_LPS4t6F-mi_0g)\r\n![2.PNG](//static.cnodejs.org/FsqbZDei2qJXi1YLOrFV6cjVFbfN)\r\n图挂了。。","createdAt":1570515354387},{"id":5020,"originId":"5d9c2a52865a9844a3019f02","articleId":882,"userId":264,"content":"[@darrenliuwei](/user/darrenliuwei) 已处理","createdAt":1570515538550},{"id":5021,"originId":"5d9c745f865a9844a301a064","articleId":882,"userId":1574,"content":"新创建的error对象本来就带有堆栈信息，try...catch有点多余了。\r\n\r\n// print line number\r\nlet printLineNum = () => {\r\n    console.log('line number : ' + new Error().stack.split('\\n')[1]);\r\n}","createdAt":1570534495381},{"id":5022,"originId":"5d9d8805ece3813ad9ba0a5d","articleId":882,"userId":264,"content":"[@yuanliwei](/user/yuanliwei) 感谢指出","createdAt":1570605061972},{"id":5023,"originId":"5db13d0b865a9844a301d7f5","articleId":882,"userId":20,"content":"mark","createdAt":1571896587480},{"id":5024,"originId":"5dafbbaa865a9844a301d200","articleId":883,"userId":545,"content":"13.0 生命周期只有9个月，坐等 14.x\r\n目前应该用12.x","createdAt":1571797930583},{"id":5025,"originId":"5dafbe91ece3813ad9ba39b7","articleId":883,"userId":1927,"content":"https://medium.com/@nodejs/node-js-12-to-lts-and-node-js-13-is-here-e28d6a4a2bd","createdAt":1571798673598},{"id":5026,"originId":"5dafd421865a9844a301d2e5","articleId":883,"userId":98,"content":"我坚信有生之年能看到Node.js v100.0.0","createdAt":1571804193678},{"id":5027,"originId":"5db08121865a9844a301d5d6","articleId":883,"userId":703,"content":"[@zengming00](/user/zengming00) 不见得，说不定那天心血来潮，从 v13 变成 Node.js v2020,  v2021,  ...","createdAt":1571848481631},{"id":5028,"originId":"5db0f26b865a9844a301d606","articleId":883,"userId":545,"content":"[@zengming00](/user/zengming00)  每年两个版本，固定4月和10月发\r\n","createdAt":1571877483955},{"id":5029,"originId":"5db0fc02ece3813ad9ba3d39","articleId":883,"userId":61,"content":"稳定迭代，不错","createdAt":1571879938632},{"id":5030,"originId":"5db0f947865a9844a301d631","articleId":884,"userId":1928,"content":"🐯~","createdAt":1571879239305},{"id":5031,"originId":"5dafa868ece3813ad9ba3892","articleId":886,"userId":1930,"content":"搞个社区，不难，怎么推广出去，让社区活跃起来，比吃屎还难，程序员常有，那啥不常有啊~","createdAt":1571793000835},{"id":5032,"originId":"5db01085865a9844a301d48d","articleId":886,"userId":501,"content":"不错","createdAt":1571819653769},{"id":5033,"originId":"5db01802ece3813ad9ba3bd7","articleId":886,"userId":150,"content":"\"接口上引了 Apollo 支持 GraphQL\" 这块具体指的是什么呢，不是很理解，望解释下","createdAt":1571821570846},{"id":5034,"originId":"5db028fbece3813ad9ba3c31","articleId":886,"userId":1929,"content":"[@ddzyan](/user/ddzyan) nest的Apollo Server的支持很好，graphql实现起来很简单","createdAt":1571825915632},{"id":5035,"originId":"5a2e44d8d92f2f5b185acd83","articleId":887,"userId":111,"content":"node已经沦为前端工具链，给vue，react什么的打下手","createdAt":1512981720655},{"id":5036,"originId":"5a2e477f8230827a18293616","articleId":887,"userId":1713,"content":" 坐等大佬分析","createdAt":1512982399282},{"id":5037,"originId":"5a2e4c58d92f2f5b185acd86","articleId":887,"userId":1197,"content":"[@yakczh](/user/yakczh)  其实是现在前端要求技能太多了","createdAt":1512983640906},{"id":5038,"originId":"5a2e4e4bd92f2f5b185acd8a","articleId":887,"userId":1254,"content":"node感觉写起来、用起来还是挺爽的,无所不能","createdAt":1512984139144},{"id":5039,"originId":"5a2e57558230827a1829361b","articleId":887,"userId":89,"content":"要点\r\n\r\n- MSSQL。。。用户量太小，兼容也没太多必要，win用户就算了\r\n- MQTT有好多Node现成的实现，作者是Node TC里的大牛，很好\r\n- Restful 几行代码的事儿\r\n\r\n```\r\nvar express = require('express');\r\nvar router = express.Router();\r\n\r\nvar $ = require('../controllers/users_controller');\r\n\r\n\r\n// -- custom\r\n\r\n\r\n/**\r\n * Auto generate RESTful url routes.\r\n *\r\n * URL routes:\r\n *\r\n *  GET    /users[/]        => user.list()\r\n *  GET    /users/new       => user.new()\r\n *  GET    /users/:id       => user.show()\r\n *  GET    /users/:id/edit  => user.edit()\r\n *  POST   /users[/]        => user.create()\r\n *  PATCH  /users/:id       => user.update()\r\n *  DELETE /users/:id       => user.destroy()\r\n *\r\n */\r\n\r\nrouter.get('/new', $.new);  \r\nrouter.get('/:id/edit', $.edit);\r\n\r\nrouter.route('/')\r\n  .get($.list)\r\n  .post($.create);\r\n\r\nrouter.route('/:id')\r\n  .patch($.update)\r\n  .get($.show)\r\n  .delete($.destroy);\r\n\r\n\r\nmodule.exports = router;\r\n```\r\n\r\n- 弱类型有ts，黑不到点上\r\n- 上传有multer，另外上传方式可以按情况处理","createdAt":1512986453209},{"id":5040,"originId":"5a2e8640f15b4f306d2f024b","articleId":887,"userId":1734,"content":"在我看来用node写后端, 很多会js的人很难驾驭这是很正常的事情啊. 就跟用java写web服务和写app一样, 本来就是不同的范畴, 拥有不同的思想.\r\n\r\n弱类型写后端其实是很爽的事情, 只不过要求开发者必须事事都明白自己在做什么, 这样才能写出层次分明, 简洁易维护的代码. 我相信那些像我一样静态语言写了几年再去用node写后端的人都会爽到. (前提是能喜欢起node哈)\r\n\r\n看你用VS2017, VS拥有最好的调试工具, vscode把同样很爽的调试体验带给了node.\r\n\r\n我之前用静态语言的时候用过MSSQL, 现在已经不用了. 现在node连的都是mysql, postgres, mongo.\r\n现在用的sequelize库, 我看是支持MSSQL的, 不知道你用了没.","createdAt":1512998464888},{"id":5041,"originId":"5a2f3211d92f2f5b185acda8","articleId":887,"userId":109,"content":"eggjs+TS","createdAt":1513042449897},{"id":5042,"originId":"5a2f35b2f15b4f306d2f025d","articleId":887,"userId":1932,"content":"ts感觉还是差了一点。不支持运行时检查类型的话，还是不够严谨。","createdAt":1513043378627},{"id":5043,"originId":"5a2f381dd92f2f5b185acdac","articleId":887,"userId":195,"content":"试试这个 > [https://enhancer.io](https://enhancer.io)\r\n看看能否帮你节约时间？","createdAt":1513043997210},{"id":5044,"originId":"5a2f3a0ff15b4f306d2f0261","articleId":887,"userId":1933,"content":"nodejs操作MSSQL 确实没遇上，不过操作mysql，mongodb，redis之类的。。。没遇上什么大坑（当然和公司业务有关）。。","createdAt":1513044495266},{"id":5045,"originId":"5a2f40f6f15b4f306d2f0266","articleId":887,"userId":195,"content":"使用 NodeJS 连 MSSQL 可以用微软官方提供的driver：https://github.com/patriksimek/node-mssql\r\n另外如果 enhancer.io 可以让你只需要打开浏览器写 MSSQL 就能完成企业级应用开发，可以尝试一下。","createdAt":1513046262488},{"id":5046,"originId":"5a2f8be4d92f2f5b185acdcb","articleId":887,"userId":1934,"content":"sequelize连MSSQL一点问题没有（虽然我没用过，但sequelize连mysql很爽）","createdAt":1513065444191},{"id":5047,"originId":"5a2fa3439807389a1809f31e","articleId":887,"userId":1935,"content":"说白了就是工具，用的恰到好处就行[ --采用Cnode VueJs](https://journeynes.com:8080)[ --github地址](https://github.com/wocaatm/vue-cnode)","createdAt":1513071427900},{"id":5048,"originId":"5a30a1ee8230827a182936a6","articleId":887,"userId":1936,"content":"sequelize连MSSQL一点问题没有  +1","createdAt":1513136622982},{"id":5049,"originId":"5a33374bd92f2f5b185aceae","articleId":887,"userId":503,"content":"sequelize 这东西为什么难用。。","createdAt":1513305931949},{"id":5050,"originId":"5a333ab98230827a1829374d","articleId":887,"userId":1937,"content":"[@yefeng2016](/user/yefeng2016)  使用 knexjs","createdAt":1513306809224},{"id":5051,"originId":"5a37b587d1536726354b7ecc","articleId":887,"userId":1938,"content":"[@htoooth](/user/htoooth) 使用bookshelf","createdAt":1513600391285},{"id":5052,"originId":"5a37c0dbd92f2f5b185acfc1","articleId":887,"userId":1939,"content":"[@yefeng2016](/user/yefeng2016) 快使用 sequelize-typescript + sequelize-auto-migrations","createdAt":1513603291644},{"id":5053,"originId":"5db015d7865a9844a301d4bd","articleId":887,"userId":1940,"content":"坐等中...","createdAt":1571821015105},{"id":5054,"originId":"54b46b81edf686411e1b9ce5","articleId":888,"userId":1942,"content":"MARK,以后再用","createdAt":1421110145255},{"id":5055,"originId":"54b4825dedf686411e1b9cf7","articleId":888,"userId":1943,"content":"原来DigitalOcean 比 阿里云便宜……","createdAt":1421115997541},{"id":5056,"originId":"54b60f04edf686411e1b9e8f","articleId":888,"userId":425,"content":"`shadowsocks`服务器端最好用Python的.\r\n\r\n> http://npm.taobao.org/package/shadowsocks\r\nDeprecated; please use Other versions.\r\nMany people are asking why. Here's why.\r\n    https://github.com/clowwindy/shadowsocks-nodejs/issues/35\r\n    https://github.com/joyent/node/issues/5949","createdAt":1421217540850},{"id":5057,"originId":"54be007c514ea9146862ac66","articleId":888,"userId":1944,"content":"shadowsocks 如果不下载客户端，可以翻墙嘛？？","createdAt":1421738108358},{"id":5058,"originId":"54c05ab608db81d71f316263","articleId":888,"userId":1941,"content":"[@berwin](/user/berwin)  你需要用shadowsocks 加密登录才行的。","createdAt":1421892278340},{"id":5059,"originId":"54c0b76ad158a08f2d3c63f8","articleId":888,"userId":1944,"content":"shadowsocks 稳定不？","createdAt":1421916010685},{"id":5060,"originId":"54c1086001d5b2093a30a417","articleId":888,"userId":1941,"content":"[@berwin](/user/berwin) 要看你服务器稳定不稳定啊。","createdAt":1421936736053},{"id":5061,"originId":"54ca2450ef1b48510c27df01","articleId":888,"userId":1945,"content":"一直在用goagent\n 发自 CNodeJs ionic","createdAt":1422533712987},{"id":5062,"originId":"571d4af15a26c4a841ecbc8f","articleId":888,"userId":223,"content":"更新：[中国能用的VPN](https://cnodejs.org/topic/5b101b058a4f51e140d9440c)\r\n\r\n\r\n自己搭建的vpn是不靠谱的，如果你偶尔碰到一个靠谱的，可能只是你运气好。\r\n因为自己搭建的vpn是单ip，而且往往用的是大家都在用来搭建vpn的主机，流量特征明显，ip很容易被屏蔽。\r\n你买主机自己搭建vpn的费用其实和买专业的付费vpn服务差不了多少。\r\n\r\n别用国内付费VPN服务，**Green就是教训**。\r\n别想着“免费”，能用的付费vpn得花钱，不便宜，**便宜的根本没法用**，几十块一年的等于智商税。\r\n**没有100%稳定高速的服务**，特殊时段，即使付费vpn也不能总是“高速稳定”，别指望一年365天一天24小时随时1080p油管。\r\n一线国外付费VPN能保证的是“**较好**”的连通率和速度，不完美，但至少能用google，gmail和可接受的油管速度，这仍是目前最好的方案。\r\n\r\n**国内还能用支付宝买到**的国外付费vpn推荐：\r\n\r\n## [ExpressVPN](https://indx.cc/exp) \r\n\r\n全球148+服务器所在地 / 无限流量 / 多协议，包括openVPN / 一键连接 / 同时3台设备 / 256-bit AES加密 / 支付宝支付 / 支持路由器连接 / 完全IP隐藏 / 零日志 / 全终端覆盖 / 30天无条件退款 / Split tunneling技术 + 浏览器插件，同时访问内外网 / **速度相对最快**\r\n\r\n## [VyprVPN](https://indx.cc/vyr)\r\n\r\n70+自有服务器所在地，200,000+IP地址 / 无限流量 / 多协议，独家混淆协议 / 一键连接 / 同时5台设备 / 支持P2P / 变色龙加密，**连接相对最稳定** / 支付宝支付 / 支持路由器连接 / NAT安全机制 / DNS加密 / 全终端覆盖 / 2年款最大优惠 / 30天无条件退款 / 按程序控制网络技术，同时访问内外网\r\n\r\n## [Nord](https://indx.cc/nrd) - 已不能用，别买\r\n\r\n3400+服务器 / 无限流量 / 支持Onion over vpn / 一键连接 / 同时6台设备 / 支持P2P / 双重加密 / 支付宝支付 / 支持路由器连接 / CyberSec安全技术 / 零日志 / 专业客户端 / 2年款最大优惠 / 随时退款 / 浏览器代理插件，同时访问内外网 / **随时退款**\r\n\r\n不推荐自架，单IP长期很难可靠，除非你想反复切IP（要花钱），可以选IP池比较大的：[Vultr](https://www.vultr.com/?ref=6996621)，但加上换的IP整体成本往往高于付费VPN。\r\n\r\n蓝灯其实也不错，很稳定，但是免费版给的流量太少，想用Pro的朋友，可以用这个优惠码：NQGP7F。","createdAt":1461537521472},{"id":5063,"originId":"571d6eb33f27a7c841bcb589","articleId":888,"userId":1946,"content":"谷歌资助的的开源项目Lattern，有mac,window,android版本，喜欢翻墙的童鞋有福了","createdAt":1461546675912},{"id":5064,"originId":"571d771a3f27a7c841bcb58d","articleId":888,"userId":1947,"content":"mark下","createdAt":1461548826163},{"id":5065,"originId":"571d902935af8a704195f373","articleId":888,"userId":454,"content":" [@muzi131313](/user/muzi131313)  Lantern 是 Google 牵头的？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1461555241578},{"id":5066,"originId":"571e06c835af8a704195f3ae","articleId":888,"userId":1948,"content":"自己搭建过，也用过付费的（经常不稳定、卷钱跑路的也有），后来就一直用shadow，稳定、实惠http://dwz.cn/3crJEI","createdAt":1461585608031},{"id":5067,"originId":"571e1b2c35af8a704195f3bd","articleId":888,"userId":1946,"content":"[@coderfox](/user/coderfox) 这是，[官网](https://github.com/getlantern/lantern) ，[lattern的github](https://getlantern.org )，这个是跳转到的[社区](https://groups.google.com/forum/#!forum/lantern-users-zh)，是在谷歌上的，应该就是谷歌开发的吧。","createdAt":1461590828204},{"id":5068,"originId":"571e2a5b3f27a7c841bcb5f4","articleId":888,"userId":413,"content":" [@muzi131313](/user/muzi131313) 蓝灯卡的很\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1461594715784},{"id":5069,"originId":"5720f3f15a26c4a841ecbe3c","articleId":888,"userId":1946,"content":"[@liygheart](/user/liygheart) 还好吧，至少可以访问youtube，twitter，facebook，wiki，现在用的是20M的联通，感觉还可以；之前去同学那边，网速150k/s左右，然后用蓝灯也没压力啊，看youtube，只是清晰度没那么高","createdAt":1461777393750},{"id":5070,"originId":"5721630935af8a704195f4eb","articleId":888,"userId":632,"content":"我用的搬瓦工+open vpn，19.9美元每年，速度不怎么样，还是一直在用蓝灯","createdAt":1461805833971},{"id":5071,"originId":"57219ac9fa48138c41110ee1","articleId":888,"userId":1949,"content":"四楼居然还建议用Python，Python已经这么慢，用C或者GO的\r\n下面是用Go的教程\r\n[使用Go构建ShadowSocks](http://www.myfreax.com/shi-yong-shadowsockske-xue-shang-wang-gou-jian-qiang-da-de-ti-zi/)","createdAt":1461820105883},{"id":5072,"originId":"57236d5f5a26c4a841ecbefe","articleId":888,"userId":454,"content":"[@muzi131313](/user/muzi131313) 用个 Google Forums 不能说就是 Google 的啊，这个论坛谁都能注册的啊，报道上出了偏差你得负责的啊。","createdAt":1461939551225},{"id":5073,"originId":"57284e0935af8a704195f6bb","articleId":888,"userId":1950,"content":"Removed according to regulations.","createdAt":1462259209569},{"id":5074,"originId":"57285cba3f27a7c841bcb8aa","articleId":888,"userId":1951,"content":"[@wewoor](/user/wewoor) 楼主，你的 datacenter region 选的哪里啊","createdAt":1462262970534},{"id":5075,"originId":"5730a69cabec569f58f1afef","articleId":888,"userId":1946,"content":"[@coderfox](/user/coderfox)  囧 ，我只是说应该，[传送门](url=http://tieba.baidu.com/p/4219947732)，看下这个，说的是蓝灯是谷歌资助的开源项目，最开始有同事介绍这个的时候，好像是说跟谷歌有关的，那这个帖子讲的【谷歌资助】，这个个人感觉还是很靠谱的；另外，我也是听说了，你要是拿来做什么商业类的报道什么的，请恕小弟不能担保法律责任什么的，只是小道消息；","createdAt":1462806172611},{"id":5076,"originId":"5730a70a99e6038058b6a74f","articleId":888,"userId":1946,"content":"[@coderfox](/user/coderfox) 第一个评论已改","createdAt":1462806282551},{"id":5077,"originId":"57353e8cc3e4ef7657ab12bd","articleId":888,"userId":1941,"content":"[@SilenceDN](/user/SilenceDN) 旧金山好像","createdAt":1463107212942},{"id":5078,"originId":"573541ccc3e4ef7657ab12c4","articleId":888,"userId":1947,"content":"唉，如果哪个大虾去把天朝防火墙给侵入就好了，这样费钱而且有时候速度也不是很好","createdAt":1463108044546},{"id":5079,"originId":"5735e5c640b29698539812ba","articleId":888,"userId":454,"content":"[@muzi131313](/user/muzi131313) ……「报道上出了偏差你得负责的啊」只是个梗。","createdAt":1463150022615},{"id":5080,"originId":"573a6d59b507f69e1dd89f3b","articleId":888,"userId":1952,"content":"请问国内的云服务器现在可以翻墙了么？","createdAt":1463446873296},{"id":5081,"originId":"5793f43d4cddcb4326146743","articleId":888,"userId":223,"content":"这次回国亲测，目前的免费服务里面，我自己测得的结果，只有lantern还可用，谈得上使用体验，下载windows包废了我不少劲，下载被打断四次，第五次才勉强下完整了，安装简单，免费版本有700M+的流量，普通查个网页应该足够，但是，别指望100%稳定，现在的付费产品恐怕都没这种东西了，别说免费的。\r\n\r\n收费服务里面，[就是这个](https://www.linkev.com/?a_aid=itlr) ，使用下来的感觉和网上的口碑是接近的，但是并没有传说的那么快，我在机场测试，深夜之前速度不理想，这说明有些网络状况下产品的鲁棒性还需要改进，但是深夜之后，可能是机场的人流下降很多，可以流畅地看youtube视频。\r\n\r\n","createdAt":1469314109623},{"id":5082,"originId":"579426d34cddcb432614674e","articleId":888,"userId":1953,"content":"DO搭建的VPN速度太慢了, 看youtube反正是相当痛苦.","createdAt":1469327059474},{"id":5083,"originId":"58b98b675b904b25651b3b65","articleId":888,"userId":1954,"content":"使用搬瓦工vps，按照题主步骤vpn已搭建成功，使用chrome插件SwitchyOmega进行代理自动切换，目测速度还不错，起码google能上了，一个月有1000G的流量，够用了，哈哈~","createdAt":1488554855878},{"id":5084,"originId":"58c75928e0cfa8974a26129e","articleId":888,"userId":232,"content":"用国外的服务器（VPS），搭建Shadowsocks。服务器最好选里国内近的，日本、香港。如果选美国，用西海岸的。\r\n服务器可以考虑DigitalOcean，Amazon AWS，Google Cloud，搬瓦工等。\r\n如果懒得自己搭建，就用付费的VPN（选国外公司的），可以参考这个VPN测试网站的结果（需科学上网）:\r\nhttps://www.vpndada.com/best-vpns-for-china/ （英文）\r\nhttps://www.vpndada.com/best-vpns-for-china-cn/ (中文）","createdAt":1489459496924},{"id":5085,"originId":"5900031f523b9d0956dada24","articleId":888,"userId":148,"content":"mark","createdAt":1493173023383},{"id":5086,"originId":"5900347c31e8c2bb1c3dce5b","articleId":888,"userId":1849,"content":"好文😁\n\n[来自CNode-Android (≥v≤)o~~](https://github.com/shellljx/CNode-android)","createdAt":1493185660674},{"id":5087,"originId":"590034b7bbaf2f3f569be2b8","articleId":888,"userId":1849,"content":"感觉云影vpn也挺好用的\n\n[来自CNode-Android (≥v≤)o~~](https://github.com/shellljx/CNode-android)","createdAt":1493185719451},{"id":5088,"originId":"59003b28bbaf2f3f569be2bd","articleId":888,"userId":636,"content":"我现在用linode搭建了centOS7 + shadowsocks + kcptun。速度还不错。","createdAt":1493187368969},{"id":5089,"originId":"5900a7f7bbaf2f3f569be309","articleId":888,"userId":1955,"content":"mark一个~","createdAt":1493215223034},{"id":5090,"originId":"590138c59116585a56e20a60","articleId":888,"userId":578,"content":"自己在 AWS上日本节点 虚拟机上搭建的VPN服务器","createdAt":1493252293593},{"id":5091,"originId":"59014a279116585a56e20a67","articleId":888,"userId":1956,"content":"我推荐用vultr，最近降价了，只要15块钱(2.5刀)，我就自己搭了一个ss，日本机房速度最快，112ms\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1493256743642},{"id":5092,"originId":"59014a8e9116585a56e20a69","articleId":888,"userId":218,"content":"何必这么麻烦，之前有人发过免费的 https://gfw.press// （需翻墙）","createdAt":1493256846870},{"id":5093,"originId":"59f50297508fccca5420f329","articleId":888,"userId":449,"content":"mark","createdAt":1509229207186},{"id":5094,"originId":"59f540b93bc022103e741c80","articleId":888,"userId":1957,"content":"现在有啥好用的vps推荐吗？","createdAt":1509245113144},{"id":5095,"originId":"5a216c746190c8912ebacebe","articleId":888,"userId":1958,"content":"还是比较推荐几个搞技术的基友或者朋友众筹搭梯子，这样人均成本低，也不会有被抓的风险。","createdAt":1512139892799},{"id":5096,"originId":"5a2cd4658230827a182935d5","articleId":888,"userId":1959,"content":"[@greatbody](/user/greatbody) 支持下\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1512887397496},{"id":5097,"originId":"5ae7210f02591040485ba988","articleId":888,"userId":229,"content":"术业有专攻，免费的才是最贵的呢呀，购买VPN吧\r\n黄金青蛙的[VyprVPN](https://www.goldenfrog.com/zh/vyprvpn?offer_id=174&aff_id=3008)或者[expressVPN](http://www.linkev.com/?a_fid=clover)\r\n\r\n在中国，更多好用的付费VPN参阅[本文](https://vpnchina.zdhweb.com)，长期更新，你可以根据自己的偏好选择注册所有推荐的vpn，然后根据使用效果，哪个好用就付款哪个。","createdAt":1525096719119},{"id":5098,"originId":"5c3d94593898674067a7f6e7","articleId":888,"userId":1960,"content":"如果想在中国自由使用互联网，那么通过翻墙VPN是能绕过所有限制的最佳方式。\r\n[](https://www.cheapchinavpn.com/%E7%BF%BB%E5%A2%99vpn/)https://www.cheapchinavpn.com/翻墙vpn/","createdAt":1547539545500},{"id":5099,"originId":"5c3dd3263898674067a7f8ab","articleId":888,"userId":209,"content":"使用大陸VPN([](https://www.topchinesevpn.com/%E5%A4%A7%E9%99%B8vpn/)https://www.topchinesevpn.com/大陸vpn/)大多是安全。事实上，它是酒店的常规服务，许多中国大学也使用它们访问像谷歌学者这样的外国学术网站。只是不要用它来发布政府高度可见和关键的内容或出售国家机密。","createdAt":1547555622257},{"id":5100,"originId":"5d1f616dad75d374b58bcb6a","articleId":888,"userId":1961,"content":"你可以同过很多[vpn翻牆](https://www.bestvpn.co/best-vpn-for-china-cn/)，但是要注意免费的vpns，将它们用作你的日志，ip永远不会安全，所以使用付费的VPN。","createdAt":1562337645380},{"id":5101,"originId":"5d27f3008a8bf909209cdac2","articleId":888,"userId":1962,"content":"[自己搭建SSR](https://www.49gm.org/ssr%e8%8a%82%e7%82%b9%e5%88%86%e4%ba%ab%e8%ae%a2%e9%98%85-ssr%e8%b4%a6%e5%8f%b7%e8%b4%ad%e4%b9%b0-ssr%e6%90%ad%e5%bb%ba/)就算了，自己搭建VPN绝对是不靠谱的。\r\n\r\n\r\n中国的翻墙软件目前就两大类：一是VPN（OpenVPN等多种协议），二是加密代理（HTTPS，SOCKS5）。\r\n\r\nVPN分免费的和付费的，绝大多数都有自己的加密和混淆算法，以绕过防火墙侦测。这个东西需要大量技术与人力的投入，所以几乎所有免费VPN和绝大多数小的付费VPN厂商都做不到长期稳定翻墙，因为它们的加密和数据混淆算法在防火墙的DPI（Deep Packet Inspection）面前不堪一击。剩下的VPN厂商都是有技术实力和预算来持续更新算法的。而且，中国国内的VPN大多数都关了，国外大多数VPN官网被墙，也无法购买。剩下的也只有那些重视中国VPN市场的大的厂商才能持续更新中国VPN镜像站了。\r\n\r\n加密代理的技术五花八门，蓝灯，SS，SSR，V2Ray，Brook，WireGuard。目前中国网民里蓝灯和SSR有较多人使用，V2Ray，Brook，WireGuard技术门槛比较高，还很小众。蓝灯作为一个免费+付费的代理翻墙服务，口碑还好。自己搭建的SSR私服非常多，国外VPS服务商那里被封禁的IP也特别多。\r\n\r\n所以现在能推荐的翻墙软件，无非国外的VPN大厂商，还有靠谱一点的SSR节点。但总的来说，付费VPN的长期翻墙能力更有保障，毕竟人家一个公司的人力与技术投入进去的。现在中国能推荐的VPN翻墙软件很少。\r\n[中国VPN翻墙软件推荐](https://cnodejs.org/topic/5b101b058a4f51e140d9440c)","createdAt":1562899200329},{"id":5102,"originId":"5d333b25b2b9222961dac9fd","articleId":888,"userId":1963,"content":"**[express](https://is.gd/prech)可以的**","createdAt":1563638565316},{"id":5103,"originId":"5d6f9c8ca7474a231a588d1c","articleId":888,"userId":1964,"content":"可以看看这个[VPN推荐](https://vpnfast.github.io/)","createdAt":1567595660866},{"id":5104,"originId":"5d834edf95464514f7ed8409","articleId":888,"userId":1965,"content":"之前用谷歌云服务器自建过ssr，使用感觉一般，现在用的付费VPN，强烈建议看下下面的文章。\r\n[2019年最佳翻墙VPN指南](https://www.vpnnice.com/)","createdAt":1568886495157},{"id":5105,"originId":"5dad6cfaece3813ad9ba3272","articleId":888,"userId":208,"content":"DigitalOcean上面的机场太多了，容易被针对，如果只是想稳定翻墙的话，可以直接用付费vpn，这篇[vpn中国](http://qiangwaikan.com/best-vpn-china/)推荐希望对你有帮助","createdAt":1571646714012},{"id":5106,"originId":"5db00a8dece3813ad9ba3b83","articleId":888,"userId":18,"content":"全是广告了。锁帖。","createdAt":1571818125775},{"id":5107,"originId":"5daf1435865a9844a301d066","articleId":890,"userId":21,"content":"是的，这一块挺有意思的k8s的secret和rolebind确实很方便在解决一些问题","createdAt":1571755061117},{"id":5108,"originId":"5dad64f2865a9844a301cacd","articleId":891,"userId":44,"content":"这是转发还是自己写的博文","createdAt":1571644658468},{"id":5109,"originId":"5dad7676ece3813ad9ba32bf","articleId":891,"userId":13,"content":"[@fightAndLearn](/user/fightAndLearn) 自己写的。。。","createdAt":1571649142393},{"id":5110,"originId":"5dad78d8ece3813ad9ba32cf","articleId":891,"userId":13,"content":"[@fightAndLearn](/user/fightAndLearn) 先发布于公众号 “Nodejs技术栈” 现在 Cnode 也会同步下","createdAt":1571649752396},{"id":5111,"originId":"5dae6e40865a9844a301cd59","articleId":891,"userId":1093,"content":"规模没有特别大的情况下，我觉得用我写的node开源队列能实现类似的需求https://github.com/star7th/htq","createdAt":1571712576465},{"id":5112,"originId":"5daeea9b865a9844a301d000","articleId":891,"userId":13,"content":"[@star7th](/user/star7th) 这是基于 RabbitMQ 延迟队列的实现，你上面使用的基于 Redis 的吧，没什么冲突的，都是一种实现，至于规模大小，如果公司的基础设施能支持 RabbitMQ 这种中间件，对于订单、短信发送、轮询等业务场景也是一个不错的方案。","createdAt":1571744411322},{"id":5113,"originId":"5d9ef66e865a9844a301a6c2","articleId":893,"userId":1744,"content":"简单看了一下，其实没必要使用vue框架..","createdAt":1570698862811},{"id":5114,"originId":"5d9f1690865a9844a301a77b","articleId":893,"userId":153,"content":"[@LuckyHH](/user/LuckyHH) 用jquery么？其实我觉得还好了，主要是用起来比较方便，主要是收集数据，太多了😄","createdAt":1570707088343},{"id":5115,"originId":"5da04d7bece3813ad9ba1249","articleId":893,"userId":549,"content":"[https://threejs.org/examples/css3d_periodictable.html](https://threejs.org/examples/css3d_periodictable.html)    又想起来N多年前看到的这个","createdAt":1570786683582},{"id":5116,"originId":"5da28fa4ece3813ad9ba168d","articleId":893,"userId":513,"content":"学习了！ 感谢","createdAt":1570934692083},{"id":5117,"originId":"5da3d159865a9844a301b0a4","articleId":893,"userId":1968,"content":"![image.png](//static.cnodejs.org/FrGDA0keimSi0mdJsbOtnG-j49Im)\r\n\r\n错位了哦，是用的笔记本开发的么","createdAt":1571017049786},{"id":5118,"originId":"5dac2576865a9844a301c7c0","articleId":893,"userId":153,"content":"[@hejiaoshou](/user/hejiaoshou) 是的，后续需要对样式改改，你这是用啥打开了啊","createdAt":1571562870239},{"id":5119,"originId":"5dac25b2ece3813ad9ba2f60","articleId":893,"userId":153,"content":"[@CaanDoll](/user/CaanDoll) 这个太强了吧，后续也写一个？^_^","createdAt":1571562930487},{"id":5120,"originId":"5dae9686865a9844a301ce03","articleId":893,"userId":1968,"content":"[@Rabbitzzc](/user/Rabbitzzc) 普通的24寸pc显示器","createdAt":1571722886296},{"id":5121,"originId":"5da90b56ece3813ad9ba2941","articleId":894,"userId":545,"content":"md 用的有点生硬，可以看看： https://getbootstrapadmin.com/remark/material/base/index.html","createdAt":1571359574202},{"id":5122,"originId":"5da937a6865a9844a301c37b","articleId":894,"userId":636,"content":"showdoc.cc这个域名是你的？","createdAt":1571370918956},{"id":5123,"originId":"5da94855ece3813ad9ba2a5c","articleId":894,"userId":1093,"content":"[@blackmatch](/user/blackmatch) 是的。我是showdoc的作者","createdAt":1571375189557},{"id":5124,"originId":"5dad2f62ece3813ad9ba312e","articleId":894,"userId":636,"content":"[@star7th](/user/star7th) 哈哈哈。世界好小，我刚到一家新公司，发现文档用了showdoc。","createdAt":1571630946750},{"id":5125,"originId":"5dad5648ece3813ad9ba31d4","articleId":894,"userId":1093,"content":"[@blackmatch](/user/blackmatch) 看来蛮多公司使用showdoc。你已经是第N个跟我提起“我们公司也在用showdoc”的人","createdAt":1571640904384},{"id":5126,"originId":"5d9d9f29ece3813ad9ba0acd","articleId":905,"userId":18,"content":"我比较有印象的就是hooks和ts支持了。\r\nhooks我没有很在意，但挺希望ts的支持能跟上。\r\n我目前有个项目在 vue 2 用了 ts，麻烦比帮助大。各种装饰器和class一起用，写法都已经不像vue了。","createdAt":1570610985404},{"id":5127,"originId":"5d9dcfecece3813ad9ba0b8d","articleId":905,"userId":3,"content":"真希望所有公司都不要再支持 IE 浏览器了，太坑了！","createdAt":1570623468095},{"id":5128,"originId":"5d9ea3da865a9844a301a551","articleId":905,"userId":99,"content":"正式版了吗  说实话 vue没有angular好","createdAt":1570677722245},{"id":5129,"originId":"5d9ed052865a9844a301a60e","articleId":905,"userId":755,"content":"TypeScript 友好值得期待, hooks 需要开发者转变组件设计思路","createdAt":1570689106989},{"id":5130,"originId":"5d9ee992ece3813ad9ba0e4f","articleId":905,"userId":22,"content":"最期待的就是 ts 了","createdAt":1570695570894},{"id":5131,"originId":"5da2818aece3813ad9ba165c","articleId":905,"userId":1830,"content":"ts ","createdAt":1570931082765},{"id":5132,"originId":"5da5da8aece3813ad9ba1fac","articleId":905,"userId":110,"content":"[@phonegap100](/user/phonegap100) 没用过angular，能大概分析下优劣吗？\r\nvue3据说执行效率很高","createdAt":1571150474301},{"id":5133,"originId":"5da69780ece3813ad9ba20e8","articleId":905,"userId":1904,"content":"vue和angularjs差别大吗，我是说angularjs","createdAt":1571198848936},{"id":5134,"originId":"5da6a4af865a9844a301ba31","articleId":905,"userId":545,"content":"[@andyhu](/user/andyhu)  小项目用vue 还是不错的，开发效率也高~\r\n大项目的话，还是考虑angular ，思想完善。\r\n执行效率的话，你可以看下  angular9 的 ivy 最小打包体积不到10KB~也不存在 DOM 渲染的性能问题。","createdAt":1571202223689},{"id":5135,"originId":"5da93f16ece3813ad9ba2a37","articleId":905,"userId":110,"content":"[@zuohuadong](/user/zuohuadong) angular + nest 似乎是不错的前后端组合。就是感觉生态圈明显不如react甚至vue。不知道angular生态圈里有没有类似Next.js(Nuxt.js)和Gatsby.js(Gridsome.js)这类的傻瓜框架？","createdAt":1571372822934},{"id":5136,"originId":"5da940bd865a9844a301c39d","articleId":905,"userId":716,"content":"正打算学Gatsby.js，感觉用途很广","createdAt":1571373245212},{"id":5137,"originId":"5da9444cece3813ad9ba2a4f","articleId":905,"userId":151,"content":"TS，没有之一的期待，Vue2中使用TS的后果是范式不统一，很乱","createdAt":1571374156178},{"id":5138,"originId":"5da95267ece3813ad9ba2a9c","articleId":905,"userId":545,"content":"[@andyhu](/user/andyhu)  angular 自带有ssr  \r\nhttps://angular.cn/guide/universal\r\n\r\n类似 Gatsby.js  的没关注~","createdAt":1571377767142},{"id":5139,"originId":"5da95a8fece3813ad9ba2af6","articleId":905,"userId":110,"content":"[@ruyuejun](/user/ruyuejun) 我觉得在前端里写ts感觉怪怪的，有很多问题。不过用composition API的话可能会清晰很多","createdAt":1571379855252},{"id":5140,"originId":"5d75efd1a7474a231a58a3ce","articleId":907,"userId":716,"content":"实践问题总结：\r\n\r\n1， 出于学习目的，从koa2和egg中选了前者，但直接用koa2需要自己去找中间件，找库，找轮子，比较麻烦且难以最优。比如文件上传，日志，session等等，都找了好几个库来试，也不好把握以后扩展是否可以。所以未来做正式项目还得找比较完善的框架，比如nestjs或eggjs之类。\r\n\r\n2， 第三方的ui库，如materail-ui或antd多少比较重，特别是前者，对程序主体影响比较大，所以最好尽量少用，初中期不使用，在后期可以考虑。这样非常灵活，以后可以根据选择不同的ui库。\r\n\r\n3， 小项目不要使用大第三方库。比如界面的语言切换，考察过相关的i18n库，几乎看不懂，太完善，太庞大，太麻烦了，最后仍然使用redux.store简单处理。这点也说明使用完善的框架比使用koa2要强太多了。\r\n\r\n4， 在项目基本完成之后才把前端代码转换为typescript的，所以不全面，且不太地道。从代码查错说效果还是很不错的，以后考虑常用。可能后端才是应该尽量用typescript，毕竟后端出错的危害要远远大过前端出错。以后尽量一开始就使用，后面再改比较繁琐。\r\n\r\n5，有的问题不身临其境就感受不到。比如，更换头像后，头像链接将指向新头像的那个新地址，这个小设计给后续编程造成了极大的麻烦。比如头像链接就无法直接存放在post或comment信息里面，因为用户更换头像后之前的头像链接失效。临时的处置是，数据库先查询post及comment，然后aggregate查询user数据表以获取最新头像链接。vote及lineup也一样麻烦。最后采取的方案是，头像链接地址始终不变，新头像替换旧头像时沿用旧头像的文件名。这可能导致客户端头像不刷新，需要加随机数来帮忙刷新，但最后考虑到这不是高频操作，还是reload客户端更为干净。\r\n\r\n6，有的功能细节意外的多，比如匿名功能，需要考虑：post与comment的匿名，我的匿名与他人匿名的差异，oauth登录用户的匿名，投票与接龙的匿名，投票人及接龙人的匿名，所有情况下鼠标在头像上悬停时的不同提示，此外匿名时的隐匿信息不应该传递到客户端，必须在服务端就过滤好。如此这样，这工作量是出奇的多。这里说明编码之前的产品需求与设计是很重要的，可以发现工作量意外大的一环。","createdAt":1568010193904},{"id":5141,"originId":"5d75fc10d50f572345912e09","articleId":907,"userId":716,"content":"不知搜索功能怎样做。看过 elasticsearch，看得头大，比较麻烦，难道数据库每一步操作都要同步到 elastic 数据库？或者不需实时更新，过一定时间更新一次？这点没搞明白，请知情同学介绍一下。","createdAt":1568013328735},{"id":5142,"originId":"5d760035d50f572345912e45","articleId":907,"userId":545,"content":"[@maxyou](/user/maxyou)  直接数据库里 模糊查询吧，你还没到那个量级","createdAt":1568014389924},{"id":5143,"originId":"5d760462a7474a231a58a4ec","articleId":907,"userId":716,"content":"[@zuohuadong](/user/zuohuadong) 谢谢，我马上去搜 mongodb模糊查询","createdAt":1568015458810},{"id":5144,"originId":"5d77224dd50f572345913311","articleId":907,"userId":1517,"content":"首先，我觉得总结挺好的。\r\n其次，作为一个过来人，我也想说说自己得看法（吹吹水）。\r\n1、 在学习nodejs web过程中，尽可能选择生态比较成熟得，轮子多的web框架，虽然koa2也是很棒得框架，但相对express来说，生态和资料方面还是少一点。这样能更快的让自己做成 成品，而自发激励继续学习。无论选那个轮子，其中的web知识是固定的。比如说 session，csrf等，只是在代码的实现方式不同。\r\n2、第三方 ui 库的话，在有一定html，css，js的基础上。平时做 demo 什么的，可用可不用。特别少的项目也可不用。在小中项目，能用就尽量用（预估能减少自己写代码的行数，直接上，不要浪费时间重新造轮子，而且也利于团队开发。）。选取前尽量先调研（其他第三方库 同理）。\r\n3、typescript 用在后端，也使用过，但觉得还是不够完美，因为它只能 在编译阶段检测，运行时无法检测。 这很难估量运行时的问题。\r\n4、头像链接 应该放到 user 表中，通过联合查询，这应该才是正解。头像更新，替换 链接。","createdAt":1568088653457},{"id":5145,"originId":"5d7a8673d50f572345913ff3","articleId":907,"userId":716,"content":"[@bs32g1038](/user/bs32g1038) \r\n谢谢指导！头像链接这个，更新时更换地址是业界通行做法吗？我需要好好思考一下。我之前是这么写得，后来改成头像地址不变，是因为那个投票功能需要显示投票人头像，可能投票的有好几十人，这个时候根据id去user表查头像地址是不是成本极为高昂？\r\n","createdAt":1568310899888},{"id":5146,"originId":"5d7da8c9a500d514da655612","articleId":907,"userId":1971,"content":"老铁，我有一个疑惑，如果直接打开这个url，也是有内容的http://65.49.193.60:3001/#/detail/10003\r\n我有点不太懂，一般来说，SPA对SEO很不友好，原因就是直接粘贴url到浏览器或者手动刷新页面，会导致报错\r\n所以很困扰我\r\n能否大概说一下，为什么你的页面刷新之后还可以有内容？\r\n你这是做了后端渲染（ssr）还是设置了nginx？或者其他原因？\r\n这是SPA常见的问题，我目前解决不了，学艺不精，见谅","createdAt":1568516297173},{"id":5147,"originId":"5d7ef3d6cac77d1859936e2b","articleId":907,"userId":716,"content":"[@medmin](/user/medmin) 你好，很惭愧，我不太懂后端渲染和seo，所以也就未做任何处理，甚至nginx都没开。\r\n我理解的页面刷新之后的过程是：首先页面从服务器加载，其中有个content组件从url中获取“detail/10003”这个参数，然后据此从服务器获取数据，然后就显示了。\r\n","createdAt":1568601046400},{"id":5148,"originId":"5d8882ad53c75a4136b4cdba","articleId":907,"userId":649,"content":"有个点可以提醒你一下...mongoose定义的model有一些钩子, 比如保存之类的...总之, 你可以在特定的情况下增加或者删除elasticsearch里面的索引\r\n然后头像问题, 关键字: 协商缓存\r\n另外一个建议是后端部分可以看看如果换一个框架, 比如nestjs, 你会怎么写..., 因为koa这个东西本身提供得很少, 容易在router或者model里面写一堆业务逻辑...\r\n本地化我没做过, 优秀!","createdAt":1569227437031},{"id":5149,"originId":"5d899dfb5cbcc579bb9ea677","articleId":907,"userId":716,"content":"[@lzszone](/user/lzszone) 感谢大佬指点！\r\n回头要学下“http协商缓存”。打算年内抽空把后端换成spring，一步到位，然后再考虑。","createdAt":1569299963360},{"id":5150,"originId":"5da94028ece3813ad9ba2a40","articleId":907,"userId":716,"content":"花了70大洋买了域名，开了nginx代理：http://purebbs.com\r\n虽然不一定继续写。","createdAt":1571373096960},{"id":5151,"originId":"5da46eacece3813ad9ba1af2","articleId":908,"userId":111,"content":"现在写js是不是比写java还复杂？ ","createdAt":1571057324747},{"id":5152,"originId":"5da82711865a9844a301c06c","articleId":908,"userId":107,"content":"[@yakczh](/user/yakczh) 复杂吗？基于js + json，那curd写起来简直爽快","createdAt":1571301137034},{"id":5153,"originId":"5da84ca2ece3813ad9ba284e","articleId":908,"userId":195,"content":"### CRUD 直接用 [Enhancer](https://wuyuan.io)","createdAt":1571310754201},{"id":5154,"originId":"5da7f211ece3813ad9ba253b","articleId":909,"userId":1927,"content":"顶一个👍","createdAt":1571287569232},{"id":5155,"originId":"5b6006d92860af042a217a00","articleId":911,"userId":73,"content":"正好却代理IP，我拿走了","createdAt":1533019865062},{"id":5156,"originId":"5b606bc2b71aedfe4c12662c","articleId":911,"userId":1744,"content":"正巧我之前也做了个类似的东西。。看了一下代码，跟你的原理差不多，但是后来我发现，利用返回200状态码并不能筛选出可用的代理。。你可以试一下把你筛选出的代理配置到浏览器里，中转的代理服务器把请求重定向有道首页，有的代理则根本不通。。。后来我想了个解决办法，我构造了一个返回数字1的URL，除了判断200状态码，还判断返回结果是不是1。。。\r\n\r\n然后这是我做的小项目\r\nhttp://httpproxy.docmobile.cn\r\n提供筛选出的可用代理的API\r\nhttp://httpproxy.docmobile.cn/fetchanswer","createdAt":1533045698135},{"id":5157,"originId":"5b611569b71aedfe4c12663b","articleId":911,"userId":1737,"content":"[@LuckyHH](/user/LuckyHH) 确实200不能够判断重定向问题，需获网页详细内容加以验证，已修改","createdAt":1533089129511},{"id":5158,"originId":"5b613fc1792f59ae501bf6bc","articleId":911,"userId":1974,"content":"还没有爬过东西 收藏了。。。","createdAt":1533099969287},{"id":5159,"originId":"5b61925a792f59ae501bf6d4","articleId":911,"userId":636,"content":"参考 [@pretty-foam](/user/pretty-foam) [@LuckyHH](/user/LuckyHH) 两位的思路，我写了一个获取http高匿低延迟代理的爬虫，长这样：\r\n\r\n```js\r\nconst request = require('request');\r\nconst cheerio = require('cheerio');\r\nconst _ = require('lodash');\r\nconst Promise = require('bluebird');\r\n\r\nconst host = 'http://www.xicidaili.com';\r\n\r\nconst parseBody = (body) => {\r\n  const $ = cheerio.load(body);\r\n  const rows = $('#ip_list tbody tr');\r\n  const items = [];\r\n  rows.each((idx, row) => {\r\n    if (idx > 0) {\r\n      const item = {};\r\n      const $row = $(row);\r\n      $row.find('td').each((i, td) => {\r\n        const $td = $(td);\r\n        switch (i) {\r\n          case 1:\r\n            item.ip = $td.text();\r\n            break;\r\n          case 2:\r\n            item.port = $td.text();\r\n            break;\r\n          case 4:\r\n            item.type = $td.text();\r\n            break;\r\n          case 6: // 速度\r\n            item.speed = $td.children('div').attr('title');\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n\r\n      item.speed = parseFloat(item.speed.replace('秒', ''));\r\n\r\n      items.push(item);\r\n    }\r\n  });\r\n\r\n  const results = _.filter(items, (item) => {\r\n    return item.type === '高匿' && item.speed < 0.2;\r\n  });\r\n\r\n  return results;\r\n};\r\n\r\n\r\n\r\nconst getPageData = (page = 1) => {\r\n  console.log(`正在获取第 ${page} 页的数据。。。`);\r\n  const opts = {\r\n    baseUrl: host,\r\n    uri: page > 1 ? `/wt/${page}` : '/wt/',\r\n  };\r\n  const pm = new Promise((resolve, reject) => {\r\n    request(opts, (err, res, body) => {\r\n      if (err) {\r\n        reject(err);\r\n        return;\r\n      }\r\n\r\n      const items = parseBody(body);\r\n      resolve(items);\r\n    });\r\n  });\r\n\r\n  return pm;\r\n};\r\n\r\nconst checkProxy = (purl) => {\r\n  const pm = new Promise((resolve) => {\r\n    request({\r\n      url: 'http://xxx.xxx.xxx.xxx:3000',\t// 自己服务器的API，用于检测代理是否有效\r\n      proxy: purl,\r\n      timeout: 5 * 1000,\t// 过滤掉5秒内无响应的代理\r\n    }, (err, res, body) => {\r\n      if (err) {\r\n        resolve(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const b = JSON.parse(body);\r\n        if (res.statusCode === 200 && b.ok) {\r\n          resolve(true);\r\n        } else {\r\n          resolve(false);\r\n        }\r\n      } catch (error) {\r\n        resolve(false);\r\n      }\r\n    });\r\n  });\r\n\r\n  return pm;\r\n};\r\n\r\nconst getGoodProxies = (page = 1) => {\r\n  const pm = new Promise(async (resolve) => {\r\n    const items = await getPageData(page);\r\n\r\n    const goodProxies = [];\r\n    console.log('正在挑选好的代理。。。');\r\n\r\n    const isGoods = await Promise.map(items, (item) => {\r\n      const purl = `http://${item.ip}:${item.port}`;\r\n      return checkProxy(purl);\r\n    });\r\n\r\n    isGoods.forEach((ok, idx) => {\r\n      if (ok) {\r\n        const item = items[idx];\r\n        goodProxies.push(`http://${item.ip}:${item.port}`);\r\n      }\r\n    });\r\n\r\n    resolve(goodProxies);\r\n  });\r\n\r\n  return pm;\r\n};\r\n\r\nconst run = async () => {\r\n  const proxies = [];\r\n\r\n  let page = 1;\r\n  while(proxies.length < 100) {\r\n    const ps = await getGoodProxies(page);\r\n    proxies.push(...ps);\r\n    console.log(`当前代理总数: ${proxies.length}`);\r\n    page += 1;\r\n  }\r\n\r\n  console.log(proxies);\r\n};\r\n\r\nrun();\r\n```\r\n\r\n可惜，满足我要求的代理很少，爬了100页才找到6个。。。","createdAt":1533121114767},{"id":5160,"originId":"5b63c47558db3ccf66a451a4","articleId":911,"userId":1737,"content":"更新了，这次更靠谱","createdAt":1533265013666},{"id":5161,"originId":"5b6447d5b71aedfe4c12670c","articleId":911,"userId":1975,"content":"我早写了个...可以爬国内好多家代理网站的免费代理","createdAt":1533298645669},{"id":5162,"originId":"5b6480967271129a2f32a76b","articleId":911,"userId":801,"content":"你们爬的国内的免费代理确定能用吗？感觉爬一些国外的质量还凑合。。\r\n\r\n来自✨ [Node.js开源项目精选](https://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1533313174308},{"id":5163,"originId":"5b655f7558db3ccf66a4520c","articleId":911,"userId":1737,"content":"代理数量比较少，这个能不能用还得看具体需求，对我够用","createdAt":1533370229528},{"id":5164,"originId":"5bdbfa0e646a05745b7b776a","articleId":911,"userId":1976,"content":"好东西，应该封一个 npm 包","createdAt":1541143054751},{"id":5165,"originId":"5da6ee18865a9844a301bbb3","articleId":911,"userId":1737,"content":"。。。还能用，更了下0..0","createdAt":1571221016391},{"id":5166,"originId":"5ceb3bd64036f24194cf6bcc","articleId":913,"userId":1197,"content":" 好奇你的性别","createdAt":1558920150814},{"id":5167,"originId":"5ceb61df52ccb64168ba7cf6","articleId":913,"userId":1545,"content":"[@ResJay](/user/ResJay) 跑偏了啊唉","createdAt":1558929887978},{"id":5168,"originId":"5ceb679d52ccb64168ba7d0b","articleId":913,"userId":21,"content":"[@ResJay](/user/ResJay) \r\n楼主：我把你当观众，你却只关心我性别！","createdAt":1558931357206},{"id":5169,"originId":"5cec8a9b4036f24194cf709c","articleId":913,"userId":33,"content":"水溶","createdAt":1559005851249},{"id":5170,"originId":"5cef78dc52ccb64168ba8d28","articleId":913,"userId":1547,"content":"你很优秀","createdAt":1559197916659},{"id":5171,"originId":"5cefef744036f24194cf820a","articleId":913,"userId":1978,"content":"App看起来还不错 但是Flutter不支持DSX 写起来感觉挺恶心的 ..","createdAt":1559228276748},{"id":5172,"originId":"5d74873dd50f5723459127bb","articleId":913,"userId":1726,"content":"推荐一个不错的flutter库的集合网站。https://flutterawesome.com/","createdAt":1567917885831},{"id":5173,"originId":"5d7f53cb95464514f7ed7472","articleId":913,"userId":1979,"content":"先make一下，也想写个APP玩玩\r\n","createdAt":1568625611506},{"id":5174,"originId":"5d7f5dad95464514f7ed74bc","articleId":913,"userId":1312,"content":"[@ResJay](/user/ResJay) [@shuiRong](/user/shuiRong) 应该是妹子吧","createdAt":1568628141387},{"id":5175,"originId":"5d7f82b3cac77d1859937127","articleId":913,"userId":1980,"content":"[@shuiRong](/user/shuiRong) 哪里有 flutter 论坛？","createdAt":1568637619065},{"id":5176,"originId":"5d8a1d60e86cfb0d2a64580b","articleId":913,"userId":1545,"content":"[@tmirun](/user/tmirun) 没有官方的社区。其他的就多了，搜到个第三方的：https://www.flutterdart.cn/ （社区人还不多）\r\n\r\n","createdAt":1569332576176},{"id":5177,"originId":"5d908a9cece3813ad9b9f8d6","articleId":913,"userId":1981,"content":"asdfghjk\r\n","createdAt":1569753756386},{"id":5178,"originId":"5d92aa35865a9844a30194c8","articleId":913,"userId":1982,"content":"赞的","createdAt":1569892917794},{"id":5179,"originId":"5d9b326e865a9844a3019cb4","articleId":913,"userId":111,"content":"dart 和es6 看起来看象啊，实际开发中的主要差别在哪？","createdAt":1570452078117},{"id":5180,"originId":"5d9c2498ece3813ad9ba062a","articleId":913,"userId":1983,"content":"性别是男生好吧，妹子是不会用爱酱做头像的","createdAt":1570514072089},{"id":5181,"originId":"5d9ef5e9ece3813ad9ba0e89","articleId":913,"userId":1984,"content":"Hey you can try with free open source that build on Flutter based on industries standrad. You can check out here: \r\n[](https://www.ionicfirebaseapp.com/products/Flutter-Todo-app)https://www.ionicfirebaseapp.com/products/Flutter-Todo-app","createdAt":1570698729123},{"id":5182,"originId":"5da281a2ece3813ad9ba1661","articleId":913,"userId":1830,"content":"666","createdAt":1570931106504},{"id":5183,"originId":"5da567e0865a9844a301b6d3","articleId":913,"userId":1985,"content":"界面比我那个好看多了，之前由于公司接的项目，好在需求不太复杂，就入手玩了一下，搞了个APP\r\n一直是搞web前端，之前并没有APP经验，RN也没摸过\r\n最开始用的RN，改一个地方编译一下，好卡，后来用flutter，体验很好。\r\n比较糟心的是现在flutter的第三方依赖的生态还不是很完善，有时候会有冲突。。例如扫码。。。从开发APP开始到开发结束，基本Pub上的扫码包都试了一遍。。\r\n唉~不懂开发APP，有点累\r\n","createdAt":1571121120882},{"id":5184,"originId":"5da56005865a9844a301b6af","articleId":914,"userId":150,"content":"https://cnodejs.org/topic/5da554bcece3813ad9ba1d81 能解释下这个啥原因嘛？","createdAt":1571119109368},{"id":5185,"originId":"5d673771dcd8e81121a61c83","articleId":916,"userId":21,"content":"Node.js后端开发除了前端转的多，就是PHP转的多了。很多Java转Node.js总是不情不愿的。","createdAt":1567045489510},{"id":5186,"originId":"5d6737f5dcd8e81121a61c8c","articleId":916,"userId":1987,"content":"两年学习这么多，属实流弊","createdAt":1567045621786},{"id":5187,"originId":"5d673896dcd8e81121a61c90","articleId":916,"userId":1986,"content":"[@zy445566](/user/zy445566) 对的，正所谓文人相轻，使用不同语言的人何尝不是呢？","createdAt":1567045782700},{"id":5188,"originId":"5d673916dcd8e81121a61c97","articleId":916,"userId":1986,"content":"[@lxnxbnq](/user/lxnxbnq) 在有限的精力情况下，深度和广度，两者只能择其一。所以和那些在某一些领域深耕的人相比，还有很大差距。","createdAt":1567045910036},{"id":5189,"originId":"5d674144421846662d9859bf","articleId":916,"userId":148,"content":"牛批。别搞前端了，专注AI吧","createdAt":1567048004766},{"id":5190,"originId":"5d687d0e421846662d985d3a","articleId":916,"userId":1988,"content":"别管学没学，能总结这么多链接 实属牛逼，关键提供出来供大家参考，感谢","createdAt":1567128846968},{"id":5191,"originId":"5d6d054fa7474a231a588464","articleId":916,"userId":501,"content":"优秀","createdAt":1567425871174},{"id":5192,"originId":"5d70704ad50f572345911931","articleId":916,"userId":54,"content":"好东西 收藏","createdAt":1567649866604},{"id":5193,"originId":"5d80b69653c75a4136b4b1c6","articleId":916,"userId":1588,"content":"我滴妈，这是真滴牛批。\r\n![icon_live_huaji_big (2).png](//static.cnodejs.org/FmW6UrULKoKFcfmSG85Pco_ypsw4)","createdAt":1568716438585},{"id":5194,"originId":"5d81c08f53c75a4136b4b41f","articleId":916,"userId":1989,"content":"太厉害了 膜拜下","createdAt":1568784527624},{"id":5195,"originId":"5d81fae853c75a4136b4b66d","articleId":916,"userId":356,"content":"ky\r\n\r\n","createdAt":1568799464176},{"id":5196,"originId":"5d82004e53c75a4136b4b6a5","articleId":916,"userId":1990,"content":"又看到阮一峰大大了。。。","createdAt":1568800846686},{"id":5197,"originId":"5da525f5865a9844a301b560","articleId":916,"userId":1991,"content":"哥，可以介绍node.js的人吗？","createdAt":1571104245102},{"id":5198,"originId":"5da52b23ece3813ad9ba1c9b","articleId":916,"userId":716,"content":"厉害，很好的学习书签","createdAt":1571105571105},{"id":5199,"originId":"5da52e88865a9844a301b5ab","articleId":916,"userId":36,"content":"牛逼(破音.)","createdAt":1571106440356},{"id":5200,"originId":"58824bdd250bf4e2390e9e5a","articleId":917,"userId":89,"content":"https://github.com/i5ting/nodejs-bigpipe-demo  \r\n\r\nfork并修改了https://github.com/lduoduo/bigpipe_demo的代码，主要目的是科普bigpipe，后面会有针对bigpipe的高级玩法","createdAt":1484934109323},{"id":5201,"originId":"58837f181dc8ff8739cbc555","articleId":917,"userId":424,"content":"![Screen Shot 2017-01-21 at 10.31.30 AM.png](//static.cnodejs.org/Ft9ADvBZuo4lkA9ybvkNyjQ9AZY4)\r\n不是很活跃了","createdAt":1485012760887},{"id":5202,"originId":"588385001dc8ff8739cbc557","articleId":917,"userId":89,"content":"[@leapon](/user/leapon) bigpipe是一项技术，而这个bigpipe是node的一个实现，类似于express","createdAt":1485014272385},{"id":5203,"originId":"5887dad55d4612c33919e9de","articleId":917,"userId":434,"content":"这东西早先年大家都玩，这两年感觉走客户端渲染了不太关注这东西了。","createdAt":1485298389347},{"id":5204,"originId":"5887eb55250bf4e2390e9f38","articleId":917,"userId":89,"content":"[@stonephp](/user/stonephp) 中间的几年确实是，但是现在开始流行ssr了，所以还是要挖出来的\r\n\r\n![proxy.png](//static.cnodejs.org/FpAZo4aPQysJyciBvzUCU9uxb-vf)\r\n\r\n这里的Node.js服务\r\n\r\n- 1）对接前端，给前端渲染提供数据\r\n- 2）抽象了model proxy，用于完成各种接口对接\r\n\r\n一般大型网站都会非常复杂，做个了很多版本升级、重构，那么必然会慢慢的向服务化靠拢，无论是SOA还是微服务，都会提供非常多的服务，而且各种协议都有，那么你的前端要怎么处理呢？\r\n\r\n放到前端来说，肯定是不好的，所以比较合理的方式就是在服务和前端直接，增加Node.js作为代理。\r\n\r\n我希望在2017年这个地方能够做的更好\r\n\r\n- 服务组装（rpc）\r\n- bigpipe\r\n- server-side render\r\n","createdAt":1485302613090},{"id":5205,"originId":"58880daf171f3bc843f601cb","articleId":917,"userId":434,"content":"[@i5ting](/user/i5ting) 狼叔确实是布道者，向您学习。我念叨了几年了想好好的维护一个技术blog，每次都找接口拖延了，希望今年能实施。","createdAt":1485311407503},{"id":5206,"originId":"588b020c171f3bc843f601fb","articleId":917,"userId":1992,"content":"我理解这东西就是stream+http分块传输","createdAt":1485505036855},{"id":5207,"originId":"588c29e3171f3bc843f60203","articleId":917,"userId":111,"content":"跟http2有点象啊 , 其实css也可以写到js 里,用一个请求下载下来, 然后浏览器再根据需要append   对于纯文本资源,文本越大,压缩起来越划算,  文件太小的话,压缩反而不划算","createdAt":1485580771802},{"id":5208,"originId":"588c83b1171f3bc843f60207","articleId":917,"userId":89,"content":"[@leaves4j](/user/leaves4j) 对呢","createdAt":1485603761995},{"id":5209,"originId":"588c83c9250bf4e2390e9f8f","articleId":917,"userId":89,"content":"[@yakczh](/user/yakczh) 远着呢，不只是下来，还要考虑浏览器渲染呢","createdAt":1485603785467},{"id":5210,"originId":"5da4334bece3813ad9ba19dd","articleId":917,"userId":1993,"content":"这就是http chunked吧，bigpipe倒是基于chunked实现的，不过感觉这里有点文不对题，标题是bigpipe，正文的代码实例却给的都是chunked。\r\n若是我理解错了，望指正。","createdAt":1571042123125},{"id":5211,"originId":"5da523f7ece3813ad9ba1c45","articleId":917,"userId":89,"content":"[@evagy](/user/evagy) bigpipe的原理是分块传输，你说的没问题的，文章也没问题的\r\n\r\n参考\r\n\r\n- Facebook 创新之 BigPipe：优化页面加载时间 https://www.infoq.cn/article/2010/08/bigpipe-facebook-optimize/\r\n- Nodejs bigpipe demo https://github.com/i5ting/nodejs-bigpipe-demo\r\n","createdAt":1571103735100},{"id":5212,"originId":"5da4484f865a9844a301b37b","articleId":918,"userId":109,"content":"微服务还没搞清楚，serverless 又来了……","createdAt":1571047503352},{"id":5213,"originId":"5da4492a865a9844a301b385","articleId":918,"userId":21,"content":"[@waitingsong](/user/waitingsong) \r\n是啊，现在前后端技术更迭的都快。不过主流还是Paas","createdAt":1571047722851},{"id":5214,"originId":"5da4778bece3813ad9ba1b17","articleId":918,"userId":109,"content":"[@zy445566](/user/zy445566) 学不过来了……","createdAt":1571059595842},{"id":5215,"originId":"5577b576c4e7fbea6e9a33cb","articleId":919,"userId":89,"content":"不错的文章\r\n\r\n [我写过的node调度](http://mp.weixin.qq.com/s?__biz=MzAxMTU0NTc4Nw==&mid=222697939&idx=1&sn=443fa5fde783cfbe6331900dfb3e3c31#rd)\r\n \r\n 一样的思路","createdAt":1433908598612},{"id":5216,"originId":"5577b65fc4e7fbea6e9a33d0","articleId":919,"userId":1,"content":"[@i5ting](/user/i5ting) 其实我更希望实现第二节的内容，毕竟我比较喜欢造轮子。奈何项目进度不允许。","createdAt":1433908831863},{"id":5217,"originId":"5577b848c4e7fbea6e9a33d4","articleId":919,"userId":89,"content":"[@xadillax](/user/xadillax) 借口，哈哈，永远都木有时间","createdAt":1433909320970},{"id":5218,"originId":"5577c26cc4e7fbea6e9a33ee","articleId":919,"userId":18,"content":"如果我来写，我的做法会是这样：\r\n\r\n首先我在 redis 中维护一个 sorted set。score 的值为：YYYYMMDD+HOUR，如 2015061020。当 A 用户邀请了 B 用户之后，我就推算一下 24 小时后，是多少，把 B 用户的值写入 set 中。然后另外起个定时任务，每小时读一次这个 set，读出比当前时间小的 score，批量处理一次。\r\n\r\n请问我这个做法相比文中有哪些不足吗？\r\n\r\n","createdAt":1433911916046},{"id":5219,"originId":"5577c2f7c4e7fbea6e9a33f0","articleId":919,"userId":18,"content":"文中提到的自动过期以及事件提醒等等的功能，无非就是 sql 中的一个 where 语句？ `table_time < current_time`。只是由于使用了 redis，所以要变着法子实现这个功能？","createdAt":1433912055771},{"id":5220,"originId":"5577c907c4e7fbea6e9a33f7","articleId":919,"userId":470,"content":"请问 subscribeKey  在哪儿订阅的","createdAt":1433913607218},{"id":5221,"originId":"5577ca13c4e7fbea6e9a33f9","articleId":919,"userId":1631,"content":"赞","createdAt":1433913875939},{"id":5222,"originId":"5577d7b8c4e7fbea6e9a3418","articleId":919,"userId":1,"content":"[@alsotang](/user/alsotang) 不同点在于一个是主动轮询，一个是被动接收消息。\r\n\r\nPull 和 Push 的区别——当前系统（除去外部依赖不谈）通常被动接收的效率比轮询高。这就是为什么网络通信有那么多方法，[epoll 和 IOCP](http://blog.codingnow.com/2006/04/iocp_kqueue_epoll.html) 这类效率高点的原因了。\r\n\r\n> 以陈榕的说法讲，这叫鬼子进村策略。一遍遍的询问“鬼子进村了吗？”，“鬼子进村了吗？”... 大量的 cpu 时间都耗了进去。使用 kqueue 这些，变成了派一些个人去站岗，鬼子来了就可以拿到通知，效率自然高了许多。\r\n\r\n以及考虑到可扩展性，时间不一定是二十四小时，任务也有很多，并且不是说一个小时跑一次脚本的那种。如果是这样的话 Cron 足矣。","createdAt":1433917368298},{"id":5223,"originId":"5577d8b0c4e7fbea6e9a341a","articleId":919,"userId":1,"content":"[@alsotang](/user/alsotang) 哦看错了，你是脚本形式。我最开始也是考虑到脚本。但是考虑到任务的可扩展性，有很多任务只是要到点处理，而不是说到点之后一个小时内一次性批量处理。\r\n\r\n应用场景还是有所不同的。","createdAt":1433917616532},{"id":5224,"originId":"5577de35c4e7fbea6e9a342e","articleId":919,"userId":18,"content":"[@xadillax](/user/xadillax) \r\n1. 在这个地方，你觉得被动接收消息的效率比主动轮询高？效率怎么比？性能？CPU 占用，内存占用？我的方案至少还有的优势是【批量处理】。\r\n2. 考虑到可拓展性，我方案中的 score 也可以细到毫秒粒度。你所说的到点处理，最终还是受时间粒度所限。一般这类可以延迟执行的任务，到秒级别的时间粒度也够用了吧？我的方案可以按秒级别来轮询 redis。与通过事件监听相比，两者性能我认为相当。\r\n\r\n我也不一定要用脚本形式，这个脚本可以写进 app 中，也可以单独提出来。Node 在 IO 上是非阻塞的，所以放哪里都差不多。但从解耦的角度来，app 负责写入任务，脚本负责处理任务，这样的架构我认为更好。\r\n\r\n","createdAt":1433919029546},{"id":5225,"originId":"5577de5ac4e7fbea6e9a3430","articleId":919,"userId":18,"content":"文章中的方案，复杂度比我的方案高了一个量级。是否真的这个必要？","createdAt":1433919066416},{"id":5226,"originId":"5577e266c4e7fbea6e9a3449","articleId":919,"userId":1640,"content":"楼主holy high 学习学习","createdAt":1433920102704},{"id":5227,"originId":"5577e846c4e7fbea6e9a3468","articleId":919,"userId":1,"content":"[@alsotang](/user/alsotang) 我之前看错了，你的是脚本形式的，我有回复的。\r\n\r\n这两种方案是没有可比性的，我的任务系统也是独立的，并不是合在 app 里面的。只是面临的需求不同而已。","createdAt":1433921606262},{"id":5228,"originId":"5577e8c6c4e7fbea6e9a346a","articleId":919,"userId":1,"content":"[@alsotang](/user/alsotang) 我在文章一开始就已经提到脚本的方法了，实际上就是 `Cron` 大法，并且在一开始就说明了需求问题被我弃用了这个方法，转而将文章的重点放到 Redis 的过期事件当中。","createdAt":1433921734012},{"id":5229,"originId":"5577e98fc4e7fbea6e9a346c","articleId":919,"userId":1,"content":"[@alsotang](/user/alsotang) 粒度是小时的方法可以类比为我在序中的 Cron 大法。\r\n\r\n而你说的把粒度调到秒的时候，就是我文章中的第二节的方法，本来是想用 C++ 来搞最小堆放在任务系统内部，这样还省了三方依赖的 IO 损耗。\r\n\r\n只不过最后一种方法才是我要介绍的。","createdAt":1433921935574},{"id":5230,"originId":"5577f87cc4e7fbea6e9a348f","articleId":919,"userId":1994,"content":"好高级的样子","createdAt":1433925756153},{"id":5231,"originId":"5578f1efe3cc2f192486a963","articleId":919,"userId":1995,"content":"最近也在做类似的东西, 批量定时任务 + 精确到秒, 不过我是拿 ruby 写得, 思路跟 [@alsotang](/user/alsotang)  基本一致.\r\n\r\n定时任务连 redis 都没放, 直接放 MySQL.\r\n\r\n个人的想法是, 降低复杂度 + 可扩展性最重要, 性能够用就好. 过早优化是万恶之源, 对不?","createdAt":1433989615765},{"id":5232,"originId":"5578f2a0e3cc2f192486a966","articleId":919,"userId":1,"content":"[@42thcoder](/user/42thcoder) 嗯，说的极是。我上面也是提供了三种解决方案，你做的跟我的第二种方法类似。我只是在循序渐进介绍可能的设计方案。","createdAt":1433989792738},{"id":5233,"originId":"5578f795e3cc2f192486a96c","articleId":919,"userId":18,"content":"[@42thcoder](/user/42thcoder)  [@xadillax](/user/xadillax) 后来你们发送短信的实际需求是用的哪种方案。。？","createdAt":1433991061030},{"id":5234,"originId":"5578fbdae3cc2f192486a974","articleId":919,"userId":1,"content":"[@alsotang](/user/alsotang) -。 - 短信只是其中一种需求啦，总之这是一个通用的类似的定时任务方案。","createdAt":1433992154152},{"id":5235,"originId":"55791127e3cc2f192486a9ab","articleId":919,"userId":1862,"content":"其实rabbitmq也不麻烦，应该还要容易一些","createdAt":1433997607800},{"id":5236,"originId":"557a971d16839d2d5393619a","articleId":919,"userId":901,"content":"一个简单的事情，被你说得好复杂。 主要是使用到了 这个功能吧  http://redisdoc.com/topic/notification.html\r\n\r\n我的理解就是，\r\n1. 任务来了，\r\n2 写入redis\r\n3. 加上键值过期监听\r\n4. 监听到过期，任务处理","createdAt":1434097437807},{"id":5237,"originId":"557a9a8516839d2d539361a7","articleId":919,"userId":1791,"content":"蒟蒻。。。。","createdAt":1434098309205},{"id":5238,"originId":"557a9bd416839d2d539361ab","articleId":919,"userId":1,"content":"[@shanelau](/user/shanelau) -。 - 总得凑字数不是。而且前面的两种方法也是可以借鉴的。","createdAt":1434098644495},{"id":5239,"originId":"557a9be716839d2d539361ad","articleId":919,"userId":1,"content":"[@fish](/user/fish) 对，蒟蒻就是本菜。","createdAt":1434098663935},{"id":5240,"originId":"568f53533b33070b66270953","articleId":919,"userId":1996,"content":"不错，准备在事件回调url返回非2XX，后续重试的时候用这个实现，应该靠谱吧","createdAt":1452233555957},{"id":5241,"originId":"56908d193b33070b66270989","articleId":919,"userId":1997,"content":"mark","createdAt":1452313881766},{"id":5242,"originId":"56bc3c6e24b0c1ec628ff275","articleId":919,"userId":1998,"content":"很棒的贴\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1455176814269},{"id":5243,"originId":"56bcaecd26d02fc6626bb548","articleId":919,"userId":456,"content":"mark","createdAt":1455206093349},{"id":5244,"originId":"56bde1e271204e03637a38b7","articleId":919,"userId":1999,"content":"Redis本身的key过期通知不是准时的，受制于Redis本身的过期算法（具体的算法就不详述了）。","createdAt":1455284706758},{"id":5245,"originId":"56c11c7426d02fc6626bb5a4","articleId":919,"userId":1862,"content":"http://www.rabbitmq.com/dlx.html","createdAt":1455496308914},{"id":5246,"originId":"56c15e0a26d02fc6626bb5ca","articleId":919,"userId":892,"content":"死月大神又写了一篇我看不懂的文章，收藏先！🙊","createdAt":1455513098036},{"id":5247,"originId":"56c184f624b0c1ec628ff2e0","articleId":919,"userId":1,"content":"[@think2011](/user/think2011) 这坟挖的 -。 -","createdAt":1455523062469},{"id":5248,"originId":"56c18de971204e03637a3904","articleId":919,"userId":215,"content":"mark","createdAt":1455525353070},{"id":5249,"originId":"56c30e37db16d3343df34ab8","articleId":919,"userId":319,"content":"mark","createdAt":1455623735262},{"id":5250,"originId":"56cbb76f66c88b5e490260b6","articleId":919,"userId":1713,"content":"mk","createdAt":1456191343787},{"id":5251,"originId":"56f743f53291db186f1a7c0c","articleId":919,"userId":693,"content":"把键值message存到键值名中，如果message这对象很大，岂不是很占用redis键值名空间吗？","createdAt":1459045365181},{"id":5252,"originId":"56f74e429753c3386fd24f5d","articleId":919,"userId":12,"content":"楼主现在还在用着这个方案么？万一redis挂了怎么办？\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1459048002322},{"id":5253,"originId":"56f8a15532c4bdf531357295","articleId":919,"userId":1,"content":"[@fengmk2](/user/fengmk2) -。 - 那是前任公司的方案，现在不知道还用不用着。\r\n\r\n但是 redis 虽然是内存数据库，不过也有持久化（备份）吧？挂了之后重启的确是有可能丢失小部分数据，不过主要我之前的场景是允许丢失的。\r\n\r\n其实我本来是想自己做一个定时 callback 的系统，专门接受外来的定时设置，做好持久化和备份等等，然后时间到就通知这些外部系统——只不过小公司你懂的（其实大公司应该也差不多吧），不会有这么多资源、时间和精力提供给你。","createdAt":1459134805905},{"id":5254,"originId":"5acb0b7596f344940fbbaea6","articleId":919,"userId":2000,"content":"不是挖坟，最近做项目我也用到了redis的过期键消息通知，条件是这样的，用户扫码输入信息后，1分钟开始指导用户做另一个事，然后在过2分钟出一个结果，结束后，另一个用户继续填写，继续这种操作，同时同一时刻也会有很多个这个用户扫码完成这个任务，接着下一组，我的涉及就是用户填写信息后设置一个1分钟过期键，然后在设置一个3分钟的过期键去处理。\r\n关键有一个问题就是，测试2000组，遇到了大概3次过期键丢失的现象。有没有更好的方案去解决","createdAt":1523256181681},{"id":5255,"originId":"5da4345eece3813ad9ba19e1","articleId":919,"userId":2001,"content":"挖坟，这俩天准备搞一个 **分布式** 定时任务系统，场景需求与楼主描述的差不多，\r\n\r\n* 楼主这个 Keyspace Notifications 方式挺好的，\r\n* 还找到一种基于 redis 的 [sort set](https://redis.io/topics/data-types#sorted-sets) + Lua脚本；[bull](https://github.com/OptimalBits/bull) 也是这种方案\r\n\r\n但我 **不准备用 redis** ，前面说了从“**高可用**”、“**可扩展**”角度出发，还是搭配用 **zookeeper** 来下发 crontab 语法的任务，定时监听；\r\n当然，不是 一个 leader 执行，由于“**一致性**”、“**顺序性**”也是 zk 的特点，故还支持任务分片执行；\r\n要执行的作业，让客户端去做，客户端用 K8S 部署（deployment.yml）；执行的客户端做好健康状况与任务状态的同步（方便故障转移），那就差不多了。 \r\n先挖个坑～\r\n","createdAt":1571042398713},{"id":5256,"originId":"5d9d977dece3813ad9ba0aa4","articleId":921,"userId":2003,"content":"实测可以嘛？？？这个感觉很有意思啊","createdAt":1570609021669},{"id":5257,"originId":"5da058c6ece3813ad9ba1275","articleId":921,"userId":1132,"content":"[@quanpf2481](/user/quanpf2481) 是可以用的，收集消息还是很方便的","createdAt":1570789574961},{"id":5258,"originId":"5da14395865a9844a301ac3e","articleId":921,"userId":2003,"content":"[@pchook](/user/pchook) 我看代码好像还不是很完整，现在可以跑起来了嘛，需要什么环境跑起来呢","createdAt":1570849685468},{"id":5259,"originId":"5da2843aece3813ad9ba1675","articleId":921,"userId":1132,"content":"[@quanpf2481](/user/quanpf2481) \r\n现在已经很稳定了，到这里下载apiServer然后解压运行就可以了，就自动开启http服务了。\r\nhttps://github.com/pchook/WechatHttpApiWeb/releases\r\nhttp api接口文档可以看这个\r\nhttps://pchook.github.io/WechatHttpApiWeb/\r\n调用的代码是还不完整，自己用node进行http请求就可以了\r\n基本收发消息很方便，已经可以满足大部分需求了\r\n期待你写一个node调用的完整代码","createdAt":1570931770241},{"id":5260,"originId":"5da3c0f7ece3813ad9ba1786","articleId":921,"userId":2003,"content":"[@pchook](/user/pchook) 楼主那边是用在什么场景呢？？？还是说有特殊的行业需要这个，我这边也是需要这样的使用情况的","createdAt":1571012855789},{"id":5261,"originId":"599e3d1df36051a45246c2d0","articleId":923,"userId":466,"content":"感谢。\r\n但是呢，话说回来，免费是最贵的，要花大量时间来甄别优劣","createdAt":1503542557965},{"id":5262,"originId":"599e5938f36051a45246c2df","articleId":923,"userId":44,"content":"感谢。\r\n","createdAt":1503549752898},{"id":5263,"originId":"599e5a62f36051a45246c2e1","articleId":923,"userId":2004,"content":"Library Genesis 无压力。","createdAt":1503550050987},{"id":5264,"originId":"599e802dbae6f2ed6f7e4ccb","articleId":923,"userId":24,"content":"node js 中的 一起学Koa 链接404了\r\nReact.js 中文文档 打开是私服发布网站 \r\nZepto.js 中文文档  网站打不开\r\nHello Sea.js  网站域名过期\r\n","createdAt":1503559725262},{"id":5265,"originId":"599ee9424e3c4e5a7021b3e5","articleId":923,"userId":1843,"content":"感谢\r\n","createdAt":1503586626382},{"id":5266,"originId":"599ff359bae6f2ed6f7e4d66","articleId":923,"userId":2005,"content":"mark","createdAt":1503654745364},{"id":5267,"originId":"59a3abd0bc6d9537081288c7","articleId":923,"userId":319,"content":"pgsql不错收藏了","createdAt":1503898576395},{"id":5268,"originId":"59a3b280d97b7e23082427d2","articleId":923,"userId":387,"content":"mark","createdAt":1503900288534},{"id":5269,"originId":"59a52f626c90694908d814a2","articleId":923,"userId":146,"content":"这一本本的，真要看完也能看出个名堂了~顶！","createdAt":1503997794499},{"id":5270,"originId":"59a72b2bd97b7e23082428f0","articleId":923,"userId":313,"content":"mark\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1504127787258},{"id":5271,"originId":"5da0b541865a9844a301ab8d","articleId":923,"userId":2006,"content":"牛批","createdAt":1570813249710},{"id":5272,"originId":"5ba241c28f5b0c1c59ea0ff7","articleId":924,"userId":1843,"content":"这图片大成这样。。。 各位还是去我git上看看吧","createdAt":1537360322542},{"id":5273,"originId":"5ba31b888f5b0c1c59ea1012","articleId":924,"userId":121,"content":"赞，后台怎么没用egg😁","createdAt":1537416072690},{"id":5274,"originId":"5ba3434037a6965f59051b3e","articleId":924,"userId":1758,"content":"老哥，666，看到你用的是mysql感到很欣慰，让我知道我不是一个人在战斗","createdAt":1537426240086},{"id":5275,"originId":"5ba344559545eaf107b9c4ba","articleId":924,"userId":1843,"content":"[@ZQun](/user/ZQun) 这个项目太小了 koa 轻量点","createdAt":1537426517718},{"id":5276,"originId":"5ba344b09545eaf107b9c4bc","articleId":924,"userId":1843,"content":"[@1134506391](/user/1134506391) 有订单的话 还是mysql好点 毕竟有事务","createdAt":1537426608580},{"id":5277,"originId":"5ba46c8615e4fd1923f48978","articleId":924,"userId":43,"content":"mysql在生产环境用哪个版本比较多？","createdAt":1537502342971},{"id":5278,"originId":"5ba494a815e4fd1923f48980","articleId":924,"userId":545,"content":"[@1134506391](/user/1134506391)  postgresql 了解下？ 最先进的开源数据库～","createdAt":1537512616605},{"id":5279,"originId":"5da0b4ffece3813ad9ba12f8","articleId":924,"userId":2006,"content":"楼主你好，二维码已经过期了，请问现在如何进群呢？谢谢","createdAt":1570813183735},{"id":5280,"originId":"5d9c8e3bece3813ad9ba07ff","articleId":925,"userId":2009,"content":"算我一个","createdAt":1570541115244},{"id":5281,"originId":"5d9d5ba1ece3813ad9ba09a4","articleId":925,"userId":2010,"content":"+1","createdAt":1570593697387},{"id":5282,"originId":"5d9d84f6ece3813ad9ba0a4c","articleId":925,"userId":50,"content":"太棒了，小工具箱又可以续一年了","createdAt":1570604278980},{"id":5283,"originId":"5d9d8541865a9844a301a2d1","articleId":925,"userId":50,"content":"[@DuJiming](/user/DuJiming) 难受，老用户不能优惠","createdAt":1570604353283},{"id":5284,"originId":"5da05884ece3813ad9ba126f","articleId":925,"userId":1925,"content":"有没有小伙伴一起，https://www.aliyun.com/acts/hi-group-buying-share?ptCode=E9AE7F22F7D4FC4E930E3460641881D789B9F59A2D8E8A59&activityId=3&share_source=copy_link&source=5176.11533457&userCode=wbqjs7bw&type=copy","createdAt":1570789508935},{"id":5285,"originId":"5d9f0dbaece3813ad9ba0eff","articleId":927,"userId":1737,"content":"目前只能更新服务器的静态资源。更新node项目代码，以及重启还在设计中。。。","createdAt":1570704826053},{"id":5286,"originId":"5d9f36a5ece3813ad9ba0f78","articleId":927,"userId":716,"content":"此图片来自QQ空间，未经允许不可引用","createdAt":1570715301909},{"id":5287,"originId":"5d9f38eeece3813ad9ba0f84","articleId":927,"userId":108,"content":"很棒\r\n\r\n但是这就需要中心托管平台，个人倾向于在 CI 阶段构建而不是 webhook，不是因为啥，怕麻烦\r\n\r\n所以我写了这么个工具 [https://github.com/axetroy/s4](https://github.com/axetroy/s4)，在 CI 阶段完成阶段就可以部署了\r\n\r\n原理就是使用 SSH + SFTP 协议完成远程操作，大大解放了我的双手\r\n\r\n配置文件写法类似 `Docker`，基本上能满足各种奇奇怪怪的部署需求了\r\n\r\n如果好用点个 star [笔芯]","createdAt":1570715886906},{"id":5288,"originId":"5bcc8e4537a6965f59052427","articleId":929,"userId":2013,"content":"这么多","createdAt":1540132421244},{"id":5289,"originId":"5bd9ad4204de603bdb448391","articleId":929,"userId":805,"content":"mark","createdAt":1540992322445},{"id":5290,"originId":"5be1a40b646a05745b7b9038","articleId":929,"userId":798,"content":"666","createdAt":1541514251906},{"id":5291,"originId":"5bf2c26ae6481c5709f5d4c0","articleId":929,"userId":809,"content":"大多数都懂了","createdAt":1542636138766},{"id":5292,"originId":"5bf2d89fbe1b120abac5af62","articleId":929,"userId":2014,"content":"感谢楼主的分享，留博客互相学习\r\n[http://blog.w3cr.com](http://blog.w3cr.com)","createdAt":1542641823657},{"id":5293,"originId":"5c0741dfd3b8ab334e8dade2","articleId":929,"userId":805,"content":"学习一下","createdAt":1543979487402},{"id":5294,"originId":"5c1c40aa3898674067a76a4e","articleId":929,"userId":124,"content":"是免费的吗","createdAt":1545355434586},{"id":5295,"originId":"5c34a7555bf06c5e7e3f2cf2","articleId":929,"userId":1661,"content":"mark","createdAt":1546954581315},{"id":5296,"originId":"5c491eb26955112b9943841c","articleId":929,"userId":828,"content":"看看，挺多挺全的","createdAt":1548295858002},{"id":5297,"originId":"5c499b213b948a2b4ab713d4","articleId":929,"userId":2015,"content":"mark\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1548327713365},{"id":5298,"originId":"5c4a82adf9075c1ef7137f66","articleId":929,"userId":2016,"content":"看到.avi格式 莫名的兴奋","createdAt":1548386989472},{"id":5299,"originId":"5c77f7487f3b3d501369d225","articleId":929,"userId":805,"content":"[@0f0](/user/0f0) 现在应该是mp4格式居多","createdAt":1551365960813},{"id":5300,"originId":"5c963f7dfd41137eb7660d54","articleId":929,"userId":798,"content":"好东西，大家齐分享","createdAt":1553350525306},{"id":5301,"originId":"5cb67ed737faec0ce1d028d6","articleId":929,"userId":805,"content":"mark","createdAt":1555463895841},{"id":5302,"originId":"5cd5962ee57aac76fed2969d","articleId":929,"userId":798,"content":"[@0f0](/user/0f0) 感觉你在开车","createdAt":1557501486977},{"id":5303,"originId":"5cf28ec995fcc914aa26535f","articleId":929,"userId":804,"content":"感谢各位支持","createdAt":1559400137369},{"id":5304,"originId":"5d1765b634bca667bc6e3eae","articleId":929,"userId":1661,"content":"先入门，再实战","createdAt":1561814454773},{"id":5305,"originId":"5d6e6af1d50f5723459113d2","articleId":929,"userId":804,"content":"常回来看看","createdAt":1567517425357},{"id":5306,"originId":"5d9ca026ece3813ad9ba082c","articleId":929,"userId":790,"content":"我实践中了","createdAt":1570545702702},{"id":5307,"originId":"5d9c43a3865a9844a3019f72","articleId":931,"userId":158,"content":"👍赞一个","createdAt":1570522019140},{"id":5308,"originId":"5d9c284b865a9844a3019eeb","articleId":932,"userId":264,"content":"https://cnodejs.org/topic/5d9c2794865a9844a3019ee5\r\n一样性质的工具","createdAt":1570515019936},{"id":5309,"originId":"5c74ad20ab86b86ddf6b2d95","articleId":933,"userId":568,"content":"写代码这么爽的事情，还有人用来看小说？？\r\n","createdAt":1551150368512},{"id":5310,"originId":"5c7506efa667ed6d807b9471","articleId":933,"userId":2018,"content":"上班期间你还有时间看小说😂\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1551173359419},{"id":5311,"originId":"5c7512e0a667ed6d807b94b9","articleId":933,"userId":1837,"content":"果然是摸鱼高手👍","createdAt":1551176416180},{"id":5312,"originId":"5d8dac8588dc043ab1b68c06","articleId":933,"userId":1683,"content":"[@CNBlackJ](/user/CNBlackJ) 哈哈 ：）","createdAt":1569565829914},{"id":5313,"originId":"5d8dc0a488dc043ab1b68ca8","articleId":933,"userId":1208,"content":"会玩😂","createdAt":1569570980533},{"id":5314,"originId":"5d9aa2ca865a9844a3019c20","articleId":933,"userId":652,"content":"会玩","createdAt":1570415306036},{"id":5315,"originId":"5d94b17c865a9844a301967c","articleId":936,"userId":1926,"content":"宝塔服务器面板，一键全能部署及管理，送你3188元礼包 [点我领取](https://www.bt.cn/?invite_code=MV9pd2R2bG4=)\r\n这个太适合新手了","createdAt":1570025852466},{"id":5316,"originId":"5d94cf82865a9844a30196ab","articleId":936,"userId":3,"content":"![捕获.PNG](//static.cnodejs.org/FjGYKqPrXpWU1dflCEKF_y5s2K1h)","createdAt":1570033538659},{"id":5317,"originId":"5d9553ab865a9844a30196d1","articleId":936,"userId":1926,"content":"[@darrenliuwei](/user/darrenliuwei) 可以访问啊","createdAt":1570067371555},{"id":5318,"originId":"5d955ef7ece3813ad9b9fe86","articleId":936,"userId":3,"content":"[@yangcecode](/user/yangcecode) 我又试了下，得在网址前面加上 www 才能访问，你主题里网址写错了，需要加 www","createdAt":1570070263587},{"id":5319,"originId":"5d955f74865a9844a30196ed","articleId":936,"userId":3,"content":"[@yangcecode](/user/yangcecode) 你现在在学 laravel 吗？和那个教程好像啊","createdAt":1570070388900},{"id":5320,"originId":"5d95a206865a9844a301974e","articleId":936,"userId":1926,"content":"[@darrenliuwei](/user/darrenliuwei) 感觉用php写网站也挺好玩的","createdAt":1570087430996},{"id":5321,"originId":"5d886c1b95464514f7ed93ec","articleId":938,"userId":189,"content":"Egg.js和Nest.js都是非常优秀的Nodejs框架。Egg.js基于Koa，Nest.js默认基于Express，nest也可以基于其他框架.\r\n\r\nEgg.js文档相比Nestjs优秀很多\r\n\r\n面向对象方面Nestjs优于Egg.js，Nestjs基于TypeScript， 如果你会angular或者java学习Nestjs非常容易\r\n\r\n\r\n我目前还在踩坑nestjs   还没有商用 国内egg.js多一些\r\n\r\n","createdAt":1569221659075},{"id":5322,"originId":"5d886d9195464514f7ed9413","articleId":938,"userId":191,"content":"总体来说现在国内还是egg.js用的人多，你可以看看这个帖子 https://cnodejs.org/topic/5b7ac9c7c52ad1482eb940bf\r\n\r\nnest关注的人比egg多一些","createdAt":1569222033500},{"id":5323,"originId":"5d88734495464514f7ed9441","articleId":938,"userId":545,"content":"[@xuemeifenglin](/user/xuemeifenglin)  国内egg 一直不温不火的， 比 nest.js 早出一年，现在 nest 每周下载量是 egg 20倍以上了~ （统计来源于npm）","createdAt":1569223492772},{"id":5324,"originId":"5d8961dd95464514f7ed96f1","articleId":938,"userId":99,"content":"[@zuohuadong](/user/zuohuadong) nest下载量多，但是感觉国内还是没有egg用的人多","createdAt":1569284573062},{"id":5325,"originId":"5d8965ef53c75a4136b4d021","articleId":938,"userId":545,"content":"[@phonegap100](/user/phonegap100)  在国内也是刚开始，2年内会多的~","createdAt":1569285615118},{"id":5326,"originId":"5d9150d1865a9844a3019201","articleId":938,"userId":189,"content":"找到一个nestjs 教程   https://www.bilibili.com/video/av68935258","createdAt":1569804497161},{"id":5327,"originId":"5d921e8fece3813ad9b9fc1c","articleId":938,"userId":701,"content":"https://www.bilibili.com/video/av66475543/?p=4 这个挺好的","createdAt":1569857167866},{"id":5328,"originId":"5d917118865a9844a301929c","articleId":939,"userId":2021,"content":"👏不错，很简洁，不过有一点就是，可能web的这个形式不太方便\r\n顺便提一下，我做了一个社区 [趣技](https://www.e7fe.com) 希望能加入一起玩耍，或者可以加个微信好友交流一下也可以的，1135794403 ","createdAt":1569812760746},{"id":5329,"originId":"5d80c1cd53c75a4136b4b1e2","articleId":941,"userId":1673,"content":"补充配置项 express初始化的时候初始进global的\r\n\"Auth_Paths\":[\"/test/\",\"/\",\"/test/admin/loginIn\",\"/test/index\",\"/test/Resume/\",\"/test/Resume/getUrl\",\"/test/Resume/index/\"],\r\n    \"InterFace_Limit_Config\":[{\r\n        \"PATH\":\"/test/admin/getPageViewData\",\r\n        \"LIMIT\":5000\r\n    }]","createdAt":1568719309427},{"id":5330,"originId":"5d80cd4795464514f7ed7912","articleId":941,"userId":109,"content":"限流用 rxjs 来实现比较方便。","createdAt":1568722247383},{"id":5331,"originId":"5d80d06895464514f7ed7919","articleId":941,"userId":89,"content":"[@waitingsong](/user/waitingsong) 和rxjs有啥关系？","createdAt":1568723048249},{"id":5332,"originId":"5d80f32c95464514f7ed796d","articleId":941,"userId":109,"content":"[@i5ting](/user/i5ting) 接口限流啊。用 rxjs 的流控功能实现一个时间段内颁发指定数量接口调用 token，于是就可以对(其他)接口实现流控。","createdAt":1568731948762},{"id":5333,"originId":"5d80fdeb53c75a4136b4b264","articleId":941,"userId":1673,"content":"[@waitingsong](/user/waitingsong) 多谢告知，我给个思路而已","createdAt":1568734699427},{"id":5334,"originId":"5d8d8c4988dc043ab1b68bb6","articleId":941,"userId":1192,"content":"哥，能不能加点注释。","createdAt":1569557577270},{"id":5335,"originId":"5d8db79588dc043ab1b68c6c","articleId":941,"userId":2023,"content":"我这边用的 koa-ratelimit  做的，效果还不错","createdAt":1569568661688},{"id":5336,"originId":"5d8ef235865a9844a3018bab","articleId":941,"userId":1673,"content":"[@assmdx](/user/assmdx) 弄成js到ide里面就行 ","createdAt":1569649205223},{"id":5337,"originId":"5d8de94aece3813ad9b9f276","articleId":942,"userId":523,"content":"图有问题","createdAt":1569581386851},{"id":5338,"originId":"5d8dea15ece3813ad9b9f27c","articleId":942,"userId":1160,"content":"[@HongYangHT](/user/HongYangHT) 方便指正一下么，谢谢谢谢啦","createdAt":1569581589730},{"id":5339,"originId":"5d8debc7ece3813ad9b9f286","articleId":942,"userId":3,"content":"![捕获.PNG](//static.cnodejs.org/FtsI-dC9UaqkD5g0Z2Xc04hjRn7o)\r\n\r\n除了最后两张图，其他图都打不开，看不了","createdAt":1569582023525},{"id":5340,"originId":"5d8dec7bece3813ad9b9f28e","articleId":942,"userId":1160,"content":"[@darrenliuwei](/user/darrenliuwei) 嗯，感谢，图床有点问题，我回头把图片重新传一遍","createdAt":1569582203501},{"id":5341,"originId":"5d8ef0bc865a9844a3018b98","articleId":942,"userId":1673,"content":"同esb的区别","createdAt":1569648828091},{"id":5342,"originId":"5d8d80788b9e1c0d6dc5e625","articleId":945,"userId":109,"content":"> 按照上面 CMD npm run dev 这样写死只能打包一种环境，当然你也可以在建一个文件来实现或者一些其它的方法\r\n\r\n可使用  `ENTRYPOINT [\"npm\", \"run\"]` 方式","createdAt":1569554552121},{"id":5343,"originId":"5d8dac5d88dc043ab1b68c02","articleId":945,"userId":19,"content":"环境变量 一些设置  可以用docker-compose","createdAt":1569565789640},{"id":5344,"originId":"5d8db18788dc043ab1b68c20","articleId":945,"userId":13,"content":"[@luanxuechao](/user/luanxuechao) 嗯呐 谢谢大佬！","createdAt":1569567111572},{"id":5345,"originId":"5d8db274ece3813ad9b9f165","articleId":945,"userId":13,"content":"[@waitingsong](/user/waitingsong) 好的 谢谢提出","createdAt":1569567348814},{"id":5346,"originId":"5c9faf8c484eeb3634158a72","articleId":947,"userId":73,"content":"最新文章 ：\r\n[[译] JavaScript如何工作：垃圾回收机制 + 常见的4种内存泄漏](https://github.com/AttemptWeb/Record/blob/master/js/JsMd/GcHandle.md)","createdAt":1553969036742},{"id":5347,"originId":"5d89a7af5cbcc579bb9ea69a","articleId":947,"userId":73,"content":"[TCP三次握手和四次挥手](https://didiheng.com/front/2019-08-17.html)\r\n[传输层的TCP和UDP协议](https://didiheng.com/front/2019-08-02.html)\r\n[图解javascript原型链](https://didiheng.com/front/2019-09-05.html)\r\n[图解javascript的this指向](https://didiheng.com/front/2019-09-12.html)\r\n[Promise原理解析进行中](https://didiheng.com/front/2019-09-22.html)","createdAt":1569302447958},{"id":5348,"originId":"5d89a7c24f109e79ef5ff216","articleId":947,"userId":73,"content":"这些都是最近才出的，哈哈哈","createdAt":1569302466357},{"id":5349,"originId":"5d89a7ea4f109e79ef5ff21b","articleId":947,"userId":73,"content":"每周坚持一篇文章，不论是技术还是书评、或者影评、游记等，👏👏支持","createdAt":1569302506043},{"id":5350,"originId":"5d89b6d15cbcc579bb9ea719","articleId":947,"userId":73,"content":"一起学习哈","createdAt":1569306321706},{"id":5351,"originId":"5d89c03b5cbcc579bb9ea758","articleId":947,"userId":2025,"content":"每周坚持一篇文章，不论是技术还是书评、或者影评、游记等，👏👏支持","createdAt":1569308731651},{"id":5352,"originId":"5d8c59948b9e1c0d6dc5e27c","articleId":947,"userId":73,"content":"[Promise原理解析](https://didiheng.com/front/2019-09-22.html)基本完成了，欢迎来踩，我可能还要改一下，😂😂","createdAt":1569479060506},{"id":5353,"originId":"5aca4532729b245529cb58e6","articleId":948,"userId":2027,"content":"hjkhkj","createdAt":1523205426634},{"id":5354,"originId":"5aca5ff3e34737560fccab4e","articleId":948,"userId":313,"content":"赞\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1523212275090},{"id":5355,"originId":"5acac23196f344940fbbae8e","articleId":948,"userId":2028,"content":"666","createdAt":1523237425510},{"id":5356,"originId":"5acac6d42c4e775a29952a42","articleId":948,"userId":610,"content":"好奇问下，这个项目服务端的数据来自哪里？服务端的架构在哪里？是nuxt底层封装好了？","createdAt":1523238612271},{"id":5357,"originId":"5acaf417e34737560fccab7a","articleId":948,"userId":2026,"content":"[@1316346949](/user/1316346949) 数据来自node社区，至于ssr的配置，nuxt已经处理的差不多了，开箱即用","createdAt":1523250199272},{"id":5358,"originId":"5acaf6bde34737560fccab7e","articleId":948,"userId":633,"content":"建议 tab 切换时，加上 loading，感觉有点慢...","createdAt":1523250877725},{"id":5359,"originId":"5d8c3cad8b9e1c0d6dc5e223","articleId":948,"userId":2029,"content":"我做了一个基于nuxt的个人博客，欢迎围观[yezipi.net](https://yezipi.net)","createdAt":1569471661754},{"id":5360,"originId":"5d8b0790e86cfb0d2a6459f4","articleId":949,"userId":867,"content":"看不到图片","createdAt":1569392528893},{"id":5361,"originId":"5d8b8b33e86cfb0d2a645c1c","articleId":949,"userId":1846,"content":"[@pzzcn](/user/pzzcn) 非常感谢提醒，已恢复","createdAt":1569426227783},{"id":5362,"originId":"5d8c16858b9e1c0d6dc5e167","articleId":949,"userId":1568,"content":"这其实就是linux内核list.h的变体，libuv主要考虑到版权问题，重写了。","createdAt":1569461893445},{"id":5363,"originId":"5d8387ee53c75a4136b4bdda","articleId":950,"userId":2030,"content":"你和 nest, 我投你一票, 虽然我都没用过","createdAt":1568901102406},{"id":5364,"originId":"5d84262795464514f7ed8609","articleId":950,"userId":545,"content":"直接基于 ts 写会舒服很多~\r\n类型提示很方便。\r\nnode.js 官方的 llhttp 也用ts 了。 yarn2 也是ts 重构了~","createdAt":1568941607659},{"id":5365,"originId":"5d8a06a18b9e1c0d6dc5dd33","articleId":950,"userId":2031,"content":"个人觉得 node 异步调用aop没有java那么好使","createdAt":1569326753243},{"id":5366,"originId":"5d8897c453c75a4136b4ce5f","articleId":951,"userId":649,"content":"我也想写个类似的...\r\n思路是: 自由组合包, 通过安装 包 来自动生成webpack配置...\r\n然后我写不下去了XD\r\n","createdAt":1569232836256},{"id":5367,"originId":"5d88a4f453c75a4136b4cec9","articleId":951,"userId":2021,"content":"[@lzszone](/user/lzszone) 呃呃呃，我还是想问通过安装 包 来自动生成webpack配置...有啥思路么😂","createdAt":1569236212679},{"id":5368,"originId":"5d89ae935cbcc579bb9ea6d4","articleId":951,"userId":649,"content":"[@ximolang](/user/ximolang) 我的做法是, 通过包最终能得到一个可以被合并的webpack设置对象, 然后用webpack-merge将若干个包和现有的webpack配置合并, 然后webpack的设置就是一个在内存中的js对象了,\r\n然后问题就是内存 => 文件, 思路是...取到值的类型和值, 生成代码节点, 再插入原来webpack config的语法树里面, 再用代码生成器生成代码, 写入\r\n没解决的问题是 除了基础类型...function和函数调用不是特别好搞, 当时想的是应该也能搞, 但是同种级别的不好弄的点稍微有点多, 感觉做出来也不是特别好用, 就没弄啦, 语法树相关的东西其实我用到的很简单, 用到的库有[@babel](/user/babel)/generator, [@babel](/user/babel)/parser, 看看文档就能搞\r\n\r\n","createdAt":1569304211016},{"id":5369,"originId":"5d5c017fd53e9171e98a9790","articleId":952,"userId":36,"content":"大佬很多！","createdAt":1566310783178},{"id":5370,"originId":"5d5c027312a019454441817c","articleId":952,"userId":358,"content":"赞","createdAt":1566311027104},{"id":5371,"originId":"5d5ca06d421846662d983967","articleId":952,"userId":887,"content":"大佬真的多！","createdAt":1566351469775},{"id":5372,"originId":"5d5cf34c421846662d983b34","articleId":952,"userId":13,"content":"赞 👍","createdAt":1566372684538},{"id":5373,"originId":"5d5e28d2421846662d983fb6","articleId":952,"userId":734,"content":"为大佬们打Call！","createdAt":1566451922451},{"id":5374,"originId":"5d5f9b0ddcd8e81121a60860","articleId":952,"userId":89,"content":"厉害了","createdAt":1566546701945},{"id":5375,"originId":"5d643730dcd8e81121a61391","articleId":952,"userId":514,"content":"好","createdAt":1566848816091},{"id":5376,"originId":"5d64a9c8421846662d9851d0","articleId":952,"userId":1410,"content":"已报名","createdAt":1566878152447},{"id":5377,"originId":"5d651b92dcd8e81121a61729","articleId":952,"userId":1231,"content":"现在可以报名吗","createdAt":1566907282832},{"id":5378,"originId":"5d6d3bb0d50f572345910fd9","articleId":952,"userId":440,"content":"赞","createdAt":1567439792764},{"id":5379,"originId":"5d6dcc61d50f5723459110ae","articleId":952,"userId":867,"content":"报名了没有任何反应啊，通过不通过也没有邮件","createdAt":1567476833319},{"id":5380,"originId":"5d6f9ec7a7474a231a588d26","articleId":952,"userId":1644,"content":"会议时间 9.8 星期天，邀约邮件里是星期六，是哪个出错了？![image.png](//static.cnodejs.org/FiyGlk27ZsnCszPeEEmTNge_UHzB)","createdAt":1567596231394},{"id":5381,"originId":"5d7085efd50f572345911b6a","articleId":952,"userId":2033,"content":"[@JianmingXia](/user/JianmingXia) 更正了","createdAt":1567655407771},{"id":5382,"originId":"5d708603d50f572345911b70","articleId":952,"userId":2033,"content":"[@pzzcn](/user/pzzcn) 昨天已经邮件通知了，通过与否都会收到","createdAt":1567655427342},{"id":5383,"originId":"5d7b0ed1d50f572345914033","articleId":952,"userId":2034,"content":"参加需要费用么？","createdAt":1568345809608},{"id":5384,"originId":"5d7f778c95464514f7ed750a","articleId":952,"userId":21,"content":"这期ppt能发出来么？\r\n\r\n------------------------\r\n剧透一下：大部分ppt都提了code-cache，看来以后这个会成为node的一个比较重要的功能点","createdAt":1568634764589},{"id":5385,"originId":"5d819ab653c75a4136b4b35b","articleId":952,"userId":2035,"content":"[@mariodu](/user/mariodu) 有现场视频吗？","createdAt":1568774838800},{"id":5386,"originId":"5d81f0a895464514f7ed7cea","articleId":952,"userId":2036,"content":"。。。。。。。","createdAt":1568796840908},{"id":5387,"originId":"5d81f1c253c75a4136b4b61c","articleId":952,"userId":2037,"content":"11","createdAt":1568797122743},{"id":5388,"originId":"5d82211c95464514f7ed7e01","articleId":952,"userId":18,"content":"麻烦更新一下讲师ppt","createdAt":1568809244291},{"id":5389,"originId":"5d83695f53c75a4136b4bd7c","articleId":952,"userId":89,"content":"[@alsotang](/user/alsotang) 已经更新了。","createdAt":1568893279992},{"id":5390,"originId":"5d843e2e95464514f7ed8708","articleId":952,"userId":18,"content":"[@i5ting](/user/i5ting) 收到","createdAt":1568947758844},{"id":5391,"originId":"5d84436d53c75a4136b4bff1","articleId":952,"userId":2038,"content":"赞 感谢分享","createdAt":1568949101510},{"id":5392,"originId":"5d84a04495464514f7ed89c7","articleId":952,"userId":2039,"content":"1","createdAt":1568972868477},{"id":5393,"originId":"5d88a5f295464514f7ed95da","articleId":952,"userId":2040,"content":"good","createdAt":1569236466015},{"id":5394,"originId":"5d88bc1b53c75a4136b4cf3c","articleId":952,"userId":2041,"content":"[@dengnan123](/user/dengnan123) ","createdAt":1569242139343},{"id":5395,"originId":"5d88bc2995464514f7ed963f","articleId":952,"userId":2041,"content":"[@atian25](/user/atian25) 额鹅鹅鹅","createdAt":1569242153350},{"id":5396,"originId":"5d88bc6d53c75a4136b4cf40","articleId":952,"userId":2041,"content":"1111","createdAt":1569242221658},{"id":5397,"originId":"5d88c76495464514f7ed9670","articleId":952,"userId":2040,"content":"[@dengnan123](/user/dengnan123) 还行","createdAt":1569245028394},{"id":5398,"originId":"5d8823bb53c75a4136b4c9a2","articleId":953,"userId":89,"content":"[@lcepy](/user/lcepy) 仔细看了几篇文章，还不错的","createdAt":1569203131620},{"id":5399,"originId":"5d88320595464514f7ed91fb","articleId":953,"userId":566,"content":"[@i5ting](/user/i5ting) 狼叔，那在社区里给推荐推荐哇；","createdAt":1569206789033},{"id":5400,"originId":"5d883e9f95464514f7ed9269","articleId":953,"userId":89,"content":"[@lcepy](/user/lcepy) 这种导流帖，对社区没啥价值。你把里面内容整理一下，就是原创文章。","createdAt":1569210015778},{"id":5401,"originId":"5d88c62f95464514f7ed9660","articleId":953,"userId":566,"content":"[@i5ting](/user/i5ting) 好","createdAt":1569244719707},{"id":5402,"originId":"5d8739cf95464514f7ed8fdf","articleId":956,"userId":2040,"content":"keyi","createdAt":1569143247489},{"id":5403,"originId":"5d84a19f53c75a4136b4c295","articleId":958,"userId":358,"content":"egg 不是大而全的框架，谢谢。\r\n\r\negg 只是在 Koa 的基础上，加了一个 Loader 机制，以及补全了几个常用的场景的能力。\r\n\r\n剩下的都是完全自由组装的可选插件。\r\n\r\negg 的定位是为了给上层大而全的框架提供一个统一的规范和底层。","createdAt":1568973215276},{"id":5404,"originId":"5d84a20153c75a4136b4c299","articleId":958,"userId":358,"content":"> 但从码农的层面来看，框架提高了效率，码农的工作时间从原来的955变成了996 提高效率并没有增加工资水平，单位时间的工资反而下降了\r\n\r\n说的好像，不用框架，自己从底层开始撸，你就可以 995 似的。。。逻辑不对啊，那你是不是 vue/react 都不用，直接原生 js 开始写啊。","createdAt":1568973313530},{"id":5405,"originId":"5d84a48353c75a4136b4c2a6","articleId":958,"userId":89,"content":"历史上java，从model1到model2，到ssh、ssh2到spring全家桶。到sprint boot。。。。从小到大，从大到小。。。全场景，而已。\r\n\r\nnode是以小见成。从http到express到koa，然后出现egg。未来是serverless的，faas下更小。。。。。从小到大，从大到小。。。全场景，而已。","createdAt":1568973955227},{"id":5406,"originId":"5d84c6e153c75a4136b4c32d","articleId":958,"userId":98,"content":"程序猿本身就是一种努力使别人和自己失业的工种","createdAt":1568982753519},{"id":5407,"originId":"5d857fb295464514f7ed8b40","articleId":958,"userId":1644,"content":"[@atian25](/user/atian25) 题主莫名的就在偷换概念。。。996 的原因原来是框架引起的么= =","createdAt":1569030066384},{"id":5408,"originId":"5d85824095464514f7ed8b54","articleId":958,"userId":21,"content":"有些事情不是业务人员做，就是框架做，往大而全发展是**单应用框架**发展的趋势。\r\n但以后未必，比如狼叔举例的faas，反而越做越轻。\r\n不同情况不同用法，什么时候轻好，什么时候重好,只有自己知道。","createdAt":1569030720506},{"id":5409,"originId":"5d85849e53c75a4136b4c3e4","articleId":958,"userId":545,"content":"这个问题楼主理解错了，首先是 每个后端语言都在发展AOP 思想的框架。\r\n起源于 ruby on rails  ，发展于 java 的spring  ，发扬于  php 的lavavel ，node.js 的  nest.js ， go 的iris ，python 的django 。\r\n但也由于语法层面限制，各个语言实现有所不同。\r\n\r\n甚至发展在前端的 angular 。\r\n\r\n其次，egg 并不是大而全的框架， midwayjs 和 nest.js 这类才是。\r\n\r\n然后，框架的目的是增加约束，从而提升开发效率，降低维护成本。\r\n而核心在于“需求”，没有买卖，就没有伤害。【发展生产力，解放生产力】\r\n\r\n最后，再深入一些，\r\n以前需要10个，甚至100个人干的活，现在1个人就能做，随之而来的也是科技的进步，手机，笔记本，往前推50 甚至 100 年，敢想象吗？\r\n","createdAt":1569031326202},{"id":5410,"originId":"5d85cd5795464514f7ed8c6e","articleId":958,"userId":109,"content":"[@zuohuadong](/user/zuohuadong) 要说 midwayjs  也算不上大而全。个人认为是在 eggjs 基础上加上 ioC 以及 TS，开发比 eggjs 顺手些。","createdAt":1569049943422},{"id":5411,"originId":"5d85e94295464514f7ed8d5f","articleId":958,"userId":545,"content":"[@waitingsong](/user/waitingsong)    nest.js 和 midwayjs   确实是类spring 、ror、laravel 的框架~","createdAt":1569057090729},{"id":5412,"originId":"5d6cf76bd50f572345910eea","articleId":959,"userId":109,"content":"> 现在前端也是可以直接通过Blob对象进行前端文件下载了\r\n\r\n没看明白","createdAt":1567422315109},{"id":5413,"originId":"5d6cfa69d50f572345910ef3","articleId":959,"userId":877,"content":"直接a标签\r\n```html\r\n<a href=\"data:application/json,{}\" download=\"a.json\">123</a>\r\n```","createdAt":1567423081797},{"id":5414,"originId":"5d7098a0d50f572345911bcf","articleId":959,"userId":33,"content":"可以post请求下载了","createdAt":1567660192992},{"id":5415,"originId":"5d819d1f95464514f7ed7a62","articleId":959,"userId":1331,"content":"[@waitingsong](/user/waitingsong) 也就是可以直接通过浏览器实现文件下载，不需要经过服务端的配合","createdAt":1568775455270},{"id":5416,"originId":"5d819d6e53c75a4136b4b370","articleId":959,"userId":1331,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 通过这种方式是不需要发起ajax请求的","createdAt":1568775534270},{"id":5417,"originId":"5d819df195464514f7ed7a68","articleId":959,"userId":1331,"content":"[@cnwhy](/user/cnwhy) 实际上这个下载也是需要a标签配合的，只是隐式创建了一个a标签，下载完了再移除","createdAt":1568775665941},{"id":5418,"originId":"5d84385f53c75a4136b4bf95","articleId":959,"userId":2044,"content":"能下excel?这种适合数据已经在前端了吧?直接下载少一次服务请求","createdAt":1568946271531},{"id":5419,"originId":"5d84764153c75a4136b4c112","articleId":959,"userId":1331,"content":"[@zongwong](/user/zongwong) excel其实也是可以实现的，使用现在的FileReader的readAsBinaryString方法，将其转成二进制string，如果希望省事一点那么也可以考虑直接使用[xlsx](https://www.npmjs.com/package/xlsx)这个npm包，它内部进行了一些相关封装，直接使用它的相应api即可","createdAt":1568962113145},{"id":5420,"originId":"5c769e80a667ed6d807b9dca","articleId":963,"userId":2045,"content":"体验感觉还可以","createdAt":1551277696556},{"id":5421,"originId":"5c7a830e5b8cb21491ca533e","articleId":963,"userId":2046,"content":"good","createdAt":1551532814517},{"id":5422,"originId":"5c7aa0bf5b8cb21491ca5387","articleId":963,"userId":2045,"content":"[@zhaoyn7](/user/zhaoyn7)计划以后每1-2周更新一个版本，慢慢完善","createdAt":1551540415461},{"id":5423,"originId":"5c7b36fb90c14711cc8c9ab1","articleId":963,"userId":2047,"content":"[@aoxiaoqiang](/user/aoxiaoqiang)  不错！","createdAt":1551578875359},{"id":5424,"originId":"5c7b372f90c14711cc8c9ab3","articleId":963,"userId":2047,"content":"[@timliu99](/user/timliu99)  支持。","createdAt":1551578927265},{"id":5425,"originId":"5c7b81de90c14711cc8c9b55","articleId":963,"userId":2045,"content":"微信小程序审核还是挺快的，昨天写的点儿内容提交了。今天已经审核通过了，线上目前已经更新到**1.0.02**版本，更新内容：\r\n1. 添加自定导航；\r\n2. 首页顶部导航滚动淡出；\r\n3. 首页添加用户头像展示;\r\n\r\n(有功能、界面展示需求或者Bug大家可以留言回复， 我会仔细思考大家的意见进行改进修复，可能你说的功能或问题下一次就被添加或修复了哦~)","createdAt":1551598046827},{"id":5426,"originId":"5c835eb07ce0df3732426679","articleId":963,"userId":2045,"content":"版本更新**1.0.03**， 更新内容：\r\n1. 添加页面，帖子列表 && 趣图广场入口；\r\n2. 添加“趣图广场”模块， 主要是分享一些比较有意思的图片。\r\n3. 分享bug修复；","createdAt":1552113328510},{"id":5427,"originId":"5c99b3f3fd41137eb7661cab","articleId":963,"userId":2045,"content":"版本更新**1.0.04**， 更新内容\r\n1. 添加底部导航 “首页”、“我的”；\r\n2. 首页改版；\r\n3. 个人中心添加扫码登录；\r\n4. 详情页添加“收藏”按钮；\r\n5. 登录后显示个人中心模块，添加收藏列表页面；","createdAt":1553576947004},{"id":5428,"originId":"5cab6e677edd13064e053822","articleId":963,"userId":655,"content":"LZ这个不错哦。 ","createdAt":1554738791711},{"id":5429,"originId":"5cab6efdd68ff5064921b2ea","articleId":963,"userId":655,"content":"我正好在找一个社区小程序版，如果可以的话，外包给你做。在这个基础上改点东西即可。\r\nhttps://cnodejs.org/topic/5ca17f4399e62a362ff41c6d#5cab6eef7edd13064e053828","createdAt":1554738941771},{"id":5430,"originId":"5cb30e3cdad66d658e408c50","articleId":963,"userId":2045,"content":"前一段时间比较忙，也没有弄这个。[@awong1900](/user/awong1900)  发现列表有Bug，于是就修复了列表Bug， 然后在分享设置也做了调整添加了配置等。更新发布了**1.0.05**， 更新内容：\r\n1. 首页、帖子列表、趣图页面分享卡片添加设计配图；\r\n2. 详情页内容代码块样式、时间、评论、链接等样式微调；\r\n3. 帖子列表Bug修复；\r\n\r\n感谢 [@awong1900](/user/awong1900) 的反馈","createdAt":1555238460391},{"id":5431,"originId":"5cb42ec6dad66d658e40929b","articleId":963,"userId":655,"content":"客气了。 ","createdAt":1555312326889},{"id":5432,"originId":"5cb6c43237faec0ce1d02ca9","articleId":963,"userId":853,"content":"体验不错","createdAt":1555481650759},{"id":5433,"originId":"5cda2074d5fff6772a2fe635","articleId":963,"userId":2045,"content":"**1.0.06** 更新：\r\n1. 首页添加swiper展示方式，并可切换换；\r\n2. 趣图列表尝试使用[ad 组件](https://developers.weixin.qq.com/miniprogram/dev/component/ad.html) ；\r\n3. 趣图列表修复；","createdAt":1557799028874},{"id":5434,"originId":"5cdbcb25e57aac76fed2ade3","articleId":963,"userId":655,"content":"赞！！！！！！！！！！1","createdAt":1557908261881},{"id":5435,"originId":"5ce56ae752ccb64168ba67a5","articleId":963,"userId":655,"content":"ya！ 可以看到广告了","createdAt":1558538983863},{"id":5436,"originId":"5ceb3d6a52ccb64168ba7ba4","articleId":963,"userId":2045,"content":"**1.0.07** 版本更新：\r\n1. 个人中心添加“关于”说明页面；\r\n2. 个人中心样式图标修改，彩色图标更舒服；\r\n3. NodeJS帖子列表样式微调，扁平风格更简洁直观；\r\n4. 趣图列表样式修改，体验优化；\r\n","createdAt":1558920554149},{"id":5437,"originId":"5d822b6353c75a4136b4b7ce","articleId":963,"userId":2045,"content":"最近迭代了好几个版本都没有记录，今天来简单的理一下  **1.0.08 - 1.0.16** ，主要的一些功能有下面这些：\r\n1. 首页模块样式修改；\r\n2. 添加趣模块；\r\n3. 添加设备信息模块（这个对小程序开发者查看相关设备的设备信息挺有用）；\r\n4. 添加推荐小程序模块，目前主要的几个是 微信小程序官方的几个小程序助手相关的。对于小程序的管理还实用的；\r\n5. 尝试在小程序中使用wsocket  （体验入口： 我的 -> 长按‘重启小程序’即可进入），做了一个简易版的算是群聊功能吧；\r\n6. 添加授权登录流程；\r\n7. 首页顶部添加 banner 配置；\r\n\r\n体验码：\r\n![square.png](//static.cnodejs.org/FpcqDFQZL9mFdo6fmZJ2cWiHxxVE)","createdAt":1568811875670},{"id":5438,"originId":"5d81ab7053c75a4136b4b3e1","articleId":964,"userId":442,"content":"网站部分资源竟然直接倒卖慕课网的课程，难道不怕被举报吗😅","createdAt":1568779120137},{"id":5439,"originId":"5d81e42e53c75a4136b4b546","articleId":964,"userId":2049,"content":"回复帖子","createdAt":1568793646011},{"id":5440,"originId":"5d81921b95464514f7ed7a29","articleId":965,"userId":153,"content":"网站被封了吧\r\n","createdAt":1568772635016},{"id":5441,"originId":"5d819f1753c75a4136b4b37d","articleId":965,"userId":3,"content":"502 Bad Gateway","createdAt":1568775959303},{"id":5442,"originId":"5d81a0ce95464514f7ed7a78","articleId":965,"userId":1933,"content":"敏感时间。。今天好多的都挂了吧。","createdAt":1568776398891},{"id":5443,"originId":"5d81734753c75a4136b4b291","articleId":966,"userId":79,"content":"👍👍👍","createdAt":1568764743321},{"id":5444,"originId":"5d78de14a7474a231a58b14f","articleId":967,"userId":3,"content":"必须要下载 APP 吗？","createdAt":1568202260243},{"id":5445,"originId":"5d7f122ecac77d1859936ef9","articleId":967,"userId":2050,"content":"[@darrenliuwei](/user/darrenliuwei) \r\n是的哈 我们暂时没有做网页版的计划 不好意思","createdAt":1568608814084},{"id":5446,"originId":"5d7f304195464514f7ed7347","articleId":967,"userId":1168,"content":"下载app业余时间估计刷不了多少啊，\r\n网页的话是上班摸鱼专用，\r\n最好做一个吧","createdAt":1568616513228},{"id":5447,"originId":"5d807e5653c75a4136b4b0ab","articleId":967,"userId":628,"content":"网页版差不多，APP就算了。","createdAt":1568702038760},{"id":5448,"originId":"5d7a01d5a7474a231a58b413","articleId":968,"userId":2052,"content":"以前用 node 是做简单的 web 开发。现在主要是用node来做前端工具的增强。\r\n\r\n顺便问问大哥们，接下来的方向应该是如何","createdAt":1568276949292},{"id":5449,"originId":"5d7a0322a7474a231a58b421","articleId":968,"userId":98,"content":"接下来的方向当然是转投php的怀抱，听说php才是最好的语言","createdAt":1568277282428},{"id":5450,"originId":"5d7a03b7d50f572345913ea9","articleId":968,"userId":2052,"content":"[@zengming00](/user/zengming00) 你吓到我了，我哭了。之前就是PHP一年多。","createdAt":1568277431804},{"id":5451,"originId":"5d7a0aa6a7474a231a58b45c","articleId":968,"userId":152,"content":"let's go ？ ","createdAt":1568279206468},{"id":5452,"originId":"5d7a0c0da7474a231a58b474","articleId":968,"userId":187,"content":"接下来就是c++了，没错作为一个js开发者，怎么能不会c++呢，出去装B都装不过","createdAt":1568279565889},{"id":5453,"originId":"5d7a3753a7474a231a58b52d","articleId":968,"userId":2052,"content":"[@ounana](/user/ounana) 不装B 他强任他强，清风拂山岗","createdAt":1568290643762},{"id":5454,"originId":"5d7a3c08d50f572345913fa8","articleId":968,"userId":2052,"content":"[@Gitforxuyang](/user/Gitforxuyang) 去哪 哪的车","createdAt":1568291848645},{"id":5455,"originId":"5d7b850ca7474a231a58b64b","articleId":968,"userId":1737,"content":"let's go go!","createdAt":1568376076430},{"id":5456,"originId":"5d7d9a3fa500d514da65558f","articleId":968,"userId":152,"content":"[@ZWkang](/user/ZWkang) go go go ","createdAt":1568512575088},{"id":5457,"originId":"5d7da47d95464514f7ed6f33","articleId":968,"userId":2052,"content":"[@Gitforxuyang](/user/Gitforxuyang) 嘟嘟嘟 吃瓜群众开着火车路过","createdAt":1568515197308},{"id":5458,"originId":"5d7f1fc1cac77d1859936f1d","articleId":968,"userId":545,"content":"[@ZWkang](/user/ZWkang)   后端方向的话，nest.js 或者 midwayjs 看看~\r\n前端可以顺便看看 angular 。\r\n什么语言不重要。\r\n架构、微服务、分布式 逐一了解。\r\n\r\ngo 也没那么好用， 面向对象特性还不如 typescript ","createdAt":1568612289648},{"id":5459,"originId":"5d7fafe353c75a4136b4aea1","articleId":968,"userId":2052,"content":"[@zuohuadong](/user/zuohuadong) 我是前端方向的。目前还没有做过大型的node应用。感觉架构/微服务/分布式 离我有点“远”","createdAt":1568649187055},{"id":5460,"originId":"5d80293253c75a4136b4aee2","articleId":968,"userId":545,"content":"[@ZWkang](/user/ZWkang)  对于angular 那一套来说，很多理念跟后端是相通的。\r\n前端也能做微服务，但是相对来说，需要前端架构的少","createdAt":1568680242869},{"id":5461,"originId":"5d802ea795464514f7ed75fd","articleId":968,"userId":853,"content":"强！","createdAt":1568681639790},{"id":5462,"originId":"5d7e5e5a95464514f7ed711d","articleId":970,"userId":109,"content":"貌似大家习惯用 [WIP] 来表示未完成。用中文那么在做匹配时可能不那么方便。","createdAt":1568562778195},{"id":5463,"originId":"5d785f52d50f572345913845","articleId":972,"userId":712,"content":"进去网站看了，之前我有关注一个网站：湾区日报，感觉你们的网站形式挺像的","createdAt":1568169810581},{"id":5464,"originId":"5d791972d50f572345913c14","articleId":972,"userId":566,"content":"[@glj1102](/user/glj1102) 您说的那个我了解，其实区别还是蛮大的。","createdAt":1568217458739},{"id":5465,"originId":"566d67eb24b586c83b63fd19","articleId":974,"userId":2056,"content":"赞!\r\ngithub上有没类似,方便的扩展","createdAt":1450010603900},{"id":5466,"originId":"566e3d4ba980f12c57eb541b","articleId":974,"userId":18,"content":"赞一个","createdAt":1450065227460},{"id":5467,"originId":"566e46c2a980f12c57eb541e","articleId":974,"userId":2057,"content":"cool，\r\n不过用起来有点卡，一直loading...","createdAt":1450067650631},{"id":5468,"originId":"566e60b702c18dc357af40c5","articleId":974,"userId":624,"content":"[@oero](/user/oero) \r\n\r\n哈哈， 是啊","createdAt":1450074295368},{"id":5469,"originId":"566e60c1a980f12c57eb5427","articleId":974,"userId":624,"content":"[@alsotang](/user/alsotang) \r\n\r\n谢谢","createdAt":1450074305605},{"id":5470,"originId":"566e60dba980f12c57eb5429","articleId":974,"userId":624,"content":"[@wfsovereign](/user/wfsovereign) \r\n还需要优化……\r\n不过内网访问gitlab应该还好吧","createdAt":1450074331529},{"id":5471,"originId":"566e888b634b6b5d57cfecc2","articleId":974,"userId":1631,"content":"[@oero](/user/oero)  [https://github.com/buunguyen/octotree](https://github.com/buunguyen/octotree)","createdAt":1450084491239},{"id":5472,"originId":"566eb5ad02c18dc357af40d5","articleId":974,"userId":2056,"content":"[@buctyoyo](/user/buctyoyo) ths","createdAt":1450096045664},{"id":5473,"originId":"566ee9d9b4844e992a126857","articleId":974,"userId":1272,"content":"赞一个\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1450109401517},{"id":5474,"originId":"5d7735c1d50f572345913358","articleId":974,"userId":2058,"content":"![QQ20190910-133314@2x.png](//static.cnodejs.org/FnKNiwLyDeLtL0dbPsKMkQxK15YZ)\r\n\r\n作者还在么，插件失效了，有更新的打算么","createdAt":1568093633025},{"id":5475,"originId":"5d76331dd50f5723459130c1","articleId":976,"userId":158,"content":"二维码？","createdAt":1568027421056},{"id":5476,"originId":"5d76006ca7474a231a58a4b9","articleId":978,"userId":2061,"content":"666","createdAt":1568014444845},{"id":5477,"originId":"5d75edb2d50f572345912d54","articleId":979,"userId":2011,"content":"[@chengguo517](/user/chengguo517) 😊 感谢支持，期待你向我们提 issue~~","createdAt":1568009650176},{"id":5478,"originId":"5d71b832a7474a231a5896d5","articleId":980,"userId":191,"content":"good","createdAt":1567733810063},{"id":5479,"originId":"5d6f5ad8d50f572345911642","articleId":981,"userId":22,"content":"哈哈哈哈","createdAt":1567578840655},{"id":5480,"originId":"5d6f5b01d50f572345911646","articleId":981,"userId":22,"content":"这是买的书吗？退货！","createdAt":1567578881622},{"id":5481,"originId":"5d6f5f46a7474a231a588bf9","articleId":981,"userId":109,"content":"机翻无疑，人工校对差","createdAt":1567579974148},{"id":5482,"originId":"5d706c38a7474a231a588eee","articleId":981,"userId":1161,"content":"翻译这本书的人估计是为了当网红","createdAt":1567648824897},{"id":5483,"originId":"5d71c87ed50f5723459121aa","articleId":981,"userId":1644,"content":"这本书感觉要火","createdAt":1567737982464},{"id":5484,"originId":"5d746019a7474a231a589daf","articleId":981,"userId":2063,"content":"是不是市面上很多书都是靠这种翻译，然后出书的。太坑了吧","createdAt":1567907865552},{"id":5485,"originId":"5d748127d50f5723459127ac","articleId":981,"userId":1377,"content":"机器省钱，成本低，骗了一个算一个，只要利润高过成本+人工，他们觉得赚了就会继续做下去","createdAt":1567916327768},{"id":5486,"originId":"5d74fdb7a7474a231a589ecd","articleId":981,"userId":36,"content":"这翻译厉害了","createdAt":1567948215727},{"id":5487,"originId":"5b56c5442860af042a217838","articleId":982,"userId":850,"content":"👍","createdAt":1532413252502},{"id":5488,"originId":"5b56dcf32860af042a217843","articleId":982,"userId":2065,"content":"支持","createdAt":1532419315158},{"id":5489,"originId":"5d748757d50f5723459127bf","articleId":982,"userId":1726,"content":"支持。https://pythonquestion.com/","createdAt":1567917911306},{"id":5490,"originId":"5d73cf29a7474a231a589d77","articleId":983,"userId":109,"content":"要玩 explain 以及 explain analyze 用这智障来举例投入产出比太低。\r\n\r\n简单的慢查询结合表结构直接看sql 语句就能解决。\r\n复杂的查询，mysql 简陋的的 explain 没多大价值，即便分析出问题点也基本没啥可优化之处。","createdAt":1567870761026},{"id":5491,"originId":"5d70e952d50f572345911fac","articleId":989,"userId":354,"content":"看一下 mongodb 的日志呗","createdAt":1567680850854},{"id":5492,"originId":"5d70b550a7474a231a58940f","articleId":990,"userId":354,"content":"...用这个还不如用 node-persist","createdAt":1567667536513},{"id":5493,"originId":"5d70b7f9d50f572345911e59","articleId":990,"userId":2067,"content":"[@cctv1005s](/user/cctv1005s) 还是有区别的，nodedb这个插件 使用方式还是类 数据库的，不一样的东西，适用场景也不同","createdAt":1567668217124},{"id":5494,"originId":"5d672b93421846662d985924","articleId":992,"userId":853,"content":"m","createdAt":1567042451953},{"id":5495,"originId":"5d6f65f5d50f572345911684","articleId":992,"userId":1507,"content":"不需要动的话可以选择 svg-captcha ,跨平台\r\nhttps://github.com/lemonce/svg-captcha","createdAt":1567581685055},{"id":5496,"originId":"5d68c3c8421846662d985e94","articleId":995,"userId":152,"content":"现在知道了 😄","createdAt":1567146952718},{"id":5497,"originId":"5d68e7e0421846662d985f3e","articleId":995,"userId":187,"content":"如何控制队列的速度呢，保持匀速出来，进入的时候不限制","createdAt":1567156192877},{"id":5498,"originId":"5d691a18dcd8e81121a622d2","articleId":995,"userId":558,"content":"环形队列木有设计精确","createdAt":1567169048471},{"id":5499,"originId":"5d69dc69421846662d986077","articleId":995,"userId":90,"content":"出对 => 出对","createdAt":1567218793664},{"id":5500,"originId":"5d69f4ed421846662d9860bf","articleId":995,"userId":558,"content":"环形队列适用实时OS系统，而且无须担心内存溢出问题(⊙o⊙)哦","createdAt":1567225069470},{"id":5501,"originId":"5d6a4facdcd8e81121a6244d","articleId":995,"userId":13,"content":"[@ounana](/user/ounana) 这个在你出队的时候可以设置定时器吧 或者了解下 RabbitMQ 的延迟队列","createdAt":1567248300605},{"id":5502,"originId":"5d6a4fdddcd8e81121a62455","articleId":995,"userId":13,"content":"[@alphakid](/user/alphakid) 大佬，能否指点下，具体哪点？我看看","createdAt":1567248349867},{"id":5503,"originId":"5d6a5d85421846662d9861aa","articleId":995,"userId":558,"content":"[@Q-Angelo](/user/Q-Angelo) 图一head=0,tail=0，队列为空；图三head=0，tail=0，队列为满。图一和图三相同序号，队列状态却不一样，矛盾。\r\n图三是倒追一圈了","createdAt":1567251845872},{"id":5504,"originId":"5d6e1484d50f57234591126d","articleId":995,"userId":13,"content":"[@alphakid](/user/alphakid) 是的，大佬看的好细，图修改了下加了一个队列当前元素长度","createdAt":1567495300238},{"id":5505,"originId":"5d6ce2ead50f572345910e77","articleId":996,"userId":1914,"content":"这个就厉害了","createdAt":1567417066094},{"id":5506,"originId":"5d020a201fe902120f31e8a7","articleId":997,"userId":1197,"content":"哇 厉害 ","createdAt":1560414752324},{"id":5507,"originId":"5d021fc595fcc914aa268a79","articleId":997,"userId":249,"content":"楼主你好，请教一下你的远程工作如何找到的？","createdAt":1560420293439},{"id":5508,"originId":"5d02573595fcc914aa268bd9","articleId":997,"userId":1545,"content":"[@Choicelin](/user/Choicelin) 1. 一些远程工作网站（常见的我都试过，最后觉得一早一晚还不错）发布信息 2. 技术论坛发帖/看帖 3. 常混的技术群里偶然看到的","createdAt":1560434485139},{"id":5509,"originId":"5d02efda1fe902120f31ebe2","articleId":997,"userId":79,"content":"哇，向你学习😀😀","createdAt":1560473562679},{"id":5510,"originId":"5d072b5a1fe902120f31fc3b","articleId":997,"userId":853,"content":"你也太强了吧","createdAt":1560750938190},{"id":5511,"originId":"5d0743c91fe902120f31fd36","articleId":997,"userId":2071,"content":"学习了~~~","createdAt":1560757193850},{"id":5512,"originId":"5d0aeb2195fcc914aa26ab63","articleId":997,"userId":562,"content":"学习学习","createdAt":1560996641347},{"id":5513,"originId":"5d6cddbba7474a231a588380","articleId":997,"userId":2072,"content":"可以的很棒","createdAt":1567415739295},{"id":5514,"originId":"5d32cf9e9969a529571d5c51","articleId":999,"userId":97,"content":"排版可以考虑下 https://github.com/sparanoid/chinese-copywriting-guidelines","createdAt":1563611038445},{"id":5515,"originId":"5d358750b2b9222961dad213","articleId":999,"userId":356,"content":"> (function() {\r\n>    const x = 20\r\n>    const y = 20\r\n>    const answer = x + y\r\n>    console.log(answer)\r\n> })() \r\n这种模式目前已经被快级代码所取代\r\n> {\r\n>   const x = 20\r\n>    const y = 20\r\n>    const answer = x + y\r\n>    console.log(answer)\r\n> }","createdAt":1563789136402},{"id":5516,"originId":"5d358776b2b9222961dad217","articleId":999,"userId":356,"content":"辛苦辛苦总结","createdAt":1563789174768},{"id":5517,"originId":"5d6a92c8421846662d986274","articleId":999,"userId":2074,"content":"![cups.png](//static.cnodejs.org/FvhY0yYeHGzw3lvC1psRDz9miiwD)","createdAt":1567265480725},{"id":5518,"originId":"58f981d331e8c2bb1c3dcc59","articleId":1000,"userId":358,"content":"👍👍👍👍\r\n\r\n楼主有兴趣的话，可以写一点相关的文章，投稿到我们的专栏\r\n\r\nhttps://zhuanlan.zhihu.com/eggjs","createdAt":1492746707749},{"id":5519,"originId":"58f984e09116585a56e20839","articleId":1000,"userId":2075,"content":"[@atian25](/user/atian25) 好的，我找时间整理篇文章投过去","createdAt":1492747488962},{"id":5520,"originId":"58f98c7b31e8c2bb1c3dcc5e","articleId":1000,"userId":12,"content":"不错，一个完整的小程序产品技术方案。","createdAt":1492749435724},{"id":5521,"originId":"58f98dff31e8c2bb1c3dcc60","articleId":1000,"userId":850,"content":"很赞~","createdAt":1492749823393},{"id":5522,"originId":"58fc6c2ebbaf2f3f569be198","articleId":1000,"userId":2076,"content":"Mark  --- From [LBRC](https://github.com/luckybirdme/Reactjs-cnodejs)","createdAt":1492937774159},{"id":5523,"originId":"5901360fbbaf2f3f569be314","articleId":1000,"userId":2077,"content":"非常感谢楼主，我做产品的在学开发，楼主这套完整的东西对我有极大帮助！\r\n能否留个支付宝账号，想表示下感谢","createdAt":1493251599928},{"id":5524,"originId":"5905600a5bb7efe417431eff","articleId":1000,"userId":2075,"content":"[@oneBite66](/user/oneBite66) 哈哈，谢谢支持，不用感谢了。咱们做个朋友吧，微信seasonstarr，后面两个r没错\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1493524490431},{"id":5525,"originId":"5942b8e3ff5813233faad8c6","articleId":1000,"userId":2078,"content":"mark, wanna to learn egg now..","createdAt":1497544931677},{"id":5526,"originId":"5d6a74a2dcd8e81121a624df","articleId":1000,"userId":2079,"content":"貌似没有登录授权这块的操作啊，所请求数据也未做对应的token处理。","createdAt":1567257762503},{"id":5527,"originId":"5d5b6f05d53e9171e98a94ef","articleId":1001,"userId":31,"content":"网上找了一个\r\n\r\n```shell\r\nfind . -path \"*.js\" ! -path \"*node_modules*\" ! -path \"*test*\" ! -path \"*dist*\" | xargs wc -l\r\n```","createdAt":1566273285098},{"id":5528,"originId":"5d5b968f12a0194544417f9d","articleId":1001,"userId":1695,"content":"[@yviscool](/user/yviscool) 厉害","createdAt":1566283407779},{"id":5529,"originId":"5d5ca842e79eaa6628beb221","articleId":1001,"userId":89,"content":"npm install -g cloc                    # https://www.npmjs.com/package/cloc\r\n\r\n","createdAt":1566353474417},{"id":5530,"originId":"5d6534d4421846662d98541d","articleId":1001,"userId":1695,"content":"[@i5ting](/user/i5ting) 👍","createdAt":1566913748875},{"id":5531,"originId":"5d66077f421846662d9855af","articleId":1001,"userId":18,"content":"[@yviscool](/user/yviscool) 楼主看哭了。。。","createdAt":1566967679882},{"id":5532,"originId":"5d66acfb421846662d9858d6","articleId":1001,"userId":1193,"content":"karma-coverage 测覆盖率，顺便也可以检测行数","createdAt":1567010043997},{"id":5533,"originId":"5d67313cdcd8e81121a61c65","articleId":1001,"userId":1187,"content":"https://github.com/cgag/loc\r\n这个 loc，比 perl 版本的 cloc 更快！","createdAt":1567043900295},{"id":5534,"originId":"5d68ed31421846662d985f63","articleId":1001,"userId":187,"content":"辛辛苦苦造个轮子，容易吗，你们。。。","createdAt":1567157553941},{"id":5535,"originId":"603c8fbd4655eacfd3218fd1","articleId":1002,"userId":2081,"content":"同学们对于春招有任何疑问，欢迎在讨论区留下问题，我们会为你解答哦\r\n","createdAt":1614581693215},{"id":5536,"originId":"603dfda94655ea52f22193b5","articleId":1002,"userId":21,"content":"为啥这个招聘能直接顶置？cnode关系户？","createdAt":1614675369284},{"id":5537,"originId":"603e25584655eac70e219440","articleId":1002,"userId":2,"content":"[@zy445566](/user/zy445566) 对的","createdAt":1614685528295},{"id":5538,"originId":"6040fef64655ea76ef219c39","articleId":1002,"userId":2081,"content":"欢迎同学们的到来","createdAt":1614872310490},{"id":5539,"originId":"60459a514655ea205221a37e","articleId":1002,"userId":2082,"content":"貌似只是在「招聘」板块置顶，手动 upup，也欢迎大家踊跃投递简历到生产力协同团队，猛戳我们的招聘文《[同学，来做同事呀！](https://www.yuque.com/yuque/blog/dl4f9t)》了解更多","createdAt":1615174225780},{"id":5540,"originId":"606b11e24d20cbf3fd68a391","articleId":1002,"userId":2083,"content":"123","createdAt":1617629666782},{"id":5541,"originId":"608e70894d20cbdf4d68fd98","articleId":1002,"userId":84,"content":"[@SpreadWater](/user/SpreadWater) 涛哥流批","createdAt":1619947657353},{"id":5542,"originId":"5ec37f85a87fc8583363d1d3","articleId":1003,"userId":90,"content":"不如写个购房补贴😄。","createdAt":1589870469656},{"id":5543,"originId":"5ec3e0a8a87fc8583363d2f1","articleId":1003,"userId":2,"content":"深圳有坑吗？","createdAt":1589895336294},{"id":5544,"originId":"5ec8f026a87fc8583363dd8a","articleId":1003,"userId":419,"content":"没有成都","createdAt":1590226982477},{"id":5545,"originId":"5ecdc97082b588109b646369","articleId":1003,"userId":44,"content":"广州的岗位情况如何","createdAt":1590544752826},{"id":5546,"originId":"60498e744655eac0db21ae5b","articleId":1003,"userId":2085,"content":"广州也有severless和Node.js基础工程的团队吗？还是只有test infra","createdAt":1615433332810},{"id":5547,"originId":"605481c3dac542f956e28776","articleId":1003,"userId":125,"content":"gulu很好用，后端能力整合得非常完整，幸福里前端也在大量招聘：https://cnodejs.org/topic/5fe0776e98427e3c116a9a3c","createdAt":1616150979196},{"id":5548,"originId":"6062e2212357dd0f45f9de56","articleId":1003,"userId":2085,"content":"[@Tseian](/user/Tseian) 广州这边的web infra团队是不是没有hc了?给了hr简历后，她跟我说没有hc让我去面试教育业务","createdAt":1617093153042},{"id":5549,"originId":"608e70a24d20cb80de68fd9b","articleId":1003,"userId":84,"content":"呜呜呜，带带我","createdAt":1619947682762},{"id":5550,"originId":"6098dd724d20cb4620691e35","articleId":1003,"userId":2084,"content":"up","createdAt":1620630898376},{"id":5551,"originId":"6098c43c4d20cb5744691ceb","articleId":1006,"userId":620,"content":"欢迎加入我们，让开发更简单，用技术改变世界","createdAt":1620624444937},{"id":5552,"originId":"6098a7cf4d20cb0fb9691c00","articleId":1008,"userId":2088,"content":"岗位还在招聘，感兴趣的盆友简历砸过来哟～","createdAt":1620617167050},{"id":5553,"originId":"609672394d20cb1bc7691547","articleId":1011,"userId":2089,"content":"持续招人中，欢迎投递简历🙏","createdAt":1620472377242},{"id":5554,"originId":"609646344d20cbbf82691437","articleId":1012,"userId":2090,"content":"欢迎各位大佬投递简历","createdAt":1620461108024},{"id":5555,"originId":"60862e7a4d20cb52c968ea1a","articleId":1013,"userId":2091,"content":"如果愿意转语言也OK的哦","createdAt":1619406458156},{"id":5556,"originId":"60893c744d20cb170368f4e7","articleId":1013,"userId":2091,"content":"如果之前只是做前端，愿意Nodejs转后端也可以的哦","createdAt":1619606644338},{"id":5557,"originId":"6095ea6e4d20cbcc2b691044","articleId":1013,"userId":2092,"content":"工作地点在深圳哪里","createdAt":1620437614556},{"id":5558,"originId":"6095edec4d20cb087069107e","articleId":1013,"userId":2091,"content":"[@yinsu](/user/yinsu) 在南山科技园哦","createdAt":1620438508067},{"id":5559,"originId":"6004ee365d04acd318217489","articleId":1014,"userId":2093,"content":"**职位详情**\r\n\r\n******(Senior) Software Engineer – C++, Java ******\r\nHangzhou, China\r\nFull-time\r\n\r\nThe Role:\r\nThe Senior Software Engineer will be a key member of an Agile Software Development team performing C++ or Java development. In this role, you will provide our customers with the most powerful, scalable, and user-friendly platforms for analytics, mobility, and security. You play a role in enabling MicroStrategy products to be best-in-breed and optimized for leading organizations to analyze big data and distribute actionable business insight across their enterprise.\r\n\r\nJob Description:\r\n• Lead the design and implementation of MicroStrategy software platforms, applications, and features.\r\n• Proactively participate in every aspect of the entire software development lifecycle of feature development, including input on specifications, designs, implementation, test design, test implementation, optimization, and delivery.\r\n• Support technical support engineers with high-level and escalated customer issues.\r\n• Participate in peer code reviews, knowledge sharing, and SCRUM meetings.\r\n• Learn an array of new technologies and make enhancements and improvements to software products and development processes.\r\n\r\nQualifications:\r\nBachelor’s degree in Computer Science or similar program; Master’s degree is preferred.\r\nMinimum 4 years of software development experience with real world knowledge of data structures, algorithms, operation systems, and other fundamental concepts.\r\nStrong C++ or Java skills in client or server-side development.\r\nFamiliarity with SQL, RDBMS, JNI, JDBC or web services is a good plus.\r\nStrong debugging, analytical, and problem-solving skills.\r\nGood communication in English, team-oriented individual, energetic, strong learning ability, result and delivery oriented.\r\n\r\n\r\n******(Senior) Software Engineer – JavaScript ******\r\nThe Role:\r\nThe Software Engineer will be a key member of an Agile Software Development team performing JavaScript development. In this role, you will provide our customers with the most powerful, scalable, and user-friendly platforms for analytics, mobility, and security. You play a role in enabling MicroStrategy products to be best-in-breed and optimized for leading organizations to analyze big data and distribute actionable business insight across their enterprise.\r\n\r\nJob Description:\r\n• Lead the design and implementation of MicroStrategy software platforms, applications, and features.\r\n• Proactively participate in every aspect of the entire software development lifecycle of feature development, including input on specifications, designs, implementation, test design, test implementation, optimization, and delivery.\r\n• Support technical support engineers with high-level and escalated customer issues.\r\n• Participate in peer code reviews, knowledge sharing, and SCRUM meetings.\r\n• Learn an array of new technologies and make enhancements and improvements to software products and development processes.\r\n\r\nQualifications:\r\n• Bachelor’s degree in Computer Science or similar program; Master’s degree is preferred.\r\n• Minimum 1 year of software development experience with real world knowledge of data structures, algorithms, operation systems, and other fundamental concepts.\r\n• Strong knowledge of front-end web technologies: JavaScript, HTML5, CSS is required.\r\n• Familiarity with React, ES6 or REST is a plus.\r\n• Have any knowledge of Java frameworks like Jersey, Spring, servlet technologies, Java app containers like Jetty, Tomcat, etc. is a good plus.\r\n• Strong debugging, analytical, and problem-solving skills.\r\n• Good communication in English, team-oriented individual, energetic, strong learning ability, result and delivery oriented.\r\n\r\n\r\n******Support Engineer ******\r\n\r\nThe Role:\r\nMicroStrategy Technical Support ensures the success of our customers’ investment in our technology. This dedicated and uniquely talented team of engineers provides unmatched service to our worldwide customers and partners through commitment to customer satisfaction and dedication to personalized support. The group’s mission is simple: maintain the continuity and efficiency of MSTR BI solutions through a range of options from access to product-specific knowledge bases, to access to 24x7 product experts, to the extension of dedicated support engineers, etc. The department offers four levels of services: Standard Support, Extended Support, Premier Support, and Elite Support. Wherever your skill level lies and your ambition pushes you, there is a place for you as part of this high-energy, collaborative team.\r\n\r\nJob Description:\r\n• Provide complex and challenging support for MicroStrategy’s Business Intelligence product suite and its underlying technologies.\r\n• Develop strong relationships with MicroStrategy customers and partners through daily interactions during customer project development and production system maintenance.\r\n• Find creative and sophisticated solutions to problems reported while using MicroStrategy’s product suite through analytical talent and strong troubleshooting abilities.\r\n• Work in a strong team environment to provide unparalleled support to customers in a wide variety of industries.\r\n• Prioritize and communicate product defects and enhancements to development teams.\r\n• Contribute to research and growth of the MicroStrategy Knowledge Base by creating customer-facing documentation of all technical solutions and product documentation addendums.\r\n• Enhance personal and professional growth by participating in Internal Training Programs, which offer a five-week technical orientation program as well as weekly training seminars for all team members.\r\n\r\nQualifications:\r\n• Bachelor’s degree, preferably in a technical field (Engineering, Physics, Mathematics, Computer Science, etc.).\r\n• Strong technical and analytical skills.\r\n• Excellent communication skills\r\n• Java, Visual Basic, HTML, XML/XSL, ASP, SQL technologies are a plus.\r\n• Database (SQL, RDBMS) knowledge is a plus.\r\n• Customer service experience is a plus.\r\n\r\n******Cloud Product Specialist ******\r\n\r\nJob Description:\r\n• Take ownership of cross-team issues and Cloud service issues including pro-actively communicating across teams to coordinate activities.\r\n• Create automation and experiment with the latest technologies for next-generation product backends in AWS and Azure.\r\n• Design for quality, robustness, and performance, with common principles, patterns, and best practices.\r\n• Identify and drive opportunities for improving the MCE service and infrastructure maintenance/management.\r\n• Direct support for customer upgrades, strategic customer escalations, and feature validation.\r\n• Customer escalations resolution and preventative maintenance for lessons learned.\r\n• Design and run automated tests. Continuously improve software development, building, testing, and deployment processes.\r\n• Collaborate with and support other engineers within the team and from other teams in China, the United States, and Poland.\r\n\r\nQualifications:\r\n• BSc/MSc in Computer Science, Computer Engineering, Software Engineering or a related discipline preferred.\r\n• Strong troubleshooting, technical and analytical skills.\r\n• Excellent communication and technical mentoring skills.\r\n• MicroStrategy Platform troubleshooting knowledge; platform usage or administration knowledge.\r\n• Previous experience with customers is required.\r\n• A Proven combination of Python, Ansible, Jenkins, and PowerShell experience is required.\r\n• Experience with RedHat, Amazon Linux, and Windows is highly preferred.\r\n• Experience with deployments in AWS or Azure is highly preferred.\r\n• Solid understanding of web and internet architectures. REST and microservices practices are highly preferred.\r\n• Good communication skills in English and the ability to work as part of a team.","createdAt":1610935862309},{"id":5560,"originId":"60064c365d04ac1f2f217746","articleId":1014,"userId":2093,"content":"有问题没问题都可以联系我。","createdAt":1611025462580},{"id":5561,"originId":"60068f205d04ac93ba2177fd","articleId":1014,"userId":406,"content":"吃了外语烂的亏。。。。呵呵,不然挺好的","createdAt":1611042592766},{"id":5562,"originId":"6007bdb55d04acd1902179d0","articleId":1014,"userId":2093,"content":"[@cnlile](/user/cnlile) 英语不用太流利，能开口说就行。但是工作语言是英语（书面）。","createdAt":1611120053702},{"id":5563,"originId":"6007bdba5d04ac3cc72179d4","articleId":1014,"userId":2093,"content":"快过年咯。加油！\r\n\r\n【职位列表】\r\n-           Software Engineer - C++, Java  \r\n-           Senior Software Engineer – C++,Java   \r\n-           Software Engineer – JavaScript\r\n-           Senior Software Engineer –JavaScript   \r\n-           Cloud Product Specialist\r\n-           Support Engineer   ","createdAt":1611120058898},{"id":5564,"originId":"6008d9885d04acfc44217b97","articleId":1014,"userId":160,"content":"针不戳，可惜不能去杭州\r\n","createdAt":1611192712551},{"id":5565,"originId":"60091dda5d04ac0d18217cb1","articleId":1014,"userId":2093,"content":"[@xiashulin](/user/xiashulin) 好可惜啊。周一是在家上班的，4天在杭州考虑么？ ","createdAt":1611210202456},{"id":5566,"originId":"60091e005d04ac7917217cb7","articleId":1014,"userId":2093,"content":"技术支持工程师 (欢迎2020/2021届应届生）\r\n其余为社招职位哦。","createdAt":1611210240399},{"id":5567,"originId":"600bae685d04acf93a2181c7","articleId":1014,"userId":2093,"content":"黄龙万科好地方呢。","createdAt":1611378280484},{"id":5568,"originId":"6014fd3303d7976cb966e072","articleId":1014,"userId":2093,"content":"后天又要在家上班啦。","createdAt":1611988275977},{"id":5569,"originId":"60166a0903d797b74966e20f","articleId":1014,"userId":2093,"content":"HR 会优先筛选内推简历，如果技术及工作经验极度匹配的话，会直达技术负责人过目。\r\n我会全程跟进，及时提供前期准备，笔试，面试意见，当天反馈信息，让你离理想的职位更近一步。\r\n\r\n注意： 免费，免费，免费。 ","createdAt":1612081673371},{"id":5570,"originId":"601e94fd03d797c49366f4ca","articleId":1014,"userId":2093,"content":"快过年了。加油！","createdAt":1612616957228},{"id":5571,"originId":"6020cfca03d797342966f822","articleId":1014,"userId":2093,"content":"年前的冲刺啦。","createdAt":1612763082182},{"id":5572,"originId":"602f49e203d79731b16702cf","articleId":1014,"userId":2093,"content":"新年好！希望大家再接再厉，都拿到梦想中的offer.","createdAt":1613711842892},{"id":5573,"originId":"6031fdda03d797761b670b0a","articleId":1014,"userId":2093,"content":"周一 work from home 了。 抖音卸载很久了，要不再装上吧。","createdAt":1613888986874},{"id":5574,"originId":"6038697e4655eaf4d8218849","articleId":1014,"userId":2093,"content":"Java 开发\r\n✔️ 计算机科学与技术，软件工程专业，本科 /硕士学历；\r\n✔️ 具备一定的英语沟通能力；\r\n✔️ 1 年以上 Java 开发实操经验~\r\n\r\nC++开发\r\n✔️ 计算机科学与技术，软件工程专业，本科 /硕士学历\r\n✔️ 具备一定的英语沟通能力；\r\n✔️ 1 年以上 C++开发实操经验~;\r\n\r\nJavascript 开发\r\n✔️ 计算机科学与技术，软件工程专业，本科 /硕士学历\r\n✔️ 具备一定的英语沟通能力；\r\n✔️ 1 年以上前端开发实操经验~\r\n\r\ndevops 工程师\r\n✔️ 计算机科学与技术，软件工程专业，本科学历，\r\n✔️ 具备一定的英语沟通能力；\r\n✔️ 3 年以上 python，linux 相关实操经验~；\r\n\r\n技术支持工程师\r\n✔️ 理工科背景+优秀的英语能力(需和国外 BI 专家级别对接~\r\n✔️ 经验不限，感兴趣的童鞋别犹豫!(欢迎 2020/2021 届应届生","createdAt":1614309758927},{"id":5575,"originId":"6042f7eb4655ea41fa219fbd","articleId":1014,"userId":2093,"content":"有问题可以联系我。","createdAt":1615001579771},{"id":5576,"originId":"6048659d4655eae56b21ac7e","articleId":1014,"userId":2093,"content":"互联网企业真的存在跳槽闭环么","createdAt":1615357341541},{"id":5577,"originId":"604dbac74655ea7d0721b5de","articleId":1014,"userId":2093,"content":"新出职位：\r\n-  Associate cloud system engineer \r\nhttps://smrtr.io/52ppW\r\n\r\nJob Requirements:\r\n\r\nTechnical education (B.Sc. preferred) or experience in IT roles strongly preferred.\r\nAt least 1 year of experience in a related field with a proven track record of consistently exceeding corporate objectives.\r\nAWS, Azure or Python experience is a plus.\r\nPractical experience managing critical customer issues is a plus.\r\nMust possess an enthusiastic personality and foster a positive work environment.\r\nStrong written and verbal communication skills in English is a must.\r\nWell organized with effective time management skills.\r\nTeam player- always willing to give support to others and ask for help if needed.\r\nAbility to work independently.\r\nAttention to detail.","createdAt":1615706823153},{"id":5578,"originId":"604ef29e4655eaaee521b7eb","articleId":1014,"userId":2093,"content":"周一 work from home。 美滋滋","createdAt":1615786654040},{"id":5579,"originId":"6059bc04dac5422b71e29236","articleId":1014,"userId":2093,"content":"虚位以待哦。","createdAt":1616493572769},{"id":5580,"originId":"605ed5701b33873b3d5dabf5","articleId":1014,"userId":2093,"content":"周一在家上班，周末才刚刚开始呀","createdAt":1616827760451},{"id":5581,"originId":"60603f311b33873a3b5dade3","articleId":1014,"userId":2093,"content":"下雨天就适合在家睡觉，晴天就适合出门走走，漫长岁月，居然没有一天适合上班！","createdAt":1616920369053},{"id":5582,"originId":"606802552357dd3d5df9e976","articleId":1014,"userId":2093,"content":"小时候难过会哭,长大后难过会笑。","createdAt":1617429077898},{"id":5583,"originId":"606ab5f24d20cb535a68a289","articleId":1014,"userId":2093,"content":"没有天生的信心，只有不断培养的信心。","createdAt":1617606130818},{"id":5584,"originId":"606eaca04d20cb970268ad68","articleId":1014,"userId":2093,"content":"用时间和心看人，而不是用眼睛","createdAt":1617865888585},{"id":5585,"originId":"607926084d20cb826468cc15","articleId":1014,"userId":2093,"content":"人生最重要的不是所站的位置，而是所朝的方向。","createdAt":1618552328294},{"id":5586,"originId":"6094c86d4d20cb284d690ad2","articleId":1014,"userId":2093,"content":"低调做员工，高调做工作。","createdAt":1620363373984},{"id":5587,"originId":"6094acc64d20cb2fa9690a49","articleId":1016,"userId":419,"content":"广州玩趣网络科技有限公司？","createdAt":1620356294602},{"id":5588,"originId":"60541e46dac5422fb3e284dd","articleId":1017,"userId":248,"content":"Egg + TS，试试 Midway.js v2 吧。可以从这个项目上手 https://github.com/fsd-nodejs/service-mw2","createdAt":1616125510287},{"id":5589,"originId":"6057fb77dac5420283e28ba3","articleId":1017,"userId":2096,"content":"[@tkvern](/user/tkvern) egg 👍，是原有项目还在跑，现在新项目都用上内部的 ts 框架了哈😊","createdAt":1616378743870},{"id":5590,"originId":"60599bdddac5421e74e2915d","articleId":1017,"userId":248,"content":"[@xuezier](/user/xuezier) Node.js 注意检查下拼写","createdAt":1616485341746},{"id":5591,"originId":"60640a452357dd4e31f9e085","articleId":1017,"userId":2096,"content":"求简历呀","createdAt":1617168965147},{"id":5592,"originId":"606462892357dd2e8cf9e1da","articleId":1017,"userId":406,"content":"能远程工作吗","createdAt":1617191561688},{"id":5593,"originId":"6067e59a2357dd536df9e95d","articleId":1017,"userId":2097,"content":"想在厦门找工作的菜鸡能向楼主请教下吗","createdAt":1617421722362},{"id":5594,"originId":"606d195c4d20cb7fc068a8ea","articleId":1017,"userId":2096,"content":"[@HeliumTang](/user/HeliumTang) 可以加下我的微信哈，备注下 cnode 社区","createdAt":1617762652948},{"id":5595,"originId":"606d19774d20cbeacf68a8ed","articleId":1017,"userId":2096,"content":"[@cnlile](/user/cnlile) 这样的工作我也想要😭","createdAt":1617762679530},{"id":5596,"originId":"607022474d20cb6a2268b13f","articleId":1017,"userId":2096,"content":"海量岗位等大家来投啦","createdAt":1617961543503},{"id":5597,"originId":"60779ba54d20cbaa2c68c4b9","articleId":1017,"userId":2096,"content":"岗位长期招人，有兴趣的小伙伴赶紧加入呀","createdAt":1618451365397},{"id":5598,"originId":"60949db34d20cb315b690a00","articleId":1017,"userId":2096,"content":"岗位长期招人，欢迎有兴趣的小伙伴赶紧加入呀\r\n\r\n","createdAt":1620352435442},{"id":5599,"originId":"6094abde4d20cb2a14690a3f","articleId":1017,"userId":419,"content":"来成都建厂吧","createdAt":1620356062284},{"id":5600,"originId":"609430af4d20cb69856909b3","articleId":1018,"userId":141,"content":"有兴趣的请Email你的简历jtech_2013@hotmail.com。 这是全职工作。如果想要实习，你也可以单独联系Email。 ","createdAt":1620324527138},{"id":5601,"originId":"6094307b4d20cb0c046909ae","articleId":1019,"userId":141,"content":"有兴趣的请Email你的简历jtech_2013@hotmail.com","createdAt":1620324475642},{"id":5602,"originId":"603471394655ea19cf217acf","articleId":1020,"userId":125,"content":"居然一个简历都没收到，这次我们着重挖掘一下21年马上要毕业的同学。\r\n由于各种认知，经验，或者机遇的差距，21毕业的很多基础好，聪明的优秀同学可能没拿到好的offer，委屈进了小厂，甚至外包公司，这里绝对是一个机会。","createdAt":1614049593592},{"id":5603,"originId":"6034a1744655ea133a217bab","articleId":1020,"userId":148,"content":"后段golang招吗？","createdAt":1614061940933},{"id":5604,"originId":"6035c2204655eaded7217ffe","articleId":1020,"userId":125,"content":"[@muyoucun557](/user/muyoucun557) 求加微信，缺人严重，半年内都会比较好进","createdAt":1614135840002},{"id":5605,"originId":"605493cddac54293bfe287b7","articleId":1020,"userId":125,"content":"come on, 顶一下，offer多多","createdAt":1616155597765},{"id":5606,"originId":"6054aa42dac5427a6ee2881b","articleId":1020,"userId":159,"content":"有上海的吗？","createdAt":1616161346434},{"id":5607,"originId":"605801aadac5427516e28bd7","articleId":1020,"userId":125,"content":"[@enzeberg](/user/enzeberg) 上海团队目前只有后端","createdAt":1616380330034},{"id":5608,"originId":"6059575fdac54296ebe28f56","articleId":1020,"userId":159,"content":"[@dlutwuwei](/user/dlutwuwei) 后端是啥技术栈呢？有将近5年 node.js 开发经验能应聘吗？","createdAt":1616467807984},{"id":5609,"originId":"60597e47dac542dcace29047","articleId":1020,"userId":125,"content":"[@enzeberg](/user/enzeberg) 当然没问题，后端我们主要是go和python，其实语言没关系，我们后端一般不在乎语言，大部门同事以前也没写过go","createdAt":1616477767721},{"id":5610,"originId":"6059b88bdac5423ec1e29224","articleId":1020,"userId":159,"content":"[@dlutwuwei](/user/dlutwuwei) go 我也有学习。","createdAt":1616492683800},{"id":5611,"originId":"605d5e285ac88cec6315b28c","articleId":1020,"userId":125,"content":"招聘进度同步：\r\n**已经发出15个offer，今年离目标还差60人，求贤若渴**","createdAt":1616731688952},{"id":5612,"originId":"606149062357dd5b60f9d874","articleId":1020,"userId":125,"content":"**求贤若渴**","createdAt":1616988422939},{"id":5613,"originId":"606446c12357dde2e2f9e16a","articleId":1020,"userId":125,"content":"求贤若渴","createdAt":1617184449873},{"id":5614,"originId":"608a60454d20cba30868f77c","articleId":1020,"userId":125,"content":"实习生招聘非常顺利，非常缺社招的同学","createdAt":1619681349648},{"id":5615,"originId":"6093c9834d20cb63466908a2","articleId":1020,"userId":125,"content":"各位非常缺社招的同学哇","createdAt":1620298115074},{"id":5616,"originId":"60893af74d20cb2b1868f4d7","articleId":1021,"userId":16,"content":"m","createdAt":1619606263665},{"id":5617,"originId":"608944cc4d20cbe0ca68f513","articleId":1021,"userId":98,"content":"想得美，全职Node都找不到工作","createdAt":1619608780768},{"id":5618,"originId":"609330054d20cb00e5690535","articleId":1021,"userId":141,"content":"[@zengming00](/user/zengming00) 我们在招：https://cnodejs.org/topic/60932ae04d20cb765269052d","createdAt":1620258821390},{"id":5619,"originId":"608a8fb34d20cb198d68f855","articleId":1026,"userId":98,"content":"随缘","createdAt":1619693491517},{"id":5620,"originId":"6087f8454d20cbba1f68f0f4","articleId":1027,"userId":105,"content":"看起来很不错。","createdAt":1619523653091},{"id":5621,"originId":"608814c04d20cb411068f17a","articleId":1027,"userId":2105,"content":"[@haijianyang](/user/haijianyang) 感兴趣可以来聊聊哦 ","createdAt":1619530944288},{"id":5622,"originId":"608762d34d20cbdfef68edad","articleId":1028,"userId":98,"content":"随缘","createdAt":1619485395266},{"id":5623,"originId":"6088070a4d20cb4d4968f126","articleId":1028,"userId":2107,"content":"哇塞，MBP, 升降桌， 人体工程学椅，爱了爱了","createdAt":1619527434918},{"id":5624,"originId":"608268dd4d20cb0a2e68e3ed","articleId":1030,"userId":98,"content":"随缘","createdAt":1619159261673},{"id":5625,"originId":"60852df04d20cbac8868e8d9","articleId":1030,"userId":2109,"content":"[@zengming00](/user/zengming00)  考虑换工作吗~~· ","createdAt":1619340784583},{"id":5626,"originId":"60861c9a4d20cb006068e9c3","articleId":1030,"userId":95,"content":"[@zengming00](/user/zengming00) 好家伙","createdAt":1619401882667},{"id":5627,"originId":"6085fc604d20cb6a1868e992","articleId":1031,"userId":2110,"content":"有兴趣的童鞋 可以加我微信 island205 详细聊聊","createdAt":1619393632003},{"id":5628,"originId":"607e39804d20cb726b68d509","articleId":1032,"userId":160,"content":"竟然木有大武汉","createdAt":1618884992321},{"id":5629,"originId":"6085734f4d20cb589668e96d","articleId":1032,"userId":2111,"content":"[@xiashulin](/user/xiashulin) 我们部门没有，不过其他研发部门有base 武汉。你要去武汉职场吗？","createdAt":1619358543043},{"id":5630,"originId":"5d6e53d8a7474a231a58895c","articleId":1033,"userId":2112,"content":"顶一下","createdAt":1567511512595},{"id":5631,"originId":"5dad1ce4ece3813ad9ba30e0","articleId":1033,"userId":2112,"content":"顶一下，继续招人招人招人。。。","createdAt":1571626212043},{"id":5632,"originId":"5dad4505865a9844a301c9ca","articleId":1033,"userId":2112,"content":"紧急招人，来信必富","createdAt":1571636485200},{"id":5633,"originId":"5db28fddece3813ad9ba42e6","articleId":1033,"userId":2112,"content":"紧急招人，来信必富","createdAt":1571983325579},{"id":5634,"originId":"5db69f8e865a9844a301e3c1","articleId":1033,"userId":2112,"content":"紧急招人，来信必富\r\n\r\n","createdAt":1572249486573},{"id":5635,"originId":"5db7e516ece3813ad9ba4f72","articleId":1033,"userId":2112,"content":"顶一个\r\n\r\n","createdAt":1572332822473},{"id":5636,"originId":"5db84668865a9844a301e96a","articleId":1033,"userId":2113,"content":"你好像没写坐标啊，难道默认杭州？","createdAt":1572357736599},{"id":5637,"originId":"5db8f739865a9844a301eac9","articleId":1033,"userId":2112,"content":"[@imingyu](/user/imingyu) 杭州和北京都可以的","createdAt":1572403001669},{"id":5638,"originId":"5dc14996ece3813ad9ba6787","articleId":1033,"userId":2112,"content":"急招啊，自荐赠送 air pods pro ~~~","createdAt":1572948374602},{"id":5639,"originId":"5dc4ff95ece3813ad9ba7123","articleId":1033,"userId":2112,"content":"急招啊，自荐赠送 air pods pro ~~~\r\n\r\n","createdAt":1573191573361},{"id":5640,"originId":"5dc90b99ece3813ad9ba7a35","articleId":1033,"userId":161,"content":"[@chaoren1641](/user/chaoren1641) vue项目用的多，搭建过项目和封装过组建，react会用和造轮子。面试会问很多react的问题么？","createdAt":1573456793855},{"id":5641,"originId":"5dc94b28ece3813ad9ba7b1e","articleId":1033,"userId":2112,"content":"[@tzbcf](/user/tzbcf) 不会，框架只是工具，工作中用Vue多那就会问Vue，基础扎实和有思考和沉淀就行","createdAt":1573473064224},{"id":5642,"originId":"5dd26358a9f4592e749e1882","articleId":1033,"userId":2112,"content":"急招啊，自荐赠送 air pods pro ~~~","createdAt":1574069080199},{"id":5643,"originId":"5de635b76043397a546db4f5","articleId":1033,"userId":2112,"content":"顶~","createdAt":1575368119638},{"id":5644,"originId":"5df5fe9e28dce75de5435cc2","articleId":1033,"userId":2112,"content":"常年招聘，顶~~~","createdAt":1576402590023},{"id":5645,"originId":"5df9c4fd0696c446bf64ef64","articleId":1033,"userId":2112,"content":"多来顶一下","createdAt":1576649981726},{"id":5646,"originId":"5e09e041ba8f6d46c4edfe80","articleId":1033,"userId":2112,"content":"多来顶一下\r\n\r\n","createdAt":1577705537632},{"id":5647,"originId":"5e17148e4bea432607fcdd91","articleId":1033,"userId":2112,"content":"缺人缺人缺人。。。","createdAt":1578570894886},{"id":5648,"originId":"5e36da811225c9423dcd95a1","articleId":1033,"userId":2112,"content":"宅家不如来面试呀","createdAt":1580653185938},{"id":5649,"originId":"5e4d26f31225c9423dcda762","articleId":1033,"userId":2112,"content":"远程面试搞定offer，快来","createdAt":1582114547126},{"id":5650,"originId":"5e6f28f545fcf75ee50e4a74","articleId":1033,"userId":2112,"content":"远程面试搞定offer，快来\r\n\r\n","createdAt":1584343285382},{"id":5651,"originId":"5e7af99958ab6717beb7c985","articleId":1033,"userId":2112,"content":"远程面试搞定offer，快来\r\n\r\n","createdAt":1585117593765},{"id":5652,"originId":"5e8e982064259617c49a5020","articleId":1033,"userId":2112,"content":"急招","createdAt":1586403360366},{"id":5653,"originId":"5e9d64d3d870946c6b6bd28d","articleId":1033,"userId":2112,"content":"急招","createdAt":1587373267843},{"id":5654,"originId":"5ec257ec67c8a45803da0629","articleId":1033,"userId":2112,"content":"急招","createdAt":1589794796311},{"id":5655,"originId":"5ecb6557a87fc8583363e006","articleId":1033,"userId":2112,"content":"急招","createdAt":1590388055895},{"id":5656,"originId":"5ed4bd9a82b588109b646f58","articleId":1033,"userId":2112,"content":"急招\r\n\r\n","createdAt":1591000474005},{"id":5657,"originId":"5ee21078b703280f0bcb92c4","articleId":1033,"userId":2112,"content":"急招\r\n\r\n","createdAt":1591873656488},{"id":5658,"originId":"5ef88674472c7975b04b7d3b","articleId":1033,"userId":2112,"content":"顶~~","createdAt":1593345652682},{"id":5659,"originId":"5f0ffd3d4b61050e36e7ac5d","articleId":1033,"userId":2112,"content":"顶~~","createdAt":1594883389884},{"id":5660,"originId":"5f2126c5f0739b0e62d12ae8","articleId":1033,"userId":2112,"content":"顶~~","createdAt":1596008133078},{"id":5661,"originId":"5f4f3ce1e8a599751bb51d0a","articleId":1033,"userId":2112,"content":"顶~~","createdAt":1599028449872},{"id":5662,"originId":"5f719ff272af8c02d3f8dc5f","articleId":1033,"userId":2112,"content":"顶~~","createdAt":1601282034331},{"id":5663,"originId":"608519314d20cb019a68e868","articleId":1033,"userId":2112,"content":"继续招，顶！","createdAt":1619335473442},{"id":5664,"originId":"6080d0544d20cbd4bb68db90","articleId":1035,"userId":2114,"content":"比子弹更能击中人心的，唯有你的厨艺","createdAt":1619054676215},{"id":5665,"originId":"607ff5a84d20cb716368da59","articleId":1036,"userId":2115,"content":"欢迎转发投递～","createdAt":1618998696953},{"id":5666,"originId":"607d0d3e4d20cb4d7c68d1f5","articleId":1037,"userId":2116,"content":"顶贴，欢迎投递","createdAt":1618808126223},{"id":5667,"originId":"607f9b4e4d20cbb25968d8fc","articleId":1037,"userId":2116,"content":"顶贴，欢迎投递\r\n\r\n","createdAt":1618975566889},{"id":5668,"originId":"607f2bd94d20cb578768d870","articleId":1039,"userId":141,"content":"如果非暑假期间，可以课余根据自己的时间决定。可以以您能工作的小时算工资","createdAt":1618947033374},{"id":5669,"originId":"606462552357dd61a6f9e1d3","articleId":1040,"userId":406,"content":"我对远程全栈工作更感兴趣啊！能说一下全栈开发工程师 的要求吗？","createdAt":1617191509828},{"id":5670,"originId":"606e65964d20cb9e2968ac60","articleId":1040,"userId":2088,"content":"[@cnlile](/user/cnlile) 可以加我微信：ooleeoo详谈哦。","createdAt":1617847702690},{"id":5671,"originId":"6073a5ec4d20cb3b4668b523","articleId":1040,"userId":2088,"content":"还在持续招聘，感兴趣的朋友联系我呀～","createdAt":1618191852360},{"id":5672,"originId":"607e76244d20cbcdbb68d5f3","articleId":1040,"userId":2088,"content":"感兴趣的朋友联系我哦～","createdAt":1618900516377},{"id":5673,"originId":"5d2c39b8c5fe2549619ae8eb","articleId":1041,"userId":2118,"content":"前端大四的招不？","createdAt":1563179448055},{"id":5674,"originId":"605807e6dac54264bbe28c1c","articleId":1041,"userId":2117,"content":"长期内推贴","createdAt":1616381926134},{"id":5675,"originId":"605dba311b3387b8535daa44","articleId":1041,"userId":2117,"content":"[@newcaptain](/user/newcaptain) 招聘实习生的，限2021届、2022届","createdAt":1616755249684},{"id":5676,"originId":"607d232f4d20cb7c7c68d268","articleId":1041,"userId":2117,"content":"黄浦区-前端\r\n\r\n工作内容: \r\n\r\n负责开发数据平台应用，可视化相关的平台，机器学习平台，洞察平台，探索可视化数据在各个业务领域的展现和应用，包括数据大屏、数据产品和可视化创新: \r\n\r\n岗位职责：\r\n\r\n1、与数据科学家一起合作，负责数据产品的开发工作；\r\n\r\n2、为公司各业务线日常工作以及重要公关场景，开发视觉优先的数据大屏；\r\n\r\n3、为展示优先和业务优先的可视化场景定制设计规范；\r\n\r\n4、与设计团队探索更紧密的工作流；\r\n\r\n5、合理安排工作，即时的完成阶段性目标。\r\n\r\n\r\n\r\n岗位要求：\r\n\r\n\r\n\r\n1、本科及以上学历，3年及以上工作经验；\r\n\r\n2、工作流基于react + redux，熟悉nodejs；\r\n\r\n3、具有良好的代码书写规范，熟悉git，npm，webpack等常规工具，有dva的经验者更佳；\r\n\r\n4、对canvas，svg, webgl有了解，在可视化的展现有自己的理解和经验；\r\n\r\n5、具有良好的逻辑能力，能独立解决问题和快速提供解决方案；\r\n\r\n6、有创新能力、良好的团队协作能力；\r\n\r\n7、有类似地图，关系图等可视化经验者优先。","createdAt":1618813743428},{"id":5677,"originId":"60506c904655ea05ce21bc99","articleId":1042,"userId":248,"content":"熟悉 React 的同学，看过来～","createdAt":1615883408584},{"id":5678,"originId":"6051f593dac5424893e27e50","articleId":1042,"userId":248,"content":"大量HC","createdAt":1615984019944},{"id":5679,"originId":"605d7fb05ac88c264c15b313","articleId":1042,"userId":248,"content":"沙发～","createdAt":1616740272744},{"id":5680,"originId":"60793bc64d20cb80f768ccdf","articleId":1042,"userId":1138,"content":"好公司 😝","createdAt":1618557894065},{"id":5681,"originId":"6074ef204d20cb80f168b9d5","articleId":1043,"userId":1138,"content":"欢迎大家加入。","createdAt":1618276128608},{"id":5682,"originId":"60793b8e4d20cb7fa668ccd8","articleId":1043,"userId":1138,"content":"优秀团队急需","createdAt":1618557838967},{"id":5683,"originId":"606462ab2357dde5bef9e1e2","articleId":1045,"userId":406,"content":"能远程工作吗？","createdAt":1617191595228},{"id":5684,"originId":"60654e8c2357dd5b1ff9e391","articleId":1045,"userId":2120,"content":"[@cnlile](/user/cnlile) 你是在哪里的？","createdAt":1617251980741},{"id":5685,"originId":"6073c66e4d20cb41e468b626","articleId":1045,"userId":2114,"content":"这招聘信息发的也是够洒脱的，哈哈哈。还要人吗","createdAt":1618200174577},{"id":5686,"originId":"607677804d20cbbbf568c15c","articleId":1045,"userId":2120,"content":"[@linkenliu](/user/linkenliu)  要人","createdAt":1618376576553},{"id":5687,"originId":"6073ff374d20cb395d68b7c4","articleId":1046,"userId":2114,"content":"公司具体地址在哪阿？5年+nodejs工作经验。之前做过otc，交易所，钱包等产品。","createdAt":1618214711579},{"id":5688,"originId":"60740f7b4d20cb19a768b82f","articleId":1046,"userId":2121,"content":"[@linkenliu](/user/linkenliu) 虹口 海伦路，相当可以，链开发也要的 核心组","createdAt":1618218875004},{"id":5689,"originId":"60753c5b4d20cb082968bbde","articleId":1046,"userId":159,"content":"顶一个！","createdAt":1618295899696},{"id":5690,"originId":"607593b34d20cb4ccc68bec3","articleId":1046,"userId":159,"content":"再顶一个！","createdAt":1618318259647},{"id":5691,"originId":"605af698dac542f273e29534","articleId":1047,"userId":2122,"content":"up","createdAt":1616574104545},{"id":5692,"originId":"607571144d20cb041968bdae","articleId":1047,"userId":2122,"content":"up","createdAt":1618309396033},{"id":5693,"originId":"6074159c4d20cb239868b85e","articleId":1051,"userId":2124,"content":"自己顶顶","createdAt":1618220444220},{"id":5694,"originId":"6073a5cd4d20cb1a0068b51f","articleId":1052,"userId":2088,"content":"还在持续招聘，感兴趣的朋友联系我呀～","createdAt":1618191821926},{"id":5695,"originId":"5f1e38aff0739b0e62d12304","articleId":1053,"userId":2126,"content":"![timg.jpeg](//static.cnodejs.org/FiE9NUkv0-G7KKdUq6FnvyD3Co3h)","createdAt":1595816111169},{"id":5696,"originId":"60506e0f4655eac6c721bcb9","articleId":1053,"userId":2125,"content":"顶一下，又开放招人啦！","createdAt":1615883791034},{"id":5697,"originId":"60700bfb4d20cb70a668b09e","articleId":1053,"userId":2125,"content":"一直招人！","createdAt":1617955835897},{"id":5698,"originId":"6073a2084d20cba97868b50d","articleId":1053,"userId":160,"content":"salary不说一下？","createdAt":1618190856791},{"id":5699,"originId":"606d46ae4d20cb1c5c68a9f9","articleId":1065,"userId":59,"content":"vx：liangtongzhuo","createdAt":1617774254367},{"id":5700,"originId":"606c03144d20cb4ab268a5d3","articleId":1066,"userId":248,"content":"Check, check.....\r\nHow about Midway.js, We are build Serverless Framework for developers easy to use, high performance to running and shape to price.\r\nIf you interest Midway.js, check this link [midwayjs.org](https://midwayjs.org/).\r\nAnd I recommend this project for novice [service-mw2](https://github.com/fsd-nodejs/service-mw2), is an best practices to Midway.js.\r\nEnjoy","createdAt":1617691412976},{"id":5701,"originId":"5e5fcf49a72b853f10045ae1","articleId":1068,"userId":117,"content":"## 方便加个好友么\r\n","createdAt":1583337289966},{"id":5702,"originId":"5e6052023cadb020b915f76e","articleId":1068,"userId":59,"content":"[@chenkai0520](/user/chenkai0520) liangtongzhuo vx","createdAt":1583370754577},{"id":5703,"originId":"5ed1dbcb82b588109b646b7b","articleId":1068,"userId":59,"content":"继续定","createdAt":1590811595810},{"id":5704,"originId":"5ed7409a82b588109b6474bf","articleId":1068,"userId":59,"content":"顶","createdAt":1591165082550},{"id":5705,"originId":"5edee97382b588109b647f76","articleId":1068,"userId":59,"content":"顶，更偏向 Node","createdAt":1591667059640},{"id":5706,"originId":"5ee2ffa0b703280f0bcb93de","articleId":1068,"userId":2132,"content":"工作经验有要求吗\r\n","createdAt":1591934880330},{"id":5707,"originId":"5eeac633472c7975b04b616a","articleId":1068,"userId":59,"content":"[@gaoxuerong](/user/gaoxuerong) 2 年以上即可，优秀 1 年也可以。","createdAt":1592444467712},{"id":5708,"originId":"5ef0249113f8b244e57cae61","articleId":1068,"userId":59,"content":"我收到很多优秀的小伙伴已经入职了","createdAt":1592796305910},{"id":5709,"originId":"5f03daa913f8b244e57cd766","articleId":1068,"userId":59,"content":"继续顶，现在还是项目缺人","createdAt":1594088105654},{"id":5710,"originId":"5f0bb8c5c927455111490cf7","articleId":1068,"userId":59,"content":"继续顶，现在还是项目缺人\r\n\r\n","createdAt":1594603717880},{"id":5711,"originId":"5f0d2eefe39d0e5152203779","articleId":1068,"userId":2133,"content":"正式员工编制？","createdAt":1594699503618},{"id":5712,"originId":"5f0fc9124b61050e36e7abc1","articleId":1068,"userId":874,"content":"学历必须本科么？三年经验，也在智慧岛上班....","createdAt":1594870034446},{"id":5713,"originId":"5f186dd1f0739b0e62d11729","articleId":1068,"userId":59,"content":"[@web-csq](/user/web-csq) 发来看看","createdAt":1595436497977},{"id":5714,"originId":"5f186e024b61050e36e7bb07","articleId":1068,"userId":59,"content":"[@buyixiaojiang](/user/buyixiaojiang) 现在事业单位没有编制了，来了给院里直接签协议。","createdAt":1595436546169},{"id":5715,"originId":"5f19409c4b61050e36e7be0c","articleId":1068,"userId":874,"content":"[@liangtongzhuo](/user/liangtongzhuo) 已发，本科是网教","createdAt":1595490460625},{"id":5716,"originId":"5f1ade69f0739b0e62d11e45","articleId":1068,"userId":59,"content":"[@web-csq](/user/web-csq) 已收到","createdAt":1595596393637},{"id":5717,"originId":"5f202487f0739b0e62d128a8","articleId":1068,"userId":59,"content":"继续收，又来一位云平台","createdAt":1595942023118},{"id":5718,"originId":"5f238ca3f0739b0e62d13054","articleId":1068,"userId":59,"content":"继续招人啦","createdAt":1596165283469},{"id":5719,"originId":"5f2a0d3f4b61050e36e7df50","articleId":1068,"userId":59,"content":"继续招人啦\r\n\r\n","createdAt":1596591423848},{"id":5720,"originId":"5f471ce8e8a599751bb51333","articleId":1068,"userId":59,"content":"继续招人啦\r\n\r\n\r\n","createdAt":1598495976837},{"id":5721,"originId":"5f559de5d22a6b1d622c7ed1","articleId":1068,"userId":59,"content":"继续招人啦\r\n\r\n","createdAt":1599446501877},{"id":5722,"originId":"5f5f3becc1c67a7dd9afe88c","articleId":1068,"userId":117,"content":"[@liangtongzhuo](/user/liangtongzhuo) 挺想回郑州的，可惜当时HR联系我有些晚，已经入职其他公司了，支持远程面试么","createdAt":1600076780542},{"id":5723,"originId":"5f5f41cbc1c67a7dd9afe8a9","articleId":1068,"userId":59,"content":"[@chenkai0520](/user/chenkai0520) 可以啊，我内推","createdAt":1600078283118},{"id":5724,"originId":"5f5faf37d22a6b1d622c8f44","articleId":1068,"userId":514,"content":"不错，好机会","createdAt":1600106295007},{"id":5725,"originId":"5f602593c1c67a7dd9afe98d","articleId":1068,"userId":117,"content":"[@liangtongzhuo](/user/liangtongzhuo) 刚入职没多久，现在就跑路不好。回到郑州要是还有招人的话，一定联系你😄","createdAt":1600136595109},{"id":5726,"originId":"5f655f2ad22a6b1d622c98bc","articleId":1068,"userId":59,"content":"[@chenkai0520](/user/chenkai0520) 嗯嗯 好的","createdAt":1600479018399},{"id":5727,"originId":"606690392357dd21aef9e627","articleId":1068,"userId":59,"content":"还继续招 2021年4月1日","createdAt":1617334329369},{"id":5728,"originId":"605d48865ac88c55af15b1d2","articleId":1070,"userId":241,"content":"顶","createdAt":1616726150934},{"id":5729,"originId":"605d80025ac88c8e6f15b31b","articleId":1070,"userId":248,"content":"JD写的不太认真哦","createdAt":1616740354856},{"id":5730,"originId":"60613dc82357dd9a2ff9d80d","articleId":1070,"userId":241,"content":"[@tkvern](/user/tkvern) 大佬，有啥建议，帮忙改进改进","createdAt":1616985544310},{"id":5731,"originId":"6061a0712357dd6252f9dafc","articleId":1070,"userId":248,"content":"不敢当，检查下技术关键字的拼写","createdAt":1617010801279},{"id":5732,"originId":"6053374edac542fc27e28308","articleId":1072,"userId":2135,"content":"自己顶一下","createdAt":1616066382104},{"id":5733,"originId":"60595db7dac5424666e28fb4","articleId":1072,"userId":2135,"content":"自己顶一下","createdAt":1616469431098},{"id":5734,"originId":"605d57d25ac88c571515b26a","articleId":1072,"userId":2135,"content":"自己顶一下","createdAt":1616730066065},{"id":5735,"originId":"606149912357dd7e1af9d884","articleId":1072,"userId":2135,"content":"自己顶一下","createdAt":1616988561256},{"id":5736,"originId":"605bf59edac54236b7e297d8","articleId":1075,"userId":2138,"content":"自顶","createdAt":1616639390862},{"id":5737,"originId":"605bfbc8dac542f703e297ed","articleId":1075,"userId":161,"content":"尴尬，你们部门天天招聘也没看人进来啦。","createdAt":1616640968898},{"id":5738,"originId":"605c2a2adac5423ecde298bb","articleId":1075,"userId":2,"content":"[@tzbcf](/user/tzbcf) 毕竟能造航母的人不多V_V!","createdAt":1616652842393},{"id":5739,"originId":"6049c2eb4655ea5d3e21af3c","articleId":1077,"userId":2140,"content":"顶一下","createdAt":1615446763939},{"id":5740,"originId":"604ef9284655ea8b1221b807","articleId":1077,"userId":2140,"content":"邮件简历时请带意向城市","createdAt":1615788328001},{"id":5741,"originId":"6052fc90dac542c26ce28144","articleId":1077,"userId":2140,"content":"继续招聘中，想要来的同学赶紧发送简历喔","createdAt":1616051344255},{"id":5742,"originId":"60544690dac5427fffe285bc","articleId":1077,"userId":2140,"content":"手工置顶","createdAt":1616135824629},{"id":5743,"originId":"60598e3edac5426eb5e290b7","articleId":1077,"userId":2140,"content":"有兴趣的同学欢迎加微信聊喔","createdAt":1616481854042},{"id":5744,"originId":"5fe429f198427e71fb6aa207","articleId":1078,"userId":2141,"content":"别沉了啊","createdAt":1608788465207},{"id":5745,"originId":"605963aadac542f109e28ff4","articleId":1078,"userId":2141,"content":"顶起来","createdAt":1616470954404},{"id":5746,"originId":"5f3213c66c9ee864cf0e4723","articleId":1079,"userId":16,"content":"支持一下","createdAt":1597117382003},{"id":5747,"originId":"6034c7ab4655ea07f6217d15","articleId":1079,"userId":2142,"content":"更新：2021年初，广州大量offer","createdAt":1614071723132},{"id":5748,"originId":"6034cbe94655ea690b217d48","articleId":1079,"userId":98,"content":"996吗？996免谈","createdAt":1614072809720},{"id":5749,"originId":"6034cda34655ea1e22217d63","articleId":1079,"userId":2142,"content":"[@zengming00](/user/zengming00) 大多数时候10-8-5","createdAt":1614073251221},{"id":5750,"originId":"6038b65c4655ea7d9121896e","articleId":1079,"userId":2143,"content":"普通二本不行？","createdAt":1614329436471},{"id":5751,"originId":"6038d83f4655eaacfe2189f1","articleId":1079,"userId":109,"content":"Egg.js + Typescript 可以直接上 Midway.js v2。后者不但对于 TS 支持更好，而且还支持 ioc， aop。","createdAt":1614338111024},{"id":5752,"originId":"603e271a4655ea4e16219451","articleId":1079,"userId":2,"content":"[@waitingsong](/user/waitingsong) 这波广告，厉害了","createdAt":1614685978297},{"id":5753,"originId":"604052084655ea700f21995a","articleId":1079,"userId":2142,"content":"[@waitingsong](/user/waitingsong) 这波广告666，鉴于当前egg半死不活的状态，有点担心这个是另一个KPI项目","createdAt":1614828040207},{"id":5754,"originId":"604052194655ea814a21995e","articleId":1079,"userId":2142,"content":"[@leezeehowe](/user/leezeehowe) 可以的","createdAt":1614828057412},{"id":5755,"originId":"60409dd74655ea54ea219b71","articleId":1079,"userId":109,"content":"[@zhaochy1990](/user/zhaochy1990) 貌似 egg 团队解散了（缩编？）  midway.js 目前正常。","createdAt":1614847447870},{"id":5756,"originId":"60462d114655eaea5a21a543","articleId":1079,"userId":388,"content":"感觉可以面一面呢","createdAt":1615211793556},{"id":5757,"originId":"6046ee1e4655ea128121a6f5","articleId":1079,"userId":2142,"content":"[@bubao](/user/bubao) 欢迎投简历","createdAt":1615261214232},{"id":5758,"originId":"604c24484655ea038221b426","articleId":1079,"userId":388,"content":"[@zhaochy1990](/user/zhaochy1990) 我直接写博客上了 [简历](https://bubao.github.io/resume)","createdAt":1615602760392},{"id":5759,"originId":"60541d26dac542e208e284ca","articleId":1079,"userId":248,"content":"[@zhaochy1990](/user/zhaochy1990) 不用担心，如果对 Midway.js v2 还没上手，来看看这个项目 https://github.com/fsd-nodejs/service-mw2","createdAt":1616125222439},{"id":5760,"originId":"60541d8edac542d03be284d0","articleId":1079,"userId":248,"content":"这个项目有 Mysql，Redis，RabbitMQ等中间件的实践，还有更多常用的程序设计，也在迭代更新中","createdAt":1616125326986},{"id":5761,"originId":"604842a84655ea2a0021ac16","articleId":1080,"userId":2144,"content":"为啥大家不感兴趣呢？","createdAt":1615348392420},{"id":5762,"originId":"6052f79bdac5420b1ce28104","articleId":1080,"userId":2144,"content":"定一个","createdAt":1616050075249},{"id":5763,"originId":"6052cccddac5422f10e28012","articleId":1082,"userId":2147,"content":"~~赞赞赞~~","createdAt":1616039117060},{"id":5764,"originId":"604a3cf34655ea244721b119","articleId":1083,"userId":2148,"content":"一直都可以投递，欢迎！","createdAt":1615478003234},{"id":5765,"originId":"604c248c4655ea3f6521b42e","articleId":1083,"userId":388,"content":"[@JJJzheng](/user/JJJzheng) 我直接在这投可否","createdAt":1615602828143},{"id":5766,"originId":"604d74be4655ea867221b572","articleId":1083,"userId":2148,"content":"[@bubao](/user/bubao) 可以直接发简历到 zhengsidao1785@gmail.com \r\n或者扫描二维码投递，两个都可以的。：）","createdAt":1615688894427},{"id":5767,"originId":"6052cbdcdac5424b2fe28002","articleId":1083,"userId":2148,"content":"我顶顶顶顶","createdAt":1616038876161},{"id":5768,"originId":"605072774655ea06e221bcdc","articleId":1085,"userId":248,"content":"Node.js 打错了呢，看帖的同学，[Midway.js](https://midwayjs.org/) 了解一下","createdAt":1615884919656},{"id":5769,"originId":"605071ae4655ea0fab21bcd3","articleId":1086,"userId":248,"content":"广州高级全栈只有这个价格么","createdAt":1615884718391},{"id":5770,"originId":"6013e9db03d797644266df82","articleId":1090,"userId":98,"content":"出了广东就是北方，北方太冷了，所以我几乎不考虑北方的工作","createdAt":1611917787506},{"id":5771,"originId":"6014f31c03d7975a2966e039","articleId":1090,"userId":21,"content":"[@zengming00](/user/zengming00) 。。。啊这","createdAt":1611985692127},{"id":5772,"originId":"6018c33503d7979ced66e649","articleId":1090,"userId":406,"content":"可以的","createdAt":1612235573981},{"id":5773,"originId":"6019331b03d797182466e934","articleId":1090,"userId":2,"content":"lz是家里拆迁了吗？","createdAt":1612264219510},{"id":5774,"originId":"60197c9103d797ef3d66e9c4","articleId":1090,"userId":2154,"content":"看了 、官网 thinkjs啊，很亲切","createdAt":1612283025044},{"id":5775,"originId":"601a0b3603d79798d266ea1d","articleId":1090,"userId":21,"content":"[@dingyuanwu](/user/dingyuanwu) \r\n家里倒闭了，外出逃债🐶","createdAt":1612319542080},{"id":5776,"originId":"601a9aef03d7971d8b66ebe7","articleId":1090,"userId":2155,"content":"我愿称你之为**最强**\r\n话说，你还回来嘛？（：","createdAt":1612356335920},{"id":5777,"originId":"601b62af03d7970da166ec9f","articleId":1090,"userId":21,"content":"[@bichaorui](/user/bichaorui) 看情况吧\r\n","createdAt":1612407471069},{"id":5778,"originId":"601cf6bc03d797ed1466f0b0","articleId":1090,"userId":145,"content":"神奇...前几个月面试过的公司😂, 有一种眼熟的id, 突然变成了真人的感觉.","createdAt":1612510908257},{"id":5779,"originId":"601d02dc03d797eeb166f164","articleId":1090,"userId":21,"content":"[@zhangxh1023](/user/zhangxh1023) 你来面试过？","createdAt":1612514012780},{"id":5780,"originId":"601d091003d797c89c66f1ba","articleId":1090,"userId":145,"content":"[@zy445566](/user/zy445566) 嗯 20年 把杭州所有的 node 岗差不多都投了一遍, 差点失业🐶🐶","createdAt":1612515600435},{"id":5781,"originId":"601f493503d797677166f572","articleId":1090,"userId":21,"content":"[@zhangxh1023](/user/zhangxh1023) 那肯定不是我面试的，我面试基本不问技术，聊家常看人好就进来了","createdAt":1612663093788},{"id":5782,"originId":"6049a1b84655ea932d21aebd","articleId":1090,"userId":79,"content":"[@zy445566](/user/zy445566) 大佬们都是这么开明的么？","createdAt":1615438264008},{"id":5783,"originId":"6041f2d74655ea76a3219e86","articleId":1093,"userId":1794,"content":"除了校招，社招同时开放，base地可选北京、广州、杭州、西安、成都，感兴趣的欢迎投递简历到邮箱：bensheng.xbs@alibaba-inc.com ","createdAt":1614934743065},{"id":5784,"originId":"6040ac4d4655eab262219ba9","articleId":1094,"userId":2160,"content":"DeFi 是做些什么内容的，开发智能合约吗？","createdAt":1614851149518},{"id":5785,"originId":"6038de8f4655eabfb02189fd","articleId":1097,"userId":2162,"content":"大量hc","createdAt":1614339727123},{"id":5786,"originId":"603b3bfb4655ea5274218d41","articleId":1097,"userId":125,"content":"以前做过一段时间富文本编辑器，多人协同算法你们是用中心式的还是P2P式的？","createdAt":1614494715625},{"id":5787,"originId":"603dfe4c4655ea2d2c2193c6","articleId":1097,"userId":2162,"content":"[@dlutwuwei](/user/dlutwuwei) 开源的easysync，最近正在规划升级，老哥来一起啊。","createdAt":1614675532569},{"id":5788,"originId":"603e25a24655ea2db4219446","articleId":1097,"userId":2,"content":"有Node偏后端的职位吗？","createdAt":1614685602042},{"id":5789,"originId":"6030bf9503d797348e6707f6","articleId":1100,"userId":523,"content":"全职还是兼职呢? 其实我还是蛮适合的\r\n","createdAt":1613807509906},{"id":5790,"originId":"6034a0354655ead424217b95","articleId":1100,"userId":2040,"content":"简历已发，期待合作。","createdAt":1614061621348},{"id":5791,"originId":"6037c9054655ea5ea121870a","articleId":1100,"userId":411,"content":"要不要考虑加入我们? https://jjf-tech.cn/\r\n我们这里提供模块化积木式的开发逻辑, 未来是要打造成无代码模式的.\r\n我们技术栈也是 uniapp + nodejs(faas)\r\n","createdAt":1614268677684},{"id":5792,"originId":"5fabaa4a72af8c02d3f8e869","articleId":1102,"userId":2114,"content":"兄弟，现在发帖还有人么。","createdAt":1605085770004},{"id":5793,"originId":"5fabb43372af8c02d3f8e875","articleId":1102,"userId":30,"content":"我还在","createdAt":1605088307124},{"id":5794,"originId":"600aa3c55d04ac73c32180bc","articleId":1102,"userId":2,"content":"回来了","createdAt":1611310021901},{"id":5795,"originId":"60363f9f4655ea749521824e","articleId":1102,"userId":2,"content":"年初新增大量HC，欢迎投递","createdAt":1614167967729},{"id":5796,"originId":"6030718e03d797578f670651","articleId":1104,"userId":160,"content":"睡前30k到手有多少","createdAt":1613787534722},{"id":5797,"originId":"6034c6e44655ea3d3a217d0e","articleId":1104,"userId":2,"content":"足额缴纳的话，差不多80%吧 [@xiashulin](/user/xiashulin) ","createdAt":1614071524670},{"id":5798,"originId":"602dd97903d7972ae26700b2","articleId":1106,"userId":2169,"content":"1","createdAt":1613617529396},{"id":5799,"originId":"5fff021ea2a21389cff6e30e","articleId":1108,"userId":2172,"content":"非常棒的团队，诚招各路大牛","createdAt":1610547742571},{"id":5800,"originId":"5fffb67aa2a2137c38f6e3b6","articleId":1108,"userId":16,"content":"上海有坑吗","createdAt":1610593914614},{"id":5801,"originId":"5fffe8e7a2a21336c4f6e46e","articleId":1108,"userId":2171,"content":"[@AviorAlong](/user/AviorAlong) 暂时木有哈，团队都在北京。","createdAt":1610606823195},{"id":5802,"originId":"601cf50403d797291666f09d","articleId":1108,"userId":2171,"content":"JD 依旧有效哈，年前还是有几天可以用来面试的，错过了就只能等年后了。","createdAt":1612510468518},{"id":5803,"originId":"601769a403d79745f266e338","articleId":1110,"userId":1641,"content":"哈咯, flutter 要到什么程度的?\r\n我主业前端 (react, angular), 但是也折腾过flutter\r\n用flutter 写过 cnode 的客户端 [flutter-cnode-app](https://cnodejs.org/topic/5df8c33b76a67b5e0e418961#5e03289c0696c446bf6500a0)","createdAt":1612147108436},{"id":5804,"originId":"600ff5fb5d04acd4642188e5","articleId":1111,"userId":406,"content":"可以远程办公吗？","createdAt":1611658747716},{"id":5805,"originId":"6013a6b003d7974e1f66de21","articleId":1111,"userId":2139,"content":"[@cnlile](/user/cnlile) 当然,我们公司已经在19年就开始了远程办公~","createdAt":1611900592597},{"id":5806,"originId":"5f169a434b61050e36e7b61f","articleId":1113,"userId":2175,"content":"Top","createdAt":1595316803945},{"id":5807,"originId":"5f291d69f0739b0e62d1389b","articleId":1113,"userId":2175,"content":"Top","createdAt":1596530025606},{"id":5808,"originId":"5f3e1a6568156574e6e6cb00","articleId":1113,"userId":2175,"content":"Top","createdAt":1597905509933},{"id":5809,"originId":"5f4220a1e8a599751bb50d81","articleId":1113,"userId":2175,"content":"Top","createdAt":1598169249703},{"id":5810,"originId":"5f4715c2e8a599751bb5130f","articleId":1113,"userId":2175,"content":"Top","createdAt":1598494146182},{"id":5811,"originId":"5ff8164ea2a213633cf6d741","articleId":1113,"userId":2175,"content":"Top","createdAt":1610094158892},{"id":5812,"originId":"600e370a5d04ac088b2184c9","articleId":1113,"userId":2175,"content":"刚从监狱出来。08年在酒吧，对面一桌子混子有人对她吹口哨拉她一起喝酒，我喝多了，抽出随身带的匕首上去就是一刀，这一刀下去就是十五年，我记得进去的时候满大街还是求佛，寂寞沙洲冷什么的，十五年后物是人非，去年她来看过我，说她要结婚了。因为减刑提前出来，这些年我种过田养过猪做过服装，心早就静了。出来后我去她楼下看过她一次，很幸福，我也很开心。昨晚做了一个梦，是10年前，熟悉的街道，熟悉的场景，可我就是没找到熟悉的人，梦里我是哭醒的，过去的都回不去，剩下的只是怀念。我也30好几了，突然感到迷茫，经常夜里睡不着，坐在马路上，一个人喝着酒，抽着烟，不知前方路该怎么走。她结婚的前一天晚上我偷偷来到她家楼下，看着她门口窗户上贴着喜字，屋里灯亮着，我没敢打扰她，就蹲在她家楼下一根接一根的抽烟，很快天亮了，远处传来汽车喇叭声还有鞭炮声，我知道是接她的婚车来了，她今天就要成为别人的新娘了，她看起来特别漂亮，她上了婚车， 鞭炮响起，车子也开走了，我还在车队后面跟着，突然手机响了，是她发过来的短信，别送了，下辈子我是你的新娘，忘了我吧。那天我哭的撕心裂肺。后来她闺密告诉我，那天她在楼上看到我蹲在楼下不停抽烟，她也哭了一宿没睡觉。我已经没什么遗憾，成也好败也罢，转头一切又成空。生也好死也罢，人生匆匆看云烟。又何必执着于一个结果。我现在唯一想的是有没有哪个同学看机会，可以发简历至junhey.hj@alibaba-inc.com","createdAt":1611544330709},{"id":5813,"originId":"5f3bda55d8c8971d82088f1a","articleId":1114,"userId":2176,"content":"我顶","createdAt":1597758037009},{"id":5814,"originId":"5f43375068156574e6e6d0cf","articleId":1114,"userId":2176,"content":"我再顶","createdAt":1598240592598},{"id":5815,"originId":"5f447ecee8a599751bb50fa1","articleId":1114,"userId":2176,"content":"我还顶","createdAt":1598324430210},{"id":5816,"originId":"5f48723168156574e6e6d838","articleId":1114,"userId":2176,"content":"base 杭州\r\np6级别 p7更好\r\n\r\n组内直招，简历直推老板，第二天就能安排面试","createdAt":1598583345536},{"id":5817,"originId":"600ac7ec5d04ac6dd52180fd","articleId":1114,"userId":2176,"content":"业务发展太快了，组里又下了很多HC，p6/p7的前端大佬在哪里啊🧐","createdAt":1611319276626},{"id":5818,"originId":"600527335d04ac283421759f","articleId":1115,"userId":406,"content":"可以远程吗？","createdAt":1610950451077},{"id":5819,"originId":"600905f45d04ac3c6a217c43","articleId":1115,"userId":2177,"content":"[@cnlile](/user/cnlile) 一面可以远程的","createdAt":1611204084758},{"id":5820,"originId":"5d36b7c7ffed731686461c3a","articleId":1119,"userId":161,"content":"看起来，你们项目组是以react为主。","createdAt":1563867079156},{"id":5821,"originId":"5d3706cc9969a529571d6b8d","articleId":1119,"userId":2,"content":"招后端吗？","createdAt":1563887308284},{"id":5822,"originId":"5d3e62139969a529571d7c81","articleId":1119,"userId":2181,"content":"帮顶","createdAt":1564369427030},{"id":5823,"originId":"5d4409f94f472f7fee1521f0","articleId":1119,"userId":2089,"content":"[@tzbcf](/user/tzbcf) 正解","createdAt":1564740089135},{"id":5824,"originId":"5d440a0a4f472f7fee1521f4","articleId":1119,"userId":2089,"content":"[@dingyuanwu](/user/dingyuanwu) Java/Node.js都招聘","createdAt":1564740106881},{"id":5825,"originId":"5d477f0bbf26dc7fc5337581","articleId":1119,"userId":2,"content":"[@woodsrong](/user/woodsrong) 可以，等我整理下简历，然后发你","createdAt":1564966667238},{"id":5826,"originId":"5d49368e4f472f7fee152f89","articleId":1119,"userId":2089,"content":"[@dingyuanwu](/user/dingyuanwu) 还没收到：）","createdAt":1565079182621},{"id":5827,"originId":"5d494ce7697873456c6bb58d","articleId":1119,"userId":2,"content":"[@woodsrong](/user/woodsrong) 已发","createdAt":1565084903682},{"id":5828,"originId":"5d51737812a0194544416191","articleId":1119,"userId":2182,"content":"工作年限是硬指标吗？","createdAt":1565619064683},{"id":5829,"originId":"5d52d7b512a0194544416639","articleId":1119,"userId":2089,"content":"[@yjhmelody](/user/yjhmelody) 2年以上即可","createdAt":1565710261679},{"id":5830,"originId":"5d5f8db5dcd8e81121a6080b","articleId":1119,"userId":2089,"content":"持续招聘中：）","createdAt":1566543285148},{"id":5831,"originId":"5d6bc35f421846662d98637c","articleId":1119,"userId":2183,"content":"深圳前端有坑吗，nodejs为硬性要求？","createdAt":1567343455924},{"id":5832,"originId":"5d6cde7fd50f572345910e45","articleId":1119,"userId":2089,"content":"[@LoneyHeart](/user/LoneyHeart) 有坑，非硬性要求","createdAt":1567415935299},{"id":5833,"originId":"5d6ce7faa7474a231a5883ea","articleId":1119,"userId":2183,"content":"[@woodsrong](/user/woodsrong) 简历已发送，用的163邮箱","createdAt":1567418362490},{"id":5834,"originId":"5dc38f20865a9844a30206ba","articleId":1119,"userId":2,"content":"顶","createdAt":1573097248866},{"id":5835,"originId":"6005561e5d04aca448217637","articleId":1119,"userId":2089,"content":"一起打造商业操作系统！\r\n\r\n","createdAt":1610962462164},{"id":5836,"originId":"5ffd488da2a2134095f6de8c","articleId":1122,"userId":98,"content":"点赞，这才是真正值得学习的厂子，而不是学华为腾讯阿里的996 251 35和福报","createdAt":1610434701483},{"id":5837,"originId":"5ffd8b73a2a213996ff6e02d","articleId":1122,"userId":2184,"content":"[@zengming00](/user/zengming00) 感谢支持~","createdAt":1610451827939},{"id":5838,"originId":"5ffd7b32a2a2137e93f6dfed","articleId":1123,"userId":440,"content":"办公环境可以看上一条招聘信息的评论~","createdAt":1610447666126},{"id":5839,"originId":"5ff81958a2a2130c26f6d74f","articleId":1124,"userId":60,"content":"可远程面试","createdAt":1610094936064},{"id":5840,"originId":"5ff90e47a2a2132a1af6d837","articleId":1124,"userId":98,"content":"远程上班呢？","createdAt":1610157639564},{"id":5841,"originId":"5ff9258fa2a2134396f6d85e","articleId":1124,"userId":60,"content":"[@zengming00](/user/zengming00) 远程上班可能不行吧，毕竟涉及到考勤；不过如果能完成任务的话，这个应该也可以去谈；你有兴趣的话，可以加上面的微信了解一下","createdAt":1610163599586},{"id":5842,"originId":"5ffbb5bca2a21369e3f6da6f","articleId":1124,"userId":160,"content":"深圳的话，这个薪资水平没啥竞争力吧","createdAt":1610331580058},{"id":5843,"originId":"5ffc15efa2a21374a6f6dc6d","articleId":1124,"userId":2186,"content":"外包岗","createdAt":1610356207700},{"id":5844,"originId":"5ffd0b14a2a21332e3f6ddb4","articleId":1124,"userId":60,"content":"[@m470075640](/user/m470075640) 是的，外包，是在公司这边办公，需求是腾讯那边的","createdAt":1610418964459},{"id":5845,"originId":"5f62b2cbd22a6b1d622c943b","articleId":1126,"userId":2188,"content":"欢迎有兴趣的小伙伴投简历过来哦","createdAt":1600303819527},{"id":5846,"originId":"5f644ff8d22a6b1d622c97ca","articleId":1126,"userId":2188,"content":"顶贴","createdAt":1600409592905},{"id":5847,"originId":"5f682017d22a6b1d622c9a6c","articleId":1126,"userId":2188,"content":"顶贴","createdAt":1600659479361},{"id":5848,"originId":"5f6abebdc1c67a7dd9aff9e8","articleId":1126,"userId":2188,"content":"顶贴","createdAt":1600831165112},{"id":5849,"originId":"5f6c327772af8c02d3f8d2d9","articleId":1126,"userId":2188,"content":"顶贴","createdAt":1600926327153},{"id":5850,"originId":"5f6ff80ff9736b02ceada73e","articleId":1126,"userId":2188,"content":"顶贴","createdAt":1601173519110},{"id":5851,"originId":"5f72c6a572af8c02d3f8dede","articleId":1126,"userId":388,"content":"公司在哪的？996吗？团队多少人？ 这些才是应聘者想关注的吧。可参考其他人的帖子，应该会有人的","createdAt":1601357477112},{"id":5852,"originId":"5f741c3972af8c02d3f8e1da","articleId":1126,"userId":2188,"content":"[@bubao](/user/bubao) 公司在广州天河，周末双休，目前研发团队有20人左右。","createdAt":1601444921662},{"id":5853,"originId":"5fe0d42c98427e7b436a9add","articleId":1126,"userId":1630,"content":"能远程吗？","createdAt":1608569900638},{"id":5854,"originId":"5ff43c545393a5314a546b0a","articleId":1126,"userId":388,"content":"[@kenshinhu](/user/kenshinhu) 同问呢","createdAt":1609841748592},{"id":5855,"originId":"5ff562dc5393a540ad546cf2","articleId":1126,"userId":406,"content":"同问，可以远程么","createdAt":1609917148768},{"id":5856,"originId":"5ff0ca015393a55719546487","articleId":1127,"userId":2190,"content":"可以远程么","createdAt":1609615873213},{"id":5857,"originId":"5fe1947698427ebc456a9c63","articleId":1130,"userId":21,"content":"上班炒币两不误✌","createdAt":1608619126878},{"id":5858,"originId":"5f3fc1d5e8a599751bb50bc9","articleId":1131,"userId":440,"content":"办公环境：\r\n![WechatIMG11-min.jpeg](//static.cnodejs.org/FgOMbLUwrGquyZBfoYR0mx1C8SFs)\r\n![WechatIMG13-min.jpeg](//static.cnodejs.org/FhS2ExGwk7XJ2U8b0-8aSb_9wHVM)\r\n![WechatIMG111-min.jpeg](//static.cnodejs.org/FjjlIb6X7IJkJBX-9b9UV049MjnH)\r\n![WechatIMG133-min.jpeg](//static.cnodejs.org/FgZgVnXswwyTYVGrCj2Q4RFw3uKC)\r\n","createdAt":1598013909732},{"id":5859,"originId":"5f62c691c1c67a7dd9afef10","articleId":1131,"userId":856,"content":"大佬 在线简历\r\nhttp://v.freescatv.com/","createdAt":1600308881634},{"id":5860,"originId":"5fdc4a9f0f99cb0a455e3677","articleId":1131,"userId":440,"content":"暂时没 HC 了 ~","createdAt":1608272543889},{"id":5861,"originId":"5f22d8eef0739b0e62d12f0c","articleId":1132,"userId":2195,"content":"想去！","createdAt":1596119278729},{"id":5862,"originId":"5f236c354b61050e36e7d513","articleId":1132,"userId":2196,"content":"求介绍","createdAt":1596156981829},{"id":5863,"originId":"5f237c0cf0739b0e62d12fe1","articleId":1132,"userId":2197,"content":"求内推","createdAt":1596161036925},{"id":5864,"originId":"5f237daff0739b0e62d12ff3","articleId":1132,"userId":2198,"content":"不错不错。","createdAt":1596161455047},{"id":5865,"originId":"5f23e99ff0739b0e62d1315d","articleId":1132,"userId":2194,"content":"[@aaronssky](/user/aaronssky) 求简历","createdAt":1596189087116},{"id":5866,"originId":"5f360028d8c8971d8208887a","articleId":1132,"userId":856,"content":"[@yeyeye0525](/user/yeyeye0525) 大佬 简历\r\nhttp://v.freescatv.com/","createdAt":1597374504664},{"id":5867,"originId":"5f365dd3ebb8141d4bdda99c","articleId":1132,"userId":161,"content":"最后一个是食堂图片吗？","createdAt":1597398483654},{"id":5868,"originId":"5f5607d9d22a6b1d622c806b","articleId":1132,"userId":2194,"content":"[@tzbcf](/user/tzbcf) 是的","createdAt":1599473625292},{"id":5869,"originId":"5f73e7e8f9736b02ceadafca","articleId":1132,"userId":161,"content":"看起来很有兴趣，可惜被掉进长沙出不来了","createdAt":1601431528672},{"id":5870,"originId":"5f703d1072af8c02d3f8d943","articleId":1134,"userId":2199,"content":"补个邮箱：1ic_4p4y1buiw8@dingtalk.com   ","createdAt":1601191184267},{"id":5871,"originId":"5f70865272af8c02d3f8d9c8","articleId":1134,"userId":109,"content":"貌似在boss上面看过","createdAt":1601209938985},{"id":5872,"originId":"5f71474d72af8c02d3f8da8b","articleId":1134,"userId":2199,"content":"[@waitingsong](/user/waitingsong) 是的 就现在很捉急 平台机会都不错的 ","createdAt":1601259341846},{"id":5873,"originId":"5f717c6472af8c02d3f8dbea","articleId":1134,"userId":109,"content":"[@kira-arise](/user/kira-arise) 熟悉node-ffi，不会electron 😄","createdAt":1601272932759},{"id":5874,"originId":"5f71a0f3f9736b02ceadab6a","articleId":1134,"userId":2199,"content":"[@waitingsong](/user/waitingsong) 那之前有过项目经验么？ 参与过也可以","createdAt":1601282291575},{"id":5875,"originId":"5f648f25d22a6b1d622c9882","articleId":1135,"userId":2200,"content":"有意可加微信konlytest","createdAt":1600425765475},{"id":5876,"originId":"5f69d888d22a6b1d622c9ec5","articleId":1135,"userId":2200,"content":"包吃包住，薪资面议","createdAt":1600772232988},{"id":5877,"originId":"5f6c5616f9736b02ceada265","articleId":1135,"userId":2200,"content":"西安难道没有搞全栈的？","createdAt":1600935446548},{"id":5878,"originId":"5f708752f9736b02ceada8ff","articleId":1135,"userId":109,"content":"[@konlytest](/user/konlytest) 估计不见待遇不撒鹰","createdAt":1601210194101},{"id":5879,"originId":"5f62b2e2c1c67a7dd9afeeaa","articleId":1136,"userId":2188,"content":"欢迎有兴趣的小伙伴投简历过来哦","createdAt":1600303842124},{"id":5880,"originId":"5f645000d22a6b1d622c97ce","articleId":1136,"userId":2188,"content":"顶贴","createdAt":1600409600742},{"id":5881,"originId":"5f682008c1c67a7dd9aff4e3","articleId":1136,"userId":2188,"content":"顶贴","createdAt":1600659464903},{"id":5882,"originId":"5f6abec5c1c67a7dd9aff9ee","articleId":1136,"userId":2188,"content":"顶贴","createdAt":1600831173544},{"id":5883,"originId":"5f6c326d72af8c02d3f8d2d4","articleId":1136,"userId":2188,"content":"顶贴","createdAt":1600926317643},{"id":5884,"originId":"5f6ff817f9736b02ceada744","articleId":1136,"userId":2188,"content":"顶贴","createdAt":1601173527582},{"id":5885,"originId":"5efad140472c7975b04b8303","articleId":1137,"userId":2116,"content":"青青子衿，悠悠我心。\r\n但为君故，沉吟至今。\r\n呦呦鹿鸣，食野之苹。\r\n我有嘉宾，鼓瑟吹笙。\r\n\r\n欢迎喜欢开发的你来应聘~","createdAt":1593495872314},{"id":5886,"originId":"5f07d85bf9700d0938eb3f4f","articleId":1137,"userId":2116,"content":"顶贴","createdAt":1594349659627},{"id":5887,"originId":"5f082970f9700d0938eb4078","articleId":1137,"userId":134,"content":"好湿好湿","createdAt":1594370416739},{"id":5888,"originId":"5f08766abe4e8d091f128767","articleId":1137,"userId":160,"content":"`有竞争力的薪酬待遇`11k起步？","createdAt":1594390122810},{"id":5889,"originId":"5f19a53ef0739b0e62d11b6d","articleId":1137,"userId":2108,"content":"现在还招聘不？\r\n","createdAt":1595516222486},{"id":5890,"originId":"5f6054bcc1c67a7dd9afe9ec","articleId":1137,"userId":2116,"content":"[@jjeejj](/user/jjeejj) 有的，欢迎投递简历到上述邮箱","createdAt":1600148668810},{"id":5891,"originId":"5f644fecd22a6b1d622c97c3","articleId":1137,"userId":2188,"content":"顶贴","createdAt":1600409580483},{"id":5892,"originId":"5f682024c1c67a7dd9aff4e6","articleId":1137,"userId":2188,"content":"顶贴","createdAt":1600659492761},{"id":5893,"originId":"5f6abeaec1c67a7dd9aff9e1","articleId":1137,"userId":2188,"content":"顶贴","createdAt":1600831150905},{"id":5894,"originId":"5f6c3287f9736b02ceada20a","articleId":1137,"userId":2188,"content":"顶贴","createdAt":1600926343029},{"id":5895,"originId":"5f6ff80572af8c02d3f8d7f2","articleId":1137,"userId":2188,"content":"顶贴","createdAt":1601173509332},{"id":5896,"originId":"5ec0ab1da87fc8583363cc81","articleId":1139,"userId":2202,"content":"up","createdAt":1589685021151},{"id":5897,"originId":"5ecb2bbea87fc8583363df5b","articleId":1139,"userId":2202,"content":"可以一起来搞基础设施建设~","createdAt":1590373310803},{"id":5898,"originId":"5eddaf5282b588109b647dbc","articleId":1139,"userId":2202,"content":"顶一下~","createdAt":1591586642905},{"id":5899,"originId":"5ee8aca9b703280f0bcb9d9e","articleId":1139,"userId":2202,"content":"持续招人中...","createdAt":1592306857042},{"id":5900,"originId":"5f1d7470f0739b0e62d1216c","articleId":1139,"userId":2202,"content":"up","createdAt":1595765872745},{"id":5901,"originId":"5f62ffa4c1c67a7dd9afefda","articleId":1139,"userId":2202,"content":"up","createdAt":1600323492258},{"id":5902,"originId":"5f279f104b61050e36e7d9b9","articleId":1141,"userId":2203,"content":"顶一下","createdAt":1596432144864},{"id":5903,"originId":"5f435b9268156574e6e6d131","articleId":1141,"userId":2203,"content":"继续顶一下","createdAt":1598249874247},{"id":5904,"originId":"5f46993fe8a599751bb5128d","articleId":1141,"userId":109,"content":"现有系统也是 node.js 的，啥框架呢？","createdAt":1598462271435},{"id":5905,"originId":"5f47110b68156574e6e6d5d9","articleId":1141,"userId":2203,"content":"[@waitingsong](/user/waitingsong) node项目基于koajs","createdAt":1598492939332},{"id":5906,"originId":"5f616cc0d22a6b1d622c9181","articleId":1141,"userId":2203,"content":"再顶一下","createdAt":1600220352840},{"id":5907,"originId":"5f5eead9d22a6b1d622c8d1e","articleId":1142,"userId":98,"content":"底线是双休","createdAt":1600056025199},{"id":5908,"originId":"5f5add85c1c67a7dd9afe32c","articleId":1143,"userId":16,"content":"官网链接改下\r\n![image.png](//static.cnodejs.org/FhEvDsSsWihaPV6NneJ8qB6l_X8r)","createdAt":1599790469703},{"id":5909,"originId":"5f5e01e4c1c67a7dd9afe64a","articleId":1143,"userId":2205,"content":"[@AviorAlong](/user/AviorAlong) 已改，多谢提醒","createdAt":1599996388200},{"id":5910,"originId":"5f4e3e44e8a599751bb51c06","articleId":1146,"userId":268,"content":"🆙🆙🆙","createdAt":1598963268442},{"id":5911,"originId":"5f573884c1c67a7dd9afdc74","articleId":1146,"userId":268,"content":"🆙🆙🆙🆙🆙🆙","createdAt":1599551620408},{"id":5912,"originId":"5f2bd83ef0739b0e62d13f5e","articleId":1149,"userId":2209,"content":"顶一下","createdAt":1596708926236},{"id":5913,"originId":"5f2bd8754b61050e36e7e4a2","articleId":1149,"userId":2209,"content":"吃完饭捞一下","createdAt":1596708981794},{"id":5914,"originId":"5f2ca7294b61050e36e7e54e","articleId":1149,"userId":886,"content":"哇 小许都开始招人啦 ，职位升的很快么","createdAt":1596761897665},{"id":5915,"originId":"5f2cc9ef4b61050e36e7e61c","articleId":1149,"userId":2209,"content":"[@shadow88sky](/user/shadow88sky) 嘿嘿嘿嘿嘿","createdAt":1596770799345},{"id":5916,"originId":"5f2d0b9df0739b0e62d141d4","articleId":1149,"userId":2209,"content":"upupup","createdAt":1596787613570},{"id":5917,"originId":"5f2e2ecef0739b0e62d1430a","articleId":1149,"userId":514,"content":"关注下","createdAt":1596862158724},{"id":5918,"originId":"5f2f75854b61050e36e7e930","articleId":1149,"userId":2209,"content":"[@dongguangming](/user/dongguangming) 心动不如行动呀？","createdAt":1596945797317},{"id":5919,"originId":"5f309fd84b61050e36e7e9fe","articleId":1149,"userId":514,"content":"[@xujuvenile](/user/xujuvenile)  抱歉，已经转行做java了，不过你们可以继续nodejs，可参考以前我的资料库[nodejs](https://github.com/dongguangming/dgm-collection/blob/master/node.js.md)","createdAt":1597022168416},{"id":5920,"originId":"5f3cad5a68156574e6e6c875","articleId":1149,"userId":2210,"content":"[@xujuvenile](/user/xujuvenile) 发了几天没有收到反馈，怎么知道现在是什么状态。","createdAt":1597812058861},{"id":5921,"originId":"5f43992f68156574e6e6d1b1","articleId":1149,"userId":2209,"content":"[@nigel](/user/nigel) 没看到你的邮件呀？","createdAt":1598265647349},{"id":5922,"originId":"5f55d6dcc1c67a7dd9afd927","articleId":1149,"userId":2211,"content":"还招么？    Node.js 全栈方向","createdAt":1599461084298},{"id":5923,"originId":"5e7b647c64259617c49a2e06","articleId":1150,"userId":1783,"content":"顶起来","createdAt":1585144956473},{"id":5924,"originId":"5f2b970df0739b0e62d13e26","articleId":1150,"userId":1783,"content":"长期有效，欢迎投递～","createdAt":1596692237636},{"id":5925,"originId":"5f2e134cf0739b0e62d142db","articleId":1150,"userId":514,"content":"看好物联网，收集数据越多，商业价值就越大","createdAt":1596855116041},{"id":5926,"originId":"5f3a3aa8d8c8971d82088cad","articleId":1150,"userId":1783,"content":"[@dongguangming](/user/dongguangming) 有简历砸过来吗～","createdAt":1597651624217},{"id":5927,"originId":"5f51bdbf31fc7a1d8ad65d89","articleId":1150,"userId":1783,"content":"顶","createdAt":1599192511180},{"id":5928,"originId":"5f50a74e31fc7a1d8ad65c2b","articleId":1151,"userId":2211,"content":"base哪里？？","createdAt":1599121230312},{"id":5929,"originId":"5f50afff31fc7a1d8ad65c5e","articleId":1151,"userId":2213,"content":"[@yspwf](/user/yspwf)  北京，中关村","createdAt":1599123455706},{"id":5930,"originId":"5f1e480d4b61050e36e7c7b2","articleId":1152,"userId":1266,"content":"自顶一个","createdAt":1595820045879},{"id":5931,"originId":"5f292c254b61050e36e7ddf0","articleId":1152,"userId":1266,"content":"不要沉下去了","createdAt":1596533797824},{"id":5932,"originId":"5f509967d22a6b1d622c7920","articleId":1152,"userId":1266,"content":"再顶一下","createdAt":1599117671180},{"id":5933,"originId":"5f4cf994e8a599751bb51a73","articleId":1155,"userId":98,"content":"“2年以上前端研发经验”京城10k的起薪？","createdAt":1598880148261},{"id":5934,"originId":"5f4daecd68156574e6e6dd26","articleId":1155,"userId":1266,"content":"秦阳~~  顶一个\r\n\r\n楼下占位： 贝壳金服招聘高级前端 base：北京、成都  18~40K  14薪\r\nhttps://cnodejs.org/topic/5f18fc254b61050e36e7bc45","createdAt":1598926541154},{"id":5935,"originId":"5f4de3ae68156574e6e6dd8e","articleId":1155,"userId":1276,"content":"[@wwhgtt](/user/wwhgtt) 这里也能碰见熟人...好久不见...","createdAt":1598940078126},{"id":5936,"originId":"5ef203e3472c7975b04b72a0","articleId":1158,"userId":2220,"content":"#### 窝窝头，一块钱4个，嘿嘿\r\n> 走过路过不要错过，跪求各路大神多看两眼 ~~~~(>_<)~~~~","createdAt":1592919011700},{"id":5937,"originId":"5ef9e0b513f8b244e57cc2d0","articleId":1158,"userId":2220,"content":"亲，建议您看一下这里呢。\r\n我们部门没啥历史包袱哦。","createdAt":1593434293202},{"id":5938,"originId":"5f17ac684b61050e36e7b83d","articleId":1158,"userId":146,"content":"mark","createdAt":1595386984965},{"id":5939,"originId":"5f2299ac4b61050e36e7d373","articleId":1158,"userId":2221,"content":"慕名来的bigo，大佬就去腾讯了吗","createdAt":1596103084307},{"id":5940,"originId":"5f43847968156574e6e6d18a","articleId":1158,"userId":980,"content":"[@diyao](/user/diyao) 您好，请问该职位还在招聘吗？\r\n这个是我的在线简历：https://tiila.com/resume，github：https://github.com/myxvisual\r\n谢谢了","createdAt":1598260345066},{"id":5941,"originId":"592588d5ba8670562a40f456","articleId":1162,"userId":2224,"content":"真想去面试，要是坐标在北京的话","createdAt":1495632085999},{"id":5942,"originId":"59265482ba8670562a40f49d","articleId":1162,"userId":2225,"content":"鸟","createdAt":1495684226117},{"id":5943,"originId":"5926553cba8670562a40f49f","articleId":1162,"userId":2225,"content":"哈哈哈","createdAt":1495684412645},{"id":5944,"originId":"5926561e9e32cc84569a7324","articleId":1162,"userId":2225,"content":"jj","createdAt":1495684638233},{"id":5945,"originId":"592ed787d371b6372a8aff6e","articleId":1162,"userId":2226,"content":"羡慕阿里","createdAt":1496242055902},{"id":5946,"originId":"593503a4538dbcaa6bc7dcbb","articleId":1162,"userId":2227,"content":"看起来不错","createdAt":1496646564219},{"id":5947,"originId":"5936053c6b7ebe7e2979d893","articleId":1162,"userId":1952,"content":"所以高颜值的妹子在哪，可别把大伙都忽悠去了😁","createdAt":1496712508744},{"id":5948,"originId":"5a320a98d92f2f5b185ace66","articleId":1162,"userId":2112,"content":"顶上去，继续招！","createdAt":1513228952822},{"id":5949,"originId":"5a433871d92f2f5b185ad287","articleId":1162,"userId":2112,"content":"[@OneNewLife](/user/OneNewLife) 有的，绝不忽悠，整个技术团队除了UED，我们的妹纸是最多的","createdAt":1514354801131},{"id":5950,"originId":"5a44a71ef320ae9f0dd58148","articleId":1162,"userId":1180,"content":"坐标北京就好了","createdAt":1514448670996},{"id":5951,"originId":"5a55aef4afa0a121784a8ae4","articleId":1162,"userId":2112,"content":"[@a1511870876](/user/a1511870876) 北京有兄弟部门，也可以发简历给我内推 ：）","createdAt":1515564788462},{"id":5952,"originId":"5a57443f9288dc8153287d89","articleId":1162,"userId":1359,"content":"顶","createdAt":1515668543632},{"id":5953,"originId":"5a5d9aaeafa0a121784a8c41","articleId":1162,"userId":2112,"content":"顶起来，欢迎大家继续投简历","createdAt":1516083886324},{"id":5954,"originId":"5a696aee9d371d4a059eee10","articleId":1162,"userId":2112,"content":"顶起来，欢迎大家继续投简历\r\n\r\n","createdAt":1516858094638},{"id":5955,"originId":"5a6ac6709d371d4a059eeea7","articleId":1162,"userId":273,"content":"给大牛顶一下。\r\n\r\n\r\n[I‘m webapp-cnodejs-vue](https://github.com/shinygang/Vue-cnodejs)\r\n","createdAt":1516947056748},{"id":5956,"originId":"5a7919e35e20f00d1427ff3d","articleId":1162,"userId":2112,"content":"顶起来","createdAt":1517885923728},{"id":5957,"originId":"5a79403e5321b5396004ebee","articleId":1162,"userId":610,"content":"[@chaoren1641](/user/chaoren1641) 膜拜大神","createdAt":1517895742854},{"id":5958,"originId":"5a7940535321b5396004ebf0","articleId":1162,"userId":610,"content":"[@chaoren1641](/user/chaoren1641) 专科学历考虑吗？","createdAt":1517895763684},{"id":5959,"originId":"5a7c4a575321b5396004ecc0","articleId":1162,"userId":2112,"content":"[@1316346949](/user/1316346949) 如果有三年以上工作经验，并且技能突出，那是考虑的","createdAt":1518094935260},{"id":5960,"originId":"5a94f458653c43b914685098","articleId":1162,"userId":2112,"content":"顶上去","createdAt":1519711320087},{"id":5961,"originId":"5a98bd18543e098150cb71db","articleId":1162,"userId":317,"content":"想去","createdAt":1519959320363},{"id":5962,"originId":"5a995a04ce1c90bc44c445cf","articleId":1162,"userId":785,"content":"要是在成都就好了       [~From Frank.Cnode](https://github.com/FourLeafClover/vue-cnode)","createdAt":1519999492095},{"id":5963,"originId":"5aaf483ae7b166bb7b9ecbf1","articleId":1162,"userId":2112,"content":"[@leehomeok](/user/leehomeok) 来啊来啊！","createdAt":1521436730950},{"id":5964,"originId":"5ab8873f52d7d3a8698a47dc","articleId":1162,"userId":2112,"content":"急缺急缺，欢迎来勾搭","createdAt":1522042687077},{"id":5965,"originId":"5ac477970ab0448f0fe3f86c","articleId":1162,"userId":2112,"content":"急缺急缺，欢迎来勾搭","createdAt":1522825111745},{"id":5966,"originId":"5ac48aa50ab0448f0fe3f876","articleId":1162,"userId":2228,"content":"深圳就好了\r\r\n\r\n > 来自小程序 [CNode罗](https://github.com/Flywor)","createdAt":1522829989480},{"id":5967,"originId":"5ad59e43ba60fcc66b7b8360","articleId":1162,"userId":2112,"content":"[@Flywor](/user/Flywor) 可以给你内推深圳阿里其他部门","createdAt":1523949123232},{"id":5968,"originId":"5ad59e5c464b1bfa6b425427","articleId":1162,"userId":2112,"content":"急缺急缺，欢迎来勾搭","createdAt":1523949148112},{"id":5969,"originId":"5adeef71d25ba6000932f5b6","articleId":1162,"userId":2112,"content":"急缺急缺，欢迎来勾搭","createdAt":1524559729327},{"id":5970,"originId":"5aea73aeadea947348e76013","articleId":1162,"userId":2112,"content":"急缺急缺，欢迎来勾搭\r\n\r\n","createdAt":1525314478033},{"id":5971,"originId":"5af063850a36e5312d6ecdfc","articleId":1162,"userId":2112,"content":"现在可以考虑北京，快来投简历吧","createdAt":1525703557088},{"id":5972,"originId":"5af6d561adea947348e763c1","articleId":1162,"userId":2112,"content":"现在可以考虑北京，快来投简历吧\r\n\r\n","createdAt":1526125921887},{"id":5973,"originId":"5afa95bb0a36e5312d6ed133","articleId":1162,"userId":2112,"content":"现在可以考虑北京，快来投简历吧\r\n\r\n","createdAt":1526371771325},{"id":5974,"originId":"5afd392f02591040485baf58","articleId":1162,"userId":2228,"content":"哇我现在才看到回复，还有机会吗，刚辞职","createdAt":1526544687663},{"id":5975,"originId":"5b026449f3c2e9b5066afdaa","articleId":1162,"userId":2112,"content":"[@ddqre12345](/user/ddqre12345) 现在北京有坑，欢迎来面试","createdAt":1526883401063},{"id":5976,"originId":"5b30b0a7a1308bf723aa3995","articleId":1162,"userId":2112,"content":"[@Flywor](/user/Flywor) 有啊，简历发来哦","createdAt":1529917607489},{"id":5977,"originId":"5ccfd052776fb66e0d17267d","articleId":1162,"userId":2112,"content":"好久没来了，顶下","createdAt":1557123154363},{"id":5978,"originId":"5d3fdca59969a529571d8148","articleId":1162,"userId":2112,"content":"急缺急缺，欢迎来勾搭\r\n\r\n","createdAt":1564466341138},{"id":5979,"originId":"5f3895ddebb8141d4bddaab4","articleId":1162,"userId":2112,"content":"急缺急缺，欢迎来勾搭\r\n\r\n","createdAt":1597543901246},{"id":5980,"originId":"5ea41baf0275394e7688339e","articleId":1163,"userId":110,"content":"菠菜？","createdAt":1587813295200},{"id":5981,"originId":"5ea41bd00275394e768833a2","articleId":1163,"userId":110,"content":"还用得到 Telegram 的，肯定不是什么正规公司","createdAt":1587813328922},{"id":5982,"originId":"5f142db44b61050e36e7b14d","articleId":1163,"userId":2102,"content":"[@andyhu](/user/andyhu) 你这什么逻辑阿，用微信的就都是正规的？之所以用tg是因为Tg安全性高，微信这种东西我们感觉不靠谱","createdAt":1595157940450},{"id":5983,"originId":"5f35fd5bd8c8971d82088863","articleId":1163,"userId":134,"content":"007 吗","createdAt":1597373787472},{"id":5984,"originId":"5f2955da4b61050e36e7dec3","articleId":1166,"userId":2230,"content":"相关人员前来顶帖，核心部门、温馨小组、重点方向，期待你的加入","createdAt":1596544474951},{"id":5985,"originId":"5f29584f4b61050e36e7ded6","articleId":1166,"userId":2231,"content":"好厉害的部门，简历已投","createdAt":1596545103334},{"id":5986,"originId":"5f2959064b61050e36e7dedd","articleId":1166,"userId":2232,"content":"简历已投，感谢楼主","createdAt":1596545286507},{"id":5987,"originId":"5f295abc4b61050e36e7dee5","articleId":1166,"userId":2233,"content":"核心部门嗷，简历已投","createdAt":1596545724860},{"id":5988,"originId":"5e7827b858ab6717beb7c26b","articleId":1169,"userId":161,"content":"兄弟加你了","createdAt":1584932792066},{"id":5989,"originId":"5e782ecf64259617c49a2592","articleId":1169,"userId":161,"content":"不对呀！兄弟怎么一下上海一下长沙。难道是你回来了？","createdAt":1584934607686},{"id":5990,"originId":"5f27ab5c4b61050e36e7da31","articleId":1169,"userId":632,"content":"我记得之前是上海啊","createdAt":1596435292136},{"id":5991,"originId":"5f2916f04b61050e36e7dda2","articleId":1169,"userId":2236,"content":"还有需要吗","createdAt":1596528368080},{"id":5992,"originId":"5f23e5fd4b61050e36e7d6e3","articleId":1171,"userId":1138,"content":"不错的公司 ，值得加入","createdAt":1596188157971},{"id":5993,"originId":"5f150f87f0739b0e62d10f50","articleId":1174,"userId":19,"content":"[@w3cfed](/user/w3cfed) 兼职可以吗？","createdAt":1595215751284},{"id":5994,"originId":"5f185a124b61050e36e7bae1","articleId":1174,"userId":406,"content":"我在杭州，远程可以么，对英文有啥要求没有","createdAt":1595431442150},{"id":5995,"originId":"5f185d1df0739b0e62d1170b","articleId":1174,"userId":514,"content":"在这里招聘太对了！！！","createdAt":1595432221980},{"id":5996,"originId":"5f22a77ef0739b0e62d12e5d","articleId":1174,"userId":1102,"content":"[@luanxuechao](/user/luanxuechao) 害，招聘转发，要求直接投递","createdAt":1596106622294},{"id":5997,"originId":"5f22a7884b61050e36e7d3d6","articleId":1174,"userId":1102,"content":"[@cnlile](/user/cnlile) 害，招聘转发，要求直接投递","createdAt":1596106632592},{"id":5998,"originId":"5f182dba4b61050e36e7ba20","articleId":1176,"userId":514,"content":"可以参考我以前的学习资料[资料集](https://github.com/dongguangming/dgm-collection)","createdAt":1595420090416},{"id":5999,"originId":"5f1eae484b61050e36e7c916","articleId":1176,"userId":2240,"content":"[@dongguangming](/user/dongguangming) 有意向该岗位吗\r\n","createdAt":1595846216747},{"id":6000,"originId":"5f1ff2b5f0739b0e62d1280e","articleId":1176,"userId":514,"content":"[@Mnwka](/user/Mnwka) 不考虑了，几年前已经做过类似的开发了","createdAt":1595929269941},{"id":6001,"originId":"5f2205154b61050e36e7d188","articleId":1176,"userId":110,"content":"可以远程吗？","createdAt":1596065045537},{"id":6002,"originId":"5f226359f0739b0e62d12cd1","articleId":1176,"userId":753,"content":"糟了是心动的感觉","createdAt":1596089177416},{"id":6003,"originId":"5ef7e5c013f8b244e57cba6c","articleId":1182,"userId":2246,"content":"发生了什么又回来写代码？","createdAt":1593304512523},{"id":6004,"originId":"5ef8122513f8b244e57cbb9b","articleId":1182,"userId":16,"content":"顶一下","createdAt":1593315877538},{"id":6005,"originId":"5f001301b2a7c073cb32a7c0","articleId":1182,"userId":2245,"content":"[@xuxu7](/user/xuxu7) 发生了很不好的事情","createdAt":1593840385094},{"id":6006,"originId":"5f00130bb2a7c073cb32a7c4","articleId":1182,"userId":2245,"content":"[@AviorAlong](/user/AviorAlong) 谢谢！","createdAt":1593840395517},{"id":6007,"originId":"5f010da513f8b244e57cd17e","articleId":1182,"userId":2247,"content":",","createdAt":1593904549667},{"id":6008,"originId":"5f040a9513f8b244e57cd7fe","articleId":1182,"userId":2240,"content":"杭州考虑吗 考虑的话可以把简历发到HR@qbitnetwork.com","createdAt":1594100373533},{"id":6009,"originId":"5f058c4db2a7c073cb32b410","articleId":1182,"userId":2248,"content":"确实可以，杭州考虑的话可以发简历给我buyou_zzj@163.com","createdAt":1594199117923},{"id":6010,"originId":"5f11aa8d4b61050e36e7aeea","articleId":1182,"userId":2245,"content":"[@Mnwka](/user/Mnwka) 谢谢！","createdAt":1594993293386},{"id":6011,"originId":"5f11aaad4b61050e36e7aeee","articleId":1182,"userId":2245,"content":"[@heroWomen](/user/heroWomen) 谢谢认可，非常感谢！","createdAt":1594993325569},{"id":6012,"originId":"5f1409dd4b61050e36e7b0b9","articleId":1182,"userId":1102,"content":"[@kahn1990](/user/kahn1990) \r\nhttps://cnodejs.org/topic/5f1409924b61050e36e7b0b6\r\n看看这个。","createdAt":1595148765335},{"id":6013,"originId":"5f0f072c4b61050e36e7aafd","articleId":1183,"userId":98,"content":"兔展，让我又爱又恨的一家公司\r\n爱，是给了我进入这行业的机会，在那遇到了人生中目前为止最爱的一个妹纸，可惜快乐是短暂的，没能把她留下来。相聚的短暂的，那些逗逼同事，那些漂亮妹纸，各奔东西永不再见。\r\n恨，是给过我那些美好，再回不到过去","createdAt":1594820396249},{"id":6014,"originId":"5f0f09714b61050e36e7ab07","articleId":1183,"userId":109,"content":"楼上的写小说么～","createdAt":1594820977889},{"id":6015,"originId":"5f0fc0f34b61050e36e7aba7","articleId":1183,"userId":21,"content":"[@zengming00](/user/zengming00) \r\n可能是你太敏感了，不要把事想的太好，也不要把事情想的太坏。还继续程序员么","createdAt":1594867955053},{"id":6016,"originId":"5ce8a03f4036f24194cf66f3","articleId":1185,"userId":161,"content":"非常有兴趣。可惜两个月前面试失败了，感觉投递希望不大呀","createdAt":1558749247880},{"id":6017,"originId":"5cef6ee852ccb64168ba8ce6","articleId":1185,"userId":546,"content":"[@tzbcf](/user/tzbcf) 分享下面试经验？","createdAt":1559195368781},{"id":6018,"originId":"5cf8cf6e95fcc914aa266bb9","articleId":1185,"userId":2251,"content":"阿里社招还能有p5岗？","createdAt":1559809902840},{"id":6019,"originId":"5d0371ab1fe902120f31f0e0","articleId":1185,"userId":2175,"content":"[@tzbcf](/user/tzbcf) 那可以好好调整过两三个月试下","createdAt":1560506795308},{"id":6020,"originId":"5d0371d01fe902120f31f0e6","articleId":1185,"userId":2175,"content":"[@18518300669](/user/18518300669) 是的，招不到合适的所以把要求放低了","createdAt":1560506832114},{"id":6021,"originId":"5d1d769569746a2ef81ba375","articleId":1185,"userId":1390,"content":"现在还招P5吗，毕业一年可以投吗\r\n","createdAt":1562211989598},{"id":6022,"originId":"5d1f3710ad75d374b58bcafa","articleId":1185,"userId":161,"content":"现在投递可以吗？换新工作才三个月。现在投会不会频繁跳槽？哈哈","createdAt":1562326800107},{"id":6023,"originId":"5f0d77b64b61050e36e7a56e","articleId":1185,"userId":2175,"content":"还在招～  有兴趣可以直接发邮件","createdAt":1594718134720},{"id":6024,"originId":"5f0d2f1de39d0e515220377e","articleId":1186,"userId":2133,"content":"自顶一下，还有多个HC","createdAt":1594699549592},{"id":6025,"originId":"5e8b28eb58ab6717beb7e57a","articleId":1189,"userId":2254,"content":"FAQ 补充：\r\n\r\nQ：这些岗位薪资为什么远高于海口同类岗位的薪资水平？\r\n\r\nA：基于我们的岗位要求，在海口本地找到符合需求的候选人的可能性微乎其微。所以我们的薪资主要考量是确保在「从一线城市的一线互联网公司吸引合适的候选人 relocation 到海口」上有足够的吸引力。同时如我们的 JD 所述，我们期望组建一个小而精英化的团队 1 个人拿 2 个人的钱做 3 个人的事情。\r\n\r\nQ：1 人拿 2 个人的钱做三个人的事情。 那岂不是 007 。\r\n\r\nA:我们觉得 007 解决不了效率问题，反而很多时候会造成更多的效率问题。效率问题只能通过残酷无情的推动自动化和方法论的升级来解决。当然作为前提这需要一个足够强大的基础工程设施（中台），我们有充足的预算来购买各类 SaaS 产品作为我们的基础工程设施的一部分。\r\n\r\nQ：我在（或曾在）海南本地工作为什么从来没听说过这家公司？\r\n\r\nA：实际上我们刚刚成立不久，基于海南自贸区的有关政策能够满足我们开展业务的需要才选择在海口组建新的公司。我们的团队成员和母公司都位于其他一线城市。\r\n\r\nQ：看你们 19 年就成立了，团队目前多少人呢，工作节奏如何？\r\n\r\nA：是这样的,其实已经有上线了的产品。 中海国投（盈动电子竞技（海南自贸区）有限公司 和 动动电子竞技（海南自贸区）有限公司 的母公司）在 2019 年获得了相关的牌照和试点许可，涵盖运营、客服和研发等部门差不多有 100 人左右。但基本都是在海南本地招聘的团队，距离一线互联网公司有非常大的差距，导致产品体验不那么理想。\r\n\r\n所以现在我们（ Oortcast Inc https://oortcast.com ）和中海国投进行战略合作，成立了一家新的公司（海南思行科技有限公司）来从 0 到 1 组建一个能匹配一线互联网公司水准的精英化小团队来重新研发产品。目前还在早期招聘阶段，当前计划维持这一新公司的产品技术团队在 10 人左右的规模。周末不加班，工作日偶尔加班。\r\n\r\n","createdAt":1586178283265},{"id":6026,"originId":"5e8b340b64259617c49a496a","articleId":1189,"userId":514,"content":"工资越高意味着流动性越小","createdAt":1586181131205},{"id":6027,"originId":"5e8bf7ad64259617c49a4aac","articleId":1189,"userId":2254,"content":"补充一个，来自 V2EX 上朋友们的疑问。\r\n\r\nQ：基于我在海口的生活经验 我对「海口属于二三线城市的物价水平」持怀疑态度\r\n\r\nA：抱歉，我们这一段的文案可能确实不够严谨和具有代表性。「二三线城市的物价水平」这一论述主要是基于我个人到海口后主观认知，以及和我之前在帝都时的生活经验的对比。\r\n\r\n我个人的主观经验是：\r\n\r\n住： 我在北京金台夕照附近租住两居室的价格是 18K/月，更早些时候在大望路百子湾附近租住大开间的价格是 6k 元 /月。 而我和我的其他同事现在在海口类似地段所租住的小区（国兴大道附近），一居室的价格在 3-4k 左右。\r\n\r\n食：同样是在国兴大道附近，我在饿了么上点外卖的均价大概在 30 元左右。 但之前在北京金台夕照附近，如果我在饿了么上点相同质量的食物，大概需要 50 元左右。\r\n\r\n行： 我在海口使用滴滴快车做为通勤工具，2 公里距离的价格是 10 元。 作为参考，在北京 2 公里的价格是 16 元。\r\n\r\n宽带：有在帝都生活经验的同学，应该都感受过「运营商垄断」的痛苦。在北京有大量的小区只能提供诸如「长城宽带」、「方正宽带」等价高质劣的二级运营商的小区宽带服务。 而在海口，至少我和我同事当下选择的这几个小区都可以直接办理 电信 500M 家宽。\r\n\r\n----\r\n\r\nQ：团队的理念很好，技术取向像使用前沿技术、GraphQL 、Restful API 、元编程、函数式编程的想法也不错，当年也是这种追求，所在的团队也走过这条路一段时间，使用觉得合适前沿但小众的技术。发现做下去会很难，毕竟能玩得起这些技术的都是少数人，即使你能玩，别人还不一定能玩得下去，招人也难。最后还是回到 Java，Golang 也是在少数项目中实践了几年之后才扩大使用范围。这种后台技术栈的选择有点被动，毕竟搞 ruby 或 nodejs 后端的少之又少，还要在技术人不怎么集中的地区，加上又是小团队，随便走个人对整个团队的影响会很大。先不论薪资待遇，这种团队能走多远都很难说，特别是在国内。\r\n\r\nA： \r\n\r\n感谢您的分享。\r\n\r\n我大概在 2013 年左右开始使用 Ruby on Rails， 然后在此之后使用 Ruby 技术栈连续创业和帮助数家大厂组建了多个技术团队。我也很愿意很您分享下我的个人观点。\r\n\r\n我的理解是 「小众语言和小团队」以及 「主流语言和大团队」其实都是相对适宜的取舍，而「小众语言的大团队」和「主流语言的小团队」这样的选择则可能不得不面对更多额外的挑战。招聘和做产品增长其实一样，本质上就是一个「漏斗模型」。 少量的高质量流量和高留存 与 大量的针对性不那么强的流量与低留存 实质上是完全等价的。\r\n\r\n当我们考虑组建一个小而精英化的团队时，由于整个团队 headcount 相对有限。那么即便是选择通过猎头等成本相对较高的渠道，依然是具有高 ROI 的。 与此同时，精英化的小团队很多时候意味着「 1 个人拿 2 个人的钱」，而管理学的相关实践告诉我们「高薪资实际上是能够有效较低团队流动速度」的。\r\n\r\n\r\n再就是关于 GraphQL 方面，我们的思考其实是这样的：\r\n\r\n从本质上说架构是一种 Trade-off 的艺术。软件工程的诸多历史教训告诉我们「增加人手必然增加整个团队的沟通成本，沟通成本利滚利式的增长最终将抵消掉新人手所带来的工作量」。不同于劳动密集型行业，在智力密集型行业流水线式的分工很多时候将导致降低效率而非提升效率。在理想状况下「由若干名全栈工程师乃至于全干工程师*各自负责一部分产品模块」其效率必然远高于「由产品、前端、后端、运维、运营所组成的职能团队」。\r\n\r\n但伴随着业务需求和技术复杂度的与日剧增，寻找既熟悉 iOS 和 Android 应用开发各自的难点，又熟悉如何使用消息队列解决高并发所带来的瓶颈，同时还拥有数据库容量规划经验的全能型 Web 开发者变得极其艰难。更多时候，全栈成为了「样样都懂」而非「样样精通」。\r\n\r\n因此，全栈工程师主要活跃于需求相对简单的早期创业公司。绝大多数中大型互联网公司，不得不采用沟通成本相对高昂的职能型团队模式。仅有 Google 、Facebook 、Amazon 等少数科技巨头，另辟蹊径的在全栈与规模化之间找到了新的平衡点。\r\n\r\n作为时下业界最为火热的术语，对于「中台」人人都有不同的解读。但正本清源，从更本价值上去看中台可以被理解为一种抽象层——屏蔽后台复杂细节，促进前台迭代效率。\r\n\r\n以 Google 、Facebook 、Amazon 为代表的科技巨头之所以能够建立全能型的工程团队，而不受由规模增长所带来的复杂度增长之影响，很大程度上要归功于它们极其完善的中台基础设施。\r\n\r\n例如当 Google 将能够在全球范围内进行分布式部署同时可实现外部一致性事务的数据库（ Spanner ）构建为云服务时，Google 的「全栈工程师」（ SDE ）们无需成为分布式系统专家即可轻松完成复杂系统的全球化部署需求。又比如通过 React Native 技术，Facebook 的工程师们便有能力在仅具有网页开发经验的情况下完成绝大多数的移动 App 开发需求。\r\n\r\n显然通过抽象包装屏蔽技术细节，才是应用开发进行精细化分工的正确打开方式。\r\n\r\n以 Docker 和 Kubernetes 为代表的 Cloud Native 技术的出现，使得构建完善的工程效率基础设施已非 Google 等科技巨头的专利。以中国互联网公司为例，从 阿里、腾讯 到 头条、美团、滴滴 再到 绝大多数的 A 轮以后初创公司，Kubernetes 已经成为了行业的事实标准。在此基础之上 Serverless 、Service Mesh 等新技术亦逐渐升温，构建 PaaS 乃至于 BaaS （后台即服务）已经成为了业界所共同预期的未来。\r\n\r\nRPA （机器人流程自动化）、低代码&零代码平台等概念也在近期广受追捧，很大程度上也可以被视作源于这一预期的进一步传导。\r\n\r\n基于此，我们相信未来将这样到来：传统意义上的程序员或将不复存在，取而代之的将是两类人——产品设计师（兼具当下的产品经理和全栈工程师的职能，广度优于深度）和计算机科学家（某个特定细分领域的行业专家，深度优于广度）。\r\n","createdAt":1586231213751},{"id":6028,"originId":"5e8d20be58ab6717beb7e923","articleId":1189,"userId":90,"content":"[@borisding1994](/user/borisding1994) 和我任职一家公司CTO观点一样，只剩下产品经理和技术专家，其他早就基础建设弄好了。","createdAt":1586307262764},{"id":6029,"originId":"5e951d3b64259617c49a5b95","articleId":1189,"userId":44,"content":"还是很有吸引力的，为何没人顶。","createdAt":1586830651258},{"id":6030,"originId":"5ef0133c13f8b244e57cae2e","articleId":1189,"userId":2255,"content":"[@borisding1994](/user/borisding1994) 简历投哪里呢","createdAt":1592791868423},{"id":6031,"originId":"5f011153b2a7c073cb32a988","articleId":1189,"userId":2247,"content":",","createdAt":1593905491304},{"id":6032,"originId":"5f0111b213f8b244e57cd18a","articleId":1189,"userId":2247,"content":"还招人不？","createdAt":1593905586524},{"id":6033,"originId":"5f082ecbbe4e8d091f1286ec","articleId":1189,"userId":134,"content":"🆙","createdAt":1594371787224},{"id":6034,"originId":"5ef89f8e472c7975b04b7dec","articleId":1191,"userId":514,"content":"Django，以前玩的老框架了","createdAt":1593352078766},{"id":6035,"originId":"5ef9bc74472c7975b04b8134","articleId":1191,"userId":125,"content":"[@dongguangming](/user/dongguangming) 抱歉，jd太老了，我们不用python，只用nodejs和go","createdAt":1593425012598},{"id":6036,"originId":"5f041bb513f8b244e57cd86d","articleId":1191,"userId":125,"content":"收到一些简历，我们正在评估中，感谢大家","createdAt":1594104757289},{"id":6037,"originId":"5f06e246b2a7c073cb32b729","articleId":1191,"userId":125,"content":"今天收到几个简历，好几个都被锁定在其他部门，不着急啊，他们应该还会通知大家面试其他组。","createdAt":1594286662506},{"id":6038,"originId":"5f0411e1b2a7c073cb32afb3","articleId":1193,"userId":2259,"content":"6666","createdAt":1594102241911},{"id":6039,"originId":"5ee6d6bab703280f0bcb97ed","articleId":1194,"userId":2260,"content":"顶一下","createdAt":1592186554183},{"id":6040,"originId":"5eeaf8a513f8b244e57ca46e","articleId":1194,"userId":2260,"content":"顶一下","createdAt":1592457381122},{"id":6041,"originId":"5ef014e1472c7975b04b6c09","articleId":1194,"userId":2260,"content":"顶起","createdAt":1592792289660},{"id":6042,"originId":"5ef8105b472c7975b04b7b13","articleId":1194,"userId":2260,"content":"顶一下","createdAt":1593315419203},{"id":6043,"originId":"5ef95cc913f8b244e57cbfbf","articleId":1194,"userId":2260,"content":"顶一下","createdAt":1593400521041},{"id":6044,"originId":"5efd6b7413f8b244e57cca4f","articleId":1194,"userId":2260,"content":"顶一下","createdAt":1593666420593},{"id":6045,"originId":"5f02cb5113f8b244e57cd51d","articleId":1194,"userId":2260,"content":"up","createdAt":1594018641323},{"id":6046,"originId":"5efdb6b4b2a7c073cb32a3df","articleId":1195,"userId":2240,"content":"感兴趣的可以直接回复邮件:HR@qbitnetwork.com","createdAt":1593685684634},{"id":6047,"originId":"5efe93d2b2a7c073cb32a4e3","articleId":1195,"userId":145,"content":"之前投过一次简历, 做了测试题后让我再耐心等等, 就没下文了么  😂","createdAt":1593742290032},{"id":6048,"originId":"5efed46513f8b244e57cce42","articleId":1195,"userId":2240,"content":"[@zhangxh1023](/user/zhangxh1023) 我记得你哈哈哈 要不我现在给你一个回复？","createdAt":1593758821513},{"id":6049,"originId":"5efefc5013f8b244e57ccedc","articleId":1195,"userId":145,"content":"[@Mnwka](/user/Mnwka) 啊? 这么尴尬吗 被认出来了🤣. 没啥消息就别回复了给俺哈哈哈留点儿念想","createdAt":1593769040136},{"id":6050,"originId":"5ef1763413f8b244e57cb11f","articleId":1196,"userId":2261,"content":"顶起来，继续招人","createdAt":1592882740812},{"id":6051,"originId":"5efdae0313f8b244e57ccb5c","articleId":1196,"userId":2262,"content":"就这薪资 要求还这么多？","createdAt":1593683459558},{"id":6052,"originId":"5d80abea95464514f7ed78b4","articleId":1199,"userId":2265,"content":"招聘中～～～","createdAt":1568713706059},{"id":6053,"originId":"5d88363153c75a4136b4ca6d","articleId":1199,"userId":2265,"content":"继续～～～","createdAt":1569207857642},{"id":6054,"originId":"5d8d64c98b9e1c0d6dc5e547","articleId":1199,"userId":2265,"content":"前端、后端、Server、QA～～","createdAt":1569547465727},{"id":6055,"originId":"5d915528865a9844a3019216","articleId":1199,"userId":2265,"content":"2019年9月30日更新","createdAt":1569805608608},{"id":6056,"originId":"5d9aa99f865a9844a3019c29","articleId":1199,"userId":2265,"content":"2019年10月7日更新","createdAt":1570417055203},{"id":6057,"originId":"5dad1a5eece3813ad9ba30c7","articleId":1199,"userId":2265,"content":"2019年10月21日更新 ","createdAt":1571625566414},{"id":6058,"originId":"5db7a87cece3813ad9ba4e68","articleId":1199,"userId":2265,"content":"2019年10月29日更新","createdAt":1572317308071},{"id":6059,"originId":"5dbfe6b5865a9844a301fc6b","articleId":1199,"userId":2265,"content":"2019年11月4日更新","createdAt":1572857525431},{"id":6060,"originId":"5dc8bf09ece3813ad9ba7855","articleId":1199,"userId":2265,"content":"2019年11月11日更新","createdAt":1573437193017},{"id":6061,"originId":"5dd1ef187651572e0955da33","articleId":1199,"userId":2265,"content":"2019年11月18日更新","createdAt":1574039320254},{"id":6062,"originId":"5ddb32aa34a8a07a2dab6da4","articleId":1199,"userId":2265,"content":"2019年11月25日更新","createdAt":1574646442022},{"id":6063,"originId":"5de617d76043397a546db3e2","articleId":1199,"userId":2265,"content":"2019年12月3日更新","createdAt":1575360471738},{"id":6064,"originId":"5dedb37c14ffa4125a5450ac","articleId":1199,"userId":2265,"content":"2019年12月9日更新","createdAt":1575859068697},{"id":6065,"originId":"5df7056176a67b5e0e418430","articleId":1199,"userId":2265,"content":"2019年12月16日更新","createdAt":1576469857146},{"id":6066,"originId":"5e001b96ba8f6d46c4ede912","articleId":1199,"userId":2265,"content":"2019年12月23日更新","createdAt":1577065366964},{"id":6067,"originId":"5e095b7dba8f6d46c4edfc52","articleId":1199,"userId":2265,"content":"\r\n2019年12月30日更新","createdAt":1577671549137},{"id":6068,"originId":"5e12972581adfe2602079ef2","articleId":1199,"userId":2265,"content":"2020年1月6日更新","createdAt":1578276645020},{"id":6069,"originId":"5e40c1a4267721420912b291","articleId":1199,"userId":2265,"content":"2020年2月10日更新","createdAt":1581302180206},{"id":6070,"originId":"5e4a676d1225c9423dcda401","articleId":1199,"userId":2265,"content":"2020年2月17日更新","createdAt":1581934445964},{"id":6071,"originId":"5e533f9c267721420912c39f","articleId":1199,"userId":2265,"content":"2020年2月23日更新","createdAt":1582514076146},{"id":6072,"originId":"5e5c710ea72b853f10045490","articleId":1199,"userId":2265,"content":"2020年3月2日更新","createdAt":1583116558532},{"id":6073,"originId":"5e65b27d23bc9e20b4e32a4f","articleId":1199,"userId":2265,"content":"2020年3月9日更新","createdAt":1583723133507},{"id":6074,"originId":"5e71d4b045fcf75ee50e4f9b","articleId":1199,"userId":2265,"content":"2020年3月18日更新","createdAt":1584518320605},{"id":6075,"originId":"5e7eaa1764259617c49a3441","articleId":1199,"userId":2265,"content":"2020年3月28日更新","createdAt":1585359383826},{"id":6076,"originId":"5e8c3fd058ab6717beb7e7f9","articleId":1199,"userId":2265,"content":"2020年4月7日更新","createdAt":1586249680804},{"id":6077,"originId":"5e97be060275394e76881a38","articleId":1199,"userId":2265,"content":"2020年4月16日更新","createdAt":1587002886416},{"id":6078,"originId":"5ea27c66d870946c6b6bdeec","articleId":1199,"userId":2265,"content":"招聘进行中","createdAt":1587706982536},{"id":6079,"originId":"5eaa9c2630176508da9b71a7","articleId":1199,"userId":2265,"content":"2020年4月30日更新","createdAt":1588239398464},{"id":6080,"originId":"5eaf8c13fd11584365d2cfcb","articleId":1199,"userId":1966,"content":"你们是远程远程工作还是需要到SG工作","createdAt":1588562963245},{"id":6081,"originId":"5eb3dc1f2d0afc4087f53bd8","articleId":1199,"userId":2265,"content":"[@spursy](/user/spursy) 需要到新加坡工作","createdAt":1588845599270},{"id":6082,"originId":"5eb3dc24e785ec40b04fafb0","articleId":1199,"userId":2265,"content":"有意向请联络/发送简历至liv.z@dadaconsultants.com \r\n或加微信dadahelper了解详情","createdAt":1588845604944},{"id":6083,"originId":"5ebcd5072d0afc4087f55218","articleId":1199,"userId":1641,"content":"所以必须是有大厂经验?","createdAt":1589433607764},{"id":6084,"originId":"5ec7918967c8a45803da12ca","articleId":1199,"userId":2265,"content":"有意向请联络/发送简历至liv.z@dadaconsultants.com\r\n或加微信dadahelper了解详情","createdAt":1590137225592},{"id":6085,"originId":"5eccf776b703280f0bcb6e76","articleId":1199,"userId":2266,"content":"*18 天年假，14 天带薪病假，6 天育儿假，14 天法定节假日，无996，work life balance。*\r\nare u sure?","createdAt":1590490998147},{"id":6086,"originId":"5ed0b5d5b703280f0bcb75a3","articleId":1199,"userId":2265,"content":"有意向请联络/发送简历至liv.z@dadaconsultants.com\r\n或加微信dadahelper了解详情","createdAt":1590736341630},{"id":6087,"originId":"5ee1e40ab703280f0bcb920b","articleId":1199,"userId":2265,"content":"有意向请联络/发送简历至liv.z@dadaconsultants.com\r\n或加微信dadahelper了解详情","createdAt":1591862282159},{"id":6088,"originId":"5ef025fc13f8b244e57cae6b","articleId":1199,"userId":2265,"content":"有意向请联络/发送简历至liv.z@dadaconsultants.com\r\n或加微信dadahelper了解详情","createdAt":1592796668573},{"id":6089,"originId":"5ef9912c472c7975b04b807d","articleId":1199,"userId":2265,"content":"2020年6月29日更新\r\n有意向请联络/发送简历至liv.z@dadaconsultants.com \r\n或加微信dadahelper了解详情","createdAt":1593413932933},{"id":6090,"originId":"5ef95a28472c7975b04b7f2e","articleId":1201,"userId":134,"content":"薪资呢(狗头)","createdAt":1593399848630},{"id":6091,"originId":"5ee9ac40b703280f0bcba0b4","articleId":1202,"userId":33,"content":"亮瞎","createdAt":1592372288730},{"id":6092,"originId":"5ee9afcdb703280f0bcba0cc","articleId":1202,"userId":2268,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 来来来，少侠留下简历再走～","createdAt":1592373197055},{"id":6093,"originId":"5ee9b22a472c7975b04b5dd3","articleId":1202,"userId":2269,"content":"up","createdAt":1592373802942},{"id":6094,"originId":"5ee9b63eb703280f0bcba115","articleId":1202,"userId":2270,"content":"福利有点好哇。","createdAt":1592374846600},{"id":6095,"originId":"5eeb4daf472c7975b04b63ef","articleId":1202,"userId":2268,"content":"自顶一下，持续招聘哟～","createdAt":1592479151258},{"id":6096,"originId":"5eec1587472c7975b04b64ea","articleId":1202,"userId":21,"content":"想去免费学英语，可惜人在奋斗逼之都，折腾不起了。","createdAt":1592530311065},{"id":6097,"originId":"5eec8010472c7975b04b66af","articleId":1202,"userId":2268,"content":"[@zy445566](/user/zy445566) 或许投个简历试试？哈哈哈","createdAt":1592557584250},{"id":6098,"originId":"5eec9793472c7975b04b675b","articleId":1202,"userId":16,"content":"不错不错","createdAt":1592563603776},{"id":6099,"originId":"5ef02481472c7975b04b6c35","articleId":1202,"userId":2268,"content":"[@AviorAlong](/user/AviorAlong) 来个简历？哈哈哈","createdAt":1592796289365},{"id":6100,"originId":"5eecb25d13f8b244e57ca96a","articleId":1205,"userId":2272,"content":"顶顶更健康","createdAt":1592570461427},{"id":6101,"originId":"5eed709613f8b244e57caa1b","articleId":1205,"userId":90,"content":"帮顶小卡～","createdAt":1592619158652},{"id":6102,"originId":"5eef4a07472c7975b04b6aff","articleId":1205,"userId":2272,"content":"[@jxycbjhc](/user/jxycbjhc) 感谢哈哈","createdAt":1592740359808},{"id":6103,"originId":"5eeeea0113f8b244e57cabbe","articleId":1206,"userId":2273,"content":"这个链接识别也是醉了。\r\nhttps://job.toutiao.com/s/JRBP3t4","createdAt":1592715777340},{"id":6104,"originId":"5ee5936782b588109b6489fe","articleId":1210,"userId":1947,"content":"经过跟楼主的沟通,补充一下\r\n1.薪资问题,楼主估计想找那种即使是兼职然后空余时间全都可以开发的,钱的话又舍不得给太多,之前说了好几种方案,比如按工时或者按需求来算钱,表示不愿意,楼主希望直接按天来算,然后250一天,平时可能工作三四个小时,周末最好是一整天\r\n2.技术问题,项目的技术栈是nest+ts+vue,前后端都要开发,在我表示这些技术栈也需要一定的时间来上手,楼主觉得等我熟悉了相关技术后再算工时比较合理\r\n\r\n我只能说这种个人的还是要谨慎些,看来每个人都是潜在的压榨者,我熟悉你项目的相关技术也是要成本的，不可能说等我自己花时间熟悉了以后再开发算钱的,而且我说按需求来算钱,这样时间成本这块不需要管也不同意,总之是想找个又便宜然后又可以快速出活的,只能说大家都是要吃饭的,没必要\r\n\r\n另外友情提示下,楼主在需要你出活或者赶紧做事的时候，回复的比谁都快;当说到这种事情的时候一天也就回个一两句,然后最后结果是你先熟悉下后面我们再讨论,我其实真是有点想问候他全家,拜托你直接帖子说清楚或者干脆点说这个你接受不了就行,别搞什么虚的,大家都不是傻子,也别浪费别人时间","createdAt":1592103783446},{"id":6105,"originId":"5ee59486b703280f0bcb96c6","articleId":1210,"userId":1947,"content":"楼主觉得有任何说错了的欢迎直接diss我,大家都是搞开发的没必要这么恶心人","createdAt":1592104070608},{"id":6106,"originId":"5ee59c4682b588109b648a11","articleId":1210,"userId":2276,"content":"[@oyosc](/user/oyosc) 感谢关注，回贴，我们会稍后联系您","createdAt":1592106054426},{"id":6107,"originId":"5ee59c4bb703280f0bcb96e0","articleId":1210,"userId":2276,"content":"[@oyosc](/user/oyosc) 感谢关注，回贴，我们会稍后联系您","createdAt":1592106059070},{"id":6108,"originId":"5ee6e4ffb703280f0bcb9827","articleId":1210,"userId":19,"content":"[@oyosc](/user/oyosc) 点赞 很真实 我信","createdAt":1592190207787},{"id":6109,"originId":"5ee9b4bbb703280f0bcba103","articleId":1210,"userId":523,"content":"本来很有兴趣的, 技术栈也符合。。。。","createdAt":1592374459451},{"id":6110,"originId":"5ee7540c82b588109b648c7e","articleId":1211,"userId":2278,"content":"Python在线教育，砸简历","createdAt":1592218636275},{"id":6111,"originId":"5e6ee18589a5c35f11e32bb4","articleId":1215,"userId":2281,"content":" 疫情不影响任何事情，可以远程面试，远程入职，远程办公！","createdAt":1584324997962},{"id":6112,"originId":"5e704d0989a5c35f11e32ebd","articleId":1215,"userId":514,"content":"用django开发业务后台吗","createdAt":1584418057481},{"id":6113,"originId":"5e717e5889a5c35f11e330da","articleId":1215,"userId":2281,"content":"[@dongguangming](/user/dongguangming) 你是指server侧么？server侧是 python和go。前端也用nodejs自己搭建服务。django在某些项目里有用到。","createdAt":1584496216811},{"id":6114,"originId":"5e717e8589a5c35f11e330e0","articleId":1215,"userId":2281,"content":"[@dongguangming](/user/dongguangming) 这个JD比较陈旧了，仅做参考哈～","createdAt":1584496261353},{"id":6115,"originId":"5e71bfb589a5c35f11e331d1","articleId":1215,"userId":514,"content":"可以借鉴","createdAt":1584512949377},{"id":6116,"originId":"5e7444fc58ab6717beb7bd1b","articleId":1215,"userId":117,"content":"[@regrex](/user/regrex) 什么时间可以面试呀，目前还在职","createdAt":1584678140107},{"id":6117,"originId":"5e74762258ab6717beb7bdb3","articleId":1215,"userId":2281,"content":"[@chenkai0520](/user/chenkai0520) 随时都可以的，看你时间，有兴趣的话欢迎直接投递简历，或者微信联系我，微信号：regrex","createdAt":1584690722855},{"id":6118,"originId":"5e74ab5f58ab6717beb7be4f","articleId":1215,"userId":117,"content":"[@regrex](/user/regrex) 已投递简历","createdAt":1584704351033},{"id":6119,"originId":"5e79b88a58ab6717beb7c639","articleId":1215,"userId":2281,"content":"[@chenkai0520](/user/chenkai0520) 已安排面试","createdAt":1585035402666},{"id":6120,"originId":"5e79bbf664259617c49a29af","articleId":1215,"userId":117,"content":"[@regrex](/user/regrex) 嗯嗯，已收到通知","createdAt":1585036278033},{"id":6121,"originId":"5e85909c58ab6717beb7dd7a","articleId":1215,"userId":2281,"content":"🚘","createdAt":1585811612469},{"id":6122,"originId":"5e902ad258ab6717beb7f005","articleId":1215,"userId":2281,"content":"走过路过不要错过","createdAt":1586506450248},{"id":6123,"originId":"5e9951e2d870946c6b6bcca0","articleId":1215,"userId":2281,"content":"我们还在持续大量招人，社招急需，各位不要错过。","createdAt":1587106274215},{"id":6124,"originId":"5ee1a3fb82b588109b64845e","articleId":1215,"userId":2281,"content":"JD更新啦，还在持续招聘中哦","createdAt":1591845883288},{"id":6125,"originId":"5ee0f2ddb703280f0bcb907c","articleId":1216,"userId":2282,"content":"杭州一家中型公司","createdAt":1591800541364},{"id":6126,"originId":"5eddd93db703280f0bcb8b14","articleId":1218,"userId":1246,"content":"或是发送邮箱！我的邮箱：452412681@qq.com\r\n","createdAt":1591597373708},{"id":6127,"originId":"5eddd941b703280f0bcb8b17","articleId":1218,"userId":1246,"content":"或是发送邮箱！我的邮箱：452412681@qq.com\r\n","createdAt":1591597377756},{"id":6128,"originId":"5eddae7382b588109b647db0","articleId":1219,"userId":2201,"content":"继续招人","createdAt":1591586419542},{"id":6129,"originId":"5ed70f2d82b588109b647431","articleId":1222,"userId":1154,"content":"优质岗位  顶尖公司  必须支持~~~","createdAt":1591152429120},{"id":6130,"originId":"5ecf8680b703280f0bcb7385","articleId":1226,"userId":2288,"content":"路过","createdAt":1590658688990},{"id":6131,"originId":"5eccfc1eb703280f0bcb6ea9","articleId":1227,"userId":2266,"content":"自己的帖子，自己顶","createdAt":1590492190859},{"id":6132,"originId":"5ecdb5dfb703280f0bcb6f0f","articleId":1227,"userId":2247,"content":"996吗？","createdAt":1590539743797},{"id":6133,"originId":"5ecdc280b703280f0bcb6f38","articleId":1227,"userId":2290,"content":"帮顶","createdAt":1590542976234},{"id":6134,"originId":"5ece546082b588109b6464f0","articleId":1227,"userId":2266,"content":"顶顶顶","createdAt":1590580320119},{"id":6135,"originId":"5ece5482b703280f0bcb70c4","articleId":1227,"userId":2266,"content":"[@yhc-yhc](/user/yhc-yhc) 995考虑么","createdAt":1590580354560},{"id":6136,"originId":"5eceffabb703280f0bcb712f","articleId":1227,"userId":2290,"content":"帮顶\r\n\r\n","createdAt":1590624171554},{"id":6137,"originId":"5e7dca0864259617c49a338a","articleId":1228,"userId":2291,"content":"消灭0回复","createdAt":1585302024707},{"id":6138,"originId":"5e7f0a5964259617c49a353d","articleId":1228,"userId":2291,"content":"顶起来","createdAt":1585384025376},{"id":6139,"originId":"5e7f8c7a58ab6717beb7d244","articleId":1228,"userId":2292,"content":"顶起来","createdAt":1585417338588},{"id":6140,"originId":"5e81a90764259617c49a38be","articleId":1228,"userId":2291,"content":"upup","createdAt":1585555719881},{"id":6141,"originId":"5e8405af58ab6717beb7da4d","articleId":1228,"userId":161,"content":"vue不行吗[捂脸]","createdAt":1585710511959},{"id":6142,"originId":"5e86c11958ab6717beb7df87","articleId":1228,"userId":2291,"content":"[@tzbcf](/user/tzbcf) vue可以的，只要技术过硬，怎么玩都行","createdAt":1585889561461},{"id":6143,"originId":"5e8bda2964259617c49a4a0a","articleId":1228,"userId":161,"content":"[@YouHan26](/user/YouHan26) 那面试会问react吗？","createdAt":1586223657003},{"id":6144,"originId":"5ea24b26d870946c6b6bddad","articleId":1228,"userId":2291,"content":"[@tzbcf](/user/tzbcf) 看你的技术栈","createdAt":1587694374509},{"id":6145,"originId":"5ea24b31d870946c6b6bddb5","articleId":1228,"userId":2291,"content":"upup","createdAt":1587694385326},{"id":6146,"originId":"5eba5635e785ec40b04fbc4b","articleId":1228,"userId":2291,"content":"upup","createdAt":1589270069410},{"id":6147,"originId":"5ec79103a87fc8583363dbd5","articleId":1228,"userId":2291,"content":"upup111","createdAt":1590137091062},{"id":6148,"originId":"5ece2eb782b588109b646472","articleId":1228,"userId":2291,"content":"upup111","createdAt":1590570679535},{"id":6149,"originId":"5ec77dbda87fc8583363dbb1","articleId":1229,"userId":1246,"content":"或是发送邮箱！我的邮箱：452412681@qq.com","createdAt":1590132157697},{"id":6150,"originId":"5ebe3942e785ec40b04fcf88","articleId":1231,"userId":33,"content":"钱太少了","createdAt":1589524802563},{"id":6151,"originId":"5ebce3cae785ec40b04fc491","articleId":1232,"userId":1154,"content":"----\r\nAirhost的招聘已经结束，【无涯】两周即成功推荐2人入职，并帮助他们开启了新的工作方式–远程工作。\r\n\r\n更多岗位已经在无涯官网上线  [wuya.work](http://wuya.work)，各种岗位持续更新中，请保持关注~","createdAt":1589437386465},{"id":6152,"originId":"5dfc7e0f0696c446bf64f569","articleId":1234,"userId":640,"content":"加个微信可好 base64:amlhbmd6aHVvODA5NzAz\r\n前天发微信问HR 都没理我","createdAt":1576828431725},{"id":6153,"originId":"5dfcc863ba8f6d46c4ede738","articleId":1234,"userId":1424,"content":"帮顶， 楼主是个好人","createdAt":1576847459474},{"id":6154,"originId":"5e05703eba8f6d46c4edf60f","articleId":1234,"userId":1409,"content":"[@jiangzhuo](/user/jiangzhuo) 你还有hr的微信？我的邮箱 yunnysunny@163.com","createdAt":1577414718319},{"id":6155,"originId":"5ea2593b0275394e76882f42","articleId":1234,"userId":1409,"content":"目前还在招聘中……","createdAt":1587697979923},{"id":6156,"originId":"5ea59485d870946c6b6be453","articleId":1234,"userId":110,"content":"哪个城市？还是远程？","createdAt":1587909765771},{"id":6157,"originId":"5eab8bd5fd11584365d2cce2","articleId":1234,"userId":1409,"content":"[@andyhu](/user/andyhu) 北京，视频面试","createdAt":1588300757858},{"id":6158,"originId":"5eaf85c930176508da9b757f","articleId":1234,"userId":110,"content":"[@yunnysunny](/user/yunnysunny) 支持远程么","createdAt":1588561353869},{"id":6159,"originId":"5ebaa8152d0afc4087f54a31","articleId":1234,"userId":1409,"content":"[@andyhu](/user/andyhu) 是远程面试","createdAt":1589291029248},{"id":6160,"originId":"5eb4f8d7e785ec40b04fb18c","articleId":1237,"userId":1246,"content":"我的邮箱：452412681@qq.com","createdAt":1588918487305},{"id":6161,"originId":"5e7899de58ab6717beb7c42e","articleId":1238,"userId":2296,"content":"消灭零回复","createdAt":1584962014327},{"id":6162,"originId":"5e789beb64259617c49a2773","articleId":1238,"userId":2297,"content":"顶，东半球最大的前端团队~~","createdAt":1584962539777},{"id":6163,"originId":"5e79efca64259617c49a2ae7","articleId":1238,"userId":2295,"content":"极速面试，当天面试当天出一面结果","createdAt":1585049546161},{"id":6164,"originId":"5e7ae7b558ab6717beb7c947","articleId":1238,"userId":2295,"content":"这里有大把优秀项目，来这里实习，毕业设计不用发愁喔。","createdAt":1585113013964},{"id":6165,"originId":"5e7dab4b58ab6717beb7cf6f","articleId":1238,"userId":2295,"content":"这里有很多牛逼的师兄，跟优秀的人一起工作，你也会变得优秀喔。","createdAt":1585294155936},{"id":6166,"originId":"5e81d24464259617c49a39b2","articleId":1238,"userId":2295,"content":"顶一下","createdAt":1585566276805},{"id":6167,"originId":"5e85c59964259617c49a4222","articleId":1238,"userId":2295,"content":"顶一下","createdAt":1585825177092},{"id":6168,"originId":"5e8be86558ab6717beb7e66b","articleId":1238,"userId":2295,"content":"顶一下","createdAt":1586227301247},{"id":6169,"originId":"5e9442c558ab6717beb7f702","articleId":1238,"userId":2295,"content":"顶一下","createdAt":1586774725011},{"id":6170,"originId":"5e96d13949db644e3aba7713","articleId":1238,"userId":161,"content":"一年一跳这种频率的五年渣渣要吗？","createdAt":1586942265587},{"id":6171,"originId":"5e99176fd870946c6b6bcb90","articleId":1238,"userId":2295,"content":"[@tzbcf](/user/tzbcf) 这类一般会被过不了简历评估，但是根本原因不是因为跳槽频率，是因为跳槽太频繁导致简历上的项目都过于简单，技术和业务沉淀都不足。如果亲自觉技术上比较优秀，业务sense也比较好，也可以来面试一下。","createdAt":1587091311167},{"id":6172,"originId":"5e994fde0275394e76881e07","articleId":1238,"userId":161,"content":"[@xiaoxiaojing](/user/xiaoxiaojing) 明白，谢谢指点，目前也是打算找个技术方向深挖，可能去腾讯云，目前面完在走流程。","createdAt":1587105758313},{"id":6173,"originId":"5eb29d8ee785ec40b04fad7d","articleId":1238,"userId":2295,"content":"顶一下","createdAt":1588764046562},{"id":6174,"originId":"5eb4bd6ee785ec40b04fb0cf","articleId":1238,"userId":2295,"content":"upupup","createdAt":1588903278453},{"id":6175,"originId":"5df1bdb9c9ab2e579c2151c9","articleId":1241,"userId":1791,"content":"顶一下贴","createdAt":1576123833801},{"id":6176,"originId":"5e72e1e058ab6717beb7b9e0","articleId":1241,"userId":1791,"content":"顶帖，继续空缺","createdAt":1584587232269},{"id":6177,"originId":"5e7ac78864259617c49a2c4d","articleId":1241,"userId":1791,"content":"顶帖，继续空缺","createdAt":1585104776444},{"id":6178,"originId":"5e845d4264259617c49a3eea","articleId":1241,"userId":1791,"content":"顶帖","createdAt":1585732930599},{"id":6179,"originId":"5eaa7b18fd11584365d2cb34","articleId":1241,"userId":354,"content":"[@fish](/user/fish) ","createdAt":1588230936958},{"id":6180,"originId":"5eaa7b2630176508da9b714c","articleId":1241,"userId":354,"content":"[@fish](/user/fish) ","createdAt":1588230950695},{"id":6181,"originId":"5eaa21f2fd11584365d2ca49","articleId":1242,"userId":851,"content":"这个饼可以","createdAt":1588208114834},{"id":6182,"originId":"5eaa33dd30176508da9b708c","articleId":1242,"userId":516,"content":"有招聘专题，楼主发错地方了","createdAt":1588212701138},{"id":6183,"originId":"5eaa3d0afd11584365d2ca9b","articleId":1242,"userId":655,"content":"[@lisniuse](/user/lisniuse) 相当于饼的味道已经知道了。产品已经上线了。可以体验。","createdAt":1588215050321},{"id":6184,"originId":"5ea93ecc30176508da9b6f37","articleId":1243,"userId":516,"content":"已添加，帮顶","createdAt":1588149964846},{"id":6185,"originId":"5ea950b3fd11584365d2c9a9","articleId":1243,"userId":1246,"content":"[@nnliang](/user/nnliang) 送你一朵小红花~","createdAt":1588154547700},{"id":6186,"originId":"5e8de13358ab6717beb7eb8d","articleId":1245,"userId":2302,"content":"地点？","createdAt":1586356531546},{"id":6187,"originId":"5ea63b2f0275394e76883689","articleId":1245,"userId":2303,"content":"有工作年限要求吗\r\n","createdAt":1587952431885},{"id":6188,"originId":"5ea3a621d870946c6b6be148","articleId":1246,"userId":514,"content":"数字化确实是趋势","createdAt":1587783201982},{"id":6189,"originId":"5ea51e120275394e76883511","articleId":1246,"userId":1307,"content":"[@dongguangming](/user/dongguangming)  有兴趣就赶紧来嘛，求简历","createdAt":1587879442466},{"id":6190,"originId":"5ea2700e0275394e76882fb9","articleId":1248,"userId":390,"content":"如何投递简历请说明一下。","createdAt":1587703822429},{"id":6191,"originId":"5ea293420275394e7688306a","articleId":1248,"userId":1246,"content":"[@18820227745](/user/18820227745) 可以添加我的微信：chujuner_，或是留下您的微信，我加您","createdAt":1587712834222},{"id":6192,"originId":"5e6750c323bc9e20b4e32eee","articleId":1253,"userId":1805,"content":"已经收到简历，全部都已经回复哈，感谢感谢，祝大家面试顺利；欢饮大家继续投递，web前端方向也有需求","createdAt":1583829187490},{"id":6193,"originId":"5e967efb58ab6717beb7fb36","articleId":1253,"userId":1750,"content":"面试要做算法题吗","createdAt":1586921211845},{"id":6194,"originId":"5e940b9658ab6717beb7f60f","articleId":1255,"userId":153,"content":"投递简历的朋友，记得备注一下【cnode】","createdAt":1586760598960},{"id":6195,"originId":"5e94496d64259617c49a5a8c","articleId":1255,"userId":153,"content":"顶一下呀","createdAt":1586776429586},{"id":6196,"originId":"5e95776464259617c49a5d23","articleId":1255,"userId":153,"content":"继续顶一下","createdAt":1586853732597},{"id":6197,"originId":"5e8859b964259617c49a4624","articleId":1261,"userId":2315,"content":"请问现在该职位还在招聘吗?","createdAt":1585994169930},{"id":6198,"originId":"5cfe33f81fe902120f31d78d","articleId":1262,"userId":1991,"content":"请各位大佬们的简历疯狂的砸向我吧！！","createdAt":1560163320948},{"id":6199,"originId":"5d2695e1fa8ef0094e063fab","articleId":1262,"userId":44,"content":"沦！！！","createdAt":1562809825735},{"id":6200,"originId":"5d7d096aa7474a231a58b7b8","articleId":1262,"userId":1986,"content":"K-Lab的产品定位感觉有点窄啊","createdAt":1568475498622},{"id":6201,"originId":"5d81cb6953c75a4136b4b469","articleId":1262,"userId":1991,"content":"[@zmecust](/user/zmecust)   >.<","createdAt":1568787305952},{"id":6202,"originId":"5d8a17bce86cfb0d2a6457fe","articleId":1262,"userId":1991,"content":"哥哥们，姐姐们，我需要简历～","createdAt":1569331132526},{"id":6203,"originId":"5d8ac8d58b9e1c0d6dc5de2f","articleId":1262,"userId":1991,"content":"[@zmecust](/user/zmecust)  兄弟，有人可以推荐介绍吗","createdAt":1569376469227},{"id":6204,"originId":"5d9e9bc6ece3813ad9ba0cb9","articleId":1262,"userId":1991,"content":"各位大佬们，有人可以推荐吗？谢谢啦","createdAt":1570675654631},{"id":6205,"originId":"5da4073f865a9844a301b1bc","articleId":1262,"userId":1991,"content":"今天有人吗？没有的话，明天我再来","createdAt":1571030847229},{"id":6206,"originId":"5da41852865a9844a301b22f","articleId":1262,"userId":161,"content":"支持异地电话面试么","createdAt":1571035218013},{"id":6207,"originId":"5da52548ece3813ad9ba1c5d","articleId":1262,"userId":1991,"content":"[@tzbcf](/user/tzbcf) 可以，您这边可以把您的简历信息发到我邮箱里面吗？谢谢","createdAt":1571104072939},{"id":6208,"originId":"5da69063865a9844a301b9c6","articleId":1262,"userId":2317,"content":"专科，3年node开发经验，可以吗？","createdAt":1571197027932},{"id":6209,"originId":"5da7ca96865a9844a301bcd2","articleId":1262,"userId":1991,"content":"[@HenryFan2016](/user/HenryFan2016)  不好意思，企业这边至少是本科.0.0","createdAt":1571277462956},{"id":6210,"originId":"5dc225d9ece3813ad9ba68b9","articleId":1262,"userId":1991,"content":"今天有人吗？没有的话，明天我再来","createdAt":1573004761951},{"id":6211,"originId":"5dcb95e0ece3813ad9ba80e3","articleId":1262,"userId":2318,"content":"现在还招嘛？？？","createdAt":1573623264531},{"id":6212,"originId":"5dcb95edece3813ad9ba80e7","articleId":1262,"userId":2318,"content":"[@Aimsen-Jeffrey](/user/Aimsen-Jeffrey) 现在还招嘛？？？","createdAt":1573623277618},{"id":6213,"originId":"5dcbb86fece3813ad9ba81dd","articleId":1262,"userId":1991,"content":"[@cxyxxx0924](/user/cxyxxx0924)   招呀！！","createdAt":1573632111665},{"id":6214,"originId":"5dcbb8bc865a9844a3021aae","articleId":1262,"userId":1991,"content":"[@cxyxxx0924](/user/cxyxxx0924)   加我微信18286144072。","createdAt":1573632188750},{"id":6215,"originId":"5def06e014ffa4125a54544d","articleId":1262,"userId":2319,"content":"[@Aimsen-Jeffrey](/user/Aimsen-Jeffrey) 只要nodejs吗？ 我只要背景是前端，不过也用node写过后台","createdAt":1575945952744},{"id":6216,"originId":"5df1980adf1b9a40d14c6286","articleId":1262,"userId":1991,"content":"[@tcstory](/user/tcstory) 岗位JD上的技术点OK吗？如果可以的话，您可以加一下我的微信哦，18286144072，谢谢！","createdAt":1576114186409},{"id":6217,"originId":"5e0f0a6d4bea432607fccc5d","articleId":1262,"userId":2320,"content":"那个人一定是个盖世英雄，有一天他会踩着七色的云彩去应聘","createdAt":1578044013864},{"id":6218,"originId":"5e12ef784bea432607fcd139","articleId":1262,"userId":1991,"content":"[@yilikun](/user/yilikun) 是你吗？","createdAt":1578299256670},{"id":6219,"originId":"5e1e6e271225c9423dcd801e","articleId":1262,"userId":1991,"content":"年底了，大佬们，我在这里已经等了很久很久了，为什么心里的那个人还是没有出现。","createdAt":1579052583845},{"id":6220,"originId":"5e2ffe6d267721420912a9c1","articleId":1262,"userId":2321,"content":"现在都这么惨了吗。双休已经开始算成公司福利了？","createdAt":1580203629879},{"id":6221,"originId":"5e5397b9267721420912c45b","articleId":1262,"userId":1991,"content":"[@zlq4863947](/user/zlq4863947)  哈哈哈，因为现在的996很多呀0.0","createdAt":1582536633044},{"id":6222,"originId":"5e68767723bc9e20b4e333b6","articleId":1262,"userId":1991,"content":"默默的问一句，有人吗～","createdAt":1583904375177},{"id":6223,"originId":"5e6bb0583cadb020b9160ea2","articleId":1262,"userId":110,"content":"[@Aimsen-Jeffrey](/user/Aimsen-Jeffrey) 有，但是只找远程工作。。","createdAt":1584115800992},{"id":6224,"originId":"5e6ecf0345fcf75ee50e48ed","articleId":1262,"userId":1991,"content":"[@andyhu](/user/andyhu)    0.0，飞一飞、","createdAt":1584320259598},{"id":6225,"originId":"5e7c5f4558ab6717beb7cc61","articleId":1262,"userId":1991,"content":"小伙伴们，已经复工了吧，机会可以看起来了。","createdAt":1585209157037},{"id":6226,"originId":"5e7f8f2b64259617c49a35b8","articleId":1262,"userId":2292,"content":"[@Aimsen-Jeffrey](/user/Aimsen-Jeffrey)  顶可怜的Aimsen","createdAt":1585418027769},{"id":6227,"originId":"5e84290058ab6717beb7da96","articleId":1262,"userId":1991,"content":"[@JingLMalan](/user/JingLMalan)  真的可怜 /(ㄒoㄒ)/~~","createdAt":1585719552989},{"id":6228,"originId":"5e86b2df64259617c49a4384","articleId":1262,"userId":2322,"content":"搭车, 坐标杭州.阿里-钉钉文档团队.\r\n有兴趣可以看下 https://v2ex.com/t/656328#reply1","createdAt":1585885919120},{"id":6229,"originId":"5e8596f458ab6717beb7dd9f","articleId":1264,"userId":2324,"content":"职位为研发和架构两个方向，欢迎交流！","createdAt":1585813236622},{"id":6230,"originId":"5e7456ed58ab6717beb7bd2c","articleId":1265,"userId":2325,"content":"疫情期间采用视频面试，欢迎投递简历","createdAt":1584682733595},{"id":6231,"originId":"5e84645b64259617c49a3f15","articleId":1265,"userId":2325,"content":"持续在招，欢迎自荐或推荐～","createdAt":1585734747320},{"id":6232,"originId":"5e804ad564259617c49a362d","articleId":1267,"userId":2326,"content":"HC很多，有需要的朋友可以大胆发简历","createdAt":1585466069711},{"id":6233,"originId":"5e7b441658ab6717beb7ca5e","articleId":1268,"userId":2327,"content":"校招和社招都有哦，欢迎大家找我，可帮忙看简历，修改","createdAt":1585136662637},{"id":6234,"originId":"5e786a7a64259617c49a2692","articleId":1270,"userId":2329,"content":"[@i5ting](/user/i5ting)  🐺伯伯，求翻牌.. ","createdAt":1584949882600},{"id":6235,"originId":"5e786ab864259617c49a269b","articleId":1270,"userId":2330,"content":"顶一下","createdAt":1584949944246},{"id":6236,"originId":"5e78b80958ab6717beb7c46d","articleId":1270,"userId":2331,"content":"面试考算法吗？","createdAt":1584969737942},{"id":6237,"originId":"5e0d698101c0915a9d9bd849","articleId":1271,"userId":2306,"content":"邮箱:matthew.ye.0724@gmail.com\r\n微信号：yehao724","createdAt":1577937281124},{"id":6238,"originId":"5e0d69b9f628e05aa2172eaa","articleId":1271,"userId":2306,"content":"https://www.proxy.com/","createdAt":1577937337378},{"id":6239,"originId":"5e0d6a12f628e05aa2172eae","articleId":1271,"userId":2306,"content":"20-50k+都可以、薪资open","createdAt":1577937426693},{"id":6240,"originId":"5e72cb6758ab6717beb7b97a","articleId":1271,"userId":2306,"content":"欢迎大牛来挑战","createdAt":1584581479626},{"id":6241,"originId":"5e7829ae58ab6717beb7c271","articleId":1271,"userId":2306,"content":"~","createdAt":1584933294575},{"id":6242,"originId":"5e587a3a1225c9423dcdb353","articleId":1274,"userId":2332,"content":" 顶","createdAt":1582856762247},{"id":6243,"originId":"5e5c73b3a72b853f10045499","articleId":1274,"userId":2332,"content":"顶","createdAt":1583117235407},{"id":6244,"originId":"5e72d7ef64259617c49a1cab","articleId":1274,"userId":2332,"content":"招聘开始了，有需要的找实习的同学抓紧呀","createdAt":1584584687877},{"id":6245,"originId":"5e3b68e21225c9423dcd9832","articleId":1277,"userId":2334,"content":"跨国招聘的流程较长，有想法的可以先来找我聊哦","createdAt":1580951778506},{"id":6246,"originId":"5e40db171225c9423dcd9b8c","articleId":1277,"userId":2334,"content":"最近需求量较大，各位抓住机会哦！","createdAt":1581308695795},{"id":6247,"originId":"5e7185b289a5c35f11e33104","articleId":1277,"userId":2334,"content":"感兴趣的欢迎来聊~","createdAt":1584498098336},{"id":6248,"originId":"5e70c9e045fcf75ee50e4db7","articleId":1279,"userId":2256,"content":"持续招聘","createdAt":1584450016124},{"id":6249,"originId":"5e536e57267721420912c411","articleId":1281,"userId":105,"content":"非常棒的团队，有趣的人一起做酷酷的事情。","createdAt":1582526039015},{"id":6250,"originId":"5e57d2821225c9423dcdb2dd","articleId":1281,"userId":2337,"content":"赞，内推成功了一个，团队很棒。","createdAt":1582813826187},{"id":6251,"originId":"5e6f2ddc89a5c35f11e32cdf","articleId":1281,"userId":2336,"content":"非常棒的团队，一起做有意义的事情","createdAt":1584344540389},{"id":6252,"originId":"5e6c4eba3cadb020b9160f1d","articleId":1282,"userId":2338,"content":"不要犹豫，喜欢就投","createdAt":1584156346286},{"id":6253,"originId":"5e6b783a23bc9e20b4e33b17","articleId":1283,"userId":2339,"content":"marcus@authing.cn","createdAt":1584101434572},{"id":6254,"originId":"5e60a9a923bc9e20b4e3246c","articleId":1291,"userId":2344,"content":"办公地点是？","createdAt":1583393193470},{"id":6255,"originId":"5e60e54d3cadb020b915f8db","articleId":1291,"userId":2343,"content":"腾讯北京总部大厦","createdAt":1583408461276},{"id":6256,"originId":"5e62115223bc9e20b4e3270a","articleId":1291,"userId":2343,"content":"有意向的，可以发简历或者站内私信","createdAt":1583485266811},{"id":6257,"originId":"5e40c1c9267721420912b294","articleId":1305,"userId":2352,"content":"补充一点，长期招聘，欢迎勾搭","createdAt":1581302217962},{"id":6258,"originId":"5e573e6d1225c9423dcdb1c2","articleId":1305,"userId":2352,"content":"继续招人中，顶一顶","createdAt":1582775917873},{"id":6259,"originId":"5e5731931225c9423dcdb19a","articleId":1306,"userId":1941,"content":"欢迎大家投递，疫情期间可安排远程面试 ","createdAt":1582772627204},{"id":6260,"originId":"5e54b6bc1225c9423dcdae5f","articleId":1308,"userId":2353,"content":"牛客网直链：https://www.nowcoder.com/discuss/370552","createdAt":1582610108355},{"id":6261,"originId":"5e53a6941225c9423dcdad58","articleId":1309,"userId":1483,"content":"1","createdAt":1582540436512},{"id":6262,"originId":"5e4c88311225c9423dcda61a","articleId":1315,"userId":2359,"content":"请问这是远程职位吗","createdAt":1582073905891},{"id":6263,"originId":"5e4e2d521225c9423dcda845","articleId":1315,"userId":2042,"content":"[@beginWithJS](/user/beginWithJS) 不是远程哦。","createdAt":1582181714337},{"id":6264,"originId":"5c74ac61ab86b86ddf6b2d88","articleId":1316,"userId":1791,"content":"顶帖，抓紧抓紧","createdAt":1551150177518},{"id":6265,"originId":"5c8353d07ce0df373242664d","articleId":1316,"userId":1791,"content":"顶帖","createdAt":1552110544385},{"id":6266,"originId":"5c8607b0acb681372d416f2e","articleId":1316,"userId":1791,"content":"顶帖","createdAt":1552287664080},{"id":6267,"originId":"5c87d3ecacb681372d417830","articleId":1316,"userId":1791,"content":"继续","createdAt":1552405484749},{"id":6268,"originId":"5c8b51b87ce0df37324284bf","articleId":1316,"userId":354,"content":"定","createdAt":1552634296297},{"id":6269,"originId":"5c926fcd96558e26e1b67e50","articleId":1316,"userId":1791,"content":"继续","createdAt":1553100749305},{"id":6270,"originId":"5cadaf87dad66d658e40787c","articleId":1316,"userId":1791,"content":"顶帖","createdAt":1554886535407},{"id":6271,"originId":"5cdbe1a3e57aac76fed2aeb0","articleId":1316,"userId":354,"content":",","createdAt":1557914019501},{"id":6272,"originId":"5cf48d6195fcc914aa265790","articleId":1316,"userId":354,"content":"mark","createdAt":1559530849836},{"id":6273,"originId":"5d3bbf7f9969a529571d78fd","articleId":1316,"userId":1791,"content":"顶帖","createdAt":1564196735806},{"id":6274,"originId":"5d3e61b99969a529571d7c7d","articleId":1316,"userId":2181,"content":"我帮你顶一下","createdAt":1564369337411},{"id":6275,"originId":"5d3ee7699969a529571d7ed5","articleId":1316,"userId":354,"content":"mark","createdAt":1564403561188},{"id":6276,"originId":"5d41566db4725a628e26a05b","articleId":1316,"userId":2360,"content":"顶顶顶，p6的要求严格吗","createdAt":1564563053435},{"id":6277,"originId":"5d5135b612a0194544416086","articleId":1316,"userId":1791,"content":"顶个贴\r\n","createdAt":1565603254282},{"id":6278,"originId":"5d51761112a019454441619d","articleId":1316,"userId":2182,"content":"现在明确要应届到1年的岗位好少啊，，不过还是硬着头皮投了","createdAt":1565619729013},{"id":6279,"originId":"5d526d08697873456c6bd001","articleId":1316,"userId":1791,"content":"继续顶帖","createdAt":1565682952530},{"id":6280,"originId":"5e4b99231225c9423dcda545","articleId":1316,"userId":1791,"content":"2020启动，可以聊起来了","createdAt":1582012707037},{"id":6281,"originId":"5e41294a1225c9423dcd9c08","articleId":1320,"userId":2363,"content":"顶一下：招聘p6/p7","createdAt":1581328714776},{"id":6282,"originId":"5e3cce4d267721420912b058","articleId":1322,"userId":2364,"content":"顶顶顶","createdAt":1581043277284},{"id":6283,"originId":"5dea7b1714ffa4125a544cd9","articleId":1323,"userId":2365,"content":"中意的发邮箱哦，诚招。","createdAt":1575648023470},{"id":6284,"originId":"5dedad4d14ffa4125a545075","articleId":1323,"userId":2366,"content":"mark 一下，近1年，偏后端；偏前端的 react/vue 有段时间没写，仅了解react的发展变化……；","createdAt":1575857485129},{"id":6285,"originId":"5dedeef9484806122a97e378","articleId":1323,"userId":2365,"content":"继续++","createdAt":1575874297176},{"id":6286,"originId":"5e05a932ba8f6d46c4edf716","articleId":1323,"userId":335,"content":"[@onpaik](/user/onpaik) 问下你们公司叫什么名字吖？","createdAt":1577429298662},{"id":6287,"originId":"5e27c1771225c9423dcd900e","articleId":1323,"userId":110,"content":"支持远程吗？","createdAt":1579663735744},{"id":6288,"originId":"5e12f7de4bea432607fcd157","articleId":1324,"userId":109,"content":"发错版了吧","createdAt":1578301406059},{"id":6289,"originId":"5e13f37b4bea432607fcd33c","articleId":1324,"userId":2346,"content":"[@waitingsong](/user/waitingsong) 没有喇~只是希望更多人可以看到~~","createdAt":1578365819938},{"id":6290,"originId":"5e1682474bea432607fcd907","articleId":1324,"userId":442,"content":"百度T11应该只有一个林姓大佬👍","createdAt":1578533447497},{"id":6291,"originId":"5e16943f81adfe260207a8ab","articleId":1324,"userId":433,"content":"是那个在北京创业的的林姓大佬么？\r\n","createdAt":1578538047410},{"id":6292,"originId":"5e16c5b781adfe260207aa5b","articleId":1324,"userId":47,"content":"林峰？","createdAt":1578550711261},{"id":6293,"originId":"5e17ded52677214209128cee","articleId":1324,"userId":2346,"content":"[@szy0syz](/user/szy0syz) 是的，就是他，有兴趣加入他的团队吗？","createdAt":1578622677260},{"id":6294,"originId":"5e17dede2677214209128cf3","articleId":1324,"userId":2346,"content":"[@nlbydcg](/user/nlbydcg) 是的，就是他，有兴趣加入他的团队吗？","createdAt":1578622686964},{"id":6295,"originId":"5e17deef1225c9423dcd75df","articleId":1324,"userId":2346,"content":"[@HeavenZhangHr](/user/HeavenZhangHr) 不是林峰~","createdAt":1578622703717},{"id":6296,"originId":"5e1c2d93267721420912924f","articleId":1324,"userId":433,"content":"[@Ares0128](/user/Ares0128) 不了 我就是从那出来的= = ！","createdAt":1578904979151},{"id":6297,"originId":"5e1d7b782677214209129597","articleId":1324,"userId":2346,"content":"[@nlbydcg](/user/nlbydcg) 你是base北京吗？","createdAt":1578990456898},{"id":6298,"originId":"5e216dd11225c9423dcd8778","articleId":1324,"userId":442,"content":"[@Ares0128](/user/Ares0128) 可惜我在边疆 😂","createdAt":1579249105968},{"id":6299,"originId":"5e218da21225c9423dcd8822","articleId":1324,"userId":2346,"content":"[@szy0syz](/user/szy0syz) 厉害厉害，家在边疆吗？","createdAt":1579257250721},{"id":6300,"originId":"5e266d4f267721420912a5b1","articleId":1324,"userId":2346,"content":"年后想换工作的欢迎联系呀~~","createdAt":1579576655310},{"id":6301,"originId":"5e1d4eb41225c9423dcd7d52","articleId":1328,"userId":2369,"content":"有意可发简历到： echo.tang@dadaconsultants.com ；或添加微信咨询，WeChat ID:Echo_TangXing","createdAt":1578978996102},{"id":6302,"originId":"5e215e872677214209129e46","articleId":1328,"userId":2369,"content":"有意可发简历到echo.tang@dadaconsultants.com ；或添加微信咨询，WeChat ID:Echo_TangXing","createdAt":1579245191756},{"id":6303,"originId":"5e142cff81adfe260207a3cd","articleId":1336,"userId":2371,"content":"![TIM截图20200107150211.png](//static.cnodejs.org/FsVGdPJENqGMlrWQy9VbFrccGVlr)","createdAt":1578380543636},{"id":6304,"originId":"5e0fe69b81adfe2602079ce3","articleId":1339,"userId":1947,"content":"不是上海的有兴趣，是上海的估计考虑回家了现在...","createdAt":1578100379580},{"id":6305,"originId":"5e11fc894bea432607fccf09","articleId":1339,"userId":2372,"content":"这个微信号准确吗？好像搜索不到","createdAt":1578237065419},{"id":6306,"originId":"5da41d78ece3813ad9ba199d","articleId":1341,"userId":2374,"content":"帖子发布的第四天……","createdAt":1571036536409},{"id":6307,"originId":"5da67d82865a9844a301b949","articleId":1341,"userId":2374,"content":"第六天会有吗~~~","createdAt":1571192194818},{"id":6308,"originId":"5dc8016cece3813ad9ba776e","articleId":1341,"userId":2375,"content":"you","createdAt":1573388652416},{"id":6309,"originId":"5dd64dbd34a8a07a2dab6468","articleId":1341,"userId":2374,"content":"抱歉抱歉，近期换了手机号，目前已经更新好。\r\n因为是美资外企，口语好的话是一个很大的加分项哦，最低最低要求，可以阅读英文技术文档~\r\n目前会要求senior一些的人选（截至20191121）\r\n有看机会的赶快与我联系吧！","createdAt":1574325693299},{"id":6310,"originId":"5dd64dda8287937a65af5fa5","articleId":1341,"userId":2374,"content":"[@william-xue](/user/william-xue) 哈？没有懂……","createdAt":1574325722966},{"id":6311,"originId":"5de60a2c39af564604bc054a","articleId":1341,"userId":2374,"content":"顶一下（20191203）","createdAt":1575356972472},{"id":6312,"originId":"5de748aa6043397a546db86d","articleId":1341,"userId":2374,"content":"还在招聘~简历可以直接发至邮箱red_lian@163.com","createdAt":1575438506321},{"id":6313,"originId":"5e0f09694bea432607fccc57","articleId":1341,"userId":2320,"content":"有吗...\r\n","createdAt":1578043753794},{"id":6314,"originId":"5dfc86e50696c446bf64f5b6","articleId":1343,"userId":2369,"content":"有意可发简历到： echo.tang@dadaconsultants.com; 或添加微信咨询，WeChat ID:Echo_TangXing","createdAt":1576830693193},{"id":6315,"originId":"5e05cc1bba8f6d46c4edf7bb","articleId":1343,"userId":2369,"content":"有意可发简历到： echo.tang@dadaconsultants.com; 或添加微信咨询，WeChat ID:Echo_TangXing","createdAt":1577438235382},{"id":6316,"originId":"5e0dccf701c0915a9d9bda32","articleId":1343,"userId":2369,"content":"有意可发简历到： echo.tang@dadaconsultants.com; 或添加微信咨询，WeChat ID:Echo_TangXing","createdAt":1577962743548},{"id":6317,"originId":"5dd34e9c7651572e0955de67","articleId":1344,"userId":2243,"content":"欢迎有兴趣的同学投递简历~","createdAt":1574129308040},{"id":6318,"originId":"5e07f6720696c446bf6509b2","articleId":1344,"userId":2247,"content":"mark","createdAt":1577580146217},{"id":6319,"originId":"5de860fa14ffa4125a5443e2","articleId":1351,"userId":161,"content":"阿里13新？不应该配上16薪么。哈哈","createdAt":1575510266295},{"id":6320,"originId":"5de9ac2a14ffa4125a544955","articleId":1351,"userId":2364,"content":"[@tzbcf](/user/tzbcf) 哈哈哈哈  16薪16薪","createdAt":1575595050158},{"id":6321,"originId":"5deb89cc484806122a97df70","articleId":1351,"userId":2181,"content":"前端容器架构师 ？？ what's?","createdAt":1575717324445},{"id":6322,"originId":"5de623dd6043397a546db449","articleId":1353,"userId":2102,"content":"[@andyhu](/user/andyhu) 您不了解就算了，麻烦别添乱呀","createdAt":1575363549458},{"id":6323,"originId":"5de712176043397a546db6d1","articleId":1353,"userId":1556,"content":"建议联系楼主的人留个神，估计是种菠菜或者诈骗的，最近马国刚抓了600多个，丢人现眼都丢到国外去了。马来菲律宾这种地方IT公司大多数是这种在线赌博和诈骗的公司，过去就没收护照给关起来，还有打手看着不服就打。一定得问清公司名再决定去","createdAt":1575424535741},{"id":6324,"originId":"5de72d3339af564604bc0a10","articleId":1353,"userId":2380,"content":"建议联系楼主的人留个神，估计是种菠菜或者诈骗的，最近马国刚抓了600多个，丢人现眼都丢到国外去了。马来菲律宾这种地方IT公司大多数是这种在线赌博和诈骗的公司，过去就没收护照给关起来，还有打手看着不服就打。一定得问清公司名再决定去","createdAt":1575431475216},{"id":6325,"originId":"5de8692714ffa4125a54452d","articleId":1353,"userId":516,"content":"建议联系楼主的人留个神，估计是种菠菜或者诈骗的，最近马国刚抓了600多个，丢人现眼都丢到国外去了。马来菲律宾这种地方IT公司大多数是这种在线赌博和诈骗的公司，过去就没收护照给关起来，还有打手看着不服就打。一定得问清公司名再决定去","createdAt":1575512359689},{"id":6326,"originId":"5de88735484806122a97d632","articleId":1353,"userId":98,"content":"建议彻底封禁国外招聘贴","createdAt":1575520053941},{"id":6327,"originId":"5de628616043397a546db482","articleId":1354,"userId":2381,"content":"一花科技欢迎各位大神啦！","createdAt":1575364705046},{"id":6328,"originId":"5dc22eee865a9844a3020247","articleId":1355,"userId":2382,"content":"有兴趣的小伙伴欢迎投递简历！","createdAt":1573007086753},{"id":6329,"originId":"5dd210d77651572e0955db16","articleId":1355,"userId":2382,"content":"1日常顶贴","createdAt":1574047959041},{"id":6330,"originId":"5de4c02a6043397a546dadc9","articleId":1355,"userId":2382,"content":"2日常顶贴","createdAt":1575272490964},{"id":6331,"originId":"5dc52cde865a9844a3020baf","articleId":1357,"userId":2384,"content":"测试1111","createdAt":1573203166514},{"id":6332,"originId":"5dcb6732865a9844a3021912","articleId":1357,"userId":2369,"content":"欢迎有意向的人投递简历或微信咨询。Wechat ID:Echo_TangXing","createdAt":1573611314599},{"id":6333,"originId":"5dd4f0ca8287937a65af5b75","articleId":1357,"userId":2369,"content":"欢迎对shopee感兴趣的人投递简历","createdAt":1574236362434},{"id":6334,"originId":"5ddb77118287937a65af69b4","articleId":1357,"userId":2369,"content":"欢迎有意向的人投递简历或添加微信咨询。\r\n","createdAt":1574663953395},{"id":6335,"originId":"5de09d0b6043397a546da38b","articleId":1357,"userId":2369,"content":"欢迎有意向的人投递简历。","createdAt":1575001355828},{"id":6336,"originId":"5dde36c48c1ac97aa630a588","articleId":1358,"userId":110,"content":"这种招聘要非常小心，99%是做非法做赌博网站的或者搞诈骗的，去了以后就被控制起来，前一段刚在马来西亚抓了几百个人，估计是又来大陆骗人种菠菜了","createdAt":1574844100648},{"id":6337,"originId":"5dd8136c34a8a07a2dab6990","articleId":1359,"userId":2386,"content":"请问还在招nodejs吗","createdAt":1574441836427},{"id":6338,"originId":"5dd78a4634a8a07a2dab67e6","articleId":1360,"userId":21,"content":"现在外包好多啊","createdAt":1574406726044},{"id":6339,"originId":"5d8b1e69e86cfb0d2a645aca","articleId":1361,"userId":44,"content":"工作地点是在珠海么，顶😝😝","createdAt":1569398377357},{"id":6340,"originId":"5d8c1b698b9e1c0d6dc5e197","articleId":1361,"userId":2388,"content":"是的，还有4个前端名额，求撩","createdAt":1569463145868},{"id":6341,"originId":"5d8c2862e86cfb0d2a645d26","articleId":1361,"userId":65,"content":"有年龄31限制不","createdAt":1569466466573},{"id":6342,"originId":"5d8c352fe86cfb0d2a645d81","articleId":1361,"userId":2388,"content":"[@dangyanglim](/user/dangyanglim) 没有","createdAt":1569469743097},{"id":6343,"originId":"5d8c78e1e86cfb0d2a645ef0","articleId":1361,"userId":2389,"content":"现在学技术还有机会吗","createdAt":1569487073697},{"id":6344,"originId":"5dd788ed8287937a65af630c","articleId":1361,"userId":2319,"content":"哭了, 没事为啥会搞到晚上9点啊............","createdAt":1574406381037},{"id":6345,"originId":"5db2670fece3813ad9ba426f","articleId":1366,"userId":2140,"content":"岗位是P7以上，因为我们希望找到领域的专业人才，优秀的 P6+也可以来试试，如果担心录入系统影响后续招聘的话，我可以帮你评估简历，如果合适的话再推荐到系统","createdAt":1571972879947},{"id":6346,"originId":"5db68a6bece3813ad9ba4a78","articleId":1366,"userId":2140,"content":"有兴趣的同学欢迎投递简历","createdAt":1572244075278},{"id":6347,"originId":"5dc12938865a9844a3020015","articleId":1366,"userId":2140,"content":"继续招聘","createdAt":1572940088262},{"id":6348,"originId":"5dc27c8aece3813ad9ba6b1e","articleId":1366,"userId":2140,"content":"邮件请注明期望工作地点","createdAt":1573026954023},{"id":6349,"originId":"5dc8c25eece3813ad9ba7884","articleId":1366,"userId":2140,"content":"继续招聘","createdAt":1573438046550},{"id":6350,"originId":"5d4799f6bf26dc7fc5337686","articleId":1367,"userId":1483,"content":"日常顶帖","createdAt":1564973558010},{"id":6351,"originId":"5d4d269612a0194544415850","articleId":1367,"userId":1483,"content":"1","createdAt":1565337238250},{"id":6352,"originId":"5d5105c5697873456c6bca7b","articleId":1367,"userId":1483,"content":"2","createdAt":1565590981454},{"id":6353,"originId":"5d565a45697873456c6bdf09","articleId":1367,"userId":1483,"content":"3","createdAt":1565940293434},{"id":6354,"originId":"5d5a12a3697873456c6be645","articleId":1367,"userId":1483,"content":"4","createdAt":1566184099720},{"id":6355,"originId":"5d65212d421846662d9853ea","articleId":1367,"userId":1483,"content":"5","createdAt":1566908717526},{"id":6356,"originId":"5d688e17421846662d985dbf","articleId":1367,"userId":557,"content":"日常回复\r\n","createdAt":1567133207473},{"id":6357,"originId":"5d7708a9d50f57234591321e","articleId":1367,"userId":1483,"content":"6","createdAt":1568082089555},{"id":6358,"originId":"5dc51e1c865a9844a3020b37","articleId":1367,"userId":1483,"content":"7","createdAt":1573199388721},{"id":6359,"originId":"5c4530413b948a2b4ab6fdf8","articleId":1368,"userId":2393,"content":"顶一个！","createdAt":1548038209039},{"id":6360,"originId":"5c496abd3b948a2b4ab7124f","articleId":1368,"userId":2393,"content":"顶贴","createdAt":1548315325110},{"id":6361,"originId":"5c4e902ba4647e02328f19ba","articleId":1368,"userId":2393,"content":"再顶！","createdAt":1548652587611},{"id":6362,"originId":"5c614295e6aaad2ea76df770","articleId":1368,"userId":2393,"content":"继续招人","createdAt":1549877909322},{"id":6363,"originId":"5c63bc780752e020af9431d9","articleId":1368,"userId":2393,"content":"继续招人！","createdAt":1550040184266},{"id":6364,"originId":"5c658e2e0752e020af943a8c","articleId":1368,"userId":107,"content":"帮忙顶","createdAt":1550159406985},{"id":6365,"originId":"5c6dffdb33b0b629ac84384e","articleId":1368,"userId":2394,"content":"顶一下，估计我是去不了啦","createdAt":1550712795087},{"id":6366,"originId":"5ca742a36c1de62dce4681a4","articleId":1368,"userId":2393,"content":"急招！","createdAt":1554465443198},{"id":6367,"originId":"5caeb962dad66d658e407c7c","articleId":1368,"userId":2393,"content":"急招！","createdAt":1554954594681},{"id":6368,"originId":"5cb9752ca86ae80ce64b11dd","articleId":1368,"userId":2395,"content":"帮顶","createdAt":1555658028118},{"id":6369,"originId":"5cb98d34a86ae80ce64b12d5","articleId":1368,"userId":2395,"content":"[@foreverrainfall](/user/foreverrainfall) 内转的话怎么联系啊","createdAt":1555664180142},{"id":6370,"originId":"5cbdb2e2a86ae80ce64b208a","articleId":1368,"userId":2393,"content":"[@leer168](/user/leer168) 钉钉找亦展","createdAt":1555935970377},{"id":6371,"originId":"5cce8ce75a5bae6e07812f79","articleId":1368,"userId":2393,"content":"再顶！","createdAt":1557040359005},{"id":6372,"originId":"5ce20e80518e0954fc40fb40","articleId":1368,"userId":2393,"content":"再顶！","createdAt":1558318720562},{"id":6373,"originId":"5d072f6495fcc914aa269c8a","articleId":1368,"userId":2393,"content":"还在招，再顶！","createdAt":1560751972744},{"id":6374,"originId":"5d0c8fb134bca667bc6e1aec","articleId":1368,"userId":2377,"content":"目前还在招么？","createdAt":1561104305800},{"id":6375,"originId":"5d109917cdb1f967c157564c","articleId":1368,"userId":2393,"content":"[@NealST](/user/NealST) 还在招，欢迎投简历哈","createdAt":1561368855511},{"id":6376,"originId":"5dc2bd60865a9844a3020552","articleId":1368,"userId":2393,"content":"还在招人，欢迎投简历哈","createdAt":1573043552887},{"id":6377,"originId":"5db9367a865a9844a301ec03","articleId":1369,"userId":2396,"content":"大量前端职位空缺。欢迎投递，每封邮件都会回复。","createdAt":1572419194342},{"id":6378,"originId":"5daeb6c1ece3813ad9ba3676","articleId":1372,"userId":753,"content":"哦看得我醉了","createdAt":1571731137984},{"id":6379,"originId":"5daeb6d3ece3813ad9ba367a","articleId":1372,"userId":753,"content":"我要投","createdAt":1571731155530},{"id":6380,"originId":"5db12d07ece3813ad9ba3e81","articleId":1372,"userId":1846,"content":"[@moshuchao](/user/moshuchao) 哥，投的话，简历发到breath.wl@alibaba-inc.com啊","createdAt":1571892487720},{"id":6381,"originId":"5db05a41ece3813ad9ba3cb6","articleId":1373,"userId":1928,"content":"捞一下~","createdAt":1571838529156},{"id":6382,"originId":"5da3de08865a9844a301b0e9","articleId":1374,"userId":19,"content":"老哥，给你发邮件,一直没回复。是挂了吗","createdAt":1571020296255},{"id":6383,"originId":"5d9c4389ece3813ad9ba06c2","articleId":1375,"userId":2399,"content":"20191011社招岗位已更新～","createdAt":1570521993572},{"id":6384,"originId":"5da83247865a9844a301c09f","articleId":1375,"userId":2399,"content":"20191017社招岗位已更新～附JD～","createdAt":1571304007397},{"id":6385,"originId":"5da809fc865a9844a301bf85","articleId":1376,"userId":2400,"content":"学历差了","createdAt":1571293692729},{"id":6386,"originId":"5d172617cdb1f967c1576e56","articleId":1377,"userId":2402,"content":"工作福利和加班情况怎么样","createdAt":1561798167664},{"id":6387,"originId":"5d9c43b3865a9844a3019f77","articleId":1377,"userId":2401,"content":"[@Yuki-Minakami](/user/Yuki-Minakami) 不好意思，回复晚了。非996，典型外企文化。。。","createdAt":1570522035766},{"id":6388,"originId":"5d9d3e77865a9844a301a14e","articleId":1377,"userId":19,"content":"[@klainqin](/user/klainqin) 你好 简历发你邮箱 一直没有回复 ，是已经挂了吗？","createdAt":1570586231675},{"id":6389,"originId":"5da69124865a9844a301b9ce","articleId":1377,"userId":2317,"content":"后端还招吗？","createdAt":1571197220917},{"id":6390,"originId":"5da524f7865a9844a301b552","articleId":1378,"userId":161,"content":"工作城市？","createdAt":1571103991386},{"id":6391,"originId":"5da5465a865a9844a301b65d","articleId":1378,"userId":2403,"content":"北京知春路 离地铁站 50米","createdAt":1571112538591},{"id":6392,"originId":"5d9eca58865a9844a301a5eb","articleId":1382,"userId":161,"content":"社招么？哪个城市","createdAt":1570687576285},{"id":6393,"originId":"5d5a178112a0194544417a5c","articleId":1385,"userId":2408,"content":"欢迎大家投递~","createdAt":1566185345892},{"id":6394,"originId":"5d5dfdcde79eaa6628beb68e","articleId":1385,"userId":2408,"content":"分享头条的日常![middle_img_0bb8da99-b17c-4e20-9f85-78b451b37368.jpg](//static.cnodejs.org/FnYOYbhgs_4tpFd1hobdL4SYszi6)","createdAt":1566440909062},{"id":6395,"originId":"5d5f5a53dcd8e81121a6073f","articleId":1385,"userId":2408,"content":"分享日常~![middle_img_2e5ff274-9b69-4f5c-8d62-aee2499db52a.jpg](//static.cnodejs.org/FlAKQCBo7ZJUlGG9yWpIQ8N_pEUn)","createdAt":1566530131353},{"id":6396,"originId":"5d61fa55dcd8e81121a60c2d","articleId":1385,"userId":2408,"content":"欢迎投递和推荐\r\n更多职位： \r\n-Golang开发工程师/架构师 \r\n-Python开发工程师/架构师 \r\n-后端开发工程师 - 抖音电商/电商广告/国际化等方向 \r\n-C++开发工程师（搜索引擎方向） \r\n-数据开发工程师 \r\n-数据工程师 - 用户行为分析 \r\n-大数据工程师 - 电商行业 \r\n-算法工程师（个性化推荐） - 垂直业务 \r\n-NLP算法工程师 \r\n-搜索算法工程师 \r\n-推荐算法负责人 - 商业团队 \r\n-广告投放策略高级工程师 \r\n-数据挖掘工程师 - 增长策略方向 \r\n欢迎咨询，可发文字JD给您~","createdAt":1566702165167},{"id":6397,"originId":"5d634c30dcd8e81121a60edc","articleId":1385,"userId":2408,"content":"可以加微信或发邮件咨询~","createdAt":1566788656074},{"id":6398,"originId":"5d65f7c8421846662d98557e","articleId":1385,"userId":2408,"content":"想要了解岗位详细信息可在评论区回复~","createdAt":1566963656816},{"id":6399,"originId":"5d689155dcd8e81121a620da","articleId":1385,"userId":2408,"content":"顶~","createdAt":1567134037042},{"id":6400,"originId":"5d6cb1f7a7474a231a58822d","articleId":1385,"userId":2408,"content":"更多后台、前端、测开、算法、大数据等技术职位欢迎咨询","createdAt":1567404535912},{"id":6401,"originId":"5d6dda82d50f57234591112f","articleId":1385,"userId":2408,"content":"欢迎投递","createdAt":1567480450670},{"id":6402,"originId":"5d6f3483a7474a231a588b41","articleId":1385,"userId":2408,"content":"可加微信fjxayw咨询，备注cnode+姓名+职位","createdAt":1567569027419},{"id":6403,"originId":"5d707704d50f5723459119a2","articleId":1385,"userId":2408,"content":"快来投递吧~","createdAt":1567651588261},{"id":6404,"originId":"5d71ce30d50f5723459121e7","articleId":1385,"userId":2408,"content":"可加微信fjxayw咨询~，备注姓名+职位+cnode","createdAt":1567739440208},{"id":6405,"originId":"5d79b6c8a7474a231a58b29a","articleId":1385,"userId":2408,"content":"欢迎投递~","createdAt":1568257736410},{"id":6406,"originId":"5d81a89f53c75a4136b4b3c8","articleId":1385,"userId":2408,"content":"欢迎投递","createdAt":1568778399943},{"id":6407,"originId":"5d8adc5be86cfb0d2a645964","articleId":1385,"userId":2408,"content":"冲鸭！！","createdAt":1569381467166},{"id":6408,"originId":"5d9c1038865a9844a3019e79","articleId":1385,"userId":2408,"content":"欢迎投递","createdAt":1570508856670},{"id":6409,"originId":"5d5a17a112a0194544417a64","articleId":1386,"userId":2408,"content":"我们有各种福利，只差一个优秀的你！","createdAt":1566185377968},{"id":6410,"originId":"5d5dfd39421846662d983e29","articleId":1386,"userId":2408,"content":"欢迎投递~","createdAt":1566440761052},{"id":6411,"originId":"5d5f5a73421846662d984401","articleId":1386,"userId":2408,"content":"分享日常~![middle_img_2e5ff274-9b69-4f5c-8d62-aee2499db52a.jpg](//static.cnodejs.org/FlAKQCBo7ZJUlGG9yWpIQ8N_pEUn)","createdAt":1566530163661},{"id":6412,"originId":"5d61fa16421846662d9848cc","articleId":1386,"userId":2408,"content":"欢迎投递和推荐","createdAt":1566702102607},{"id":6413,"originId":"5d634bfddcd8e81121a60ed3","articleId":1386,"userId":2408,"content":"![middle_img_0bb8da99-b17c-4e20-9f85-78b451b37368.jpg](//static.cnodejs.org/FnYOYbhgs_4tpFd1hobdL4SYszi6)","createdAt":1566788605840},{"id":6414,"originId":"5d65f7fc421846662d985586","articleId":1386,"userId":2408,"content":"更多职位：\r\n-Golang开发工程师/架构师\r\n-Python开发工程师/架构师\r\n-后端开发工程师 - 抖音电商/电商广告/国际化等方向\r\n-C++开发工程师（搜索引擎方向）\r\n-数据开发工程师\r\n-数据工程师 - 用户行为分析\r\n-大数据工程师 - 电商行业\r\n-算法工程师（个性化推荐） - 垂直业务\r\n-NLP算法工程师\r\n-搜索算法工程师\r\n-推荐算法负责人 - 商业团队\r\n-广告投放策略高级工程师\r\n-数据挖掘工程师 - 增长策略方向\r\n欢迎咨询，可发文字JD给您~\r\n\r\n","createdAt":1566963708463},{"id":6415,"originId":"5d689142dcd8e81121a620d4","articleId":1386,"userId":2408,"content":"顶~","createdAt":1567134018332},{"id":6416,"originId":"5d6cb1e6d50f572345910cfc","articleId":1386,"userId":2408,"content":"更多后台、前端、测开、算法、大数据等技术职位欢迎咨询","createdAt":1567404518933},{"id":6417,"originId":"5d6ddaa8d50f57234591113a","articleId":1386,"userId":2408,"content":"欢迎投递","createdAt":1567480488223},{"id":6418,"originId":"5d6f3453a7474a231a588b39","articleId":1386,"userId":2408,"content":"可加微信fjxayw咨询~，备注姓名+职位+cnode","createdAt":1567568979364},{"id":6419,"originId":"5d707719d50f5723459119aa","articleId":1386,"userId":2408,"content":"快来投递吧~","createdAt":1567651609939},{"id":6420,"originId":"5d71ce1ed50f5723459121e2","articleId":1386,"userId":2408,"content":"可加微信fjxayw咨询~，备注姓名+职位+cnode","createdAt":1567739422746},{"id":6421,"originId":"5d79b6daa7474a231a58b2a1","articleId":1386,"userId":2408,"content":"欢迎投递~","createdAt":1568257754063},{"id":6422,"originId":"5d81a88953c75a4136b4b3c1","articleId":1386,"userId":2408,"content":"欢迎投递","createdAt":1568778377799},{"id":6423,"originId":"5d8adc678b9e1c0d6dc5de99","articleId":1386,"userId":2408,"content":"冲鸭！！！","createdAt":1569381479603},{"id":6424,"originId":"5d9c1028865a9844a3019e73","articleId":1386,"userId":2408,"content":"欢迎投递","createdAt":1570508840355},{"id":6425,"originId":"5d9b32a6865a9844a3019cb8","articleId":1387,"userId":2409,"content":"对标阿里 P6-P7，简历砸过来","createdAt":1570452134554},{"id":6426,"originId":"5d93f086ece3813ad9b9fd37","articleId":1390,"userId":21,"content":"你好，有远程岗位吗？","createdAt":1569976454721},{"id":6427,"originId":"5c82118090c14711cc8cb9d7","articleId":1391,"userId":18,"content":"这家公司很不错。在深圳的各位推荐去了解一下。","createdAt":1552028032233},{"id":6428,"originId":"5c85d4f9acb681372d416ddd","articleId":1391,"userId":1138,"content":"值得推荐加入","createdAt":1552274681244},{"id":6429,"originId":"5c899e33acb681372d417d9b","articleId":1391,"userId":1138,"content":"顶！d=====(￣▽￣*)bi","createdAt":1552522803445},{"id":6430,"originId":"5c8b0b38acb681372d41846e","articleId":1391,"userId":1138,"content":"捞一捞","createdAt":1552616248110},{"id":6431,"originId":"5c8cb03aacb681372d418b7c","articleId":1391,"userId":1138,"content":"再捞捞 ","createdAt":1552724026014},{"id":6432,"originId":"5c8f4a07acb681372d4196c3","articleId":1391,"userId":1928,"content":"捞一捞~","createdAt":1552894471080},{"id":6433,"originId":"5cac0579d68ff5064921b506","articleId":1391,"userId":1928,"content":"捞一下~~","createdAt":1554777465598},{"id":6434,"originId":"5cc25f4137faec0ce1d06cbd","articleId":1391,"userId":1928,"content":"😍","createdAt":1556242241252},{"id":6435,"originId":"5cc2d67ba86ae80ce64b478c","articleId":1391,"userId":1138,"content":"加油 不错的公司","createdAt":1556272763267},{"id":6436,"originId":"5cc5741ba86ae80ce64b512f","articleId":1391,"userId":2412,"content":"[@littleflowersansan](/user/littleflowersansan) 请问一下对英语的要求高不高呢？面试流程大概是怎样呢","createdAt":1556444187246},{"id":6437,"originId":"5ccc625c5a5bae6e078129fb","articleId":1391,"userId":109,"content":"> 2-6 个月的工资作为年终奖\r\n\r\n\r\n这句话有歧义，是(扣)2-6个月工资作为年终奖，还是年终奖为2-6个月工资 。","createdAt":1556898396204},{"id":6438,"originId":"5cf79b371fe902120f31c70d","articleId":1391,"userId":1138,"content":"[@waitingsong](/user/waitingsong) 哈哈 多谢提出来，我来解释下，2-6 个月的工资作为年终奖   指的是 除了一年12个月工资之外，年终奖为2-6个月的工资。\r\n\r\n非常抱歉，给大家带来误解。","createdAt":1559730999187},{"id":6439,"originId":"5d01ee2595fcc914aa268848","articleId":1391,"userId":1138,"content":"增加 Golang后台开发工程师 的岗位了 欢迎大家","createdAt":1560407589696},{"id":6440,"originId":"5d1eb9c2ad75d374b58bc817","articleId":1391,"userId":1928,"content":"捞一下~","createdAt":1562294722691},{"id":6441,"originId":"5d1eba01ad75d374b58bc81a","articleId":1391,"userId":1928,"content":"[@zubinzhang](/user/zubinzhang) 对英语读写有一定要求的~因为做的是海外项目，我们在香港和印度也有团队，日常用的工具和软件基本都是海外的。","createdAt":1562294785854},{"id":6442,"originId":"5d341377b2b9222961dacb0d","articleId":1391,"userId":1377,"content":"[@littleflowersansan](/user/littleflowersansan)  有实习岗位吗？","createdAt":1563693943747},{"id":6443,"originId":"5d35b8119969a529571d668b","articleId":1391,"userId":1377,"content":"应届生可以吗？","createdAt":1563801617973},{"id":6444,"originId":"5d380fb09969a529571d6e41","articleId":1391,"userId":1928,"content":"[@Josh119891](/user/Josh119891) 不好意思，回复晚了，目前没有应届生和实习生的需求诶。","createdAt":1563955120752},{"id":6445,"originId":"5d4a6441697873456c6bb8d3","articleId":1391,"userId":1928,"content":"捞一下~","createdAt":1565156417668},{"id":6446,"originId":"5d58049412a01945444176eb","articleId":1391,"userId":79,"content":"嘿嘿，有机会投一下简历 😍","createdAt":1566049428893},{"id":6447,"originId":"5d5d262fe79eaa6628beb488","articleId":1391,"userId":1138,"content":"欢迎大家关注AfterShip\r\n","createdAt":1566385711786},{"id":6448,"originId":"5d674be8dcd8e81121a61d3d","articleId":1391,"userId":1138,"content":"欢迎关注","createdAt":1567050728409},{"id":6449,"originId":"5d6df046a7474a231a5886e0","articleId":1391,"userId":109,"content":"还有坑哇","createdAt":1567486022816},{"id":6450,"originId":"5d78520aa7474a231a58adc2","articleId":1391,"userId":1644,"content":"捞一下，有没有杭州分部","createdAt":1568166410126},{"id":6451,"originId":"5d921072865a9844a301946e","articleId":1391,"userId":1928,"content":"[@JianmingXia](/user/JianmingXia) 现在没有，期待以后会有噢","createdAt":1569853554997},{"id":6452,"originId":"5d50bfcf697873456c6bc8f2","articleId":1393,"userId":523,"content":"👍","createdAt":1565573071981},{"id":6453,"originId":"5d512ab512a0194544416010","articleId":1393,"userId":2414,"content":"So 好像没有联系方式？","createdAt":1565600437552},{"id":6454,"originId":"5d51734112a019454441618b","articleId":1393,"userId":2182,"content":"19应届要吗？","createdAt":1565619009324},{"id":6455,"originId":"5d5eaa32dcd8e81121a605f7","articleId":1393,"userId":2104,"content":"[@duncup](/user/duncup) 不好意思真忘了，多谢提醒！已补上了：talent@meri.co","createdAt":1566485042380},{"id":6456,"originId":"5d5eab61421846662d9842b0","articleId":1393,"userId":2104,"content":"[@yjhmelody](/user/yjhmelody) 好羡慕年轻人！有开源贡献不？主要还是看一些能证明能力的点吧。","createdAt":1566485345180},{"id":6457,"originId":"5d6f44a1a7474a231a588b6d","articleId":1393,"userId":23,"content":"[@basicthinker](/user/basicthinker)  还招远程吗？","createdAt":1567573153483},{"id":6458,"originId":"5d7f3eb595464514f7ed73c0","articleId":1393,"userId":21,"content":"确实不错，还需要备胎么","createdAt":1568620213765},{"id":6459,"originId":"5d81d25c53c75a4136b4b4be","articleId":1393,"userId":2104,"content":"[@Asher-Tan](/user/Asher-Tan) 暂时不招了，但是求简历！","createdAt":1568789084986},{"id":6460,"originId":"5d81d27e95464514f7ed7bb3","articleId":1393,"userId":2104,"content":"[@zy445566](/user/zy445566) 嗯嗯，希望通过简历认识一下！让我们成为你的备胎。","createdAt":1568789118208},{"id":6461,"originId":"5d90296a865a9844a3018f2a","articleId":1393,"userId":21,"content":"[@basicthinker](/user/basicthinker) 算了，看了一下，你们团队都太优秀了，估计入不了你们法眼","createdAt":1569728874052},{"id":6462,"originId":"5d3664ed9969a529571d6794","articleId":1395,"userId":2416,"content":"也可直接添加hr微信哦：1724024770\r\n","createdAt":1563845869990},{"id":6463,"originId":"5d493e2cbf26dc7fc5337e11","articleId":1395,"userId":2416,"content":"捞一把","createdAt":1565081132408},{"id":6464,"originId":"5d8c9d028b9e1c0d6dc5e46e","articleId":1395,"userId":2416,"content":"捞","createdAt":1569496322407},{"id":6465,"originId":"5acda9b8c54db1026998d1ba","articleId":1397,"userId":2417,"content":"顶。","createdAt":1523427768853},{"id":6466,"originId":"5acdb5071df79c2f29c609d9","articleId":1397,"userId":2417,"content":"up.","createdAt":1523430663688},{"id":6467,"originId":"5acdc8bce5890177cb33e64b","articleId":1397,"userId":2417,"content":"up","createdAt":1523435708834},{"id":6468,"originId":"5acdce2da7d228c16b9869cb","articleId":1397,"userId":2418,"content":"靠谱，这公司福利很不错，从不加班，双休。只可惜我已经出国了，不然，我就去这里的。","createdAt":1523437101518},{"id":6469,"originId":"5acdd40a464b1bfa6b42504b","articleId":1397,"userId":2417,"content":"不要光浏览啊 简历丢过来~~","createdAt":1523438602646},{"id":6470,"originId":"5acde07e3edb2aff6be85709","articleId":1397,"userId":2417,"content":"下班前来up一下~","createdAt":1523441790579},{"id":6471,"originId":"5acdf782a7d228c16b9869d8","articleId":1397,"userId":2417,"content":"up","createdAt":1523447682460},{"id":6472,"originId":"5acee274464b1bfa6b425074","articleId":1397,"userId":2417,"content":"up\r\n","createdAt":1523507828721},{"id":6473,"originId":"5acef044ba60fcc66b7b8014","articleId":1397,"userId":2417,"content":"up","createdAt":1523511364329},{"id":6474,"originId":"5acf45433edb2aff6be8575c","articleId":1397,"userId":2417,"content":"up","createdAt":1523533123682},{"id":6475,"originId":"5ad01ea0ba60fcc66b7b806a","articleId":1397,"userId":2417,"content":"up","createdAt":1523588768865},{"id":6476,"originId":"5ad02c19a7d228c16b986a74","articleId":1397,"userId":2417,"content":"up","createdAt":1523592217147},{"id":6477,"originId":"5ad072823edb2aff6be857ca","articleId":1397,"userId":2417,"content":"up","createdAt":1523610242770},{"id":6478,"originId":"5ad088b9464b1bfa6b425103","articleId":1397,"userId":2417,"content":"up","createdAt":1523615929791},{"id":6479,"originId":"5ad0899c464b1bfa6b425104","articleId":1397,"userId":2417,"content":"有没有人呀","createdAt":1523616156966},{"id":6480,"originId":"5ad217feba60fcc66b7b80f6","articleId":1397,"userId":2417,"content":"up","createdAt":1523718142895},{"id":6481,"originId":"5ad22017464b1bfa6b42515f","articleId":1397,"userId":2419,"content":"你这全英文的把我们英语不好的都吓退了哈哈","createdAt":1523720215689},{"id":6482,"originId":"5ad2cb94ba60fcc66b7b80ff","articleId":1397,"userId":2417,"content":"[@yardbaby](/user/yardbaby) 原来如此。我下周整一份中文的那。 你有兴趣嘛","createdAt":1523764116972},{"id":6483,"originId":"5ad30d56ba60fcc66b7b811c","articleId":1397,"userId":2419,"content":"[@YolandaSu](/user/YolandaSu) 我的node只是入门水平\r\n","createdAt":1523780950443},{"id":6484,"originId":"5ad40df3464b1bfa6b42522e","articleId":1397,"userId":2417,"content":"欢迎大家投递。薪资待遇佳。","createdAt":1523846643100},{"id":6485,"originId":"5ad46a1d464b1bfa6b4252d8","articleId":1397,"userId":2417,"content":"up","createdAt":1523870237156},{"id":6486,"originId":"5ad48f9f3edb2aff6be859c2","articleId":1397,"userId":1223,"content":"我顶..","createdAt":1523879839995},{"id":6487,"originId":"5ad5a85b3edb2aff6be85af8","articleId":1397,"userId":2417,"content":"[@spitWind](/user/spitWind), 别只是顶 来投简历","createdAt":1523951707060},{"id":6488,"originId":"5ad6b86bba60fcc66b7b8478","articleId":1397,"userId":2417,"content":"顶","createdAt":1524021355992},{"id":6489,"originId":"5ae9371f02591040485ba9d8","articleId":1397,"userId":2417,"content":"顶","createdAt":1525233439746},{"id":6490,"originId":"5ae96024adea947348e75fc6","articleId":1397,"userId":1305,"content":"假期多的公司才是好公司，有没有base北京的坑","createdAt":1525243940265},{"id":6491,"originId":"5aea73b01b02288048bd0bea","articleId":1397,"userId":2417,"content":"[@nodepaladin](/user/nodepaladin) 不好意思哦，没有呢。","createdAt":1525314480430},{"id":6492,"originId":"5aec360a0a36e5312d6ecd06","articleId":1397,"userId":2417,"content":"up","createdAt":1525429770436},{"id":6493,"originId":"5aec3d300a36e5312d6ecd09","articleId":1397,"userId":2417,"content":"up","createdAt":1525431600207},{"id":6494,"originId":"5aefbb2002591040485bab42","articleId":1397,"userId":2417,"content":"up","createdAt":1525660448393},{"id":6495,"originId":"5af1497502591040485babdb","articleId":1397,"userId":2417,"content":"up","createdAt":1525762421584},{"id":6496,"originId":"5af2581f02591040485bac2e","articleId":1397,"userId":2114,"content":"看似英语要求很高哈。～","createdAt":1525831711096},{"id":6497,"originId":"5af27be91b02288048bd0df2","articleId":1397,"userId":2417,"content":"[@linkenliu](/user/linkenliu) 还好哦。workable的英文就可以。","createdAt":1525840873920},{"id":6498,"originId":"5af5168c0a36e5312d6ecf9d","articleId":1397,"userId":2417,"content":"up","createdAt":1526011532803},{"id":6499,"originId":"5af52e391b02288048bd0f16","articleId":1397,"userId":2417,"content":"up","createdAt":1526017593193},{"id":6500,"originId":"5af53bbf0a36e5312d6ecfad","articleId":1397,"userId":2417,"content":"up","createdAt":1526021055961},{"id":6501,"originId":"5af5b8410a36e5312d6ecfeb","articleId":1397,"userId":2420,"content":"有点兴趣,想了解了解.留个QQ","createdAt":1526052929775},{"id":6502,"originId":"5af8f7770a36e5312d6ed085","articleId":1397,"userId":2417,"content":"[@4176244](/user/4176244)   加微信： thesuasns","createdAt":1526265719121},{"id":6503,"originId":"5af8f78f0a36e5312d6ed087","articleId":1397,"userId":2417,"content":"[@4176244](/user/4176244)  sorry， 打错微信号了  是：thesusans","createdAt":1526265743901},{"id":6504,"originId":"5afe8fe98a45377c06ad6cec","articleId":1397,"userId":2417,"content":"up","createdAt":1526632425846},{"id":6505,"originId":"5b02509193ee7eb406973d7c","articleId":1397,"userId":2417,"content":"up","createdAt":1526878353579},{"id":6506,"originId":"5b028f6141c819fd1c832ba7","articleId":1397,"userId":2417,"content":"node.js的朋友们 看过来哟。","createdAt":1526894433728},{"id":6507,"originId":"5b03aaa993ee7eb406973dc4","articleId":1397,"userId":2417,"content":"up","createdAt":1526966953471},{"id":6508,"originId":"5b03dc90f3c2e9b5066afe15","articleId":1397,"userId":2417,"content":"up","createdAt":1526979728677},{"id":6509,"originId":"5b05188f57137f22415c4591","articleId":1397,"userId":2417,"content":"up\r\n","createdAt":1527060623623},{"id":6510,"originId":"5b06403329e6e510415b2411","articleId":1397,"userId":2417,"content":"uppppppppppp","createdAt":1527136307926},{"id":6511,"originId":"5b07a7cf57137f22415c4647","articleId":1397,"userId":2417,"content":"勤奋HR打卡！","createdAt":1527228367858},{"id":6512,"originId":"5b0b6c0c57137f22415c46b6","articleId":1397,"userId":2417,"content":"upppp","createdAt":1527475212314},{"id":6513,"originId":"5b0cbaf25cd02be640900f74","articleId":1397,"userId":2417,"content":"upp","createdAt":1527560946479},{"id":6514,"originId":"5b0e4e8e29e6e510415b25d2","articleId":1397,"userId":2417,"content":"upppppp","createdAt":1527664270277},{"id":6515,"originId":"5b0f6dc55cd02be640901014","articleId":1397,"userId":2417,"content":"upppp","createdAt":1527737797743},{"id":6516,"originId":"5b10bcbd5cd02be64090108c","articleId":1397,"userId":2417,"content":"uppppp","createdAt":1527823549601},{"id":6517,"originId":"5b18d79d29e6e510415b28c5","articleId":1397,"userId":2417,"content":"uppp","createdAt":1528354717945},{"id":6518,"originId":"5b359e6aac8bc1e1241144bb","articleId":1397,"userId":2417,"content":"还需要1位node.js developer！","createdAt":1530240618176},{"id":6519,"originId":"5b35d644ac8bc1e1241144cc","articleId":1397,"userId":2417,"content":"up","createdAt":1530254916702},{"id":6520,"originId":"5b360bdf57137f22415c5111","articleId":1397,"userId":2417,"content":"up","createdAt":1530268639738},{"id":6521,"originId":"5bdbef3e646a05745b7b76c1","articleId":1397,"userId":2417,"content":"继续招聘啦～扩招！","createdAt":1541140286161},{"id":6522,"originId":"5bdbf43321d75b74609f31ed","articleId":1397,"userId":2421,"content":"你这英文要求就被pass掉一部分了","createdAt":1541141555598},{"id":6523,"originId":"5bdc03d321d75b74609f3294","articleId":1397,"userId":2417,"content":"[@nodecaiBird](/user/nodecaiBird) 是的 我们的职位有英文要求哦。","createdAt":1541145555976},{"id":6524,"originId":"5bdc13a521d75b74609f3399","articleId":1397,"userId":2417,"content":"upppppp","createdAt":1541149605671},{"id":6525,"originId":"5bdfb4c321d75b74609f3d9b","articleId":1397,"userId":2417,"content":"upppp","createdAt":1541387459191},{"id":6526,"originId":"5bdfcc61646a05745b7b8446","articleId":1397,"userId":2417,"content":"uppp","createdAt":1541393505685},{"id":6527,"originId":"5bf79a5abe1b120abac5c343","articleId":1397,"userId":2417,"content":"uppp","createdAt":1542953562907},{"id":6528,"originId":"5bfb9914be1b120abac5ce1e","articleId":1397,"userId":2417,"content":"upp\r\n","createdAt":1543215380433},{"id":6529,"originId":"5bffa1c5d6104a4f803a2d50","articleId":1397,"userId":2422,"content":"可惜在上海，30K封顶也不算多啊！","createdAt":1543479749342},{"id":6530,"originId":"5c002237d6104a4f803a301e","articleId":1397,"userId":2423,"content":"英语水平一般般行不行。。。\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1543512631703},{"id":6531,"originId":"5c062b701c62d833493508a9","articleId":1397,"userId":2417,"content":"[@JiaWeiBi](/user/JiaWeiBi)  可以试试啊","createdAt":1543908208524},{"id":6532,"originId":"5c062bead3b8ab334e8da832","articleId":1397,"userId":2417,"content":"[@ldcsirtest2012](/user/ldcsirtest2012)  英文和技术好可以谈啊","createdAt":1543908330990},{"id":6533,"originId":"5c14b5c37ec239239ff5715a","articleId":1397,"userId":2424,"content":"还有坑吗，nodejs/rn开发\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1544861123804},{"id":6534,"originId":"5c14cd7c7ec239239ff571a7","articleId":1397,"userId":2425,"content":"😀","createdAt":1544867196093},{"id":6535,"originId":"5d6cc5fcd50f572345910d8f","articleId":1397,"userId":2417,"content":"继续招","createdAt":1567409660841},{"id":6536,"originId":"5d6cc647a7474a231a5882d2","articleId":1397,"userId":2417,"content":"团队扩招","createdAt":1567409735749},{"id":6537,"originId":"5d6cc65da7474a231a5882d7","articleId":1397,"userId":2417,"content":"[@tan2016](/user/tan2016) hihi～～～","createdAt":1567409757764},{"id":6538,"originId":"5d6cc66cd50f572345910d98","articleId":1397,"userId":2417,"content":"[@ChallenAi](/user/ChallenAi) 又开始招了哟！","createdAt":1567409772594},{"id":6539,"originId":"5d6f9506a7474a231a588cff","articleId":1397,"userId":2417,"content":"upppppppp","createdAt":1567593734478},{"id":6540,"originId":"5d8c75858b9e1c0d6dc5e373","articleId":1397,"userId":2417,"content":"upppp","createdAt":1569486213784},{"id":6541,"originId":"5d81a86b53c75a4136b4b3bb","articleId":1402,"userId":2408,"content":"欢迎咨询","createdAt":1568778347006},{"id":6542,"originId":"5d8adc87e86cfb0d2a645970","articleId":1402,"userId":2408,"content":"冲鸭！！！","createdAt":1569381511290},{"id":6543,"originId":"5d5e6dfadcd8e81121a6052f","articleId":1403,"userId":2264,"content":"[@Timzzzzz](/user/Timzzzzz) 也是可以的哦，要求会根据具体情况去考虑，有兴趣的话可以发简历至邮箱~","createdAt":1566469626318},{"id":6544,"originId":"5d8ac5f08b9e1c0d6dc5de1b","articleId":1403,"userId":2264,"content":"[@Nick233333](/user/Nick233333) 您好，还招的，可以发简历至邮箱","createdAt":1569375728313},{"id":6545,"originId":"5d83443895464514f7ed83d3","articleId":1408,"userId":2430,"content":"有无经验皆可，没人感兴趣吗？","createdAt":1568883768512},{"id":6546,"originId":"5d88949b53c75a4136b4ce40","articleId":1408,"userId":557,"content":"有公司的简单介绍么？","createdAt":1569232027442},{"id":6547,"originId":"5ca3210531010b2dfbb425fa","articleId":1409,"userId":2385,"content":"upup","createdAt":1554194693866},{"id":6548,"originId":"5cc5633537faec0ce1d07a50","articleId":1409,"userId":2385,"content":"长期有效，欢迎投递","createdAt":1556439861407},{"id":6549,"originId":"5ccaa86405ae566f637fe253","articleId":1409,"userId":2132,"content":"19应届生可以不，求推","createdAt":1556785252414},{"id":6550,"originId":"5cf0f0ae1fe902120f31afd5","articleId":1409,"userId":1556,"content":"北京可以投杭州的吗","createdAt":1559294126039},{"id":6551,"originId":"5d0061be95fcc914aa267f0d","articleId":1409,"userId":2385,"content":"长期招聘压力，对人才，对简历如狼似渴，搞react, 搞vue，搞rn，搞node，搞go的统统都要","createdAt":1560306110282},{"id":6552,"originId":"5d11c855cdb1f967c1575b3b","articleId":1409,"userId":2183,"content":"深圳，前端还有坑吗？","createdAt":1561446485067},{"id":6553,"originId":"5d12222234bca667bc6e2c3b","articleId":1409,"userId":2385,"content":"[@LoneyHeart](/user/LoneyHeart) 刚组建，人员缺口很大","createdAt":1561469474393},{"id":6554,"originId":"5d12d74acdb1f967c1575e50","articleId":1409,"userId":2183,"content":"[@erdun](/user/erdun) 有什么要求？","createdAt":1561515850303},{"id":6555,"originId":"5d2495d071951f750ccb9d65","articleId":1409,"userId":2385,"content":"[@LoneyHeart](/user/LoneyHeart) 深圳的主要写react， react好就行","createdAt":1562678736126},{"id":6556,"originId":"5d26ae008a8bf909209cd637","articleId":1409,"userId":2183,"content":"[@erdun](/user/erdun) 你们这面试流程真的是太慢了","createdAt":1562816000174},{"id":6557,"originId":"5d2fe2009969a529571d5017","articleId":1409,"userId":2431,"content":"upup \r\nnodejs同学看过来啊","createdAt":1563419136604},{"id":6558,"originId":"5d35ae42b2b9222961dad332","articleId":1409,"userId":1377,"content":"大龄毕业生，要不要啊。。。。羞于启齿了\r\nnodejs后端实习岗位有不?","createdAt":1563799106848},{"id":6559,"originId":"5d369d2affed731686461b6e","articleId":1409,"userId":38,"content":"路过帮顶一个~","createdAt":1563860266629},{"id":6560,"originId":"5d39545f9969a529571d71ba","articleId":1409,"userId":2431,"content":"[@Josh119891](/user/Josh119891) 可以发简历给LZ","createdAt":1564038239770},{"id":6561,"originId":"5d568f05697873456c6be08e","articleId":1409,"userId":2385,"content":"[@lellansin](/user/lellansin) 哈哈，谢谢","createdAt":1565953797477},{"id":6562,"originId":"5d569fd4697873456c6be0d2","articleId":1409,"userId":2182,"content":"投了","createdAt":1565958100838},{"id":6563,"originId":"5d6cc857d50f572345910dae","articleId":1409,"userId":2431,"content":"upup  node的同学来一些哈","createdAt":1567410263059},{"id":6564,"originId":"5d8864c295464514f7ed9336","articleId":1409,"userId":2385,"content":"[@Nick233333](/user/Nick233333) 研发本部在杭州，深圳只有招react","createdAt":1569219778694},{"id":6565,"originId":"5d81be3253c75a4136b4b40c","articleId":1410,"userId":2114,"content":"衣带渐宽终不悔","createdAt":1568783922417},{"id":6566,"originId":"5d84795d53c75a4136b4c128","articleId":1410,"userId":2357,"content":"[@linkenliu](/user/linkenliu) 66666哈哈哈哈，欢迎砸简历了解我们！","createdAt":1568962909478},{"id":6567,"originId":"5d82445453c75a4136b4b83a","articleId":1412,"userId":2434,"content":"家鸣哥团队稳！","createdAt":1568818260789},{"id":6568,"originId":"5d27f62b8a8bf909209cdae3","articleId":1415,"userId":152,"content":"没有人吗？  全栈、前端也招啊。  技术直招。简历直达用人主管。","createdAt":1562900011819},{"id":6569,"originId":"5d2d31edc5fe2549619aeb66","articleId":1415,"userId":152,"content":"持续招人ing","createdAt":1563242989733},{"id":6570,"originId":"5d384574b4725a628e26874f","articleId":1415,"userId":152,"content":"已经有一位同学成功入职， 继续招聘中","createdAt":1563968884216},{"id":6571,"originId":"5d41612eb4725a628e26a089","articleId":1415,"userId":152,"content":"还在招。 ","createdAt":1564565806504},{"id":6572,"originId":"5d557899697873456c6bdc36","articleId":1415,"userId":152,"content":"顶一下","createdAt":1565882521614},{"id":6573,"originId":"5d557c15697873456c6bdc51","articleId":1415,"userId":90,"content":"帮顶","createdAt":1565883413584},{"id":6574,"originId":"5d557de812a01945444170be","articleId":1415,"userId":152,"content":"[@jxycbjhc](/user/jxycbjhc)   😁","createdAt":1565883880244},{"id":6575,"originId":"5d6796f7dcd8e81121a61eb6","articleId":1415,"userId":152,"content":"顶","createdAt":1567069943583},{"id":6576,"originId":"5d74d4f9d50f572345912876","articleId":1415,"userId":152,"content":"继续招","createdAt":1567937785362},{"id":6577,"originId":"5d81deec53c75a4136b4b51d","articleId":1415,"userId":1989,"content":"顶","createdAt":1568792300360},{"id":6578,"originId":"5c8afc8facb681372d418371","articleId":1417,"userId":652,"content":"顶一个","createdAt":1552612495536},{"id":6579,"originId":"5c90300896558e26e1b669ed","articleId":1417,"userId":652,"content":"急招，顶一个！","createdAt":1552953352966},{"id":6580,"originId":"5c943fc0fd41137eb7660599","articleId":1417,"userId":652,"content":"急需要人，速来撩","createdAt":1553219520853},{"id":6581,"originId":"5c9728e300bcfd7eb2be5703","articleId":1417,"userId":2438,"content":"node纯后端考虑不?","createdAt":1553410275023},{"id":6582,"originId":"5c998b28fd41137eb7661b28","articleId":1417,"userId":652,"content":"[@gaochao93](/user/gaochao93) 考虑啊！欢迎简历或者微信。","createdAt":1553566504454},{"id":6583,"originId":"5c9ab47600bcfd7eb2be67c5","articleId":1417,"userId":652,"content":"顶一个","createdAt":1553642614223},{"id":6584,"originId":"5d678258421846662d985b1a","articleId":1417,"userId":652,"content":"最近又需要人啦","createdAt":1567064664928},{"id":6585,"originId":"5d784bf2d50f572345913744","articleId":1417,"userId":652,"content":"前端岗位已经满了！NodeJs还有坑","createdAt":1568164850136},{"id":6586,"originId":"5d8187ff95464514f7ed79d3","articleId":1417,"userId":652,"content":"继续顶一个！","createdAt":1568770047808},{"id":6587,"originId":"5b91cccebf116a8c0e42588d","articleId":1419,"userId":2441,"content":"有没有深圳岗位可以内退一波？\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1536281806167},{"id":6588,"originId":"5b9249ddbf116a8c0e4258da","articleId":1419,"userId":1730,"content":"[@danielsss](/user/danielsss) 目前没有深圳的岗位啊亲","createdAt":1536313821438},{"id":6589,"originId":"5b9249f8f1e8bc7579c78325","articleId":1419,"userId":1730,"content":"顶一顶","createdAt":1536313848227},{"id":6590,"originId":"5b95cde2bf116a8c0e425981","articleId":1419,"userId":1730,"content":"周一 是一周美好的开始","createdAt":1536544226236},{"id":6591,"originId":"5b96b309ce9d14c2254df87e","articleId":1419,"userId":2442,"content":"有成都的吗，刚从北京回来，不想过去了","createdAt":1536602889559},{"id":6592,"originId":"5b975a49a333b7bd25441f3e","articleId":1419,"userId":1730,"content":"[@wuxiaoqian88](/user/wuxiaoqian88) 暂时还没有","createdAt":1536645705463},{"id":6593,"originId":"5b978a54a333b7bd25441f64","articleId":1419,"userId":2443,"content":"楼主不是自研游戏内个么,怎么跑去京东当招聘了呢,哈哈","createdAt":1536658004193},{"id":6594,"originId":"5b97ad0ba333b7bd25441f77","articleId":1419,"userId":1730,"content":"[@luckyqqk](/user/luckyqqk) 大哥，游戏市场不好了，你也知道。。。\r\nhttps://github.com/NetEase/pomelo/wiki/Pomelo%E6%88%90%E5%8A%9F%E6%A1%88%E4%BE%8B\r\n这里第一款《军团对决》是当时自研的","createdAt":1536666891098},{"id":6595,"originId":"5b99e1c0ce9d14c2254df9bf","articleId":1419,"userId":2443,"content":"[@lwcbest](/user/lwcbest) 恭喜你找到出路了,我再坚守一下","createdAt":1536811456228},{"id":6596,"originId":"5b9a3365ce9d14c2254dfa00","articleId":1419,"userId":1730,"content":"[@luckyqqk](/user/luckyqqk) 坚持就是胜利","createdAt":1536832357989},{"id":6597,"originId":"5b9f17218f5b0c1c59ea0f06","articleId":1419,"userId":1730,"content":"最近有几个人在offer流程了。HC不多了，简历抓紧投过来啊，朋友们。","createdAt":1537152801716},{"id":6598,"originId":"5ba1aa749545eaf107b9c451","articleId":1419,"userId":1730,"content":"上去","createdAt":1537321588089},{"id":6599,"originId":"5ba2fa0e9545eaf107b9c49e","articleId":1419,"userId":1730,"content":"上","createdAt":1537407502957},{"id":6600,"originId":"5ba994019545eaf107b9c5ca","articleId":1419,"userId":1730,"content":"踢上去","createdAt":1537840129922},{"id":6601,"originId":"5ba9988537a6965f59051c3d","articleId":1419,"userId":2444,"content":"[@wuxiaoqian88](/user/wuxiaoqian88) 阿里有成都的岗哇。感兴趣私聊","createdAt":1537841285448},{"id":6602,"originId":"5ba9a39e8f5b0c1c59ea1130","articleId":1419,"userId":1730,"content":"[@xingyesh](/user/xingyesh) 大哥 够狠~","createdAt":1537844126524},{"id":6603,"originId":"5bab80cf8f5b0c1c59ea1192","articleId":1419,"userId":90,"content":"釜底抽薪。。。","createdAt":1537966287833},{"id":6604,"originId":"5badf7e5ede204052db80270","articleId":1419,"userId":1730,"content":"快来，还有坑","createdAt":1538127845603},{"id":6605,"originId":"5bbab33f37a6965f59051f88","articleId":1419,"userId":1730,"content":"踢","createdAt":1538962239167},{"id":6606,"originId":"5bbeb20737a6965f59052093","articleId":1419,"userId":1730,"content":"简历砸过来","createdAt":1539224071766},{"id":6607,"originId":"5bd019e3b56c42645edb7c3e","articleId":1419,"userId":2445,"content":"在亦庄吗？","createdAt":1540364771156},{"id":6608,"originId":"5bd024c9af3d3a315eab0282","articleId":1419,"userId":1730,"content":"[@ShangguanQuail](/user/ShangguanQuail) 亦庄","createdAt":1540367561457},{"id":6609,"originId":"5bdbaa9a21d75b74609f2e98","articleId":1419,"userId":1730,"content":"up","createdAt":1541122714464},{"id":6610,"originId":"5bfb8bb8d6104a4f803a18b5","articleId":1419,"userId":1730,"content":"go","createdAt":1543211960851},{"id":6611,"originId":"5bffa226d6104a4f803a2d5b","articleId":1419,"userId":2422,"content":"NodeJS 开发了几年，早期的express ，到现在用 egg，不过京东应该不会用egg。\r\n估计express 或者 KOA","createdAt":1543479846368},{"id":6612,"originId":"5c0e117e7ec239239ff5546e","articleId":1419,"userId":1493,"content":"[@xingyesh](/user/xingyesh) 请问，还有成都岗吗?","createdAt":1544425854930},{"id":6613,"originId":"5c0f30c8f3d48d2397c0feca","articleId":1419,"userId":2444,"content":"[@riichg5](/user/riichg5) 有的有的，欢迎砸简历。联系方式 看这个https://cnodejs.org/topic/5b234b1f5cd02be6409014c5#5c0f30bcf3d48d2397c0fec7","createdAt":1544499400095},{"id":6614,"originId":"5c60dadce6aaad2ea76df538","articleId":1419,"userId":1730,"content":"新一年，新起点，又开始招人啦","createdAt":1549851356438},{"id":6615,"originId":"5c6a5972a27f1643eb490f6c","articleId":1419,"userId":1730,"content":"up","createdAt":1550473586802},{"id":6616,"originId":"5c6e153b33b0b629ac8439a7","articleId":1419,"userId":1730,"content":"up","createdAt":1550718267635},{"id":6617,"originId":"5c7699baab86b86ddf6b385b","articleId":1419,"userId":652,"content":"上海的NodeJS有吗？","createdAt":1551276474572},{"id":6618,"originId":"5c769b7dab86b86ddf6b386f","articleId":1419,"userId":107,"content":"北京还有吗","createdAt":1551276925883},{"id":6619,"originId":"5c88667b7ce0df373242775e","articleId":1419,"userId":1730,"content":"[@fantasticsoul](/user/fantasticsoul) 有","createdAt":1552443003722},{"id":6620,"originId":"5d3018fdb2b9222961dabd85","articleId":1419,"userId":1730,"content":"可以继续投简历","createdAt":1563433213383},{"id":6621,"originId":"5d37ad54b4725a628e2683bf","articleId":1419,"userId":2,"content":"有深圳吗？","createdAt":1563929940839},{"id":6622,"originId":"5d3fac8cb4725a628e2698f8","articleId":1419,"userId":1730,"content":"[@dingyuanwu](/user/dingyuanwu) 目前仅北京哈","createdAt":1564454028722},{"id":6623,"originId":"5d7f3a9bcac77d1859936fe1","articleId":1419,"userId":1730,"content":"还要人","createdAt":1568619163727},{"id":6624,"originId":"5d80880653c75a4136b4b0e1","articleId":1419,"userId":1730,"content":"up","createdAt":1568704518888},{"id":6625,"originId":"5d7ef85495464514f7ed71fd","articleId":1421,"userId":1805,"content":"持续招聘ing\r\n","createdAt":1568602196178},{"id":6626,"originId":"5d54c64d12a0194544416bdb","articleId":1422,"userId":2408,"content":"感兴趣的小伙伴抓紧投递吧，另外向想要投递校招的小伙伴提供一个内推码：4T4XPXV，祝大家校招顺利~","createdAt":1565836877325},{"id":6627,"originId":"5d5a175712a0194544417a58","articleId":1422,"userId":2408,"content":"欢迎大家投递，邮件主题可注明来源cnode~","createdAt":1566185303355},{"id":6628,"originId":"5d5dfdfbe79eaa6628beb696","articleId":1422,"userId":2408,"content":"我们有各种福利，只差一个优秀的你![middle_img_0bb8da99-b17c-4e20-9f85-78b451b37368.jpg](//static.cnodejs.org/FnYOYbhgs_4tpFd1hobdL4SYszi6)","createdAt":1566440955429},{"id":6629,"originId":"5d5f5a37421846662d9843f8","articleId":1422,"userId":2408,"content":"![middle_img_2e5ff274-9b69-4f5c-8d62-aee2499db52a.jpg](//static.cnodejs.org/FlAKQCBo7ZJUlGG9yWpIQ8N_pEUn)\r\n分享日常~","createdAt":1566530103146},{"id":6630,"originId":"5d61fa9b421846662d9848d5","articleId":1422,"userId":2408,"content":"21届同学也可投递实习生，欢迎推荐~","createdAt":1566702235719},{"id":6631,"originId":"5d634bd7421846662d984b65","articleId":1422,"userId":2408,"content":"有什么疑问都可以评论，我看到会及时回复~","createdAt":1566788567334},{"id":6632,"originId":"5d65f814dcd8e81121a618de","articleId":1422,"userId":2408,"content":"欢迎投递和推荐呦","createdAt":1566963732515},{"id":6633,"originId":"5d68912adcd8e81121a620ce","articleId":1422,"userId":2408,"content":"顶帖~","createdAt":1567133994810},{"id":6634,"originId":"5d6cb20aa7474a231a588233","articleId":1422,"userId":2408,"content":"欢迎咨询","createdAt":1567404554726},{"id":6635,"originId":"5d6dda5fa7474a231a58866e","articleId":1422,"userId":2408,"content":"校招流程已经终止的也可以投递实习生~","createdAt":1567480415960},{"id":6636,"originId":"5d7076f1d50f572345911991","articleId":1422,"userId":2408,"content":"快来投递吧~","createdAt":1567651569019},{"id":6637,"originId":"5d71ce45d50f5723459121ee","articleId":1422,"userId":2408,"content":"可加微信fjxayw咨询~，备注姓名+职位+cnode","createdAt":1567739461354},{"id":6638,"originId":"5d79b6b9a7474a231a58b296","articleId":1422,"userId":2408,"content":"欢迎投递","createdAt":1568257721226},{"id":6639,"originId":"5d6f865cd50f572345911744","articleId":1423,"userId":1075,"content":"有意者直接叫我微信私聊：18801971372","createdAt":1567589980034},{"id":6640,"originId":"5d784bb0d50f572345913739","articleId":1423,"userId":652,"content":"3年以上，这个价格有点低！","createdAt":1568164784862},{"id":6641,"originId":"5d75c38fd50f572345912b4f","articleId":1424,"userId":2447,"content":"dfsdfsfdfsdfsdgsdf","createdAt":1567998863315},{"id":6642,"originId":"5d76109cd50f572345912fd0","articleId":1424,"userId":2446,"content":"asdasdasdasd","createdAt":1568018588843},{"id":6643,"originId":"5d7610b7a7474a231a58a5b9","articleId":1424,"userId":2447,"content":"啊啊啊","createdAt":1568018615295},{"id":6644,"originId":"5d7610baa7474a231a58a5bc","articleId":1424,"userId":2447,"content":"aa的","createdAt":1568018618616},{"id":6645,"originId":"5d7610bdd50f572345912fd9","articleId":1424,"userId":2447,"content":"的说法烦烦烦","createdAt":1568018621720},{"id":6646,"originId":"5d7610c1d50f572345912fdd","articleId":1424,"userId":2447,"content":"顶顶顶","createdAt":1568018625183},{"id":6647,"originId":"5d774138a7474a231a58aa92","articleId":1424,"userId":728,"content":"发这个垃圾帖子干嘛，丢人","createdAt":1568096568621},{"id":6648,"originId":"5a66d32e9d371d4a059eed38","articleId":1428,"userId":241,"content":"发送简历的同学可以备注上，来自cnode","createdAt":1516688174689},{"id":6649,"originId":"5acdeaee464b1bfa6b425056","articleId":1428,"userId":241,"content":"欢迎大三或研一的同学加入！","createdAt":1523444462845},{"id":6650,"originId":"5b2082ef29e6e510415b2a5f","articleId":1428,"userId":241,"content":"2018web实习生继续招","createdAt":1528857327613},{"id":6651,"originId":"5b3c7f47ac8bc1e124114676","articleId":1428,"userId":241,"content":"TOP","createdAt":1530691399250},{"id":6652,"originId":"5ba05f7b37a6965f59051a85","articleId":1428,"userId":241,"content":"2018web实习生继续招","createdAt":1537236859655},{"id":6653,"originId":"5ba4bf7a37a6965f59051ba7","articleId":1428,"userId":2450,"content":"[@fancylife](/user/fancylife)  kkk","createdAt":1537523578786},{"id":6654,"originId":"5bab47b315e4fd1923f48a90","articleId":1428,"userId":241,"content":"Top","createdAt":1537951667561},{"id":6655,"originId":"5bc82f2515e4fd1923f4904b","articleId":1428,"userId":241,"content":"Top","createdAt":1539845925343},{"id":6656,"originId":"5c04a4f3887c5864fafe1ecc","articleId":1428,"userId":241,"content":"Top","createdAt":1543808243925},{"id":6657,"originId":"5c15e94c7ec239239ff57385","articleId":1428,"userId":2451,"content":"请问贵公司还招2019届应届毕业生吗？我已将简历发送至您的邮箱了。","createdAt":1544939852156},{"id":6658,"originId":"5c3566243898674067a7cea8","articleId":1428,"userId":241,"content":"[@lovelifeloveyou](/user/lovelifeloveyou) 好的👌","createdAt":1547003428877},{"id":6659,"originId":"5c3566465bf06c5e7e3f2f80","articleId":1428,"userId":241,"content":"2019/2020届应届毕业生欢迎投递简历","createdAt":1547003462914},{"id":6660,"originId":"5d73c053d50f572345912713","articleId":1428,"userId":241,"content":"top","createdAt":1567866963088},{"id":6661,"originId":"5d73c066a7474a231a589d16","articleId":1428,"userId":241,"content":"2019年，大三或研一web实习生继续招","createdAt":1567866982121},{"id":6662,"originId":"5d71d378a7474a231a5897f7","articleId":1429,"userId":2453,"content":"兼职可以吗","createdAt":1567740792633},{"id":6663,"originId":"5d71cc22a7474a231a5897b0","articleId":1430,"userId":523,"content":"terran.chao@gmail.com 啥公司呀","createdAt":1567738914960},{"id":6664,"originId":"5d71bfbca7474a231a589728","articleId":1431,"userId":557,"content":"日常顶起","createdAt":1567735740566},{"id":6665,"originId":"5d318a5e9969a529571d58ec","articleId":1436,"userId":2458,"content":"![image.png](//static.cnodejs.org/FlWImx4kwxecfP26lqcxQlUgY1tT)","createdAt":1563527774859},{"id":6666,"originId":"5d3803d2b4725a628e2685dd","articleId":1436,"userId":2458,"content":"实习生也在看，还需要至少2名，欢迎投递，node.js和Java都可以。","createdAt":1563952082910},{"id":6667,"originId":"5d5e098ce79eaa6628beb6f4","articleId":1436,"userId":2458,"content":"https://www.linkedin.com/company/amberbtc/\r\nLinkedin链接，也可以了解到我们的招聘信息和公司信息","createdAt":1566443916620},{"id":6668,"originId":"5d4a2e6d12a0194544414c78","articleId":1438,"userId":1138,"content":"棒棒的 ，支持下","createdAt":1565142637083},{"id":6669,"originId":"5d5d265b421846662d983c30","articleId":1438,"userId":1138,"content":"支持，加油，希望更多的伙伴加入","createdAt":1566385755111},{"id":6670,"originId":"5d5d2644421846662d983c29","articleId":1439,"userId":1138,"content":"欢迎大家的关注。","createdAt":1566385732250},{"id":6671,"originId":"58352e8c27d001d606ac1896","articleId":1440,"userId":1947,"content":"首发....","createdAt":1479880332401},{"id":6672,"originId":"583542a3bde2b59e06141eb0","articleId":1440,"userId":539,"content":"二楼","createdAt":1479885475005},{"id":6673,"originId":"58355e0e27d001d606ac18b3","articleId":1440,"userId":18,"content":"[@oyosc](/user/oyosc) [@zsea](/user/zsea) 已推荐！","createdAt":1479892494262},{"id":6674,"originId":"583565646add41f206000b77","articleId":1440,"userId":1350,"content":"占楼，下班回去发","createdAt":1479894372853},{"id":6675,"originId":"583579c8bde2b59e06141ec5","articleId":1440,"userId":568,"content":"阅\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1479899592108},{"id":6676,"originId":"5836a7b127d001d606ac1910","articleId":1440,"userId":273,"content":"👍<br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1479976881013},{"id":6677,"originId":"5836fd3ebde2b59e06141f4e","articleId":1440,"userId":1000,"content":"已发","createdAt":1479998782809},{"id":6678,"originId":"5837b1ff27d001d606ac194a","articleId":1440,"userId":895,"content":"lol 唐少nice！","createdAt":1480045055020},{"id":6679,"originId":"5837ead527d001d606ac196b","articleId":1440,"userId":2459,"content":"哈哈","createdAt":1480059605622},{"id":6680,"originId":"5837eade27d001d606ac196d","articleId":1440,"userId":2459,"content":"喂","createdAt":1480059614935},{"id":6681,"originId":"5837eaf2ba57ffba06c249a0","articleId":1440,"userId":2459,"content":"[@FySuper](/user/FySuper) ","createdAt":1480059634225},{"id":6682,"originId":"5837eb01ba57ffba06c249a3","articleId":1440,"userId":2459,"content":"[@shiyangzhaoa](/user/shiyangzhaoa) ","createdAt":1480059649039},{"id":6683,"originId":"5837eb45c71e606e36aed17a","articleId":1440,"userId":2459,"content":"哈哈","createdAt":1480059717152},{"id":6684,"originId":"583929d1c71e606e36aed1c3","articleId":1440,"userId":2460,"content":"唐哥你好~接不接受寒假实习内推呢","createdAt":1480141265737},{"id":6685,"originId":"583957b0ba57ffba06c249e9","articleId":1440,"userId":18,"content":"[@JerelLin](/user/JerelLin) 实习和校招走官方途径，我这里没有优惠","createdAt":1480153008357},{"id":6686,"originId":"583a40766add41f206000cc5","articleId":1440,"userId":539,"content":"[@alsotang](/user/alsotang) 感觉我技术不行，虽然一大把年纪了，还是得向你学习。","createdAt":1480212598016},{"id":6687,"originId":"5847851c3ebad99b336b1e30","articleId":1440,"userId":219,"content":"支持一下","createdAt":1481082140820},{"id":6688,"originId":"5847ad933ebad99b336b1e3a","articleId":1440,"userId":18,"content":"[@dp199313](/user/dp199313) 不招应届生","createdAt":1481092499814},{"id":6689,"originId":"5849362d3ebad99b336b1ea7","articleId":1440,"userId":2461,"content":"大大大","createdAt":1481193005499},{"id":6690,"originId":"58495e423ebad99b336b1eb0","articleId":1440,"userId":2462,"content":"111","createdAt":1481203266109},{"id":6691,"originId":"58497f239ff0dbf3334508de","articleId":1440,"userId":2463,"content":"先mark一下，校招没优惠吗？明年校招不知道老哥能不能给推一下。","createdAt":1481211683562},{"id":6692,"originId":"584998ff9ff0dbf3334508e6","articleId":1440,"userId":18,"content":"[@lavyun](/user/lavyun) 校招还是推荐走官方的校招途径","createdAt":1481218303687},{"id":6693,"originId":"584b77ec3ebad99b336b1f40","articleId":1440,"userId":332,"content":"1111\n\n 自豪地采用[cnodejs-vue](https://github.com/beilunyang/cnodejs-vue)","createdAt":1481340908026},{"id":6694,"originId":"584f94f23ebad99b336b2007","articleId":1440,"userId":2464,"content":"支持一下，学node已半年","createdAt":1481610482559},{"id":6695,"originId":"5853553fa670f31b6b460784","articleId":1440,"userId":2465,"content":"哈哈\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1481856319024},{"id":6696,"originId":"5853af12ab6882de69938313","articleId":1440,"userId":2466,"content":"前排支持 <br> <br><p>来自吊吊的 <a href=\"https://github.com/ihanyang/cnode-vue\">cnode-vue</a></p>","createdAt":1481879314949},{"id":6697,"originId":"5853bf08c27fe5666b84d437","articleId":1440,"userId":2467,"content":"66666","createdAt":1481883400876},{"id":6698,"originId":"5860fc377461e63c7bb8ae79","articleId":1440,"userId":2468,"content":"实习前端能要吗？我培训机构的","createdAt":1482751031405},{"id":6699,"originId":"586482a8189fd5ad6459001f","articleId":1440,"userId":146,"content":"没有杭州的，不科学","createdAt":1482982056802},{"id":6700,"originId":"58a999d75b904b25651b3712","articleId":1440,"userId":2469,"content":"简历发过去了，唐哥[@alsotang](/user/alsotang) 请查收","createdAt":1487509975736},{"id":6701,"originId":"58aa63e2fafcf6bf5f32d867","articleId":1440,"userId":18,"content":"[@bulgerxie](/user/bulgerxie) 好，等等查看","createdAt":1487561698849},{"id":6702,"originId":"58abb3a2414c2f51644788dd","articleId":1440,"userId":2469,"content":"[@alsotang](/user/alsotang) 唐哥，又给你发了一封邮件，劳烦看一下","createdAt":1487647650393},{"id":6703,"originId":"58ada19c7872ea0864fedfd6","articleId":1440,"userId":2302,"content":"腾讯上海漕河泾有什么职位吗？ 网页上看不出来在上海什么地方办公","createdAt":1487774108684},{"id":6704,"originId":"58b2f89a7872ea0864fee116","articleId":1440,"userId":2470,"content":"请问唐哥，现在腾讯在招暑假的实习，您看能给内推一下不\r\n","createdAt":1488124058059},{"id":6705,"originId":"58b2f91f7872ea0864fee118","articleId":1440,"userId":2470,"content":"[@jinjinzhong](/user/jinjinzhong) http://join.qq.com/techrecommend.php 就这个","createdAt":1488124191586},{"id":6706,"originId":"58b39fdfea21217a4486cdc1","articleId":1440,"userId":18,"content":"[@jinjinzhong](/user/jinjinzhong) 实习生的话，公司有统一的流程，建议走公司统一的流程。内推的话，我了解的实习生这边没有什么特殊途径。","createdAt":1488166879189},{"id":6707,"originId":"58b3b8bd5b904b25651b395c","articleId":1440,"userId":2470,"content":"但是我看现在这个阶段的实习生招募就是内推的呀","createdAt":1488173245501},{"id":6708,"originId":"58b6ce8d5b904b25651b3a58","articleId":1440,"userId":2302,"content":"[@alsotang](/user/alsotang) 邮件已发谢谢内推","createdAt":1488375437906},{"id":6709,"originId":"58ff7531523b9d0956dada0c","articleId":1440,"userId":2471,"content":"两年nodejs工作经验的要吗","createdAt":1493136689473},{"id":6710,"originId":"591c168c9e32cc84569a7090","articleId":1440,"userId":2472,"content":"请问可以帮忙内推这里的吗 http://cdc.tencent.com/%E6%8B%9B%E8%81%98/","createdAt":1495013004918},{"id":6711,"originId":"591ec0b2d371b6372a8afba9","articleId":1440,"userId":2225,"content":"你","createdAt":1495187634123},{"id":6712,"originId":"5923ab929e32cc84569a724a","articleId":1440,"userId":1023,"content":"[@alsotang](/user/alsotang) 有有关node的职位吗？","createdAt":1495509906995},{"id":6713,"originId":"5923bfcf855efbac2cf7a20a","articleId":1440,"userId":2225,"content":"那还好","createdAt":1495515087212},{"id":6714,"originId":"5924276d855efbac2cf7a239","articleId":1440,"userId":2225,"content":"呵呵发","createdAt":1495541613293},{"id":6715,"originId":"5924d923d371b6372a8afcdc","articleId":1440,"userId":2225,"content":"hehe ","createdAt":1495587107873},{"id":6716,"originId":"5938aca94f70343f5c57078e","articleId":1440,"userId":1792,"content":"酷炫啊","createdAt":1496886441503},{"id":6717,"originId":"5a786bf1afa0a121784a932a","articleId":1440,"userId":2473,"content":"没有毕业的学生旺看大佬们","createdAt":1517841393589},{"id":6718,"originId":"5a7aaeaa99ef9fac6b2e67fc","articleId":1440,"userId":490,"content":"[@alsotang](/user/alsotang)  golang123社区请求交换下友情链接\r\n网址: https://www.golang123.com/\r\nlogo: https://www.golang123.com/images/logo.png\r\n\r\n![image.png](//static.cnodejs.org/Fi2dQT3CsB94A5qbmfuX05UgT60s)\r\n","createdAt":1517989546903},{"id":6719,"originId":"5a9fee3119b2e3db18959b92","articleId":1440,"userId":785,"content":"请问一下，成都的能内推吗，最近在拉勾网看见成都腾讯云也有招聘。       [~From Frank.Cnode](https://github.com/FourLeafClover/vue-cnode)","createdAt":1520430641773},{"id":6720,"originId":"5aa0c48c19b2e3db18959bcc","articleId":1440,"userId":18,"content":"[@FourLeafClover](/user/FourLeafClover) 可以的","createdAt":1520485516422},{"id":6721,"originId":"5aaf7bb2e7b166bb7b9ecbff","articleId":1440,"userId":2474,"content":"[@alsotang](/user/alsotang) 请问上海还可以帮忙内推吗?","createdAt":1521449906785},{"id":6722,"originId":"5afbf7feadea947348e764db","articleId":1440,"userId":2475,"content":"[@alsotang](/user/alsotang) 校招补录的测试岗可以帮忙内推吗？直接投感觉没希望。","createdAt":1526462462212},{"id":6723,"originId":"5afcf0d50a36e5312d6ed1d0","articleId":1440,"userId":18,"content":"[@feng-lei](/user/feng-lei) 校招的就算了。校招的渠道总是不清不楚的。","createdAt":1526526165953},{"id":6724,"originId":"5c9c2b0d99e62a362ff40a71","articleId":1440,"userId":16,"content":"坐标上海，大佬能推不","createdAt":1553738509740},{"id":6725,"originId":"5c9c3bc099e62a362ff40afa","articleId":1440,"userId":18,"content":"[@AviorAlong](/user/AviorAlong) 能","createdAt":1553742784965},{"id":6726,"originId":"5d5a957d12a0194544417cea","articleId":1440,"userId":2,"content":"有Node相关的职位吗？","createdAt":1566217597197},{"id":6727,"originId":"5d5a0a2112a01945444179ef","articleId":1442,"userId":2145,"content":"招人难，难于上青天","createdAt":1566181921219},{"id":6728,"originId":"5d4b9dad12a019454441524b","articleId":1443,"userId":98,"content":"可怕，毙猿科技","createdAt":1565236653560},{"id":6729,"originId":"5d4cfec512a0194544415765","articleId":1443,"userId":2477,"content":"[@zengming00](/user/zengming00) 和秘猿有过节吗😂","createdAt":1565327045901},{"id":6730,"originId":"5d517bfb697873456c6bcd7e","articleId":1443,"userId":2182,"content":"我投的rust岗，确实有过节ヽ(°◇° )ノ","createdAt":1565621243422},{"id":6731,"originId":"5d521a5412a01945444162bd","articleId":1443,"userId":2477,"content":"[@yjhmelody](/user/yjhmelody) 能玩转 rust 的都是大佬, 双击 666","createdAt":1565661780911},{"id":6732,"originId":"5d5606e412a019454441712c","articleId":1443,"userId":2182,"content":"[@Keith-CY](/user/Keith-CY) 需要我这种会TS/NodeJS后端，但是不太会现在的前端技术栈，顺便可以写写Rust的菜鸡吗？","createdAt":1565918948723},{"id":6733,"originId":"5d57ca45697873456c6be274","articleId":1443,"userId":2477,"content":"[@yjhmelody](/user/yjhmelody) 可以把简历发给我哟, 我们有个组后端用 Node.js, 并且可能和 Rust 混合开发, 我推给他们.","createdAt":1566034501516},{"id":6734,"originId":"5d52b1ad697873456c6bd12b","articleId":1444,"userId":2181,"content":"北京有职位？北京我没记错就一个腾讯视频把","createdAt":1565700525341},{"id":6735,"originId":"5d537b65697873456c6bd307","articleId":1444,"userId":2478,"content":"[@myliang](/user/myliang) 有的，有意向的话可以加微信聊哦","createdAt":1565752165728},{"id":6736,"originId":"5d53c60512a01945444168c1","articleId":1444,"userId":2181,"content":"[@KevinLuuu](/user/KevinLuuu) 奈何年龄已大，老矣","createdAt":1565771269317},{"id":6737,"originId":"5d535a4a697873456c6bd1f1","articleId":1446,"userId":2479,"content":"顶～～～","createdAt":1565743690421},{"id":6738,"originId":"53e23155743c3d89311dad98","articleId":1448,"userId":2482,"content":"首页好有爱啊","createdAt":1407332693060},{"id":6739,"originId":"53e23182a3df2b8f311e066c","articleId":1448,"userId":2482,"content":"![](http://img.itc.cn/photo/olvmuH8cmTb)\r\n","createdAt":1407332738037},{"id":6740,"originId":"53e23dfd743c3d8931208109","articleId":1448,"userId":901,"content":"[@kingapple](/user/kingapple) 哈哈 团队里面有些人才。 还有对草榴有深入了解的，在知乎拿了几千赞","createdAt":1407335933723},{"id":6741,"originId":"53e2c88ba3df2b8f313ba07e","articleId":1448,"userId":2482,"content":"[@kissliux](/user/kissliux) 赞草榴：）","createdAt":1407371403827},{"id":6742,"originId":"53e2e8fd35b145d547003858","articleId":1448,"userId":2483,"content":"吊炸天。。。苍老师。。草榴","createdAt":1407379709664},{"id":6743,"originId":"53e2fec167f6755349022bcb","articleId":1448,"userId":901,"content":"[@tofrookie](/user/tofrookie) 重点是招聘  好吧","createdAt":1407385281768},{"id":6744,"originId":"5d52312212a019454441635d","articleId":1448,"userId":1962,"content":"这和[草榴](https://www.49gm.org/%e8%8d%89%e6%a6%b4%e7%a4%be%e5%8c%ba%e6%9c%80%e6%96%b0%e5%9c%b0%e5%9d%80%ef%bc%8c%e8%ae%ba%e5%9d%9b%e9%82%80%e8%af%b7%e7%a0%81%ef%bc%8c1024%e6%98%af%e4%bb%80%e4%b9%88%e6%a2%97/)有什么关系？","createdAt":1565667618724},{"id":6745,"originId":"5d1b307c34bca667bc6e4bfb","articleId":1450,"userId":2485,"content":"顶一下,  感觉人不是很多.","createdAt":1562062972939},{"id":6746,"originId":"5d1c138834bca667bc6e4e24","articleId":1450,"userId":2183,"content":"人还是有，比如我就在看工作，但是不想投你家公司（手动狗头）","createdAt":1562121096004},{"id":6747,"originId":"5d500ef0697873456c6bc7eb","articleId":1450,"userId":2485,"content":"顶一下.","createdAt":1565527792217},{"id":6748,"originId":"5d4cd561697873456c6bc1ce","articleId":1451,"userId":2486,"content":"顶顶!","createdAt":1565316449367},{"id":6749,"originId":"5d4cd6fb697873456c6bc1e3","articleId":1451,"userId":2486,"content":"另外,需要一名UI/UE设计人员","createdAt":1565316859990},{"id":6750,"originId":"5d4929d14f472f7fee152f19","articleId":1452,"userId":2414,"content":"链接好像挂了？","createdAt":1565075921943},{"id":6751,"originId":"5d4a6428697873456c6bb8cd","articleId":1452,"userId":1928,"content":"[@duncup](/user/duncup) 嗯是的，简历测评的阶段性活动过了，服务器关了","createdAt":1565156392809},{"id":6752,"originId":"5d48e64f4f472f7fee152d9e","articleId":1454,"userId":2488,"content":"人工置顶","createdAt":1565058639285},{"id":6753,"originId":"5d437fd2b4725a628e26a5ec","articleId":1457,"userId":79,"content":"前端，持续招人么？ 😄😄😄","createdAt":1564704722977},{"id":6754,"originId":"5d47a00fbf26dc7fc53376bb","articleId":1457,"userId":2490,"content":"[@qiutian00](/user/qiutian00) 是的，现在还在招，欢迎投简历","createdAt":1564975119801},{"id":6755,"originId":"5d42db35b4725a628e26a531","articleId":1459,"userId":2492,"content":"地点：深圳保税区","createdAt":1564662581476},{"id":6756,"originId":"5d4389fd9969a529571d8d41","articleId":1459,"userId":2,"content":"具体福利待遇有详细的介绍吗？\r\n","createdAt":1564707325072},{"id":6757,"originId":"5d4400209969a529571d9002","articleId":1459,"userId":2493,"content":"[@dingyuanwu](/user/dingyuanwu) 有兴趣可以直接邮件联系 gary.jin@bwoil.com","createdAt":1564737568781},{"id":6758,"originId":"5ad4973fba60fcc66b7b824b","articleId":1461,"userId":1483,"content":"亲们 简历飞过来吧，或者加我QQ，我们详谈","createdAt":1523881791893},{"id":6759,"originId":"5ad6b9f13edb2aff6be85bef","articleId":1461,"userId":1483,"content":"亲们 简历飞过来吧，急缺人才！","createdAt":1524021745261},{"id":6760,"originId":"5ad83d7e464b1bfa6b4256c4","articleId":1461,"userId":1483,"content":"顶一下","createdAt":1524120958032},{"id":6761,"originId":"5adac2413edb2aff6be85e70","articleId":1461,"userId":1975,"content":"兼容chrome这个有点骚","createdAt":1524286017701},{"id":6762,"originId":"5adb5583a7d228c16b98714d","articleId":1461,"userId":1483,"content":"[@fruit-memory](/user/fruit-memory) 哈哈，一点点","createdAt":1524323715880},{"id":6763,"originId":"5ae2c53aadea947348e75e90","articleId":1461,"userId":1483,"content":"顶一下","createdAt":1524811066422},{"id":6764,"originId":"5ae3e8ca39a81e4548f457e9","articleId":1461,"userId":1483,"content":"么么哒","createdAt":1524885706617},{"id":6765,"originId":"5ae56b86adea947348e75f17","articleId":1461,"userId":1483,"content":"究极么么哒","createdAt":1524984710831},{"id":6766,"originId":"5ae77607adea947348e75f6e","articleId":1461,"userId":356,"content":"没有招node的啊\n\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1525118471391},{"id":6767,"originId":"5ae79660adea947348e75f70","articleId":1461,"userId":2495,"content":"前端的要求可以再详细说说嘛","createdAt":1525126752205},{"id":6768,"originId":"5ae86b1202591040485ba9ab","articleId":1461,"userId":1483,"content":"[@TimLiu1](/user/TimLiu1) 有！简历给我，我给你推其它部门","createdAt":1525181202535},{"id":6769,"originId":"5ae86be31b02288048bd0b69","articleId":1461,"userId":1483,"content":"[@GXwar](/user/GXwar)  真的没有特殊要求，面试就像聊天，我们会判断出你的水准，最难的部分是 基础知识部分，如果你是一个精进、有热情、并注意日常细节的前端开发，通过是很容易的","createdAt":1525181411872},{"id":6770,"originId":"5aea660939a81e4548f4592b","articleId":1461,"userId":1483,"content":"来吧来吧，相约九八","createdAt":1525310985030},{"id":6771,"originId":"5aec49e30a36e5312d6ecd0a","articleId":1461,"userId":2133,"content":"前端不考算法吗？","createdAt":1525434851953},{"id":6772,"originId":"5aeeb78b0a36e5312d6ecd6d","articleId":1461,"userId":1483,"content":"[@buyixiaojiang](/user/buyixiaojiang)  会问一些算法的问题，对算法的要求不是很高","createdAt":1525593995814},{"id":6773,"originId":"5af1b40d1b02288048bd0dc0","articleId":1461,"userId":1483,"content":"么么哒！","createdAt":1525789709613},{"id":6774,"originId":"5afef6bc8a45377c06ad6d1d","articleId":1461,"userId":1483,"content":"HI","createdAt":1526658748158},{"id":6775,"originId":"5b041cff000332b81cf821c3","articleId":1461,"userId":1483,"content":"HI","createdAt":1526996223993},{"id":6776,"originId":"5b0f58705cd02be640900ffd","articleId":1461,"userId":1483,"content":"hi !","createdAt":1527732336794},{"id":6777,"originId":"5b1412c029e6e510415b2751","articleId":1461,"userId":2496,"content":"真的是好热情的招聘😂，给你们顶一个。","createdAt":1528042176839},{"id":6778,"originId":"5b1cee6857137f22415c4af4","articleId":1461,"userId":1483,"content":"[@yanlele](/user/yanlele) 谢谢，么么哒","createdAt":1528622696461},{"id":6779,"originId":"5b2e413057137f22415c4e60","articleId":1461,"userId":1483,"content":"简历来吧","createdAt":1529758000302},{"id":6780,"originId":"5b2fbddb57137f22415c4eab","articleId":1461,"userId":1412,"content":"想来。太远来自[CNode.js社区](http://alexlees.github.io)","createdAt":1529855451036},{"id":6781,"originId":"5b448cb1fb9e84ec69cc1972","articleId":1461,"userId":1483,"content":"[@alexlees](/user/alexlees)  come on baby，加我QQ或者给我发邮件","createdAt":1531219121231},{"id":6782,"originId":"5b505c31aef62f1b0f9e0479","articleId":1461,"userId":1483,"content":"123","createdAt":1531993137482},{"id":6783,"originId":"5b83df232a585e4e2f26ff3d","articleId":1461,"userId":1483,"content":"1","createdAt":1535368995080},{"id":6784,"originId":"5bbee72c15e4fd1923f48e09","articleId":1461,"userId":1483,"content":"didididi","createdAt":1539237676952},{"id":6785,"originId":"5be58a3b646a05745b7ba520","articleId":1461,"userId":1483,"content":"dididi","createdAt":1541769787472},{"id":6786,"originId":"5c4198956955112b99436a2a","articleId":1461,"userId":1483,"content":"疯狂招人中！","createdAt":1547802773311},{"id":6787,"originId":"5d41a5c7b4725a628e26a16c","articleId":1461,"userId":2497,"content":"现在还能内推？ [@yishibakaien](/user/yishibakaien) ","createdAt":1564583367270},{"id":6788,"originId":"5d43a642b4725a628e26a6c6","articleId":1461,"userId":1483,"content":"[@bloodstain3614](/user/bloodstain3614) 可以的，亲","createdAt":1564714562142},{"id":6789,"originId":"5d42db46b4725a628e26a536","articleId":1462,"userId":2492,"content":"地点：深圳保税区","createdAt":1564662598839},{"id":6790,"originId":"5b7ea97fa210553a0cde2b9f","articleId":1463,"userId":2498,"content":"Jj","createdAt":1535027583885},{"id":6791,"originId":"5bc586b7ede204052db80593","articleId":1463,"userId":2409,"content":"欢迎来撩","createdAt":1539671735613},{"id":6792,"originId":"5bd29280af3d3a315eab031d","articleId":1463,"userId":2499,"content":"[@teambition](/user/teambition) 18届的新人要不","createdAt":1540526720757},{"id":6793,"originId":"5bd6b366d00aac1004de51fe","articleId":1463,"userId":2409,"content":"[@TanYiBing](/user/TanYiBing) 目前需要工作经验稍微丰富一些的，以后有新的职位开出来了以后会跟您联系哦~","createdAt":1540797286820},{"id":6794,"originId":"5cbefdaaa86ae80ce64b2b2d","articleId":1463,"userId":2247,"content":"star","createdAt":1556020650806},{"id":6795,"originId":"5d3fad699969a529571d8064","articleId":1463,"userId":2409,"content":"还有坑儿，速来","createdAt":1564454249418},{"id":6796,"originId":"5d410d5fb4725a628e269ec0","articleId":1463,"userId":2500,"content":"5年有点难哦","createdAt":1564544351869},{"id":6797,"originId":"5d3eb0599969a529571d7e0f","articleId":1464,"userId":2501,"content":"简历刷一波, 大佬们","createdAt":1564389465520},{"id":6798,"originId":"5d3eb074b4725a628e269677","articleId":1464,"userId":2501,"content":"对了,我还是需要留个邮箱, cg-man@outlook.com","createdAt":1564389492270},{"id":6799,"originId":"5d3ec51c9969a529571d7e71","articleId":1464,"userId":2501,"content":"置顶一下","createdAt":1564394780523},{"id":6800,"originId":"5d3fa8e59969a529571d8041","articleId":1464,"userId":2181,"content":"顶","createdAt":1564453093208},{"id":6801,"originId":"5d3fc53d9969a529571d80e8","articleId":1464,"userId":2502,"content":"🆙","createdAt":1564460349766},{"id":6802,"originId":"5b32f83157137f22415c4fc7","articleId":1466,"userId":2409,"content":"自己顶一下","createdAt":1530066993841},{"id":6803,"originId":"5b33613cac8bc1e124114463","articleId":1466,"userId":2503,"content":"[@teambition](/user/teambition) 请问在广州有招聘吗？\r\n","createdAt":1530093884256},{"id":6804,"originId":"5cb558a4ffa1ea7975a222d9","articleId":1466,"userId":2504,"content":"你们公司好像被阿里包养了啊","createdAt":1555388580124},{"id":6805,"originId":"5cbefd16a86ae80ce64b2b21","articleId":1466,"userId":2247,"content":"star","createdAt":1556020502366},{"id":6806,"originId":"5cdd39b1518e0954fc40ef42","articleId":1466,"userId":161,"content":"感觉好优秀","createdAt":1558002097487},{"id":6807,"originId":"5cffc85d95fcc914aa267dcf","articleId":1466,"userId":2505,"content":"有北京的么","createdAt":1560266845309},{"id":6808,"originId":"5d088ec41fe902120f3203a1","articleId":1466,"userId":2409,"content":"还有坑儿，速来","createdAt":1560841924736},{"id":6809,"originId":"5d088ed795fcc914aa26a345","articleId":1466,"userId":2409,"content":"[@sankooc](/user/sankooc) 没有，都是 base 上海的","createdAt":1560841943584},{"id":6810,"originId":"5d3fada8b4725a628e269902","articleId":1466,"userId":2409,"content":"还有坑儿，速来","createdAt":1564454312121},{"id":6811,"originId":"5d12e64d34bca667bc6e2df2","articleId":1471,"userId":2509,"content":"接受应届生~愿意从前端转后端的小伙伴也欢迎噢~","createdAt":1561519693416},{"id":6812,"originId":"5d155abacdb1f967c157673d","articleId":1471,"userId":1947,"content":"接受远程吗？","createdAt":1561680570333},{"id":6813,"originId":"5d242e5171951f750ccb9b20","articleId":1471,"userId":2509,"content":"[@oyosc](/user/oyosc) 可以聊~方便投一下简历吗 hr@factchina.com","createdAt":1562652241254},{"id":6814,"originId":"5d3a87fd9969a529571d75b5","articleId":1471,"userId":2509,"content":"d~\r\nnode同学快到碗里来吧TT","createdAt":1564116989104},{"id":6815,"originId":"5cb14616207b2365936ec8c7","articleId":1473,"userId":2093,"content":"******2019/4/12 最新社招职位：******\r\nUrgent/hot position forCTC:\r\n•  Senior SoftwareEngineer(Java, C++, Android, iOS, open for all skillset)\r\n•  Cloud SystemsEngineer","createdAt":1555121686435},{"id":6816,"originId":"5cb3ea05dad66d658e408e8e","articleId":1473,"userId":2093,"content":"******2019/4/12 最新社招职位：******\r\nUrgent/hot position forCTC:\r\n• Senior SoftwareEngineer(Java, C++, Android, iOS, open for all skillset)\r\n• Cloud SystemsEngineer","createdAt":1555294725458},{"id":6817,"originId":"5cbd375e37faec0ce1d04611","articleId":1473,"userId":2093,"content":"******2019/4/12 最新社招职位：******\r\nUrgent/hot position forCTC:\r\n• Senior SoftwareEngineer(Java, C++, Android, iOS, open for all skillset)\r\n• Cloud SystemsEngineer","createdAt":1555904350573},{"id":6818,"originId":"5cc11ba537faec0ce1d06612","articleId":1473,"userId":2093,"content":"虚位以待中","createdAt":1556159397783},{"id":6819,"originId":"5cc2b2ed37faec0ce1d0705d","articleId":1473,"userId":2093,"content":"965系列。。。","createdAt":1556263661335},{"id":6820,"originId":"5ccea9c45a5bae6e078130c2","articleId":1473,"userId":2093,"content":"965 系列。。。","createdAt":1557047748327},{"id":6821,"originId":"5cda856ee57aac76fed2a7e1","articleId":1473,"userId":2093,"content":"At least 3 years’ experience of professional engineering in a DevOps or Systems Engineering role. ","createdAt":1557824878353},{"id":6822,"originId":"5d37cf929969a529571d6d26","articleId":1473,"userId":2093,"content":"各位读者大人早上好","createdAt":1563938706235},{"id":6823,"originId":"5a41baeb8230827a18293a77","articleId":1475,"userId":2512,"content":"·","createdAt":1514257131559},{"id":6824,"originId":"5a41dfcfd92f2f5b185ad227","articleId":1475,"userId":2512,"content":"![微信图片_20171226112216.jpg](//static.cnodejs.org/FjwSX1vxPZPIJjHc6K9FFC-qIpue)","createdAt":1514266575485},{"id":6825,"originId":"5a420e5e749e665a378f914b","articleId":1475,"userId":2512,"content":"感谢投递的小伙伴","createdAt":1514278494083},{"id":6826,"originId":"5a430922749e665a378f9190","articleId":1475,"userId":2513,"content":"我们不缺业务，不缺粮草，不缺斗志，只缺英雄。\r\n猛将速来！","createdAt":1514342690825},{"id":6827,"originId":"5a431479d92f2f5b185ad26c","articleId":1475,"userId":2512,"content":"[@hzzhujf](/user/hzzhujf)  这是哪位小伙伴 报上你的名来 给你么么哒","createdAt":1514345593734},{"id":6828,"originId":"5a445693f320ae9f0dd58116","articleId":1475,"userId":2512,"content":"持续招聘~简历刷起来~","createdAt":1514428051227},{"id":6829,"originId":"5a446021d92f2f5b185ad2d5","articleId":1475,"userId":2514,"content":"阿里投资今年动作很大啊","createdAt":1514430497668},{"id":6830,"originId":"5a45b0d4d92f2f5b185ad343","articleId":1475,"userId":152,"content":"招一年半经验的Node后端吗？","createdAt":1514516692542},{"id":6831,"originId":"5a45ede6f320ae9f0dd581aa","articleId":1475,"userId":2285,"content":"mark","createdAt":1514532326132},{"id":6832,"originId":"5a4b26b97b5fe91a4a6788e9","articleId":1475,"userId":2512,"content":"[@Gitforxuyang](/user/Gitforxuyang)   毕业后有一年半经验的话，可以把简历投给我们看看哦","createdAt":1514874553751},{"id":6833,"originId":"5a4c3821ebc575dc49b27090","articleId":1475,"userId":152,"content":"[@qianqianqq](/user/qianqianqq)  去年才毕业的。 因为出来的早，在当前公司做Node后端开发已经一年半了，前面还有一段半年左右的前端开发经历。 不知道符不符合。。。","createdAt":1514944545104},{"id":6834,"originId":"5a4c6a2d7b5fe91a4a67893b","articleId":1475,"userId":2512,"content":"那可能不是很合适哦~","createdAt":1514957357835},{"id":6835,"originId":"5a4cb580ebc575dc49b270cc","articleId":1475,"userId":152,"content":"[@qianqianqq](/user/qianqianqq) 哦哦，好吧。打扰了","createdAt":1514976640188},{"id":6836,"originId":"5a4d8d5799d207fa49f5cbbd","articleId":1475,"userId":2512,"content":"1","createdAt":1515031895154},{"id":6837,"originId":"5a4df3ab9ea8f8bc490e64b8","articleId":1475,"userId":2515,"content":"不错不错，我的GITHUB里也存了点职位，欢迎关注。。","createdAt":1515058091465},{"id":6838,"originId":"5a4f3b99a3692d014f4f1229","articleId":1475,"userId":2512,"content":"自己顶自己","createdAt":1515142041310},{"id":6839,"originId":"5a562f96afa0a121784a8afa","articleId":1475,"userId":2512,"content":"顶。。。","createdAt":1515597718383},{"id":6840,"originId":"5a5c07889d371d4a059eeaab","articleId":1475,"userId":1740,"content":"nodejs还在招吗","createdAt":1515980680617},{"id":6841,"originId":"5a5c11d19288dc8153287e20","articleId":1475,"userId":2516,"content":"还在招吗","createdAt":1515983313485},{"id":6842,"originId":"5a5cc8d4afa0a121784a8c1a","articleId":1475,"userId":2512,"content":"[@caiya](/user/caiya) 还在招哦，赶快把简历甩过来 hr@videopls.com","createdAt":1516030164426},{"id":6843,"originId":"5a5cc8e4a3692d014f4f14b2","articleId":1475,"userId":2512,"content":"[@1160007652](/user/1160007652) 还在招哦，赶快把简历甩过来 hr@videopls.com","createdAt":1516030180534},{"id":6844,"originId":"5a5d664f9d371d4a059eeaf2","articleId":1475,"userId":2512,"content":"前端技术栈 js+react\r\n后端nodejs\r\n后端java\r\n三岗持续招聘～欢迎大家投递","createdAt":1516070479291},{"id":6845,"originId":"5a5eaf7c9d371d4a059eeb69","articleId":1475,"userId":2512,"content":"再过二十几天就要过年了，大家再不投简历，我就要回村了","createdAt":1516154748649},{"id":6846,"originId":"5a600879ce45d440451460f1","articleId":1475,"userId":2512,"content":"每日一顶","createdAt":1516243065711},{"id":6847,"originId":"5a657ad8afa0a121784a8e4f","articleId":1475,"userId":2512,"content":"1","createdAt":1516600024519},{"id":6848,"originId":"5a65ebbcce45d44045146244","articleId":1475,"userId":1176,"content":"简历已投","createdAt":1516628924838},{"id":6849,"originId":"5a6826a89d371d4a059eed9d","articleId":1475,"userId":2469,"content":"已投，请查收","createdAt":1516775080792},{"id":6850,"originId":"5a6a8b3b9d371d4a059eee7c","articleId":1475,"userId":2512,"content":"职位还在开放","createdAt":1516931899571},{"id":6851,"originId":"5a6ac655afa0a121784a9016","articleId":1475,"userId":273,"content":"不错不错，可惜没在上海。\r\n\r\n[From Vue-Cnode](https://github.com/shinygang/Vue-cnodejs)","createdAt":1516947029348},{"id":6852,"originId":"5a6fd2729288dc8153288353","articleId":1475,"userId":2512,"content":"持续招募中","createdAt":1517277810829},{"id":6853,"originId":"5a6ffc889288dc8153288364","articleId":1475,"userId":1176,"content":"简历投了，好长时间没有回复哈","createdAt":1517288584626},{"id":6854,"originId":"5a719602afa0a121784a919b","articleId":1475,"userId":2512,"content":"[@WenNingZhang](/user/WenNingZhang)  邮箱账号是啥？我查一下","createdAt":1517393410415},{"id":6855,"originId":"5a727d7cafa0a121784a91b3","articleId":1475,"userId":2512,"content":"后端java ／nodejs还有坑位","createdAt":1517452668075},{"id":6856,"originId":"5a758a4ccb27e8121481a30e","articleId":1475,"userId":1176,"content":"[@qianqianqq](/user/qianqianqq) 我的账号是:18769382150@163.com","createdAt":1517652556086},{"id":6857,"originId":"5a77eb6ecb27e8121481a359","articleId":1475,"userId":2512,"content":"后端简历发hr@videopls.com","createdAt":1517808494897},{"id":6858,"originId":"5a77ec655321b5396004eb9a","articleId":1475,"userId":2512,"content":"[@WenNingZhang](/user/WenNingZhang)  你电话关机哦～","createdAt":1517808741358},{"id":6859,"originId":"5a77f9f4afa0a121784a92fe","articleId":1475,"userId":1176,"content":"[@qianqianqq](/user/qianqianqq) ，抱歉啦，不小心关机啦，现在开机啦。","createdAt":1517812212447},{"id":6860,"originId":"5a7a7d9a5321b5396004ec30","articleId":1475,"userId":2512,"content":"可以面试的日子不多了，走过路过不要错过","createdAt":1517976986753},{"id":6861,"originId":"5a8f8afc653c43b914684efe","articleId":1475,"userId":2512,"content":"简历不要停，3年以上java，2年以上java，c++，愿意转node js的通通需要","createdAt":1519356668912},{"id":6862,"originId":"5a90d7e9653c43b914684f65","articleId":1475,"userId":2512,"content":"后端还有headcount","createdAt":1519441897810},{"id":6863,"originId":"5a96170871327bb413bbff34","articleId":1475,"userId":2512,"content":"最近HR小姐姐简历量有点多，可能不能一一回复，如果通过简历初选会收到hr电话哦～","createdAt":1519785736766},{"id":6864,"originId":"5ae28e6eadea947348e75e79","articleId":1475,"userId":2512,"content":"Video++近日完成由阿里巴巴、云锋、Face++领投，国投、头头是道跟投的3.49亿融资，正在布局AI+文娱产业版图\r\n关注AI的小伙伴速速投来简历～～","createdAt":1524797038272},{"id":6865,"originId":"5ae9905202591040485baa04","articleId":1475,"userId":2133,"content":"前端还缺吗","createdAt":1525256274283},{"id":6866,"originId":"5aea7e270a36e5312d6ecc7f","articleId":1475,"userId":2512,"content":"[@buyixiaojiang](/user/buyixiaojiang) 招的哦，简历请投至hr@videopls.com","createdAt":1525317159259},{"id":6867,"originId":"5aea7f170a36e5312d6ecc81","articleId":1475,"userId":2512,"content":"nodejs后端开发，Java后端开发还有很多hc，感兴趣的赶紧投来简历吧～～","createdAt":1525317399337},{"id":6868,"originId":"5b3d7e2135342ab069061239","articleId":1475,"userId":2512,"content":"cnode的小伙伴们，目前前端/后端/nodejs后端火热招聘哦～感兴趣的给我们投简历！！！快来pick我们！！","createdAt":1530756641892},{"id":6869,"originId":"5b44620313ca2fe569fb926e","articleId":1475,"userId":2512,"content":"nodejs开发有hc哦～不要错过了，招聘面试流程贼快，飞一般的感受：）","createdAt":1531208195480},{"id":6870,"originId":"5b75186d7271129a2f32aa17","articleId":1475,"userId":2512,"content":"8月最热找招nodejs开发工程师啊啊啊啊啊，各位大大们，来简历！来简历！来简历！","createdAt":1534400621275},{"id":6871,"originId":"5b7bc415944cb8340c27e253","articleId":1475,"userId":2512,"content":"顶一顶！！！","createdAt":1534837781335},{"id":6872,"originId":"5b8014d1a210553a0cde2bf6","articleId":1475,"userId":2517,"content":"3年java中间件开发，一年node后端开发","createdAt":1535120593193},{"id":6873,"originId":"5b8518fafad9359e2e831285","articleId":1475,"userId":2512,"content":"[@clancytom](/user/clancytom) 来个简历呗~hr@videopls.com","createdAt":1535449338200},{"id":6874,"originId":"5bbc77c437a6965f59051ffd","articleId":1475,"userId":2512,"content":"nodejs延续8,9月的火热招聘，还有HC哦~~","createdAt":1539078084678},{"id":6875,"originId":"5c19f5e276c4964062a1b511","articleId":1475,"userId":2512,"content":"年底最后一波热招！！！！\r\nnodejs后端开发\r\njava后端开发\r\n等你来！","createdAt":1545205218836},{"id":6876,"originId":"5c77be633cc9c540b2641c93","articleId":1475,"userId":2512,"content":"春季第一波职位哦，nodejs后端的同学们，欢迎咨询~~","createdAt":1551351395414},{"id":6877,"originId":"5d3525d6b2b9222961dace7e","articleId":1475,"userId":2512,"content":"暑期热招Nodejs及Java工程师，来吧，造作吧！！！~~~\r\n","createdAt":1563764182065},{"id":6878,"originId":"5b1d05ae29e6e510415b29a9","articleId":1478,"userId":2093,"content":"******技术支持工程师 要求： 有 TechSupport 相关工作经验，英语流利，良好的沟通和分析能力。","createdAt":1528628654279},{"id":6879,"originId":"5b1e85ab57137f22415c4b46","articleId":1478,"userId":2093,"content":"坐标杭州, 了解一下？ ","createdAt":1528726955340},{"id":6880,"originId":"5b1fa93729e6e510415b2a3b","articleId":1478,"userId":2093,"content":"大牛小牛们看过来哦。","createdAt":1528801591468},{"id":6881,"originId":"5b20f9088a4f51e140d947e7","articleId":1478,"userId":2093,"content":"米多不加班，欢迎大家加入策策！","createdAt":1528887560222},{"id":6882,"originId":"5b224d5429e6e510415b2add","articleId":1478,"userId":2093,"content":"坐标杭州，走过路过，不要错过。","createdAt":1528974676171},{"id":6883,"originId":"5b2372918a4f51e140d94871","articleId":1478,"userId":2093,"content":"走过路过，不要错过。我会为你倾情内推的。请拉到底部点击链接查看职位详情。\r\n简历请砸到以下邮箱：（中英文简历，注明想要的职位，不明的也可以发邮件咨询我）\r\n343471829@qq.com","createdAt":1529049745608},{"id":6884,"originId":"5b274c238a4f51e140d948c9","articleId":1478,"userId":2093,"content":"开发、测试、用户体验设计师、翻译、技术支持、敏捷专家、顾问各个种类， 总有一款适合您。","createdAt":1529302051373},{"id":6885,"originId":"5b29f55f57137f22415c4d39","articleId":1478,"userId":2093,"content":"坐标【杭州】，了解一下啊？","createdAt":1529476447006},{"id":6886,"originId":"5b2b1e165cd02be640901618","articleId":1478,"userId":2093,"content":"坐标【杭州】，了解一下啊？","createdAt":1529552406656},{"id":6887,"originId":"5b32306c57137f22415c4fa5","articleId":1478,"userId":2093,"content":"坐标杭州哦","createdAt":1530015852361},{"id":6888,"originId":"5b374343ac8bc1e1241144f2","articleId":1478,"userId":2093,"content":"Tech Support 达人们， 请看过来，来信必复哦。","createdAt":1530348355496},{"id":6889,"originId":"5b39d6a757137f22415c5206","articleId":1478,"userId":2093,"content":"来信必复哦。小伙伴们，放马过来吧。","createdAt":1530517159005},{"id":6890,"originId":"5b3b2cb057137f22415c52ad","articleId":1478,"userId":2093,"content":"坐标杭州哦。薪资优渥。来信必复哦。","createdAt":1530604720671},{"id":6891,"originId":"5b3c54eca1308bf723aa3beb","articleId":1478,"userId":2093,"content":"**招聘职位： (Senior) Software Engineer - iOS**\r\n\r\n*职位描述:*\r\n·       Build robust, efficient, maintainable, high-performance software.\r\n·       Develop product features through their entire lifecycle: requirements analysis, design, implementation, unit testing, optimization, maintenance and enhancement.\r\n·       Work with Product Owners and UX engineers to analyze, evaluate and refine feature specifications.\r\n·       Work with other SEs in product team to deliver valuable features in fast iterations.\r\n·       Be responsible for certain part of MSTR product, to maintain its quality, integrity, efficiency, and reusability.\r\n·       Coordinate with quality engineers to share design information and provide testing suggestions.\r\n·       Create prototypes and experiment with new technologies to resolve technical risk and provide guidance for production development.\r\n·       Evaluate and assimilate new technologies and processes with MSTR development platform and process.\r\n·       Share knowledge and support fellow team members in an open, collaborative atmosphere\r\n\r\n*岗位要求：*\r\n·       Have 1 year + mobile app development experiences on iOS platform.\r\n·       Have a deep understanding of iOS system.\r\n·       Strong object-oriented design and development skills, familiar with popular design patterns.\r\n·       Fluency in Objective-C/Swift.\r\n·       Have experience on UIKit/Network/MultiThread/CoreData/Push Notification\r\n·       Bachelor’s Degree or above in Computer Science, Software Engineering, or related field.\r\n·       Strong analytical and problem-solving skills.\r\n·       Solid foundation in computer science fundamentals, including data structures, algorithms and time/space analysis.\r\n·       Good communication skills in English and the ability to work as part of a team\r\n\r\n\r\n**招聘职位： (Senior) Software Engineer - Java**\r\n\r\n*职位描述:*\r\nBuild Java-centric apps, RESTful APIs and microservices for MSTR platform and customer development. \r\nDesign for quality, robustness, and performance, with common principles, patterns, and best practices.\r\nAttend weekly/ad hoc learning and knowledge sharing programs.\r\nCreate prototypes and experiment latest technologies for next generation product backends.\r\nContinuously imporve software development, building, testing and deployment processes.\r\nWork with product owners, product managers, UX, and customer representatives to analyze and refine feature specifications.\r\nCooperate with UX & UED to match visual design intent.\r\nCollaborate with and support other engineers within the team and from other teams in China, US and Poland.\r\n\r\n*岗位要求：*\r\nBachelor’s Degree or higher, in Computer Science, Software Engineering or related field.\r\nProven working experience in Java and web programming.\r\nSolid understanding of object-oriented design principles and patterns. Functional programming knowledge is a plus.\r\nSolid understanding of web and internet architectures. REST and microservices practices are highly preferred.\r\nFamiliar with servlet technologies and at least one Java app containers, like Jetty, Tomcat, etc.\r\nFamiliar with at least one Java frameworks like Jersey, Spring, etc.\r\nWeb frontend skills are a big plus.\r\nGood communication skills in English and the ability to work as part of a team.\r\n\r\n**招聘职位：(Senior) Software Engineer - C++**\r\n\r\n*职位描述:*\r\n· Develop product features through their entire lifecycle: requirements analysis, design, implementation, unit testing, optimization, maintenance and enhancement.\r\n· Work with Product Owners to analyze, evaluate and refine feature specifications.\r\n· Work with other SEs in product team to deliver valuable features in fast iterations.\r\n· Be responsible for certain part of MSTR product, to maintain its quality, integrity, efficiency, and reusability.\r\n· Coordinate with quality engineers to share design information and provide testing suggestions.\r\n· Create prototypes and experiment with new technologies to resolve technical risk and provide guidance for production development.\r\n· Evaluate and assimilate new technologies and processes with MSTR development platform and process.\r\n· Share knowledge and support fellow team members in an open, collaborative atmosphere.\r\n\r\n*岗位要求：*\r\n· Bachelor’s Degree, Master’s Degree, or Ph.D. in Computer Science, Software Engineering, or related field.\r\n· Strong analytical and problem-solving skills.\r\n· Solid foundation in computer science fundamentals, including data structures, algorithms and time/space analysis.\r\n· Strong object-oriented design and development skills. Fluency in C++ is highly desirable (if you are Hadoop expert then C++ is not a must have).\r\n· Good communication skills in English and the ability to work as part of a team.\r\nOne or more of the following is a plus:\r\n·   Multithreaded/concurrent programming experience.\r\n·   UNIX/Linux platform experience.\r\n·   RDBMS, Hadoop, HBase, HDFS, MapReduce, MPP technologies\r\n\r\n**招聘职位：(Senior) Software Engineer - Web**\r\n\r\n*职位描述:*\r\n• Build sharp, responsive, client-centric web interfaces for data exploration and analysis with Java, HTML, CSS and JavaScript, and integrate data from various back-end services.\r\n• Work with Product Owners to analyze, evaluate and refine feature specifications.\r\n• Work with other SEs in product team to deliver valuable features in fast iterations.\r\n• Cooperate with UX & UED to match visual design intent.\r\n• Be responsible for certain part of MSTR product, to maintain its quality, integrity, efficiency, and reusability.\r\n• Coordinate with quality engineers to share design information and provide testing suggestions.\r\n• Create prototypes and experiment with new technologies to resolve technical risk and provide guidance for production development.\r\n• Evaluate and assimilate new technologies and processes with MSTR development platform and process.\r\n• Share knowledge and support fellow team members in an open, collaborative atmosphere.\r\n\r\n*岗位要求：*\r\n• Bachelor’s Degree, Master’s Degree, or Ph.D. in Computer Science, Software Engineering, or related field.\r\n• Strong analytical and problem-solving skills.\r\n• Proven working experience in web programming.\r\n• A solid understanding of how web applications work including security, cross-browser compatibility, session management, and best development practices\r\n• Adequate knowledge of JavaScript, HTML, HTML5, CSS, CSS3, Java.\r\n• Familiar with at least one JavaScript framework such as JQuery, ExtJS and at least one JavaWeb  framework such as Struts, Spring.\r\n• Good communication skills in English and the ability to work as part of a team.\r\n","createdAt":1530680556489},{"id":6892,"originId":"5b3dfd7735342ab06906128b","articleId":1478,"userId":2093,"content":"Support Engineer \r\nhttps://jobs.smartrecruiters.com/ni/MicroStrategy1/914027d3-a8a4-4cd8-9dec-4ac22ee3db7b-support-engineer?internal=true \r\n\r\nJob Duties (include but not limited to):\r\n· Provide complex and challenging support for MicroStrategy’s Business Intelligence product suite and its underlying technologies\r\n· Develop strong relationships with MicroStrategy customers and partners through daily interactions during customer project development and production system maintenance\r\n· Find creative and sophisticated solutions to problems reported while using MicroStrategy’s product suite through analytical talent and strong troubleshooting abilities\r\n· Work in a strong team environment to provide unparalleled support to customers in a wide variety of industries\r\n· Prioritize and communicate product defects and enhancements to development teams\r\n· Contribute to research and growth of the MicroStrategy Knowledge Base by creating customer-facing documentation of all technical solutions and product documentation addendums\r\n· Enhance personal and professional growth by participating in Internal Training Programs, which offer a five-week technical orientation program as well as weekly training seminars for all team members\r\n\r\nQualifications\r\nJob Qualifications:\r\n· Bachelor’s degree, preferably in a technical field (Engineering, Physics, Mathematics, Computer Science, etc.)\r\n· Strong technical and analytical skills\r\n· Excellent communication skills\r\n· Java, Visual Basic, HTML, XML/XSL, ASP, SQL technologies are a plus\r\n· Database (SQL, RDBMS) knowledge is a plus\r\n· Customer service experience is a plus\r\n","createdAt":1530789239058},{"id":6893,"originId":"5b3ed4cd35342ab0690612b2","articleId":1478,"userId":2093,"content":"来信必复哦。","createdAt":1530844365077},{"id":6894,"originId":"5b40c26be374eeab6929d4d5","articleId":1478,"userId":2093,"content":"(Senior) Software Engineer -- Web, Java, C++, iOS\r\nhttps://jobs.smartrecruiters.com/ni/MicroStrategy1/c0c8f26b-94e1-47c0-8a2b-73e9a5b1676f--senior-software-engineer-web-java-c-ios?internal=true\r\n","createdAt":1530970731402},{"id":6895,"originId":"5b4440b613ca2fe569fb9260","articleId":1478,"userId":2093,"content":"**招聘职位： Senior Software Engineer in Test – Mobile**\r\n\r\nhttps://jobs.smartrecruiters.com/ni/MicroStrategy1/4754c647-8739-4665-b744-e9bf360f8217?internal=true\r\n\r\n*职位描述:*\r\n•\tReview requirements and define acceptance criteria that will be used for design and testing of new features.\r\n•\tWork with engineering teams in China and the United States to ensure cross-product quality. Take ownership of test plan, test design and test execution.\r\n•\tDesign, implement and optimize test automation framework, tool and scripts.\r\n•\tParticipate in the design and/or review new functionality design for different MicroStrategy products.\r\n•\tResearch and identify flaws in our products before they are released to the public.\r\n•\tParticipate in the analysis and resolution of issues.\r\n•\tConduct technical research and experiment in specific testing area.\r\n\r\n*岗位要求：*\r\n•\tBachelor degree in Computer Science, Engineering or equivalent.\r\n•\t1~5 years’ experience in IT SW testing, integration and verification work.\r\n•\tKnowledge of testing principles and methodology, understand SW development process and how to guarantee SW quality.\r\n•\tKnowledge and experience with test automation tools like SOAP UI/Jmeter and programming like Java/Python/Perl/Ruby is one plus.\r\n•\tKnowledge of data analytics, database management is one plus.\r\n•\tProactive, self-motivated, target driven and innovative thinking are preferred.\r\n•\tAbility to pay close attention to details, and at the same time, to see the big picture.\r\n•\tStrong analytical skills, active to analyze complex problems and work out adequate solutions.\r\n•\tGood communication skills, strong verbal and written communication skills in English.\r\n•\tTeam oriented individual.\r\n","createdAt":1531199670081},{"id":6896,"originId":"5b4805b235342ab0690614de","articleId":1478,"userId":2093,"content":"来信必复。内推保证较高成功率。","createdAt":1531446706852},{"id":6897,"originId":"5b4c2eefaef62f1b0f9e0361","articleId":1478,"userId":2093,"content":"坐标杭州哦。薪资优渥。","createdAt":1531719407914},{"id":6898,"originId":"5b4d72d84b9cd4200f94205b","articleId":1478,"userId":2093,"content":"开发、测试、技术支持的小伙伴们，来吗？","createdAt":1531802328143},{"id":6899,"originId":"5b4ffaa0aef62f1b0f9e0448","articleId":1478,"userId":2093,"content":"开发、测试、技术支持的小伙伴们，来吗？","createdAt":1531968160110},{"id":6900,"originId":"5b5e7c7cb71aedfe4c1265a6","articleId":1478,"userId":2093,"content":"开发、测试、技术支持的小伙伴们，看过来，看过来。有问题也可以发信咨询。","createdAt":1532918908196},{"id":6901,"originId":"5b5e7ddeb71aedfe4c1265a7","articleId":1478,"userId":124,"content":"好单位啊","createdAt":1532919262253},{"id":6902,"originId":"5b6043ee792f59ae501bf69c","articleId":1478,"userId":2093,"content":"[@LuckyZhangWeiwei](/user/LuckyZhangWeiwei) 欢迎来哦。","createdAt":1533035502923},{"id":6903,"originId":"5b63dee6792f59ae501bf736","articleId":1478,"userId":2093,"content":"来吗？ ","createdAt":1533271782530},{"id":6904,"originId":"5b67e3e47271129a2f32a7c8","articleId":1478,"userId":2093,"content":"有兴趣不？ ","createdAt":1533535204833},{"id":6905,"originId":"5b82416ba210553a0cde2c1f","articleId":1478,"userId":2093,"content":"内推9月上月上旬结束。大家抓紧时间哦。已经有小伙伴进入面试环节咯。","createdAt":1535263083000},{"id":6906,"originId":"5b94aaaf37b3005a0b0e6ce7","articleId":1478,"userId":2093,"content":"虚位以待，长期有效哦。","createdAt":1536469679014},{"id":6907,"originId":"5b95cd25f1e8bc7579c783bb","articleId":1478,"userId":2093,"content":"技术支持的小伙伴们，看过来，看过来。有问题也可以发信咨询。","createdAt":1536544037827},{"id":6908,"originId":"5b9d0f768f5b0c1c59ea0e67","articleId":1478,"userId":2093,"content":"有效中。","createdAt":1537019766426},{"id":6909,"originId":"5b9e3bef7895e557599797f4","articleId":1478,"userId":2519,"content":"非常好","createdAt":1537096687517},{"id":6910,"originId":"5b9f8b2b15e4fd1923f4887c","articleId":1478,"userId":2093,"content":"[@sujimingf](/user/sujimingf) 感谢支持！欢迎加盟！","createdAt":1537182507554},{"id":6911,"originId":"5ba0c9848f5b0c1c59ea0f89","articleId":1478,"userId":2093,"content":"大家好。","createdAt":1537264004070},{"id":6912,"originId":"5bb5c07215e4fd1923f48c76","articleId":1478,"userId":2093,"content":"本帖子链接自带内推码的。可以直接上传简历。\r\n如果想了解更多情况，可以回复给我。","createdAt":1538637938713},{"id":6913,"originId":"5bb6d8ce37a6965f59051f10","articleId":1478,"userId":2093,"content":"无人欣赏。","createdAt":1538709710512},{"id":6914,"originId":"5bd284d7af3d3a315eab0319","articleId":1478,"userId":2093,"content":"24小时内反馈，简历符合标准立即开始内推流程，应聘者会收到系统确认邮件。1-2周内会收到面试通知。","createdAt":1540523223075},{"id":6915,"originId":"5bd29e88af3d3a315eab031f","articleId":1478,"userId":626,"content":"福利看着不错啊，想去","createdAt":1540529800852},{"id":6916,"originId":"5bd973bb04de603bdb4480f7","articleId":1478,"userId":2093,"content":"[@zhen-ke](/user/zhen-ke) 24小时内反馈，简历符合标准立即开始内推流程哦。","createdAt":1540977595068},{"id":6917,"originId":"5be0fb5e21d75b74609f453d","articleId":1478,"userId":2093,"content":"24小时内反馈，简历符合标准立即开始内推流程哦。","createdAt":1541471070731},{"id":6918,"originId":"5bfb9028d6104a4f803a18fc","articleId":1478,"userId":2093,"content":"新开职位 \r\n架构师/全栈开发 Software Architect- Full Stack\r\n资深数据库工程师 Senior Software Engineer in Test – Database(Hot)","createdAt":1543213096933},{"id":6919,"originId":"5c060d26d3b8ab334e8da6c6","articleId":1478,"userId":2093,"content":"![最热职位.PNG](//static.cnodejs.org/Fg6LUIe_XCuX_A3Y_G0rYpkP3IJa)","createdAt":1543900454491},{"id":6920,"originId":"5c09d75515a4d545e3f4c097","articleId":1478,"userId":2093,"content":"各位读者大人早！","createdAt":1544148821338},{"id":6921,"originId":"5c134d45f3d48d2397c11352","articleId":1478,"userId":2093,"content":"下午茶时间了咯","createdAt":1544768837991},{"id":6922,"originId":"5c1716c0f3d48d2397c11e18","articleId":1478,"userId":2093,"content":"读者大人早！","createdAt":1545017024833},{"id":6923,"originId":"5c1afa2f76c4964062a1b976","articleId":1478,"userId":2093,"content":"读者大人们早","createdAt":1545271855358},{"id":6924,"originId":"5c1c86b13898674067a76c87","articleId":1478,"userId":2093,"content":"一经上传内部系统，应聘者会收到系统确认邮件。","createdAt":1545373361484},{"id":6925,"originId":"5c203c4d3898674067a7773b","articleId":1478,"userId":2093,"content":"需要中英文简历，邮件及简历标题格式： 姓名_申请职位，并且附上3-4句用第三人称的英文自我介绍。","createdAt":1545616461247},{"id":6926,"originId":"5c2582403898674067a791f2","articleId":1478,"userId":2093,"content":"新出日语、韩语翻译职位哦，请大家踊跃报名。","createdAt":1545962048395},{"id":6927,"originId":"5c26e6bd3898674067a797d7","articleId":1478,"userId":2093,"content":"朋友们早！ ","createdAt":1546053309325},{"id":6928,"originId":"5c340a663898674067a7c5b3","articleId":1478,"userId":2093,"content":"虚位以待。","createdAt":1546914406350},{"id":6929,"originId":"5c345b685bf06c5e7e3f2acb","articleId":1478,"userId":753,"content":"前面中文后面英文时差还没有转过来请等等我缓一缓","createdAt":1546935144894},{"id":6930,"originId":"5c3c09133898674067a7ed13","articleId":1478,"userId":2093,"content":"[@moshuchao](/user/moshuchao) 睡一觉就好了。","createdAt":1547438355833},{"id":6931,"originId":"5c3c0918a4d44449266b0861","articleId":1478,"userId":2093,"content":"同志们，虚位以待中。","createdAt":1547438360019},{"id":6932,"originId":"5c416294a4d44449266b2506","articleId":1478,"userId":2093,"content":"快过年咯。加油呀。","createdAt":1547788948637},{"id":6933,"originId":"5c481e0b6955112b994380ac","articleId":1478,"userId":2093,"content":"快过年咯。要加油呀。","createdAt":1548230155661},{"id":6934,"originId":"5c612c0705cc322e7b137d5a","articleId":1478,"userId":2093,"content":"上班啦。啦啦啦啦。","createdAt":1549872135371},{"id":6935,"originId":"5ca20e8e6c1de62dce466ac8","articleId":1478,"userId":2093,"content":"C++, JAVA, Web开发内推\r\nhttps://jobs.smartrecruiters.com/ni/MicroStrategy1/8b2f2531-0c41-40e7-bc32-fc23df511e8d?internal=true\r\n\r\n【内推邮箱】 \r\n343471829@qq.com，中文简历即可，邮件及简历标题格式： 姓名_申请职位，并且附上3-4句用第三人称的英文自我介绍。 \r\n  \r\n  \r\n(Senior) Software Engineer\r\nHangzhou, China\r\nFull-time\r\n\r\nWeb SE Job Duties (include but not limited to):\r\n\r\nBuild sharp, responsive, client-centric web interfaces for data exploration and analysis with Java, HTML, CSS and JavaScript, and integrate data from various back-end services.\r\nCooperate with UX & UED to match visual design intent.\r\nWork with Product Owners to analyze, evaluate and refine feature specifications.\r\nWork with other SEs in product team to deliver valuable features in fast iterations.\r\nBe responsible for certain part of MSTR product, to maintain its quality, integrity, efficiency, and reusability.\r\nCoordinate with quality engineers to share design information and provide testing suggestions.\r\nCreate prototypes and experiment with new technologies to resolve technical risk and provide guidance for production development.\r\nEvaluate and assimilate new technologies and processes with MSTR development platform and process.\r\nShare knowledge and support fellow team members in an open, collaborative atmosphere.\r\n\r\nJava SE Job Duties (include but not limited to):\r\n\r\nBe responsible for certain part of MSTR product, to maintain its quality, integrity, efficiency, and reusability.\r\nCooperate with UX & UED to match visual design intent.\r\nWork with Product Owners to analyze, evaluate and refine feature specifications.\r\nWork with team mates (SE and QE) to deliver valuable features in fast iterations with high quality.\r\nCreate prototypes and experiment with new technologies to resolve technical risk and provide guidance for production development.\r\nShare knowledge and support fellow team members in an open, collaborative atmosphere.\r\n \r\n\r\nC++ SE Job Duties (include but not limited to):\r\n\r\nDevelop product features through their entire lifecycle: requirements analysis, design, implementation, unit testing, optimization, maintenance and enhancement.\r\nWork with Product Owners to analyze, evaluate and refine feature specifications.\r\nWork with other SEs in product team to deliver valuable features in fast iterations.\r\nBe responsible for certain part of MSTR product, to maintain its quality, integrity, efficiency, and reusability.\r\nCoordinate with quality engineers to share design information and provide testing suggestions.\r\nCreate prototypes and experiment with new technologies to resolve technical risk and provide guidance for production development.\r\nEvaluate and assimilate new technologies and processes with MSTR development platform and process.\r\nShare knowledge and support fellow team members in an open, collaborative atmosphere.\r\n \r\n\r\n\r\nQualifications：\r\n\r\n\r\nWEB SE Job Qualifications:\r\n\r\nBachelor’s Degree, Master’s Degree, or Ph.D. in Computer Science, Software Engineering, or related field.\r\nStrong analytical and problem-solving skills.\r\nProven working experience in web programming.\r\nA solid understanding of how web applications work including security, cross-browser compatibility, session management, and best development practices\r\nAdequate knowledge of at least one OOP language, i.e. java, c++, c#, etc.\r\nAdequate knowledge of JavaScript, HTML, HTML5, CSS, CSS3.\r\nFamiliar with at least one JavaScript framework such as ReactJS, AngularJS, ExtJS, Dojo, Backbone, etc.\r\nFamiliar with at least one Javascript Libararies like JQuery, lodash, etc.\r\nFamilari with web app bundlers like Webpack, grunt or gulp is a plus.\r\nFamiliar with NodeJS is a plus.\r\nFamiliar with one Java Web framework such as Struts, Spring is a plus.\r\nFamiliar with Mobile Web App development is a plus\r\nFamiliar with Desktop hybrid web app is a plus.\r\nGood communication skills in English and the ability to work as part of a team.\r\n\r\nJava SE Job Qualifications:\r\n\r\nBachelor’s Degree, Master’s Degree, or Ph.D. in Computer Science, Software Engineering, or related field.\r\nStrong analytical and problem-solving skills.\r\nProven working experience in web programming.\r\nSolid understanding of object-oriented design principles, code smells and refactoring.\r\nA solid understanding of how web applications work including security, cross-browser compatibility, session management, and best development practices\r\nAdequate knowledge of Java.\r\nFamiliar with Restful API design principles.\r\nFamiliar with Web Server Development and at least one framework, like Jersey, Spring, etc.\r\nFamiliar with at least one Java App Containers, like tomcat, jetty, glassfish, JBoss/WildFly, weblogic, etc.\r\nFamiliar with Java 8 is a plus.\r\nFamiliar with Web front end technologies (HTML, Javascript, CSS) is a plus.\r\nGood communication skills in English and the ability to work as part of a team.\r\n \r\n\r\nC++ SE Job Qualifications:\r\n\r\nBachelor’s Degree, Master’s Degree, or Ph.D. in Computer Science, Software Engineering, or related field.\r\nStrong analytical and problem-solving skills.\r\nSolid foundation in computer science fundamentals, including data structures, algorithms and time/space analysis.\r\nStrong object-oriented design and development skills. Fluency in C++ is highly desirable (if you are Hadoop expert then C++ is not a must have).\r\nGood communication skills in English and the ability to work as part of a team.\r\nOne or more of the following is a plus:\r\n\r\nMultithreaded/concurrent programming experience.\r\nUNIX/Linux platform experience.\r\nRDBMS, Hadoop, HBase, HDFS, MapReduce, MPP technolog","createdAt":1554124430856},{"id":6936,"originId":"5ca5754f31010b2dfbb431e1","articleId":1478,"userId":2093,"content":"注意实习内推工作地点在杭州哦，不是美国。\r\n面向2020毕业的童鞋，计算机, 软件工程或相关专业学士/硕士/博士学位\r\n\r\n2019暑期实习招聘流程\r\n简历投递截止日期：4月7日\r\n线上笔试：4月1日-4月9日\r\n面试：4月中旬\r\noffer：4月底\r\n入职：5月上旬","createdAt":1554347343552},{"id":6937,"originId":"5cb1462e207b2365936ec8d0","articleId":1478,"userId":2093,"content":"******2019/4/12 最新社招职位：******\r\nUrgent/hot position forCTC:\r\n•  Senior SoftwareEngineer(Java, C++, Android, iOS, open for all skillset)\r\n•  Cloud SystemsEngineer","createdAt":1555121710672},{"id":6938,"originId":"5cb1463d207b2365936ec8d3","articleId":1478,"userId":2093,"content":"【职位详情】\r\nSenior Software Engineer (Java, C++, Android, iOS, Web open for all skillset) \r\nHangzhou, China \r\nFull Time\r\n\r\nhttps://jobs.smartrecruiters.com/ni/MicroStrategy1/d018e5ae-09e5-4f95-a3d7-0f482a7f1ff8?internal=true \r\n  \r\n\r\nWeb SE Job Duties (include but not limited to):\r\n\r\nBuild sharp, responsive, client-centric web interfaces for data exploration and analysis with Java, HTML, CSS and JavaScript, and integrate data from various back-end services.\r\nCooperate with UX & UED to match visual design intent.\r\nWork with Product Owners to analyze, evaluate and refine feature specifications.\r\nWork with other SEs in product team to deliver valuable features in fast iterations.\r\nBe responsible for certain part of MSTR product, to maintain its quality, integrity, efficiency, and reusability.\r\nCoordinate with quality engineers to share design information and provide testing suggestions.\r\nCreate prototypes and experiment with new technologies to resolve technical risk and provide guidance for production development.\r\nEvaluate and assimilate new technologies and processes with MSTR development platform and process.\r\nShare knowledge and support fellow team members in an open, collaborative atmosphere.\r\n\r\nWEB SE Job Qualifications:\r\n\r\nBachelor’s Degree, Master’s Degree, or Ph.D. in Computer Science, Software Engineering, or related field.\r\nStrong analytical and problem-solving skills.\r\nProven working experience in web programming.\r\nA solid understanding of how web applications work including security, cross-browser compatibility, session management, and best development practices\r\nAdequate knowledge of at least one OOP language, i.e. java, c++, c#, etc.\r\nAdequate knowledge of JavaScript, HTML, HTML5, CSS, CSS3.\r\nFamiliar with at least one JavaScript framework such as ReactJS, AngularJS, ExtJS, Dojo, Backbone, etc.\r\nFamiliar with at least one Javascript Libararies like JQuery, lodash, etc.\r\nFamilari with web app bundlers like Webpack, grunt or gulp is a plus.\r\nFamiliar with NodeJS is a plus.\r\nFamiliar with one Java Web framework such as Struts, Spring is a plus.\r\nFamiliar with Mobile Web App development is a plus\r\nFamiliar with Desktop hybrid web app is a plus.\r\nGood communication skills in English and the ability to work as part of a team.\r\n\r\n\r\nJava SE Job Duties (include but not limited to):\r\n\r\nBe responsible for certain part of MSTR product, to maintain its quality, integrity, efficiency, and reusability.\r\nCooperate with UX & UED to match visual design intent.\r\nWork with Product Owners to analyze, evaluate and refine feature specifications.\r\nWork with team mates (SE and QE) to deliver valuable features in fast iterations with high quality.\r\nCreate prototypes and experiment with new technologies to resolve technical risk and provide guidance for production development.\r\nShare knowledge and support fellow team members in an open, collaborative atmosphere.\r\n\r\nJava SE Job Qualifications:\r\n\r\nBachelor’s Degree, Master’s Degree, or Ph.D. in Computer Science, Software Engineering, or related field.\r\nStrong analytical and problem-solving skills.\r\nProven working experience in web programming.\r\nSolid understanding of object-oriented design principles, code smells and refactoring.\r\nA solid understanding of how web applications work including security, cross-browser compatibility, session management, and best development practices\r\nAdequate knowledge of Java.\r\nFamiliar with Restful API design principles.\r\nFamiliar with Web Server Development and at least one framework, like Jersey, Spring, etc.\r\nFamiliar with at least one Java App Containers, like tomcat, jetty, glassfish, JBoss/WildFly, weblogic, etc.\r\nFamiliar with Java 8 is a plus.\r\nFamiliar with Web front end technologies (HTML, Javascript, CSS) is a plus.\r\nGood communication skills in English and the ability to work as part of a team.\r\n \r\n\r\nC++ SE Job Duties (include but not limited to):\r\n\r\nDevelop product features through their entire lifecycle: requirements analysis, design, implementation, unit testing, optimization, maintenance and enhancement.\r\nWork with Product Owners to analyze, evaluate and refine feature specifications.\r\nWork with other SEs in product team to deliver valuable features in fast iterations.\r\nBe responsible for certain part of MSTR product, to maintain its quality, integrity, efficiency, and reusability.\r\nCoordinate with quality engineers to share design information and provide testing suggestions.\r\nCreate prototypes and experiment with new technologies to resolve technical risk and provide guidance for production development.\r\nEvaluate and assimilate new technologies and processes with MSTR development platform and process.\r\nShare knowledge and support fellow team members in an open, collaborative atmosphere.\r\n\r\n\r\nC++ SE Job Qualifications:\r\n\r\nBachelor’s Degree, Master’s Degree, or Ph.D. in Computer Science, Software Engineering, or related field.\r\nStrong analytical and problem-solving skills.\r\nSolid foundation in computer science fundamentals, including data structures, algorithms and time/space analysis.\r\nStrong object-oriented design and development skills. Fluency in C++ is highly desirable (if you are Hadoop expert then C++ is not a must have).\r\nGood communication skills in English and the ability to work as part of a team.\r\nOne or more of the following is a plus:\r\n\r\nMultithreaded/concurrent programming experience.\r\nUNIX/Linux platform experience.\r\nRDBMS, Hadoop, HBase, HDFS, MapReduce, MPP technology.\r\n\r\n\r\niOS SE Job Qualifications： \r\n\r\n· Build robust, efficient, maintainable, high-performance software.\r\n· Develop product features through their entire lifecycle: requirements analysis, design, implementation, unit testing, optimization, maintenance and enhancement.\r\n· Work with Product Owners and UX engineers to analyze, evaluate and refine feature specifications.\r\n· Work with other SEs in product team to deliver valuable features in fast iterations.\r\n· Be responsible for certain part of MSTR product, to maintain its quality, integrity, efficiency, and reusability.\r\n· Coordinate with quality engineers to share design information and provide testing suggestions.\r\n· Create prototypes and experiment with new technologies to resolve technical risk and provide guidance for production development.\r\n· Evaluate and assimilate new technologies and processes with MSTR development platform and process.\r\n· Share knowledge and support fellow team members in an open, collaborative atmosphere\r\n\r\niOS SE Job Qualifications：\r\n· Have 1 year + mobile app development experiences on iOS platform.\r\n· Have a deep understanding of iOS system.\r\n· Strong object-oriented design and development skills, familiar with popular design patterns.\r\n· Fluency in Objective-C/Swift.\r\n· Have experience on UIKit/Network/MultiThread/CoreData/Push Notification\r\n· Bachelor’s Degree or above in Computer Science, Software Engineering, or related field.\r\n· Strong analytical and problem-solving skills.\r\n· Solid foundation in computer science fundamentals, including data structures, algorithms and time/space analysis.\r\n· Good communication skills in English and the ability to work as part of a team\r\n\r\nAndroid SE Job Qualifications/ Job Qualifications 省略\r\n","createdAt":1555121725265},{"id":6939,"originId":"5cb6b270a86ae80ce64b01c9","articleId":1478,"userId":2093,"content":"\r\n******2019/4/12 最新社招职位：******\r\nUrgent/hot position forCTC:\r\n•  Senior SoftwareEngineer(Java, C++, Android, iOS, open for all skillset)\r\n•  Cloud SystemsEngineer","createdAt":1555477104996},{"id":6940,"originId":"5cb95ae7a86ae80ce64b10de","articleId":1478,"userId":2093,"content":"2019/4/12 最新社招职位：\r\nUrgent/hot position forCTC:\r\n•  Senior SoftwareEngineer(Java, C++, Android, iOS, open for all skillset)\r\n•  Cloud SystemsEngineer\r\n\r\n有效","createdAt":1555651303941},{"id":6941,"originId":"5cbe8255a86ae80ce64b2411","articleId":1478,"userId":2093,"content":"虚位以待哦。","createdAt":1555989077389},{"id":6942,"originId":"5ccea9d95a5bae6e078130c6","articleId":1478,"userId":2093,"content":"965 系列。。。","createdAt":1557047769720},{"id":6943,"originId":"5ce4bbe6e57aac76fed2cfcc","articleId":1478,"userId":2093,"content":"上来看看。","createdAt":1558494182176},{"id":6944,"originId":"5ce9fdf14036f24194cf69cd","articleId":1478,"userId":2377,"content":"[@BIbestbest](/user/BIbestbest) 职位还有效么？","createdAt":1558838769764},{"id":6945,"originId":"5cef51c04036f24194cf7d60","articleId":1478,"userId":2093,"content":"[@NealST](/user/NealST) 这两个有效的。\r\nUrgent/hot position forCTC:\r\n•  Senior SoftwareEngineer(Java, C++, Android, iOS, open for all skillset)\r\n•  Cloud SystemsEngineer","createdAt":1559187904980},{"id":6946,"originId":"5d23fd1a71951f750ccb99b2","articleId":1478,"userId":2093,"content":"社招职位更新于2019 7/8\r\n\r\nDatabase Engineer 3年以上数据库管理配置维护相关经验，至少一年Python/Shell/ PowerShell编程经验\r\nhttps://jobs.smartrecruiters.com/ni/MicroStrategy1/96d5f55d-1f3f-4c12-b19e-804c5ee9d3ea?internal=true\r\n\r\nCloud Systems Engineer 2年或以上DevOps 或系统工程师经验。\r\nhttps://jobs.smartrecruiters.com/ni/MicroStrategy1/613a0cd8-af98-43fe-9f47-042082c169e0?internal=true\r\n\r\nSupport Engineer 本科或以上，理工科专业为佳，较强的技术和分析技能，良好的中英文沟通。1年以上技术支持经验。\r\nhttps://jobs.smartrecruiters.com/ni/MicroStrategy1/eb9e9a6f-e35f-4f37-82b9-28b80729a7fa?internal=true","createdAt":1562639642100},{"id":6947,"originId":"5d23fd33ad75d374b58bd61d","articleId":1478,"userId":2093,"content":"【内推邮箱】\r\n中文简历，标题注明职位。\r\n343471829@qq.com\r\n\r\n【职位详情】\r\n招聘职位： Support Engineer\r\n工作地点：杭州\r\n\r\n本科或以上，理工科专业为佳\r\n较强的技术和分析技能，良好的中英文沟通。\r\n有技术支持经验优先。\r\nhttps://jobs.smartrecruiters.com/ni/MicroStrategy1/eb9e9a6f-e35f-4f37-82b9-28b80729a7fa?internal=true\r\n\r\n职位详情： \r\n•\tProvide complex and challenging support for MicroStrategy’s Business Intelligence product suite and its underlying technologies\r\n•\tDevelop strong relationships with MicroStrategy customers and partners through daily interactions during customer project development and production system maintenance\r\n•\tFind creative and sophisticated solutions to problems reported while using MicroStrategy’s product suite through analytical talent and strong troubleshooting abilities.\r\n•\tWork in a strong team environment to provide unparalleled support to customers in a wide variety of industries\r\n•\tPrioritize and communicate product defects and enhancements to development teams\r\n•\tContribute to research and growth of the MicroStrategy Knowledge Base by creating customer-facing documentation of all technical solutions and product documentation addendums\r\n\r\n\r\n任职资格:\r\n•\tBachelor’s degree or above, preferably in a technical field (Engineering, Physics, Mathematics, Computer Science)\r\n•\tStrong technical and analytical skills\r\n•\tExcellent communication skills\r\n•\tJava, Visual Basic, HTML, XML/XSL, ASP, SQL technologies are a plus\r\n•\tDatabase (SQL, RDBMS) knowledge is a plus\r\n•\tCustomer service experience is a plus\r\n","createdAt":1562639667023},{"id":6948,"originId":"5d2595dffa8ef0094e063c21","articleId":1478,"userId":2093,"content":"职位热招中，欢迎咨询。 ","createdAt":1562744287137},{"id":6949,"originId":"5d26d8508a8bf909209cd74e","articleId":1478,"userId":2093,"content":"感谢发布，职位有效。","createdAt":1562826832861},{"id":6950,"originId":"5d2be5d5fa8ef0094e064da3","articleId":1478,"userId":2093,"content":"朋友们早，虚位以待。","createdAt":1563157973334},{"id":6951,"originId":"5d2d898451637b492bb0f2ec","articleId":1478,"userId":2093,"content":"有效，虚位以待","createdAt":1563265412745},{"id":6952,"originId":"5d08b14f95fcc914aa26a4c7","articleId":1479,"userId":1138,"content":"捞一捞 增加曝光机会","createdAt":1560850767390},{"id":6953,"originId":"5d090ba795fcc914aa26a59b","articleId":1479,"userId":501,"content":"很想做nodejs 后端","createdAt":1560873895072},{"id":6954,"originId":"5d11e1decdb1f967c1575beb","articleId":1479,"userId":1138,"content":"[@cllgeek](/user/cllgeek) 那就来啊","createdAt":1561453022061},{"id":6955,"originId":"5d13074034bca667bc6e2e67","articleId":1479,"userId":2183,"content":"英语GG","createdAt":1561528128734},{"id":6956,"originId":"5d132444cdb1f967c1576058","articleId":1479,"userId":1947,"content":"可以远程不","createdAt":1561535556047},{"id":6957,"originId":"5d145ef834bca667bc6e332b","articleId":1479,"userId":1138,"content":"[@oyosc](/user/oyosc) 暂时目前没有远程的岗位哦","createdAt":1561616120833},{"id":6958,"originId":"5d145f0934bca667bc6e3330","articleId":1479,"userId":1138,"content":"[@LoneyHeart](/user/LoneyHeart) 英语也不是要求很高了","createdAt":1561616137462},{"id":6959,"originId":"5d146c6634bca667bc6e33d8","articleId":1479,"userId":2183,"content":"[@wangxihua916](/user/wangxihua916) 面试是英文还是中文呢？","createdAt":1561619558708},{"id":6960,"originId":"5d14a532cdb1f967c1576618","articleId":1479,"userId":1138,"content":"[@LoneyHeart](/user/LoneyHeart) 当然是中文啊 ","createdAt":1561634098133},{"id":6961,"originId":"5d14b71034bca667bc6e35a7","articleId":1479,"userId":2183,"content":"[@wangxihua916](/user/wangxihua916) 简历已发送，请查收，来自163邮箱","createdAt":1561638672245},{"id":6962,"originId":"5d157834cdb1f967c1576834","articleId":1479,"userId":1138,"content":"[@LoneyHeart](/user/LoneyHeart) 收到了 正在跟团队沟通中。","createdAt":1561688116058},{"id":6963,"originId":"5d2d1e0451637b492bb0f02c","articleId":1479,"userId":1138,"content":"[@andyhu](/user/andyhu) 您好 我们暂时不考虑远程办公，非常抱歉。","createdAt":1563237892064},{"id":6964,"originId":"5c6e425c33b0b629ac843ba7","articleId":1480,"userId":2520,"content":"A股都起来了，美股也反弹了，大家还不快加入我司炒炒股？","createdAt":1550729820168},{"id":6965,"originId":"5c76014eab86b86ddf6b3353","articleId":1480,"userId":2520,"content":"大家抓紧时间了，机会不多，趁早上车，买房买车不是梦","createdAt":1551237454304},{"id":6966,"originId":"5c7fdba890c14711cc8cafdd","articleId":1480,"userId":2520,"content":"这是一份能让人越来越聪明的工作！！","createdAt":1551883176314},{"id":6967,"originId":"5c8f3c667ce0df37324293b5","articleId":1480,"userId":2520,"content":"只剩下最后一个名额了，大家抓紧啦:)","createdAt":1552890982274},{"id":6968,"originId":"5cc1bb43a86ae80ce64b4132","articleId":1480,"userId":2520,"content":"继续加油，继续顶","createdAt":1556200259354},{"id":6969,"originId":"5d2a52befa8ef0094e064a42","articleId":1480,"userId":110,"content":"现在还招人吗 ？以前一直用 x-ray，很方便但是小 bug 很多，最近正好想要开发一套类似的系统，有一定积累，对爬虫和反爬都有一定研究。","createdAt":1563054782151},{"id":6970,"originId":"5d2939b68a8bf909209cdf5c","articleId":1481,"userId":1947,"content":"支持远程吗？","createdAt":1562982838610},{"id":6971,"originId":"5d2a47c1fa8ef0094e064a23","articleId":1481,"userId":110,"content":"同问 是否支持远程 ","createdAt":1563051969157},{"id":6972,"originId":"590197aa523b9d0956dadac2","articleId":1482,"userId":2522,"content":"顶~","createdAt":1493276586648},{"id":6973,"originId":"590228a69116585a56e20ac2","articleId":1482,"userId":2523,"content":"为什么是在武汉😂，只能干看着\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1493313702836},{"id":6974,"originId":"5902a683bbaf2f3f569be39b","articleId":1482,"userId":2524,"content":"看着不错，但是要求有点高，武汉研究node和react的确实有，但是不多","createdAt":1493345923699},{"id":6975,"originId":"590822ed782dbc4b183ecf89","articleId":1482,"userId":2522,"content":"[@wp56610](/user/wp56610) 哈哈，欢迎来武汉呀~","createdAt":1493705453020},{"id":6976,"originId":"59082329782dbc4b183ecf8b","articleId":1482,"userId":2522,"content":"[@youlong723687543](/user/youlong723687543) 创业团队所以对成员要求略略高一丢丢，不过我们也欢迎有基础的应届生来一起学习~","createdAt":1493705513739},{"id":6977,"originId":"59783370e72077ff35fbbd64","articleId":1482,"userId":506,"content":"[@zyuu](/user/zyuu) 还在招人么？","createdAt":1501049712462},{"id":6978,"originId":"59785109e72077ff35fbbd70","articleId":1482,"userId":2522,"content":"[@frank320](/user/frank320)  你好，现在正招人期间，请投简历。","createdAt":1501057289744},{"id":6979,"originId":"598594800f9d52591a8877e5","articleId":1482,"userId":2525,"content":"aaaaaaaaaaa","createdAt":1501926528483},{"id":6980,"originId":"598fff32ee602e88524b41d3","articleId":1482,"userId":2526,"content":"暂时还不能跳槽，公司项目还需要我，哈哈","createdAt":1502609202400},{"id":6981,"originId":"59910ea2e104026c52101888","articleId":1482,"userId":2522,"content":"[@fkdswfwqfet](/user/fkdswfwqfet) 被需要就是优势，哈哈","createdAt":1502678690843},{"id":6982,"originId":"599bda8a4e3c4e5a7021b314","articleId":1482,"userId":506,"content":"[@zyuu](/user/zyuu)  待遇貌似诱惑力不够啊","createdAt":1503386250424},{"id":6983,"originId":"59a3d948d97b7e23082427f6","articleId":1482,"userId":2527,"content":"大武汉的招聘，感觉很有活力的样子，不知道收不收18应届生呢？","createdAt":1503910216353},{"id":6984,"originId":"59bf6934e7d9a031127eaca4","articleId":1482,"userId":2522,"content":"[@cuihu](/user/cuihu)  你好， 优秀的工程师不分应届与往届， 请投简历到邮箱，我们不日会与你联系。","createdAt":1505716532676},{"id":6985,"originId":"59bf6f4eb53b601512be41da","articleId":1482,"userId":2527,"content":"[@zyuu](/user/zyuu) 拉勾上有和你们联系，不过我可能不够优秀吧OAO","createdAt":1505718094980},{"id":6986,"originId":"59c0814ad7cbefc5119644cb","articleId":1482,"userId":2522,"content":"[@cuihu](/user/cuihu) 是么，你是哪一位：））），创业团队不大所以对成员要求略高一丢丢，欢迎应届生在掌握了一定相关技术经验后来和我们一起学习~","createdAt":1505788234887},{"id":6987,"originId":"59c60e0bd7cbefc51196465b","articleId":1482,"userId":2528,"content":"[@z](/user/z)<p style=\"text-align:right\"><a href=\"https://github.com/lumia2046/cnode\"> — — 来自lumia2046-react-cnode</a></p>","createdAt":1506151947874},{"id":6988,"originId":"59c8a98b242810b428f50406","articleId":1482,"userId":2522,"content":"[@ckinmind](/user/ckinmind) 欢迎给我们投递简历哦~~","createdAt":1506322827183},{"id":6989,"originId":"59dc50f7f7cc61fb67daaf08","articleId":1482,"userId":2529,"content":"我在武汉，看下我简历","createdAt":1507610871950},{"id":6990,"originId":"59e4477bbcfcc03162f2fe8e","articleId":1482,"userId":2522,"content":"[@SunqiSteven](/user/SunqiSteven) 抱歉，才回去找了下您的简历。您的简历过于简单了呢，如果对我们感兴趣，请尽量晚上丰富自己的简历哦~","createdAt":1508132731499},{"id":6991,"originId":"59e4c5f920a1a3647d72aca5","articleId":1482,"userId":2530,"content":"我就在沙湖对面，笑cry。\r\n这两天在学react，准备学完之后从前到后撸两个能跑起来的项目就出来找工作。\r\n基础不扎实但是能动手，这是我不久前写的几行代码 https://github.com/Benny233/wxone\r\n这达到了你上面说的**一定相关技术经验**的要求吗？\r\n可以的话，能给我点建议吗？O(∩_∩)O谢谢","createdAt":1508165113311},{"id":6992,"originId":"59e57012eab6a653687401f4","articleId":1482,"userId":2522,"content":"[@Benny233](/user/Benny233) 呃，需要建议的话最好发送您的简历到我们邮箱，有具体信息了才好提供有针对性的建议哦~~我们的项目有一些难度，如果想长远发展基础最好扎实一点哦~","createdAt":1508208658793},{"id":6993,"originId":"59e570b6eab6a653687401f6","articleId":1482,"userId":2522,"content":"[@frank320](/user/frank320) 您指的是薪资还是福利呢，超出我们这个薪资范围的，应该是比较牛的人物了，这样的需求职位不多，待遇可以单聊的哦","createdAt":1508208822329},{"id":6994,"originId":"59e57b8461932717683d2403","articleId":1482,"userId":2531,"content":"[@zyuu](/user/zyuu) 楼主大大， 请问招实习吗， 已经有过实习经历，人在武汉，可以实习6个月+。","createdAt":1508211588207},{"id":6995,"originId":"59f6aca1323d3667540dada7","articleId":1482,"userId":2522,"content":"[@chenws1999](/user/chenws1999) 实习问题要看本人具体情况，可发送简历到我们邮箱看看~","createdAt":1509338273111},{"id":6996,"originId":"5a795a1b8d6e16e56bb805c6","articleId":1482,"userId":2522,"content":"欢迎大武汉的技术牛人加入我们公司哦！","createdAt":1517902363928},{"id":6997,"originId":"5a90ba108d6e16e56bb80872","articleId":1482,"userId":1971,"content":"可以远程工作吗？","createdAt":1519434256117},{"id":6998,"originId":"5ab1cb0be7b166bb7b9ecc9b","articleId":1482,"userId":2522,"content":"[@medmin](/user/medmin) 牛人可以考虑哦，有意向的话发份简历把：）","createdAt":1521601291636},{"id":6999,"originId":"5ab1dd6719b2e3db18959fd9","articleId":1482,"userId":2524,"content":"需要团队吗？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1521605991149},{"id":7000,"originId":"5ae2c977adea947348e75e92","articleId":1482,"userId":2522,"content":"[@youlong723687543](/user/youlong723687543) 几个人？可以发邮件私聊下","createdAt":1524812151796},{"id":7001,"originId":"5af23f6802591040485bac1c","articleId":1482,"userId":2532,"content":"考不考虑实习生呢\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1525825384352},{"id":7002,"originId":"5d280875fa8ef0094e064515","articleId":1482,"userId":2522,"content":"时隔一年，公司薪资福利不断改善，目前这个岗位又开放招聘了哦，欢迎大家投简历！","createdAt":1562904693343},{"id":7003,"originId":"568356eaba9915191f3d8ad8","articleId":1483,"userId":2522,"content":"good！","createdAt":1451448042847},{"id":7004,"originId":"568357a3b9de25e81e01c20f","articleId":1483,"userId":2533,"content":"大武汉居然还有用node.js的！","createdAt":1451448227569},{"id":7005,"originId":"568358e859ec59521f2f1735","articleId":1483,"userId":2522,"content":"[@lionrock](/user/lionrock)  yes!","createdAt":1451448552636},{"id":7006,"originId":"56837beaba9915191f3d8aec","articleId":1483,"userId":2534,"content":"[@zyuu](/user/zyuu) 湖北人帮顶了。","createdAt":1451457514999},{"id":7007,"originId":"568380b559ec59521f2f173e","articleId":1483,"userId":2522,"content":"[@ipengyo](/user/ipengyo)  万分感谢啊！！！🍶","createdAt":1451458741426},{"id":7008,"originId":"568386c9b9de25e81e01c229","articleId":1483,"userId":1713,"content":"全栈5-12K？ 武汉应该不至于这么低吧？","createdAt":1451460297895},{"id":7009,"originId":"56838d04952147b71ea371c4","articleId":1483,"userId":2533,"content":"[@imhered](/user/imhered) 武汉这边一般是多少？","createdAt":1451461892100},{"id":7010,"originId":"56838d91b9de25e81e01c22f","articleId":1483,"userId":1713,"content":"[@lionrock](/user/lionrock) 不知道。 我没在武汉。 但是认识的朋友.NET在武汉2年经验都有6,7K 了啊。","createdAt":1451462033754},{"id":7011,"originId":"56839095952147b71ea371cd","articleId":1483,"userId":2533,"content":"[@imhered](/user/imhered) Node.js的起薪应该比.NET要高","createdAt":1451462805240},{"id":7012,"originId":"5683935c59ec59521f2f1746","articleId":1483,"userId":375,"content":"全栈还这么低。。。。。","createdAt":1451463516964},{"id":7013,"originId":"5683c7e5ba9915191f3d8b06","articleId":1483,"userId":2522,"content":"第一次发帖，让大牛们笑话了，见谅.\r\n5k-12k的全栈工程师，到是显得公司小气了；\r\n\r\n可能现在怎么说，都矫情了。但是，我可能还是要矫情下。\r\n\r\n楼上下的价码或许会更合理，但我们不仅欢迎大牛，也一直愿意和应届毕业生，即便没有过全栈开发的工作经验的全栈工程师组建我们的团队，在这里，我们可以一同学习，一同发展。\r\n** 再不济，三年之后的应届毕业生，也一定值楼上下其他公司的价码。**\r\n\r\n但，如果是大牛，这个价格是我打脸了。在这里真诚愿意和大牛们一同工作，创造价值，简历可以附上价码，价格我们好谈。\r\n\r\n昨天老罗的发布会说了一句话，“很多手机公司来锤子挖人，出了三倍价钱结果没挖走，我知道以后心里又是感激又是惭愧。”\r\n\r\n老罗叹了口气，当时我心里也很难受。\r\n\r\n钱的事是大事，月薪，年薪，住房，交通，以及股票期权这些“似乎虚无缥缈”的，只要能给，我们也绝不含糊。请相信我们是真的想做事的，或者说“有情怀”的公司，最后真诚欢迎大家联系。","createdAt":1451476965994},{"id":7014,"originId":"5684990a952147b71ea371fe","articleId":1483,"userId":2535,"content":"支持一下老家的node.js，不知道对我这样的初级noder有兴趣没","createdAt":1451530506735},{"id":7015,"originId":"56849ecd952147b71ea37201","articleId":1483,"userId":2522,"content":"[@Kevalin](/user/Kevalin)  必须有！请发简历 ：）","createdAt":1451531981994},{"id":7016,"originId":"5684b79d114ed9ae40cb92ac","articleId":1483,"userId":2536,"content":"科大菜鸡顶","createdAt":1451538333424},{"id":7017,"originId":"5684e941c2289f51658f075a","articleId":1483,"userId":2537,"content":"我可以去试试不 [@_](/user/_)@","createdAt":1451551041450},{"id":7018,"originId":"568936c3c301558265041cda","articleId":1483,"userId":2522,"content":"[@doramart](/user/doramart) 当然，请发简历！","createdAt":1451833027968},{"id":7019,"originId":"5689cc7dc301558265041ce2","articleId":1483,"userId":160,"content":"武汉的，必须顶起！","createdAt":1451871357652},{"id":7020,"originId":"5689d7a7c2289f51658f07a3","articleId":1483,"userId":905,"content":"武汉的，必须顶起！","createdAt":1451874215367},{"id":7021,"originId":"5689dc9dc301558265041ce8","articleId":1483,"userId":530,"content":"我感觉如果不是弹性工作制 我这种10晚睡晚起的根本无法正常上班（看看后端语言只有ruby不会，看来我当初的选型还是正确啊）","createdAt":1451875484999},{"id":7022,"originId":"56cfc08aa1658d484d7a36a8","articleId":1483,"userId":2533,"content":"武汉的，必须顶起！","createdAt":1456455818666},{"id":7023,"originId":"56cfc12889ec189c4d4be1bb","articleId":1483,"userId":2522,"content":"感谢大家捧场，我们一率有简历必回复  (́◉◞౪◟◉‵) ","createdAt":1456455976862},{"id":7024,"originId":"56cfc19389ec189c4d4be1bc","articleId":1483,"userId":217,"content":"[@zyuu](/user/zyuu) 在武汉这个价也不低了，我也是在武汉的noder，哈哈，帮顶","createdAt":1456456083609},{"id":7025,"originId":"56cfc20cb00511804de6c155","articleId":1483,"userId":2522,"content":"[@luoyjx](/user/luoyjx)      <(‵▽′)>   哈哈","createdAt":1456456204745},{"id":7026,"originId":"56d1183796c5cd5e665844e1","articleId":1483,"userId":1951,"content":"招聘结束没\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1456543799486},{"id":7027,"originId":"56d130b896c5cd5e665844e9","articleId":1483,"userId":2522,"content":"[@SilenceDN](/user/SilenceDN)   正在！","createdAt":1456550072980},{"id":7028,"originId":"56f6321d87688ffc6e356e7f","articleId":1483,"userId":2522,"content":"大家周末愉快～咱们持续招新噢！ ","createdAt":1458975261401},{"id":7029,"originId":"56f67663a54df2e06e6435f3","articleId":1483,"userId":205,"content":"http://zyuu.xyz/2015/12/24/career/ 牛。","createdAt":1458992739494},{"id":7030,"originId":"56f8e78632c4bdf5313572d2","articleId":1483,"userId":125,"content":"<div data-reactid=\".0.1.0.5.2.0.0\"><p data-reactid=\".0.1.0.5.2.0.0.$0\"><span data-reactid=\".0.1.0.5.2.0.0.$0.0\">支持</span></p></div>","createdAt":1459152774738},{"id":7031,"originId":"56fb66088a612c5559d16a1d","articleId":1483,"userId":1951,"content":"我的邮件没收到吗😭\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1459316232515},{"id":7032,"originId":"56fb94c393a6967159553a1d","articleId":1483,"userId":2522,"content":"[@SilenceDN](/user/SilenceDN)  收到！！！","createdAt":1459328195685},{"id":7033,"originId":"573d6c09542374db1db0a59a","articleId":1483,"userId":2522,"content":"谢谢支持！","createdAt":1463643145079},{"id":7034,"originId":"573d70a5fcf698421d203679","articleId":1483,"userId":2538,"content":"顶大武汉","createdAt":1463644325815},{"id":7035,"originId":"573d7ff6f610cbba1dc452e3","articleId":1483,"userId":2522,"content":"[@410137754](/user/410137754)   多谢支持！","createdAt":1463648246011},{"id":7036,"originId":"573d8c6df610cbba1dc452ed","articleId":1483,"userId":2539,"content":"+1","createdAt":1463651437420},{"id":7037,"originId":"573dd057f610cbba1dc4530a","articleId":1483,"userId":424,"content":"草多花少","createdAt":1463668823491},{"id":7038,"originId":"573dd34cfcf698421d2036b8","articleId":1483,"userId":2522,"content":"[@leapon](/user/leapon)  努力改善中","createdAt":1463669580295},{"id":7039,"originId":"5742b186232f66c870ff7350","articleId":1483,"userId":2540,"content":"要的是全栈工程师，真正的全栈不工作几年，也敢说全栈。这工资也就能找好一点的应届毕业生。","createdAt":1463988614643},{"id":7040,"originId":"57641d5a197e9a676dff46b6","articleId":1483,"userId":2423,"content":"不知道暑期实习收不收，目前大三，nodejs很初级\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1466178906897},{"id":7041,"originId":"576b870fa6366c3107583d2b","articleId":1483,"userId":2522,"content":"[@JiaWeiBi](/user/JiaWeiBi)  你好，暑期实习可以考虑。 请投简历～ ","createdAt":1466664719232},{"id":7042,"originId":"576b879749f54a69076f0358","articleId":1483,"userId":1308,"content":"没有妹子镇楼","createdAt":1466664855951},{"id":7043,"originId":"582d593c6efc292b79ff0a0c","articleId":1483,"userId":2522,"content":"[@lionrock](/user/lionrock) **哈哈**","createdAt":1479366972396},{"id":7044,"originId":"583187aa6efc292b79ff0b52","articleId":1483,"userId":500,"content":"难道在逼我回大武汉...<br/><br/><a class=\"form\" href=\"https://github.com/soulcm/react-cnode-mobile\">vue-cnode-mobile</a>","createdAt":1479641002687},{"id":7045,"originId":"585b974932507de963e27cd4","articleId":1483,"userId":1565,"content":"@年后还招人嘛？","createdAt":1482397513275},{"id":7046,"originId":"589bd3458c475cf5794dac86","articleId":1483,"userId":2522,"content":"[@duzitengg](/user/duzitengg)  你好，年后当然招人了！ 请投简历。","createdAt":1486607173720},{"id":7047,"originId":"59004ee331e8c2bb1c3dce6b","articleId":1483,"userId":2522,"content":"顶","createdAt":1493192419900},{"id":7048,"originId":"59006225bbaf2f3f569be2e5","articleId":1483,"userId":2541,"content":"[@zyuu](/user/zyuu) 暑期实习招吗，目前很初级哈哈","createdAt":1493197349734},{"id":7049,"originId":"590065aa523b9d0956dada66","articleId":1483,"userId":2522,"content":"[@starhiking](/user/starhiking) 招~简历快来~","createdAt":1493198250852},{"id":7050,"originId":"59019790523b9d0956dadac1","articleId":1483,"userId":2522,"content":"顶~","createdAt":1493276560074},{"id":7051,"originId":"59087fac782dbc4b183ecfc2","articleId":1483,"userId":1774,"content":"我想知道错别字是什么","createdAt":1493729196787},{"id":7052,"originId":"5d2805d68a8bf909209cdb75","articleId":1483,"userId":2522,"content":"时隔两年，我们改善了薪资福利，目前这个岗位又开放招聘了哦，欢迎大家投简历！","createdAt":1562904022934},{"id":7053,"originId":"5d28013afa8ef0094e0644fe","articleId":1484,"userId":1138,"content":"捞一捞呗","createdAt":1562902842069},{"id":7054,"originId":"5d10ebc8cdb1f967c15757ed","articleId":1487,"userId":2544,"content":"天猫超市前端在性能优化，极致体验方面有很多沉淀，欢迎各位前来勾搭","createdAt":1561390024329},{"id":7055,"originId":"5d1d721b2beced2efd51f5e3","articleId":1487,"userId":1390,"content":"想问下，毕业一年可以投吗","createdAt":1562210843517},{"id":7056,"originId":"5d23f27d71951f750ccb9946","articleId":1487,"userId":2181,"content":"[@linevers1926](/user/linevers1926) 兄弟认识下，最近对前段很是感兴趣，技术交流，方便留个联系方式吗？","createdAt":1562636925677},{"id":7057,"originId":"5c257c293898674067a791b2","articleId":1489,"userId":2546,"content":"自顶一下，应届但有项目经验的也欢迎投递简历~","createdAt":1545960489239},{"id":7058,"originId":"5c60d89de6aaad2ea76df52c","articleId":1489,"userId":318,"content":"18真吓人","createdAt":1549850781683},{"id":7059,"originId":"5c6cf09533b0b629ac84330c","articleId":1489,"userId":2546,"content":"再顶一下，欢迎感兴趣的筒子询问交流~","createdAt":1550643349764},{"id":7060,"originId":"5ca3050c31010b2dfbb423d9","articleId":1489,"userId":2546,"content":"再顶一下，加班少！接触前沿机会很多，欢迎感兴趣的筒子询问交流~","createdAt":1554187532765},{"id":7061,"originId":"5cc278d037faec0ce1d06ea7","articleId":1489,"userId":2546,"content":"再顶一下，仍然在招，对linux比较熟悉的也欢迎投递~","createdAt":1556248784254},{"id":7062,"originId":"5d22ba5d71951f750ccb94b2","articleId":1489,"userId":2546,"content":"再捞一捞","createdAt":1562557021222},{"id":7063,"originId":"5d21572571951f750ccb9195","articleId":1490,"userId":2093,"content":"******更新于2019/7/7 最新社招职位：******\r\nUrgent/hot position for CTC:\r\nDatabase Engineer\r\nCloud SystemsEngineer\r\nSupport Engineer","createdAt":1562466085652},{"id":7064,"originId":"5d22aff3ad75d374b58bd109","articleId":1490,"userId":2093,"content":"更新于2019/7/8 最新社招职位：\r\nUrgent/hot position for CTC:\r\nDatabase Engineer\r\nCloud SystemsEngineer\r\nSupport Engineer","createdAt":1562554355758},{"id":7065,"originId":"5ccfd2255a5bae6e078135a6","articleId":1491,"userId":2307,"content":"组内直招哦，还没找到满意实习的小伙伴来看看","createdAt":1557123621435},{"id":7066,"originId":"5ccfd2525a5bae6e078135ab","articleId":1491,"userId":2307,"content":"有啥想问的都可以问我哦","createdAt":1557123666239},{"id":7067,"originId":"5ccfd260776fb66e0d1726b6","articleId":1491,"userId":2307,"content":"这是之前在v2ex发的帖 https://www.v2ex.com/t/561145#reply24","createdAt":1557123680849},{"id":7068,"originId":"5cd139a1776fb66e0d172fae","articleId":1491,"userId":2307,"content":"100 浏览 0 回复 ：） 笑着活下去","createdAt":1557215649492},{"id":7069,"originId":"5d1db7f671951f750ccb882c","articleId":1491,"userId":2307,"content":"[@Timzzzzz](/user/Timzzzzz) 刚好最近又有HC下来，您现在要投递试试吗？","createdAt":1562228726541},{"id":7070,"originId":"5d1db7bfad75d374b58bc527","articleId":1492,"userId":2307,"content":"欢迎勾搭~","createdAt":1562228671165},{"id":7071,"originId":"5d1db7c8ad75d374b58bc52a","articleId":1492,"userId":2307,"content":"最近组内又有 HC 招人了，实习社招的大佬都看过来","createdAt":1562228680575},{"id":7072,"originId":"5d11c7cbcdb1f967c1575b33","articleId":1501,"userId":2183,"content":"前端还有坑吗？","createdAt":1561446347648},{"id":7073,"originId":"5d105a1e34bca667bc6e23ec","articleId":1504,"userId":2272,"content":"顶一下别沉了。","createdAt":1561352734203},{"id":7074,"originId":"5d11848e34bca667bc6e2878","articleId":1504,"userId":90,"content":"招聘什么时候都不会沉，只要不是上了黑榜都公司，大家都会有想法的，就是实力不允许哈哈","createdAt":1561429134824},{"id":7075,"originId":"5cdb6a13e57aac76fed2aac2","articleId":1506,"userId":2554,"content":"自己顶一下自己，冲上云霄","createdAt":1557883411964},{"id":7076,"originId":"5cdbe93ae57aac76fed2aedc","articleId":1506,"userId":2554,"content":"有想法的欢迎联系我哈","createdAt":1557915962438},{"id":7077,"originId":"5ce35279518e0954fc410050","articleId":1506,"userId":2554,"content":"欢迎骚扰，快发消息私我","createdAt":1558401657956},{"id":7078,"originId":"5cedd71a52ccb64168ba8556","articleId":1506,"userId":2554,"content":"还有小伙伴要回来建设我大西安么","createdAt":1559090970182},{"id":7079,"originId":"5d07711f95fcc914aa269ef2","articleId":1506,"userId":2555,"content":"现在还需要吗？","createdAt":1560768799971},{"id":7080,"originId":"5d10448834bca667bc6e2384","articleId":1506,"userId":2554,"content":"[@3172189228](/user/3172189228) 优秀的人才，我们常年欢迎","createdAt":1561347208873},{"id":7081,"originId":"5cef95f14036f24194cf7fbe","articleId":1508,"userId":2558,"content":"协同文档，最有挑战的前端项目，没有之一。顶一下～","createdAt":1559205361985},{"id":7082,"originId":"5cf0897752ccb64168ba91a0","articleId":1508,"userId":2557,"content":"✌️欢迎沟通交流~","createdAt":1559267703846},{"id":7083,"originId":"5cf2613395fcc914aa2652ef","articleId":1508,"userId":2557,"content":"目标是服务 4300 万+ 中国企业，你的技术会辐射到全国范围乃至全球范围！","createdAt":1559388467986},{"id":7084,"originId":"5cf3b2931fe902120f31b5d7","articleId":1508,"userId":2377,"content":" 钉钉加班据说很多，是这样么？","createdAt":1559474835824},{"id":7085,"originId":"5cf3fc9195fcc914aa2655e5","articleId":1508,"userId":2557,"content":"[@NealST](/user/NealST) 我看到高效工作的人都不会很晚走，而且 9 点 30 分 后如果没有报备，是一定要下班的。","createdAt":1559493777691},{"id":7086,"originId":"5cf495b895fcc914aa26582c","articleId":1508,"userId":2377,"content":"[@allabttony](/user/allabttony) 感谢答疑，希望钉钉越做越好","createdAt":1559532984193},{"id":7087,"originId":"5cf6296695fcc914aa266091","articleId":1508,"userId":2559,"content":"希望钉钉越办越好，钉钉加油，要有一颗做冠军的❤️～！！","createdAt":1559636326779},{"id":7088,"originId":"5cf64e9895fcc914aa26619a","articleId":1508,"userId":2560,"content":"以文会友，We want you! 顶一下～","createdAt":1559645848755},{"id":7089,"originId":"5cf6ae1995fcc914aa266285","articleId":1508,"userId":2341,"content":"用有挑战的技术影响到更多的人～","createdAt":1559670297782},{"id":7090,"originId":"5cf793241fe902120f31c6cc","articleId":1508,"userId":2561,"content":"工作地只能是杭州和北京吗？","createdAt":1559728932836},{"id":7091,"originId":"5d0054b795fcc914aa267e6b","articleId":1508,"userId":2557,"content":"[@sapronlee](/user/sapronlee) 对的，暂时只支持这两个 base 地。你希望在哪里呢？","createdAt":1560302775223},{"id":7092,"originId":"5d00fd141fe902120f31e372","articleId":1508,"userId":2562,"content":"欢迎有志之士的加盟！","createdAt":1560345876167},{"id":7093,"originId":"5d0a189f1fe902120f320a6c","articleId":1508,"userId":2563,"content":"钉钉现在招20届实习生吗？","createdAt":1560942751457},{"id":7094,"originId":"5d04a46e1fe902120f31f3a8","articleId":1511,"userId":314,"content":"还在招聘么？","createdAt":1560585326824},{"id":7095,"originId":"5d065c841fe902120f31f7a8","articleId":1511,"userId":2565,"content":"在","createdAt":1560697988352},{"id":7096,"originId":"5c947d5e00bcfd7eb2be4f18","articleId":1515,"userId":2568,"content":"UP","createdAt":1553235294589},{"id":7097,"originId":"5c9c319199e62a362ff40ab4","articleId":1515,"userId":2568,"content":"UP","createdAt":1553740177374},{"id":7098,"originId":"5ca483206c1de62dce467829","articleId":1515,"userId":2568,"content":"UP","createdAt":1554285344400},{"id":7099,"originId":"5caf0e75207b2365936ec15d","articleId":1515,"userId":2568,"content":"UP","createdAt":1554976373624},{"id":7100,"originId":"5d009ac195fcc914aa2681be","articleId":1515,"userId":2568,"content":"UP","createdAt":1560320705261},{"id":7101,"originId":"5c6cc99433b0b629ac843185","articleId":1516,"userId":1690,"content":"仓前的帮顶~\r\n\r\n","createdAt":1550633364708},{"id":7102,"originId":"5c6d124433b0b629ac843505","articleId":1516,"userId":2569,"content":"[@qld-cf](/user/qld-cf) 谢谢~ 简历也已收到。😆","createdAt":1550651972989},{"id":7103,"originId":"5c6d5b16e1a81129a7ad8e3d","articleId":1516,"userId":440,"content":"顶！d=====(￣▽￣*)","createdAt":1550670614093},{"id":7104,"originId":"5c6e431333b0b629ac843bc9","articleId":1516,"userId":90,"content":"业余帮顶","createdAt":1550730003525},{"id":7105,"originId":"5c700fc1e1a81129a7ad9cbd","articleId":1516,"userId":2569,"content":"[@zhoumingque](/user/zhoumingque) 讲讲在这个团队的感受~","createdAt":1550847937931},{"id":7106,"originId":"5c700fe833b0b629ac844670","articleId":1516,"userId":2569,"content":"[@jxycbjhc](/user/jxycbjhc) 谢谢！","createdAt":1550847976471},{"id":7107,"originId":"5c77eaad09cd724ef50f1979","articleId":1516,"userId":440,"content":"[@yuzhigang33](/user/yuzhigang33) 人越来越多~","createdAt":1551362733096},{"id":7108,"originId":"5c81f7d390c14711cc8cb897","articleId":1516,"userId":2570,"content":"请问还有岗位吗？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1552021459332},{"id":7109,"originId":"5cb5fccaa86ae80ce64afd43","articleId":1516,"userId":2569,"content":"[@badboy608](/user/badboy608) 还有。","createdAt":1555430602105},{"id":7110,"originId":"5cc0198aa86ae80ce64b36a8","articleId":1516,"userId":2571,"content":"在隔壁，帮顶","createdAt":1556093322481},{"id":7111,"originId":"5cffc6ca1fe902120f31dd7c","articleId":1516,"userId":2505,"content":"有年龄限制么","createdAt":1560266442849},{"id":7112,"originId":"5c985ede00bcfd7eb2be5c57","articleId":1517,"userId":222,"content":"你好，请问还在招吗，发了邮件会有反馈吗？","createdAt":1553489630617},{"id":7113,"originId":"5c998bf500bcfd7eb2be62ef","articleId":1517,"userId":2220,"content":"[@varHarrie](/user/varHarrie)  还在招的，邮件会有回复，欢迎投递~","createdAt":1553566709954},{"id":7114,"originId":"5c9aceb400bcfd7eb2be6879","articleId":1517,"userId":221,"content":"[@diyao](/user/diyao) 投了求回复","createdAt":1553649332676},{"id":7115,"originId":"5c9b003dfd41137eb7662426","articleId":1517,"userId":2220,"content":"[@varHarrie](/user/varHarrie)  [@xrr20160322](/user/xrr20160322)  抱歉，不是第二位兄弟回复，我都没意识到邮件账号出了问题。\r\n2位兄弟稍等，简历不错哈。","createdAt":1553662013942},{"id":7116,"originId":"5c9b5ef0fd41137eb7662882","articleId":1517,"userId":2572,"content":"[@diyao](/user/diyao) 已投简历，求回复","createdAt":1553686256403},{"id":7117,"originId":"5c9b6905fd41137eb76628b6","articleId":1517,"userId":2220,"content":"[@myadmin](/user/myadmin)  已收到拉~","createdAt":1553688837425},{"id":7118,"originId":"5ca17eba99e62a362ff41c60","articleId":1517,"userId":2573,"content":"你好，请问是什么部门","createdAt":1554087610587},{"id":7119,"originId":"5ca1c92a31010b2dfbb41da4","articleId":1517,"userId":2220,"content":"[@masongzhi](/user/masongzhi)  技术研发部。\r\n负责对外业务","createdAt":1554106666057},{"id":7120,"originId":"5ca1dabf6c1de62dce4669ab","articleId":1517,"userId":2573,"content":"[@diyao](/user/diyao) 请问技术研发部和后台部哪个部门好呢，看到两个部门都招人","createdAt":1554111167018},{"id":7121,"originId":"5ca2de6731010b2dfbb42240","articleId":1517,"userId":2220,"content":"[@masongzhi](/user/masongzhi)  没有后台部。技术研发部->后台组。后台组是个很大的组，前端也在其中。","createdAt":1554177639276},{"id":7122,"originId":"5ca412c46c1de62dce46731e","articleId":1517,"userId":2573,"content":"[@diyao](/user/diyao) 技术研发部->后台组，技术研发部就是后台组吗，昨天面试了后台组","createdAt":1554256580787},{"id":7123,"originId":"5ca439986c1de62dce467481","articleId":1517,"userId":2220,"content":"[@masongzhi](/user/masongzhi)  技术研发部内有后台组，客户端组等。所有前端目前都在后天组这个大组内。","createdAt":1554266520673},{"id":7124,"originId":"5ca43a876c1de62dce467489","articleId":1517,"userId":2220,"content":"我们还在招。\r\nBIGO内最大的前端组，目测要40人，负责所有对外业务。\r\n目前已发个别offer，在面试流程中也有几位优秀的候选人。\r\n期待优秀的你，与优秀的人一起搞事情才不会孤单！！！！\r\n![Bigo-03.png](//static.cnodejs.org/FvzeEXhPAEIaeEjqeg_V0WaAQ_99)","createdAt":1554266759129},{"id":7125,"originId":"5ca46acc6c1de62dce4676f8","articleId":1517,"userId":2574,"content":"求教大佬，专科可有机会一战？","createdAt":1554279116590},{"id":7126,"originId":"5cade8c4dad66d658e4079b5","articleId":1517,"userId":2220,"content":"[@liwens](/user/liwens)  可邮件过去咨询哦","createdAt":1554901188139},{"id":7127,"originId":"5cb155e9dad66d658e408843","articleId":1517,"userId":2220,"content":"我们还在大量招人！","createdAt":1555125737141},{"id":7128,"originId":"5cb36f6a207b2365936ece2c","articleId":1517,"userId":2575,"content":"去年面试不过，今年还有机会吗？","createdAt":1555263338101},{"id":7129,"originId":"5cb3e4a9207b2365936ecf33","articleId":1517,"userId":2220,"content":"[@Mrminfive](/user/Mrminfive)  当然可以~","createdAt":1555293353876},{"id":7130,"originId":"5cb45eb8207b2365936ed49d","articleId":1517,"userId":2220,"content":"还在大量招人中。\r\n已上市，业务快速扩张中。\r\n机会多多，你懂得哦。。","createdAt":1555324600492},{"id":7131,"originId":"5cb74549a86ae80ce64b05eb","articleId":1517,"userId":2576,"content":"前端偏nodejs 的呢","createdAt":1555514697275},{"id":7132,"originId":"5cb7e27437faec0ce1d0324a","articleId":1517,"userId":2220,"content":"[@KenyeeC](/user/KenyeeC)  偏nodejs，所以说前端还是没忘的吧，可以~","createdAt":1555554932853},{"id":7133,"originId":"5cde68e7518e0954fc40f40a","articleId":1517,"userId":2220,"content":"![Bigo-03.png](//static.cnodejs.org/FqSNYTzvH8GfdSbClnL4mci35p4u)\r\n还有简历吗，还有好几个hc哦。","createdAt":1558079719867},{"id":7134,"originId":"5cf5d60295fcc914aa265e4d","articleId":1517,"userId":2220,"content":"## 我们还有10个hc，欢迎各路好汉投递~~","createdAt":1559614978606},{"id":7135,"originId":"5cf71fb11fe902120f31c348","articleId":1517,"userId":2577,"content":"前前后后面了六面，然后就没有然后了......","createdAt":1559699377352},{"id":7136,"originId":"5cf4bf3a1fe902120f31b9b3","articleId":1518,"userId":141,"content":"我们需要的是能够自己写代码的工程师，只想做领导的，不适合我们。谢谢！","createdAt":1559543610462},{"id":7137,"originId":"5cf4e7801fe902120f31bb43","articleId":1518,"userId":1947,"content":"偏nodejs的有机会吗？没有用过vue,只用过react","createdAt":1559553920564},{"id":7138,"originId":"5cf61c331fe902120f31c008","articleId":1518,"userId":141,"content":"需要有VUEJS的。谢谢","createdAt":1559632947508},{"id":7139,"originId":"5cf671291fe902120f31c1db","articleId":1518,"userId":2578,"content":"请问，\"远程\" 是在家开发吗？ 后台nodejs(koa or express) 前端 使用(react or vue or angualr)开发过 pc webApp单页应用。","createdAt":1559654697585},{"id":7140,"originId":"5cf692031fe902120f31c238","articleId":1518,"userId":59,"content":"[@cnode2018](/user/cnode2018) 原来这里也会遇见","createdAt":1559663107460},{"id":7141,"originId":"5cf16a1595fcc914aa265116","articleId":1519,"userId":1259,"content":"你好，请问现在还缺人吗？\r\n","createdAt":1559325205412},{"id":7142,"originId":"5cf66e4f95fcc914aa266205","articleId":1519,"userId":2578,"content":"求问，请问还在招远程开发人员吗？","createdAt":1559653967207},{"id":7143,"originId":"5cf502d61fe902120f31bbef","articleId":1520,"userId":2377,"content":"前端岗位目前还有hc么","createdAt":1559560918292},{"id":7144,"originId":"5cd91baee57aac76fed2a0da","articleId":1522,"userId":2580,"content":"自己顶一下","createdAt":1557732270639},{"id":7145,"originId":"5cf122ec95fcc914aa26509f","articleId":1522,"userId":2580,"content":"自己再顶一下，继续招","createdAt":1559306988728},{"id":7146,"originId":"5ce4d9794d4b857836e8580e","articleId":1523,"userId":2581,"content":"欢迎投递简历到：1102081905@qq.com\r\n各位大佬","createdAt":1558501753533},{"id":7147,"originId":"5ce4e624e57aac76fed2d124","articleId":1523,"userId":2581,"content":"加油加油","createdAt":1558504996402},{"id":7148,"originId":"5ce4e63c4d4b857836e85879","articleId":1523,"userId":2581,"content":"自己给自己加油","createdAt":1558505020727},{"id":7149,"originId":"5ce4f6fbe57aac76fed2d1e8","articleId":1523,"userId":90,"content":"不多见的非大前端职位","createdAt":1558509307267},{"id":7150,"originId":"5ce503f5e57aac76fed2d28b","articleId":1523,"userId":2581,"content":"[@jxycbjhc](/user/jxycbjhc) 所以大佬要考虑吗","createdAt":1558512629645},{"id":7151,"originId":"5ce552e152ccb64168ba672a","articleId":1523,"userId":90,"content":"[@yubinghui](/user/yubinghui) 我不是大佬。。。南方人不来北京","createdAt":1558532833902},{"id":7152,"originId":"5cedefe052ccb64168ba8631","articleId":1523,"userId":2581,"content":"有没有人啊","createdAt":1559097312954},{"id":7153,"originId":"5cee49f052ccb64168ba88e6","articleId":1523,"userId":2582,"content":"楼主，招前端吗？","createdAt":1559120368284},{"id":7154,"originId":"5cefb5f64036f24194cf8161","articleId":1523,"userId":2581,"content":"招的，可以加我微信18306845276","createdAt":1559213558935},{"id":7155,"originId":"5cefb6084036f24194cf8164","articleId":1523,"userId":2581,"content":"[@286810](/user/286810) 招的，可以加我微信哦18306845276","createdAt":1559213576490},{"id":7156,"originId":"5cee321c4036f24194cf7965","articleId":1524,"userId":2584,"content":"请问招后端吗？php 或者 node.js ","createdAt":1559114268051},{"id":7157,"originId":"5ca8bb3bd68ff5064921a878","articleId":1526,"userId":2586,"content":"1","createdAt":1554561851762},{"id":7158,"originId":"5caaa8f17edd13064e053098","articleId":1526,"userId":2586,"content":"2","createdAt":1554688241793},{"id":7159,"originId":"5caec6c3207b2365936ebdf4","articleId":1526,"userId":2586,"content":"3","createdAt":1554958019055},{"id":7160,"originId":"5cb45a9cdad66d658e409487","articleId":1526,"userId":2586,"content":"4","createdAt":1555323548730},{"id":7161,"originId":"5cb688c5a86ae80ce64affed","articleId":1526,"userId":2586,"content":"5","createdAt":1555466437251},{"id":7162,"originId":"5cec9a9252ccb64168ba80c7","articleId":1526,"userId":77,"content":"上海哪里","createdAt":1559009938151},{"id":7163,"originId":"5cec9a2552ccb64168ba80c2","articleId":1527,"userId":77,"content":"liyao@noah-fund.com    ?","createdAt":1559009829134},{"id":7164,"originId":"5ce7a7c752ccb64168ba739c","articleId":1528,"userId":455,"content":"欢迎各位自荐或推荐","createdAt":1558685639780},{"id":7165,"originId":"5ce4bd1c4d4b857836e85698","articleId":1531,"userId":2590,"content":"有意向的麻烦投递简历到邮箱 xss@m.8ddao.com","createdAt":1558494492206},{"id":7166,"originId":"5cdad1e1e57aac76fed2a9b5","articleId":1532,"userId":2292,"content":"email address error","createdAt":1557844449639},{"id":7167,"originId":"5ce3c5a4518e0954fc41058e","articleId":1532,"userId":54,"content":"邮箱错误","createdAt":1558431140805},{"id":7168,"originId":"5c63c8700752e020af94323a","articleId":1533,"userId":2543,"content":"顶一下\r\n","createdAt":1550043248886},{"id":7169,"originId":"5c63c8770752e020af94323d","articleId":1533,"userId":2543,"content":"顶一下","createdAt":1550043255156},{"id":7170,"originId":"5c6bbec9ed5543510be8d288","articleId":1533,"userId":2543,"content":"如果想了解其他JD和岗位要求，可以邮件联系噢～","createdAt":1550565065214},{"id":7171,"originId":"5c77ae733cc9c540b2641c30","articleId":1533,"userId":2543,"content":"ding","createdAt":1551347315636},{"id":7172,"originId":"5c8cf5bc7ce0df3732428b02","articleId":1533,"userId":2543,"content":"顶一下\r\n","createdAt":1552741820321},{"id":7173,"originId":"5c95a74600bcfd7eb2be5335","articleId":1533,"userId":2543,"content":"顶一下","createdAt":1553311558407},{"id":7174,"originId":"5c9ec798484eeb36341587ba","articleId":1533,"userId":2543,"content":"顶一下\r\n","createdAt":1553909656405},{"id":7175,"originId":"5ca0abf2484eeb3634158c0c","articleId":1533,"userId":221,"content":"[@ffym](/user/ffym) 前端要求什么水平啊，我发了简历也没回应啊","createdAt":1554033650749},{"id":7176,"originId":"5ca0b436484eeb3634158c37","articleId":1533,"userId":2543,"content":"[@xrr20160322](/user/xrr20160322) 您是什么时候投的啊？邮箱是什么，我去看一下","createdAt":1554035766335},{"id":7177,"originId":"5ca0bcdb484eeb3634158c52","articleId":1533,"userId":221,"content":"[@ffym](/user/ffym) xiaoranran1993@outlook.com","createdAt":1554037979631},{"id":7178,"originId":"5ca0c9a7484eeb3634158c94","articleId":1533,"userId":2543,"content":"[@xrr20160322](/user/xrr20160322) 我看了一下，没有过初筛，简历是不错的，可能是因为HR考虑的方面多一点","createdAt":1554041255423},{"id":7179,"originId":"5cba917e37faec0ce1d03f17","articleId":1533,"userId":2543,"content":"顶一下\r\n","createdAt":1555730814617},{"id":7180,"originId":"5cc12075a86ae80ce64b3c49","articleId":1533,"userId":2543,"content":"shopee搬新家啦～新家在达实大厦","createdAt":1556160629551},{"id":7181,"originId":"5ce29ba8518e0954fc40ff29","articleId":1533,"userId":2543,"content":"顶一下","createdAt":1558354856140},{"id":7182,"originId":"5ce29a6ee57aac76fed2c474","articleId":1534,"userId":2592,"content":"欢迎骚然呀～","createdAt":1558354542341},{"id":7183,"originId":"5cd16305da4b2a7fe61d945c","articleId":1536,"userId":148,"content":"顶一哈😊","createdAt":1557226245014},{"id":7184,"originId":"5cd2389ebd52e97fe19e1f48","articleId":1536,"userId":2307,"content":"感觉都是我们招人的自己在顶","createdAt":1557280926090},{"id":7185,"originId":"5cd2438fbd52e97fe19e2028","articleId":1536,"userId":148,"content":"[@youkongling](/user/youkongling) 是的😊","createdAt":1557283727515},{"id":7186,"originId":"5cd2a5d4e333b24979ca96f0","articleId":1536,"userId":148,"content":"顶一哈😊","createdAt":1557308884206},{"id":7187,"originId":"5cd2a637d37a2a56910a4031","articleId":1536,"userId":148,"content":"顶一哈😊","createdAt":1557308983633},{"id":7188,"originId":"5cd43d0be333b24979ca9e13","articleId":1536,"userId":148,"content":"顶一哈😊","createdAt":1557413131524},{"id":7189,"originId":"5cd8d4a8e57aac76fed29e84","articleId":1536,"userId":148,"content":"顶一哈😊","createdAt":1557714088508},{"id":7190,"originId":"5cda28f7e57aac76fed2a480","articleId":1536,"userId":2594,"content":"太沉了，自己也顶一哈","createdAt":1557801207407},{"id":7191,"originId":"5cdae443e57aac76fed2aa16","articleId":1536,"userId":2292,"content":"应届生行不？","createdAt":1557849155363},{"id":7192,"originId":"5af2528a0a36e5312d6ece77","articleId":1539,"userId":456,"content":"还不错，没写待遇\r\n","createdAt":1525830282333},{"id":7193,"originId":"5af2b7c3adea947348e7623e","articleId":1539,"userId":2596,"content":"[@hapiman](/user/hapiman) 嗯嗯，刚更新了下","createdAt":1525856195633},{"id":7194,"originId":"5af40ae40a36e5312d6ecf67","articleId":1539,"userId":2597,"content":"咦，还不错，不过还是没看到待遇~~","createdAt":1525943012609},{"id":7195,"originId":"5af445a31b02288048bd0ee9","articleId":1539,"userId":148,"content":"咦，还不错，不过还是没看到待遇~~","createdAt":1525958051626},{"id":7196,"originId":"5afa47eaadea947348e76455","articleId":1539,"userId":2596,"content":"更新了薪资待遇，研发直招，欢迎投递简历哈","createdAt":1526351850877},{"id":7197,"originId":"5afd16540a36e5312d6ed1e3","articleId":1539,"userId":1933,"content":"还可以发简历吗？","createdAt":1526535764872},{"id":7198,"originId":"5afd4456adea947348e76541","articleId":1539,"userId":2596,"content":"[@Yangk030208](/user/Yangk030208) 可以，如果有意向，欢迎投递简历","createdAt":1526547542214},{"id":7199,"originId":"5afd4465adea947348e76543","articleId":1539,"userId":2596,"content":"持续招聘中","createdAt":1526547557361},{"id":7200,"originId":"5b00fc12f3c2e9b5066afd69","articleId":1539,"userId":2597,"content":"一看见错别字，我这个强迫症啊，就又犯了~~","createdAt":1526791186829},{"id":7201,"originId":"5b14a36429e6e510415b276a","articleId":1539,"userId":2596,"content":"还有headcount，欢迎投递简历～","createdAt":1528079204120},{"id":7202,"originId":"5b18f03d29e6e510415b28d8","articleId":1539,"userId":2596,"content":"顶","createdAt":1528361021429},{"id":7203,"originId":"5b1c6f298a4f51e140d946d2","articleId":1539,"userId":456,"content":"[@zynXdjkyb](/user/zynXdjkyb) 能说说你们区块链做哪个方向吗","createdAt":1528590121585},{"id":7204,"originId":"5b1f38ff57137f22415c4b68","articleId":1539,"userId":2596,"content":"[@hapiman](/user/hapiman) 加密货币方向","createdAt":1528772863309},{"id":7205,"originId":"5b2cd96aac8bc1e124114363","articleId":1539,"userId":2596,"content":"顶","createdAt":1529665898293},{"id":7206,"originId":"5b3ec749e374eeab6929d46c","articleId":1539,"userId":2596,"content":"顶","createdAt":1530840905578},{"id":7207,"originId":"5cbec51fa86ae80ce64b2959","articleId":1539,"userId":2596,"content":"headcount放开了，持续招聘","createdAt":1556006175658},{"id":7208,"originId":"5cd27dfee333b24979ca9504","articleId":1539,"userId":1305,"content":"帮顶","createdAt":1557298686368},{"id":7209,"originId":"5cd38562e333b24979ca98cf","articleId":1539,"userId":161,"content":"node是做接口开发？不过区块链不熟悉。","createdAt":1557366114287},{"id":7210,"originId":"5cd25340e333b24979ca9257","articleId":1540,"userId":1220,"content":"消灭0回复","createdAt":1557287744395},{"id":7211,"originId":"5cca8e8aa86ae80ce64b5f48","articleId":1541,"userId":2132,"content":"一年经验可以不","createdAt":1556778634113},{"id":7212,"originId":"5b420f0035342ab06906132d","articleId":1542,"userId":2600,"content":"P5是指集团的P5还是lazada的P5？lazada的P5对应的是集团的P7吧？","createdAt":1531055872762},{"id":7213,"originId":"5b445ecbe374eeab6929d59c","articleId":1542,"userId":2599,"content":"[@SteinNs](/user/SteinNs) 集团的p5","createdAt":1531207371388},{"id":7214,"originId":"5b447835fb9e84ec69cc196a","articleId":1542,"userId":1947,"content":"nodejs是招p几的呢","createdAt":1531213877449},{"id":7215,"originId":"5b4716ca35342ab0690614c8","articleId":1542,"userId":2599,"content":"[@oyosc](/user/oyosc) 一样，p5+","createdAt":1531385546998},{"id":7216,"originId":"5ba1ac0315e4fd1923f488f0","articleId":1542,"userId":2599,"content":"自顶一下","createdAt":1537321987224},{"id":7217,"originId":"5bade61f37a6965f59051d45","articleId":1542,"userId":2599,"content":"自顶一下","createdAt":1538123295708},{"id":7218,"originId":"5bc6a3ddede204052db805c4","articleId":1542,"userId":2599,"content":"自顶下","createdAt":1539744733972},{"id":7219,"originId":"5bdc198a21d75b74609f33d9","articleId":1542,"userId":2601,"content":"P5是应届生？\n\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1541151114118},{"id":7220,"originId":"5beb78dbbe1b120abac5905f","articleId":1542,"userId":2599,"content":"顶一下","createdAt":1542158555149},{"id":7221,"originId":"5bee4e4abe1b120abac59f9c","articleId":1542,"userId":2602,"content":"emmm我前些天也收到邮件lazada-basecamp面试邀请,\n不过回复技术不行没去了😂","createdAt":1542344266857},{"id":7222,"originId":"5bff8186be1b120abac5e186","articleId":1542,"userId":2599,"content":"自顶","createdAt":1543471494658},{"id":7223,"originId":"5c001c4dbe1b120abac5e57a","articleId":1542,"userId":2423,"content":"纯后端node.js的可以吗\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1543511117567},{"id":7224,"originId":"5c04c08239c0af64fddb81c1","articleId":1542,"userId":2599,"content":"[@JiaWeiBi](/user/JiaWeiBi) 可以试试","createdAt":1543815298587},{"id":7225,"originId":"5c0b5a0fd3b8ab334e8dc098","articleId":1542,"userId":2551,"content":"shopee 也在大量招人哈初级到高级 薪资待遇比阿里同级别高3到6k不等 ","createdAt":1544247823002},{"id":7226,"originId":"5c0ba047f3d48d2397c0f3e5","articleId":1542,"userId":2551,"content":"[@xiaoshude](/user/xiaoshude) https://cnodejs.org/topic/5c0533ead3b8ab334e8da39b","createdAt":1544265799665},{"id":7227,"originId":"5c18d79e7ec239239ff582ca","articleId":1542,"userId":161,"content":"一共面试几轮？有暴露面试技巧的么****","createdAt":1545131934342},{"id":7228,"originId":"5c18e8c2f3d48d2397c12ae3","articleId":1542,"userId":2603,"content":"[@SteinNs](/user/SteinNs) <br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1545136322460},{"id":7229,"originId":"5c23051576c4964062a1df4b","articleId":1542,"userId":1212,"content":"node.js还招吗","createdAt":1545798933087},{"id":7230,"originId":"5c230b5f3898674067a7884d","articleId":1542,"userId":2604,"content":"请问招实习吗","createdAt":1545800543185},{"id":7231,"originId":"5c3ed7d4a4d44449266b196e","articleId":1542,"userId":2599,"content":"[@zubincheung](/user/zubincheung) 招的","createdAt":1547622356197},{"id":7232,"originId":"5c4e651ea4647e02328f1853","articleId":1542,"userId":2599,"content":"自顶一下","createdAt":1548641566896},{"id":7233,"originId":"5c6e007de1a81129a7ad8fcb","articleId":1542,"userId":2599,"content":"自顶","createdAt":1550712957957},{"id":7234,"originId":"5c85c9b3acb681372d416d26","articleId":1542,"userId":2599,"content":"自顶","createdAt":1552271795365},{"id":7235,"originId":"5c9050c696558e26e1b66b61","articleId":1542,"userId":2412,"content":"请问Node还有坑位吗，具体有什么要求呢？","createdAt":1552961734462},{"id":7236,"originId":"5c90952a8a587f26b426c2ec","articleId":1542,"userId":2599,"content":"[@zubinzhang](/user/zubinzhang) 有的，工作两年的本科即可","createdAt":1552979242057},{"id":7237,"originId":"5c90a47b8a587f26b426c58c","articleId":1542,"userId":2533,"content":"现在还招P5吗？","createdAt":1552983163003},{"id":7238,"originId":"5c90b99296558e26e1b672d1","articleId":1542,"userId":2597,"content":"硕士也是两年经验么","createdAt":1552988562064},{"id":7239,"originId":"5c957cb000bcfd7eb2be52c6","articleId":1542,"userId":2605,"content":"10年经验老程序员要么？经历比较丰富，现专注Node、前端。北京交大电子专业，自学软件，最后只是结业的要么？","createdAt":1553300656563},{"id":7240,"originId":"5c9b120efd41137eb76624fc","articleId":1542,"userId":2599,"content":"[@moonfy](/user/moonfy) 是的","createdAt":1553666574004},{"id":7241,"originId":"5c9b123800bcfd7eb2be6bff","articleId":1542,"userId":2599,"content":"[@lushisang](/user/lushisang) 在大厂呆过或者有开源项目的可以试试","createdAt":1553666616978},{"id":7242,"originId":"5cad62f2dad66d658e4075d5","articleId":1542,"userId":1556,"content":"可以在线面么？","createdAt":1554866930728},{"id":7243,"originId":"5cc57f8337faec0ce1d07b2e","articleId":1542,"userId":2606,"content":"英语要求高吗？只会Node后端可以吗","createdAt":1556447107375},{"id":7244,"originId":"5ca175dc99e62a362ff41c01","articleId":1545,"userId":2609,"content":"顶一下\r\n\r\n","createdAt":1554085340006},{"id":7245,"originId":"5cc11ec4a86ae80ce64b3c3b","articleId":1545,"userId":2608,"content":" 招聘还在继续 有兴趣的同学欢迎投递简历 ;","createdAt":1556160196303},{"id":7246,"originId":"5cc0f438a86ae80ce64b39be","articleId":1546,"userId":21,"content":"消灭0回复","createdAt":1556149304824},{"id":7247,"originId":"5cbfd501a86ae80ce64b3129","articleId":1547,"userId":2611,"content":"顶","createdAt":1556075777734},{"id":7248,"originId":"5cc02b5537faec0ce1d0614d","articleId":1547,"userId":2611,"content":"顶啊\r\n","createdAt":1556097877331},{"id":7249,"originId":"5cb81ed3a86ae80ce64b0a65","articleId":1549,"userId":523,"content":"招到人了嘛","createdAt":1555570387763},{"id":7250,"originId":"5cb8340737faec0ce1d0356a","articleId":1549,"userId":2504,"content":"[@HongYangHT](/user/HongYangHT) 还没落实，可以交流一下。","createdAt":1555575815021},{"id":7251,"originId":"5cbec02e37faec0ce1d052b2","articleId":1549,"userId":785,"content":"需要前端吗","createdAt":1556004910586},{"id":7252,"originId":"5cbed0ee37faec0ce1d05385","articleId":1549,"userId":2504,"content":"[@FourLeafClover](/user/FourLeafClover) 前端是要angular/angular material","createdAt":1556009198872},{"id":7253,"originId":"5ca1ff9531010b2dfbb41f92","articleId":1550,"userId":2614,"content":"请问一下还在招聘吗？","createdAt":1554120597484},{"id":7254,"originId":"5ca2bb8f31010b2dfbb420e7","articleId":1550,"userId":2613,"content":"[@Liaozzzzzz](/user/Liaozzzzzz) 还在招的，欢迎投递~","createdAt":1554168719067},{"id":7255,"originId":"5cbebedb37faec0ce1d0529c","articleId":1550,"userId":2613,"content":"顶顶顶。。继续招人啊！","createdAt":1556004571474},{"id":7256,"originId":"5cb8228e37faec0ce1d034ac","articleId":1551,"userId":2395,"content":"快到碗里来","createdAt":1555571342161},{"id":7257,"originId":"5cbd6228a86ae80ce64b1d7c","articleId":1551,"userId":2395,"content":"最后一天了~","createdAt":1555915304439},{"id":7258,"originId":"5c945cf600bcfd7eb2be4e5d","articleId":1552,"userId":2616,"content":"接受应届毕业生","createdAt":1553226998922},{"id":7259,"originId":"5c972841fd41137eb7660eee","articleId":1552,"userId":2438,"content":"薪资范围","createdAt":1553410113012},{"id":7260,"originId":"5c9b748600bcfd7eb2be7057","articleId":1552,"userId":2616,"content":"[@gaochao93](/user/gaochao93) 面议，根据能力评定","createdAt":1553691782009},{"id":7261,"originId":"5c9e27f399e62a362ff41517","articleId":1552,"userId":20,"content":"前端转过来的要不要？[@GitHubWuYi](/user/GitHubWuYi) ","createdAt":1553868787017},{"id":7262,"originId":"5cabf207d68ff5064921b3b1","articleId":1552,"userId":2616,"content":"[@weiketa](/user/weiketa)  可以","createdAt":1554772487688},{"id":7263,"originId":"5cabf350d68ff5064921b3bf","articleId":1552,"userId":2616,"content":"全额缴纳五险一金，带薪年假，员工旅游，周末双休，定期体检，通讯补贴，专业培训等福利","createdAt":1554772816388},{"id":7264,"originId":"5cad42d5d68ff5064921bb55","articleId":1552,"userId":2616,"content":"招聘前端一枚","createdAt":1554858709771},{"id":7265,"originId":"5cad540d7edd13064e054187","articleId":1552,"userId":2616,"content":"顶！d=====(￣▽￣*)b","createdAt":1554863117034},{"id":7266,"originId":"5cadd1a2dad66d658e407962","articleId":1552,"userId":2616,"content":"大家活跃起来啊，有什么意见也可以留言。。。","createdAt":1554895266055},{"id":7267,"originId":"5cae94f5dad66d658e407abc","articleId":1552,"userId":2616,"content":"接受应届毕业生","createdAt":1554945269123},{"id":7268,"originId":"5cb9830337faec0ce1d03c4f","articleId":1552,"userId":1506,"content":"我看是长沙的办公地再招前端啊？北京还有坑么？","createdAt":1555661571174},{"id":7269,"originId":"5cbc6619a86ae80ce64b1957","articleId":1552,"userId":513,"content":"薪资似乎低了点","createdAt":1555850777151},{"id":7270,"originId":"5cbd31c537faec0ce1d045bd","articleId":1552,"userId":523,"content":"长沙有node的坑没","createdAt":1555902917016},{"id":7271,"originId":"5cb71f06a86ae80ce64b0592","articleId":1553,"userId":1544,"content":"顶一下\r\n20190417更新，继续需要","createdAt":1555504902378},{"id":7272,"originId":"5cb7f3fda86ae80ce64b0927","articleId":1553,"userId":2597,"content":"招node么~~","createdAt":1555559421742},{"id":7273,"originId":"595e1d18a4de5625080fe158","articleId":1554,"userId":2617,"content":"应届生考虑吗？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1499340056859},{"id":7274,"originId":"5960f3a710d696af07768ad6","articleId":1554,"userId":1199,"content":"这环境是真的不错啊","createdAt":1499526055111},{"id":7275,"originId":"5964311da4de5625080fe2b7","articleId":1554,"userId":506,"content":"人招齐了没?","createdAt":1499738397417},{"id":7276,"originId":"5968aab3db0b6aec18a2852c","articleId":1554,"userId":2618,"content":"一年工作经验的菜鸟要吗？     ---from [xieww](https://github.com/xieww)","createdAt":1500031667352},{"id":7277,"originId":"596c63f127c8372819db0b85","articleId":1554,"userId":2569,"content":"[@olxsy](/user/olxsy) [@frank320](/user/frank320) [@xieww](/user/xieww) 简历发我吧。","createdAt":1500275697610},{"id":7278,"originId":"596c78028f0313ff0d08d4bb","articleId":1554,"userId":1791,"content":"👍","createdAt":1500280834815},{"id":7279,"originId":"5974d2c968aa87c774e5eafe","articleId":1554,"userId":2617,"content":"[@yuzhigang33](/user/yuzhigang33) 已找到工作了，谢谢\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1500828361723},{"id":7280,"originId":"5979963e518c054e4fc0c187","articleId":1554,"userId":146,"content":"还招人吗？","createdAt":1501140542546},{"id":7281,"originId":"5982e61528607f916122dc54","articleId":1554,"userId":2569,"content":"[@DevinXian](/user/DevinXian) 还招","createdAt":1501750805374},{"id":7282,"originId":"5cb72cf737faec0ce1d02ff0","articleId":1554,"userId":2619,"content":"贵公司数据中台是java为主还是nodejs为主？另外，贵公司的平台构建人员，除了要求会java或者nodejs基本的开发框架和组件外，是否必须要了解hadoop、hbase之类的大数据组件呢？","createdAt":1555508471468},{"id":7283,"originId":"5cb41e9ddad66d658e40915f","articleId":1555,"userId":2620,"content":"准备实习的同学，抓紧投简历给我shaohong.fsh@alibaba-inc.com","createdAt":1555308189452},{"id":7284,"originId":"5cb6c2b3a86ae80ce64b0288","articleId":1555,"userId":2620,"content":"If not me,who? If not now,when?","createdAt":1555481267154},{"id":7285,"originId":"5caef4b9207b2365936ebff4","articleId":1560,"userId":2623,"content":"看着很棒啊~~~~~","createdAt":1554969785179},{"id":7286,"originId":"5cb056d0dad66d658e408602","articleId":1560,"userId":2395,"content":"感觉不错的样子","createdAt":1555060432431},{"id":7287,"originId":"5caca5bb7edd13064e053fef","articleId":1561,"userId":1412,"content":"为什么有性别要求？","createdAt":1554818491468},{"id":7288,"originId":"5c8629a27ce0df3732426eb6","articleId":1562,"userId":2625,"content":"前景好，有挑战，诚邀技术大拿参与Serverless生态建设","createdAt":1552296354498},{"id":7289,"originId":"5ca8a475d68ff5064921a846","articleId":1562,"userId":2626,"content":"帮顶","createdAt":1554556021088},{"id":7290,"originId":"5ca6d6596c1de62dce4680d0","articleId":1563,"userId":2591,"content":"欧阳修有10首采桑子。这里借用了其中\"清明上巳西湖好\"一首，应景改编。\r\n\r\n叹，欧阳兄，高产，是多好一个实力码农啊。\r\n\r\n附10首链接。 https://zhidao.baidu.com/question/234543980.html","createdAt":1554437721032},{"id":7291,"originId":"5ca2c23731010b2dfbb4212f","articleId":1567,"userId":2093,"content":"实习内推，直通笔试哦。","createdAt":1554170423684},{"id":7292,"originId":"5983d591c1eb855961dd6160","articleId":1569,"userId":2630,"content":"我也是一个前端不溜的，后端比较强的nodejs业界奇葩。。。","createdAt":1501812113365},{"id":7293,"originId":"5983d80ac1eb855961dd616b","articleId":1569,"userId":1,"content":"[@raymonife](/user/raymonife) 考虑下吗","createdAt":1501812746853},{"id":7294,"originId":"5983edaa5f8478756117f75a","articleId":1569,"userId":2631,"content":"大佬要起飞了，顶一个","createdAt":1501818282480},{"id":7295,"originId":"598401ae28607f916122dc97","articleId":1569,"userId":2632,"content":"前端一枚，but依然顶一个","createdAt":1501823406628},{"id":7296,"originId":"59841a6a07cef83a61770a67","articleId":1569,"userId":265,"content":"果然是你😂","createdAt":1501829738795},{"id":7297,"originId":"59843c4407cef83a61770a9d","articleId":1569,"userId":146,"content":"nodejs不是很溜，但是比前端6一点...","createdAt":1501838404236},{"id":7298,"originId":"59844407df27f24718ea9435","articleId":1569,"userId":1,"content":"[@DevinXian](/user/DevinXian) 来来来","createdAt":1501840391334},{"id":7299,"originId":"598444f180819e161995419a","articleId":1569,"userId":146,"content":"[@xadillax](/user/xadillax) 死月大大要求太高了，扪心自问，水平不足","createdAt":1501840625288},{"id":7300,"originId":"59846bcf0f9d52591a887557","articleId":1569,"userId":1,"content":"[@DevinXian](/user/DevinXian) 那都是乱写的 jd。","createdAt":1501850575720},{"id":7301,"originId":"5987d1b42d4b0af4750352f7","articleId":1569,"userId":1791,"content":"[@xadillax](/user/xadillax) jd都乱写，没诚意","createdAt":1502073268763},{"id":7302,"originId":"59882fa1339c297076baad1e","articleId":1569,"userId":1717,"content":"如果有上海业务部门的话肯定过去。","createdAt":1502097313644},{"id":7303,"originId":"5989624c2d4b0af47503536b","articleId":1569,"userId":1305,"content":"可惜人在北京","createdAt":1502175820230},{"id":7304,"originId":"59897d12206061d87545c5e9","articleId":1569,"userId":1,"content":"是时候考虑换个城市了     []~（￣▽￣）~*","createdAt":1502182674224},{"id":7305,"originId":"5996734b4e3c4e5a7021b1cb","articleId":1569,"userId":751,"content":"话说还有机会吗","createdAt":1503032139920},{"id":7306,"originId":"5a09a99adea908392cfc891f","articleId":1569,"userId":2633,"content":"前端想转后端可以吗？","createdAt":1510582682161},{"id":7307,"originId":"5a09aa44001f0eb571c1b07e","articleId":1569,"userId":90,"content":"不说了，明年三月来一波 mark一下\r\n","createdAt":1510582852565},{"id":7308,"originId":"5a14dac0fa68dfbc62addef6","articleId":1569,"userId":1161,"content":"顶一波！！！","createdAt":1511316160564},{"id":7309,"originId":"5a204220227353e00378f210","articleId":1569,"userId":764,"content":"还收人么\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1512063520049},{"id":7310,"originId":"5a20b159227353e00378f216","articleId":1569,"userId":354,"content":"[@Alexerx](/user/Alexerx) 哈哈哈，死月都去阿里了，还来问这个问题","createdAt":1512091993716},{"id":7311,"originId":"5a20b17a227353e00378f219","articleId":1569,"userId":1,"content":"[@cctv1005s](/user/cctv1005s) [@Alexerx](/user/Alexerx) 收的收的","createdAt":1512092026479},{"id":7312,"originId":"5a28b7abd3114d3e18fac8a6","articleId":1569,"userId":764,"content":"[@cctv1005s](/user/cctv1005s) 死月是哪个大佬啊🌚\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1512617899278},{"id":7313,"originId":"5c9ee88499e62a362ff41662","articleId":1569,"userId":1223,"content":"串个门 ...","createdAt":1553918084309},{"id":7314,"originId":"5b1905c157137f22415c4a3c","articleId":1570,"userId":545,"content":"哈哈哈，跟我们差不多、\r\n玩玩 nest.js  + apollo-Graphql + Angular + Nativescript   + k8s + kong ","createdAt":1528366529999},{"id":7315,"originId":"5c9a12f7fd41137eb7661efe","articleId":1570,"userId":458,"content":"[@zuohuadong](/user/zuohuadong) 很感兴趣，你们用NativeScript，现在怎么样了。我司有使用过，后边放弃了。","createdAt":1553601271538},{"id":7316,"originId":"5c8ef2c8acb681372d41914b","articleId":1571,"userId":2635,"content":"你好！有意向，可以多了解一下吗","createdAt":1552872136085},{"id":7317,"originId":"5c91e9058a587f26b426cde6","articleId":1571,"userId":2636,"content":"感兴趣，了解一下","createdAt":1553066245434},{"id":7318,"originId":"5c99b57800bcfd7eb2be6487","articleId":1571,"userId":2637,"content":"你好！有意向，可以多了解一下吗","createdAt":1553577336330},{"id":7319,"originId":"5c98c06a00bcfd7eb2be6041","articleId":1573,"userId":1138,"content":"捞捞看有优秀的人才不\r\n","createdAt":1553514602426},{"id":7320,"originId":"5c98dad300bcfd7eb2be610f","articleId":1573,"userId":98,"content":"你凭什么认为优秀的人才一定要去你们公司","createdAt":1553521363235},{"id":7321,"originId":"5c9983f000bcfd7eb2be62a3","articleId":1573,"userId":1138,"content":"[@zengming00](/user/zengming00) 优秀的人才可以去的地方很多啊。哈哈","createdAt":1553564656381},{"id":7322,"originId":"5be8de6d2fed25406c25d81f","articleId":1574,"userId":2640,"content":" 烟台竟然有招node的！","createdAt":1541987949392},{"id":7323,"originId":"5be9247fe161dc409d760c36","articleId":1574,"userId":2028,"content":"[@Dongss](/user/Dongss) 是的，来吧！","createdAt":1542005887997},{"id":7324,"originId":"5bf21a9bbe1b120abac5aaa4","articleId":1574,"userId":380,"content":"山东竟然有招 node 的，神奇了。老妈一直让我回山东工作，但我一直在跟老妈说山东互联网贼垃圾，山东老人太多了，思想太僵化。根本不想回家工作，看来打脸了。\r\n","createdAt":1542593179908},{"id":7325,"originId":"5bf28493be1b120abac5adfe","articleId":1574,"userId":2028,"content":"[@XGHeaven](/user/XGHeaven) 欢迎回归","createdAt":1542620307265},{"id":7326,"originId":"5bf293adbe1b120abac5ae66","articleId":1574,"userId":90,"content":"山东人最好的岗位是公务员，没有之一。","createdAt":1542624173148},{"id":7327,"originId":"5bf373f2be1b120abac5b0bf","articleId":1574,"userId":380,"content":"[@jeremy16601](/user/jeremy16601) 哈哈，不归不归，在杭州挺好的。要不你也来杭州吧 😏","createdAt":1542681586386},{"id":7328,"originId":"5bf39816e6481c5709f5d6da","articleId":1574,"userId":2028,"content":"[@XGHeaven](/user/XGHeaven) 😏","createdAt":1542690838622},{"id":7329,"originId":"5bf61a6de6481c5709f5e1ca","articleId":1574,"userId":160,"content":"烟台是个好地方","createdAt":1542855277798},{"id":7330,"originId":"5bfcbaafbe1b120abac5d36d","articleId":1574,"userId":319,"content":"投一下试试吧","createdAt":1543289519849},{"id":7331,"originId":"5c8b0c827ce0df373242828d","articleId":1577,"userId":1187,"content":"自己顶一顶","createdAt":1552616578286},{"id":7332,"originId":"5c8efd287ce0df37324290f7","articleId":1577,"userId":2643,"content":"请问和公开校招有什么不同？","createdAt":1552874792896},{"id":7333,"originId":"5c8f0786acb681372d41932d","articleId":1577,"userId":1187,"content":"[@suqing](/user/suqing) 我们这边是可以直接内推到部门的，面试流程安排非常效率。\r\n另外如果是内推进入实习生面试的流程，还能享受免笔试的环节，直达面试流程。\r\n当然，如果不幸在内推面试中不通过，不影响后面的公开实习生面试哦","createdAt":1552877446300},{"id":7334,"originId":"5c933910fd41137eb766002b","articleId":1577,"userId":1187,"content":"顶","createdAt":1553152272392},{"id":7335,"originId":"5c0105f8d6104a4f803a3404","articleId":1578,"userId":1160,"content":"欢迎大家简历砸过来哦！","createdAt":1543570936383},{"id":7336,"originId":"5c0907c815a4d545e3f4bec4","articleId":1578,"userId":1160,"content":"欢迎大家简历砸过来哈！","createdAt":1544095688546},{"id":7337,"originId":"5c10df1ff3d48d2397c1081d","articleId":1578,"userId":1160,"content":"欢迎大家简历砸过来哈！","createdAt":1544609567934},{"id":7338,"originId":"5c1a4f313898674067a76253","articleId":1578,"userId":1160,"content":"欢迎大家简历砸过来哈！","createdAt":1545228081253},{"id":7339,"originId":"5c2c5e7f76c4964062a1fbea","articleId":1578,"userId":380,"content":"哈哈哈，现在入职还能跟着下地干活么 😂","createdAt":1546411647619},{"id":7340,"originId":"5c2ddbd13898674067a7ac3c","articleId":1578,"userId":1160,"content":"[@XGHeaven](/user/XGHeaven) 下地可以去我们的云南产区，入库可以去山东产区，不过最好是赶在 5 月份 ~ 9 月份，正是大丰收季节，看万亩土豆和洋葱才壮观","createdAt":1546509265418},{"id":7341,"originId":"5c2f34603898674067a7b598","articleId":1578,"userId":380,"content":"[@huanglong](/user/huanglong) 那岂不是可以顺便回一趟山东老家了，哈哈哈。","createdAt":1546597472924},{"id":7342,"originId":"5c317ec15bf06c5e7e3f1c48","articleId":1578,"userId":2644,"content":"薪资多少呀","createdAt":1546747585899},{"id":7343,"originId":"5c3303a53898674067a7c13b","articleId":1578,"userId":2645,"content":"招实习生么～～","createdAt":1546847141428},{"id":7344,"originId":"5c347d643898674067a7cb19","articleId":1578,"userId":1160,"content":"[@wxbing1207](/user/wxbing1207) 可以面聊哈，有竞争力的薪资和期权","createdAt":1546943844380},{"id":7345,"originId":"5c347d723898674067a7cb1e","articleId":1578,"userId":1160,"content":"[@ZYSzys](/user/ZYSzys) 非常出色优秀的实习生我们是考虑的","createdAt":1546943858597},{"id":7346,"originId":"5c3ede51a4d44449266b19ce","articleId":1578,"userId":1160,"content":"求简历啊","createdAt":1547624017420},{"id":7347,"originId":"5c404c5e3898674067a8039c","articleId":1578,"userId":1933,"content":"####  其他：五险一金，团建费，公积金缴纳比例    *较高*","createdAt":1547717726846},{"id":7348,"originId":"5c4f9caaa4647e02328f1da7","articleId":1578,"userId":107,"content":"赞一个，可惜我在北京，心动也没用X﹏X","createdAt":1548721322194},{"id":7349,"originId":"5c4fcbbe3819b801aa5a2542","articleId":1578,"userId":1160,"content":"[@fantasticsoul](/user/fantasticsoul) 我好几个朋友从北京前来杭州发展了，可以凑机会来杭州调研调研哈，说不定你会喜欢哈","createdAt":1548733374979},{"id":7350,"originId":"5c500f9d3819b801aa5a2763","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1548750749348},{"id":7351,"originId":"5c50518ba4647e02328f2308","articleId":1578,"userId":2646,"content":"求简历","createdAt":1548767627328},{"id":7352,"originId":"5c505c603819b801aa5a2956","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1548770400846},{"id":7353,"originId":"5c5159803819b801aa5a2d18","articleId":1578,"userId":2646,"content":"寒冬不裁员，急求多名童鞋一起突破前端组二十人","createdAt":1548835200852},{"id":7354,"originId":"5c51ade13819b801aa5a2ed1","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1548856801749},{"id":7355,"originId":"5c52ab0005cc322e7b136a24","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1548921600791},{"id":7356,"originId":"5c52ff6105cc322e7b136beb","articleId":1578,"userId":2646,"content":"小菜求才若渴，欢迎大家投递简历","createdAt":1548943201105},{"id":7357,"originId":"5c53a0a805cc322e7b136c93","articleId":1578,"userId":107,"content":"[@huanglong](/user/huanglong) 杭州挺不错的，风景好城市好嘿嘿","createdAt":1548984488688},{"id":7358,"originId":"5c53a82105cc322e7b136cc8","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1548986401004},{"id":7359,"originId":"5c53b38d05cc322e7b136d0c","articleId":1578,"userId":2647,"content":"5555555","createdAt":1548989325791},{"id":7360,"originId":"5c53b3bbe6aaad2ea76de68a","articleId":1578,"userId":2647,"content":"a5ba4ee1-568c-4a73-a8d9-ce8df7561fa8","createdAt":1548989371790},{"id":7361,"originId":"5c53c15ae6aaad2ea76de6d2","articleId":1578,"userId":2647,"content":"a5ba4ee1-568c-4a73-a8d9-ce8df7561fa8","createdAt":1548992858866},{"id":7362,"originId":"5c53c1ab05cc322e7b136d52","articleId":1578,"userId":2647,"content":"a5ba4ee1-568c-4a73-a8d9-ce8df7561fa8","createdAt":1548992939808},{"id":7363,"originId":"5c53c1be05cc322e7b136d54","articleId":1578,"userId":2647,"content":"22222","createdAt":1548992958946},{"id":7364,"originId":"5c53c49de6aaad2ea76de6e5","articleId":1578,"userId":2647,"content":"qqqqqqqsssssssssssdd","createdAt":1548993693859},{"id":7365,"originId":"5c53c4ec05cc322e7b136d64","articleId":1578,"userId":2647,"content":"sssaaaaa","createdAt":1548993772781},{"id":7366,"originId":"5c53c58205cc322e7b136d67","articleId":1578,"userId":2647,"content":"kkkkkkkkkkkkkllliijjjjjjjjjj","createdAt":1548993922142},{"id":7367,"originId":"5c53c91905cc322e7b136d6e","articleId":1578,"userId":2647,"content":"1111","createdAt":1548994841357},{"id":7368,"originId":"5c53cb7de6aaad2ea76de6fe","articleId":1578,"userId":2647,"content":"dddddsds","createdAt":1548995453043},{"id":7369,"originId":"5c53cb9205cc322e7b136d74","articleId":1578,"userId":2647,"content":"asdad","createdAt":1548995474269},{"id":7370,"originId":"5c53fc8005cc322e7b136e63","articleId":1578,"userId":2646,"content":"寒冬不裁员，急求多名童鞋一起突破前端组二十人","createdAt":1549008000931},{"id":7371,"originId":"5c5450e205cc322e7b136f7f","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1549029602013},{"id":7372,"originId":"5c54f9a0e6aaad2ea76de97a","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1549072800794},{"id":7373,"originId":"5c554e01e6aaad2ea76dea4e","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1549094401392},{"id":7374,"originId":"5c55a265e6aaad2ea76deb23","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1549116005119},{"id":7375,"originId":"5c564b2005cc322e7b13726a","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1549159200858},{"id":7376,"originId":"5c569f80e6aaad2ea76dec4a","articleId":1578,"userId":2646,"content":"寒冬不裁员，急求多名童鞋一起突破前端组二十人","createdAt":1549180800937},{"id":7377,"originId":"5c56f3e1e6aaad2ea76deca7","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1549202401078},{"id":7378,"originId":"5c579ca0e6aaad2ea76ded1f","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1549245600728},{"id":7379,"originId":"5c57f10005cc322e7b13743d","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1549267200831},{"id":7380,"originId":"5c584561e6aaad2ea76dee07","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1549288801292},{"id":7381,"originId":"5c58ee2305cc322e7b1374ed","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1549332003814},{"id":7382,"originId":"5c59428105cc322e7b137547","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1549353601299},{"id":7383,"originId":"5c5996e005cc322e7b13758b","articleId":1578,"userId":2646,"content":"寒冬不裁员，急求多名童鞋一起突破前端组二十人","createdAt":1549375200904},{"id":7384,"originId":"5c5a3fa0e6aaad2ea76def34","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1549418400797},{"id":7385,"originId":"5c5a940105cc322e7b13763a","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1549440001832},{"id":7386,"originId":"5c5ae860e6aaad2ea76deff3","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1549461600791},{"id":7387,"originId":"5c5b9120e6aaad2ea76df02e","articleId":1578,"userId":2646,"content":"寒冬不裁员，急求多名童鞋一起突破前端组二十人","createdAt":1549504800781},{"id":7388,"originId":"5c5be58005cc322e7b13771d","articleId":1578,"userId":2646,"content":"小菜求才若渴，欢迎大家投递简历","createdAt":1549526400918},{"id":7389,"originId":"5c5c39e1e6aaad2ea76df0c8","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1549548001722},{"id":7390,"originId":"5c5ce2a3e6aaad2ea76df100","articleId":1578,"userId":2646,"content":"小菜求才若渴，欢迎大家投递简历","createdAt":1549591203827},{"id":7391,"originId":"5c5d370105cc322e7b13781e","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1549612801049},{"id":7392,"originId":"5c5d8b62e6aaad2ea76df1d3","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1549634402736},{"id":7393,"originId":"5c5daa4805cc322e7b1378ac","articleId":1578,"userId":1641,"content":"[@KieSun](/user/KieSun) 都是杭州的坑么？","createdAt":1549642312662},{"id":7394,"originId":"5c5e342005cc322e7b1378bb","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1549677600812},{"id":7395,"originId":"5c5fb21d05cc322e7b1379e1","articleId":1578,"userId":2646,"content":"[@cWatermelon](/user/cWatermelon) 对的","createdAt":1549775389850},{"id":7396,"originId":"5c5fda01e6aaad2ea76df38d","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1549785601072},{"id":7397,"originId":"5c602e61e6aaad2ea76df454","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1549807201126},{"id":7398,"originId":"5c60d72005cc322e7b137ba7","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1549850400925},{"id":7399,"originId":"5c612b8405cc322e7b137d52","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1549872004645},{"id":7400,"originId":"5c617fe105cc322e7b137e35","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1549893601905},{"id":7401,"originId":"5c6228a0e6aaad2ea76df8db","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1549936800935},{"id":7402,"originId":"5c627d00e6aaad2ea76dfb16","articleId":1578,"userId":2646,"content":"寒冬不裁员，急求多名童鞋一起突破前端组二十人","createdAt":1549958400915},{"id":7403,"originId":"5c62d164f53f161dbaeb300f","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1549980004978},{"id":7404,"originId":"5c637a210752e020af942fdb","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1550023201014},{"id":7405,"originId":"5c63ce81f53f161dbaeb33bd","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1550044801293},{"id":7406,"originId":"5c6420180752e020af94349b","articleId":1578,"userId":161,"content":"[@KieSun](/user/KieSun) 已发","createdAt":1550065688160},{"id":7407,"originId":"5c6422e00752e020af9434a5","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1550066400776},{"id":7408,"originId":"5c64cba1f53f161dbaeb3734","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1550109601432},{"id":7409,"originId":"5c652000f53f161dbaeb3a05","articleId":1578,"userId":2646,"content":"小菜求才若渴，欢迎大家投递简历","createdAt":1550131200942},{"id":7410,"originId":"5c657465f53f161dbaeb3bc0","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1550152805779},{"id":7411,"originId":"5c661d20f53f161dbaeb3cbc","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1550196000826},{"id":7412,"originId":"5c667181f53f161dbaeb3fbb","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1550217601269},{"id":7413,"originId":"5c66c5e00752e020af94408c","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1550239200940},{"id":7414,"originId":"5c676ea00752e020af94425c","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1550282400883},{"id":7415,"originId":"5c67c3010752e020af944351","articleId":1578,"userId":2646,"content":"寒冬不裁员，急求多名童鞋一起突破前端组二十人","createdAt":1550304001522},{"id":7416,"originId":"5c6817620752e020af94445b","articleId":1578,"userId":2646,"content":"小菜求才若渴，欢迎大家投递简历","createdAt":1550325602301},{"id":7417,"originId":"5c68c020f53f161dbaeb46d0","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1550368800780},{"id":7418,"originId":"5c691481f53f161dbaeb4825","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1550390401768},{"id":7419,"originId":"5c6968e0f53f161dbaeb49f7","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1550412000956},{"id":7420,"originId":"5c6a11a00752e020af9449be","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1550455200836},{"id":7421,"originId":"5c6a660154155543f0ba5325","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1550476801005},{"id":7422,"originId":"5c6aba60ed5543510be8cc11","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1550498400776},{"id":7423,"originId":"5c6b6320b8913c5110b0c00d","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1550541600348},{"id":7424,"originId":"5c6bb780b8913c5110b0c538","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1550563200872},{"id":7425,"originId":"5c6c0be0ed5543510be8d572","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1550584800801},{"id":7426,"originId":"5c6cb4a0b8913c5110b0ca4f","articleId":1578,"userId":2646,"content":"寒冬不裁员，急求多名童鞋一起突破前端组二十人","createdAt":1550628000824},{"id":7427,"originId":"5c6cc95ce1a81129a7ad88f2","articleId":1578,"userId":1690,"content":"帮顶\r\n可惜有点远 \r\n目前在仓前\r\n3年半前端+nodejs","createdAt":1550633308569},{"id":7428,"originId":"5c6d090033b0b629ac843451","articleId":1578,"userId":2646,"content":"小菜求才若渴，欢迎大家投递简历","createdAt":1550649600846},{"id":7429,"originId":"5c6d5d6033b0b629ac8436dd","articleId":1578,"userId":2646,"content":"寒冬不裁员，急求多名童鞋一起突破前端组二十人","createdAt":1550671200948},{"id":7430,"originId":"5c6e0620e1a81129a7ad9023","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1550714400680},{"id":7431,"originId":"5c6e5a8133b0b629ac843ce8","articleId":1578,"userId":2646,"content":"小菜求才若渴，欢迎大家投递简历","createdAt":1550736001080},{"id":7432,"originId":"5c6eaee1e1a81129a7ad9669","articleId":1578,"userId":2646,"content":"寒冬不裁员，急求多名童鞋一起突破前端组二十人","createdAt":1550757601248},{"id":7433,"originId":"5c6f57a033b0b629ac844145","articleId":1578,"userId":2646,"content":"寒冬不裁员，急求多名童鞋一起突破前端组二十人","createdAt":1550800800390},{"id":7434,"originId":"5c6fac00e1a81129a7ad9af6","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1550822400353},{"id":7435,"originId":"5c700060e1a81129a7ad9c97","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1550844000814},{"id":7436,"originId":"5c70a920e1a81129a7ad9d60","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1550887200369},{"id":7437,"originId":"5c70fd81e1a81129a7ad9e42","articleId":1578,"userId":2646,"content":"寒冬不裁员，急求多名童鞋一起突破前端组二十人","createdAt":1550908801523},{"id":7438,"originId":"5c7151e133b0b629ac84489c","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1550930401040},{"id":7439,"originId":"5c71faa033b0b629ac844921","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1550973600446},{"id":7440,"originId":"5c724f00e1a81129a7ada054","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1550995200327},{"id":7441,"originId":"5c72567c33b0b629ac8449e8","articleId":1578,"userId":107,"content":"帮忙顶一顶","createdAt":1550997116911},{"id":7442,"originId":"5c72a360e1a81129a7ada144","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1551016800799},{"id":7443,"originId":"5c734c20e1a81129a7ada279","articleId":1578,"userId":2646,"content":"小菜求才若渴，欢迎大家投递简历","createdAt":1551060000320},{"id":7444,"originId":"5c73a08005723f5bc27f713c","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1551081600698},{"id":7445,"originId":"5c73f4e1ab86b86ddf6b2ba9","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1551103201477},{"id":7446,"originId":"5c749da0a667ed6d807b9108","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1551146400703},{"id":7447,"originId":"5c74f201ab86b86ddf6b2f99","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1551168001004},{"id":7448,"originId":"5c754660ab86b86ddf6b3149","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1551189600943},{"id":7449,"originId":"5c75ef20a667ed6d807b9719","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1551232800428},{"id":7450,"originId":"5c764380ab86b86ddf6b3666","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1551254400986},{"id":7451,"originId":"5c767f8ba667ed6d807b9d57","articleId":1578,"userId":107,"content":"[@KieSun](/user/KieSun) 有点意思，晚上投一个","createdAt":1551269771310},{"id":7452,"originId":"5c7697efab86b86ddf6b3856","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1551276015841},{"id":7453,"originId":"5c7740a0a667ed6d807b9f1d","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1551319200782},{"id":7454,"originId":"5c779501a667ed6d807ba176","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1551340801012},{"id":7455,"originId":"5c77e96109cd724ef50f194e","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1551362401173},{"id":7456,"originId":"5c7892209959bf50182308a1","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1551405600794},{"id":7457,"originId":"5c78e6805b8cb21491ca4f20","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1551427200752},{"id":7458,"originId":"5c793ae10d249a149624f504","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1551448801100},{"id":7459,"originId":"5c79e3a00d249a149624f5a7","articleId":1578,"userId":2646,"content":"寒冬不裁员，急求多名童鞋一起突破前端组二十人","createdAt":1551492000819},{"id":7460,"originId":"5c7a38000d249a149624f693","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1551513600965},{"id":7461,"originId":"5c7a8c6090c14711cc8c9a2d","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1551535200823},{"id":7462,"originId":"5c7b35205b8cb21491ca53d4","articleId":1578,"userId":2646,"content":"欢迎大家简历砸过来哈！","createdAt":1551578400802},{"id":7463,"originId":"5c7b89805b8cb21491ca5484","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1551600000942},{"id":7464,"originId":"5c7bdde190c14711cc8c9c4a","articleId":1578,"userId":2646,"content":"求简历啦！","createdAt":1551621601262},{"id":7465,"originId":"5c7c86a090c14711cc8c9d9b","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1551664800648},{"id":7466,"originId":"5c7cdb005b8cb21491ca5aa9","articleId":1578,"userId":2646,"content":"小菜求才若渴，欢迎大家投递简历","createdAt":1551686400741},{"id":7467,"originId":"5c7d2f6190c14711cc8ca388","articleId":1578,"userId":2646,"content":"有想来小菜撩撩技术的同学么","createdAt":1551708001072},{"id":7468,"originId":"5c7dd82090c14711cc8ca4a2","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1551751200728},{"id":7469,"originId":"5c7dfddb5b8cb21491ca6015","articleId":1578,"userId":107,"content":"顶一下","createdAt":1551760859318},{"id":7470,"originId":"5c8c806e7ce0df37324288b2","articleId":1578,"userId":2648,"content":"请问招暑期实习吗(后端)","createdAt":1552711790114},{"id":7471,"originId":"5c9124838a587f26b426c8f0","articleId":1578,"userId":2649,"content":"11","createdAt":1553015939925},{"id":7472,"originId":"5c91a9ff96558e26e1b677a9","articleId":1578,"userId":2363,"content":"[@KieSun](/user/KieSun) 还招吗？","createdAt":1553050111193},{"id":7473,"originId":"5c91ad4d96558e26e1b677c6","articleId":1578,"userId":2363,"content":"[@KieSun](/user/KieSun) 简历已投","createdAt":1553050957802},{"id":7474,"originId":"5c92f0208a587f26b426d341","articleId":1578,"userId":2646,"content":"岗位拥有竞争力的薪资和期权，看机会的这里瞧瞧","createdAt":1553133600557},{"id":7475,"originId":"5c908b2d96558e26e1b66de6","articleId":1581,"userId":2651,"content":"我要应聘","createdAt":1552976685707},{"id":7476,"originId":"5c9093f896558e26e1b66e9c","articleId":1581,"userId":2652,"content":"我要应聘\r\n","createdAt":1552978936545},{"id":7477,"originId":"5c90930996558e26e1b66e61","articleId":1582,"userId":2653,"content":"up","createdAt":1552978697122},{"id":7478,"originId":"5c62883305cc322e7b13817f","articleId":1583,"userId":2654,"content":"擅长web后台的同学欢迎投简历哈😝","createdAt":1549961267701},{"id":7479,"originId":"5c8f26907ce0df37324292f7","articleId":1583,"userId":2655,"content":"能加个微信？","createdAt":1552885392543},{"id":7480,"originId":"5a94bd0d2580af301494a88b","articleId":1585,"userId":2307,"content":"面试官人很好，可惜自己技术差了点，秋招再来，顶一个","createdAt":1519697165896},{"id":7481,"originId":"5a94fc7c653c43b91468509c","articleId":1585,"userId":2656,"content":"[@youkongling](/user/youkongling) 加油：）每个技术大佬，都是从雏鸟起飞~","createdAt":1519713404504},{"id":7482,"originId":"5a953ec971327bb413bbff0d","articleId":1585,"userId":785,"content":"成都有职位码？       [~From Frank.Cnode](https://github.com/FourLeafClover/vue-cnode)","createdAt":1519730377155},{"id":7483,"originId":"5a9548912580af301494a8cc","articleId":1585,"userId":2656,"content":"[@FourLeafClover](/user/FourLeafClover) 有职位的，可以投递，会安排面试官评估。","createdAt":1519732881038},{"id":7484,"originId":"5a956e1c653c43b9146850be","articleId":1585,"userId":785,"content":"[@wljray](/user/wljray)        好的，非常感谢。       [~From Frank.Cnode](https://github.com/FourLeafClover/vue-cnode)","createdAt":1519742492537},{"id":7485,"originId":"5a9654ea71327bb413bbff49","articleId":1585,"userId":2657,"content":"杭州2年web开发经验 有机会嘛","createdAt":1519801578555},{"id":7486,"originId":"5a966920653c43b914685106","articleId":1585,"userId":807,"content":"[@wljray](/user/wljray) 一般几轮","createdAt":1519806752996},{"id":7487,"originId":"5a977be371327bb413bbffac","articleId":1585,"userId":2656,"content":"[@lpm0205](/user/lpm0205) ，有，1-2年的候选人，因为经验原因，肯定比不上三年以上候选人，会更注重考察技术基础和成长潜力。","createdAt":1519877091420},{"id":7488,"originId":"5a977c3b71327bb413bbffae","articleId":1585,"userId":2656,"content":"[@walter211](/user/walter211) 一般5轮左右，4轮技术面，从一线工程师电面->TL电面->部门主管面->交叉面->HR面。","createdAt":1519877179168},{"id":7489,"originId":"5a977d608d6e16e56bb80a2d","articleId":1585,"userId":1947,"content":"node后端有机会没？","createdAt":1519877472858},{"id":7490,"originId":"5a97800c8d6e16e56bb80a30","articleId":1585,"userId":2656,"content":"[@oyosc](/user/oyosc) 有。这边也招全栈方面人才。","createdAt":1519878156008},{"id":7491,"originId":"5aa0e04ef5dfc27d7ad985f4","articleId":1585,"userId":2656,"content":"再不投递内推，校招就晚了其它同学一步","createdAt":1520492622695},{"id":7492,"originId":"5ab4bf1cf5dfc27d7ad98b0a","articleId":1585,"userId":2656,"content":"招聘还在继续，欢迎投递~","createdAt":1521794844242},{"id":7493,"originId":"5adff4637b0e8dc508cca757","articleId":1585,"userId":2656,"content":"继续招聘，欢迎投递~","createdAt":1524626531907},{"id":7494,"originId":"5adffb13c5debbc0086fc8c6","articleId":1585,"userId":1071,"content":"已经在阿里人才库，之前拒过，能投？","createdAt":1524628243793},{"id":7495,"originId":"5ae20f6b1b02288048bd0a4c","articleId":1585,"userId":973,"content":"mark  \n ☆ 来自微信小程序 [cnode助手](https://github.com/strawbreey/mpvue-cnode)","createdAt":1524764523819},{"id":7496,"originId":"5ae31b40adea947348e75eba","articleId":1585,"userId":2656,"content":"[@richenlin](/user/richenlin) 能投的。不过如果是最近刚刚投递的，第一面未通过的，建议半年/一年后再试。","createdAt":1524833088109},{"id":7497,"originId":"5b1f8fef8a4f51e140d94776","articleId":1585,"userId":2656,"content":"继续招聘","createdAt":1528795119467},{"id":7498,"originId":"5b3490eca1308bf723aa3a44","articleId":1585,"userId":2656,"content":"继续招聘","createdAt":1530171628495},{"id":7499,"originId":"5b3746b45c8f1ea723a56b26","articleId":1585,"userId":2658,"content":"前几天刚面完阿里其他部门的，面了三轮，让回来等通知，好几天了。现在我能投这个部门么？","createdAt":1530349236076},{"id":7500,"originId":"5b3c47f0ac8bc1e12411463b","articleId":1585,"userId":2656,"content":"[@MEDIOCAL](/user/MEDIOCAL) 可以投递，只要上一轮流程结束。亲可以给我简历。我看看目前状态。","createdAt":1530677232529},{"id":7501,"originId":"5b5166e74b9cd4200f942134","articleId":1585,"userId":2656,"content":"校招火热内推中","createdAt":1532061415225},{"id":7502,"originId":"5b72a8dc792f59ae501bf977","articleId":1585,"userId":2656,"content":"上海有独立小队规划，欢迎专家级同学","createdAt":1534240988314},{"id":7503,"originId":"5b7cbdd6632c7f422e5b8062","articleId":1585,"userId":1071,"content":"之前已经过了5面，定P7+，最后告诉我没有合适岗位，唉","createdAt":1534901718489},{"id":7504,"originId":"5b87be42fad9359e2e83132e","articleId":1585,"userId":2656,"content":"[@richenlin](/user/richenlin) 可以试试我这边，亲有没有意向？","createdAt":1535622722164},{"id":7505,"originId":"5bc84db237a6965f5905236b","articleId":1585,"userId":2656,"content":"继续招聘","createdAt":1539853746878},{"id":7506,"originId":"5be2566521d75b74609f4c4a","articleId":1585,"userId":2656,"content":"继续招聘","createdAt":1541559909126},{"id":7507,"originId":"5bea3e422fed25406c25dfbc","articleId":1585,"userId":2656,"content":"继续招聘","createdAt":1542078018686},{"id":7508,"originId":"5bece556a05b0e0ae443b532","articleId":1585,"userId":2656,"content":"前端部门直招","createdAt":1542251862653},{"id":7509,"originId":"5c176410f3d48d2397c120d3","articleId":1585,"userId":2656,"content":"前端部门直招","createdAt":1545036816401},{"id":7510,"originId":"5c1cb4a476c4964062a1c54e","articleId":1585,"userId":2656,"content":"继续招聘中","createdAt":1545385124825},{"id":7511,"originId":"5c2dd1ac5bf06c5e7e3f0cd7","articleId":1585,"userId":2656,"content":"更新","createdAt":1546506668795},{"id":7512,"originId":"5c6527170752e020af94390b","articleId":1585,"userId":2656,"content":"支付宝20届校招即将开始~~ 欢迎大家预投","createdAt":1550133015817},{"id":7513,"originId":"5c6d0716e1a81129a7ad8bc5","articleId":1585,"userId":2656,"content":"up下","createdAt":1550649110489},{"id":7514,"originId":"5c7c94c790c14711cc8c9ec6","articleId":1585,"userId":2656,"content":"支付宝20届校招即将开始~","createdAt":1551668423897},{"id":7515,"originId":"5c875ed27ce0df37324273b5","articleId":1585,"userId":2307,"content":"大佬又开始招聘，顶一个，很好的面试官\r\n","createdAt":1552375506801},{"id":7516,"originId":"5c875f5eacb681372d417583","articleId":1585,"userId":2307,"content":"借个楼，想来滴滴实习的可以试试：[滴滴出行网约车技术部招聘前端实习生(2020年或之后毕业)](https://cnodejs.org/topic/5c875cedacb681372d417550)","createdAt":1552375646589},{"id":7517,"originId":"5c8a63097ce0df3732428086","articleId":1585,"userId":2656,"content":"[@youkongling](/user/youkongling) 感谢","createdAt":1552573193440},{"id":7518,"originId":"5c8f10b8acb681372d41939a","articleId":1585,"userId":2656,"content":"部门直招中","createdAt":1552879800118},{"id":7519,"originId":"5c85d5227ce0df3732426c9e","articleId":1587,"userId":1138,"content":"值得推荐加入","createdAt":1552274722545},{"id":7520,"originId":"5c899e5bacb681372d417da8","articleId":1587,"userId":1138,"content":"顶！d=====(￣▽￣*)b","createdAt":1552522843416},{"id":7521,"originId":"5c8b0b25acb681372d41846b","articleId":1587,"userId":1138,"content":"捞一捞","createdAt":1552616229562},{"id":7522,"originId":"5c8cb0657ce0df373242898c","articleId":1587,"userId":1138,"content":"再捞捞","createdAt":1552724069904},{"id":7523,"originId":"5c85da11acb681372d416e08","articleId":1588,"userId":98,"content":"随缘","createdAt":1552275985859},{"id":7524,"originId":"5c85dbe17ce0df3732426ce1","articleId":1588,"userId":1138,"content":"[@zengming00](/user/zengming00) 加油吧","createdAt":1552276449084},{"id":7525,"originId":"5c899e43acb681372d417da2","articleId":1588,"userId":1138,"content":"顶！d=====(￣▽￣*)b","createdAt":1552522819985},{"id":7526,"originId":"5c89e8afacb681372d417f68","articleId":1588,"userId":352,"content":"可惜不在同一个地方<br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1552541871000},{"id":7527,"originId":"5c89ffe57ce0df3732427e32","articleId":1588,"userId":1138,"content":"[@yangxinSamsara](/user/yangxinSamsara) 没事啊 也非常欢迎交流啊 加您微信了","createdAt":1552547813326},{"id":7528,"originId":"5c8b0b15acb681372d418462","articleId":1588,"userId":1138,"content":"捞一捞","createdAt":1552616213261},{"id":7529,"originId":"5c8cb04d7ce0df3732428987","articleId":1588,"userId":1138,"content":"再捞捞","createdAt":1552724045659},{"id":7530,"originId":"5c772f5ba667ed6d807b9e71","articleId":1589,"userId":1270,"content":"公司待遇发展前景都非常好，需要3年以上前端实际开发经验","createdAt":1551314779430},{"id":7531,"originId":"5c7758f6a667ed6d807b9fc6","articleId":1589,"userId":2661,"content":"地点呢\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1551325430446},{"id":7532,"originId":"5c7b8cb190c14711cc8c9b71","articleId":1589,"userId":1270,"content":"顶","createdAt":1551600817014},{"id":7533,"originId":"5c7c8c495b8cb21491ca569d","articleId":1589,"userId":1270,"content":"up","createdAt":1551666249580},{"id":7534,"originId":"5c7f466c5b8cb21491ca65aa","articleId":1589,"userId":1270,"content":"ding","createdAt":1551844972550},{"id":7535,"originId":"5c8af86f7ce0df373242812d","articleId":1589,"userId":1270,"content":"顶","createdAt":1552611439484},{"id":7536,"originId":"5c8af83b7ce0df3732428127","articleId":1590,"userId":1270,"content":"顶","createdAt":1552611387414},{"id":7537,"originId":"5c87976c7ce0df3732427597","articleId":1591,"userId":107,"content":"已发邮件哦","createdAt":1552389996220},{"id":7538,"originId":"5c89fdf5acb681372d41804c","articleId":1591,"userId":2662,"content":"[@fantasticsoul](/user/fantasticsoul) 已查收！","createdAt":1552547317523},{"id":7539,"originId":"5c875d3a7ce0df373242739c","articleId":1593,"userId":2307,"content":"想来滴滴实习的小伙伴可以来试试哦","createdAt":1552375098075},{"id":7540,"originId":"5c875d4bacb681372d417555","articleId":1593,"userId":2307,"content":"有什么想问的都可以联系我","createdAt":1552375115684},{"id":7541,"originId":"5c875d57acb681372d41755b","articleId":1593,"userId":2307,"content":"觉得比较私密的信息，不太好公开讨论的，可以邮箱发给我","createdAt":1552375127160},{"id":7542,"originId":"5c8768e27ce0df3732427409","articleId":1593,"userId":2664,"content":"mark","createdAt":1552378082433},{"id":7543,"originId":"5c88aae67ce0df3732427939","articleId":1593,"userId":2665,"content":"实习地点是北京吗？","createdAt":1552460518689},{"id":7544,"originId":"5c8797ec7ce0df37324275a0","articleId":1595,"userId":107,"content":"你好，已发送到你的邮箱哦\r\n","createdAt":1552390124982},{"id":7545,"originId":"5c87165d7ce0df37324271bb","articleId":1597,"userId":2355,"content":"欢迎同学们加入我们~","createdAt":1552356957004},{"id":7546,"originId":"5c80c98290c14711cc8cb329","articleId":1600,"userId":16,"content":"坑还在不","createdAt":1551944066708},{"id":7547,"originId":"5c6e4124e1a81129a7ad92c1","articleId":1604,"userId":2489,"content":"机会不多，大家抓紧","createdAt":1550729508247},{"id":7548,"originId":"5c7cdb4d5b8cb21491ca5aac","articleId":1604,"userId":2489,"content":"顶","createdAt":1551686477231},{"id":7549,"originId":"5baaf7db37a6965f59051c8b","articleId":1606,"userId":2672,"content":"欢迎感兴趣的同学继续投递简历！","createdAt":1537931227267},{"id":7550,"originId":"5bbad6d49545eaf107b9c8e9","articleId":1606,"userId":2672,"content":"有React、Vue经验的同学欢迎投递简历","createdAt":1538971348662},{"id":7551,"originId":"5be2401a21d75b74609f4b2a","articleId":1606,"userId":2672,"content":"欢迎感兴趣的同学继续砸简历！","createdAt":1541554202668},{"id":7552,"originId":"5c6a740954155543f0ba53b3","articleId":1606,"userId":2672,"content":"节后继续，欢迎投递","createdAt":1550480393065},{"id":7553,"originId":"5c7c8e485b8cb21491ca56bf","articleId":1606,"userId":2673,"content":"[@J28848](/user/J28848) 刚刚投递，望回复","createdAt":1551666760433},{"id":7554,"originId":"5c49773f3b948a2b4ab712a2","articleId":1609,"userId":2344,"content":"老哥，要求好歹发下","createdAt":1548318527597},{"id":7555,"originId":"5c4992f03b948a2b4ab713ad","articleId":1609,"userId":2543,"content":"[@nodeProgrammer](/user/nodeProgrammer) 您对哪个岗位感兴趣啊？我可以把岗位要求发给您。","createdAt":1548325616907},{"id":7556,"originId":"5c63c9dff53f161dbaeb3372","articleId":1609,"userId":2543,"content":"顶一下","createdAt":1550043615747},{"id":7557,"originId":"5c6a5e6c54155543f0ba52a4","articleId":1609,"userId":2543,"content":"顶一下\r\n","createdAt":1550474860134},{"id":7558,"originId":"5c6bbf76b8913c5110b0c586","articleId":1609,"userId":2543,"content":"不同的岗位要求不同，如果想了解可以邮件联系噢～","createdAt":1550565238434},{"id":7559,"originId":"5c77ae6004a28b40c4f6aa22","articleId":1609,"userId":2543,"content":"ding ","createdAt":1551347296577},{"id":7560,"originId":"5c503fa93819b801aa5a28ad","articleId":1611,"userId":124,"content":"好单位","createdAt":1548763049613},{"id":7561,"originId":"5c50f845a4647e02328f23e2","articleId":1611,"userId":59,"content":"我外派上海 Riot 呆过两个星期，零食很好吃。小姐姐天天订的餐也很好吃。太古汇那边环境不错。","createdAt":1548810309100},{"id":7562,"originId":"5c515b0a3819b801aa5a2d33","articleId":1611,"userId":2676,"content":"[@LuckyZhangWeiwei](/user/LuckyZhangWeiwei) 不来试试嘛\r\n[@liangtongzhuo](/user/liangtongzhuo) 下次来欢迎找我呀\r\n","createdAt":1548835594543},{"id":7563,"originId":"5c52945205cc322e7b136960","articleId":1611,"userId":19,"content":"作为一个在黄金分段带了6年的老玩家，真的好心动。也真心喜欢这个游戏。赞一个！","createdAt":1548915794560},{"id":7564,"originId":"5c52950f05cc322e7b136969","articleId":1611,"userId":2676,"content":"[@luanxuechao](/user/luanxuechao) 谢谢，不来试试么","createdAt":1548915983795},{"id":7565,"originId":"5c52b22905cc322e7b136a6e","articleId":1611,"userId":220,"content":"深度lol玩家,哈哈,大头玩了3k多盘..\r\n1.你热爱游戏，不一定非要是LoL，但是这点很重要很重要\r\n2.英语要好\r\n3.在后端、移动端、大数据、DevOps其中某一方面有一定造诣\r\n\r\n\r\n高度匹配! ","createdAt":1548923433900},{"id":7566,"originId":"5c52b4f905cc322e7b136a96","articleId":1611,"userId":2676,"content":"别想了，来试试，还发点券你敢信 [@qxl1231](/user/qxl1231) ","createdAt":1548924153601},{"id":7567,"originId":"5c52b57e05cc322e7b136aa9","articleId":1611,"userId":220,"content":"[@aojiaotage](/user/aojiaotage) 我给你发了邮件了,要不加个微信?","createdAt":1548924286985},{"id":7568,"originId":"5c52da39e6aaad2ea76de53d","articleId":1611,"userId":2677,"content":"7年经验，5年领导。有种 五年模拟三年高考 的感觉 =、=","createdAt":1548933689284},{"id":7569,"originId":"5c56f65205cc322e7b137336","articleId":1611,"userId":753,"content":"其实我想找个前端的岗位","createdAt":1549203026212},{"id":7570,"originId":"5c60d6e005cc322e7b137ba1","articleId":1611,"userId":2676,"content":"[@moshuchao](/user/moshuchao) 现在纯前端的岗位倒是木有哇。。","createdAt":1549850336102},{"id":7571,"originId":"5c6382200752e020af94302f","articleId":1611,"userId":2676,"content":"年后大家招聘热情很高诶","createdAt":1550025248784},{"id":7572,"originId":"5c667d7b0752e020af943e76","articleId":1611,"userId":2676,"content":"日常顶一顶","createdAt":1550220667515},{"id":7573,"originId":"5c751b42a667ed6d807b94de","articleId":1611,"userId":2676,"content":"再顶一哈z","createdAt":1551178562727},{"id":7574,"originId":"5c64d2abf53f161dbaeb37af","articleId":1618,"userId":554,"content":"感兴趣朋友欢迎添加我个人微信号：fcsboy","createdAt":1550111403848},{"id":7575,"originId":"5c1b39e03898674067a765da","articleId":1619,"userId":2423,"content":"node有没有初中级岗\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1545288160236},{"id":7576,"originId":"5c205a7176c4964062a1cf64","articleId":1619,"userId":1928,"content":"[@JiaWeiBi](/user/JiaWeiBi) 有的~可以发一份简历或者加微信进一步沟通一下哦","createdAt":1545624177068},{"id":7577,"originId":"5c64381b0752e020af9434ff","articleId":1619,"userId":1928,"content":"捞一下，持续招聘的哦","createdAt":1550071835851},{"id":7578,"originId":"5c47fd2d3b948a2b4ab70bc8","articleId":1620,"userId":2684,"content":"Serverless是个好东西","createdAt":1548221741648},{"id":7579,"originId":"5c6409800752e020af94340a","articleId":1620,"userId":2625,"content":"Serverless大势所趋","createdAt":1550059904632},{"id":7580,"originId":"5c0a7076d3b8ab334e8dbf2d","articleId":1621,"userId":2551,"content":"大量招 ","createdAt":1544188022922},{"id":7581,"originId":"5c0ba089f3d48d2397c0f3ed","articleId":1621,"userId":2551,"content":"从初级到高级   年底入职更容易奥","createdAt":1544265865061},{"id":7582,"originId":"5c0dc669f3d48d2397c0f7c2","articleId":1621,"userId":2551,"content":"顶下持续招人","createdAt":1544406633413},{"id":7583,"originId":"5c133a20f3d48d2397c1128c","articleId":1621,"userId":2551,"content":"持续招人","createdAt":1544763936357},{"id":7584,"originId":"5c18b49b7ec239239ff580d3","articleId":1621,"userId":2183,"content":"前端什么要求呢？","createdAt":1545122971980},{"id":7585,"originId":"5c18d8b2f3d48d2397c12a3c","articleId":1621,"userId":161,"content":"嗯，前端有什么要求，有Node相关的岗位么或者全栈相关的！要求怎么样","createdAt":1545132210894},{"id":7586,"originId":"5c19cb2176c4964062a1b34e","articleId":1621,"userId":2551,"content":"[@LoneyHeart](/user/LoneyHeart) 一年以上工作经验哈 特别优秀不限","createdAt":1545194273403},{"id":7587,"originId":"5c19cb383898674067a75d83","articleId":1621,"userId":2551,"content":"[@tzbcf](/user/tzbcf) vue react 一样即可","createdAt":1545194296269},{"id":7588,"originId":"5c19db8576c4964062a1b3b8","articleId":1621,"userId":161,"content":"[@xiaoshude](/user/xiaoshude) 两年前端。半年小程序。八个月Node。会vue.能面试上么。哈哈","createdAt":1545198469232},{"id":7589,"originId":"5c1a5e0d3898674067a7627f","articleId":1621,"userId":2551,"content":"[@tzbcf](/user/tzbcf) 来份简历哈","createdAt":1545231885367},{"id":7590,"originId":"5c1aefa276c4964062a1b8fe","articleId":1621,"userId":161,"content":"[@xiaoshude](/user/xiaoshude) 好的。回去发给你！试试机遇！哈哈","createdAt":1545269154211},{"id":7591,"originId":"5c1b59b476c4964062a1bdcd","articleId":1621,"userId":2183,"content":"[@xiaoshude](/user/xiaoshude) 已经给你们投了简历，没有回我","createdAt":1545296308608},{"id":7592,"originId":"5c1cc3573898674067a76ec9","articleId":1621,"userId":1212,"content":"有Node.js的岗位吗","createdAt":1545388887374},{"id":7593,"originId":"5c6294b605cc322e7b138253","articleId":1621,"userId":2685,"content":"想尝试下","createdAt":1549964470391},{"id":7594,"originId":"5b28745d29e6e510415b2b90","articleId":1623,"userId":2444,"content":"顶一下。 没人回复。","createdAt":1529377885177},{"id":7595,"originId":"5b84efe408d0b0fb2d8e6c76","articleId":1623,"userId":2444,"content":"顶一下。 没人回复。","createdAt":1535438820230},{"id":7596,"originId":"5b8757d12a585e4e2f26ffd9","articleId":1623,"userId":2444,"content":"每日一顶","createdAt":1535596497260},{"id":7597,"originId":"5b8ca0fd4c469ebf3275d0d4","articleId":1623,"userId":2444,"content":"每周一钉","createdAt":1535942909874},{"id":7598,"originId":"5b95cb344cdb88f72f5a91ff","articleId":1623,"userId":2444,"content":"每日一顶","createdAt":1536543540920},{"id":7599,"originId":"5b9b12c7ce9d14c2254dfa60","articleId":1623,"userId":2444,"content":"每周一顶","createdAt":1536889543163},{"id":7600,"originId":"5ba059818f5b0c1c59ea0f55","articleId":1623,"userId":2444,"content":"每周一顶","createdAt":1537235329562},{"id":7601,"originId":"5ba992fb37a6965f59051c3b","articleId":1623,"userId":2444,"content":"每周一顶","createdAt":1537839867763},{"id":7602,"originId":"5bbabfaf9545eaf107b9c8db","articleId":1623,"userId":2444,"content":"每周一顶","createdAt":1538965423089},{"id":7603,"originId":"5bc85c2537a6965f59052370","articleId":1623,"userId":2444,"content":"每周一顶","createdAt":1539857445695},{"id":7604,"originId":"5bed5bd5a05b0e0ae443b9c0","articleId":1623,"userId":2444,"content":"定","createdAt":1542282197948},{"id":7605,"originId":"5c076e03d3b8ab334e8daf88","articleId":1623,"userId":2444,"content":"顶","createdAt":1543990787621},{"id":7606,"originId":"5c076e3b1c62d83349350fe3","articleId":1623,"userId":2444,"content":"最近特别缺人哎","createdAt":1543990843462},{"id":7607,"originId":"5c0f30bcf3d48d2397c0fec7","articleId":1623,"userId":2444,"content":"定","createdAt":1544499388105},{"id":7608,"originId":"5c2decd33898674067a7acd5","articleId":1623,"userId":2444,"content":"特别缺人哎。顶","createdAt":1546513619439},{"id":7609,"originId":"5c2e08ea3898674067a7adc9","articleId":1623,"userId":161,"content":"p7级别太高了啦","createdAt":1546520810454},{"id":7610,"originId":"5c3d432e3898674067a7f397","articleId":1623,"userId":2444,"content":"[@tzbcf](/user/tzbcf)  也招p6啊，跪求简历。。。 我们急缺一大波人","createdAt":1547518766940},{"id":7611,"originId":"5c3d433b3898674067a7f39c","articleId":1623,"userId":2444,"content":"顶一波， 急缺人。 求简历","createdAt":1547518779109},{"id":7612,"originId":"5c5f791805cc322e7b137999","articleId":1623,"userId":107,"content":"顶，有点意思","createdAt":1549760792268},{"id":7613,"originId":"5c52b42e05cc322e7b136a8c","articleId":1624,"userId":220,"content":"不错啊","createdAt":1548923950179},{"id":7614,"originId":"5c4d44f3f9075c1ef71387d1","articleId":1626,"userId":2688,"content":"有几个同学给我发了简历，觉得招聘信息里面写的技术要求不明确，实际上我们用了很多javascript的框架和开源项目，但是最挑战的事情实际上是把javascript作为一个编程语言，开发模式很类似c#或java这样的面向对象语言，就是以前典型的c/s架构，只是现在的client运行中browser里面。欢迎大家加入我们。","createdAt":1548567795640},{"id":7615,"originId":"5c4918266955112b994383a2","articleId":1628,"userId":2689,"content":"此职位2019年1季度前接收实习生或者应届生申请。","createdAt":1548294182850},{"id":7616,"originId":"5b9f6ee88f5b0c1c59ea0f2b","articleId":1629,"userId":2140,"content":"顶顶","createdAt":1537175272478},{"id":7617,"originId":"5ba0db8737a6965f59051aaf","articleId":1629,"userId":2140,"content":"每日一顶","createdAt":1537268615768},{"id":7618,"originId":"5ba47c5d8f5b0c1c59ea1069","articleId":1629,"userId":2140,"content":"顶下","createdAt":1537506397310},{"id":7619,"originId":"5ba9965015e4fd1923f48a18","articleId":1629,"userId":2140,"content":"每周两顶","createdAt":1537840720874},{"id":7620,"originId":"5baede6415e4fd1923f48b6b","articleId":1629,"userId":2140,"content":" 每周两顶","createdAt":1538186852682},{"id":7621,"originId":"5bbee589ede204052db80488","articleId":1629,"userId":2140,"content":"国庆归来顶","createdAt":1539237257582},{"id":7622,"originId":"5bc9baab9545eaf107b9ccd4","articleId":1629,"userId":2140,"content":"超级缺人喔","createdAt":1539947179157},{"id":7623,"originId":"5bcee7de97da434450aecb99","articleId":1629,"userId":2421,"content":"node.js做保险业务的要么","createdAt":1540286430318},{"id":7624,"originId":"5bcf026a7a248c7f50334c93","articleId":1629,"userId":1947,"content":"[@nodecaiBird](/user/nodecaiBird) 现在hc收紧了，难度瞬间提高...","createdAt":1540293226983},{"id":7625,"originId":"5bcfe7b789665c365e94422f","articleId":1629,"userId":2421,"content":"[@oyosc](/user/oyosc)   啥意思  不招人了","createdAt":1540351927238},{"id":7626,"originId":"5bd2ea8b89665c365e94431a","articleId":1629,"userId":2140,"content":"蚂蚁现在还没有停止社招==，赶紧的","createdAt":1540549259647},{"id":7627,"originId":"5bdfb280646a05745b7b833d","articleId":1629,"userId":2140,"content":"继续招聘","createdAt":1541386880369},{"id":7628,"originId":"5bdfc554646a05745b7b8429","articleId":1629,"userId":516,"content":"[@rdmclin2](/user/rdmclin2) nodejs招聘p几以上的？","createdAt":1541391700500},{"id":7629,"originId":"5be3c58a21d75b74609f55ab","articleId":1629,"userId":2140,"content":"[@nnliang](/user/nnliang) 都招的，5，6，7，8都可以投","createdAt":1541653898986},{"id":7630,"originId":"5be94ac72fed25406c25dc4b","articleId":1629,"userId":2140,"content":"顶顶","createdAt":1542015687603},{"id":7631,"originId":"5beba7d0be1b120abac5920d","articleId":1629,"userId":2421,"content":"[@rdmclin2](/user/rdmclin2)  上海地区node.js需要什么技术要求","createdAt":1542170576102},{"id":7632,"originId":"5bf4ce88e6481c5709f5dc09","articleId":1629,"userId":2140,"content":"[@nodecaiBird](/user/nodecaiBird) Node.js职位本部门在上海目前不招收，技术要求请参考上文Node.js的职位要求","createdAt":1542770312202},{"id":7633,"originId":"5bfb559bd6104a4f803a1690","articleId":1629,"userId":2140,"content":"继续招聘","createdAt":1543198107489},{"id":7634,"originId":"5c015890d6104a4f803a34fb","articleId":1629,"userId":380,"content":"校招入职才半年去招聘的话会不会不太好？","createdAt":1543592080120},{"id":7635,"originId":"5c1381c1f3d48d2397c1154b","articleId":1629,"userId":2140,"content":"[@XGHeaven](/user/XGHeaven) 看个人了，如果有好的机会，为什么不争取一下呢?","createdAt":1544782273121},{"id":7636,"originId":"5c1381d57ec239239ff56f1e","articleId":1629,"userId":2140,"content":"继续招聘，感兴趣的同学请发邮件","createdAt":1544782293569},{"id":7637,"originId":"5c1f667676c4964062a1cbe7","articleId":1629,"userId":2140,"content":"感兴趣的同学欢迎投递简历喔","createdAt":1545561718817},{"id":7638,"originId":"5c1f92c03898674067a77615","articleId":1629,"userId":161,"content":"可惜不在这三个地方不好面试","createdAt":1545573056618},{"id":7639,"originId":"5c20b21a3898674067a77cf0","articleId":1629,"userId":2630,"content":"Node.js 开发专家 这个仅限杭州吗？北京不招么？ [@rdmclin2](/user/rdmclin2) ","createdAt":1545646618580},{"id":7640,"originId":"5c35e1993898674067a7d4ba","articleId":1629,"userId":2140,"content":"[@tzbcf](/user/tzbcf) 前面几面都是电话面，最后一面要过来杭州，公司会进行报销","createdAt":1547035033376},{"id":7641,"originId":"5c37f0cd3898674067a7de77","articleId":1629,"userId":161,"content":"[@rdmclin2](/user/rdmclin2) 我两年半的前端，一年还差点node后端开发经验。想投node这个岗位。可能只有p5的实力。可以投么？有什么建议吗？","createdAt":1547169997340},{"id":7642,"originId":"5c468b516955112b994378c4","articleId":1629,"userId":2140,"content":"[@tzbcf](/user/tzbcf) P5岗位需要亮眼的简历","createdAt":1548127057592},{"id":7643,"originId":"5b8e5b9337b3005a0b0e6b6e","articleId":1630,"userId":2690,"content":"up","createdAt":1536056211610},{"id":7644,"originId":"5b908d8682f0728f354d748b","articleId":1630,"userId":2690,"content":"up","createdAt":1536200070168},{"id":7645,"originId":"5b95cf8937b3005a0b0e6d2d","articleId":1630,"userId":2690,"content":"up","createdAt":1536544649543},{"id":7646,"originId":"5b99ff4d37b3005a0b0e6f0d","articleId":1630,"userId":2690,"content":"up","createdAt":1536819021750},{"id":7647,"originId":"5b9b74e28f5b0c1c59ea0ddb","articleId":1630,"userId":2690,"content":"up","createdAt":1536914658991},{"id":7648,"originId":"5b9f02cd8f5b0c1c59ea0eee","articleId":1630,"userId":2690,"content":"up","createdAt":1537147597529},{"id":7649,"originId":"5ba0553e37a6965f59051a7a","articleId":1630,"userId":2690,"content":"up","createdAt":1537234238129},{"id":7650,"originId":"5ba1a48e15e4fd1923f488e9","articleId":1630,"userId":2690,"content":"up","createdAt":1537320078372},{"id":7651,"originId":"5ba5a81f15e4fd1923f489b1","articleId":1630,"userId":2690,"content":"up","createdAt":1537583135813},{"id":7652,"originId":"5ba9b2a037a6965f59051c4c","articleId":1630,"userId":153,"content":"哈哈哈，想知道需要校招生么，可以慢慢学","createdAt":1537847968881},{"id":7653,"originId":"5c414f85a4d44449266b24bd","articleId":1630,"userId":562,"content":"只招主程嘛 ","createdAt":1547784069894},{"id":7654,"originId":"5c45c3443b948a2b4ab7034b","articleId":1630,"userId":2691,"content":"棋牌这个是不是有点灰色地带啊？？ 灰色地带风险是不是特别大呢","createdAt":1548075844936},{"id":7655,"originId":"5c4578446955112b994374c3","articleId":1631,"userId":2401,"content":"欢迎更多大侠加入。。。","createdAt":1548056644832},{"id":7656,"originId":"587d8f0f9f92195c1bfa0021","articleId":1632,"userId":1947,"content":"你们现在还招吗？之前你们人事联系过我，然后后面就没消息了，后面我问你们HR，也是突然就没回了....","createdAt":1484623631285},{"id":7657,"originId":"589935565dfbcdfa083b3fef","articleId":1632,"userId":2381,"content":"[@oyosc](/user/oyosc) 现在还招哦~把你的资料发我邮箱我查查看吧。linlvting@yiihua.com","createdAt":1486435670049},{"id":7658,"originId":"5899e93df46268be08aea5a0","articleId":1632,"userId":98,"content":"不要让HR为难程序猿，程序猿写的是程序不是文章","createdAt":1486481725748},{"id":7659,"originId":"589bbe285dfbcdfa083b40b8","articleId":1632,"userId":1947,"content":"[@Tia0401](/user/Tia0401) 嗯发过去了","createdAt":1486601768660},{"id":7660,"originId":"58b513c95b904b25651b39c7","articleId":1632,"userId":2381,"content":"[@zengming00](/user/zengming00)  哈哈~我们家HR妹纸不会为难攻城狮们的~","createdAt":1488262089494},{"id":7661,"originId":"58c7a25679f557ff16f0f2f2","articleId":1632,"userId":2381,"content":"嘤嘤嘤，HR妹纸都快要自己撸起袖子写 Node.js 了~~~~~~~~~~~~~\r\n","createdAt":1489478230568},{"id":7662,"originId":"58c7b4b679f557ff16f0f306","articleId":1632,"userId":1947,"content":"[@Tia0401](/user/Tia0401) 唉，一直想进贵公司，但就是不合适...","createdAt":1489482934824},{"id":7663,"originId":"58c8897468828084780013f0","articleId":1632,"userId":2535,"content":"1年node经验的你们考虑吗？","createdAt":1489537396812},{"id":7664,"originId":"58c8a64a06dbd608756d0dbd","articleId":1632,"userId":2381,"content":"[@Kevalin](/user/Kevalin) 嗯，会考虑的~您是后端开发的吗！？可以丢简历给我哈~linlvting@yiihua.com\r\n","createdAt":1489544778701},{"id":7665,"originId":"58c8d660e0cfa8974a261332","articleId":1632,"userId":2535,"content":"[@Tia0401](/user/Tia0401) 对的后端","createdAt":1489557088588},{"id":7666,"originId":"58c8d88c79f557ff16f0f35f","articleId":1632,"userId":347,"content":"帮顶一下","createdAt":1489557644752},{"id":7667,"originId":"58c9140706dbd608756d0e04","articleId":1632,"userId":2381,"content":"[@JoV5](/user/JoV5) 谢谢\\(￣︶￣*\\))支持吖","createdAt":1489572871125},{"id":7668,"originId":"58c942ac59017af119c1d30c","articleId":1632,"userId":2692,"content":"虽然进不了贵公司，但还是顶一下\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1489584812439},{"id":7669,"originId":"58c9f5207dee71e5193a5384","articleId":1632,"userId":2381,"content":"[@Harveytwo](/user/Harveytwo) 情不自禁留下感激的lui水！","createdAt":1489630496683},{"id":7670,"originId":"58ca5d97246a2aeb194a5451","articleId":1632,"userId":2693,"content":"很好的公司，我很喜欢。","createdAt":1489657239407},{"id":7671,"originId":"58ca6b38ef3f9df178e0e26d","articleId":1632,"userId":347,"content":"帮顶","createdAt":1489660728590},{"id":7672,"originId":"58ca6fba7dee71e5193a53bc","articleId":1632,"userId":2694,"content":"去过，非常高大上的公司，美女很多。技术老大是大牛，想好好发展的可以去试试。","createdAt":1489661882678},{"id":7673,"originId":"58d8bdcd6f8b9bf02d1d0b3d","articleId":1632,"userId":2381,"content":"[@wolfjung](/user/wolfjung) 谢谢支持！","createdAt":1490599373683},{"id":7674,"originId":"5913d8adba8670562a40ef29","articleId":1632,"userId":2381,"content":"[@JoV5](/user/JoV5) 谢谢亲支持了！","createdAt":1494472877620},{"id":7675,"originId":"5927ed08855efbac2cf7a3da","articleId":1632,"userId":2695,"content":"看上去是我喜欢的氛围，好棒的公司！学习nodejs去了～","createdAt":1495788808540},{"id":7676,"originId":"59376249538dbcaa6bc7ddac","articleId":1632,"userId":2423,"content":"应届本科要么？在外面实习了一段时间，不知道算不算得上一年经验，一直做后台php,c++,java都学过，也自学node，做过一些东西\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1496801865434},{"id":7677,"originId":"5a7fb5db497a08f571384fb4","articleId":1632,"userId":2381,"content":"[@JiaWeiBi](/user/JiaWeiBi) 目前需要岗位有一定游戏开发工作经验的，所以日后有合适机会希望能够再合作了！","createdAt":1518319067904},{"id":7678,"originId":"5a93cc21653c43b914685024","articleId":1632,"userId":2696,"content":"挺好的公司，老板很慷慨，HR小姐姐很美丽~业务发展很好，福利也很好~~ \r\n汇总一句话就是：有钱有事业有成长，快来哈~","createdAt":1519635489045},{"id":7679,"originId":"5bff9241d6104a4f803a2cae","articleId":1632,"userId":2423,"content":"现在还招人么\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1543475777413},{"id":7680,"originId":"5c4569c46955112b994373c9","articleId":1632,"userId":2381,"content":"[@JiaWeiBi](/user/JiaWeiBi) 目前正在招哦！还有需求的话可以发给我简历哈：hr@yiihua.com","createdAt":1548052932182},{"id":7681,"originId":"5c44739c3b948a2b4ab6fc25","articleId":1633,"userId":2697,"content":"有意向的同学简历发我邮箱哈，panxiao@cvte.com\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1547989916597},{"id":7682,"originId":"5c2f162b3898674067a7b403","articleId":1638,"userId":2114,"content":"是否可远程？","createdAt":1546589739462},{"id":7683,"originId":"5c3b18a43898674067a7e990","articleId":1638,"userId":2578,"content":"非杭州，可否。","createdAt":1547376804397},{"id":7684,"originId":"5c3bf3db3898674067a7ebff","articleId":1638,"userId":523,"content":"是否可远程， 同问","createdAt":1547432923232},{"id":7685,"originId":"5c3836463898674067a7e134","articleId":1640,"userId":1326,"content":"年后入职吗？","createdAt":1547187782013},{"id":7686,"originId":"5c389bdba4d44449266aff4d","articleId":1640,"userId":2442,"content":"成都有吗","createdAt":1547213787929},{"id":7687,"originId":"5c38a5403898674067a7e465","articleId":1640,"userId":90,"content":"看来小程序真的是算是一个大方向了。。。","createdAt":1547216192350},{"id":7688,"originId":"5c35b4ab5bf06c5e7e3f3444","articleId":1642,"userId":2703,"content":"怎么参与","createdAt":1547023531322},{"id":7689,"originId":"5c345a903898674067a7c980","articleId":1643,"userId":753,"content":"老哥共享单车还存在？","createdAt":1546934928328},{"id":7690,"originId":"5c3472333898674067a7caa4","articleId":1643,"userId":2705,"content":"你们总部在上海么。。   怎么感觉杭州的车比上海多多了","createdAt":1546940979862},{"id":7691,"originId":"5c35ab845bf06c5e7e3f3283","articleId":1643,"userId":2704,"content":"[@moshuchao](/user/moshuchao) 可以了解一下哈啰  我们并不仅仅是一家单车公司","createdAt":1547021188128},{"id":7692,"originId":"5c35abb33898674067a7d1ac","articleId":1643,"userId":2704,"content":"[@Alexis374](/user/Alexis374) 对 我们的主要业务在北上广较少,但是二三线基本都是我们的车,已经遍布3-400个城市","createdAt":1547021235106},{"id":7693,"originId":"5c35acdc5bf06c5e7e3f32bd","articleId":1643,"userId":2704,"content":"别沉 +1","createdAt":1547021532618},{"id":7694,"originId":"5c35ace05bf06c5e7e3f32c1","articleId":1643,"userId":2704,"content":"别沉 +2","createdAt":1547021536585},{"id":7695,"originId":"5c35ace65bf06c5e7e3f32c4","articleId":1643,"userId":2704,"content":"别沉 +3","createdAt":1547021542077},{"id":7696,"originId":"5c35acea5bf06c5e7e3f32c7","articleId":1643,"userId":2704,"content":"别沉 +4","createdAt":1547021546035},{"id":7697,"originId":"5c35aced5bf06c5e7e3f32ca","articleId":1643,"userId":2704,"content":"别沉 +5","createdAt":1547021549640},{"id":7698,"originId":"5c35b1733898674067a7d26e","articleId":1643,"userId":2706,"content":"老哥，已经邮件🤡","createdAt":1547022707282},{"id":7699,"originId":"5c35b2763898674067a7d308","articleId":1643,"userId":2704,"content":"[@mozily](/user/mozily) 好的,已经收到 ! ","createdAt":1547022966434},{"id":7700,"originId":"5c24d61a3898674067a790d7","articleId":1647,"userId":2220,"content":"老夫内推哦~","createdAt":1545917978776},{"id":7701,"originId":"5c2b60cc76c4964062a1f7e8","articleId":1647,"userId":2707,"content":"没有前端岗吗？","createdAt":1546346700097},{"id":7702,"originId":"5c3303015bf06c5e7e3f2243","articleId":1647,"userId":2220,"content":"[@TaiKyo](/user/TaiKyo)  有，找资深些的。这里写的是因为有内推奖O(∩_∩)O哈哈~","createdAt":1546846977024},{"id":7703,"originId":"5bf4e1c7be1b120abac5b714","articleId":1649,"userId":2090,"content":"ThoughtWorks不但大牛多，而且氛围极好，各位想要跳槽的大佬，请把简历砸过来","createdAt":1542775239013},{"id":7704,"originId":"5bfc9e41d6104a4f803a1d55","articleId":1649,"userId":2090,"content":"ThoughtWorks不但大牛多，而且氛围极好，各位想要跳槽的大佬，请把简历砸过来","createdAt":1543282241981},{"id":7705,"originId":"5bfdfdb7d6104a4f803a2484","articleId":1649,"userId":2090,"content":"ThoughtWorks不但大牛多，而且氛围极好，各位想要跳槽的大佬，请把简历砸过来","createdAt":1543372215636},{"id":7706,"originId":"5c074f211c62d83349350eeb","articleId":1649,"userId":2090,"content":"各位，欢迎投递简历","createdAt":1543982881328},{"id":7707,"originId":"5c1062497ec239239ff55e89","articleId":1649,"userId":2090,"content":"各位，欢迎投递简历","createdAt":1544577609356},{"id":7708,"originId":"5c2347223898674067a78a48","articleId":1649,"userId":2090,"content":"各位，欢迎投递简历","createdAt":1545815842154},{"id":7709,"originId":"5c2447c776c4964062a1e4b4","articleId":1649,"userId":2090,"content":"各位，欢迎投递简历","createdAt":1545881543415},{"id":7710,"originId":"5c2c46da76c4964062a1fac2","articleId":1649,"userId":2090,"content":"各位，欢迎投递简历，已经有两位朋友拿到offer了","createdAt":1546405594370},{"id":7711,"originId":"5c2f129b3898674067a7b3c0","articleId":1649,"userId":2090,"content":"各位，欢迎投递简历，已经有两位朋友拿到offer了","createdAt":1546588827649},{"id":7712,"originId":"5be28d3f21d75b74609f4eb3","articleId":1651,"userId":2709,"content":"继续招聘中","createdAt":1541573951717},{"id":7713,"originId":"5be3f437646a05745b7b9d17","articleId":1651,"userId":2709,"content":"继续招聘中","createdAt":1541665847081},{"id":7714,"originId":"5be5574b21d75b74609f5e33","articleId":1651,"userId":2709,"content":"继续招聘中","createdAt":1541756747295},{"id":7715,"originId":"5bea7788e161dc409d761419","articleId":1651,"userId":2709,"content":"继续招聘中","createdAt":1542092680779},{"id":7716,"originId":"5c2db23176c4964062a20327","articleId":1651,"userId":2709,"content":"我们还在招聘呀","createdAt":1546498609791},{"id":7717,"originId":"5c2dacad3898674067a7a9bd","articleId":1652,"userId":161,"content":"工作地点是哪？是p7还是p5级别？","createdAt":1546497197267},{"id":7718,"originId":"5c1b9a1276c4964062a1c00b","articleId":1654,"userId":1186,"content":"顶","createdAt":1545312786801},{"id":7719,"originId":"5c203e0a3898674067a77751","articleId":1654,"userId":1186,"content":"顶- -","createdAt":1545616906736},{"id":7720,"originId":"5c28296c3898674067a79b47","articleId":1654,"userId":1186,"content":"ding","createdAt":1546135916661},{"id":7721,"originId":"5b064d835cd02be640900e38","articleId":1656,"userId":2711,"content":"自己顶一下","createdAt":1527139715829},{"id":7722,"originId":"5b06585b29e6e510415b241a","articleId":1656,"userId":419,"content":"顶你一下","createdAt":1527142491002},{"id":7723,"originId":"5b0cc8358a4f51e140d9431b","articleId":1656,"userId":2711,"content":"顶顶","createdAt":1527564341442},{"id":7724,"originId":"5b0e2d9b8a4f51e140d94345","articleId":1656,"userId":1195,"content":"要临工不\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1527655835987},{"id":7725,"originId":"5b0e81f529e6e510415b25fa","articleId":1656,"userId":785,"content":"请问一哈要前端吗。  \n \n  [★来自antd-cnode★](http://www.intelligenttech.top/#/)","createdAt":1527677429243},{"id":7726,"originId":"5b0f7bfa29e6e510415b2643","articleId":1656,"userId":785,"content":"[@wzquyin](/user/wzquyin)   您好，我已经给您投递了一份简历zc_smile@outlook.com，请查收，thanks。请问一下贵公司是在高新区软件园或者软件园附近吗？  \n \n [★来自antd-cnode★](http://www.intelligenttech.top/#/)","createdAt":1527741434187},{"id":7727,"originId":"5b0f86ff8a4f51e140d943c2","articleId":1656,"userId":2711,"content":"[@FourLeafClover](/user/FourLeafClover) 我们没有收到你的简历。。。。是在软件园这边","createdAt":1527744255075},{"id":7728,"originId":"5b0f8cc35cd02be64090101b","articleId":1656,"userId":785,"content":"[@wzquyin](/user/wzquyin) 好的。我又重新发了一份到您的gmail邮箱  :)","createdAt":1527745731158},{"id":7729,"originId":"5b0fb5828a4f51e140d943e8","articleId":1656,"userId":2711,"content":"[@zysam](/user/zysam) 什么叫零时工啊","createdAt":1527756162247},{"id":7730,"originId":"5b0fb96a29e6e510415b2677","articleId":1656,"userId":314,"content":"顶一下","createdAt":1527757162495},{"id":7731,"originId":"5b10f4a25cd02be64090109f","articleId":1656,"userId":1195,"content":"[@wzquyin](/user/wzquyin) 我在金融行业待过，用 nodejs 做过供应链。还负责过风控。你要是能提供短期工作机会的话。。。","createdAt":1527837858160},{"id":7732,"originId":"5b14b13a29e6e510415b2778","articleId":1656,"userId":2711,"content":"[@zysam](/user/zysam) 发个简历给看看，然后约","createdAt":1528082746578},{"id":7733,"originId":"5b14c7575cd02be640901141","articleId":1656,"userId":1071,"content":"支持一下，node.js做区块链？","createdAt":1528088407341},{"id":7734,"originId":"5b14d03957137f22415c48ce","articleId":1656,"userId":2711,"content":"[@richenlin](/user/richenlin) 肯定不是啊，我们是区块链相关，不是做主链，少年你觉得国内所谓做主链的公司有几个是做链的？基本都是git下个代码，改改名字，就忽悠钱了","createdAt":1528090681460},{"id":7735,"originId":"5b1609c15cd02be6409011ad","articleId":1656,"userId":1195,"content":"[@wzquyin](/user/wzquyin) 你要是 dev, 可以粗看下这个简介，有兴趣就进一步聊。 https://github.com/zysam/resume","createdAt":1528170945630},{"id":7736,"originId":"5b16226f29e6e510415b27f2","articleId":1656,"userId":2711,"content":"[@zysam](/user/zysam) 你qq？\r\n","createdAt":1528177263438},{"id":7737,"originId":"5b1652c05cd02be6409011d9","articleId":1656,"userId":1195,"content":"393553175\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1528189632619},{"id":7738,"originId":"5b16577257137f22415c4966","articleId":1656,"userId":797,"content":"顶一下","createdAt":1528190834299},{"id":7739,"originId":"5b29a4248a4f51e140d94928","articleId":1656,"userId":1412,"content":"顶。 \n 来自PWA[CNode.js社区](https://alexlees.github.io/CNode/dist/index.html)","createdAt":1529455652279},{"id":7740,"originId":"5b30415957137f22415c4eba","articleId":1656,"userId":2711,"content":"继续招人中","createdAt":1529889113940},{"id":7741,"originId":"5b442e9335342ab0690613d9","articleId":1656,"userId":2712,"content":"还在招吗？给你邮件了","createdAt":1531195027506},{"id":7742,"originId":"5b5550892b3325cc0f839a6f","articleId":1656,"userId":419,"content":"已投 对你们公司还蛮感兴趣","createdAt":1532317833888},{"id":7743,"originId":"5b67bd02792f59ae501bf7b6","articleId":1656,"userId":632,"content":"帮顶","createdAt":1533525250012},{"id":7744,"originId":"5c25c7c23898674067a793aa","articleId":1656,"userId":2713,"content":"贵公司要实习生吗、","createdAt":1545979842816},{"id":7745,"originId":"5c21b88476c4964062a1d7c4","articleId":1661,"userId":2716,"content":"继续招～～～\r\n部门大环境特别好，走过路过别错过～～～","createdAt":1545713796327},{"id":7746,"originId":"5c0f8302f3d48d2397c1018f","articleId":1663,"userId":2717,"content":"深圳南山区，地铁站附近。公司氛围开放活跃，希望热爱技术的你加入--","createdAt":1544520450062},{"id":7747,"originId":"5c1c5f6676c4964062a1c25a","articleId":1663,"userId":2717,"content":"刷一刷，持续招聘中","createdAt":1545363302577},{"id":7748,"originId":"5c2044ac3898674067a777c2","articleId":1663,"userId":2717,"content":"使用VUE的小伙伴也可以试试看","createdAt":1545618604524},{"id":7749,"originId":"5c1af7c03898674067a76355","articleId":1664,"userId":2366,"content":"mark","createdAt":1545271232765},{"id":7750,"originId":"5c1cafed3898674067a76e55","articleId":1664,"userId":2718,"content":"顶一下，有兴趣的小伙伴不要错过哦~","createdAt":1545383917053},{"id":7751,"originId":"5c1f09433898674067a77415","articleId":1664,"userId":1862,"content":"加微信了  空了咱们聊聊","createdAt":1545537859177},{"id":7752,"originId":"5bd43f6dad50495f5e2fbbb6","articleId":1666,"userId":626,"content":"请问招人么？","createdAt":1540636525429},{"id":7753,"originId":"5bda904f93f8d64f74b012fc","articleId":1666,"userId":2403,"content":"我们就是来找小伙伴的","createdAt":1541050447245},{"id":7754,"originId":"5c1a1bc93898674067a76131","articleId":1666,"userId":2403,"content":"最近投递简历的人不少","createdAt":1545214921585},{"id":7755,"originId":"5bebed35be1b120abac594ce","articleId":1669,"userId":446,"content":"有点冷清~","createdAt":1542188341579},{"id":7756,"originId":"5bec46cda05b0e0ae443b3a8","articleId":1669,"userId":54,"content":"[@libook](/user/libook) 大佬您好，笔试题我已做完提交，期待您的回复。","createdAt":1542211277019},{"id":7757,"originId":"5becf990be1b120abac5991b","articleId":1669,"userId":446,"content":"[@AnsonZnl](/user/AnsonZnl) 看到了你的答案了~","createdAt":1542257040368},{"id":7758,"originId":"5bf515b3e6481c5709f5de0b","articleId":1669,"userId":446,"content":"注意是服务开发方向哦","createdAt":1542788531562},{"id":7759,"originId":"5bfd0dbdbe1b120abac5d683","articleId":1669,"userId":1590,"content":"请问刚毕业的需要吗","createdAt":1543310781396},{"id":7760,"originId":"5c05f37cd3b8ab334e8da630","articleId":1669,"userId":446,"content":"[@gofromzero](/user/gofromzero) 抱歉这么晚才回复，我们也在招聘全职，请看我们的拉钩招聘。\r\n如果自己能力不大够希望实习的话，已经毕业不能签订实习合同，也暂时不合适签订劳动合同，如果签劳务合同的话，在薪资待遇方面比较吃亏，你可以考虑一下。","createdAt":1543893884112},{"id":7761,"originId":"5c064cc8d3b8ab334e8daa04","articleId":1669,"userId":1197,"content":"[@libook](/user/libook) \r\n没大型项目经验 但用node做了很多小项目基础很扎实的专业前端要么 \r\n我是有自信面对node需求 能一边研究一边写出来 这种可以么\r\n毕竟很多需求 我也是从来没见过 但就是能做出来的\r\n","createdAt":1543916744197},{"id":7762,"originId":"5c07a6fdd3b8ab334e8db24a","articleId":1669,"userId":446,"content":"[@ResJay](/user/ResJay) 我们招的是实习嘛，肯定不指望你在Node方面有经验的，实习的过程就是学习的过程嘛，做过前端的话起码JS方面还是有些基础的，比从Python或者Java转过来的好得多，如果你现在还是在校生的话，可以来试试。","createdAt":1544005373928},{"id":7763,"originId":"5c0e03357ec239239ff553e7","articleId":1669,"userId":808,"content":"前端想转node，不是在校生可以吗？","createdAt":1544422197036},{"id":7764,"originId":"5c0f7c12f3d48d2397c10110","articleId":1669,"userId":446,"content":"[@lyf103104](/user/lyf103104) 可能够呛，因为不是在校生不能签实习合同，达不到正式标准又不能签劳动合同，劳务合同对你来说很吃亏（因为抽税严重且没有社会保障），建议可以试一下全栈开发的正式职位，凭前端优势进入全栈岗位，再补学后端技能，后端补好之后再考虑转到纯后端。","createdAt":1544518674486},{"id":7765,"originId":"5c14efd1f3d48d2397c118ef","articleId":1669,"userId":2451,"content":"2019届计算机专业毕业生，已做完笔试题，期待您的回复。","createdAt":1544875985387},{"id":7766,"originId":"5c1715e2f3d48d2397c11e09","articleId":1669,"userId":808,"content":"[@libook](/user/libook) 谢谢版主。","createdAt":1545016802132},{"id":7767,"originId":"5bfd615fbe1b120abac5d82e","articleId":1670,"userId":2721,"content":"继续努力找人，有兴趣的朋友 欢迎随时骚扰。","createdAt":1543332191445},{"id":7768,"originId":"5c15e9de7ec239239ff5738b","articleId":1670,"userId":2451,"content":"您好，请问现在还招人吗？已将简历发送至您的邮箱","createdAt":1544939998816},{"id":7769,"originId":"5be28c0f646a05745b7b9442","articleId":1672,"userId":1266,"content":"顶起","createdAt":1541573647671},{"id":7770,"originId":"5c1316fb7ec239239ff56c08","articleId":1672,"userId":1266,"content":"再顶一个","createdAt":1544754939095},{"id":7771,"originId":"5c0f23c27ec239239ff55901","articleId":1674,"userId":2723,"content":"工作地点：北京海淀区中关村融科资讯中心A座701","createdAt":1544496066038},{"id":7772,"originId":"5ad5634ea7d228c16b986ccd","articleId":1675,"userId":2724,"content":"up","createdAt":1523934030267},{"id":7773,"originId":"5ae2d01a1b02288048bd0a90","articleId":1675,"userId":2724,"content":"up","createdAt":1524813850962},{"id":7774,"originId":"5ae32a8939a81e4548f457c2","articleId":1675,"userId":456,"content":"[@yuanyong](/user/yuanyong) 在哪儿上班啊，哪个团队啊 ","createdAt":1524837001249},{"id":7775,"originId":"5ae3eea239a81e4548f457ea","articleId":1675,"userId":2724,"content":"亦庄上班，年轻团队","createdAt":1524887202876},{"id":7776,"originId":"5b46c3cafb9e84ec69cc19f1","articleId":1675,"userId":2724,"content":"持续招聘中。。。","createdAt":1531364298182},{"id":7777,"originId":"5b4c5e8faef62f1b0f9e0378","articleId":1675,"userId":2190,"content":"专科可以么","createdAt":1531731599251},{"id":7778,"originId":"5b4f033caef62f1b0f9e041f","articleId":1675,"userId":2724,"content":"持续招聘","createdAt":1531904828082},{"id":7779,"originId":"5b4ff937aef62f1b0f9e0447","articleId":1675,"userId":2724,"content":"up","createdAt":1531967799971},{"id":7780,"originId":"5b4ff96bfb9e84ec69cc1be8","articleId":1675,"userId":2724,"content":"[@Rock-1](/user/Rock-1) 老实说有难度，但是确实优秀我们也不放过","createdAt":1531967851983},{"id":7781,"originId":"5b57dd242860af042a21786f","articleId":1675,"userId":2724,"content":"up\r\n=","createdAt":1532484900355},{"id":7782,"originId":"5b63bff9792f59ae501bf728","articleId":1675,"userId":2724,"content":"up","createdAt":1533263865810},{"id":7783,"originId":"5b6a4b9c792f59ae501bf83b","articleId":1675,"userId":2724,"content":"up","createdAt":1533692828662},{"id":7784,"originId":"5b72946e58db3ccf66a45473","articleId":1675,"userId":2725,"content":"[@yuanyong](/user/yuanyong) ","createdAt":1534235758487},{"id":7785,"originId":"5b7294887271129a2f32a969","articleId":1675,"userId":2725,"content":"您好，两年工作经验，两年nodejs开发经验要吗？","createdAt":1534235784999},{"id":7786,"originId":"5b74d65c792f59ae501bf9f9","articleId":1675,"userId":2724,"content":"[@CRAZYFAKE](/user/CRAZYFAKE) 可以发个简历看看","createdAt":1534383708400},{"id":7787,"originId":"5b7a955cc52ad1482eb940a8","articleId":1675,"userId":2724,"content":"up","createdAt":1534760284450},{"id":7788,"originId":"5b7b7314c52ad1482eb940d4","articleId":1675,"userId":610,"content":"一定要本科吗？","createdAt":1534817044758},{"id":7789,"originId":"5b84b25afad9359e2e83125e","articleId":1675,"userId":2724,"content":"[@1316346949](/user/1316346949)  主要看能力","createdAt":1535423066348},{"id":7790,"originId":"5b84b2622a585e4e2f26ff54","articleId":1675,"userId":2724,"content":"up","createdAt":1535423074216},{"id":7791,"originId":"5b86391e2a585e4e2f26ffa8","articleId":1675,"userId":2724,"content":"up","createdAt":1535523102356},{"id":7792,"originId":"5b8798f2632c7f422e5b82a2","articleId":1675,"userId":2724,"content":"up","createdAt":1535613170826},{"id":7793,"originId":"5b8f3e6282f0728f354d740f","articleId":1675,"userId":2724,"content":"up","createdAt":1536114274039},{"id":7794,"originId":"5b9624734cdb88f72f5a9219","articleId":1675,"userId":2724,"content":"up","createdAt":1536566387987},{"id":7795,"originId":"5b9880f2f1e8bc7579c784b8","articleId":1675,"userId":2724,"content":"up","createdAt":1536721138157},{"id":7796,"originId":"5ba3213137a6965f59051b29","articleId":1675,"userId":2724,"content":"up","createdAt":1537417521860},{"id":7797,"originId":"5baae7e415e4fd1923f48a5e","articleId":1675,"userId":2724,"content":"up","createdAt":1537927140954},{"id":7798,"originId":"5bac99329545eaf107b9c672","articleId":1675,"userId":2724,"content":"up","createdAt":1538038066162},{"id":7799,"originId":"5badf819ede204052db80273","articleId":1675,"userId":1862,"content":"[@yuanyong](/user/yuanyong) 你是hr不是技术","createdAt":1538127897818},{"id":7800,"originId":"5bbff5d015e4fd1923f48e3b","articleId":1675,"userId":2724,"content":"up","createdAt":1539306960879},{"id":7801,"originId":"5bbff5e037a6965f590520f8","articleId":1675,"userId":2724,"content":"[@chloe](/user/chloe) 是技术","createdAt":1539306976152},{"id":7802,"originId":"5bc5400aede204052db8056a","articleId":1675,"userId":2726,"content":"[@yuanyong](/user/yuanyong) 还在招么\r\n","createdAt":1539653642716},{"id":7803,"originId":"5bc8316c15e4fd1923f49050","articleId":1675,"userId":2724,"content":"up","createdAt":1539846508282},{"id":7804,"originId":"5bc831819545eaf107b9cc2b","articleId":1675,"userId":2724,"content":"[@caipeng-hrv](/user/caipeng-hrv) 在招","createdAt":1539846529917},{"id":7805,"originId":"5bd03053af3d3a315eab0287","articleId":1675,"userId":2724,"content":"up","createdAt":1540370515275},{"id":7806,"originId":"5be14485646a05745b7b8dfb","articleId":1675,"userId":2724,"content":"up","createdAt":1541489797736},{"id":7807,"originId":"5be4f50421d75b74609f5a90","articleId":1675,"userId":2724,"content":"up","createdAt":1541731588496},{"id":7808,"originId":"5c0f239af3d48d2397c0fe27","articleId":1675,"userId":2724,"content":"up","createdAt":1544496026787},{"id":7809,"originId":"5bf43f3be6481c5709f5d9fc","articleId":1677,"userId":2420,"content":"工作地点在哪？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1542733627515},{"id":7810,"originId":"5bf643bfbe1b120abac5bd41","articleId":1677,"userId":807,"content":"先把pomelo更新再说","createdAt":1542865855234},{"id":7811,"originId":"5bfb5615be1b120abac5cbd2","articleId":1677,"userId":380,"content":"[@4176244](/user/4176244) 杭州","createdAt":1543198229831},{"id":7812,"originId":"5bfb5664be1b120abac5cbdb","articleId":1677,"userId":380,"content":"[@walter211](/user/walter211) 哈哈哈，所以我只是来赚个内推钱，如果你们真的想进，我帮你内推。不想进，我也不推荐 😂","createdAt":1543198308086},{"id":7813,"originId":"5bffa358be1b120abac5e2bf","articleId":1677,"userId":2422,"content":"目前还在北京，不想离开。关键你也没有写待遇！","createdAt":1543480152053},{"id":7814,"originId":"5bffff6dd6104a4f803a2fd3","articleId":1677,"userId":2729,"content":"[@XGHeaven](/user/XGHeaven) 前端实习行吗","createdAt":1543503725218},{"id":7815,"originId":"5c014ce1d6104a4f803a34cb","articleId":1677,"userId":380,"content":"[@loo41](/user/loo41) 实习你就走校招就好了","createdAt":1543589089395},{"id":7816,"originId":"5c0d0b157ec239239ff550a2","articleId":1677,"userId":2420,"content":"杭州有点远了。","createdAt":1544358677926},{"id":7817,"originId":"5c0e0d8bf3d48d2397c0f9b6","articleId":1677,"userId":2623,"content":"看着不错啊！","createdAt":1544424843536},{"id":7818,"originId":"5bbd94749545eaf107b9c993","articleId":1679,"userId":2731,"content":"人肉Up","createdAt":1539150964758},{"id":7819,"originId":"5bbeffebede204052db8048c","articleId":1679,"userId":2731,"content":"诚招","createdAt":1539244011892},{"id":7820,"originId":"5bc1c2ed37a6965f5905217f","articleId":1679,"userId":2731,"content":"up","createdAt":1539425005170},{"id":7821,"originId":"5bc44f58ede204052db8054f","articleId":1679,"userId":2731,"content":"up+1","createdAt":1539592024435},{"id":7822,"originId":"5bc855b437a6965f5905236f","articleId":1679,"userId":2731,"content":"up+2","createdAt":1539855796210},{"id":7823,"originId":"5bc9edf615e4fd1923f49100","articleId":1679,"userId":2732,"content":"up","createdAt":1539960310775},{"id":7824,"originId":"5bceedd9cbff068050fcf1cc","articleId":1679,"userId":2731,"content":"诚招~","createdAt":1540287961901},{"id":7825,"originId":"5bd1a15b89665c365e9442bc","articleId":1679,"userId":2731,"content":"up+.3","createdAt":1540464987052},{"id":7826,"originId":"5bdaf3835e51586d64302e9d","articleId":1679,"userId":2731,"content":"up","createdAt":1541075843023},{"id":7827,"originId":"5bdc3aa621d75b74609f350c","articleId":1679,"userId":2731,"content":"up","createdAt":1541159590001},{"id":7828,"originId":"5be030f521d75b74609f424c","articleId":1679,"userId":2731,"content":"up","createdAt":1541419253281},{"id":7829,"originId":"5be946fbe161dc409d760ee3","articleId":1679,"userId":2731,"content":"up","createdAt":1542014715890},{"id":7830,"originId":"5bf68a9abe1b120abac5bf53","articleId":1679,"userId":2731,"content":"up","createdAt":1542883994161},{"id":7831,"originId":"5c028842887c5864fafe1890","articleId":1679,"userId":2731,"content":"up","createdAt":1543669826125},{"id":7832,"originId":"5c07a6e9d3b8ab334e8db247","articleId":1679,"userId":2731,"content":"up","createdAt":1544005353071},{"id":7833,"originId":"5bfcdaf2d6104a4f803a1f84","articleId":1682,"userId":107,"content":"有兴趣，大概多久的活儿，看图好像不少啊，你的预算有点..... 低","createdAt":1543297778086},{"id":7834,"originId":"5bfd0538be1b120abac5d604","articleId":1682,"userId":273,"content":"程序员的劳动价格何时变得如此低廉？","createdAt":1543308600768},{"id":7835,"originId":"5bfe2737be1b120abac5db3d","articleId":1682,"userId":2734,"content":"[@fantasticsoul](/user/fantasticsoul)  这个是大面上的粗需求，类似这种管理平台，从一个现有建构上构建，如果是熟悉相关部件会比较快，\r\n至于工期，项目倒是不急，要看您对需求的评估和基于框架的工作量。","createdAt":1543382839283},{"id":7836,"originId":"5bfe276cd6104a4f803a25e0","articleId":1682,"userId":2734,"content":"[@shinygang](/user/shinygang) 惭愧，惭愧。","createdAt":1543382892555},{"id":7837,"originId":"5bff3dafbe1b120abac5df1f","articleId":1682,"userId":65,"content":"http://fenghuangyu.cn/system\r\n我用这个前后端做过东西，你没有详细设计稿那些吗？","createdAt":1543454127500},{"id":7838,"originId":"5bff539ebe1b120abac5e00d","articleId":1682,"userId":2734,"content":"[@dangyanglim](/user/dangyanglim) 前段交互示意ui做了一半了，数据库大约关系和数据条目做了大约１／３，估计这周　基本的功能细节和相对明细能做完。","createdAt":1543459742702},{"id":7839,"originId":"5c00fc2fd6104a4f803a33ca","articleId":1682,"userId":2734,"content":"[@dangyanglim](/user/dangyanglim) 有空联系我下,沟通下细节.","createdAt":1543568431808},{"id":7840,"originId":"5719cce935af8a704195f2ad","articleId":1683,"userId":485,"content":"有情怀的魅族，支持一下哈。","createdAt":1461308649588},{"id":7841,"originId":"5719e5c235af8a704195f2b8","articleId":1683,"userId":568,"content":"太少","createdAt":1461315010519},{"id":7842,"originId":"5719efb83f27a7c841bcb4e7","articleId":1683,"userId":125,"content":"<p>12k，应届生的薪资呀</p>\n","createdAt":1461317560694},{"id":7843,"originId":"5719fb47fa48138c41110cbe","articleId":1683,"userId":901,"content":"[@dlutwuwei](/user/dlutwuwei) 呵呵。","createdAt":1461320519140},{"id":7844,"originId":"571b3c6bfa48138c41110cf9","articleId":1683,"userId":2735,"content":"好想去魅族哦，这个是魅玩帮的吧。。。。\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1461402731218},{"id":7845,"originId":"571b52f83f27a7c841bcb529","articleId":1683,"userId":901,"content":"[@Joursion](/user/Joursion) 恩 就是魅玩帮","createdAt":1461408504359},{"id":7846,"originId":"571b9b085a26c4a841ecbc4f","articleId":1683,"userId":2736,"content":"没记错的话 现在![1fc6f9d3572c11df613153ae632762d0f603c27f.jpg](//static.cnodejs.org/FhVsK4MldQG8AKhr_gYZd-FndWbi)","createdAt":1461426952037},{"id":7847,"originId":"571db20835af8a704195f37f","articleId":1683,"userId":902,"content":"珠海环境还是蛮好的","createdAt":1461563912464},{"id":7848,"originId":"571dc12ffa48138c41110d88","articleId":1683,"userId":536,"content":"[@dlutwuwei](/user/dlutwuwei)  哥，暂且不说北上广有多少应届生能拿12k，在珠海拿12k可以算的上是高薪了好么，阁下技术水平是轻松碾压珠海12k么？","createdAt":1461567791288},{"id":7849,"originId":"5729706b35af8a704195f715","articleId":1683,"userId":901,"content":"珠海是个4线城市了，生活水平比一线低一点。如果想过的轻松点，可以来珠海试试呀。至少不会有那么贵的房租，那么挤的公交地铁","createdAt":1462333547084},{"id":7850,"originId":"57343aa632bf2c90579f527e","articleId":1683,"userId":907,"content":"招后端吗？","createdAt":1463040678534},{"id":7851,"originId":"573c2e73f610cbba1dc4524d","articleId":1683,"userId":1025,"content":"深圳前端求个坑~  [ericy简历](http://ericy.cn/about)","createdAt":1463561843609},{"id":7852,"originId":"573c3a7bb507f69e1dd8a013","articleId":1683,"userId":2539,"content":"+1","createdAt":1463564923976},{"id":7853,"originId":"573c50f3b507f69e1dd8a019","articleId":1683,"userId":2737,"content":"如果是在市区我大概已经去了","createdAt":1463570675572},{"id":7854,"originId":"573e61a0fcf698421d2036c7","articleId":1683,"userId":2738,"content":"一年工作经验的要吗","createdAt":1463706016715},{"id":7855,"originId":"5747bc70754d17df1e44da84","articleId":1683,"userId":901,"content":"[@Lincoln-xzc](/user/Lincoln-xzc) 试试","createdAt":1464319088045},{"id":7856,"originId":"574ba1f6fd93c1011f94ac7e","articleId":1683,"userId":2738,"content":"简历已投","createdAt":1464574454290},{"id":7857,"originId":"574e568e5f0aac1d30e06456","articleId":1683,"userId":901,"content":"[@Lincoln-xzc](/user/Lincoln-xzc) 欢迎","createdAt":1464751758865},{"id":7858,"originId":"574faedec4257a455bd076fd","articleId":1683,"userId":2739,"content":"楼主别骗我，智能硬件组新奥林5楼，还不加班，还下午茶😂\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1464839902246},{"id":7859,"originId":"574fb772c4257a455bd07704","articleId":1683,"userId":96,"content":"支持一下","createdAt":1464842098036},{"id":7860,"originId":"5755267defa4e8950e0a6972","articleId":1683,"userId":901,"content":"[@kobsucTam](/user/kobsucTam) 我在营销中心","createdAt":1465198205539},{"id":7861,"originId":"57565f66397b615d0ebe0889","articleId":1683,"userId":2738,"content":"没有声音","createdAt":1465278310149},{"id":7862,"originId":"586be82bc59e6c6867208232","articleId":1683,"userId":16,"content":"又来骚扰魅族了，当初投c++,没被收，要不要试水node呢\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1483466795349},{"id":7863,"originId":"5c002152be1b120abac5e57d","articleId":1683,"userId":2423,"content":"哎呀，，，我是后端node有机会么。。\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1543512402096},{"id":7864,"originId":"5bffdad6be1b120abac5e4c5","articleId":1684,"userId":1805,"content":"re 前端实习&全职都需要，headcount充足","createdAt":1543494358354},{"id":7865,"originId":"5bfba0ded6104a4f803a19ca","articleId":1685,"userId":2417,"content":"up","createdAt":1543217374789},{"id":7866,"originId":"5bcddded9545eaf107b9cd6f","articleId":1686,"userId":1379,"content":"顶","createdAt":1540218349862},{"id":7867,"originId":"5bf7e82dbe1b120abac5c60b","articleId":1686,"userId":753,"content":"sketch2code?","createdAt":1542973485599},{"id":7868,"originId":"5bf7ea2cbe1b120abac5c620","articleId":1686,"userId":2602,"content":"从v2看这贴子看到cnode😂","createdAt":1542973996005},{"id":7869,"originId":"5bebf147a05b0e0ae443b1f3","articleId":1687,"userId":2741,"content":"公司办公环境～\r\n![WechatIMG138.jpeg](//static.cnodejs.org/FtB8mtJNBDO00I1Nzr-4l72U076e)\r\n![WechatIMG139.jpeg](//static.cnodejs.org/FjqSDPdZGX8AG9uF3hrvC8B4uaDp)\r\n![WechatIMG140.jpeg](//static.cnodejs.org/FlyuVscw6e6sRjEpf_jPM0B3JHM8)","createdAt":1542189383377},{"id":7870,"originId":"5bebf39dbe1b120abac59501","articleId":1687,"userId":98,"content":"本菜鸡来自荐","createdAt":1542189981549},{"id":7871,"originId":"5bebf6d9a05b0e0ae443b221","articleId":1687,"userId":2741,"content":"[@zengming00](/user/zengming00) 欢迎欢迎，有意向的话方便发一份简历给我吗？","createdAt":1542190809533},{"id":7872,"originId":"5bee7d37a05b0e0ae443be78","articleId":1687,"userId":2741,"content":"欢迎投递简历～","createdAt":1542356279543},{"id":7873,"originId":"5befe559be1b120abac5a5a1","articleId":1687,"userId":2236,"content":"待遇没写清楚","createdAt":1542448473762},{"id":7874,"originId":"5bf21848be1b120abac5aa91","articleId":1687,"userId":2741,"content":"[@chenjianniu](/user/chenjianniu) 噢，那我在这里补充一下\r\n高级node.js开发 月薪 15-25k\r\n   node.js 开发    月薪 10-15k\r\n前端开发工程师  月薪   8-15k","createdAt":1542592584076},{"id":7875,"originId":"5bf4d877be1b120abac5b6d8","articleId":1687,"userId":2741,"content":"[@evillt](/user/evillt) 如果有意向转react的话也可以的哦。毕竟框架也是有相通的地方的","createdAt":1542772855916},{"id":7876,"originId":"5bf7da5e6718ed3ca074c395","articleId":1687,"userId":2741,"content":"欢迎投递～","createdAt":1542969950235},{"id":7877,"originId":"5bf79c87be1b120abac5c363","articleId":1688,"userId":2742,"content":"顶顶顶顶顶顶顶\r\n\r\n","createdAt":1542954119261},{"id":7878,"originId":"5bf79c686718ed3ca074c0f6","articleId":1689,"userId":2742,"content":"顶顶顶顶顶顶顶","createdAt":1542954088642},{"id":7879,"originId":"541f7291cc8944e52875e011","articleId":1690,"userId":146,"content":"昨天还在想这个问题，今早就出法律了！大赞！","createdAt":1411347089670},{"id":7880,"originId":"5420c9a5fffeb6de3d61f6a0","articleId":1690,"userId":575,"content":"支持！话说我也不喜欢动不动就大谈妹纸的。","createdAt":1411434917473},{"id":7881,"originId":"5420f4a9d4bb958f4157c930","articleId":1690,"userId":12,"content":"+1","createdAt":1411445929427},{"id":7882,"originId":"5420f4c8d4bb958f4157c932","articleId":1690,"userId":12,"content":"招聘帖 markdown 都写不好... 很难吸引人去的, 哈哈","createdAt":1411445960335},{"id":7883,"originId":"54237a6b8d2cbbcc6bac6f08","articleId":1690,"userId":1787,"content":"[@suqian](/user/suqian)  +1","createdAt":1411611243513},{"id":7884,"originId":"542acca95d28233425538b00","articleId":1690,"userId":18,"content":"我把这个帖子放进发帖流程里面了，当创建一个 招聘 版块的帖子时，会自动显示一条提醒指向这个帖子。","createdAt":1412091049998},{"id":7885,"originId":"555ea0c64eb040084cfe5bd4","articleId":1690,"userId":2744,"content":"可以设置模块化或者格式化发帖吗？就类似于discuz的分类信息","createdAt":1432264902562},{"id":7886,"originId":"555f10444eb040084cfe5cc2","articleId":1690,"userId":1436,"content":"[@ismiao](/user/ismiao) 论坛应该还没做这样的功能... 所以是不行了","createdAt":1432293444996},{"id":7887,"originId":"555f1d7e4eb040084cfe5cc8","articleId":1690,"userId":12,"content":"没有美女不行啊\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1432296830666},{"id":7888,"originId":"555fde934eb040084cfe5d0c","articleId":1690,"userId":2745,"content":"女性產品不講妹子不行啊\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1432346259024},{"id":7889,"originId":"557cf0b916839d2d539362fa","articleId":1690,"userId":2746,"content":"[@alsotang](/user/alsotang) 管理员同志，可不可以在招聘区发简历啊：）","createdAt":1434251449268},{"id":7890,"originId":"557cfce816839d2d539362fd","articleId":1690,"userId":1628,"content":"可以有妹子,但必须有照片.","createdAt":1434254568095},{"id":7891,"originId":"557d831716839d2d53936363","articleId":1690,"userId":1436,"content":"[@backsapce](/user/backsapce) 你可以当一下小白鼠, 印象中没看到过, 但是估计会有不少评论","createdAt":1434288919611},{"id":7892,"originId":"557e369016839d2d539363be","articleId":1690,"userId":18,"content":"[@backsapce](/user/backsapce) 可以的啊，欢迎","createdAt":1434334864010},{"id":7893,"originId":"58071aab27a1d99178a98fb7","articleId":1690,"userId":2747,"content":"微博链接 http://weibo.com/p/1005051958172255/weibo\r\nerror 404","createdAt":1476860587488},{"id":7894,"originId":"5b3b779ca1308bf723aa3b62","articleId":1690,"userId":2503,"content":"请问可以发求职贴吗？","createdAt":1530623900284},{"id":7895,"originId":"5bf61c70be1b120abac5bc3f","articleId":1690,"userId":2687,"content":"求北京、南京**中、高级 Node.js 后端**，微信：weiaieellp","createdAt":1542855792223},{"id":7896,"originId":"5bf61d05be1b120abac5bc4a","articleId":1690,"userId":2687,"content":"[@jackhutu](/user/jackhutu) 我们有妹子有照片呀","createdAt":1542855941575},{"id":7897,"originId":"5bf38393e6481c5709f5d692","articleId":1692,"userId":2748,"content":"持续招聘中，欢迎推荐，有丰厚奖金","createdAt":1542685587550},{"id":7898,"originId":"5a431a70d92f2f5b185ad274","articleId":1693,"userId":1326,"content":"我去，你们居然又搬地方了。😂","createdAt":1514347120352},{"id":7899,"originId":"5a4357478230827a18293aee","articleId":1693,"userId":2749,"content":"[@beyond5959](/user/beyond5959)  新职场更大更棒哈(❁´◡`❁)*✲ﾟ*","createdAt":1514362695570},{"id":7900,"originId":"5a4369f6f320ae9f0dd580e7","articleId":1693,"userId":2750,"content":"所以，支持远程面试吗","createdAt":1514367478892},{"id":7901,"originId":"5a437a838230827a18293af8","articleId":1693,"userId":2749,"content":"[@hesen1](/user/hesen1) 必须支持哈","createdAt":1514371715308},{"id":7902,"originId":"5a4395a19807389a1809f793","articleId":1693,"userId":2750,"content":"[@ruanboning](/user/ruanboning) 拉勾上有投你们的校招职位，估计简历写的太烂了","createdAt":1514378657502},{"id":7903,"originId":"5a4c7d8f9ea8f8bc490e645a","articleId":1693,"userId":2749,"content":"[@hesen1](/user/hesen1) 写项目和自己的技术亮点哈","createdAt":1514962319554},{"id":7904,"originId":"5a7031b99288dc815328837d","articleId":1693,"userId":250,"content":"简历还没空更新，年后想找工作，不知道可不可以，发个github链接 https://github.com/mengdu\r\n前端工作一年，开发过koa + vue的几个项目。\r\n如果可以，我再详细写下简历","createdAt":1517302201756},{"id":7905,"originId":"5a7274e99288dc81532883fa","articleId":1693,"userId":2749,"content":"[@mengdu](/user/mengdu) 可以投我们的前端岗哈，可年后入职(ง •_•)ง","createdAt":1517450473351},{"id":7906,"originId":"5a7313c1ce45d440451465eb","articleId":1693,"userId":250,"content":"[@ruanboning](/user/ruanboning) 谢谢，那我准备好简历投吧","createdAt":1517491137860},{"id":7907,"originId":"5b0e5fa829e6e510415b25e5","articleId":1693,"userId":2749,"content":"ヾ(=･ω･=)o新加了照片，又回来了哈","createdAt":1527668648054},{"id":7908,"originId":"5b0e7d7a29e6e510415b25f4","articleId":1693,"userId":2751,"content":"[@hesen1](/user/hesen1) 我们支持远程呢～ http://tech.ifeng.com/a/20180528/45006533_0.shtml","createdAt":1527676282444},{"id":7909,"originId":"5b0e7d9c8a4f51e140d9436e","articleId":1693,"userId":2751,"content":"[@mengdu](/user/mengdu) 欢迎考虑我们，不用你改简历，cto直接聊的！http://tech.ifeng.com/a/20180528/45006533_0.shtml","createdAt":1527676316323},{"id":7910,"originId":"5be52dd3646a05745b7ba2d3","articleId":1693,"userId":2749,"content":"继续招聘中(*❦ω❦)","createdAt":1541746131487},{"id":7911,"originId":"5af12e22adea947348e76192","articleId":1695,"userId":1111,"content":"还需要人么？","createdAt":1525755426874},{"id":7912,"originId":"5b0692da57137f22415c4616","articleId":1695,"userId":2654,"content":"[@klzbb](/user/klzbb) 长期招聘哈","createdAt":1527157466959},{"id":7913,"originId":"5b0e2e7b5cd02be640900fa8","articleId":1695,"userId":1195,"content":"果然，连上家  HR 都推荐。你是HR，还是技术？\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1527656059882},{"id":7914,"originId":"5b2724058a4f51e140d948c2","articleId":1695,"userId":2503,"content":"还要人吗？","createdAt":1529291781593},{"id":7915,"originId":"5b433f3035342ab0690613ac","articleId":1695,"userId":2654,"content":"[@zysam](/user/zysam) 上家HR?我是HR哈","createdAt":1531133744612},{"id":7916,"originId":"5b433f4113ca2fe569fb9223","articleId":1695,"userId":2654,"content":"[@zurmokeeper](/user/zurmokeeper) 长期招聘哈","createdAt":1531133761869},{"id":7917,"originId":"5b45f82613ca2fe569fb92ee","articleId":1695,"userId":2503,"content":"[@winging1991](/user/winging1991) 那还能投简历吗？","createdAt":1531312166422},{"id":7918,"originId":"5b88a2c908d0b0fb2d8e6d65","articleId":1695,"userId":2423,"content":"初中级岗有么\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1535681225772},{"id":7919,"originId":"5bdaac6493f8d64f74b01496","articleId":1695,"userId":2654,"content":"[@JiaWeiBi](/user/JiaWeiBi) 现在开放初中级岗位哈，欢迎投递","createdAt":1541057636132},{"id":7920,"originId":"5be29ff1646a05745b7b958a","articleId":1695,"userId":2602,"content":"前几天在拉钩上也看到了, 但不是很敢投😂😂😂\r\n不过真的感觉很好啊!!!!!!!!!!!!!!!!!","createdAt":1541578737847},{"id":7921,"originId":"5bee41f6a05b0e0ae443bc7b","articleId":1695,"userId":2423,"content":"[@winging1991](/user/winging1991) 唉，回复太迟了。。。本来挺适合的\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1542341110376},{"id":7922,"originId":"5be240b5646a05745b7b9121","articleId":1703,"userId":2672,"content":"如果有需求，怎么提交项目？","createdAt":1541554357384},{"id":7923,"originId":"5be2f0f3646a05745b7b9857","articleId":1703,"userId":2054,"content":"[@J28848](/user/J28848) 可以通过 https://jinshuju.net/f/A22wgY","createdAt":1541599475125},{"id":7924,"originId":"5be08bd9646a05745b7b8976","articleId":1704,"userId":2756,"content":"已找到合适的 谢谢大家","createdAt":1541442521073},{"id":7925,"originId":"5be0102021d75b74609f4120","articleId":1705,"userId":2709,"content":"为什么你的帖子写得这么优秀，很想抄你的... ...","createdAt":1541410848572},{"id":7926,"originId":"5b780177a210553a0cde2a1f","articleId":1706,"userId":2093,"content":"据说杭州最有活力的软件公司。","createdAt":1534591351162},{"id":7927,"originId":"5b78bb78632c7f422e5b7f9c","articleId":1706,"userId":2093,"content":"欢迎来拿早鸟票哦。\r\n内推邮箱：\r\n简历请砸到以下邮箱：（中英文简历，注明想要的职位，不明的也可以发邮件咨询我）\r\n343471829@qq.com","createdAt":1534638968766},{"id":7928,"originId":"5b7a4872632c7f422e5b7fe6","articleId":1706,"userId":2093,"content":"Up","createdAt":1534740594906},{"id":7929,"originId":"5b7f6cc3632c7f422e5b80fa","articleId":1706,"userId":2093,"content":"内推9月上月上旬结束。大家抓紧时间哦。","createdAt":1535077571708},{"id":7930,"originId":"5bdff46721d75b74609f3fb1","articleId":1706,"userId":2093,"content":"内推人员上线啦！","createdAt":1541403751686},{"id":7931,"originId":"5bac3e469545eaf107b9c656","articleId":1708,"userId":2759,"content":"up","createdAt":1538014790482},{"id":7932,"originId":"5bacbf4c15e4fd1923f48af2","articleId":1708,"userId":2759,"content":"up","createdAt":1538047820423},{"id":7933,"originId":"5bae08ce37a6965f59051d50","articleId":1708,"userId":516,"content":"up","createdAt":1538132174057},{"id":7934,"originId":"5baedd6d15e4fd1923f48b68","articleId":1708,"userId":2759,"content":"up","createdAt":1538186605364},{"id":7935,"originId":"5bb02cab9545eaf107b9c72d","articleId":1708,"userId":2759,"content":"up","createdAt":1538272427608},{"id":7936,"originId":"5bbabc2d15e4fd1923f48d24","articleId":1708,"userId":2759,"content":"up","createdAt":1538964525618},{"id":7937,"originId":"5bbae47e9545eaf107b9c8eb","articleId":1708,"userId":2760,"content":"你的邮箱是不是有问题呀，我发不过去呀。\r\n[](https://yu.chen.news/2018/09/25/cv-cn.html)https://yu.chen.news/2018/09/25/cv-cn.html","createdAt":1538974846673},{"id":7938,"originId":"5bbb4a9537a6965f59051fb8","articleId":1708,"userId":2759,"content":"[@kuyoonjo](/user/kuyoonjo) 方便留个联系方式么？","createdAt":1539000981232},{"id":7939,"originId":"5bbc0dfb15e4fd1923f48d5a","articleId":1708,"userId":2759,"content":"up","createdAt":1539051003703},{"id":7940,"originId":"5bbc33509545eaf107b9c92e","articleId":1708,"userId":2760,"content":"[@frully](/user/frully) yu@chen.news","createdAt":1539060560415},{"id":7941,"originId":"5bbd536d37a6965f59052016","articleId":1708,"userId":2759,"content":"up","createdAt":1539134317269},{"id":7942,"originId":"5bbeaea937a6965f5905208c","articleId":1708,"userId":2759,"content":"up","createdAt":1539223209205},{"id":7943,"originId":"5bbffbdd9545eaf107b9ca1e","articleId":1708,"userId":2759,"content":"up","createdAt":1539308509944},{"id":7944,"originId":"5bc3f7a2ede204052db8052f","articleId":1708,"userId":2759,"content":"up","createdAt":1539569570725},{"id":7945,"originId":"5bc5467937a6965f59052242","articleId":1708,"userId":2759,"content":"up","createdAt":1539655289203},{"id":7946,"originId":"5bc696bf37a6965f590522b5","articleId":1708,"userId":2759,"content":"up","createdAt":1539741375157},{"id":7947,"originId":"5bc7ec4215e4fd1923f4902a","articleId":1708,"userId":2759,"content":"up","createdAt":1539828802271},{"id":7948,"originId":"5bc93a8037a6965f5905239f","articleId":1708,"userId":2759,"content":"up","createdAt":1539914368400},{"id":7949,"originId":"5bcd5f4f9545eaf107b9cd43","articleId":1708,"userId":2759,"content":"up","createdAt":1540185935701},{"id":7950,"originId":"5bce7b9797da434450aecb77","articleId":1708,"userId":2759,"content":"up","createdAt":1540258711832},{"id":7951,"originId":"5bcfd1e4580fce4950e22028","articleId":1708,"userId":2759,"content":"up","createdAt":1540346340627},{"id":7952,"originId":"5bd11f7889665c365e94427e","articleId":1708,"userId":2759,"content":"up","createdAt":1540431736573},{"id":7953,"originId":"5bd1264089665c365e944284","articleId":1708,"userId":626,"content":"还招人么？","createdAt":1540433472601},{"id":7954,"originId":"5bd27171af3d3a315eab0310","articleId":1708,"userId":2759,"content":"[@zhen-ke](/user/zhen-ke) 招的","createdAt":1540518257755},{"id":7955,"originId":"5bdd8018646a05745b7b7d35","articleId":1708,"userId":2442,"content":"能免费看小说吗","createdAt":1541242904194},{"id":7956,"originId":"5bda9f3493f8d64f74b013c9","articleId":1711,"userId":523,"content":"哪一个公司，我现在在长沙","createdAt":1541054260821},{"id":7957,"originId":"5bdb9e18646a05745b7b72a0","articleId":1711,"userId":2762,"content":"[@HongYangHT](/user/HongYangHT) 湖南畅旅，想深入沟通加我QQ就好了","createdAt":1541119512648},{"id":7958,"originId":"5bdbf181646a05745b7b76e6","articleId":1711,"userId":430,"content":"同长沙帮顶下","createdAt":1541140865185},{"id":7959,"originId":"5bd163c789665c365e944293","articleId":1712,"userId":626,"content":"请问还招人么？","createdAt":1540449223122},{"id":7960,"originId":"5bd16f2689665c365e944297","articleId":1712,"userId":2583,"content":"[@zhen-ke](/user/zhen-ke) 招","createdAt":1540452134498},{"id":7961,"originId":"5bd4730114e994202cd5bdb1","articleId":1712,"userId":90,"content":"不说了顶一下，老福山的233班车真挤。","createdAt":1540649729437},{"id":7962,"originId":"5bd9560879705c3226085106","articleId":1712,"userId":2583,"content":"[@jxycbjhc](/user/jxycbjhc) 我还没坐过。。。。。","createdAt":1540969992725},{"id":7963,"originId":"5bda4ed2a4799b3c5972a41e","articleId":1712,"userId":90,"content":"[@xh0521](/user/xh0521) 以前去学校的唯一班车","createdAt":1541033682343},{"id":7964,"originId":"5bdb0a4821d75b74609f2ceb","articleId":1712,"userId":2763,"content":"哇 难得看到一个江西的公司 话说这工资在南昌还可以啊 ","createdAt":1541081672903},{"id":7965,"originId":"5bdbb0f9646a05745b7b73a1","articleId":1712,"userId":2583,"content":"[@dyygtfx](/user/dyygtfx) 有朋友推荐吗？","createdAt":1541124345239},{"id":7966,"originId":"5bdbb647646a05745b7b740e","articleId":1712,"userId":2583,"content":"[@jxycbjhc](/user/jxycbjhc) 有同学在南昌做前端的可以推荐来哈哈","createdAt":1541125703662},{"id":7967,"originId":"5b94c01bbf116a8c0e425957","articleId":1715,"userId":2676,"content":"路人来个五毛提示--JWT","createdAt":1536475163767},{"id":7968,"originId":"5b95c14bbf116a8c0e42596f","articleId":1715,"userId":2247,"content":"简历已发送，请查收。","createdAt":1536541003538},{"id":7969,"originId":"5b9723d9ce9d14c2254df8aa","articleId":1715,"userId":48,"content":"[@wuxiaoqian88](/user/wuxiaoqian88) 你这不遵守规则啊","createdAt":1536631769128},{"id":7970,"originId":"5b9f2b294222769e07dd9307","articleId":1715,"userId":2542,"content":"[@wuxiaoqian88](/user/wuxiaoqian88) 可以删除掉","createdAt":1537157929140},{"id":7971,"originId":"5ba9b98837a6965f59051c55","articleId":1715,"userId":2542,"content":"up, 找到了个不错的哦！！ 大家继续加油啦！很嗨的团队哈！","createdAt":1537849736004},{"id":7972,"originId":"5bd1707bb56c42645edb7c9b","articleId":1715,"userId":2542,"content":"upup~~~ 新一轮面试开始啦！前段时间忙！","createdAt":1540452475294},{"id":7973,"originId":"5bd27d9aad50495f5e2fbb58","articleId":1715,"userId":523,"content":"so , secret key ?","createdAt":1540521370455},{"id":7974,"originId":"5bd27edead50495f5e2fbb5c","articleId":1715,"userId":523,"content":"jwt.decode('', {complete: true})","createdAt":1540521694538},{"id":7975,"originId":"5bd2b7afaf3d3a315eab0323","articleId":1715,"userId":523,"content":"招不招兼职呀","createdAt":1540536239374},{"id":7976,"originId":"5bd2c44989665c365e94430a","articleId":1715,"userId":626,"content":"请问招兼职么？","createdAt":1540539465064},{"id":7977,"originId":"5bd6c8f48ca34e0b047041f1","articleId":1715,"userId":2542,"content":"[@HongYangHT](/user/HongYangHT) 可以简历发来看看，原则上是要招募作为团队成员一起嗨的。","createdAt":1540802804005},{"id":7978,"originId":"5bd6c8f8d00aac1004de520e","articleId":1715,"userId":2542,"content":"[@zhen-ke](/user/zhen-ke) 可以简历发来看看，原则上是要招募作为团队成员一起嗨的。","createdAt":1540802808981},{"id":7979,"originId":"5bd90480d00aac1004de52f6","articleId":1715,"userId":523,"content":"@简历已发","createdAt":1540949120381},{"id":7980,"originId":"5bd6744e8ca34e0b047041be","articleId":1716,"userId":2764,"content":"持续招聘中~","createdAt":1540781134519},{"id":7981,"originId":"5bd17064af3d3a315eab02d4","articleId":1717,"userId":2542,"content":"up, 找到了个不错的哦！！ 大家继续加油啦！很嗨的团队哈！","createdAt":1540452452374},{"id":7982,"originId":"5b98be0bf1e8bc7579c784e2","articleId":1718,"userId":2765,"content":"jd 写的简单,有兴趣的可以发简历详细聊一聊啊!!!","createdAt":1536736779356},{"id":7983,"originId":"5b98bf7c37b3005a0b0e6e89","articleId":1718,"userId":2190,"content":"有学历限制么\r\n","createdAt":1536737148218},{"id":7984,"originId":"5b98c13e37b3005a0b0e6e8c","articleId":1718,"userId":2765,"content":"[@Rock-1](/user/Rock-1) 目前有本科的一个限制.","createdAt":1536737598007},{"id":7985,"originId":"5b9b1d97f1e8bc7579c78664","articleId":1718,"userId":2765,"content":"[@webkws](/user/webkws) 投,如果前端技术基础ok的话,我们可以不谈小程序经验.","createdAt":1536892311336},{"id":7986,"originId":"5b9f4a9937a6965f59051a3f","articleId":1718,"userId":2765,"content":"顶!","createdAt":1537165977694},{"id":7987,"originId":"5ba1b7b68f5b0c1c59ea0fbb","articleId":1718,"userId":2765,"content":"大家不要来压力面我啊...😭","createdAt":1537324982493},{"id":7988,"originId":"5ba6e3329545eaf107b9c570","articleId":1718,"userId":2501,"content":"除了学历我觉得我其他都没问题。。。专科生瑟瑟发抖\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1537663794724},{"id":7989,"originId":"5baaeaec9545eaf107b9c607","articleId":1718,"userId":2765,"content":"新添加了公司照片","createdAt":1537927916626},{"id":7990,"originId":"5bc6fc75ede204052db805e7","articleId":1718,"userId":1933,"content":"还要不","createdAt":1539767413885},{"id":7991,"originId":"5bd16e20ad50495f5e2fbb1f","articleId":1718,"userId":2765,"content":"[@Yangk030208](/user/Yangk030208) 要","createdAt":1540451872857},{"id":7992,"originId":"5bc94b169545eaf107b9cc9b","articleId":1719,"userId":2766,"content":"up","createdAt":1539918614934},{"id":7993,"originId":"5bd16706ad50495f5e2fbb17","articleId":1719,"userId":626,"content":"[@Andyliwr](/user/Andyliwr) 请问还招人么?","createdAt":1540450054710},{"id":7994,"originId":"5ba992d49545eaf107b9c5c9","articleId":1720,"userId":2401,"content":"顶","createdAt":1537839828330},{"id":7995,"originId":"5bd160dbad50495f5e2fbb11","articleId":1720,"userId":2767,"content":"up","createdAt":1540448475571},{"id":7996,"originId":"5bd163d0ad50495f5e2fbb14","articleId":1720,"userId":626,"content":"[@zefelise](/user/zefelise) up?","createdAt":1540449232619},{"id":7997,"originId":"5bcd88e49545eaf107b9cd52","articleId":1721,"userId":2769,"content":"还招不招","createdAt":1540196580635},{"id":7998,"originId":"5bd12a08af3d3a315eab02bd","articleId":1721,"userId":626,"content":"请还招人么？","createdAt":1540434440152},{"id":7999,"originId":"5bcfe4fbb56c42645edb7c2b","articleId":1722,"userId":2163,"content":"----------------不打卡--------------------------\r\n----------------全体MacPro-------------------\r\n---------------全额五险一金-------------------\r\n----------------业界良心薪资------------------\r\n----------------优秀前端团队------------------\r\nCome on, just waiting for you !!!","createdAt":1540351227187},{"id":8000,"originId":"5bc616abede204052db805b7","articleId":1723,"userId":762,"content":"工作地点呢？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1539708587420},{"id":8001,"originId":"5bc7249cede204052db805f1","articleId":1723,"userId":2343,"content":"北京希格玛大厦","createdAt":1539777692180},{"id":8002,"originId":"5bc0d2ae37a6965f5905215c","articleId":1724,"userId":501,"content":"已投简历","createdAt":1539363502221},{"id":8003,"originId":"5bc7031137a6965f590522f8","articleId":1724,"userId":2089,"content":"[@cllgeek](/user/cllgeek) 你好，请问你的简历投递到哪里了，我这边没有收到","createdAt":1539769105664},{"id":8004,"originId":"5bc709b215e4fd1923f49007","articleId":1724,"userId":501,"content":"[@woodsrong](/user/woodsrong) \r\n\r\n重新发了一遍","createdAt":1539770802491},{"id":8005,"originId":"59a8cb50ea0aea6b0c64e6dc","articleId":1726,"userId":2578,"content":"真想去，离家也近，工作经验是够了，可学历不够呀。\r\nReactJS搭框架，开发项目是写了好些了，可是原生JS写东西就一般了。\r\n","createdAt":1504234320448},{"id":8006,"originId":"59b9e025cc7057e50a717e74","articleId":1726,"userId":2089,"content":"[@xiaotuni](/user/xiaotuni) 你好，学历非强要求，重点还是能力","createdAt":1505353765217},{"id":8007,"originId":"59f1940ca2f4138a5b7fee12","articleId":1726,"userId":1390,"content":"想问一下阿里还有应届生的坑吗\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1509004300820},{"id":8008,"originId":"59fae0a063db6ac51afed9c9","articleId":1726,"userId":2089,"content":"[@huruji](/user/huruji) 你好，应届生目前只能走阿里官方的校招流程，坑还是很多的","createdAt":1509613728733},{"id":8009,"originId":"59fc97c580cd17157a504ad2","articleId":1726,"userId":1390,"content":"[@woodsrong](/user/woodsrong) 好的，谢谢~","createdAt":1509726149848},{"id":8010,"originId":"59fd1f0a80cd17157a504ada","articleId":1726,"userId":506,"content":"不错哦","createdAt":1509760778046},{"id":8011,"originId":"5a12411982ee2a577dc79726","articleId":1726,"userId":2089,"content":"[@huruji](/user/huruji) Hi，huruji，我们这边重新开放了校招生的招聘，你这边可以发份简历给我，收到后我们会在7天内完成评估","createdAt":1511145753979},{"id":8012,"originId":"5a16f6f1fa68dfbc62addfa2","articleId":1726,"userId":1390,"content":"[@woodsrong](/user/woodsrong) 啊，现在才看到，我前几天已经面了阿里的其他部门，我还可以面吗？会不会有冲突呀？","createdAt":1511454449766},{"id":8013,"originId":"5a20390c110a338547d6e361","articleId":1726,"userId":2771,"content":"52","createdAt":1512061196809},{"id":8014,"originId":"5a3261889807389a1809f3c6","articleId":1726,"userId":2089,"content":"欢迎继续投递简历！","createdAt":1513251208050},{"id":8015,"originId":"5a3ba94e8230827a18293967","articleId":1726,"userId":2772,"content":"真心想去，只是学过react，用的少。现在公司主要用vue和angular....","createdAt":1513859406256},{"id":8016,"originId":"5a4ccebe99d207fa49f5cb9c","articleId":1726,"userId":2089,"content":"[@yangyiru](/user/yangyiru) 框架语言不限制的，可以发简历试试 ","createdAt":1514983102713},{"id":8017,"originId":"5badd309ede204052db80267","articleId":1727,"userId":1160,"content":"小伙伴们，快来哦","createdAt":1538118409843},{"id":8018,"originId":"5bade09a9545eaf107b9c6c6","articleId":1727,"userId":2773,"content":"当看到\r\n\r\n“工程师和产品经理跑到广州的江南市场，一个一个档口的去观察批发市场老板的进发货节奏，定价策略，定装规格，他们使用 App 的习惯，比如 6 月份，工程师跑到山东滕州的农户家里，夜里两点跟着收货的人，在地里挖土豆…”\r\n\r\n这段的时候，我觉得这是一个非常接地气的农业互联网公司，若不是去亲身了解和深入体会用户场景，一味的坐在办公室开会讨论用户使用场景，怎能做出优秀的，更贴合用户的产品呢。","createdAt":1538121882511},{"id":8019,"originId":"5bade37cede204052db80269","articleId":1727,"userId":1160,"content":"[@byk04712](/user/byk04712) 非常接地气","createdAt":1538122620431},{"id":8020,"originId":"5bba0be69545eaf107b9c8ca","articleId":1727,"userId":2499,"content":"[@huanglong](/user/huanglong) 18届的可以么","createdAt":1538919398237},{"id":8021,"originId":"5bbc5e7237a6965f59051fe7","articleId":1727,"userId":1160,"content":"[@TanYiBing](/user/TanYiBing) 现在只有 19 届的名额啊，亲","createdAt":1539071602671},{"id":8022,"originId":"5bbefb1937a6965f590520a9","articleId":1727,"userId":1412,"content":"[@huanglong](/user/huanglong) 已发，期待回复。\n  ------\n  来自[MaterialCNode](https://alexlees.top)\n  ","createdAt":1539242777545},{"id":8023,"originId":"5bbb182837a6965f59051faf","articleId":1731,"userId":2777,"content":"已投","createdAt":1538988072929},{"id":8024,"originId":"5bb378ccede204052db80358","articleId":1733,"userId":2779,"content":"不留个 联系方式和待遇情况？","createdAt":1538488524057},{"id":8025,"originId":"5bb4a6449545eaf107b9c7e3","articleId":1733,"userId":2756,"content":"待遇电洽\r\n\r\n联系方式 5b6u5L+h77yaUmVnYWxpc0x1eHVz","createdAt":1538565700975},{"id":8026,"originId":"5bb661459545eaf107b9c84a","articleId":1733,"userId":2756,"content":"已经有一个有初步意向的了 暂时不再需要了 谢谢大家","createdAt":1538679109421},{"id":8027,"originId":"5b8e022837b3005a0b0e6b4b","articleId":1734,"userId":2780,"content":"有意者可以通过邮箱回复我哦~","createdAt":1536033320687},{"id":8028,"originId":"5b8f8e8ebf116a8c0e425811","articleId":1734,"userId":2780,"content":"工作氛围超好","createdAt":1536134798402},{"id":8029,"originId":"5b8fa44382f0728f354d7452","articleId":1734,"userId":2781,"content":"我是在校大四学生，明年6月毕业，么有node开发经验，请问可以过去实习吗？","createdAt":1536140355721},{"id":8030,"originId":"5b90de004cdb88f72f5a90ff","articleId":1734,"userId":2780,"content":"[@pengqiangsheng](/user/pengqiangsheng) 是全职实习么？可以发一份简历到我留的邮箱里~","createdAt":1536220672059},{"id":8031,"originId":"5b9753c7a333b7bd25441f39","articleId":1734,"userId":2780,"content":"求关注~","createdAt":1536644039001},{"id":8032,"originId":"5b978b0737b3005a0b0e6df9","articleId":1734,"userId":98,"content":"有趣","createdAt":1536658183173},{"id":8033,"originId":"5b99bd2ace9d14c2254df996","articleId":1734,"userId":2780,"content":"求关注~","createdAt":1536802090260},{"id":8034,"originId":"5b9f2e678f5b0c1c59ea0f14","articleId":1734,"userId":2780,"content":"求关注~\r\n","createdAt":1537158759035},{"id":8035,"originId":"5b9f5c1a4222769e07dd9318","articleId":1734,"userId":2782,"content":"[@starwalter](/user/starwalter) ","createdAt":1537170458257},{"id":8036,"originId":"5b9f5c1a9545eaf107b9c3bf","articleId":1734,"userId":2782,"content":"[@zengming00](/user/zengming00) ","createdAt":1537170458881},{"id":8037,"originId":"5b9f5c1b4222769e07dd931a","articleId":1734,"userId":2782,"content":"[@pengqiangsheng](/user/pengqiangsheng) ","createdAt":1537170459571},{"id":8038,"originId":"5b9f5c1c9545eaf107b9c3c2","articleId":1734,"userId":2782,"content":"[@starwalter](/user/starwalter) ","createdAt":1537170460281},{"id":8039,"originId":"5b9f5cd59545eaf107b9c3c5","articleId":1734,"userId":2782,"content":"[@starwalter](/user/starwalter) ","createdAt":1537170645882},{"id":8040,"originId":"5ba076518f5b0c1c59ea0f61","articleId":1734,"userId":2780,"content":"[@521guyu](/user/521guyu) ？？？","createdAt":1537242705976},{"id":8041,"originId":"5ba0767337a6965f59051a89","articleId":1734,"userId":2780,"content":"继续求关注~","createdAt":1537242739585},{"id":8042,"originId":"5ba3033915e4fd1923f48927","articleId":1734,"userId":2780,"content":"感谢各位投递简历，收到简历后我会及时的回复大家的~","createdAt":1537409849754},{"id":8043,"originId":"5ba9fb998f5b0c1c59ea115d","articleId":1734,"userId":2780,"content":"继续求关注，欢迎大牛、小牛、萌新呦~","createdAt":1537866649510},{"id":8044,"originId":"5bab37328f5b0c1c59ea117f","articleId":1734,"userId":2780,"content":"欢迎投递简历~","createdAt":1537947442397},{"id":8045,"originId":"5baee4629545eaf107b9c6f2","articleId":1734,"userId":2780,"content":"欢迎投递简历~","createdAt":1538188386226},{"id":8046,"originId":"5baf4518ede204052db802a6","articleId":1734,"userId":968,"content":"可以兼职么^_^","createdAt":1538213144859},{"id":8047,"originId":"5ba1cb9e37a6965f59051adc","articleId":1736,"userId":2783,"content":"顶","createdAt":1537330078635},{"id":8048,"originId":"5ba9ab858f5b0c1c59ea1136","articleId":1736,"userId":2783,"content":"up","createdAt":1537846149399},{"id":8049,"originId":"5bab69679545eaf107b9c63b","articleId":1736,"userId":2783,"content":"up","createdAt":1537960295600},{"id":8050,"originId":"5ba5e26e37a6965f59051bd0","articleId":1738,"userId":2785,"content":"手动顶！","createdAt":1537598062694},{"id":8051,"originId":"5ba9fc0e37a6965f59051c67","articleId":1738,"userId":2786,"content":"顶顶顶！","createdAt":1537866766651},{"id":8052,"originId":"5ba9aa478f5b0c1c59ea1135","articleId":1740,"userId":835,"content":"自己顶一下，欢迎大家踊跃报名~有问题欢迎留言~","createdAt":1537845831746},{"id":8053,"originId":"5b14b1e029e6e510415b277a","articleId":1741,"userId":516,"content":"是否支持远程面试？","createdAt":1528082912082},{"id":8054,"originId":"5b17419129e6e510415b2846","articleId":1741,"userId":2788,"content":"[@nnliang](/user/nnliang) 可以 简历发来看看","createdAt":1528250769663},{"id":8055,"originId":"5b178f5e8a4f51e140d945de","articleId":1741,"userId":516,"content":"[@chengxinsun](/user/chengxinsun) 发你邮箱了","createdAt":1528270686263},{"id":8056,"originId":"5b18c4be57137f22415c49f1","articleId":1741,"userId":2788,"content":"[@nnliang](/user/nnliang) 好的","createdAt":1528349886364},{"id":8057,"originId":"5b1de62829e6e510415b29c2","articleId":1741,"userId":2788,"content":"顶起来","createdAt":1528686120744},{"id":8058,"originId":"5b2870415cd02be640901535","articleId":1741,"userId":2788,"content":"小长假已过，简历快快来","createdAt":1529376833100},{"id":8059,"originId":"5b304ea1a1308bf723aa3972","articleId":1741,"userId":2788,"content":"顶一顶，还在招","createdAt":1529892513368},{"id":8060,"originId":"5b33073da1308bf723aa39fa","articleId":1741,"userId":2788,"content":"不要沉，有想换环境快过来吧","createdAt":1530070845672},{"id":8061,"originId":"5b3dc91f35342ab069061264","articleId":1741,"userId":2788,"content":"自己顶  还在招","createdAt":1530775839127},{"id":8062,"originId":"5b4d50edaef62f1b0f9e03a8","articleId":1741,"userId":2788,"content":"顶起来〜","createdAt":1531793645432},{"id":8063,"originId":"5b70ef58b71aedfe4c12691d","articleId":1741,"userId":2788,"content":"还在找〜","createdAt":1534127960139},{"id":8064,"originId":"5b7e1ac8c52ad1482eb9415b","articleId":1741,"userId":2788,"content":"up","createdAt":1534991048772},{"id":8065,"originId":"5b978fc137b3005a0b0e6e05","articleId":1741,"userId":2788,"content":"有想去天津发展的 也可以考虑一下","createdAt":1536659393327},{"id":8066,"originId":"5b97b079f1e8bc7579c78482","articleId":1741,"userId":1730,"content":"[@chengxinsun](/user/chengxinsun) 这个必须顶一顶！","createdAt":1536667769283},{"id":8067,"originId":"5b9863f7a333b7bd25441f8b","articleId":1741,"userId":2789,"content":"您好，请问天津搜狐有前端岗位吗","createdAt":1536713719191},{"id":8068,"originId":"5b9f16d38f5b0c1c59ea0f04","articleId":1741,"userId":1730,"content":"帮忙顶一下","createdAt":1537152723517},{"id":8069,"originId":"5ba49e1037a6965f59051b9c","articleId":1741,"userId":2788,"content":"[@liuxuan351](/user/liuxuan351) 有的，简历发来，公司配合安排天津户口","createdAt":1537515024902},{"id":8070,"originId":"5ba49e249545eaf107b9c526","articleId":1741,"userId":2788,"content":"[@lwcbest](/user/lwcbest) 就喜欢这样的，哈哈","createdAt":1537515044599},{"id":8071,"originId":"5ba4938e15e4fd1923f4897f","articleId":1742,"userId":2790,"content":"同学们，感兴趣的拿简历砸我吧","createdAt":1537512334112},{"id":8072,"originId":"5b98d548f1e8bc7579c784f0","articleId":1745,"userId":220,"content":"zhanghuawei@opsmind.com","createdAt":1536742728731},{"id":8073,"originId":"5ba252c337a6965f59051b12","articleId":1745,"userId":2366,"content":"欸，看到邮箱楞了下，原来是zhanghuawei@opsmind.com","createdAt":1537364675475},{"id":8074,"originId":"5ba2f3218f5b0c1c59ea1009","articleId":1745,"userId":2499,"content":"培养新人吗","createdAt":1537405729346},{"id":8075,"originId":"5ba077f28f5b0c1c59ea0f63","articleId":1746,"userId":2783,"content":"又来招人啦，有兴趣的小伙伴可以投递简历！","createdAt":1537243122853},{"id":8076,"originId":"5ba052ef37a6965f59051a79","articleId":1747,"userId":1614,"content":"社招的直接发送简历到我邮箱哈\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1537233647144},{"id":8077,"originId":"5b9e3b7c37a6965f590519d7","articleId":1748,"userId":2519,"content":"请问委屈委屈饿 ","createdAt":1537096572277},{"id":8078,"originId":"5b3df36335342ab06906128a","articleId":1749,"userId":2795,"content":"经验薪资都是open的，看机会的简历来吧～～～","createdAt":1530786659392},{"id":8079,"originId":"5b3ecce3e374eeab6929d472","articleId":1749,"userId":2795,"content":"找工作的不找工作的可以来看看呀～","createdAt":1530842339496},{"id":8080,"originId":"5b4300d213ca2fe569fb91f3","articleId":1749,"userId":2795,"content":"看机会的，前端（react方向），后端（nodejs方向），测试，UI，产品（有教育类视频产品经验），来吧～～～","createdAt":1531117778424},{"id":8081,"originId":"5b45678235342ab06906142e","articleId":1749,"userId":2795,"content":"已获2亿C轮融资～","createdAt":1531275138971},{"id":8082,"originId":"5b48069413ca2fe569fb935b","articleId":1749,"userId":2795,"content":"看机会的，前端（react方向），后端（nodejs方向），测试，UI，产品（有教育类视频产品经验），来吧～～～","createdAt":1531446932714},{"id":8083,"originId":"5b5bbcadb71aedfe4c126552","articleId":1749,"userId":1986,"content":"支持一下","createdAt":1532738733702},{"id":8084,"originId":"5b5eb3a7673571454c633d12","articleId":1749,"userId":2795,"content":"秋招的看过来，只要你够牛逼，谈钱伤感情～","createdAt":1532933031512},{"id":8085,"originId":"5b71477958db3ccf66a4542a","articleId":1749,"userId":2795,"content":"秋招了，还在等什么～～～","createdAt":1534150521325},{"id":8086,"originId":"5b717627792f59ae501bf94e","articleId":1749,"userId":2796,"content":"秋招要笔试吗？前端怼不怼算法的？","createdAt":1534162471792},{"id":8087,"originId":"5b724b4f58db3ccf66a4545b","articleId":1749,"userId":2795,"content":"[@Xhhhhhh](/user/Xhhhhhh) 我们公司面试是没有笔试的，看机会的话不妨发个简历来瞅瞅～","createdAt":1534217039915},{"id":8088,"originId":"5b7a5fce944cb8340c27e1f1","articleId":1749,"userId":2795,"content":"薪资经验open","createdAt":1534746574454},{"id":8089,"originId":"5b8ab06efad9359e2e8313c7","articleId":1749,"userId":438,"content":"下个月来试试哈哈哈","createdAt":1535815790012},{"id":8090,"originId":"5b8ca86671b88cc417ed082a","articleId":1749,"userId":2795,"content":"[@xwadh](/user/xwadh) 来啊来啊，方便发个简历瞅瞅，或者加个微信先聊聊～我的微信：zhangtinggudao002","createdAt":1535944806200},{"id":8091,"originId":"5b8ca87c82f0728f354d736f","articleId":1749,"userId":2795,"content":"还有要试试的不，聊聊～","createdAt":1535944828489},{"id":8092,"originId":"5b8e541a82f0728f354d73f3","articleId":1749,"userId":2795,"content":"up","createdAt":1536054298859},{"id":8093,"originId":"5b8e543582f0728f354d73f4","articleId":1749,"userId":2795,"content":"up","createdAt":1536054325136},{"id":8094,"originId":"5b8e5dc437b3005a0b0e6b6f","articleId":1749,"userId":516,"content":"这是有多着急？ double up","createdAt":1536056772504},{"id":8095,"originId":"5b8f38abbf116a8c0e4257e4","articleId":1749,"userId":2795,"content":"[@nnliang](/user/nnliang) 这年头招人不易啊，且找且珍惜～～～有看的机会的推荐推荐啊，钱多活少的那种等着你们","createdAt":1536112811604},{"id":8096,"originId":"5b8f3a1682f0728f354d740c","articleId":1749,"userId":516,"content":"[@Lily0501](/user/Lily0501) 好的好的","createdAt":1536113174099},{"id":8097,"originId":"5b92188ebf116a8c0e4258b2","articleId":1749,"userId":2795,"content":"up","createdAt":1536301198747},{"id":8098,"originId":"5b9616f537b3005a0b0e6d4b","articleId":1749,"userId":2795,"content":"up","createdAt":1536562933775},{"id":8099,"originId":"5b973c40a333b7bd25441f35","articleId":1749,"userId":2795,"content":"up","createdAt":1536638016075},{"id":8100,"originId":"5b9776f9a333b7bd25441f49","articleId":1749,"userId":643,"content":"每日up /憨笑","createdAt":1536653049466},{"id":8101,"originId":"5b99f47a37b3005a0b0e6f08","articleId":1749,"userId":2795,"content":"[@SURA907](/user/SURA907) 忍着，哈哈，hr小姐姐招人也不容易的","createdAt":1536816250917},{"id":8102,"originId":"5b9b303bf1e8bc7579c786bc","articleId":1749,"userId":2795,"content":"海归技术大牛，等你加入～","createdAt":1536897083712},{"id":8103,"originId":"5b8dee3737b3005a0b0e6b44","articleId":1752,"userId":2798,"content":"请问react职位接受远程吗？","createdAt":1536028215731},{"id":8104,"originId":"5b922b87bf116a8c0e4258ba","articleId":1752,"userId":516,"content":"公司名字？","createdAt":1536306055824},{"id":8105,"originId":"5b97234dce9d14c2254df8a8","articleId":1752,"userId":2799,"content":"aftership?","createdAt":1536631629458},{"id":8106,"originId":"56d6ad4f7fc3af3a77db4724","articleId":1753,"userId":319,"content":"菜逼纯后端专科狗路过打酱油","createdAt":1456909647180},{"id":8107,"originId":"572170db3f27a7c841bcb718","articleId":1753,"userId":2801,"content":"顶楼主，欢迎骚扰","createdAt":1461809371022},{"id":8108,"originId":"57218bb6fa48138c41110ed9","articleId":1753,"userId":2773,"content":"顶\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1461816246674},{"id":8109,"originId":"57bab334b32043f532d40dfb","articleId":1753,"userId":2125,"content":"公司已拿到全国范围保险业务经营牌照，完成增资5000万。现在正是一个很好的机会点，有意向的同学快点投简历吧。","createdAt":1471853364955},{"id":8110,"originId":"57bd7ed11e600faf7ffc8836","articleId":1753,"userId":2802,"content":"完美","createdAt":1472036561002},{"id":8111,"originId":"57bda158bf0ed4f07ef2e69d","articleId":1753,"userId":1754,"content":"完美是完美，感觉能力不够啊\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1472045400410},{"id":8112,"originId":"57bdae8ec21cf0657feecb26","articleId":1753,"userId":1375,"content":"符合是符合，有点远","createdAt":1472048782872},{"id":8113,"originId":"57bea81f100afbbc0dcc537d","articleId":1753,"userId":2803,"content":"哈哈哈\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1472112671770},{"id":8114,"originId":"57bea832bf0ed4f07ef2e6eb","articleId":1753,"userId":2803,"content":"[@imoc](/user/imoc)\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1472112690948},{"id":8115,"originId":"58257350b71596cc386784ac","articleId":1753,"userId":2125,"content":"upup","createdAt":1478849360015},{"id":8116,"originId":"5825de2b1120be9438b02afe","articleId":1753,"userId":281,"content":"还招人吗\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1478876715058},{"id":8117,"originId":"58491d9af3576dd333f86ae6","articleId":1753,"userId":2125,"content":"[@dpc761218914](/user/dpc761218914) 一直在招","createdAt":1481186714276},{"id":8118,"originId":"5859eea6491e0754534fb1ec","articleId":1753,"userId":2125,"content":"目前新开机构已有6家。upup","createdAt":1482288806765},{"id":8119,"originId":"58a2b5f4cefe06e13676a7de","articleId":1753,"userId":2125,"content":"欢迎大家投简历","createdAt":1487058420057},{"id":8120,"originId":"58f96f0ebbaf2f3f569be0dc","articleId":1753,"userId":2125,"content":"顶顶，一直在招人","createdAt":1492741902388},{"id":8121,"originId":"58f9c39731e8c2bb1c3dcc85","articleId":1753,"userId":2804,"content":"那个，广州招人吗。。。","createdAt":1492763543401},{"id":8122,"originId":"58fb5101523b9d0956dad8a6","articleId":1753,"userId":2805,"content":"陈文志 是你们什么人啊？\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1492865281188},{"id":8123,"originId":"5902b385bbaf2f3f569be3a4","articleId":1753,"userId":2524,"content":"貌似又是全后端的","createdAt":1493349253908},{"id":8124,"originId":"59278466855efbac2cf7a398","articleId":1753,"userId":2801,"content":"小伙伴们，现在正处于公司高速发展期，前景广阔，机会多多，前后端都招欢迎简历骚扰  hr@99bx.cn","createdAt":1495762022819},{"id":8125,"originId":"5927848e855efbac2cf7a39a","articleId":1753,"userId":2801,"content":"[@xiaowu](/user/xiaowu) 不是同一家。。。","createdAt":1495762062778},{"id":8126,"originId":"5928254fba8670562a40f58c","articleId":1753,"userId":2805,"content":"我现在也开发类似平台，有保险中介公司合作还有跟其他有资源的企业做资源共享\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1495803215137},{"id":8127,"originId":"592946a8ba8670562a40f5e2","articleId":1753,"userId":2806,"content":"霓虹女","createdAt":1495877288511},{"id":8128,"originId":"59393bfc7845b4795c6d9aaf","articleId":1753,"userId":2807,"content":"好公司，顶顶顶！！！","createdAt":1496923132648},{"id":8129,"originId":"5970b0ae3f0ab31540ed4bdf","articleId":1753,"userId":2808,"content":"泳池超棒！~~游好了接着码代码！","createdAt":1500557486232},{"id":8130,"originId":"5970b1a90c87675e7467469d","articleId":1753,"userId":2800,"content":"更新","createdAt":1500557737078},{"id":8131,"originId":"5970bcac3f0ab31540ed4be3","articleId":1753,"userId":2125,"content":"顶顶","createdAt":1500560556204},{"id":8132,"originId":"5b963f6737b3005a0b0e6d5d","articleId":1753,"userId":2125,"content":"又开始招聘啦","createdAt":1536573287206},{"id":8133,"originId":"5b91e8e0bf116a8c0e4258a2","articleId":1755,"userId":98,"content":"这个加密方式太简单了","createdAt":1536288992483},{"id":8134,"originId":"5b9330284cdb88f72f5a9184","articleId":1755,"userId":2811,"content":"明显BASE64，用得太多了","createdAt":1536372776817},{"id":8135,"originId":"5b8ce6a071b88cc417ed0848","articleId":1761,"userId":2780,"content":"看着很不错啊~","createdAt":1535960736492},{"id":8136,"originId":"5b8d13e182f0728f354d73b0","articleId":1761,"userId":2285,"content":"想去，请问下现在还缺人吗？\r\n","createdAt":1535972321092},{"id":8137,"originId":"59b8b17fe483de12679845cb","articleId":1762,"userId":2618,"content":"JD简单也就算了，咱至少邮箱留一个吧🙂     ---from [xieww](https://github.com/xieww)","createdAt":1505276287520},{"id":8138,"originId":"59b8bf672db872766ed747c6","articleId":1762,"userId":2817,"content":"[@xieww](/user/xieww) 多谢提醒 已更新","createdAt":1505279847163},{"id":8139,"originId":"59bbd1683c896622428ec798","articleId":1762,"userId":2818,"content":"angular, angularJS这两个分开列出来是有啥区别-_-","createdAt":1505481064192},{"id":8140,"originId":"59bbd55ecc7057e50a717f50","articleId":1762,"userId":2777,"content":"[@Yakima-Teng](/user/Yakima-Teng) angular指的是2+，angularJS指1.x","createdAt":1505482078729},{"id":8141,"originId":"5b892f5d2a585e4e2f27007e","articleId":1762,"userId":1096,"content":"没这待遇吗\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1535717213809},{"id":8142,"originId":"5a615fc39288dc8153287f7d","articleId":1765,"userId":1947,"content":"可以远程面试不呢？深圳node有意","createdAt":1516330947090},{"id":8143,"originId":"5a6167e6afa0a121784a8d8a","articleId":1765,"userId":2820,"content":"[@oyosc](/user/oyosc) 如果在异地，可以先远程面试，支持年前面试，年后入职哦。 so 快甩简历给我吧","createdAt":1516333030615},{"id":8144,"originId":"5a61a876afa0a121784a8da1","articleId":1765,"userId":1947,"content":"[@zhengcongcong](/user/zhengcongcong) 简历已投，请查收","createdAt":1516349558105},{"id":8145,"originId":"5a6e8c12afa0a121784a90c3","articleId":1765,"userId":2820,"content":"长期有效","createdAt":1517194258910},{"id":8146,"originId":"5a797287497a08f571384e7b","articleId":1765,"userId":2820,"content":"年前面试，年后入职哦","createdAt":1517908615968},{"id":8147,"originId":"5a910683653c43b914684f7b","articleId":1765,"userId":2820,"content":"持续进行中哦","createdAt":1519453827480},{"id":8148,"originId":"5a94c3ce8d6e16e56bb8096b","articleId":1765,"userId":2821,"content":"楼主面试的，很赞。顶一个。","createdAt":1519698894850},{"id":8149,"originId":"5a9e4d62ce4a27f867526de5","articleId":1765,"userId":2820,"content":"有梦想的年轻人","createdAt":1520323938730},{"id":8150,"originId":"5aa62cd819b2e3db18959cce","articleId":1765,"userId":2820,"content":"顶个贴","createdAt":1520839896270},{"id":8151,"originId":"5aa88083f5dfc27d7ad9879b","articleId":1765,"userId":2820,"content":"日常顶贴","createdAt":1520992387886},{"id":8152,"originId":"5aafa5d8e7b166bb7b9ecc0f","articleId":1765,"userId":2820,"content":"日常","createdAt":1521460696105},{"id":8153,"originId":"5aafa6d019b2e3db18959f35","articleId":1765,"userId":2618,"content":"看来是要求不是一般高","createdAt":1521460944454},{"id":8154,"originId":"5ab06cdce7b166bb7b9ecc30","articleId":1765,"userId":1947,"content":"友情提示：本地的可以去试试，公司环境还不错，异地的就别去了，浪费人力财力，除非是给报销，不过看来还是太年轻了...","createdAt":1521511644564},{"id":8155,"originId":"5ab9adb352d7d3a8698a4826","articleId":1765,"userId":2820,"content":"不限年限，只要是有潜力 或者 有能力的我们都欢迎","createdAt":1522118067053},{"id":8156,"originId":"5ac1c7ba0ab0448f0fe3f7c0","articleId":1765,"userId":2820,"content":"日常","createdAt":1522649018152},{"id":8157,"originId":"5ac9d57f96f344940fbbae57","articleId":1765,"userId":2820,"content":"顶帖","createdAt":1523176831736},{"id":8158,"originId":"5acc699c042a804dc519680d","articleId":1765,"userId":2820,"content":"日常","createdAt":1523345820083},{"id":8159,"originId":"5ad07eb8464b1bfa6b425102","articleId":1765,"userId":2820,"content":"日常","createdAt":1523613368981},{"id":8160,"originId":"5ad403f7ba60fcc66b7b8170","articleId":1765,"userId":2820,"content":"日常","createdAt":1523844087610},{"id":8161,"originId":"5ad8909dba60fcc66b7b862d","articleId":1765,"userId":2820,"content":"[@spitWind](/user/spitWind) 长期有效，面试成功送奖金","createdAt":1524142237639},{"id":8162,"originId":"5adb063f3edb2aff6be85e7b","articleId":1765,"userId":1223,"content":"boss上直聘有没有?","createdAt":1524303423175},{"id":8163,"originId":"5adecccac5debbc0086fc857","articleId":1765,"userId":2820,"content":"[@spitWind](/user/spitWind) boss上也有","createdAt":1524550858875},{"id":8164,"originId":"5ae9884f1b02288048bd0bbe","articleId":1765,"userId":2820,"content":"日常顶帖","createdAt":1525254223874},{"id":8165,"originId":"5af13cda0a36e5312d6ece2b","articleId":1765,"userId":2822,"content":"熟悉是指会用就行吗， 感觉不简单吧...","createdAt":1525759194806},{"id":8166,"originId":"5af146990a36e5312d6ece32","articleId":1765,"userId":2820,"content":"[@WilliamWang233](/user/WilliamWang233) 对于使用的熟练度不同，我们也会有不同的定位的。不同水平阶段的会有不同的岗位","createdAt":1525761689243},{"id":8167,"originId":"5af14bc61b02288048bd0d92","articleId":1765,"userId":2822,"content":"[@zhengcongcong](/user/zhengcongcong) 能加微信聊一下吗？","createdAt":1525763014014},{"id":8168,"originId":"5af40115adea947348e762cb","articleId":1765,"userId":2820,"content":"[@WilliamWang233](/user/WilliamWang233) 可以简历发我邮箱   zhengcongcong@qmtv.com","createdAt":1525940501540},{"id":8169,"originId":"5b86f7932a585e4e2f26ffd1","articleId":1765,"userId":1723,"content":"还要人吗","createdAt":1535571859218},{"id":8170,"originId":"5b0250b341c819fd1c832b89","articleId":1767,"userId":2825,"content":"请问还在招吗？","createdAt":1526878387029},{"id":8171,"originId":"5b03afcd000332b81cf82198","articleId":1767,"userId":2824,"content":"[@congk](/user/congk) 长期招聘，欢迎投简历","createdAt":1526968269907},{"id":8172,"originId":"5b03cc6293ee7eb406973dd5","articleId":1767,"userId":2825,"content":"[@moldray](/user/moldray) 可你留的邮箱并不是思维造物的啊…","createdAt":1526975586172},{"id":8173,"originId":"5b868baa08d0b0fb2d8e6cf0","articleId":1767,"userId":2826,"content":"顶一下~","createdAt":1535544234493},{"id":8174,"originId":"5b717fd158db3ccf66a45439","articleId":1768,"userId":90,"content":"怎么没人点赞呢难道都去阿里网易去了？","createdAt":1534164945244},{"id":8175,"originId":"5b861ec1fad9359e2e8312b8","articleId":1768,"userId":2423,"content":"有初中级岗么\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1535516353862},{"id":8176,"originId":"5b695f1db71aedfe4c1267fa","articleId":1769,"userId":2175,"content":"顶🆙","createdAt":1533632285235},{"id":8177,"originId":"5b7e6354944cb8340c27e2f6","articleId":1769,"userId":2175,"content":"   \r\n顶🆙","createdAt":1535009620572},{"id":8178,"originId":"5b84fdc3fad9359e2e831277","articleId":1769,"userId":2175,"content":"顶🆙","createdAt":1535442371049},{"id":8179,"originId":"5b28c68557137f22415c4cee","articleId":1773,"userId":2534,"content":"帮顶！","createdAt":1529398917450},{"id":8180,"originId":"5b838b98944cb8340c27e3b9","articleId":1773,"userId":2534,"content":"帮顶！\r\n\r\n","createdAt":1535347608710},{"id":8181,"originId":"5b62d8c6792f59ae501bf713","articleId":1776,"userId":2831,"content":"顶一贴","createdAt":1533204678391},{"id":8182,"originId":"5b63112958db3ccf66a45173","articleId":1776,"userId":2832,"content":"[@skidxjq](/user/skidxjq) 你好，去现场面试的话，能一天面完？","createdAt":1533219113077},{"id":8183,"originId":"5b7f6111632c7f422e5b80f3","articleId":1776,"userId":2831,"content":"[@wuyanwuyan](/user/wuyanwuyan) 技术面都是电话面试","createdAt":1535074577918},{"id":8184,"originId":"5b7cbd70944cb8340c27e283","articleId":1777,"userId":1071,"content":"是内推吗？","createdAt":1534901616084},{"id":8185,"originId":"5b7cc358a210553a0cde2afc","articleId":1777,"userId":652,"content":"Base在哪里？","createdAt":1534903128032},{"id":8186,"originId":"5b7e11f1a210553a0cde2b65","articleId":1777,"userId":456,"content":"[@richenlin](/user/richenlin)  没错","createdAt":1534988785398},{"id":8187,"originId":"5b7e11fb944cb8340c27e2d5","articleId":1777,"userId":456,"content":"[@sunfeng90](/user/sunfeng90) 北京","createdAt":1534988795021},{"id":8188,"originId":"5b39d35fac8bc1e12411455e","articleId":1779,"userId":2835,"content":"顶","createdAt":1530516319433},{"id":8189,"originId":"5b4346e813ca2fe569fb922b","articleId":1779,"userId":2835,"content":"顶","createdAt":1531135720942},{"id":8190,"originId":"5b5ad43c673571454c633c6c","articleId":1779,"userId":2835,"content":"顶","createdAt":1532679228982},{"id":8191,"originId":"5b6bfbf958db3ccf66a4535d","articleId":1779,"userId":2423,"content":"有nodejs初中级岗么\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1533803513374},{"id":8192,"originId":"5b74e74e792f59ae501bfa0d","articleId":1779,"userId":2835,"content":"[@JiaWeiBi](/user/JiaWeiBi) 没有专门的 Node.js 岗位，要求会比较全面一些","createdAt":1534388046645},{"id":8193,"originId":"5b7aa333a210553a0cde2a98","articleId":1779,"userId":2423,"content":"[@meicj](/user/meicj) 是偏前端的全栈？还是偏后端？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1534763827585},{"id":8194,"originId":"5b7bfd74632c7f422e5b8047","articleId":1779,"userId":2835,"content":"[@JiaWeiBi](/user/JiaWeiBi) 偏前端的全栈","createdAt":1534852468453},{"id":8195,"originId":"5ae03943c5debbc0086fc8e7","articleId":1780,"userId":589,"content":"mark","createdAt":1524644163169},{"id":8196,"originId":"5b6d22fe58db3ccf66a45391","articleId":1780,"userId":456,"content":"虚位以待","createdAt":1533879038872},{"id":8197,"originId":"5b70332c792f59ae501bf8fa","articleId":1780,"userId":2133,"content":"不熟悉mysql的偏前端的node要吗？","createdAt":1534079788255},{"id":8198,"originId":"5b7a1a89a210553a0cde2a6e","articleId":1780,"userId":456,"content":"[@buyixiaojiang](/user/buyixiaojiang) 前端基础还行就可以, 后端可培养. ","createdAt":1534728841425},{"id":8199,"originId":"5b56de822860af042a217846","articleId":1781,"userId":2836,"content":"求勾搭，来雍和宫听诵经啊","createdAt":1532419714977},{"id":8200,"originId":"5b54a489fb9e84ec69cc1d06","articleId":1782,"userId":109,"content":"问题是你找这人干嘛，供你研究咩。。。","createdAt":1532273801409},{"id":8201,"originId":"5b552b08656858ca76e00428","articleId":1782,"userId":1278,"content":"[@waitingsong](/user/waitingsong) 当然是一起搞事情！详情请见：https://www.jianshu.com/p/da2bb2d2215b","createdAt":1532308232476},{"id":8202,"originId":"5b557372aef62f1b0f9e052f","articleId":1782,"userId":2838,"content":"待遇都不谈，诚意在哪里~","createdAt":1532326770430},{"id":8203,"originId":"5b56055e15cba9150c72059e","articleId":1782,"userId":1278,"content":"好吧\r\n\r\n","createdAt":1532364126463},{"id":8204,"originId":"5b560620be6060b44341317d","articleId":1782,"userId":1278,"content":"[@luogue](/user/luogue) 40k/m  bonous另算","createdAt":1532364320363},{"id":8205,"originId":"5b717f9d58db3ccf66a45436","articleId":1782,"userId":90,"content":"[@13241491189](/user/13241491189) 天堂。。。","createdAt":1534164893914},{"id":8206,"originId":"5b743b81792f59ae501bf9db","articleId":1782,"userId":1278,"content":"[@13241491189](/user/13241491189) 公司，我正在注册中，干一件事，开一家公司，真是不容易，我还在努力中，谢谢有心人。","createdAt":1534344065776},{"id":8207,"originId":"5b78ebce944cb8340c27e18c","articleId":1782,"userId":2779,"content":"[@hanzhong-yan](/user/hanzhong-yan) 创业不容易，加油！","createdAt":1534651342555},{"id":8208,"originId":"5b793207632c7f422e5b7fac","articleId":1782,"userId":2292,"content":"楼主这么狂躁，万一我没加班写代码，会不会被咔嚓了呀？哈哈哈","createdAt":1534669319342},{"id":8209,"originId":"5b698386b71aedfe4c126804","articleId":1791,"userId":2843,"content":"有问题可以留言～  也可以直接加微信咨询","createdAt":1533641606651},{"id":8210,"originId":"5b45a97035342ab069061444","articleId":1792,"userId":2844,"content":"顶一下","createdAt":1531292016042},{"id":8211,"originId":"5b45c99313ca2fe569fb92ce","articleId":1792,"userId":2845,"content":"好吧！\n\n- \n\n1. \n\n\n2. **string*string\n\n> **string**string**string**string**string*************\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1531300243955},{"id":8212,"originId":"5b4c35b0fb9e84ec69cc1ac3","articleId":1792,"userId":2844,"content":"顶","createdAt":1531721136357},{"id":8213,"originId":"5b542570aef62f1b0f9e0504","articleId":1792,"userId":2844,"content":"顶","createdAt":1532241264889},{"id":8214,"originId":"5b567580d7c5253329cbdf4c","articleId":1792,"userId":2844,"content":"顶","createdAt":1532392832687},{"id":8215,"originId":"5b5807e523f46d140419fe64","articleId":1792,"userId":2844,"content":"顶","createdAt":1532495845861},{"id":8216,"originId":"5b615735792f59ae501bf6c7","articleId":1792,"userId":2844,"content":"![image.png](//static.cnodejs.org/FldfMVMNlg_NV6JF-5cKXVKKNjZe) 大家可以加群讨论","createdAt":1533105973468},{"id":8217,"originId":"5b701afb792f59ae501bf8f8","articleId":1792,"userId":2846,"content":"请问现在还招吗？","createdAt":1534073595583},{"id":8218,"originId":"5a62b6ceafa0a121784a8de3","articleId":1793,"userId":2847,"content":"顶一下","createdAt":1516418766334},{"id":8219,"originId":"5a6546589d371d4a059eecc5","articleId":1793,"userId":1947,"content":"node后端有机会吗？支持远程面试不","createdAt":1516586584981},{"id":8220,"originId":"5a6558369288dc8153288025","articleId":1793,"userId":2673,"content":"本人大四，有机会吗","createdAt":1516591158360},{"id":8221,"originId":"5a655e47ce45d44045146206","articleId":1793,"userId":2847,"content":"[@DCbryant](/user/DCbryant) 简历可以发一下，看看","createdAt":1516592711366},{"id":8222,"originId":"5a655e5f9288dc815328802c","articleId":1793,"userId":2847,"content":"[@oyosc](/user/oyosc) 支持远程，可以先发下简历","createdAt":1516592735614},{"id":8223,"originId":"5a65a0189d371d4a059eecf8","articleId":1793,"userId":1947,"content":"[@PaPacos](/user/PaPacos) 已发，请查收","createdAt":1516609560847},{"id":8224,"originId":"5a6e856d9d371d4a059eef48","articleId":1793,"userId":2847,"content":"顶一下","createdAt":1517192557230},{"id":8225,"originId":"5a7905a2cb27e8121481a386","articleId":1793,"userId":2847,"content":"还在招，有需要的可以看看","createdAt":1517880738987},{"id":8226,"originId":"5a7d15d5497a08f571384f54","articleId":1793,"userId":2847,"content":"走过，路过，不要错过啊","createdAt":1518147029490},{"id":8227,"originId":"5a8bd3c871327bb413bbfd3e","articleId":1793,"userId":2848,"content":"实习生毕了业的要吗","createdAt":1519113160006},{"id":8228,"originId":"5a936f13653c43b914684fd6","articleId":1793,"userId":2847,"content":"[@raohong](/user/raohong) 要的","createdAt":1519611667255},{"id":8229,"originId":"5a9df30bbdc8ffd268b64444","articleId":1793,"userId":2847,"content":"up 顶起来","createdAt":1520300811661},{"id":8230,"originId":"5a9dfb2dbe0ec087668bcd15","articleId":1793,"userId":14,"content":"[@Papacos](/user/Papacos) Hi, 我年前有给您发过简历，您也回了确认函，但是现在还没有下一步的消息，请问是个什么状况？","createdAt":1520302893811},{"id":8231,"originId":"5aa0fdae7811af0f6522225d","articleId":1793,"userId":2847,"content":"[@toastsgithub](/user/toastsgithub) 收到的简历都会内推，进入人才库。如果匹配的职位要求，就会有人联系你的。","createdAt":1520500142525},{"id":8232,"originId":"5aa5ef9119b2e3db18959cad","articleId":1793,"userId":2847,"content":"up 一下","createdAt":1520824209113},{"id":8233,"originId":"5aa5f472e7b166bb7b9ec963","articleId":1793,"userId":2307,"content":"我也是年前发过去的，您也回了确认函，到现在杳无音信","createdAt":1520825458245},{"id":8234,"originId":"5aa60bb219b2e3db18959cb8","articleId":1793,"userId":2849,"content":"[@PaPacos](/user/PaPacos) 您好，实习现在还招吗\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1520831410806},{"id":8235,"originId":"5aa74244ce4a27f86752705d","articleId":1793,"userId":2847,"content":"[@fx109138](/user/fx109138) 实习暂时不招了。","createdAt":1520910916410},{"id":8236,"originId":"5aaa6cd419b2e3db18959e04","articleId":1793,"userId":2847,"content":"顶起来","createdAt":1521118420467},{"id":8237,"originId":"5ab1b9f5f5dfc27d7ad989f7","articleId":1793,"userId":2847,"content":"顶一下","createdAt":1521596917868},{"id":8238,"originId":"5b0538aa29e6e510415b23c6","articleId":1793,"userId":2847,"content":"依旧需要，顶一下","createdAt":1527068842578},{"id":8239,"originId":"5b06b44d8a4f51e140d94215","articleId":1793,"userId":2847,"content":"up 一下，急缺简历","createdAt":1527166029187},{"id":8240,"originId":"5b0f576829e6e510415b262f","articleId":1793,"userId":2847,"content":"继续 up","createdAt":1527732072495},{"id":8241,"originId":"5b16192f57137f22415c4934","articleId":1793,"userId":2847,"content":"up 一下","createdAt":1528174895444},{"id":8242,"originId":"5b6d7fbcb71aedfe4c1268d1","articleId":1793,"userId":2847,"content":"up 一下","createdAt":1533902780076},{"id":8243,"originId":"5b6c20487271129a2f32a896","articleId":1795,"userId":2628,"content":"自己顶一个，欢迎大家来撩","createdAt":1533812808121},{"id":8244,"originId":"5b500184aef62f1b0f9e0449","articleId":1798,"userId":2333,"content":"欢迎加入我们~","createdAt":1531969924083},{"id":8245,"originId":"5b69555c58db3ccf66a452dd","articleId":1798,"userId":2333,"content":"欢迎加入我们~~~","createdAt":1533629788607},{"id":8246,"originId":"5b63bc0858db3ccf66a45183","articleId":1799,"userId":77,"content":"985 211","createdAt":1533262856908},{"id":8247,"originId":"5b643f6858db3ccf66a451e2","articleId":1799,"userId":2666,"content":"[@youarenode](/user/youarenode) 没有这个要求哦","createdAt":1533296488641},{"id":8248,"originId":"5b63f04658db3ccf66a451b3","articleId":1801,"userId":2790,"content":"同学们，将你们的简历砸过来吧","createdAt":1533276230380},{"id":8249,"originId":"5b640286b71aedfe4c1266e9","articleId":1801,"userId":2853,"content":"顶一波","createdAt":1533280902565},{"id":8250,"originId":"5b61c3cb792f59ae501bf6dc","articleId":1806,"userId":1533,"content":"up\r\n","createdAt":1533133771784},{"id":8251,"originId":"57997b352d740f7c26637f39","articleId":1808,"userId":2827,"content":"自己顶一下","createdAt":1469676341356},{"id":8252,"originId":"5799aac92d740f7c26637f52","articleId":1808,"userId":2827,"content":"对有赞的了解可以看看知识的问答 [https://www.zhihu.com/question/28082149/answer/113257790?from=timeline&isappinstalled=0](https://www.zhihu.com/question/28082149/answer/113257790?from=timeline&isappinstalled=0)","createdAt":1469688521303},{"id":8253,"originId":"5799b9542d740f7c26637f5c","articleId":1808,"userId":2859,"content":"不错！","createdAt":1469692244278},{"id":8254,"originId":"579abc1cf0d4b46026ba55f9","articleId":1808,"userId":2827,"content":"[@sunshuqian](/user/sunshuqian)  欢迎投递简历~~","createdAt":1469758492946},{"id":8255,"originId":"579d679b85dba6b12ac5855d","articleId":1808,"userId":2860,"content":"顶一下，关注一下，技术达不到要求，悲哀","createdAt":1469933467485},{"id":8256,"originId":"57a03aa79349f87943a83c78","articleId":1808,"userId":2861,"content":"之前一家公司带我入Node的学长去了有赞感觉公司挺好的。。。不过还没毕业不知道明年有没有机会","createdAt":1470118567729},{"id":8257,"originId":"57a04492b1fb48b34306f6fc","articleId":1808,"userId":217,"content":"顶，之前用过商户版就发现有react","createdAt":1470121106719},{"id":8258,"originId":"57a1529d53d640a735989b2c","articleId":1808,"userId":2827,"content":"[@zengfan1](/user/zengfan1) 加油~ 欢迎再来","createdAt":1470190237217},{"id":8259,"originId":"57a152ce53d640a735989b2e","articleId":1808,"userId":2827,"content":"[@scarletmu](/user/scarletmu)  实习生现在也招的哦~~","createdAt":1470190286690},{"id":8260,"originId":"57a1530553d640a735989b30","articleId":1808,"userId":2827,"content":"[@luoyjx](/user/luoyjx)  是的，目前在PC端我们正在铺react，我们自己开发了一套组件库。","createdAt":1470190341345},{"id":8261,"originId":"57a1d8835621a28b35d1e6df","articleId":1808,"userId":2827,"content":"了解有赞前端，这里有详细有介绍[http://tech.youzan.com/youzan-fe/](http://tech.youzan.com/youzan-fe/)","createdAt":1470224515606},{"id":8262,"originId":"57a1ea805c5423c3352d7b62","articleId":1808,"userId":2862,"content":"顶，有前途的公司","createdAt":1470229120041},{"id":8263,"originId":"57a200aa53d640a735989b85","articleId":1808,"userId":2863,"content":"不知道招不招应届生呢","createdAt":1470234794692},{"id":8264,"originId":"57a2a0d27a922d6f358cd1bc","articleId":1808,"userId":2827,"content":"[@twjer](/user/twjer)  招的","createdAt":1470275794771},{"id":8265,"originId":"57a2fdb75621a28b35d1e723","articleId":1808,"userId":2827,"content":"[@vinnyguitar](/user/vinnyguitar) 欢迎投简历 ^_^","createdAt":1470299575439},{"id":8266,"originId":"57d01256e6a7865f2cc0169b","articleId":1808,"userId":2863,"content":"现在还招嘛 ","createdAt":1473253974017},{"id":8267,"originId":"57d0d8388460f6b32c4dc688","articleId":1808,"userId":2423,"content":"招应届生吗？对应届生是怎样的要求？\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1473304632645},{"id":8268,"originId":"57d2c9c949e399fd386e194a","articleId":1808,"userId":2423,"content":"了解了一下有赞，感觉不错，今年大四，准备下了投简历\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1473432009844},{"id":8269,"originId":"58b673baea21217a4486ce86","articleId":1808,"userId":2827,"content":"不好意思，我又来招前端了～～","createdAt":1488352186792},{"id":8270,"originId":"58b673d1ea21217a4486ce88","articleId":1808,"userId":2827,"content":"[@JiaWeiBi](/user/JiaWeiBi) 招的，投简历吧","createdAt":1488352209723},{"id":8271,"originId":"58b766f47872ea0864fee26d","articleId":1808,"userId":2201,"content":"招暑假实习生么","createdAt":1488414452374},{"id":8272,"originId":"58b9290d5b904b25651b3b38","articleId":1808,"userId":2827,"content":"[@yongningfu](/user/yongningfu) 招的","createdAt":1488529677714},{"id":8273,"originId":"58b9945bea21217a4486cfb3","articleId":1808,"userId":2864,"content":"杭州只招资深前端？　一年的前端招吗","createdAt":1488557147541},{"id":8274,"originId":"58bb8feae418a986315f3bb6","articleId":1808,"userId":2201,"content":"[@jinphen](/user/jinphen) 简历已发，请多关照","createdAt":1488687082463},{"id":8275,"originId":"5b605b90b71aedfe4c126628","articleId":1808,"userId":2827,"content":"顶上去，又来招人了","createdAt":1533041552984},{"id":8276,"originId":"5b605bacb71aedfe4c126629","articleId":1808,"userId":2827,"content":"1","createdAt":1533041580964},{"id":8277,"originId":"5b5036acfb9e84ec69cc1c02","articleId":1809,"userId":2357,"content":"Hi 广州Node.js 朋友看过来啦","createdAt":1531983532170},{"id":8278,"originId":"5b5037c34b9cd4200f9420f3","articleId":1809,"userId":48,"content":"招聘帖不发薪资范围，算是比较可耻的吧","createdAt":1531983811543},{"id":8279,"originId":"5b596dcb8d66b90b2b7384f8","articleId":1809,"userId":2357,"content":"[@kiroChen](/user/kiroChen)  Hi 如果有意向，可以投递简历或电话联系我们：3830 3638 - 376，我们可以在电话中进行沟通的","createdAt":1532587467279},{"id":8280,"originId":"5b5b32ae2860af042a217928","articleId":1809,"userId":2804,"content":"一年Node.js后端开发工作经验,可以接受吗","createdAt":1532703406959},{"id":8281,"originId":"5b5fdf7958db3ccf66a4509e","articleId":1809,"userId":2357,"content":"[@Tong-Huang](/user/Tong-Huang)  Hi 我们现在也有在招聘1年左右Node.js开发经验的。如果可以的话，欢迎投递简历（邮箱：than@xogrp.com）。我们会及时电话联系你的。","createdAt":1533009785203},{"id":8282,"originId":"5b5fbc332860af042a2179e3","articleId":1810,"userId":2865,"content":"加微信 17771834899 欢迎大家投递简历  谢谢","createdAt":1533000755788},{"id":8283,"originId":"5b5b3237673571454c633c7b","articleId":1812,"userId":2804,"content":"一年node后端，会写react，爬虫。但在广州，能接受吗","createdAt":1532703287745},{"id":8284,"originId":"5b5e8b2e2860af042a2179aa","articleId":1812,"userId":2684,"content":"[@Tong-Huang](/user/Tong-Huang) 看情况吧。你知道咯。有的人一年能顶别人三年。","createdAt":1532922670593},{"id":8285,"originId":"5b5a7a3058db3ccf66a44fab","articleId":1813,"userId":2676,"content":"顶一顶朴大\r\n入职即可跟朴大玩","createdAt":1532656176064},{"id":8286,"originId":"5b5be84a2860af042a217930","articleId":1813,"userId":21,"content":"前排膜拜朴大\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1532749898691},{"id":8287,"originId":"5b5a78a82860af042a217903","articleId":1815,"userId":456,"content":"好","createdAt":1532655784573},{"id":8288,"originId":"5ac2f1e8e34737560fcca9b0","articleId":1816,"userId":2220,"content":"## 欢迎大家提问~ ##","createdAt":1522725352473},{"id":8289,"originId":"5ac46f0d37f5d1510f57c8ad","articleId":1816,"userId":2220,"content":"我们也招初中、中级前端工程师。\r\n[看贴](https://cnodejs.org/topic/5ac46e5a0ab0448f0fe3f866)\r\n此贴抱歉，没说明清楚，认罪。\r\n![臣妾认罪](https://www.bigo.tv/assets/img/zhaopin/Bigo-05.png)","createdAt":1522822925558},{"id":8290,"originId":"5acac05ee34737560fccab57","articleId":1816,"userId":2869,"content":"大佬分配女朋友吗？要是分配的话我就来","createdAt":1523236958664},{"id":8291,"originId":"5acad52b2c4e775a29952a4d","articleId":1816,"userId":2220,"content":"[@B1anker](/user/B1anker)  分配了怕你不喜欢，所以我们是自由追求~组内妹子比男生多哦，而且平时和设计，产品对接，她们也大都是妹子，我现在都犹豫不决，不知道挑哪个好O(∩_∩)O哈哈~","createdAt":1523242283089},{"id":8292,"originId":"5acb8650e34737560fccabb6","articleId":1816,"userId":2869,"content":"[@diyao](/user/diyao) 恩，你先给我介绍介绍。。。成功了我再来","createdAt":1523287632738},{"id":8293,"originId":"5acd69f2099b154dbeba00aa","articleId":1816,"userId":2220,"content":"[@B1anker](/user/B1anker)  要不来个简历？这才是最好的介绍哦，要不然我跟妹子讲，某某某怎么样，估计人家都不听^_^","createdAt":1523411442494},{"id":8294,"originId":"5acdcfb1ba60fcc66b7b7fd4","articleId":1816,"userId":2869,"content":"[@diyao](/user/diyao) 我怕！","createdAt":1523437489134},{"id":8295,"originId":"5acdfd6dba60fcc66b7b7fe1","articleId":1816,"userId":2532,"content":"大佬要萌新吗，我会吹牛🌚","createdAt":1523449197256},{"id":8296,"originId":"5ace1828a7d228c16b9869e9","articleId":1816,"userId":2220,"content":"[@B1anker](/user/B1anker)  我们组妹子比男生多，实力都不错。你可以来18楼C区看看~~","createdAt":1523456040661},{"id":8297,"originId":"5ace18e5ba60fcc66b7b7fe6","articleId":1816,"userId":2220,"content":"[@wazsq](/user/wazsq)  能把牛吹大的，我们也要哦。愿意培养~~","createdAt":1523456229834},{"id":8298,"originId":"5acee30cba60fcc66b7b8012","articleId":1816,"userId":2532,"content":"[@diyao](/user/diyao)  emmm，那我投个试试嘛，大佬不要嫌弃 ，话说实习要不要嘛～QAQ～","createdAt":1523507980718},{"id":8299,"originId":"5acf5ab7a7d228c16b986a44","articleId":1816,"userId":2220,"content":"[@wazsq](/user/wazsq) 来来，赶紧投","createdAt":1523538615872},{"id":8300,"originId":"5ad0624aa7d228c16b986a8f","articleId":1816,"userId":2532,"content":"[@diyao](/user/diyao) 嘿嘿，投了投了","createdAt":1523606090716},{"id":8301,"originId":"5af54a911b02288048bd0f29","articleId":1816,"userId":2220,"content":"嗖的一下，回来了，预示着我们要\r\n### 招人啦！！！","createdAt":1526024849072},{"id":8302,"originId":"5af68794adea947348e7638c","articleId":1816,"userId":2869,"content":"没错，又是我！","createdAt":1526106004635},{"id":8303,"originId":"5afce3ed02591040485baf21","articleId":1816,"userId":2220,"content":"[@B1anker](/user/B1anker)  来简历！不仅我们要人，hello那边也要！","createdAt":1526522861914},{"id":8304,"originId":"5afed6b393ee7eb406973cd2","articleId":1816,"userId":317,"content":"在拉钩上投了 没回应","createdAt":1526650547841},{"id":8305,"originId":"5b0231d941c819fd1c832b6c","articleId":1816,"userId":2220,"content":"[@leehomeok](/user/leehomeok)  拉钩投去hr那边咯，可以投到我们前端招聘专用邮箱不 ？bigo-frontend@bigo.sg","createdAt":1526870489442},{"id":8306,"originId":"5b07e18f8a4f51e140d9425c","articleId":1816,"userId":2220,"content":"老天啊，给我2个优秀的前端er行不行。。。真的这么难么。。。\r\n1个做组内基础建设，对node，webpack有些要求。希望你爱折腾。\r\n1个做直播官网，对mv\\*框架有些要求。能做出来是一回事，做的好是另一回事，希望你追求至极！！\r\n目前我们前端组15人，全公司最大前端组。\r\n好了，不要被高级吓到。。。","createdAt":1527243151788},{"id":8307,"originId":"5b0bb89b57137f22415c46cc","articleId":1816,"userId":2221,"content":"投了但是挂掉了，面试的时候看了环境觉得很喜欢，所以后面投了虎牙，幸运拿到offer，算是进了兄弟公司了","createdAt":1527494811599},{"id":8308,"originId":"5b0c062b57137f22415c46e3","articleId":1816,"userId":2220,"content":"[@jwentao](/user/jwentao)  恭喜恭喜！","createdAt":1527514667756},{"id":8309,"originId":"5b18072729e6e510415b289a","articleId":1816,"userId":2220,"content":"嗖的一下回来了，有缘人你在哪。。","createdAt":1528301351820},{"id":8310,"originId":"5b18cbc58a4f51e140d94616","articleId":1816,"userId":2676,"content":"真的不是卖水果的嘛","createdAt":1528351685417},{"id":8311,"originId":"5b19112757137f22415c4a3f","articleId":1816,"userId":2220,"content":"[@aojiaotage](/user/aojiaotage)  真的不卖！","createdAt":1528369447863},{"id":8312,"originId":"5b46ccda13ca2fe569fb9314","articleId":1816,"userId":2220,"content":"又在招人中，4位。1位基础研发，3位直播官网。","createdAt":1531366618162},{"id":8313,"originId":"5b502e754b9cd4200f9420ee","articleId":1816,"userId":2870,"content":"[@diyao](/user/diyao)  还招吗","createdAt":1531981429116},{"id":8314,"originId":"5b519520aef62f1b0f9e04b6","articleId":1816,"userId":2220,"content":"[@cuiyongjian](/user/cuiyongjian)  招，还有2个名额。","createdAt":1532073248112},{"id":8315,"originId":"5b58a8ee2860af042a2178ac","articleId":1816,"userId":2220,"content":"cubetv","createdAt":1532537070121},{"id":8316,"originId":"5b58a9113df59a43674bcb3e","articleId":1816,"userId":2220,"content":"走过路过，直播有兴趣否~？","createdAt":1532537105416},{"id":8317,"originId":"5b57379b8d66b90b2b73846b","articleId":1820,"userId":2874,"content":"想问下会前端，但是主要做 node 的要吗\r\n","createdAt":1532442523136},{"id":8318,"originId":"5b57dce98d66b90b2b738484","articleId":1820,"userId":2873,"content":"[@koopiouy](/user/koopiouy) 发简历来看看嘛","createdAt":1532484841629},{"id":8319,"originId":"5b56e96c8d66b90b2b738459","articleId":1821,"userId":2875,"content":"up~","createdAt":1532422508814},{"id":8320,"originId":"5b5557b50849b4eb75daddf8","articleId":1823,"userId":2836,"content":"无脑顶","createdAt":1532319669165},{"id":8321,"originId":"5b5557ba0849b4eb75daddf9","articleId":1823,"userId":2836,"content":"花式顶","createdAt":1532319674988},{"id":8322,"originId":"5b4f31072b3325cc0f839970","articleId":1825,"userId":2084,"content":"简历发邮箱，希望有机会合作","createdAt":1531916551077},{"id":8323,"originId":"5b4f3dda4b9cd4200f9420c2","articleId":1825,"userId":2727,"content":"[@Tseian](/user/Tseian) 简历收到，明天人事会安排面试","createdAt":1531919834517},{"id":8324,"originId":"5b51a27caef62f1b0f9e04bc","articleId":1825,"userId":2084,"content":"[@oxdavid](/user/oxdavid) 面试官是个大牛，问了一些基础的问题和很多工程实践中会遇到的问题，回答的不是很好，面试官也做了一一解答，同时给了很多职业规划建议，希望能有机会入职。","createdAt":1532076668557},{"id":8325,"originId":"5b4f04892b3325cc0f839961","articleId":1827,"userId":632,"content":"新人这个工资范围差不多","createdAt":1531905161328},{"id":8326,"originId":"5b2200a68a4f51e140d9481a","articleId":1833,"userId":801,"content":"问下，你们部门是不是有个花名叫JI-AN的小伙。。。\r\n\r\n来自✨ [Node.js开源项目精选](https://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1528955046547},{"id":8327,"originId":"5b3a0ddcac8bc1e124114575","articleId":1833,"userId":2413,"content":"[@vendar](/user/vendar) 花名都是中文的","createdAt":1530531292274},{"id":8328,"originId":"5b3a42e257137f22415c5247","articleId":1833,"userId":801,"content":"[@bindoon](/user/bindoon) 哈哈，是叫吉庵，不过连读起来很是顺口。。。\r\n\r\n来自✨ [Node.js开源项目精选](https://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1530544866953},{"id":8329,"originId":"5b441195fb9e84ec69cc1950","articleId":1833,"userId":2413,"content":"[@vendar](/user/vendar) 恩，一个大部门的，你们聊过？","createdAt":1531187605249},{"id":8330,"originId":"5b44437713ca2fe569fb9262","articleId":1833,"userId":801,"content":"[@bindoon](/user/bindoon) 哈哈，何止聊过，是我一个好哥们\r\n\r\n来自✨ [Node.js开源项目精选](https://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1531200375133},{"id":8331,"originId":"5b4841d035342ab0690614ef","articleId":1833,"userId":2413,"content":"[@vendar](/user/vendar) 你确认是哥们吗？","createdAt":1531462096195},{"id":8332,"originId":"5b4ab30213ca2fe569fb93b8","articleId":1833,"userId":2413,"content":"upup","createdAt":1531622146318},{"id":8333,"originId":"5b456fcd13ca2fe569fb92a5","articleId":1838,"userId":2881,"content":"快到碗里来，这里有你想要的，open的工作环境，nice的技术领导，较好的技术平台！！！！","createdAt":1531277261782},{"id":8334,"originId":"5b471696e374eeab6929d654","articleId":1838,"userId":2187,"content":"持续招聘中，我是前端leader，可内推","createdAt":1531385494642},{"id":8335,"originId":"5b1e600f8a4f51e140d9472b","articleId":1842,"userId":2441,"content":"来人","createdAt":1528717327139},{"id":8336,"originId":"5b1e7ef429e6e510415b29ec","articleId":1842,"userId":610,"content":"算法呢，编译器原理方面不要求吗\r\n","createdAt":1528725236589},{"id":8337,"originId":"5b1e87728a4f51e140d94733","articleId":1842,"userId":21,"content":"为什么7月才招人？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1528727410295},{"id":8338,"originId":"5b1f20e157137f22415c4b54","articleId":1842,"userId":2441,"content":"[@1316346949](/user/1316346949) 可以把简历扔过来，算法肯定是要的","createdAt":1528766689009},{"id":8339,"originId":"5b1f210d29e6e510415b29f9","articleId":1842,"userId":2441,"content":"[@zy445566](/user/zy445566) 不止7月，一直在扩展团队","createdAt":1528766733743},{"id":8340,"originId":"5b2080cb8a4f51e140d947b4","articleId":1842,"userId":2441,"content":"求简历~","createdAt":1528856779691},{"id":8341,"originId":"5b22016329e6e510415b2abc","articleId":1842,"userId":801,"content":"支持一下~ \r\n如果只做Node，是个好机会。\r\n\r\n来自✨ [Node.js开源项目精选](https://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1528955235903},{"id":8342,"originId":"5b23296b57137f22415c4c2e","articleId":1842,"userId":2441,"content":"[@vendar](/user/vendar) 同学留步， 了解一下吗！","createdAt":1529031019559},{"id":8343,"originId":"5b285d605cd02be64090152d","articleId":1842,"userId":2441,"content":"[@zhj135](/user/zhj135) 是后端，p6 - p8 都可以","createdAt":1529372000891},{"id":8344,"originId":"5b32d8da5c8f1ea723a56a52","articleId":1842,"userId":2441,"content":"长期招聘\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1530058970019},{"id":8345,"originId":"5b3353375c8f1ea723a56a7b","articleId":1842,"userId":2441,"content":"+1","createdAt":1530090295953},{"id":8346,"originId":"5b34894da1308bf723aa3a43","articleId":1842,"userId":2441,"content":"+1","createdAt":1530169677246},{"id":8347,"originId":"5b3a09f157137f22415c522a","articleId":1842,"userId":2441,"content":"+1 求简历","createdAt":1530530289146},{"id":8348,"originId":"5b3c895157137f22415c53f3","articleId":1842,"userId":2441,"content":"求简历\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1530693969775},{"id":8349,"originId":"5b45a70013ca2fe569fb92ba","articleId":1842,"userId":2441,"content":"+1\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1531291392875},{"id":8350,"originId":"5b44a58de374eeab6929d5bc","articleId":1843,"userId":1160,"content":"缺人，有坑，技术好玩，来啊","createdAt":1531225485345},{"id":8351,"originId":"5b44bc9bfb9e84ec69cc197a","articleId":1843,"userId":2712,"content":"[@huanglong](/user/huanglong) 杭州这么难招吗？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1531231387625},{"id":8352,"originId":"5b451e7035342ab06906141d","articleId":1843,"userId":1160,"content":"[@sylarmeng](/user/sylarmeng) 是的","createdAt":1531256432953},{"id":8353,"originId":"5b3da34913ca2fe569fb90cd","articleId":1858,"userId":2223,"content":"持续招聘中！","createdAt":1530766153246},{"id":8354,"originId":"5b3d861d13ca2fe569fb90b8","articleId":1859,"userId":2390,"content":"顶","createdAt":1530758685969},{"id":8355,"originId":"5b31a33c57137f22415c4f40","articleId":1868,"userId":2889,"content":"有需求的小伙伴赶紧简历砸过来～","createdAt":1529979708426},{"id":8356,"originId":"5b31a42457137f22415c4f41","articleId":1868,"userId":2889,"content":"公司7月上旬搬到黄陂南路地铁站附近，交通便利","createdAt":1529979940574},{"id":8357,"originId":"5b398b49ac8bc1e12411453a","articleId":1868,"userId":2889,"content":"顶一下","createdAt":1530497865526},{"id":8358,"originId":"5b35addb57137f22415c50c2","articleId":1869,"userId":2890,"content":"欢迎大家简历砸过来","createdAt":1530244571309},{"id":8359,"originId":"5b3332b157137f22415c4fda","articleId":1871,"userId":1441,"content":"自己顶下","createdAt":1530081969038},{"id":8360,"originId":"5b1655d429e6e510415b280a","articleId":1873,"userId":2894,"content":"顶帖","createdAt":1528190420574},{"id":8361,"originId":"5b17797e8a4f51e140d945d3","articleId":1873,"userId":2894,"content":"顶帖+1","createdAt":1528265086405},{"id":8362,"originId":"5b19f67c8a4f51e140d9468a","articleId":1873,"userId":2894,"content":"顶帖+2","createdAt":1528428156388},{"id":8363,"originId":"5b1e065557137f22415c4b18","articleId":1873,"userId":2894,"content":"顶帖+4","createdAt":1528694357591},{"id":8364,"originId":"5b31bc7c5c8f1ea723a56a24","articleId":1873,"userId":2894,"content":"顶帖+5","createdAt":1529986172588},{"id":8365,"originId":"5b0e2f0029e6e510415b25c1","articleId":1875,"userId":1195,"content":"是远程的？\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1527656192423},{"id":8366,"originId":"5b14b4175cd02be640901138","articleId":1875,"userId":2895,"content":"[@zysam](/user/zysam) 不是啊，上海的话在上海的办公地点上班的","createdAt":1528083479973},{"id":8367,"originId":"5b2723c48a4f51e140d948c0","articleId":1875,"userId":2503,"content":"请问广州呢？","createdAt":1529291716514},{"id":8368,"originId":"5b2a0bd829e6e510415b2c0d","articleId":1875,"userId":2320,"content":"官网404了","createdAt":1529482200387},{"id":8369,"originId":"5b2a0cbc29e6e510415b2c12","articleId":1875,"userId":2320,"content":"不是404，是多了个。   http://www.camexgames.com/","createdAt":1529482428052},{"id":8370,"originId":"5b2b98b75c8f1ea723a56961","articleId":1875,"userId":2302,"content":"上海办公室地点在哪？","createdAt":1529583799841},{"id":8371,"originId":"5b2c4bc65c8f1ea723a5696c","articleId":1875,"userId":2896,"content":"可以去加拿大工作么？","createdAt":1529629638882},{"id":8372,"originId":"5b2cb16157137f22415c4df8","articleId":1875,"userId":2190,"content":"可以远程么","createdAt":1529655649872},{"id":8373,"originId":"5b2c6b78ac8bc1e124114345","articleId":1877,"userId":2687,"content":"顶一个","createdAt":1529637752205},{"id":8374,"originId":"5b0d004529e6e510415b2592","articleId":1881,"userId":2366,"content":"mark一下","createdAt":1527578693064},{"id":8375,"originId":"5b0d198057137f22415c4716","articleId":1881,"userId":641,"content":"这样的环境其实不要贴出来","createdAt":1527585152136},{"id":8376,"originId":"5b0d684029e6e510415b25a6","articleId":1881,"userId":1986,"content":"请假聊天也是损失大几百啊","createdAt":1527605312872},{"id":8377,"originId":"5b2a1b105cd02be6409015c9","articleId":1881,"userId":2900,"content":"[@chunjiu](/user/chunjiu) 不是为了炫耀，为了让候选人看到公司的样子。不过，这样的环境我倒觉得很自在。","createdAt":1529486096770},{"id":8378,"originId":"5b2a1b1b29e6e510415b2c1b","articleId":1881,"userId":2900,"content":"[@ayuyoulan](/user/ayuyoulan) 谢谢支持~","createdAt":1529486107737},{"id":8379,"originId":"5b28746a29e6e510415b2b91","articleId":1882,"userId":2444,"content":"为何无人应答啊","createdAt":1529377898772},{"id":8380,"originId":"5b29c88b5cd02be64090159a","articleId":1882,"userId":21,"content":"[@xingyesh](/user/xingyesh) 看看大佬们如何招聘，干嘛要回。","createdAt":1529464971515},{"id":8381,"originId":"5b29c1fe5cd02be640901597","articleId":1883,"userId":2160,"content":"我们是刚起步团队，队员需要懂得多一些。 \r\n优点是不像大公司里的螺丝钉只干一种活，有更大的发挥空间。\r\n\r\n欢迎珠海的或者有意来珠海发展的同学来撩\r\n","createdAt":1529463294485},{"id":8382,"originId":"5afa6ebc0a36e5312d6ed11d","articleId":1884,"userId":2901,"content":"喜欢挑战且想法多的同学赶紧上车！！！","createdAt":1526361788076},{"id":8383,"originId":"5b06204b8a4f51e140d941bd","articleId":1884,"userId":2901,"content":"还有1个坑位，赶紧哦","createdAt":1527128139137},{"id":8384,"originId":"5b065cfa29e6e510415b241c","articleId":1884,"userId":2894,"content":"美团金融搭车招聘，补充一个node工程化的坑，BG级的解决方案，有想法来聊聊，tianyang02@meituan.com。","createdAt":1527143674590},{"id":8385,"originId":"5b0682595cd02be640900e55","articleId":1884,"userId":2901,"content":"[@yooungt13](/user/yooungt13) 。。。","createdAt":1527153241783},{"id":8386,"originId":"5b164ff057137f22415c495f","articleId":1884,"userId":2901,"content":"快点到碗里来","createdAt":1528188912519},{"id":8387,"originId":"5b1f98658a4f51e140d94777","articleId":1884,"userId":2901,"content":"顶帖+","createdAt":1528797285504},{"id":8388,"originId":"5b28d38d57137f22415c4cfa","articleId":1884,"userId":2901,"content":"顶帖+1","createdAt":1529402253083},{"id":8389,"originId":"5b0b84c929e6e510415b2538","articleId":1885,"userId":2357,"content":"Hi 各位广州的朋友","createdAt":1527481545873},{"id":8390,"originId":"5b1fae375cd02be6409013ec","articleId":1885,"userId":2503,"content":"[@xogroupTim](/user/xogroupTim) 简历已发 ，邮箱 1658370535@qq.com","createdAt":1528802871941},{"id":8391,"originId":"5b2722818a4f51e140d948be","articleId":1885,"userId":2503,"content":"[@xogroupTim](/user/xogroupTim) 题主有收到吗？麻烦给个回应","createdAt":1529291393228},{"id":8392,"originId":"5b237adf8a4f51e140d94872","articleId":1888,"userId":2751,"content":"欢迎投递简历啊，CEO亲自跟你聊。","createdAt":1529051871349},{"id":8393,"originId":"5b2204185cd02be64090147d","articleId":1890,"userId":2223,"content":"自顶一下","createdAt":1528955928370},{"id":8394,"originId":"5b1fc4e357137f22415c4b99","articleId":1891,"userId":2906,"content":"顶一个！\r\n（还有 Scott 怎么开始戴帽子了~~~****","createdAt":1528808675071},{"id":8395,"originId":"5b1fdca357137f22415c4ba1","articleId":1891,"userId":1160,"content":"[@Enigma1912](/user/Enigma1912) 为了造型，哈哈","createdAt":1528814755683},{"id":8396,"originId":"5b16283929e6e510415b27f9","articleId":1892,"userId":2907,"content":"自己顶一个","createdAt":1528178745251},{"id":8397,"originId":"5b16362957137f22415c4940","articleId":1892,"userId":2908,"content":"顶","createdAt":1528182313942},{"id":8398,"originId":"5b1f5d845cd02be6409013ca","articleId":1892,"userId":2907,"content":"顶一个，没人来吗","createdAt":1528782212253},{"id":8399,"originId":"5ab753ef320bb09d69e231d1","articleId":1896,"userId":2386,"content":"**急得就像大四没找到男朋友**，意思就是数澜**单身妹子多**喽哈哈 ❛‿˂̵✧\n\nAere you ok ? Do you like mi band ?","createdAt":1521964015144},{"id":8400,"originId":"5ab7a0dc53203c39ab1b21d5","articleId":1896,"userId":2569,"content":"[@huqiyang](/user/huqiyang) \r\nOK. We have a 'girl' for everyone.\r\nOK, OK. We will give everyone a free girl friend.\r\n😎😆O(∩_∩)O哈哈~","createdAt":1521983708239},{"id":8401,"originId":"5ab89052a2f3b49869cb2d28","articleId":1896,"userId":764,"content":"收实习生么[瑟瑟发抖]\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1522045010185},{"id":8402,"originId":"5ab8f6d3320bb09d69e23228","articleId":1896,"userId":2386,"content":"[@Alexerx](/user/Alexerx) Of course，we have many da diao meng meis. We can play PUBG together. Winer winer，chicken dinner.\n\nAre you ok ? Do you like mi band ?","createdAt":1522071251402},{"id":8403,"originId":"5ab990b452d7d3a8698a481b","articleId":1896,"userId":2569,"content":"[@huqiyang](/user/huqiyang) 调皮😆","createdAt":1522110644813},{"id":8404,"originId":"5ab990e7a2f3b49869cb2d5e","articleId":1896,"userId":2569,"content":"[@Alexerx](/user/Alexerx) 招的，不过实习的时长有要求。","createdAt":1522110695839},{"id":8405,"originId":"5ab9c68c320bb09d69e23243","articleId":1896,"userId":764,"content":"[@yuzhigang33](/user/yuzhigang33) 哇哦\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1522124428244},{"id":8406,"originId":"5aba5b620b13e3ad6954cedd","articleId":1896,"userId":2516,"content":"缺的不是工作，缺的是女朋友，为了找个女朋友培养感情。。请实习时间给的我长一点，，让我有更充足的时间交女朋友。","createdAt":1522162530631},{"id":8407,"originId":"5abafdf1a2f3b49869cb2dcb","articleId":1896,"userId":2569,"content":"[@1160007652](/user/1160007652) 没毛病","createdAt":1522204145743},{"id":8408,"originId":"5ac46b6396f344940fbbad2a","articleId":1896,"userId":2569,"content":"看来又要放几张美图了😆\r\n![IMG_7412.JPG](//static.cnodejs.org/Fnz7xhc4Qvw5Si0YBh5LUGCWrJ0_)","createdAt":1522821987813},{"id":8409,"originId":"5ac46bb4e34737560fcca9fd","articleId":1896,"userId":2569,"content":"![IMG_7411.JPG](//static.cnodejs.org/Fts0dLbIoJ7QyrrGsEWBUJlAE0Bg)","createdAt":1522822068010},{"id":8410,"originId":"5ac5d2a5e34737560fccaa34","articleId":1896,"userId":2569,"content":"![E436EE7C-5BAF-42C1-A128-AAC42BED27FD.jpeg](//static.cnodejs.org/FsjtZpkgqXwMLObFD9ApaW19nYsJ)","createdAt":1522913957701},{"id":8411,"originId":"5acade44e34737560fccab74","articleId":1896,"userId":2569,"content":"![CE93F5B3-A62D-4FAB-8C35-4EFB098704E2-2932-000000C07DA39734_tmp.jpg](//static.cnodejs.org/FmQUMlneuRNNO-gGxpLer3fkDc2u)","createdAt":1523244612742},{"id":8412,"originId":"5acb0c9de34737560fccab86","articleId":1896,"userId":406,"content":"[@yuzhigang33](/user/yuzhigang33) 比较有兴趣，可以聊聊不？","createdAt":1523256477026},{"id":8413,"originId":"5acb2384729b245529cb591e","articleId":1896,"userId":2569,"content":"[@cnlile](/user/cnlile) 可以啊，麻烦简历发我。或者加我微信(手机号)： 1806978三一一三","createdAt":1523262340815},{"id":8414,"originId":"5acc2ce896f344940fbbaee8","articleId":1896,"userId":2569,"content":"[@cnlile](/user/cnlile) 这位同学，简历发我了吗？","createdAt":1523330280183},{"id":8415,"originId":"5acd6523cb93f34db449c94c","articleId":1896,"userId":90,"content":"顶一个，虽然最终没去成","createdAt":1523410211974},{"id":8416,"originId":"5ace0ec3464b1bfa6b42505d","articleId":1896,"userId":2569,"content":"[@jxycbjhc](/user/jxycbjhc) 谢谢","createdAt":1523453635220},{"id":8417,"originId":"5acf5559a7d228c16b986a3f","articleId":1896,"userId":2569,"content":"![4B1A27DC-41EF-4B19-BDB4-E27E7B1E3E34-2932-000000C088B9C85C_tmp.jpg](//static.cnodejs.org/FqHexAWxIuXUlGZwMe6aF5j-opwQ)","createdAt":1523537241652},{"id":8418,"originId":"5ad1c5ff464b1bfa6b42513d","articleId":1896,"userId":2569,"content":"![25A81142-D4AE-4AB0-8045-E0C71B19B2A1-2932-000000C0918853EA_tmp.jpg](//static.cnodejs.org/Fkq-AOEgp4B2F3O-nMfnEtS-0J44)","createdAt":1523697151322},{"id":8419,"originId":"5ad5eec83edb2aff6be85b7b","articleId":1896,"userId":2618,"content":"还没招够？node玩的不6的前端有机会吗？","createdAt":1523969736642},{"id":8420,"originId":"5ad606d4ba60fcc66b7b8413","articleId":1896,"userId":38,"content":"友顶","createdAt":1523975892606},{"id":8421,"originId":"5ad6a1853edb2aff6be85bc1","articleId":1896,"userId":2569,"content":"[@xieww](/user/xieww) 有，JavaScript基础好，并且愿意转偏后端的工作，欢迎投简历  zhigang.yzg@dtwave-inc.com 或直接加微信。","createdAt":1524015493194},{"id":8422,"originId":"5ad6a190ba60fcc66b7b844d","articleId":1896,"userId":2569,"content":"[@lellansin](/user/lellansin) 谢谢。😆","createdAt":1524015504122},{"id":8423,"originId":"5ae20c85adea947348e75e57","articleId":1896,"userId":973,"content":"帮顶\n来自微信小程序 [cnode助手](https://github.com/strawbreey/mpvue-cnode)","createdAt":1524763781713},{"id":8424,"originId":"5ae3e70fadea947348e75ee2","articleId":1896,"userId":2569,"content":"[@wikelgc](/user/wikelgc) 谢谢，有兴趣来一发简历吗？😜","createdAt":1524885263467},{"id":8425,"originId":"5af04a2302591040485bab99","articleId":1896,"userId":632,"content":"顶 环境美的一批","createdAt":1525697059094},{"id":8426,"originId":"5af105a902591040485babac","articleId":1896,"userId":2569,"content":"[@amor520](/user/amor520) 哈哈，欢迎过来体验。","createdAt":1525745065761},{"id":8427,"originId":"5af3a91602591040485bacc6","articleId":1896,"userId":440,"content":"准备入职的顶一波","createdAt":1525917974147},{"id":8428,"originId":"5af3b0ef1b02288048bd0e98","articleId":1896,"userId":2569,"content":"[@zhoumingque](/user/zhoumingque) 😆以后到这里捞小伙伴就靠你了😎","createdAt":1525919983617},{"id":8429,"originId":"5af3b8c702591040485bacdd","articleId":1896,"userId":440,"content":"[@yuzhigang33](/user/yuzhigang33) 这样啊，好嘞😝\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1525921991688},{"id":8430,"originId":"5af56c391b02288048bd0f44","articleId":1896,"userId":2911,"content":"cool, i'm close to you .Can i get a boyfriend from your Company. by a way ,i'm big man","createdAt":1526033465374},{"id":8431,"originId":"5af66177adea947348e7637d","articleId":1896,"userId":2569,"content":"[@sunnyfishing](/user/sunnyfishing) are you serious ？😆","createdAt":1526096247750},{"id":8432,"originId":"5b1921238a4f51e140d94659","articleId":1896,"userId":18,"content":"下线置顶","createdAt":1528373539777},{"id":8433,"originId":"5b1d48ea5cd02be64090135a","articleId":1896,"userId":2569,"content":"[@alsotang](/user/alsotang) 嗯嗯，这些天谢谢雾空了。","createdAt":1528645866103},{"id":8434,"originId":"5ad55ea6464b1bfa6b4253a9","articleId":1897,"userId":2913,"content":"顶起","createdAt":1523932838078},{"id":8435,"originId":"5ad55fafa7d228c16b986cc4","articleId":1897,"userId":2914,"content":"顶起","createdAt":1523933103066},{"id":8436,"originId":"5ad55fda464b1bfa6b4253b0","articleId":1897,"userId":2915,"content":"顶起","createdAt":1523933146042},{"id":8437,"originId":"5ad56001464b1bfa6b4253b5","articleId":1897,"userId":2916,"content":"挖财无线和前端是个好团队~","createdAt":1523933185307},{"id":8438,"originId":"5ad5604c464b1bfa6b4253b8","articleId":1897,"userId":2917,"content":"顶","createdAt":1523933260243},{"id":8439,"originId":"5ad5612dba60fcc66b7b82ec","articleId":1897,"userId":2918,"content":"顶！d=====(￣▽￣*)b","createdAt":1523933485445},{"id":8440,"originId":"5ad592efa7d228c16b986d1b","articleId":1897,"userId":2919,"content":"挖财的技术还是很牛的。","createdAt":1523946223846},{"id":8441,"originId":"5ad6b26da7d228c16b986e5c","articleId":1897,"userId":2920,"content":"666","createdAt":1524019821855},{"id":8442,"originId":"5ad83fce464b1bfa6b4256cf","articleId":1897,"userId":2921,"content":"123<br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1524121550134},{"id":8443,"originId":"5ae20c0202591040485ba862","articleId":1897,"userId":973,"content":"mark\n来自微信小程序 [cnode助手](https://github.com/strawbreey/mpvue-cnode)","createdAt":1524763650049},{"id":8444,"originId":"5aef0d9a0a36e5312d6ecd7c","articleId":1897,"userId":2922,"content":"顶","createdAt":1525616026953},{"id":8445,"originId":"5af2624802591040485bac37","articleId":1897,"userId":2832,"content":"你好，请问挖财的招聘可以全程远程面试吗？ 还是必须需要到现场去？","createdAt":1525834312094},{"id":8446,"originId":"5af8fce90a36e5312d6ed08c","articleId":1897,"userId":2923,"content":"node实习招不？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1526267113238},{"id":8447,"originId":"5b04cc51f3c2e9b5066afe38","articleId":1897,"userId":2924,"content":"支持","createdAt":1527041105787},{"id":8448,"originId":"5b0a5cfd5cd02be640900f06","articleId":1897,"userId":2925,"content":"haha","createdAt":1527405821143},{"id":8449,"originId":"5b19211f8a4f51e140d94657","articleId":1897,"userId":18,"content":"下线置顶","createdAt":1528373535359},{"id":8450,"originId":"5b18d23957137f22415c49fd","articleId":1899,"userId":2886,"content":"期望有兴趣的同学投递简历。","createdAt":1528353337761},{"id":8451,"originId":"5b0e7e0c8a4f51e140d94371","articleId":1902,"userId":2751,"content":"没有准备好简历？真没有关系，我们的CTO直接跟你聊啊，这就是小型创业公司的优势！","createdAt":1527676428119},{"id":8452,"originId":"5b0fa5448a4f51e140d943d1","articleId":1902,"userId":2751,"content":"欢迎大家投简历❤️","createdAt":1527752004287},{"id":8453,"originId":"5b100cbb5cd02be640901063","articleId":1902,"userId":1986,"content":"如果在上海，我估计会投你们的简历","createdAt":1527778491363},{"id":8454,"originId":"5b114bee29e6e510415b26f4","articleId":1902,"userId":2751,"content":"[@zmecust](/user/zmecust) emmmmm……我们支持远程办公呢","createdAt":1527860206809},{"id":8455,"originId":"5b138f508a4f51e140d944b7","articleId":1902,"userId":2751,"content":"也欢迎寻找全职的朋友投简历！","createdAt":1528008528911},{"id":8456,"originId":"5b177a6629e6e510415b2863","articleId":1902,"userId":2751,"content":"我们非常不鼓励加班，健康是第一位的","createdAt":1528265318392},{"id":8457,"originId":"5b0543b48a4f51e140d94194","articleId":1904,"userId":785,"content":"请问一下，在高新区吗？  \n \n  [★来自antd-cnode★](http://www.intelligenttech.top/#/)","createdAt":1527071668215},{"id":8458,"originId":"5b067ff88a4f51e140d941f5","articleId":1904,"userId":2565,"content":"[@FourLeafClover](/user/FourLeafClover) 是的 软件园D7","createdAt":1527152632439},{"id":8459,"originId":"5b068ff18a4f51e140d9420b","articleId":1904,"userId":785,"content":"[@sofichael](/user/sofichael)   了解了  \n \n [★来自antd-cnode★](http://www.intelligenttech.top/#/)","createdAt":1527156721388},{"id":8460,"originId":"5b1510fc29e6e510415b27be","articleId":1904,"userId":2929,"content":"18应届要吗","createdAt":1528107260827},{"id":8461,"originId":"5b176e215cd02be64090120f","articleId":1904,"userId":1412,"content":"19届实习，要么？","createdAt":1528262177487},{"id":8462,"originId":"5b0e31cc5cd02be640900faa","articleId":1905,"userId":1195,"content":"有真的用 docker k8s 吗\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1527656908634},{"id":8463,"originId":"5b12d9f05cd02be6409010fe","articleId":1905,"userId":2931,"content":"实习也是同样的要求么 😳\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1527962096201},{"id":8464,"originId":"5b14dc805cd02be640901145","articleId":1905,"userId":2930,"content":"[@zysam](/user/zysam) 目前尚未，正在改造当中。","createdAt":1528093824613},{"id":8465,"originId":"5b1606c68a4f51e140d94563","articleId":1905,"userId":1195,"content":"[@Edward1992](/user/Edward1992) 楼主的微信是找不到人的。一般来说，小规模还真用不上 k8s ，浪费服务器和技术人员。\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1528170182105},{"id":8466,"originId":"5b16095d29e6e510415b27ef","articleId":1905,"userId":2930,"content":"[@zysam](/user/zysam)  抱歉，上面的微信号错了。有意向可以直接投递简历到我们的hr邮箱： hr@whatyouneed.cc。 另外k8s其实是现有项目改造的一个选择，更为明确的改造意图是实现DevOps流程。","createdAt":1528170845738},{"id":8467,"originId":"5b160b795cd02be6409011af","articleId":1905,"userId":1195,"content":"[@Edward1992](/user/Edward1992) https://github.com/zysam/resume 有兴趣可以下一步聊。","createdAt":1528171385956},{"id":8468,"originId":"5b1638638a4f51e140d9456c","articleId":1905,"userId":2930,"content":"[@zysam](/user/zysam) 项目经验很丰富啊，是我前辈。可以加微信聊吗？","createdAt":1528182883204},{"id":8469,"originId":"5b1652ae5cd02be6409011d7","articleId":1905,"userId":1195,"content":"留个微信，我加你\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1528189614152},{"id":8470,"originId":"5b1657078a4f51e140d94584","articleId":1905,"userId":2930,"content":"[@zysam](/user/zysam) edwardin1992","createdAt":1528190727480},{"id":8471,"originId":"5b15f12857137f22415c491d","articleId":1907,"userId":2933,"content":"有兴趣的赶紧给我们发邮件吧~","createdAt":1528164648875},{"id":8472,"originId":"5b1513e05cd02be640901178","articleId":1909,"userId":2202,"content":"持续招聘中","createdAt":1528108000844},{"id":8473,"originId":"5aebbd4402591040485baa84","articleId":1911,"userId":2302,"content":"javascript 基础好的  2年经验开发经验的, 不会vue的也可以过来面试","createdAt":1525398852881},{"id":8474,"originId":"5af10a740a36e5312d6ece14","articleId":1911,"userId":2302,"content":"看来CNODEJS 社区前端不多啊. 都是真写nodejs后端的.","createdAt":1525746292316},{"id":8475,"originId":"5af12e6202591040485babc8","articleId":1911,"userId":973,"content":"不是说学的node大都是从前端转过去的吗😂   \n ☆ 来自微信小程序 [cnode助手](https://github.com/strawbreey/mpvue-cnode)","createdAt":1525755490240},{"id":8476,"originId":"5af12ecb02591040485babca","articleId":1911,"userId":973,"content":"[@wikelgc](/user/wikelgc)可以试试在微信小程序cnode助手上把本篇招聘需求分享到相应的微信群试试  \n ☆ 来自微信小程序 [cnode助手](https://github.com/strawbreey/mpvue-cnode)","createdAt":1525755595348},{"id":8477,"originId":"5afd4d1b0a36e5312d6ed229","articleId":1911,"userId":2302,"content":"继续招聘","createdAt":1526549787376},{"id":8478,"originId":"5b07d0295cd02be640900eac","articleId":1911,"userId":610,"content":"[@jinwyp](/user/jinwyp) 大佬怎么离开阿里了？","createdAt":1527238697460},{"id":8479,"originId":"5b12a61357137f22415c4880","articleId":1911,"userId":2302,"content":"[@1316346949](/user/1316346949) 我就没去过阿里。 ","createdAt":1527948819706},{"id":8480,"originId":"5b140fa25cd02be640901116","articleId":1911,"userId":2496,"content":"用了快两年vue，1.x时代用到2.x时代，最后发现还是react爽呀。😂","createdAt":1528041378253},{"id":8481,"originId":"5a1678c343efb10d09ef8a1c","articleId":1912,"userId":2936,"content":" 不少人对像Oracle有误解，说下几点 。\r\n1. Oracle 每个工程师有收费的 O'reilly Safari books 账号，：https://www.safaribooksonline.com 所有书免费看\r\n2. Oracle  每个工程师开发有Lynda账号 （www.lynda.com , linkedin 旗下培训），所有内容免费学。\r\n3. Oracle 每个工程师可以免费查看所有ilearn里面海量的公司培训内容。\r\n4. Oracle里面很方便联系全球相关专家，无论是 Java,mysql， oracle数据库本身。。。。\r\n\r\n说下管理：\r\nOracle整个公司对流程基于IT,所以不需要多少HR和其他非研发人员。\r\nOracle是全球第二大软件公司，软件开发流程/管理等等非常成熟。 \r\n说下项目：\r\n我们不是用个框架，做几个app，网站之类。。。  \r\n绝大部分项目是研发项目，何为研发项目？基本靠加班堆代码是行不通的。。。。\r\n我们开发大型复杂软件产品 （接触过源代码 超过100w行对大型软件？）产品持续开发10年以上。\r\n\r\n \r\n\r\n\r\n\r\n","createdAt":1511422147173},{"id":8482,"originId":"5a1683b66190c8912ebaccfa","articleId":1912,"userId":2936,"content":"自己顶一下","createdAt":1511424950727},{"id":8483,"originId":"5a1686f5476ea1170b733a63","articleId":1912,"userId":2936,"content":"关于年假： \r\n刚进去16天年假，不够用还可以欠(就是变成负数。。。)。 \r\n后面每年加一天。加到20天。 病假20天\r\n\r\n","createdAt":1511425781232},{"id":8484,"originId":"5a1699a6476ea1170b733a6f","articleId":1912,"userId":2936,"content":"关于薪水： \r\nOracle的校招薪水现在毫无竞争力。。。。\r\n但是社招不是问题！\r\n\r\n另外，这里有学生？\r\n团队也招聘前台开发或者后台servcie开发方面的实习生。 ","createdAt":1511430566299},{"id":8485,"originId":"5aa3b829e7b166bb7b9ec918","articleId":1912,"userId":2936,"content":"现在还没几个人联系我。。。。。 \r\n自己顶一下吧。。。。。。。。。\r\n\r\n","createdAt":1520678953895},{"id":8486,"originId":"5aa5d94cce4a27f867526ff8","articleId":1912,"userId":2937,"content":"可惜不在上海","createdAt":1520818508513},{"id":8487,"originId":"5b13a75829e6e510415b273a","articleId":1912,"userId":2938,"content":"挺实在的这楼主","createdAt":1528014680571},{"id":8488,"originId":"59376687538dbcaa6bc7ddb1","articleId":1913,"userId":2940,"content":"投我们吧！美国公司管理方式和，在家工作，老板很牛，是美国的教授博导。","createdAt":1496802951246},{"id":8489,"originId":"59378f54f9d3c82c4f112f39","articleId":1913,"userId":2939,"content":"[@linjie2017](/user/linjie2017) 谢谢，我收到你们的邮件了。也回复了。我们继续邮件沟通吧 :D","createdAt":1496813396227},{"id":8490,"originId":"5b0b85718a4f51e140d942d2","articleId":1916,"userId":2943,"content":"欢迎加入！！","createdAt":1527481713243},{"id":8491,"originId":"5b0ce03757137f22415c4706","articleId":1916,"userId":2943,"content":"欢迎加入况客科技！成为况客人！","createdAt":1527570487598},{"id":8492,"originId":"5b0f73c629e6e510415b2642","articleId":1916,"userId":2943,"content":"欢迎加入况客科技！","createdAt":1527739334787},{"id":8493,"originId":"5b0e5d678a4f51e140d94362","articleId":1920,"userId":2422,"content":"简历地址。lidongchen@xdf.cn","createdAt":1527668071876},{"id":8494,"originId":"5b0e5d8129e6e510415b25e0","articleId":1920,"userId":2422,"content":"薪资范围 18-30","createdAt":1527668097850},{"id":8495,"originId":"59f6fc1f7d3866d6554082ba","articleId":1921,"userId":2534,"content":"继续顶！！！跪求","createdAt":1509358623227},{"id":8496,"originId":"59f94a05323d3667540dae37","articleId":1921,"userId":2948,"content":"你们招个初级开发者也要急成这样啊？","createdAt":1509509637452},{"id":8497,"originId":"59f97b0a688da99d4fa91e91","articleId":1921,"userId":2534,"content":"[@anonymousnewguy](/user/anonymousnewguy) 是啊 标题不起惊心动魄点 怎么体会！！！","createdAt":1509522186297},{"id":8498,"originId":"5a01809884ed7ceb219ea7c8","articleId":1921,"userId":2534,"content":"继续找","createdAt":1510047896290},{"id":8499,"originId":"5a03ff423b2c1f8108a45e43","articleId":1921,"userId":2534,"content":"继续求啊！！！","createdAt":1510211394428},{"id":8500,"originId":"5a04021e84ed7ceb219ea853","articleId":1921,"userId":2949,"content":"[@ipengyo](/user/ipengyo) mmm","createdAt":1510212126888},{"id":8501,"originId":"5a08f73d001f0eb571c1b03d","articleId":1921,"userId":2534,"content":"[@zhuangzz](/user/zhuangzz) 加微信呢~~","createdAt":1510537021447},{"id":8502,"originId":"5a0a4e80310be7561d4c0458","articleId":1921,"userId":2534,"content":"顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶","createdAt":1510624896304},{"id":8503,"originId":"5a0bb0f9ef333d0e2e61a076","articleId":1921,"userId":2534,"content":"每日一顶！！","createdAt":1510715641511},{"id":8504,"originId":"5a1452d1fa68dfbc62addef1","articleId":1921,"userId":2950,"content":"顶顶","createdAt":1511281361477},{"id":8505,"originId":"5a2129a9110a338547d6e395","articleId":1921,"userId":2951,"content":"还要人么","createdAt":1512122793931},{"id":8506,"originId":"5a28daac8230827a18293527","articleId":1921,"userId":49,"content":"还要人手么\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1512626860428},{"id":8507,"originId":"5a5d5d33a3692d014f4f14b9","articleId":1921,"userId":539,"content":"还要人么","createdAt":1516068147049},{"id":8508,"originId":"5a94e9dc71327bb413bbfedb","articleId":1921,"userId":2534,"content":"[@zsea](/user/zsea) [@orangebook](/user/orangebook) [@KylaCpper](/user/KylaCpper)   新年伊始 还急需人呢~~","createdAt":1519708636026},{"id":8509,"originId":"5a967dbc71327bb413bbff79","articleId":1921,"userId":2534,"content":"每日顶帖！","createdAt":1519812028381},{"id":8510,"originId":"5a9779888d6e16e56bb80a2c","articleId":1921,"userId":2534,"content":"每日顶帖！\r\n\r\n","createdAt":1519876488449},{"id":8511,"originId":"5a97b804543e098150cb70d8","articleId":1921,"userId":2534,"content":"每日顶帖！\r\n\r\n","createdAt":1519892484188},{"id":8512,"originId":"5a9ca12777dc4e0d2136adf1","articleId":1921,"userId":2534,"content":"每日顶帖！","createdAt":1520214311614},{"id":8513,"originId":"5aa73999f5dfc27d7ad98756","articleId":1921,"userId":2534,"content":"每日顶帖！\r\n\r\n","createdAt":1520908697869},{"id":8514,"originId":"5aa89265e7b166bb7b9eca26","articleId":1921,"userId":2952,"content":"我们的\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1520996965281},{"id":8515,"originId":"5aa89275f5dfc27d7ad987a6","articleId":1921,"userId":2952,"content":"倦\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1520996981164},{"id":8516,"originId":"5aa9e6eace4a27f867527101","articleId":1921,"userId":2534,"content":"ssssssssss","createdAt":1521084138467},{"id":8517,"originId":"5af90066adea947348e763fc","articleId":1921,"userId":632,"content":"帮顶 我也在漕河泾","createdAt":1526268006161},{"id":8518,"originId":"5b0d3a2e5cd02be640900f91","articleId":1921,"userId":2534,"content":"每日顶帖！\r\n\r\n","createdAt":1527593518542},{"id":8519,"originId":"5af23873adea947348e761dd","articleId":1922,"userId":2532,"content":"武汉哇，不知道要不要实习生\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1525823603759},{"id":8520,"originId":"5af2601b02591040485bac34","articleId":1922,"userId":2953,"content":"[@wazsq](/user/wazsq) 有一定Node基础，学习意愿强的实习生也招啊","createdAt":1525833755030},{"id":8521,"originId":"5af26150adea947348e761f4","articleId":1922,"userId":2532,"content":"[@Vizwind](/user/Vizwind) 接受简历吗，主要是想去武汉工作 ：）","createdAt":1525834064943},{"id":8522,"originId":"5af268240a36e5312d6ece89","articleId":1922,"userId":2953,"content":"[@wazsq](/user/wazsq) 发个简历过来看下","createdAt":1525835812835},{"id":8523,"originId":"5af27669adea947348e7620a","articleId":1922,"userId":2532,"content":"[@Vizwind](/user/Vizwind) 已发送，希望能给实习机会：）\r\n","createdAt":1525839465045},{"id":8524,"originId":"5afe3400adea947348e76581","articleId":1922,"userId":2953,"content":"自顶一下","createdAt":1526608896643},{"id":8525,"originId":"5b07dca129e6e510415b2491","articleId":1922,"userId":1374,"content":"[@Vizwind](/user/Vizwind) 居然去武汉了","createdAt":1527241889786},{"id":8526,"originId":"5b0d124157137f22415c4713","articleId":1922,"userId":2953,"content":"[@dongdongcpk](/user/dongdongcpk) 欢迎你来大武汉 ","createdAt":1527583297346},{"id":8527,"originId":"5aa8ed2ace4a27f8675270d0","articleId":1926,"userId":2906,"content":"实习生还招嘛？？","createdAt":1521020202897},{"id":8528,"originId":"5aa8fa7ece4a27f8675270d4","articleId":1926,"userId":2357,"content":"[@Enigma1912](/user/Enigma1912) Hi 暂时我们也有招聘实习生的计划，可以的话可以直接投递简历至：than@xogrp.com","createdAt":1521023614994},{"id":8529,"originId":"5ab1e12fce4a27f8675272eb","articleId":1926,"userId":2357,"content":"招聘有趣的灵魂啦","createdAt":1521606959116},{"id":8530,"originId":"5ab1f3ba19b2e3db18959fe7","articleId":1926,"userId":2673,"content":"请问实习生的话大概什么时候要求入职\r\n","createdAt":1521611706153},{"id":8531,"originId":"5ab283caf5dfc27d7ad98a4b","articleId":1926,"userId":2956,"content":"请问转行的想做实习生可以么？","createdAt":1521648586113},{"id":8532,"originId":"5acd7ac0099b154dbeba00b5","articleId":1926,"userId":2357,"content":"Hi 各位暂时招聘有1年或以上Node.js开发经验的开发工程师。若有兴趣的应聘实习生，亦通过邮箱投递简历。我们会及时查看。","createdAt":1523415744730},{"id":8533,"originId":"5ad7ae8aa7d228c16b986f04","articleId":1926,"userId":2931,"content":"在实习僧投过实习简历，查看以后没有结果，如果是不符合要求的话希望能接拒绝😭，否则都不知道是有没有希望\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1524084362112},{"id":8534,"originId":"5b0699448a4f51e140d9420e","articleId":1926,"userId":2357,"content":"[@q86002618](/user/q86002618) Hi 感谢的你反馈的，对于实习僧上投递的简历，我们都有将它转发给我们主管查看的，但同时我们日后也会及时更新招聘网站简历的审核结果的~","createdAt":1527159108959},{"id":8535,"originId":"5aa5d22fe7b166bb7b9ec948","articleId":1927,"userId":2168,"content":"你这内推，也要面5轮吗？","createdAt":1520816687764},{"id":8536,"originId":"5ad70c5da7d228c16b986ebb","articleId":1927,"userId":2758,"content":"顶！","createdAt":1524042845741},{"id":8537,"originId":"5ade9991a7d228c16b9871f8","articleId":1927,"userId":2758,"content":"~~","createdAt":1524537745266},{"id":8538,"originId":"5ae13ab17b0e8dc508cca7c6","articleId":1927,"userId":2758,"content":"顶一下","createdAt":1524710065876},{"id":8539,"originId":"5ae2e2f839a81e4548f457ab","articleId":1927,"userId":2758,"content":"顶一下","createdAt":1524818680367},{"id":8540,"originId":"5ae3028902591040485ba8d4","articleId":1927,"userId":2957,"content":"招go吗","createdAt":1524826761192},{"id":8541,"originId":"5afa4fb40a36e5312d6ed102","articleId":1927,"userId":2758,"content":"[@semicoyoung](/user/semicoyoung) java有的","createdAt":1526353844471},{"id":8542,"originId":"5b068c5a5cd02be640900e63","articleId":1927,"userId":2758,"content":"顶一下","createdAt":1527155802466},{"id":8543,"originId":"5b02cd3b93ee7eb406973da1","articleId":1931,"userId":2676,"content":"唔，如果是在以上几个国家做博彩相关的东东的话\r\n各位应聘者要记得注意问清楚相关的风险","createdAt":1526910267773},{"id":8544,"originId":"5981409f518c054e4fc0c381","articleId":1933,"userId":2962,"content":"顶顶~~","createdAt":1501642911158},{"id":8545,"originId":"598180b6c1eb855961dd6092","articleId":1933,"userId":2962,"content":"接着顶顶~","createdAt":1501659318152},{"id":8546,"originId":"598180d0c1eb855961dd6093","articleId":1933,"userId":2962,"content":"有什么问题大家可以留言哈~我看到了就会第一时间回复的~~","createdAt":1501659344472},{"id":8547,"originId":"598190b0c1eb855961dd60a8","articleId":1933,"userId":273,"content":"不错，技术栈挺喜欢的。\r\n","createdAt":1501663408632},{"id":8548,"originId":"5982939028607f916122dc38","articleId":1933,"userId":2962,"content":"[@shinygang](/user/shinygang) 快来快来玩~简历投了嘛~\r\n","createdAt":1501729680593},{"id":8549,"originId":"598294115f8478756117f6bd","articleId":1933,"userId":2962,"content":"拉勾链接双手奉上：https://www.lagou.com/jobs/3389828.html","createdAt":1501729809964},{"id":8550,"originId":"5982946c5f8478756117f6be","articleId":1933,"userId":273,"content":"[@peace-of-soul](/user/peace-of-soul) 可惜人不在北京。。。","createdAt":1501729900010},{"id":8551,"originId":"5982949128607f916122dc3a","articleId":1933,"userId":2962,"content":"[@shinygang](/user/shinygang) 好吧~有在北京的小伙伴可以推荐来看看~","createdAt":1501729937950},{"id":8552,"originId":"598294a207cef83a617709e1","articleId":1933,"userId":2962,"content":"[@shinygang](/user/shinygang) 想来也可以第一时间联系我~","createdAt":1501729954373},{"id":8553,"originId":"5983cbb0c1eb855961dd614b","articleId":1933,"userId":2963,"content":"招应届生吗😊\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1501809584493},{"id":8554,"originId":"598841a6339c297076baad26","articleId":1933,"userId":1305,"content":"技术栈很喜欢，后端对node前端对Vue很感兴趣，过段时间可以聊聊4年工作经验","createdAt":1502101926953},{"id":8555,"originId":"598aea462d4b0af47503540b","articleId":1933,"userId":2962,"content":"[@nodepaladin](/user/nodepaladin) 快快发来简历~~lishuang@guanghe.tv","createdAt":1502276166198},{"id":8556,"originId":"598aea6a206061d87545c654","articleId":1933,"userId":2962,"content":"[@bigsomg](/user/bigsomg) 暂时不招~嘿嘿~有node实习~但只对18年以后的小伙伴开放也~","createdAt":1502276202256},{"id":8557,"originId":"598aeabe206061d87545c656","articleId":1933,"userId":2962,"content":"顶顶~~~","createdAt":1502276286414},{"id":8558,"originId":"5991710ff36051a45246bfa8","articleId":1933,"userId":2962,"content":"顶起来~哇咔咔","createdAt":1502703887139},{"id":8559,"originId":"5992e12c4e3c4e5a7021b0f4","articleId":1933,"userId":2962,"content":"顶顶~~~","createdAt":1502798124882},{"id":8560,"originId":"599595c2f36051a45246c119","articleId":1933,"userId":446,"content":"顶一个。","createdAt":1502975426656},{"id":8561,"originId":"59965cc64e3c4e5a7021b1c8","articleId":1933,"userId":446,"content":"顶~~~","createdAt":1503026374393},{"id":8562,"originId":"59965ebdf36051a45246c131","articleId":1933,"userId":2962,"content":"现在也有部分H5需求~大家有意向的可以赶紧看过来~~","createdAt":1503026877258},{"id":8563,"originId":"599fe3964e3c4e5a7021b430","articleId":1933,"userId":2962,"content":"钉钉~哇咔咔~","createdAt":1503650710622},{"id":8564,"originId":"59a3d089bc6d9537081288e8","articleId":1933,"userId":2962,"content":"顶顶~","createdAt":1503907977481},{"id":8565,"originId":"59a3de9c9e95202d08c91d34","articleId":1933,"userId":2964,"content":"[@peace-of-soul](/user/peace-of-soul) 支持支持","createdAt":1503911580296},{"id":8566,"originId":"59a3df24bc6d9537081288fa","articleId":1933,"userId":2964,"content":"顶顶","createdAt":1503911716044},{"id":8567,"originId":"59a52ce4bc6d953708128959","articleId":1933,"userId":2965,"content":"[@bigsomg](/user/bigsomg) 我也想问这个问题","createdAt":1503997156541},{"id":8568,"originId":"59a62b3fd97b7e2308242891","articleId":1933,"userId":2962,"content":"[@AmazingLynch](/user/AmazingLynch) 暂时不招~嘿嘿~有node实习~但只对18年以后的小伙伴开放也~","createdAt":1504062271835},{"id":8569,"originId":"59a777f4bc6d9537081289fe","articleId":1933,"userId":2963,"content":"[@peace-of-soul](/user/peace-of-soul) 18毕业的实习要不？","createdAt":1504147444485},{"id":8570,"originId":"59a82bd09e95202d08c91e73","articleId":1933,"userId":2578,"content":"前端用Vue写过一个项目，其余大部分项目都是用React写的移动端项目。\r\nNodeJs没有框架，自己写了一个[接口配置系统](https://github.com/xiaotuni/angular-map-http2)，前端要什么接口，通过接口配置系统添加相应的接口就好了。\r\nJS基本功一般，ReactJs用的挺熟的。我的 [GitHub](https://github.com/xiaotuni)\r\n\r\n不知道现在还招不招了呀。  ","createdAt":1504193488709},{"id":8571,"originId":"59ae824a7e43e29b049004e0","articleId":1933,"userId":2962,"content":"[@xiaotuni](/user/xiaotuni) 简历飘来~看看呗~lishuang@guanghe.tv","createdAt":1504608842730},{"id":8572,"originId":"59aebbb7c0c71ab7040ec7c4","articleId":1933,"userId":2578,"content":"[@peace-of-soul](/user/peace-of-soul) 简历已发上面邮箱。","createdAt":1504623543705},{"id":8573,"originId":"59c1d08dd7cbefc51196451a","articleId":1933,"userId":2962,"content":"顶顶~","createdAt":1505874061977},{"id":8574,"originId":"5a0ac1d0310be7561d4c0479","articleId":1933,"userId":2962,"content":"顶顶~","createdAt":1510654416314},{"id":8575,"originId":"5a0fff262a90b76b2b660187","articleId":1933,"userId":273,"content":"[@peace-of-soul](/user/peace-of-soul) 你微信多少。可以晚上过去聊不?\r\n","createdAt":1510997798109},{"id":8576,"originId":"5a11255d2a90b76b2b6601a4","articleId":1933,"userId":506,"content":"顶~~~","createdAt":1511073117412},{"id":8577,"originId":"5a12743d261d0ce84e5fe243","articleId":1933,"userId":764,"content":"诶哟，收19届的node实习么🌚\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1511158845325},{"id":8578,"originId":"5a153851fa68dfbc62addf35","articleId":1933,"userId":2950,"content":"[@shinygang](/user/shinygang) 不敢不敢 ","createdAt":1511340113089},{"id":8579,"originId":"5a153868476ea1170b733a13","articleId":1933,"userId":2950,"content":"[@peace-of-soul](/user/peace-of-soul) 顶顶","createdAt":1511340136707},{"id":8580,"originId":"5a153884fa68dfbc62addf3a","articleId":1933,"userId":2950,"content":"[@shinygang](/user/shinygang) 回复测试","createdAt":1511340164479},{"id":8581,"originId":"5a1785556190c8912ebacd23","articleId":1933,"userId":2966,"content":"[@peace-of-soul](/user/peace-of-soul)  培训生要吗？","createdAt":1511490901583},{"id":8582,"originId":"5a28f8ec9807389a1809f1f1","articleId":1933,"userId":2962,"content":"[@shinygang](/user/shinygang) 晚上可能不是很OK吼~","createdAt":1512634604537},{"id":8583,"originId":"5a28f8fbd3114d3e18fac8c3","articleId":1933,"userId":2962,"content":"顶顶","createdAt":1512634619205},{"id":8584,"originId":"5a28f91bd92f2f5b185accb0","articleId":1933,"userId":2962,"content":"[@i5fly](/user/i5fly) 需要中高级，应届和实习暂时不需要哈~数据那边可能需要一些实习生~","createdAt":1512634651022},{"id":8585,"originId":"5a2a0ee7d92f2f5b185acce6","articleId":1933,"userId":1254,"content":"不错，graphQL都有","createdAt":1512705767294},{"id":8586,"originId":"5a3bba42d1536726354b7fed","articleId":1933,"userId":2597,"content":"mark一下","createdAt":1513863746509},{"id":8587,"originId":"5a3ca141d92f2f5b185ad132","articleId":1933,"userId":2967,"content":"竟然是macbook。都是邪党，小黑本拯救世界，kao市场占有率多高啊。我还在看express=。=","createdAt":1513922881279},{"id":8588,"originId":"5a420516d92f2f5b185ad237","articleId":1933,"userId":2962,"content":"顶顶","createdAt":1514276118068},{"id":8589,"originId":"5a4c9205ebc575dc49b270c0","articleId":1933,"userId":2962,"content":"顶顶~","createdAt":1514967557052},{"id":8590,"originId":"5a4ddf257b5fe91a4a6789af","articleId":1933,"userId":2962,"content":"顶顶","createdAt":1515052837843},{"id":8591,"originId":"5a6de86e9d371d4a059eef3d","articleId":1933,"userId":148,"content":"[@peace-of-soul](/user/peace-of-soul) 贵司很不错，帮顶一下","createdAt":1517152366369},{"id":8592,"originId":"5a7007cfafa0a121784a9122","articleId":1933,"userId":2968,"content":"[@peace-of-soul](/user/peace-of-soul)  node实习的需求能了解下吗？ 18年毕业的","createdAt":1517291471205},{"id":8593,"originId":"5af26d15adea947348e76200","articleId":1933,"userId":2962,"content":"[@Akira0705](/user/Akira0705) 18年的暂时不考虑了哟~19年的实习目前可以~","createdAt":1525837077576},{"id":8594,"originId":"5afea3c993ee7eb406973cb8","articleId":1933,"userId":2962,"content":"当当~~求推荐自荐哟~~~~转眼我司已经 腾讯/联想 投C轮了哈哈哈~","createdAt":1526637513617},{"id":8595,"originId":"5afd284e0a36e5312d6ed1e8","articleId":1934,"userId":2969,"content":"现在有新的headcount了，期待大家的简历","createdAt":1526540366919},{"id":8596,"originId":"5a961b1871327bb413bbff37","articleId":1935,"userId":759,"content":"自己顶一顶\r\n","createdAt":1519786776227},{"id":8597,"originId":"5a97681d71327bb413bbff99","articleId":1935,"userId":759,"content":"再顶~\r\n","createdAt":1519872029648},{"id":8598,"originId":"5a980e8d543e098150cb716f","articleId":1935,"userId":2673,"content":"需要18应届吗","createdAt":1519914637683},{"id":8599,"originId":"5aaa30e9f5dfc27d7ad98820","articleId":1935,"userId":759,"content":"[@DCbryant](/user/DCbryant) 特别优秀的目前可以考虑","createdAt":1521103081944},{"id":8600,"originId":"5aaa30f4f5dfc27d7ad98822","articleId":1935,"userId":759,"content":"没事顶顶","createdAt":1521103092762},{"id":8601,"originId":"5aaa3397e7b166bb7b9ecaab","articleId":1935,"userId":2673,"content":"[@wangnan0610](/user/wangnan0610) 那我试一试，昨天头条面试官说我基础挺好的，但是算法没有特意去锻炼，败在了算法","createdAt":1521103767087},{"id":8602,"originId":"5aaf68a2e7b166bb7b9ecbfa","articleId":1935,"userId":759,"content":"继续招人啊~大家踊跃投简历啦~","createdAt":1521445026895},{"id":8603,"originId":"5ab088faf5dfc27d7ad989ad","articleId":1935,"userId":2524,"content":"工作地址在哪里？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1521518842695},{"id":8604,"originId":"5ab2234be7b166bb7b9eccd0","articleId":1935,"userId":759,"content":"[@youlong723687543](/user/youlong723687543) 在北京北苑","createdAt":1521623883800},{"id":8605,"originId":"5ab237c8f5dfc27d7ad98a31","articleId":1935,"userId":2524,"content":"[@wangnan0610](/user/wangnan0610) 好的，北上广太远了点\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1521629128232},{"id":8606,"originId":"5ab8a231a2f3b49869cb2d3c","articleId":1935,"userId":759,"content":"没事顶一顶\r\n","createdAt":1522049585008},{"id":8607,"originId":"5abb1786320bb09d69e2327f","articleId":1935,"userId":759,"content":"顶顶","createdAt":1522210694362},{"id":8608,"originId":"5acb1467e34737560fccab8c","articleId":1935,"userId":759,"content":"小伙伴们，还在招人，简历快砸来了~","createdAt":1523258471967},{"id":8609,"originId":"5af908a91b02288048bd1018","articleId":1935,"userId":759,"content":"持续招人，有兴趣的小伙伴快来了啊~","createdAt":1526270121578},{"id":8610,"originId":"5afbd97aadea947348e764d2","articleId":1935,"userId":2971,"content":"人人车的听说挺高大上？","createdAt":1526454650197},{"id":8611,"originId":"5acae0052c4e775a29952a5c","articleId":1936,"userId":2959,"content":"顶一下，不能沉","createdAt":1523245061326},{"id":8612,"originId":"5afb894902591040485baeb7","articleId":1936,"userId":77,"content":"真不错，可惜不在深圳。","createdAt":1526434121227},{"id":8613,"originId":"5af55a5702591040485bad71","articleId":1937,"userId":785,"content":"请问一哈.你们还缺人吗？","createdAt":1526028887188},{"id":8614,"originId":"5afaa524adea947348e76471","articleId":1937,"userId":2973,"content":"还招人不？兼职","createdAt":1526375716133},{"id":8615,"originId":"5af917dfadea947348e76408","articleId":1938,"userId":2936,"content":"自己先顶一下，希望大家帮忙留言顶一顶。 有问题也可以发到这里。 \r\n","createdAt":1526274015172},{"id":8616,"originId":"5af9181fadea947348e76409","articleId":1938,"userId":2936,"content":"不定时回答， 最方便是发个简历过来，如何合适，我会很快电话联系。。。 （如果不方便，请在发简历的邮件中注明什么时候电话）联系比较方便）","createdAt":1526274079443},{"id":8617,"originId":"5af94c091b02288048bd1036","articleId":1938,"userId":2936,"content":"没人那。。。。。。。。。。。。。。","createdAt":1526287369953},{"id":8618,"originId":"5afaa43d1b02288048bd10a8","articleId":1938,"userId":2936,"content":"还是没人呢。。。。","createdAt":1526375485975},{"id":8619,"originId":"5afaa47502591040485bae87","articleId":1938,"userId":2936,"content":"看到有置顶的，如何置顶？？　有收费服务？？","createdAt":1526375541586},{"id":8620,"originId":"5af16f991b02288048bd0da9","articleId":1940,"userId":1357,"content":"帖子不能沉啊","createdAt":1525772185192},{"id":8621,"originId":"5af426811b02288048bd0ee2","articleId":1940,"userId":1975,"content":"大厂实习生要求头条算很高的","createdAt":1525950081509},{"id":8622,"originId":"5afa7a0a02591040485bae72","articleId":1940,"userId":77,"content":"还招人吗？","createdAt":1526364682095},{"id":8623,"originId":"5afa928b1b02288048bd109b","articleId":1940,"userId":1805,"content":"[@youarenode](/user/youarenode) 招","createdAt":1526370955032},{"id":8624,"originId":"5acdc2a4342a6e47f4859497","articleId":1941,"userId":2975,"content":"简历投递 air.petrichor@gmail.com吧，查阅效率高点。哈哈","createdAt":1523434148656},{"id":8625,"originId":"5afa79a502591040485bae70","articleId":1941,"userId":77,"content":"上海哪里呢？","createdAt":1526364581562},{"id":8626,"originId":"5797198a2d740f7c26637ec2","articleId":1944,"userId":514,"content":"感觉很不错！！！","createdAt":1469520266568},{"id":8627,"originId":"579730112d740f7c26637ed0","articleId":1944,"userId":96,"content":"网站设计的不错","createdAt":1469526033803},{"id":8628,"originId":"579cbc2623e454cd2af817a5","articleId":1944,"userId":2978,"content":"顶","createdAt":1469889574973},{"id":8629,"originId":"579cda1d41404b052be5da35","articleId":1944,"userId":2979,"content":"我也觉得网页不错\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1469897245127},{"id":8630,"originId":"579d489d85dba6b12ac5854b","articleId":1944,"userId":1937,"content":"这是哪一家园区？","createdAt":1469925533953},{"id":8631,"originId":"579d5fc523e454cd2af817af","articleId":1944,"userId":2980,"content":"对我这种新手这里就是进不去的了","createdAt":1469931461947},{"id":8632,"originId":"579d5ff223e454cd2af817b1","articleId":1944,"userId":2978,"content":"[@htoooth](/user/htoooth) 南京软件园孵鹰大厦","createdAt":1469931506602},{"id":8633,"originId":"579d799f23e454cd2af817b8","articleId":1944,"userId":2981,"content":"拉勾简历投了三天了，一点消息都没有。\r\n人事难道都不看的么~~~","createdAt":1469938079892},{"id":8634,"originId":"579d8ad641404b052be5da47","articleId":1944,"userId":752,"content":"没有 HHKB ，配置就不算豪华~ ╭(╯^╰)╮","createdAt":1469942486119},{"id":8635,"originId":"579d95d023e454cd2af817bc","articleId":1944,"userId":2978,"content":"[@lxycsdn](/user/lxycsdn) 叫什么名字呢？拉钩简历是直接投递邮箱的啊～","createdAt":1469945296535},{"id":8636,"originId":"57a1b99d7a922d6f358cd198","articleId":1944,"userId":2978,"content":"顶","createdAt":1470216605760},{"id":8637,"originId":"57a1c1635621a28b35d1e6d5","articleId":1944,"userId":2344,"content":"[@MiYogurt](/user/MiYogurt) 也是6的飞起。。。。。","createdAt":1470218595649},{"id":8638,"originId":"57a1c1935c5423c3352d7b49","articleId":1944,"userId":2344,"content":"[@MiYogurt](/user/MiYogurt) 你让filco情何以堪","createdAt":1470218643060},{"id":8639,"originId":"57a306035c5423c3352d7bbe","articleId":1944,"userId":2982,"content":"我见过你这id，在知乎上，夺得某实验室的地盘了？","createdAt":1470301699534},{"id":8640,"originId":"57a307657a922d6f358cd1eb","articleId":1944,"userId":2978,"content":"[@willin](/user/willin) 哈哈哈，不是的啊。合作伙伴","createdAt":1470302053237},{"id":8641,"originId":"57a316005c5423c3352d7bc9","articleId":1944,"userId":2983,"content":"官网不会是模板ba ?","createdAt":1470305792829},{"id":8642,"originId":"57a3b7ce7a922d6f358cd20a","articleId":1944,"userId":550,"content":"什么叫客户体验系统？如何盈利？运营模式是什么？\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1470347214175},{"id":8643,"originId":"57a3e9e453d640a735989bda","articleId":1944,"userId":2978,"content":"[@cike8899](/user/cike8899) 你觉得有可能吗？","createdAt":1470360036026},{"id":8644,"originId":"57a456525621a28b35d1e783","articleId":1944,"userId":2984,"content":"除了要求，福利都不提","createdAt":1470387794597},{"id":8645,"originId":"57a876234653749872ec6ecc","articleId":1944,"userId":2978,"content":"顶","createdAt":1470658083243},{"id":8646,"originId":"57ad2362ba44d08f4c1ce07f","articleId":1944,"userId":2978,"content":"顶","createdAt":1470964578315},{"id":8647,"originId":"57ce5e888624502e4751358c","articleId":1944,"userId":2978,"content":"顶","createdAt":1473142408640},{"id":8648,"originId":"57e11bd57d8293463a01e777","articleId":1944,"userId":1375,"content":"南京的，必须mark一下！","createdAt":1474370517263},{"id":8649,"originId":"57e13abb3af3942a3aa3b90a","articleId":1944,"userId":2985,"content":"很好啊，想加入\n\r<br>来自<a href=\"https://lzxb.github.io/vue-cnode/\" target=\"_blank\">vue-cnode手机版</a>","createdAt":1474378427662},{"id":8650,"originId":"57faf3a80bab808265185c17","articleId":1944,"userId":2978,"content":"继续招，欢迎加入","createdAt":1476064168639},{"id":8651,"originId":"57fd95c50bab808265185cba","articleId":1944,"userId":2978,"content":"hi","createdAt":1476236741473},{"id":8652,"originId":"580d6527d523a01734810a24","articleId":1944,"userId":2978,"content":"继续寻找","createdAt":1477272871435},{"id":8653,"originId":"580d7ae4eae2a24f34e67e32","articleId":1944,"userId":2986,"content":"南京的支持下","createdAt":1477278436583},{"id":8654,"originId":"580da239eae2a24f34e67e4d","articleId":1944,"userId":2978,"content":"[@Fengxq2014](/user/Fengxq2014) 多谢","createdAt":1477288505631},{"id":8655,"originId":"581800251a9a7d990953133b","articleId":1944,"userId":2978,"content":"跪求。。。","createdAt":1477967909656},{"id":8656,"originId":"5844c688f3576dd333f869c3","articleId":1944,"userId":2978,"content":"好久没来了，顶一下","createdAt":1480902280326},{"id":8657,"originId":"5844e8463ebad99b336b1d7c","articleId":1944,"userId":2987,"content":"我住江宁，公司离我有点远啊","createdAt":1480910918201},{"id":8658,"originId":"584618924c17b38d354363d6","articleId":1944,"userId":2978,"content":"[@taoyangaiai](/user/taoyangaiai) 未来发展在浦口江北新区","createdAt":1480988818364},{"id":8659,"originId":"589416d57274550b057a5cd0","articleId":1944,"userId":2978,"content":"继续招","createdAt":1486100181647},{"id":8660,"originId":"58a1494ecefe06e13676a786","articleId":1944,"userId":2988,"content":"顶一个","createdAt":1486965070278},{"id":8661,"originId":"58aa57b2fafcf6bf5f32d85f","articleId":1944,"userId":2978,"content":"[@Hmilyxy](/user/Hmilyxy) 多谢","createdAt":1487558578044},{"id":8662,"originId":"58c9eefaef3f9df178e0e225","articleId":1944,"userId":2978,"content":"2017 真求node","createdAt":1489628922139},{"id":8663,"originId":"58ce504f28be82df16560965","articleId":1944,"userId":2988,"content":"待遇大题什么水平","createdAt":1489915983284},{"id":8664,"originId":"58cec789ede0d3f716854254","articleId":1944,"userId":319,"content":"[@enqoo](/user/enqoo) 实习狗要么","createdAt":1489946505647},{"id":8665,"originId":"5934b98b739a92064a1bd4e0","articleId":1944,"userId":2978,"content":"2017年继续招","createdAt":1496627595682},{"id":8666,"originId":"5934d6b5739a92064a1bd4fc","articleId":1944,"userId":2989,"content":"[@enqoo](/user/enqoo) 您好，贵公司要求的技术栈跟我所学一模一样，非常向往。但是我的Node欠缺火候，需要时间成长，想问下可以带一带么，实习生的工资就行。\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1496635061642},{"id":8667,"originId":"5934d706bce3132e4bb4f907","articleId":1944,"userId":2989,"content":"[@enqoo](/user/enqoo) 您好，贵公司要求的技术栈跟我所学一模一样，非常向往。但是我的Node欠缺火候，需要时间成长，想问下可以带一带么，实习生的工资就行。\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1496635142187},{"id":8668,"originId":"59352071538dbcaa6bc7dcdc","articleId":1944,"userId":2978,"content":"[@manzi-1991](/user/manzi-1991) 可以发份简历来我们看看吗？","createdAt":1496653937974},{"id":8669,"originId":"5935722fdfbb657c2a05ca0f","articleId":1944,"userId":2989,"content":"[@enqoo](/user/enqoo) 不好意思，回复的有点晚，望见谅。今天北京刮大风，回家有点晚，怕打扰您休息，简历我明天早上九点给您发过去。\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1496674863049},{"id":8670,"originId":"593604846b7ebe7e2979d891","articleId":1944,"userId":2989,"content":"[@enqoo](/user/enqoo) 您好，简历已经发送到您的邮箱了。\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1496712324145},{"id":8671,"originId":"593617e7538dbcaa6bc7dd2f","articleId":1944,"userId":2978,"content":"[@manzi-1991](/user/manzi-1991) 好的","createdAt":1496717287019},{"id":8672,"originId":"595cae1c1b534b44081909ca","articleId":1944,"userId":2978,"content":"招人啊","createdAt":1499246108153},{"id":8673,"originId":"59dade39eab6a6536873ff36","articleId":1944,"userId":2978,"content":"招人啊 。。。。","createdAt":1507515961912},{"id":8674,"originId":"5a0140965eebf62d4d86fcf0","articleId":1944,"userId":2978,"content":"继续招人！","createdAt":1510031510699},{"id":8675,"originId":"5a095c0ddea908392cfc890f","articleId":1944,"userId":2978,"content":"招人啦","createdAt":1510562829898},{"id":8676,"originId":"5af98faf02591040485bae3c","articleId":1944,"userId":632,"content":"官网图片要放在CDN上，不然特别慢","createdAt":1526304687521},{"id":8677,"originId":"5ad01ebba7d228c16b986a5f","articleId":1946,"userId":2991,"content":"我的招聘是不是凉凉了，给自己顶一下","createdAt":1523588795513},{"id":8678,"originId":"5ad04a9fba60fcc66b7b809c","articleId":1946,"userId":2811,"content":"我也帮你顶一下吧","createdAt":1523600031116},{"id":8679,"originId":"5ad08978ba60fcc66b7b80b2","articleId":1946,"userId":2417,"content":"我帮你的顶一下 你能不能也帮我的顶一下。。。我也在招node.js后端开发。。上海的","createdAt":1523616120881},{"id":8680,"originId":"5ad7acb73edb2aff6be85c61","articleId":1946,"userId":2931,"content":"请问招实习生吗？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1524083895569},{"id":8681,"originId":"5af12f551b02288048bd0d81","articleId":1946,"userId":1111,"content":"你好，有岗位空缺么？","createdAt":1525755733607},{"id":8682,"originId":"5af8ef470a36e5312d6ed07b","articleId":1946,"userId":2923,"content":"[@qiangzi7723](/user/qiangzi7723) 实习生需要么？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1526263623766},{"id":8683,"originId":"5acd72d5099b154dbeba00ad","articleId":1948,"userId":2992,"content":"实习生也需要","createdAt":1523413717096},{"id":8684,"originId":"5acdfeffa7d228c16b9869de","articleId":1948,"userId":2532,"content":"大佬大佬，实习生要什么段位的，做过近两年前端，node写的不多，用typescript写过基于koa的服务器😂","createdAt":1523449599570},{"id":8685,"originId":"5ad59aedba60fcc66b7b8352","articleId":1948,"userId":2992,"content":"[@wazsq](/user/wazsq) 来投简历面聊吧","createdAt":1523948269184},{"id":8686,"originId":"5ad5baed464b1bfa6b425473","articleId":1948,"userId":2532,"content":"[@Shidou](/user/Shidou) 嘿嘿，已投，请大佬给出指导意见","createdAt":1523956461309},{"id":8687,"originId":"5af2a8570a36e5312d6ecebc","articleId":1948,"userId":2992,"content":"求简历","createdAt":1525852247803},{"id":8688,"originId":"5af2477a0a36e5312d6ece71","articleId":1949,"userId":2994,"content":"请问实习可以投到您这吗","createdAt":1525827450234},{"id":8689,"originId":"5af27a0dadea947348e7620d","articleId":1949,"userId":2993,"content":"[@lizhenwu](/user/lizhenwu) 可以","createdAt":1525840397463},{"id":8690,"originId":"5af238a3adea947348e761df","articleId":1950,"userId":2532,"content":"看来今年是不要实习生了，投了好久都没回应，难受\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1525823651584},{"id":8691,"originId":"5ad860713edb2aff6be85d74","articleId":1954,"userId":19,"content":"你以为放上小姐姐的照片，我们就不会在讨论需求的时候，带着刀了吗？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1524129905416},{"id":8692,"originId":"5ad899a9ba60fcc66b7b8634","articleId":1954,"userId":2507,"content":"[@luanxuechao](/user/luanxuechao) 哈哈哈，一切都好商量","createdAt":1524144553823},{"id":8693,"originId":"5add5675a7d228c16b987194","articleId":1954,"userId":2507,"content":"2年+ 工作经验，急招优秀前端","createdAt":1524455029628},{"id":8694,"originId":"5aefffd11b02288048bd0d2a","articleId":1954,"userId":2507,"content":"名额还没招满，急需优秀前端人才","createdAt":1525678033593},{"id":8695,"originId":"5ae9766702591040485ba9ec","articleId":1955,"userId":96,"content":"甘肃兰州  支持一下！","createdAt":1525249639506},{"id":8696,"originId":"5aced856464b1bfa6b425071","articleId":1956,"userId":419,"content":"成都高级 这个下限有点低","createdAt":1523505238516},{"id":8697,"originId":"5aced9a5a7d228c16b986a0f","articleId":1956,"userId":2999,"content":"[@yuu2lee4](/user/yuu2lee4) 谢谢建议，薪资面谈，写高了有点虚","createdAt":1523505573972},{"id":8698,"originId":"5aceded3ba60fcc66b7b800d","articleId":1956,"userId":785,"content":"6666  \n  [【来自酷炫的小程序】](https://github.com/FourLeafClover/wxcnode)","createdAt":1523506899318},{"id":8699,"originId":"5acedf483edb2aff6be85738","articleId":1956,"userId":785,"content":"[@tuoxiaozhong](/user/tuoxiaozhong)     把16薪写进去哇。这个比较有诱惑力。  \n  [【来自酷炫的小程序】](https://github.com/FourLeafClover/wxcnode)","createdAt":1523507016221},{"id":8700,"originId":"5acedfaeba60fcc66b7b800f","articleId":1956,"userId":2999,"content":"[@FourLeafClover](/user/FourLeafClover) 哈哈哈，所以说别让薪资限制想象","createdAt":1523507118449},{"id":8701,"originId":"5ae3319a39a81e4548f457c8","articleId":1956,"userId":341,"content":"就在旁边呢，悄悄来看一下","createdAt":1524838810327},{"id":8702,"originId":"5ae9614aadea947348e75fc8","articleId":1956,"userId":2999,"content":"[@feng-fu](/user/feng-fu) 要来的话可以邮箱联系我","createdAt":1525244234878},{"id":8703,"originId":"5ae276551b02288048bd0a54","articleId":1958,"userId":1966,"content":"招Node.js后端吗？","createdAt":1524790869736},{"id":8704,"originId":"5ae60eac02591040485ba95f","articleId":1958,"userId":1386,"content":"+1<br/><br/><a class=\"form\" href=\"https://github.com/soulcm/react-cnode-mobile\">vue-cnode-mobile</a>","createdAt":1525026476606},{"id":8705,"originId":"5ae6969f39a81e4548f4585f","articleId":1958,"userId":2424,"content":"来nodejs社区招python开发。。。\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1525061279742},{"id":8706,"originId":"5aded7217b0e8dc508cca6ed","articleId":1959,"userId":3001,"content":"顶上去^_^","createdAt":1524553505318},{"id":8707,"originId":"5ae492c21b02288048bd0aff","articleId":1959,"userId":973,"content":"帮顶 \n ☆ 来自微信小程序 [cnode助手](https://github.com/strawbreey/mpvue-cnode)","createdAt":1524929218741},{"id":8708,"originId":"5ae19a04a86ec1f308ec25d6","articleId":1961,"userId":1075,"content":"邮件发：czz5242199@gmail.com","createdAt":1524734468850},{"id":8709,"originId":"5ae20e0a1b02288048bd0a4a","articleId":1961,"userId":973,"content":"mark  \n --来自微信小程序 [cnode助手](https://github.com/strawbreey/mpvue-cnode)","createdAt":1524764170551},{"id":8710,"originId":"5ae1e35202591040485ba856","articleId":1962,"userId":3002,"content":"欢迎大家来撩","createdAt":1524753234273},{"id":8711,"originId":"5ae20cd51b02288048bd0a48","articleId":1962,"userId":973,"content":"mark  \n来自微信小程序 [cnode助手](https://github.com/strawbreey/mpvue-cnode)","createdAt":1524763861258},{"id":8712,"originId":"5a9b7fb88edf56a344937036","articleId":1966,"userId":3006,"content":"顶一波！","createdAt":1520140216619},{"id":8713,"originId":"5a9e595819b2e3db18959ae9","articleId":1966,"userId":3007,"content":"前端最容易进~","createdAt":1520327000586},{"id":8714,"originId":"5a9eab80f5dfc27d7ad98512","articleId":1966,"userId":1975,"content":"明年我再来看，哈哈","createdAt":1520348032210},{"id":8715,"originId":"5a9eac5d19b2e3db18959b0d","articleId":1966,"userId":1187,"content":"[@fruit-memory](/user/fruit-memory) 如果觉得自己特别优秀的话 今年也欢迎来试试~ 哈哈","createdAt":1520348253958},{"id":8716,"originId":"5a9eadb8f5dfc27d7ad98516","articleId":1966,"userId":1975,"content":"还没什么经验，嘿嘿，你们这个实习招的是19年还是18年的","createdAt":1520348600408},{"id":8717,"originId":"5a9f3d3519b2e3db18959b23","articleId":1966,"userId":1187,"content":"[@fruit-memory](/user/fruit-memory) 19 年毕业的哈  明年就是 20 年毕业的实习招聘了~","createdAt":1520385333236},{"id":8718,"originId":"5a9f69c8ce4a27f867526e5e","articleId":1966,"userId":1975,"content":"[@x-cold](/user/x-cold) 明年来","createdAt":1520396744097},{"id":8719,"originId":"5aa639e0f5dfc27d7ad9870e","articleId":1966,"userId":1187,"content":"自己顶！d=====(￣▽￣*)b","createdAt":1520843232718},{"id":8720,"originId":"5aa8b06fe7b166bb7b9eca32","articleId":1966,"userId":2994,"content":"还要实习生吗（¯﹃¯）","createdAt":1521004655740},{"id":8721,"originId":"5aa8c10f19b2e3db18959d7d","articleId":1966,"userId":1187,"content":"[@lizhenwu](/user/lizhenwu) 要@！","createdAt":1521008911960},{"id":8722,"originId":"5aa8db8cce4a27f8675270ca","articleId":1966,"userId":2994,"content":"[@x-cold](/user/x-cold) 简历已发 😂","createdAt":1521015692061},{"id":8723,"originId":"5ab0cff4e7b166bb7b9ecc64","articleId":1966,"userId":1187,"content":"大量 HC 欢迎投简历哈~","createdAt":1521537012078},{"id":8724,"originId":"5ab0dc88e7b166bb7b9ecc6b","articleId":1966,"userId":3008,"content":"  请问楼主6月底才能去实习的可以投递简历吗？19年毕业。","createdAt":1521540232515},{"id":8725,"originId":"5ab1b45319b2e3db18959fc2","articleId":1966,"userId":3006,"content":"[@hjwgit](/user/hjwgit) 楼主说可以","createdAt":1521595475763},{"id":8726,"originId":"5ab1ba28ce4a27f8675272db","articleId":1966,"userId":3009,"content":"学历的最低限制是什么呀","createdAt":1521596968657},{"id":8727,"originId":"5ab1c139ce4a27f8675272e2","articleId":1966,"userId":1187,"content":"[@hjwgit](/user/hjwgit) 当然可以~ 楼主前年七月份才来实习呢","createdAt":1521598777875},{"id":8728,"originId":"5ab1c14f19b2e3db18959fc8","articleId":1966,"userId":1187,"content":"[@wz1234](/user/wz1234) 一般是要求本科以上的 如果特别特别优秀，也可以不受限制的","createdAt":1521598799776},{"id":8729,"originId":"5ab1d182e7b166bb7b9ecc9d","articleId":1966,"userId":2190,"content":"北京有职位么\r\n","createdAt":1521602946684},{"id":8730,"originId":"5ab1fb34e7b166bb7b9eccb2","articleId":1966,"userId":3008,"content":"[@x-cold](/user/x-cold) 简历已发 ! ^^","createdAt":1521613620895},{"id":8731,"originId":"5ab1fb51e7b166bb7b9eccb4","articleId":1966,"userId":3008,"content":"[@k-water](/user/k-water) 谢谢！","createdAt":1521613649116},{"id":8732,"originId":"5ab3a435e7b166bb7b9ecd31","articleId":1966,"userId":1187,"content":"[@Rock-1](/user/Rock-1) 背景暂时没有前端岗位~不过可以推荐到其他部门","createdAt":1521722421101},{"id":8733,"originId":"5ab84f5b0b13e3ad6954ce4a","articleId":1966,"userId":1187,"content":"名额还是比较宽裕的哦 欢迎大家推荐自己或者朋友过来~","createdAt":1522028379609},{"id":8734,"originId":"5abaf6620b13e3ad6954cef1","articleId":1966,"userId":1187,"content":"顶帖","createdAt":1522202210984},{"id":8735,"originId":"5abf9aa80b13e3ad6954d03d","articleId":1966,"userId":1187,"content":"顶一下","createdAt":1522506408940},{"id":8736,"originId":"5ac20e070ab0448f0fe3f7f4","articleId":1966,"userId":1187,"content":"顶帖","createdAt":1522667015332},{"id":8737,"originId":"5ac2f67637f5d1510f57c857","articleId":1966,"userId":1187,"content":"顶~","createdAt":1522726518351},{"id":8738,"originId":"5acac1b9e34737560fccab5d","articleId":1966,"userId":1187,"content":"顶！d=====(￣▽￣*)b","createdAt":1523237305443},{"id":8739,"originId":"5acebb87ba60fcc66b7b8000","articleId":1966,"userId":1187,"content":"持续招聘呀~","createdAt":1523497863667},{"id":8740,"originId":"5ad951f3464b1bfa6b42579b","articleId":1966,"userId":1187,"content":"自顶！d=====(￣▽￣*)b","createdAt":1524191731397},{"id":8741,"originId":"5adf1ad0a86ec1f308ec24ba","articleId":1966,"userId":1187,"content":"抓紧时间上车~","createdAt":1524570832793},{"id":8742,"originId":"5a0bb168ef333d0e2e61a077","articleId":1968,"userId":2943,"content":"欢迎投递简历至 zhongy@qutke.com ！！","createdAt":1510715752023},{"id":8743,"originId":"5a129efe476ea1170b733981","articleId":1968,"userId":2943,"content":"欢迎大家加入！","createdAt":1511169790788},{"id":8744,"originId":"5a162a8bfa68dfbc62addf55","articleId":1968,"userId":2943,"content":"欢迎大家踊跃报名！","createdAt":1511402123475},{"id":8745,"originId":"5a585cb7a3692d014f4f1405","articleId":1968,"userId":2943,"content":"欢迎投递简历至zhongy@qutke.com ！！","createdAt":1515740343264},{"id":8746,"originId":"5acda963c54db1026998d1b8","articleId":1968,"userId":2943,"content":"招聘持续中……请有意者火速联系。","createdAt":1523427683056},{"id":8747,"originId":"5ad9c127464b1bfa6b4257e8","articleId":1968,"userId":2943,"content":"请把您的简历或情况发邮件到 zhongy@qutke.com","createdAt":1524220199218},{"id":8748,"originId":"5addb8883edb2aff6be85f17","articleId":1968,"userId":2943,"content":"把您的简历或情况发邮件 zhongy@qutke.com","createdAt":1524480136961},{"id":8749,"originId":"5a5d80d3afa0a121784a8c34","articleId":1969,"userId":2943,"content":"请发简历至zhongy@qutke.com","createdAt":1516077267890},{"id":8750,"originId":"5acda941b1bbfa02600ff9d1","articleId":1969,"userId":2943,"content":"招聘持续中……请有意者火速联系。","createdAt":1523427649693},{"id":8751,"originId":"5ad9c10dba60fcc66b7b86ee","articleId":1969,"userId":2943,"content":"请把您的简历或情况发邮件到 zhongy@qutke.com","createdAt":1524220173810},{"id":8752,"originId":"5addb8773edb2aff6be85f16","articleId":1969,"userId":2943,"content":"把您的简历或情况发邮件 zhongy@qutke.com","createdAt":1524480119550},{"id":8753,"originId":"5acad573729b245529cb5909","articleId":1972,"userId":2220,"content":"已收到几份简历，各位看官不考虑考虑么。","createdAt":1523242355384},{"id":8754,"originId":"5acaf76be34737560fccab80","articleId":1972,"userId":2673,"content":"[@diyao](/user/diyao) 应届前端考虑不，熟悉react、redux，基础扎实","createdAt":1523251051512},{"id":8755,"originId":"5acb261596f344940fbbaeb1","articleId":1972,"userId":2220,"content":"[@DCbryant](/user/DCbryant)  是今年要毕业的吗？对于mv\\*掌握的好，基础扎实。可以哦。","createdAt":1523262997461},{"id":8756,"originId":"5acca3bb099b154dbeba008a","articleId":1972,"userId":2221,"content":"请教下年资不足一年的考虑不？ 去年毕业的，熟悉vue，webpack有一定使用经验。看了介绍十分感兴趣，如果暂时不符合要求的话可以指点下需要往哪个方向努力吗？ 谢谢。","createdAt":1523360699201},{"id":8757,"originId":"5acd69a5099b154dbeba00a8","articleId":1972,"userId":2220,"content":"[@jwentao](/user/jwentao)  指点不敢，每个人都有自己的方向。可以把你简历发过来我看看哈。","createdAt":1523411365063},{"id":8758,"originId":"5ad20c74464b1bfa6b42515b","articleId":1972,"userId":2220,"content":"### 已满。暂时不招该级别。 ###","createdAt":1523715188333},{"id":8759,"originId":"5ad31892a7d228c16b986b34","articleId":1972,"userId":3012,"content":"~ 慢了一拍  关注下 有没有再招的时候","createdAt":1523783826025},{"id":8760,"originId":"5ad32dca464b1bfa6b4251bc","articleId":1972,"userId":2221,"content":"[@diyao](/user/diyao)  昨天从2点钟开始面到了晚上8点多，最后说hr都下班了，让我回去等hr的通知，请教下是不是意味着已经淘汰了，因为看到您这边说招满了。","createdAt":1523789258728},{"id":8761,"originId":"5ad33d8f464b1bfa6b4251de","articleId":1972,"userId":2220,"content":"[@jwentao](/user/jwentao)  不一定，我们offer少有当面就定的。从过了三面的人来看，后面不再招该级别。","createdAt":1523793295726},{"id":8762,"originId":"5ad33df13edb2aff6be85896","articleId":1972,"userId":2220,"content":"[@Sunshine168](/user/Sunshine168)  看一下我们另一个贴？","createdAt":1523793393743},{"id":8763,"originId":"5ad34e1aa7d228c16b986b73","articleId":1972,"userId":2221,"content":"[@diyao](/user/diyao) 了解了，感谢，期待好消息","createdAt":1523797530941},{"id":8764,"originId":"5ad373b8464b1bfa6b425207","articleId":1972,"userId":3012,"content":"[@diyao](/user/diyao)  应该剩下只有高级的了吧~  感觉不是很行 啊哈哈哈","createdAt":1523807160181},{"id":8765,"originId":"5ad70d69ba60fcc66b7b84bb","articleId":1972,"userId":3013,"content":"[@diyao](/user/diyao) 请问方便说下现在名单确定了么？ 我这边情况是过了三面但是后续没有接到hr电话。手里有其它offer需要确认了，个人对bigo是很向往的，希望等到这边有结果再做决定。 谢谢了。","createdAt":1524043113810},{"id":8766,"originId":"5ad7752b464b1bfa6b4255dc","articleId":1972,"userId":2575,"content":"[@spartaWen](/user/spartaWen) 同求","createdAt":1524069675790},{"id":8767,"originId":"5adadc3e464b1bfa6b425815","articleId":1972,"userId":2220,"content":"抱歉晚了回复。[@spartaWen](/user/spartaWen)  [@Mrminfive](/user/Mrminfive)  两位可以邮件过来，告知下名字，我马上去问，过了三面也存在被刷的可能哦。","createdAt":1524292670706},{"id":8768,"originId":"5a585c5aafa0a121784a8b61","articleId":1973,"userId":2943,"content":"欢迎投递简历至zhongy@qutke.com","createdAt":1515740250090},{"id":8769,"originId":"5a5b492ca3692d014f4f1465","articleId":1973,"userId":1740,"content":"这个招聘，地点没有，薪资待遇也没有","createdAt":1515931948961},{"id":8770,"originId":"5a5d617da3692d014f4f14bd","articleId":1973,"userId":539,"content":"我比较关心薪资","createdAt":1516069245068},{"id":8771,"originId":"5a5d77889288dc8153287e5a","articleId":1973,"userId":2943,"content":"[@caiya](/user/caiya) 更新地点＋薪资待遇了","createdAt":1516074888097},{"id":8772,"originId":"5a5d778ea3692d014f4f14c8","articleId":1973,"userId":2943,"content":"[@zsea](/user/zsea) 更新地点＋薪资待遇了","createdAt":1516074894561},{"id":8773,"originId":"5acda954b1bbfa02600ff9d2","articleId":1973,"userId":2943,"content":"招聘持续中……请有意者火速联系。","createdAt":1523427668516},{"id":8774,"originId":"5ad9c11e464b1bfa6b4257e7","articleId":1973,"userId":2943,"content":"请把您的简历或情况发邮件到 zhongy@qutke.com","createdAt":1524220190456},{"id":8775,"originId":"5aca0fff2c4e775a29952a1c","articleId":1974,"userId":2673,"content":"[@erdun](/user/erdun) 应届前端考虑吗","createdAt":1523191807799},{"id":8776,"originId":"5acacf8796f344940fbbae97","articleId":1974,"userId":2385,"content":"[@DCbryant](/user/DCbryant) 只要技术可以的都会考虑","createdAt":1523240839126},{"id":8777,"originId":"5acad0cfe34737560fccab66","articleId":1974,"userId":2385,"content":"公司位于西湖区财富中心，公司现在规模如下图。公司扩张阶段，缺人缺人缺人！！！跪求简历\r\n![1.jpeg](//static.cnodejs.org/Fqr20is9-7g3wSgDnwfULkruzT2Q)![2.jpg](//static.cnodejs.org/FuYxxhiJglIZwl9sDU_Zqw_85Az8)","createdAt":1523241167860},{"id":8778,"originId":"5acd6d1ecb93f34db449c952","articleId":1974,"userId":2385,"content":"五星级大楼，一流的办公环境，团队成员配置：macbook pro + 双显示器\r\n![prove.jpg](//static.cnodejs.org/ffd35c50-3d2b-11e8-8a8a-8ffe6110ad9f.jpg)","createdAt":1523412254960},{"id":8779,"originId":"5acdff45a7d228c16b9869e0","articleId":1974,"userId":2532,"content":"呀，我又来评论了，实习生考虑吗","createdAt":1523449669507},{"id":8780,"originId":"5acf69fd464b1bfa6b42509a","articleId":1974,"userId":2385,"content":"[@wazsq](/user/wazsq) 招的， RN 和web方向","createdAt":1523542525365},{"id":8781,"originId":"5ad00284ba60fcc66b7b805b","articleId":1974,"userId":2618,"content":"[@erdun](/user/erdun) 发过简历的不合适是不是就不会回复啊","createdAt":1523581572854},{"id":8782,"originId":"5ad0634fa7d228c16b986a91","articleId":1974,"userId":2532,"content":"[@erdun](/user/erdun)  好的呢，了解","createdAt":1523606351921},{"id":8783,"originId":"5ad090433edb2aff6be857d9","articleId":1974,"userId":3014,"content":"[@erdun](/user/erdun) 不得不说这个配置 看着就爽😖😖😖\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1523617859110},{"id":8784,"originId":"5ad1711f464b1bfa6b425117","articleId":1974,"userId":2385,"content":"[@xieww](/user/xieww) 有点忙做的没到位，之后会改进的","createdAt":1523675423042},{"id":8785,"originId":"5ad34147464b1bfa6b4251e6","articleId":1974,"userId":2618,"content":"[@erdun](/user/erdun) 希望以后不管合适不合适尽量回复一下，毕竟人家投了说明还是有兴趣的","createdAt":1523794247299},{"id":8786,"originId":"5ad45bebba60fcc66b7b8205","articleId":1974,"userId":3015,"content":"好大的桌子, 想去~~~","createdAt":1523866603216},{"id":8787,"originId":"5ad690c63edb2aff6be85b9c","articleId":1974,"userId":3016,"content":"一般简历处理时间多久啊？希望不管合不合适还是给个回复啊，毕竟是有兴趣的啊~~","createdAt":1524011206667},{"id":8788,"originId":"5ad94388ba60fcc66b7b868b","articleId":1974,"userId":2385,"content":"[@JerryYuanJ](/user/JerryYuanJ) 收到邮件，我会回复的，最近hr小姐姐很忙，处理起来需要点时间，有些因此没有收到回复邮件。如果等有回复急，可以给我发邮件","createdAt":1524188040894},{"id":8789,"originId":"5ad6ab70a7d228c16b986e51","articleId":1976,"userId":3018,"content":"如果 对这个工作机会有兴趣， 可以加我 QQ ：857609086 了解更多细节哈。","createdAt":1524018032656},{"id":8790,"originId":"5aa9eb2dce4a27f867527103","articleId":1978,"userId":3020,"content":"up","createdAt":1521085229289},{"id":8791,"originId":"5aab4339ce4a27f867527176","articleId":1978,"userId":2957,"content":"不写HTML和css的要不？哈哈","createdAt":1521173305870},{"id":8792,"originId":"5aab5948f5dfc27d7ad98879","articleId":1978,"userId":3020,"content":"[@semicoyoung](/user/semicoyoung) 可以","createdAt":1521178952792},{"id":8793,"originId":"5aacf268e7b166bb7b9ecb4e","articleId":1978,"userId":3021,"content":"前端要吗？react+redux+nodejs全栈，但是偏前端","createdAt":1521283688020},{"id":8794,"originId":"5aaf25f7f5dfc27d7ad98955","articleId":1978,"userId":3020,"content":"[@luckylin87](/user/luckylin87) 可以的","createdAt":1521427959861},{"id":8795,"originId":"5ab0b5dee7b166bb7b9ecc57","articleId":1978,"userId":2524,"content":"位置有点远，不然可以考虑\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1521530334488},{"id":8796,"originId":"5ab211ffce4a27f8675272fd","articleId":1978,"userId":3020,"content":"up","createdAt":1521619455908},{"id":8797,"originId":"5ac98943729b245529cb5879","articleId":1978,"userId":456,"content":"看起来还不错 ","createdAt":1523157315487},{"id":8798,"originId":"5ac98fc196f344940fbbae26","articleId":1978,"userId":1512,"content":"[@luckylin87](/user/luckylin87) 我们这里招 React，欢迎投递简历到 guchuantang@veryci.com。工作地点：北京市朝阳区朝外大街乙6号朝外SOHO","createdAt":1523158977332},{"id":8799,"originId":"5ac98fda2c4e775a299529c2","articleId":1978,"userId":1512,"content":"[@youlong723687543](/user/youlong723687543) 工作地点：北京市朝阳区朝外大街乙6号朝外SOHO，考虑下？","createdAt":1523159002238},{"id":8800,"originId":"5ac9cdb196f344940fbbae4b","articleId":1978,"userId":2673,"content":"[@Tonyce](/user/Tonyce)  熟悉react、redux的应届生考虑嘛","createdAt":1523174833823},{"id":8801,"originId":"5acadcfe2c4e775a29952a58","articleId":1978,"userId":589,"content":"mark","createdAt":1523244286061},{"id":8802,"originId":"5acebf393edb2aff6be85724","articleId":1978,"userId":1512,"content":"[@DCbryant](/user/DCbryant) 还请展示下实力","createdAt":1523498809605},{"id":8803,"originId":"5acef961ba60fcc66b7b8019","articleId":1978,"userId":2673,"content":"[@Tonyce](/user/Tonyce) 不好意思，已经找到合适的公司了，实力以后有机会再来展示吧","createdAt":1523513697272},{"id":8804,"originId":"5ad41136ba60fcc66b7b8186","articleId":1978,"userId":456,"content":"[@DCbryant](/user/DCbryant) 恭喜 ","createdAt":1523847478834},{"id":8805,"originId":"5ad4aa49ba60fcc66b7b825e","articleId":1978,"userId":2673,"content":"[@hapiman](/user/hapiman) 哈哈，谢谢老铁","createdAt":1523886665629},{"id":8806,"originId":"5a5ca6be9d371d4a059eeade","articleId":1983,"userId":2445,"content":"大家快快投简历啊","createdAt":1516021438964},{"id":8807,"originId":"5a5d5880a3692d014f4f14b7","articleId":1983,"userId":152,"content":"唉，北京太远了。。。要是上海有岗位就好了。。","createdAt":1516066944902},{"id":8808,"originId":"5a5ee7aba3692d014f4f1521","articleId":1983,"userId":3026,"content":"http://www.xuxihai.top/2017/11/10/page100  简历已发。","createdAt":1516169131804},{"id":8809,"originId":"5a73be9b9d371d4a059ef0cd","articleId":1983,"userId":3027,"content":"还有在招人么？","createdAt":1517534875960},{"id":8810,"originId":"5a73c9f79d371d4a059ef0d1","articleId":1983,"userId":1947,"content":"可惜在北京，帮顶","createdAt":1517537783102},{"id":8811,"originId":"5a7a68998d6e16e56bb805f2","articleId":1983,"userId":2445,"content":"[@abRev](/user/abRev) 还在招聘，欢迎来聊聊","createdAt":1517971609538},{"id":8812,"originId":"5a7a68be8d6e16e56bb805f4","articleId":1983,"userId":2445,"content":"[@oyosc](/user/oyosc) 谢谢，有兴趣换个城市吗？","createdAt":1517971646293},{"id":8813,"originId":"5a9e0fdbf5dfc27d7ad984d3","articleId":1983,"userId":2445,"content":"金三银四，想要换工作的小伙伴们看过来，一大波职位来袭，各个岗位都有，欢迎咨询，欢迎简历！","createdAt":1520308187207},{"id":8814,"originId":"5a9e772dce4a27f867526e16","articleId":1983,"userId":383,"content":"...想问一下楼主，，招大三实习么。。。","createdAt":1520334637303},{"id":8815,"originId":"5aa099ec19b2e3db18959baa","articleId":1983,"userId":2445,"content":"[@vanishcode](/user/vanishcode) 实习生招聘还没有开始哈","createdAt":1520474604677},{"id":8816,"originId":"5aa9dcdae7b166bb7b9eca7e","articleId":1983,"userId":2190,"content":"学历是硬伤","createdAt":1521081562024},{"id":8817,"originId":"5aaf2f4de7b166bb7b9ecbe0","articleId":1983,"userId":2445,"content":"持续招人ing，热烈欢迎各位小伙伴","createdAt":1521430349569},{"id":8818,"originId":"5acece47a7d228c16b986a06","articleId":1983,"userId":2445,"content":"急需后端和测试开发的小伙伴，大家简历砸过来","createdAt":1523502663850},{"id":8819,"originId":"5acf7327a7d228c16b986a4a","articleId":1983,"userId":1305,"content":"ofo好像就在旁边，我在中钢大厦，最近在看工作机会，改天过去瞅瞅\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1523544871080},{"id":8820,"originId":"5ad04964a7d228c16b986a83","articleId":1983,"userId":2445,"content":"[@nodepaladin](/user/nodepaladin)  哈哈，随时欢迎","createdAt":1523599716472},{"id":8821,"originId":"5908310493aa348e3d40e799","articleId":1984,"userId":3029,"content":"应届生可以吗？今年毕业，，，一年开发经验\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1493709060007},{"id":8822,"originId":"590948c6bbaf2f3f569be4b7","articleId":1984,"userId":2501,"content":"专科狗表示害怕。。。","createdAt":1493780678780},{"id":8823,"originId":"5acd64e7099b154dbeba00a3","articleId":1984,"userId":90,"content":"点赞来的。。。在dva的一个demo中使用了下不错","createdAt":1523410151862},{"id":8824,"originId":"5ad01afc464b1bfa6b4250ba","articleId":1984,"userId":2190,"content":"专科狗表示害怕。。。\r\n\r\n","createdAt":1523587836545},{"id":8825,"originId":"5abc80680b13e3ad6954cf5e","articleId":1986,"userId":3000,"content":"欢迎小伙伴踊跃投递","createdAt":1522303080577},{"id":8826,"originId":"5abe0e310b13e3ad6954cff2","articleId":1986,"userId":3000,"content":"欢迎小伙伴踊跃投递","createdAt":1522404913958},{"id":8827,"originId":"5ac33f4b37f5d1510f57c87a","articleId":1986,"userId":3000,"content":"欢迎小伙伴踊跃投递！！","createdAt":1522745163592},{"id":8828,"originId":"5ac96f362c4e775a299529a2","articleId":1986,"userId":90,"content":"IIoT确认过？","createdAt":1523150646857},{"id":8829,"originId":"5ac9bb33729b245529cb5890","articleId":1986,"userId":1975,"content":"我就看看","createdAt":1523170099903},{"id":8830,"originId":"5acecb9c3edb2aff6be8572c","articleId":1986,"userId":3000,"content":"已经收到不少优秀的简历啦～～～ 欢迎小伙伴继续踊跃投递哦～～","createdAt":1523501980550},{"id":8831,"originId":"5acee860a7d228c16b986a11","articleId":1986,"userId":2532,"content":"哦吼吼，实习生要不要的呢","createdAt":1523509344866},{"id":8832,"originId":"5acdbd4596f344940fbbaf15","articleId":1989,"userId":3030,"content":"😂拉勾真的会有回复嘛\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1523432773975},{"id":8833,"originId":"5a98c3632ffb8598445aea60","articleId":1990,"userId":3031,"content":"邮件过来的，请附上相关项目的github地址，这样可以尽可能的快速增加彼此的了解，也方便我们做进一步的沟通。因为普通的简历看的实在太多了，不能一一回复，抱歉。","createdAt":1519960931234},{"id":8834,"originId":"5aa63fa1e7b166bb7b9ec987","articleId":1990,"userId":3031,"content":"人工置顶。。。","createdAt":1520844705535},{"id":8835,"originId":"5aa771dee7b166bb7b9ec9db","articleId":1990,"userId":3032,"content":"您好，是否考虑远程？","createdAt":1520923102307},{"id":8836,"originId":"5aab8fe2ce4a27f86752719c","articleId":1990,"userId":3031,"content":"[@cheunghy](/user/cheunghy) 不考虑远程。。。","createdAt":1521192930450},{"id":8837,"originId":"5acdaedec6bcbf12d3fb59fd","articleId":1990,"userId":3031,"content":"人工置顶","createdAt":1523429086310},{"id":8838,"originId":"5ac9ab07e34737560fccaaeb","articleId":1992,"userId":19,"content":"怎么还没有封号啊\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1523165959389},{"id":8839,"originId":"5acac1ace34737560fccab5b","articleId":1992,"userId":1187,"content":"测试帖请发送到测试主题下 ","createdAt":1523237292491},{"id":8840,"originId":"5ac9cd0896f344940fbbae49","articleId":1994,"userId":356,"content":"你要被封号了\n\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1523174664478},{"id":8841,"originId":"5aa09e127811af0f65222229","articleId":2001,"userId":3036,"content":"『前端工程师』岗位要求： \r\n工作职责 \r\n\r\n1、参与小红书新业务小程序的产品设计, 架构设计以及开发工作; \r\n\r\n2、负责将创意变成现实, 并确保具有顺畅的用户体验; \r\n\r\n3、对产品负责, 透过技术打磨出更好的产品给用户. \r\n\r\n任职资格 \r\n\r\n1、精通 JavaScript, CSS 等前端技术, 统招本科学历及以上; \r\n\r\n2、有独立开发高品质移动前端的能力, 有小程序开发经验者优先; \r\n\r\n3、学习能力强, 积极主动, 强烈的责任心, 良好的沟通协调能力, 和解决问题的能力; \r\n\r\n4、对前端各领域的知识有基本涉猎 (体验, 兼容, 性能, 安全, 开发效率); \r\n\r\n5、至少有 3 年以上工作经验, 知名互联网公司优先.","createdAt":1520475666770},{"id":8842,"originId":"5aa09e7819b2e3db18959bb0","articleId":2001,"userId":3036,"content":"📮感兴趣可以直接发简历到我邮箱： hpu@xiaohongshu.com \r\n你发简历后能得到的待遇是：进度会第一时间通知到你，成败都来个痛快。","createdAt":1520475768017},{"id":8843,"originId":"5aa09ef3ce4a27f867526ec2","articleId":2001,"userId":3036,"content":"『全栈工程师』要求：\r\n\r\n工作职责：\r\n1. 负责创新型项⽬的全栈设计与开发\r\n2. 参与产品设计、⾃动化测试和上线运维\r\n3. 负责相关技术的基础设施搭建，提⾼⼯程效率和⼯程质量\r\n任职资格：\r\n任职资格\r\n1. 熟悉 JavaScript/Python/Ruby/Java 中的任何⼀门语⾔，有 Node.js 开发经验者优先;\r\n2. 了解 Web 相关的标准和最佳实践，有⼩程序开发经验者优先;\r\n3. 扎实的计算机科学基础知识，熟悉操作系统，数据库、常见数据结构和算法，以及软件设计实践;\r\n4. 能独⽴分析问题, 善于研究业务, 分析产品, 有 data sense;\r\n5. 为⼈踏实, 善良正直, 热爱学习技术, 长期关注技术的发展趋势;\r\n6. github 与 stackoverflow 贡献者优先，对开源社区有贡献者优先","createdAt":1520475891339},{"id":8844,"originId":"5aa0c5ad19b2e3db18959bce","articleId":2001,"userId":2673,"content":"[@yesky12](/user/yesky12) 问一下大概简历处理需要多长时间，前两天投了一个校招岗位，但是到现在还没有回复，或者能帮我查查进度吗","createdAt":1520485805994},{"id":8845,"originId":"5aa0d0d4ce4a27f867526ee0","articleId":2001,"userId":3036,"content":"[@DCbryant](/user/DCbryant) 因为3月份是整个公司的招人季，所以人事会非常非常的忙，所以这个无法给出进度了：） ","createdAt":1520488660317},{"id":8846,"originId":"5aa0d14419b2e3db18959bd7","articleId":2001,"userId":3036,"content":"收到的大前端的简历会同步在这里：\r\n\r\n1️⃣收到『前端』工程师简历\r\n时间：2018年3月8日(周四) 12:35\r\n简历技能描述：3年工作经验，做为前端负责人搭建了公司的前端框架(组件库/npm私服/公共样式库/基于Node.js的网关)。对JavaScript技术非常有热情，日常技术搜索切到了英文环境","createdAt":1520488772740},{"id":8847,"originId":"5aa0d2e719b2e3db18959bda","articleId":2001,"userId":152,"content":"学历是必须要求吗？专科学历，一年半Node想问一下有没有资格投？","createdAt":1520489191834},{"id":8848,"originId":"5aa0d7a77811af0f65222253","articleId":2001,"userId":3036,"content":"[@Gitforxuyang](/user/Gitforxuyang) 简历发过来看看吧","createdAt":1520490407337},{"id":8849,"originId":"5aa0e1b119b2e3db18959bec","articleId":2001,"userId":2673,"content":"[@yesky12](/user/yesky12) 好的，我知道了，那我继续耐心的等待吧","createdAt":1520492977238},{"id":8850,"originId":"5aa0f396f5dfc27d7ad98605","articleId":2001,"userId":3037,"content":"ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc<br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1520497558670},{"id":8851,"originId":"5aa0f56df5dfc27d7ad9860b","articleId":2001,"userId":152,"content":"[@yesky12](/user/yesky12) 已投","createdAt":1520498029281},{"id":8852,"originId":"5aa0fb6bf5dfc27d7ad9860f","articleId":2001,"userId":3036,"content":"[@Gitforxuyang](/user/Gitforxuyang) 已收","createdAt":1520499563886},{"id":8853,"originId":"5aa0fda619b2e3db18959bf4","articleId":2001,"userId":152,"content":"[@yesky12](/user/yesky12) 已悲剧  QAQ","createdAt":1520500134201},{"id":8854,"originId":"5aa1046cf5dfc27d7ad98615","articleId":2001,"userId":3036,"content":"[@Gitforxuyang](/user/Gitforxuyang) 网上多投投，运气好多多：）","createdAt":1520501868104},{"id":8855,"originId":"5aa14544ce4a27f867526f12","articleId":2001,"userId":152,"content":"[@yesky12](/user/yesky12) 谢谢","createdAt":1520518468164},{"id":8856,"originId":"5aa1596ace4a27f867526f1c","articleId":2001,"userId":19,"content":"攒一个，混脸熟\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1520523626331},{"id":8857,"originId":"5aa1c51919b2e3db18959c14","articleId":2001,"userId":3036,"content":"[@luanxuechao](/user/luanxuechao) 已熟","createdAt":1520551193636},{"id":8858,"originId":"5aaa1aafce4a27f867527120","articleId":2001,"userId":2673,"content":"[@yesky12](/user/yesky12) 想问一下校招结束没有，我才发现之前小红书发给我的内推邮件被Gmail当做垃圾邮件了，有点尴尬","createdAt":1521097391123},{"id":8859,"originId":"5ab0553de7b166bb7b9ecc20","articleId":2001,"userId":2524,"content":"你们也用aws?不觉得这个玩意ui很坑吗？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1521505597276},{"id":8860,"originId":"5ab36b4ce7b166bb7b9ecd1f","articleId":2001,"userId":103,"content":"网上对小红书的风评不太好呀","createdAt":1521707852192},{"id":8861,"originId":"5ab47719f5dfc27d7ad98ae3","articleId":2001,"userId":16,"content":"node后台招不","createdAt":1521776409975},{"id":8862,"originId":"5ac1ca780ab0448f0fe3f7c2","articleId":2001,"userId":3036,"content":"[@hpgt](/user/hpgt) 电商都免不了风言风语啊，淘宝也一直被评为假货基地，也阻挡不了他魔鬼的步伐啊","createdAt":1522649720359},{"id":8863,"originId":"5ac1ca99e34737560fcca969","articleId":2001,"userId":3036,"content":"[@AviorAlong](/user/AviorAlong) 3月份的内推结束了","createdAt":1522649753980},{"id":8864,"originId":"5ac1cdca0ab0448f0fe3f7c9","articleId":2001,"userId":2499,"content":"应届生需要吗\r\n","createdAt":1522650570668},{"id":8865,"originId":"5ac2f8a896f344940fbbaca8","articleId":2001,"userId":3036,"content":"[@TanYiBing](/user/TanYiBing) 应届生没名额了","createdAt":1522727080831},{"id":8866,"originId":"5ac81d02e34737560fccaa81","articleId":2001,"userId":2133,"content":"前端还有坑吗","createdAt":1523064066043},{"id":8867,"originId":"60969f644d20cb55bd691608","articleId":2002,"userId":98,"content":"当然是趁还没入行赶紧转行，哈哈哈哈哈哈哈哈","createdAt":1620483940396},{"id":8868,"originId":"6097aaa34d20cb5f63691845","articleId":2002,"userId":9,"content":"emmm，不知道，前端小白白报道，","createdAt":1620552355700},{"id":8869,"originId":"6097aab44d20cbb306691847","articleId":2002,"userId":9,"content":"[@zengming00](/user/zengming00) 哈哈哈","createdAt":1620552372955},{"id":8870,"originId":"6098969a4d20cbf3f7691aee","articleId":2002,"userId":89,"content":"先入坑，在谈发展吧。","createdAt":1620612762775},{"id":8871,"originId":"6098dd8d4d20cbdf96691e38","articleId":2002,"userId":4,"content":"zengming00。。。。","createdAt":1620630925923},{"id":8872,"originId":"609503684d20cb8add690d32","articleId":2005,"userId":419,"content":"因为进入事件循环也要花费时间，所以进入的时候有可能已经过了setTimeout的执行时间，所以会先打settimeout的回调，但也可能没有过，所以先打setImmediate\r\n\r\nsetTimeout1\r\nsetImmediate1\r\nsetImmediate2\r\nsetTimeout2\r\n\r\n上面这种情况看起来是timers阶段执行了一个，然后进入check阶段执行setImmediate，然后下一轮执行第二个setTimeout，但是不明白为啥会这样","createdAt":1620378472874},{"id":8873,"originId":"60954dfe4d20cb1933690f38","articleId":2005,"userId":109,"content":"自讨苦吃","createdAt":1620397566132},{"id":8874,"originId":"609149c94d20cb1d26690291","articleId":2007,"userId":701,"content":"自己顶,求大佬回答","createdAt":1620134345662},{"id":8875,"originId":"6090e3cc4d20cb47076900fc","articleId":2008,"userId":3041,"content":"临时链接到安装全局的npm包的目录下，就可以执行了,执行npx命令的时候有提示你可以仔细看一哈。","createdAt":1620108236126},{"id":8876,"originId":"608fa8b34d20cb5bb468febf","articleId":2009,"userId":170,"content":"个体户就可以，一个个体户可以认证两个服务号，小程序直接复用服务号就可以直接认证","createdAt":1620027571041},{"id":8877,"originId":"608a6d5f4d20cb4afb68f7b9","articleId":2010,"userId":119,"content":"把下面这行代码在浏览器控制台中执行，也没用：\r\nlocalStorage.debug = '*';","createdAt":1619684703912},{"id":8878,"originId":"608f5f4d4d20cb4c3468fe18","articleId":2010,"userId":3044,"content":"监听 connect 事件试试。","createdAt":1620008781232},{"id":8879,"originId":"6088a5694d20cbdc3d68f1e8","articleId":2012,"userId":703,"content":"每次调用main后，都返回一个新的 inner。 \r\nreturn function ... 其实就是 return (new Function('...'));\r\n另外，内存中也并不是简单的 “多份 inner 函数”，而是多份包含了inner()上下文的闭包。","createdAt":1619567977488},{"id":8880,"originId":"6088ba324d20cbad4868f222","articleId":2012,"userId":128,"content":"[@myy](/user/myy) 多份上下文闭包肯定是必要的，但是感觉多份 inner 函数有点不舒服（不是对结果的怀疑，还是对设计的不解）  \r\n比如，如果“内存有多份 inner 函数”，那\r\n```js\r\nclass A{\r\n  inner(){}\r\n}\r\n```\r\n就会比\r\n```js\r\nfunction A (){\r\n  return {\r\n    inner(){}\r\n  }\r\n}\r\n```\r\n省内存了（有多个 A 实例时）。  \r\n但第二种写法，不用关心 this 的指向问题，反而比“先进”的 class 关键字更舒服。","createdAt":1619573298161},{"id":8881,"originId":"6088bb924d20cb4c0468f231","articleId":2012,"userId":128,"content":"[@myy](/user/myy) 因为像字符串，比如\r\n```js\r\nlet a = 'hello'\r\nlet b = 'hello'\r\n```\r\n这种情况，内存中就只有一个 hello 字符串  \r\n函数的话，如果有这种优化，就舒服了","createdAt":1619573650394},{"id":8882,"originId":"6088c29e4d20cb940e68f255","articleId":2012,"userId":703,"content":"class A 多个实例虽然共用了 inner()，但是A本身同样是多份啊。。也没省啥内存。","createdAt":1619575454430},{"id":8883,"originId":"608908914d20cbf9b168f3ba","articleId":2012,"userId":128,"content":"[@myy](/user/myy) 多实例，共用一个 \\_\\_proto\\_\\_，也就是 A.prototype\r\n``` js\r\nclass A {\r\n  go(){ console.log(1) }\r\n}\r\nconst x = new A()\r\nconst y = new A()\r\nx.go() // 1\r\ny.go() // 1\r\nconst oldGo = x.go\r\nconsole.log(oldGo == A.prototype.go)\r\nA.prototype.go = function (){ console.log(2) }\r\nconst z = new A()\r\nz.go() // 2\r\nx.go() // 2\r\ny.go() // 2\r\nconst newGo = x.go\r\nconsole.log(newGo == A.prototype.go)\r\nconsole.log(newGo != oldGo)\r\n```\r\n","createdAt":1619593361593},{"id":8884,"originId":"608951734d20cbe6f068f543","articleId":2012,"userId":11,"content":"会返回多个函数的闭包对象\r\n![image.png](//static.cnodejs.org/FgfqSrg7SDPc_GgbP1IFLrnvs-Xj)\r\n测试代码如下:\r\n\r\n```js\r\nfunction main() {\r\n  return function inner() { }\r\n}\r\n\r\nconst array = [];\r\n\r\nfor (let i = 0; i >= 0; i++) {\r\n  const fn = main();\r\n  array.push(fn);\r\n}\r\n```","createdAt":1619612019785},{"id":8885,"originId":"6089527c4d20cb4b5b68f54a","articleId":2012,"userId":11,"content":"相比之下，你的第二种方式只会增加引用本身，确实会更节省内存，实际上这也是单例模式的优势之一\r\n\r\n![image.png](//static.cnodejs.org/FmF6emEYsgTfATtbJ4i2KFIZOjEN)\r\n\r\n测试代码：\r\n\r\n```js\r\nclass A {\r\n  go() { console.log(1) }\r\n}\r\nconst x = new A()\r\n\r\nconst array = [];\r\n\r\nfor (let i = 0; i >= 0; i++) {\r\n  array.push(x.go);\r\n}\r\n```","createdAt":1619612284363},{"id":8886,"originId":"608a0a724d20cb79c468f5eb","articleId":2012,"userId":128,"content":"[@hyj1991](/user/hyj1991) 你用的什么工具啊老兄，看起来很棒的样子  ","createdAt":1619659378788},{"id":8887,"originId":"608a0c344d20cb65ad68f5f1","articleId":2012,"userId":128,"content":"[@hyj1991](/user/hyj1991) class 的形式虽然没有闭包对象，但有实例啊  \r\n打印 go 的话，看不到实例占用的内存，但在上下文方面，两种形式应该差别不大  \r\n\r\n还有个问题要请教一下（因为上面的没看懂……）  \r\n是不是说 ```function main(){ return function inner(){} }``` 这种形式，只增加闭包，而不重新创建 inner？","createdAt":1619659828348},{"id":8888,"originId":"608a0ea64d20cb08b468f60e","articleId":2012,"userId":11,"content":"[@daGaiGuanYu](/user/daGaiGuanYu) \r\n\r\n工具是这个：https://github.com/hyj1991/easy-monitor\r\n\r\n截图是我还在开发中的堆快照本地分析功能，拿来试了下你的这个问题。\r\n\r\n> 是不是说 function main(){ return function inner(){} } 这种形式，只增加闭包，而不重新创建 inner？\r\n\r\n是的，你看上面两个测试都是创建了100w次函数，所以两者的引用大小（object elements）是一样的 9.95MB，但是前者会额外多100w个闭包对象，导致内存占用大大超过后者","createdAt":1619660454371},{"id":8889,"originId":"608a1e084d20cb850668f6b0","articleId":2012,"userId":128,"content":"[@hyj1991](/user/hyj1991) 感谢~\r\n但是，new A() 也会创建同样数量的实例的，内存占用应该也很大~","createdAt":1619664392766},{"id":8890,"originId":"608927064d20cb7d8f68f47b","articleId":2013,"userId":98,"content":"我的linux知识也不多，以我的经验看，一种方法是node本身以root身份运行（很危险），或者在命令里切成root去做比如sudo xxxx，可能会遇到输入密码的问题，还有一种方法是把运行node的用户加入到要执行的命令的用户组并赋予可执行权限","createdAt":1619601158588},{"id":8891,"originId":"60892d574d20cbdfae68f4aa","articleId":2013,"userId":3046,"content":"[@zengming00](/user/zengming00) 不好意思，我没有说明白。我是再windows上运行的。windows命令是否了解一些","createdAt":1619602775434},{"id":8892,"originId":"6089430e4d20cbaec268f4fc","articleId":2013,"userId":3047,"content":"直接右键以管理员身份运行终端程序，之后执行的所有cmd命令就都是以管理员身份执行的了","createdAt":1619608334859},{"id":8893,"originId":"6087cb584d20cb1a2168f04f","articleId":2014,"userId":128,"content":"``` js\r\nfunction isString(str) {\r\n  return str instanceof String || str != null && str != undefined &&  str.constructor == String\r\n}\r\n```\r\n这样可以吗，老哥们","createdAt":1619512152128},{"id":8894,"originId":"6087daad4d20cb45eb68f0a1","articleId":2014,"userId":166,"content":"typeof str === 'string' 就可以了，string 是原始类型，你用 instanceOf String 没用的","createdAt":1619516077944},{"id":8895,"originId":"608828b04d20cbbf5b68f1af","articleId":2014,"userId":128,"content":"[@rrbe](/user/rrbe) 试试 ```typeof new String('str')```","createdAt":1619536048611},{"id":8896,"originId":"6088a6964d20cb124768f1ee","articleId":2014,"userId":703,"content":"用 Object.prototype.toString.call(str) == '[object String]' \r\n\r\n这个办法不仅可以用于 string，对于其他的任意类型都可以准确判断。","createdAt":1619568278171},{"id":8897,"originId":"6088b88d4d20cb459068f21a","articleId":2014,"userId":128,"content":"[@myy](/user/myy) 这个不戳~","createdAt":1619572877225},{"id":8898,"originId":"6088c43d4d20cb65a268f273","articleId":2014,"userId":145,"content":"我挺好奇  new String('str') 和 'str' 是同一个东西吗。。。","createdAt":1619575869217},{"id":8899,"originId":"6088d5704d20cb42a068f314","articleId":2014,"userId":2229,"content":"![image.png](//static.cnodejs.org/FkulLb-UcnaS0B-PUJ5bd9WYZVSD)\r\n\r\nunderscore里有的，node库里也有的。","createdAt":1619580272494},{"id":8900,"originId":"608907c34d20cb267568f3ad","articleId":2014,"userId":128,"content":"[@zhangxh1023](/user/zhangxh1023) 不是\r\n```js\r\ntypeof('str') // string\r\ntypeof(new String('str')) // object\r\n```","createdAt":1619593155584},{"id":8901,"originId":"5f4f679031fc7a1d8ad659b7","articleId":2015,"userId":21,"content":"一般来说heapTotal不持续上涨就问题不大，至少不太可能是你的代码问题。\r\n你要真的不放心可以使用[v8.writeHeapSnapshot([filename])](https://nodejs.org/dist/latest-v12.x/docs/api/v8.html#v8_v8_writeheapsnapshot_filename)打印快照对比看看或者使用[easy-monitor3](https://github.com/hyj1991/easy-monitor)或alinode监控看看，是不是存在变量没有释放或持续增加","createdAt":1599039376606},{"id":8902,"originId":"5f4f8773d22a6b1d622c77a6","articleId":2015,"userId":157,"content":"嗯，谢谢！快照也用了，没发现问题。就是很郁闷rss消耗在哪里了。我持续关注下","createdAt":1599047539518},{"id":8903,"originId":"5f61d506c1c67a7dd9afedaa","articleId":2015,"userId":3048,"content":"请问解决了没，跟你遇到了相同的问题，已经没有什么排查思路了 ","createdAt":1600247046554},{"id":8904,"originId":"6088e33d4d20cb7a2f68f33e","articleId":2015,"userId":157,"content":"[@liuhui666](/user/liuhui666) 后来游戏凉了，没管了。没查出来","createdAt":1619583805809},{"id":8905,"originId":"6088f0d64d20cb1c7868f353","articleId":2015,"userId":97,"content":"目测这里的 heapTotal 应该是受 GC 管理的空间，而 RSS 应该是整个进程占用的空间","createdAt":1619587286071},{"id":8906,"originId":"608792844d20cb514568eece","articleId":2017,"userId":89,"content":"pv 10万以下随便设计，够的","createdAt":1619497604015},{"id":8907,"originId":"6085452a4d20cb0b0b68e91c","articleId":2019,"userId":98,"content":"当然可以，linux设备和文件是一样的，在/dev下面就能找到你的设备文件\r\n以前我做过控制开关的东西，就是往一个文件写1就开，写0就关","createdAt":1619346730023},{"id":8908,"originId":"6082ebe74d20cb26a168e538","articleId":2020,"userId":3053,"content":"这个是你子网间没有配通路由吧，跟程序没有关系。","createdAt":1619192807462},{"id":8909,"originId":"6081292e4d20cbd11668de4a","articleId":2021,"userId":3055,"content":"上node社区","createdAt":1619077422773},{"id":8910,"originId":"60812c514d20cb705268de8b","articleId":2021,"userId":3054,"content":"我已经注册登陆了用github 账号登陆的怎么复制了那些开放接口没有用呀\r\n","createdAt":1619078225723},{"id":8911,"originId":"60815f4a4d20cb096c68e129","articleId":2021,"userId":3054,"content":"已解决","createdAt":1619091274355},{"id":8912,"originId":"60485d8b4655ea216121ac4b","articleId":2022,"userId":117,"content":"[https://sequelize.org/master/variable/index.html#static-variable-Op](https://sequelize.org/master/variable/index.html#static-variable-Op)\r\n```js\r\nProject.findAll({\r\n  where: {\r\n    id: {\r\n      [Op.and]: {a: 5},           // AND (a = 5)\r\n      [Op.or]: [{a: 5}, {a: 6}],  // (a = 5 OR a = 6)\r\n      [Op.gt]: 6,                // id > 6\r\n      [Op.gte]: 6,               // id >= 6\r\n      [Op.lt]: 10,               // id < 10\r\n      [Op.lte]: 10,              // id <= 10\r\n      [Op.ne]: 20,               // id != 20\r\n      [Op.between]: [6, 10],     // BETWEEN 6 AND 10\r\n      [Op.notBetween]: [11, 15], // NOT BETWEEN 11 AND 15\r\n      [Op.in]: [1, 2],           // IN [1, 2]\r\n      [Op.notIn]: [1, 2],        // NOT IN [1, 2]\r\n      [Op.like]: '%hat',         // LIKE '%hat'\r\n      [Op.notLike]: '%hat',       // NOT LIKE '%hat'\r\n      [Op.iLike]: '%hat',         // ILIKE '%hat' (case insensitive)  (PG only)\r\n      [Op.notILike]: '%hat',      // NOT ILIKE '%hat'  (PG only)\r\n      [Op.overlap]: [1, 2],       // && [1, 2] (PG array overlap operator)\r\n      [Op.contains]: [1, 2],      // @> [1, 2] (PG array contains operator)\r\n      [Op.contained]: [1, 2],     // <@ [1, 2] (PG array contained by operator)\r\n      [Op.any]: [2,3]            // ANY ARRAY[2, 3]::INTEGER (PG only)\r\n    },\r\n    status: {\r\n      [Op.not]: false           // status NOT FALSE\r\n    }\r\n  }\r\n})\r\n```","createdAt":1615355275378},{"id":8913,"originId":"6048e7034655ea504521adcd","articleId":2022,"userId":3056,"content":"[@chenkai0520](/user/chenkai0520)  你好，这些操作符我知道怎么用 ，现在问题是 是做关联查询。但是两个表之间没有外键关联，我使用文档里边 里边的关联模型，也无法完成这个查询","createdAt":1615390467648},{"id":8914,"originId":"60496e254655ea310321adf5","articleId":2022,"userId":166,"content":"[@akaili](/user/akaili) [参考文档](https://sequelize.org/master/manual/assocs.html) 你需要让 sequelize 知道这两个表之间用哪个 field 做关联，关联不一定要创建外键(设置 constraint: false) ","createdAt":1615425061013},{"id":8915,"originId":"608147704d20cb3b7268dff8","articleId":2022,"userId":160,"content":"你直接写个sql语句啊","createdAt":1619085168138},{"id":8916,"originId":"607ff5144d20cb2b2668da4f","articleId":2023,"userId":89,"content":"我记得有doracms，还有很多基于jamstack的cms","createdAt":1618998548265},{"id":8917,"originId":"607e8a2d4d20cbc17368d6a0","articleId":2024,"userId":98,"content":"盲猜WSE_LIST ","createdAt":1618905645729},{"id":8918,"originId":"607fbeb24d20cb234b68d943","articleId":2024,"userId":3057,"content":"[@zengming00](/user/zengming00) page释放了browser 没释放","createdAt":1618984626844},{"id":8919,"originId":"604eb8b14655eaf48c21b6b5","articleId":2026,"userId":160,"content":"这就是并发扛不住了，加机器资源吧","createdAt":1615771825794},{"id":8920,"originId":"604ebf844655ea770a21b6d3","articleId":2026,"userId":111,"content":"不经代理，直接请求nodejs 会数据错乱吗？","createdAt":1615773572007},{"id":8921,"originId":"604ec2dd4655ea271d21b6e9","articleId":2026,"userId":570,"content":"打好日志，复现一下应该就知道了，一般不是node的问题","createdAt":1615774429021},{"id":8922,"originId":"604ecb674655ea1aa521b718","articleId":2026,"userId":98,"content":"你这点并发一台机器足够的，看你的描述“同样的token，后端返回的数据偶尔出现错乱”，我怀疑是全局变量或者缓存","createdAt":1615776615775},{"id":8923,"originId":"604f08564655ea002f21b843","articleId":2026,"userId":2,"content":"可能是处理微信登陆的返回的问题，在并发较高的情况下，回掉处理接口处理了不是当前用户的回掉，导致返回了错误的token。","createdAt":1615792214040},{"id":8924,"originId":"604f0dcd4655eae3e421b87a","articleId":2026,"userId":33,"content":"同样的token，接下来就是追踪解析出来的userinfo是不是一样，数据库的数据是不是一样，一点一点追踪呗","createdAt":1615793613476},{"id":8925,"originId":"604f28d54655ea57f621b8dd","articleId":2026,"userId":3060,"content":"还是代码有漏洞，导致数据获取串了。\r\n看看是不是异步并发请求处理不对，导致请求微信之后获取的数据与请求前顺序不匹配？","createdAt":1615800533957},{"id":8926,"originId":"604f2a4f4655eaaec721b8e8","articleId":2026,"userId":1947,"content":"感觉应该是返回错误token的问题","createdAt":1615800911179},{"id":8927,"originId":"6058b5d2dac54241e8e28e70","articleId":2026,"userId":3059,"content":"[@dingyuanwu](/user/dingyuanwu)  那么应该如何避免这个问题呢","createdAt":1616426450019},{"id":8928,"originId":"606294f32357dd4a36f9dd11","articleId":2026,"userId":2,"content":"[@759729757](/user/759729757) 可以用同步锁解决","createdAt":1617073395154},{"id":8929,"originId":"6063d3aa2357dd4116f9dfaf","articleId":2026,"userId":113,"content":"[@759729757](/user/759729757) \r\n通过这几行代码看不出来问题。可以提供一个思路进行排查\r\n1、异步编程要多考虑“代码重入”的问题。比如，同样一段代码，当await执行某些io时，其他用户环境的io先执行完，会重入到这段代码中。\r\n2、因为“代码会重入”，所以变量的声明和使用要多注意。多建议用局部变量或者ctx环境变量，如果一定要用类似全局状态的变量，就要考虑重入的影响","createdAt":1617154986396},{"id":8930,"originId":"607e86904d20cb31f968d683","articleId":2026,"userId":3061,"content":"[@zhennann](/user/zhennann) 这个问题，我也遇到了，感谢提点","createdAt":1618904720846},{"id":8931,"originId":"6076c19a4d20cbe3d968c305","articleId":2027,"userId":117,"content":"官网有[https://cn.vuejs.org/v2/guide/components-edge-cases.html](https://cn.vuejs.org/v2/guide/components-edge-cases.html)","createdAt":1618395546079},{"id":8932,"originId":"6077a4d44d20cb0f1e68c506","articleId":2027,"userId":247,"content":"可能你需要的是这个吧\r\n\r\n```javascript\r\nconst state = Vue.observable({ count: 0 })\r\n\r\nconst Demo = {\r\n  render(h) {\r\n    return h('button', {\r\n      on: { click: () => { state.count++ }}\r\n    }, `count is: ${state.count}`)\r\n  }\r\n}\r\n```\r\n\r\nhttps://cn.vuejs.org/v2/api/#Vue-observable","createdAt":1618453716456},{"id":8933,"originId":"607cd59d4d20cba98668d08b","articleId":2027,"userId":1370,"content":"v3 的 [组合式api](https://v3.cn.vuejs.org/guide/composition-api-introduction.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E5%90%88%E5%BC%8F-api) 可以轻易做到。\r\n另外我写过一个 [electron icp 封装（基于vue computed）](https://shenzilong.cn/other/electron%20icp%20%E5%B0%81%E8%A3%85%EF%BC%88%E5%9F%BA%E4%BA%8Evue%20computed%EF%BC%89.html) 可以让渲染进程与主线程共享同一个模块使用该方法导出的变量，都可以写值过去和自动监听更新","createdAt":1618793885951},{"id":8934,"originId":"607e2ba94d20cb7e6568d4d1","articleId":2027,"userId":296,"content":"[@MeetTheBest](/user/MeetTheBest) \r\n哇，这个看起来不错啊。感谢大佬。","createdAt":1618881449173},{"id":8935,"originId":"6075637d4d20cbb24e68bd72","articleId":2028,"userId":21,"content":"被墙好多天了都\r\n","createdAt":1618305917461},{"id":8936,"originId":"60758c234d20cb9e4b68be98","articleId":2028,"userId":3063,"content":"刚做的仿站 http://kou.bi","createdAt":1618316323569},{"id":8937,"originId":"607a613b4d20cbc2cb68ce75","articleId":2028,"userId":111,"content":"baidu搜索 v2ex.com  提示\r\n抱歉没有找到与“v2ex.com”相关的网页\r\n百度真是一个神奇的网站","createdAt":1618633019549},{"id":8938,"originId":"607cf8b04d20cb294a68d171","articleId":2028,"userId":167,"content":"那可以随便聊了...","createdAt":1618802864436},{"id":8939,"originId":"607575754d20cbdbb068bdbe","articleId":2029,"userId":109,"content":"https://www.v2ex.com/t/752477\r\nhttps://www.v2ex.com/t/680444\r\n","createdAt":1618310517376},{"id":8940,"originId":"607578674d20cb670b68bdd9","articleId":2029,"userId":33,"content":"东南亚电商啊，，发展很快，","createdAt":1618311271452},{"id":8941,"originId":"6075787f4d20cb6ef468bdde","articleId":2029,"userId":2,"content":"[@waitingsong](/user/waitingsong) V站不是都不能访问了吗？\r\n","createdAt":1618311295780},{"id":8942,"originId":"6073f6624d20cb5b0868b72a","articleId":2030,"userId":98,"content":"现在谁还用var","createdAt":1618212450434},{"id":8943,"originId":"6074f0a64d20cbaa5b68b9e5","articleId":2030,"userId":570,"content":"尽量用const","createdAt":1618276518557},{"id":8944,"originId":"60750c7b4d20cb6ffd68baeb","articleId":2030,"userId":3065,"content":"var 是什么？\r\n你说的 var 是 Vue Angular React 吗？","createdAt":1618283643911},{"id":8945,"originId":"6074f3224d20cb455768b9f2","articleId":2031,"userId":358,"content":"egg-development","createdAt":1618277154080},{"id":8946,"originId":"5837ea2aba57ffba06c2499d","articleId":2032,"userId":640,"content":"找你的ISP，给他们打电话，这里不是全球客服工单系统（v2ex）","createdAt":1480059434410},{"id":8947,"originId":"58380ee8ba57ffba06c249b4","articleId":2032,"userId":320,"content":"用全局翻\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1480068840178},{"id":8948,"originId":"583a3ee8ba57ffba06c24a0a","articleId":2032,"userId":3067,"content":"把*.googlevideo.com也放进代理名单，类似的，同个域名下的其他资源域名可能不一样，分别加进代理\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1480212200975},{"id":8949,"originId":"583b7e126add41f206000cf0","articleId":2032,"userId":3066,"content":"我用的是老刀，的翻墙hosts，你们说的好像不匹配撒","createdAt":1480293906362},{"id":8950,"originId":"583bcd1cba57ffba06c24a47","articleId":2032,"userId":3068,"content":"[@qujinxiong](/user/qujinxiong)\n用蓝灯啊<br/><br/><a>来自优雅的vue-app</a>","createdAt":1480314140794},{"id":8951,"originId":"583bdaeeba57ffba06c24a4f","articleId":2032,"userId":3069,"content":"嗯，用hosts扶墙是不能看YouTube视频的，DNS污染太严重","createdAt":1480317678069},{"id":8952,"originId":"607284644d20cb2a2668b3c4","articleId":2032,"userId":165,"content":"[ExpressVPN-大陆翻墙首选速度快稳定抗封锁的优质VPN](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 SSR，V2ray 代理，网络是CN2 GIA，连接速度快，并且官方保证IP可用，提供5个IP地址，支持支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)","createdAt":1618117732298},{"id":8953,"originId":"6073fa214d20cb1e2068b775","articleId":2032,"userId":185,"content":"可能是IP被油管封了吧\r\n\r\n## 你需要能够解锁国外流媒体的[翻墙 软件](https://qiangwaikan.com/gvc/)\r\n\r\n## V PN推荐一：[ExpressV PN](https://qiangwaikan.com/express-review/)\r\n全球160+服务器所在地 / 无限流量 / 私有Lightway协议，包括openV PN / 一键连接 / 同时5台设备连接 / 256-bit AES加密 / 支付宝支付 / 支持路由器连接 / 完全IP隐藏 / 无日志策略 / 支持众多设备 / 30天无条件退款 / Split tunneling技术 + 浏览器插件，同时访问内外网 / 推荐原因：速度快带宽大\r\n\r\n## V PN推荐二：[Panda V PN](https://qiangwaikan.com/panda-review/)\r\n中国研发团队 / 价格便宜 / 支持Onion over / 一键连接 / 同时3台设备 / 支持P2P / 双重加密 / PayPal支付 / 支持路由器连接 / CyberSec安全技术 / 专业客户端 / 2年款最大优惠 / 7天退款保证 / 推荐原因：性价比超高\r\n\r\n## V PN推荐三：[VyprV PN](https://qiangwaikan.com/vypr-review/)\r\n70+自有服务器所在地，200,000+IP地址 / 无限流量 / 多协议，独家混淆协议 / 一键连接 / 同时5台设备 / 支持P2P / 变色龙加密 / 支付宝支付 / 支持路由器连接 / NAT安全机制 / DNS加密 / 全终端覆盖 / 2年套餐最大优惠 / 30天无条件退款 / 按程序控制网络技术，同时访问内外网 / 推荐原因：连接相对最稳定\r\n\r\n### »点击这里：查看更多有关[中国翻 墙V PN](https://qiangwaikan.com/bvc/)的详细测评。","createdAt":1618213409994},{"id":8954,"originId":"596ebc1727c8372819db0c48","articleId":2034,"userId":11,"content":"所以又要用什么资料都查不到的百度了么","createdAt":1500429335683},{"id":8955,"originId":"596ebc7327c8372819db0c4b","articleId":2034,"userId":89,"content":"开倒车估计是躲不过去了，我也只能说这些了","createdAt":1500429427183},{"id":8956,"originId":"596ebd1527c8372819db0c50","articleId":2034,"userId":98,"content":"个人不能用了，企业还可以用啊，所以共享企业VPN的刚性需求就有了，创业机会来了","createdAt":1500429589791},{"id":8957,"originId":"596ec08b8f05de0819fdb30c","articleId":2034,"userId":1835,"content":"不清楚。不过最近用的几个vpn都挂了。\r\n\r\n如果是真的，那就是开倒车无疑","createdAt":1500430475041},{"id":8958,"originId":"596ec30ddb0b6aec18a2867c","articleId":2034,"userId":516,"content":"哎，我大green就这么走了~","createdAt":1500431117631},{"id":8959,"originId":"596ec54327c8372819db0c5c","articleId":2034,"userId":3071,"content":"我所渡过最美好的时光是10至15年，虽然房价开始上涨，股票市场动荡，但是国家感觉还是向前进的","createdAt":1500431683698},{"id":8960,"originId":"596ec90b27c8372819db0c62","articleId":2034,"userId":3072,"content":"要回到天朝的生活吗？bi guan suo g？","createdAt":1500432651381},{"id":8961,"originId":"596ecd938f05de0819fdb317","articleId":2034,"userId":535,"content":"大家就别抱怨了，太敏感，我主要就是想知道这个政策是不是真的。","createdAt":1500433811935},{"id":8962,"originId":"596ed99d27c8372819db0c71","articleId":2034,"userId":3073,"content":"什么时候把shadowsocks给干掉","createdAt":1500436893620},{"id":8963,"originId":"596ef546db0b6aec18a2868e","articleId":2034,"userId":755,"content":"修改hosts途径应该不受影响吧?","createdAt":1500443974652},{"id":8964,"originId":"596f717768aa87c774e5e9b6","articleId":2034,"userId":236,"content":"关于这条消息工信部已经出来辟谣了。\r\n最近还有很多关于禁用VPN的消息，有真有假，具体的看这篇文章就够了：\r\n [中国下令全面禁止VPN (2017)?](https://www.vpndada.com/china-ban-vpn/)","createdAt":1500475767534},{"id":8965,"originId":"596f7aa468aa87c774e5e9bb","articleId":2034,"userId":1197,"content":".....没VPN以后还怎么学习","createdAt":1500478116002},{"id":8966,"originId":"596f950a68aa87c774e5e9be","articleId":2034,"userId":223,"content":"假的。\r\n[2019年便宜好用的翻墙VPN推荐](https://www.wallmama.com/best-vpn-china-2019/)\r\n","createdAt":1500484874230},{"id":8967,"originId":"596f967e8f0313ff0d08d5ac","articleId":2034,"userId":3074,"content":"[@ResJay](/user/ResJay) 表示平时也不怎么用vpn","createdAt":1500485246118},{"id":8968,"originId":"596ff7ec3f0ab31540ed4b8d","articleId":2034,"userId":383,"content":"嗯。。就GFW来说，zf什么时候说过它是存在的呢。。。另外这样讨论真的好么。。。。。。。。。","createdAt":1500510188442},{"id":8969,"originId":"596ffc4a68aa87c774e5e9c0","articleId":2034,"userId":383,"content":"另外昨天深圳貌似就开始了，有人已经被喝茶了","createdAt":1500511306685},{"id":8970,"originId":"596ffc633f0ab31540ed4b94","articleId":2034,"userId":3075,"content":"买国外vps，自己搭建vpn，目前还是很稳定可以使用的","createdAt":1500511331432},{"id":8971,"originId":"59709d518f0313ff0d08d61e","articleId":2034,"userId":3076,"content":"[@2YANG](/user/2YANG) 我也想买国外的vps,只是有点担心国外的ip会不会被GFW无差别大范围AOE被墙了.......","createdAt":1500552529383},{"id":8972,"originId":"5971a10e68aa87c774e5ea46","articleId":2034,"userId":3075,"content":"[@suyuanhan](/user/suyuanhan) 可以试试，也不贵","createdAt":1500619022075},{"id":8973,"originId":"5971d7e668aa87c774e5ea62","articleId":2034,"userId":3077,"content":"要开会了，都会紧一段时间","createdAt":1500633062697},{"id":8974,"originId":"5971d81c68aa87c774e5ea64","articleId":2034,"userId":3077,"content":"[@hyj1991](/user/hyj1991) bing dockgo也不错","createdAt":1500633116320},{"id":8975,"originId":"5974843f3f0ab31540ed4cae","articleId":2034,"userId":111,"content":"是真的","createdAt":1500808255139},{"id":8976,"originId":"5aefc0141b02288048bd0cff","articleId":2034,"userId":354,"content":"有出处吗？相关新闻，墙内外的都可以..\r\n光是口耳相传不可靠。","createdAt":1525661716484},{"id":8977,"originId":"5b05181c29e6e510415b23bb","articleId":2034,"userId":3078,"content":"蓝灯呢谷歌出品的啊，现在好像不送300M免费的了","createdAt":1527060508858},{"id":8978,"originId":"5b05224a8a4f51e140d94179","articleId":2034,"userId":3079,"content":"[@grxchhl](/user/grxchhl) <br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1527063114033},{"id":8979,"originId":"5b052eea57137f22415c4597","articleId":2034,"userId":3079,"content":"1<br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1527066346976},{"id":8980,"originId":"5b0532bc29e6e510415b23c4","articleId":2034,"userId":3079,"content":">> hello<br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1527067324768},{"id":8981,"originId":"5b0532ca57137f22415c4599","articleId":2034,"userId":3079,"content":"* hello*<br/><br/><a class=\"form\" href=\"https://github.com/shinygang/Vue-cnodejs\">I‘m webapp-cnodejs-vue</a>","createdAt":1527067338220},{"id":8982,"originId":"5b26a11d8a4f51e140d948ba","articleId":2034,"userId":223,"content":"假的。\r\n更新：[2019年便宜好用的翻墙VPN推荐](https://www.wallmama.com/best-vpn-china-2019/)\r\n\r\n别用国内付费VPN服务，**Green就是教训**。\r\n别想着“免费”，能用的付费vpn得花钱，不便宜，**便宜的根本没法用**，几十块一年的等于智商税。\r\n**没有100%稳定高速的服务**，特殊时段，即使付费vpn也不能总是“高速稳定”，别指望一年365天一天24小时随时1080p油管。\r\n一线国外付费VPN能保证的是“**较好**”的连通率和速度，不完美，但至少能用google，gmail和可接受的油管速度，这仍是目前最好的方案。\r\n\r\n**国内还能用支付宝买到**的国外付费vpn推荐：\r\n\r\n## VPN推荐一：[ExpressVPN](https://indx.cc/exp) \r\n\r\n全球148+服务器所在地 / 无限流量 / 多协议，包括openVPN / 一键连接 / 同时3台设备 / 256-bit AES加密 / 支付宝支付 / 支持路由器连接 / 完全IP隐藏 / 零日志 / 全终端覆盖 / 30天无条件退款 / Split tunneling技术 + 浏览器插件，同时访问内外网 / **推荐原因：速度相对最快**\r\n\r\n## VPN推荐二：[VyprVPN](https://indx.cc/vyr)\r\n\r\n70+自有服务器所在地，200,000+IP地址 / 无限流量 / 多协议，独家混淆协议 / 一键连接 / 同时5台设备 / 支持P2P / 变色龙加密，**推荐原因：连接相对最稳定** / 支付宝支付 / 支持路由器连接 / NAT安全机制 / DNS加密 / 全终端覆盖 / 2年款最大优惠 / 30天无条件退款 / 按程序控制网络技术，同时访问内外网\r\n\r\n## VPN推荐三：[Nord](https://indx.cc/nrd)\r\n\r\n3400+服务器 / 无限流量 / 支持Onion over vpn / 一键连接 / 同时6台设备 / 支持P2P / 双重加密 / 支付宝支付 / 支持路由器连接 / CyberSec安全技术 / 零日志 / 专业客户端 / 2年款最大优惠 / 随时退款 / 浏览器代理插件，同时访问内外网 / **推荐原因：随时退款**\r\n\r\n不推荐自架，单IP长期很难可靠，除非你想反复切IP（要花钱），可以选IP池比较大的：[Vultr](https://www.vultr.com/?ref=6996621)，但加上换的IP整体成本往往高于付费VPN。\r\n\r\n[中国国内能用的付费vpn推荐](https://www.wallmama.com/2018/03/%E4%B8%AD%E5%9B%BD%E5%9B%BD%E5%86%85%E8%83%BD%E7%94%A8%E7%9A%84vpn/)\r\n\r\n蓝灯其实也不错，很稳定，但是免费版给的流量太少，想用Pro的朋友，可以用这个优惠码：NQGP7F。","createdAt":1529258269824},{"id":8983,"originId":"5b286db857137f22415c4cbc","articleId":2034,"userId":801,"content":"我就想问问，如何做到？\r\n\r\n来自✨ [Node.js开源项目精选](https://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1529376184778},{"id":8984,"originId":"5b43816a35342ab0690613b6","articleId":2034,"userId":224,"content":"现在还能用呀，推荐用黄金青蛙的[VyprVPN](https://www.goldenfrog.com/zh/vyprvpn?offer_id=174&amp;aff_id=3008)或者[expressVPN](http://www.linkev.com/?a_fid=clover)","createdAt":1531150698233},{"id":8985,"originId":"5bfff6a3d6104a4f803a2fa5","articleId":2034,"userId":1960,"content":"VPN是保证您在线安全的最佳选择，因此我建议：\r\nhttps://www.cheapchinavpn.com/","createdAt":1543501475911},{"id":8986,"originId":"5c001295d6104a4f803a300e","articleId":2034,"userId":831,"content":"就是因为这个帖，当时被封的","createdAt":1543508629434},{"id":8987,"originId":"5c0086a3d6104a4f803a3046","articleId":2034,"userId":413,"content":"给站长点个赞，宁愿换服务器也不愿意备案。\n\n来自实用的 [CNodeJS-Swift](https://github.com/tomoya92/CNodeJS-Swift)","createdAt":1543538339547},{"id":8988,"originId":"5c0140d2be1b120abac5ea08","articleId":2034,"userId":1960,"content":"[@A69694510](/user/A69694510) 怎么会那。。。？","createdAt":1543586002950},{"id":8989,"originId":"5c016f3cd6104a4f803a3507","articleId":2034,"userId":645,"content":"自己有服务器的他们禁止不住的 商业服务器不可能一刀切要不我好多国外项目的\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1543597884502},{"id":8990,"originId":"5c932dbefd41137eb765ffd4","articleId":2034,"userId":3080,"content":"关于禁用VPN的消息，有真有假，但是在中国如果想享受互联网的自由你们必须在用[最佳VPN为中国](https://www.vpnranks.com/zh-hans/%E4%B8%AA%E6%9C%80%E4%BD%B3%E4%B8%AD%E5%9B%BDvpn/) 具体的看这篇指南。","createdAt":1553149374578},{"id":8991,"originId":"5d707befd50f572345911a4e","articleId":2034,"userId":1964,"content":"已经禁止了，所以不要在国内传播反动信息，这篇文章可以看看[https://vpnfast.github.io](https://vpnfast.github.io)","createdAt":1567652847809},{"id":8992,"originId":"5dad70f5ece3813ad9ba328d","articleId":2034,"userId":208,"content":"不料被题主说中。。。现在要翻墙的话，只能买付费vpn了，这篇[vpn推荐](http://qiangwaikan.com/best-vpn-china/)希望对你有帮助","createdAt":1571647733723},{"id":8993,"originId":"5de903e014ffa4125a5448f0","articleId":2034,"userId":209,"content":"海外华人想要看仅限中国在线内容。他们可以通过VPN随时随地能[翻墙回国](https://www.topchinesevpn.com/vpn-into-china/)。","createdAt":1575551968197},{"id":8994,"originId":"5e3f950e267721420912b1a5","articleId":2034,"userId":3081,"content":"[中国能用的VPN翻墙软件](https://www.fastwebcn.com/5-best-vpn-in-china/)\r\n\r\n自己搭建的vpn是不靠谱的，ip被墙的太多了。因为自己搭建的vpn是单ip，而且往往用的是大家都在用来搭建vpn的主机，流量特征明显，服务商ip很容易大面积被屏蔽，换ip也可能是被墙的，很多服务商还只能付费换ip。\r\n你买主机自建vpn的费用其实和买专业的付费vpn服务差不了多少，付费vpn服务一般体验更好，比如**[我经常用的这个VPN](https://www.linkev.com/?offer=3monthsfree&a_fid=fastwebcn)**，用了一年多，速度快，稳定，就是全英文界面。\r\n\r\n别用国内付费VPN服务，Green就是教训。别想着“免费”，能用的付费vpn得花钱，不便宜，便宜的根本没法用，几十块一年的等于智商税。\r\n没有100%稳定高速的服务，在敏感时期，即使付费vpn也不能总是“高速稳定”，别指望一年365天任何时候都能随时1080p油管。\r\n一线国外付费VPN能保证的是“较好”的连接成功率和速度，不完美，但至少能用google，gmail和不错的的油管速度，保证95%左右的全年可用时间，现在来看这仍是目前最好的方案。\r\n\r\n## 国内还能用的付费vpn推荐：\r\n### 1.ExpressVPN - 点击下方获得优惠\r\n#### [优惠链接](https://www.linkev.com/?offer=3monthsfree&a_fid=fastwebcn)-现在一年送3个月\r\n全球160+服务器所在地 / 无限流量 / 多协议，包括openVPN / 一键连接 / 同时3台设备 / 256-bit AES加密 / 支付宝支付 / 支持路由器连接 / 完全IP隐藏 / 零日志 / 全终端覆盖 / 30天无条件退款 / Split tunneling技术 + 浏览器插件，同时访问内外网 / 速度相对最快\r\n### 2.NordVPN - 点击下方获取最多70%优惠\r\n#### [优惠链接](https://go.nordvpn.net/aff_c?offer_id=177&aff_id=6186&url_id=631)\r\n3400+服务器 / 无限流量 / 支持Onion over vpn / 一键连接 / 同时6台设备 / 支持P2P / 双重加密 / 支付宝支付 / 支持路由器连接 / CyberSec安全技术 / 零日志 / 专业客户端 / 2年款最大优惠 / 随时退款 / 浏览器代理插件，同时访问内外网 / 随时退款\r\n### 3.VyprVPN - 点击下方获得优惠\r\n#### [优惠链接](https://linkvy.com/zh/vyprvpn/special/vpn-premium-promo?offer_id=227&aff_id=3919&TDMBG)\r\n70+自有服务器所在地，200,000+IP地址 / 无限流量 / 多协议，独家混淆协议 / 一键连接 / 同时5台设备 / 支持P2P / 变色龙加密，连接相对最稳定 / 支付宝支付 / 支持路由器连接 / NAT安全机制 / DNS加密 / 全终端覆盖 / 2年款最大优惠 / 30天无条件退款 / 按程序控制网络技术，同时访问内外网\r\n","createdAt":1581225230605},{"id":8995,"originId":"5e5f0483a72b853f100458b4","articleId":2034,"userId":165,"content":"[ExpressVPN购买使用教程-大陆可用的VPN，速度快，抗封锁 2020版](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 Shadowsocks 代理，网络是CN2 Gia，连接速度快，并且官方保证IP可用，提供5个IP地址，支持中国的支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)\r\n","createdAt":1583285379379},{"id":8996,"originId":"5eba6331e785ec40b04fbca6","articleId":2034,"userId":226,"content":"这两年打击VPN的力度确实很大。大部分VPN都倒下了。\r\n不过这都是猫捉老鼠的游戏。一方面防火墙不断升级，另一方面VPN服务商不断研究新技术去绕过长城防火墙的封锁。\r\n\r\n虽然这两三年打击力度是空前的大，但目前为止依然有少量的VPN可以在中国使用，而且连接稳定，速度也还不错。\r\n\r\n**2020年在中国仍然可以使用的[中国VPN推荐](https://www.topvpnguides.com/best-vpn-for-china-cn/)：**\r\n\r\n**TOP 1 : [PureVPN](https://www.topvpnguides.com/best-vpn-for-china-cn/)：0.99美金**\r\n\r\nPureVPN连接速度快、线路稳定、支持专用IP地址。\r\n海外华人可借助PureVPN翻墙回国\r\nPureVPN有针对中国VPN用户的专用连接方式和专用服务器（Optimized for China）\r\nPureVPN价格非常优惠（$0.99 起）\r\n免费VPN：PureVPN可免费使用31天（31天退款保证）\r\n更多详情：[PureVPN Review](https://www.topvpnguides.com/purevpn-review/)\r\n\r\n**TOP 2 : [Ivacy](https://www.topvpnguides.com/best-vpn-for-china-cn/)：1.16美金每月**\r\n\r\nIvacyVPN可成功绕过中国长城防火墙去访问Google、Youtube、Facebook等网站。\r\n功能强大，价格低至1.5美金每月，性价比很好\r\nIvacyVPN在Window中推出了专门针对中国的版本，使用非常简单方便。\r\n提供30天的免费VPN（30天退款保证）\r\n更多详情：[Ivacy VPN Review](https://www.topvpnguides.com/ivacy-vpn-review/)\r\n\r\n**TOP 3 : [Surfshark](https://www.topvpnguides.com/best-vpn-for-china-cn/)：**\r\n\r\n1.99美金每月，\r\n性价比非常高，\r\n免费VPN30天\r\n允许无数台设备同时连接\r\n更多详情：[Surfshark review](https://www.topvpnguides.com/surfshark-review/)\r\n\r\n**TOP 4 : [NordVPN](https://www.topvpnguides.com/best-vpn-for-china-cn/)：3.49美金每月，**\r\n\r\n全球最优秀的VPN\r\n免费VPN30天\r\n支持中文版本\r\n更多详情：[NordVPN Review](https://www.topvpnguides.com/nordvpn-review/)\r\n\r\n**TOP 5 : [ExpressVPN](https://www.topvpnguides.com/best-vpn-for-china-cn/)：**\r\n\r\n8.32美金每月，\r\n速度最快的VPN，\r\n免费试用VPN30天\r\n更多详情：[ExpressVPN Review](https://www.topvpnguides.com/expressvpn-review/)\r\n\r\n**TOP 6 : [Astrill VPN](https://www.topvpnguides.com/best-vpn-for-china-cn/) : **\r\n\r\n中国最坚挺稳定的VPN（没有之一），\r\n一直可以正常使用\r\n更多：[Astrill VPN 评测](https://www.topvpnguides.com/astrill-vpn-review-cn/)\r\n\r\n以上六款VPN都是在中国还可以使用的[翻墙软件](https://www.topvpnguides.com/best-vpn-for-china-cn/)。\r\n\r\n**如果你只是偶尔使用下VPN，也可以选择高品质的免费VPN，以下是比较靠谱的[Free VPN](https://www.topvpnguides.com/best-free-vpn/)：**\r\n\r\n1，Hide.me免费VPN –每月10 GB的免费数据\r\n\r\n2，TunnelBear 免费VPN –超过22个国家/地区的免费服务器\r\n\r\n3，Windscribe 免费VPN –每月10 GB的免费数据\r\n\r\n4，Hotspot Shield免费VPN –每月15 GB，在15个国家/地区提供免费服务器\r\n\r\n5，Proton 免费VPN –无限的免费数据\r\n\r\n更多中国VPN详情：[https://www.topvpnguides.com/best-vpn-for-china-cn/](https://www.topvpnguides.com/best-vpn-for-china-cn/)\r\n\r\n更多高品质免费VPN详情：[https://www.topvpnguides.com/best-vpn-for-china-cn/](https://www.topvpnguides.com/best-vpn-for-china-cn/)","createdAt":1589273393931},{"id":8997,"originId":"5ef7d89a13f8b244e57cba67","articleId":2034,"userId":174,"content":"推荐光年VPN。无限流量，SSR节点，采用BGP中继，速度快稳定。注册还可以免费VIP试用。现在有限时特惠活动24+6。送大家一个折扣码：2WEs5aVO\r\n\r\n![光年VPN](//static.cnodejs.org/Fh0tPq5vFtt14fLHcL1RnbD-PojW)\r\n\r\nhttps://lightyearvpn.com/\r\nhttps://lightyearapp.life/","createdAt":1593301146354},{"id":8998,"originId":"5f06eb93b2a7c073cb32b743","articleId":2034,"userId":232,"content":"最近不时听到各种关于[翻墙VPN被禁](https://www.vpndada.com/china-ban-vpn/)的消息，虽然其中很多是真实信息，但也有不少是猜测和传闻。事实上，目前还是有不少[翻墙软件（梯子）](https://www.vpndada.com/best-vpns-for-china-cn/)是可以用的，例如[ExpressVPN](https://www.vpndada.com/expressvpn-review-cn/)、[NordVPN](https://www.vpndada.com/go/nordvpn-cn)、[SSR](https://www.vpndada.com/shadowsocks-tutorial-cn/)、[V2Ray](https://www.vpndada.com/v2ray-tutorial-cn/)、[WireGuard](https://www.vpndada.com/wireguard-tutorial-cn/)等等。感兴趣的可以参相关评测：[Best VPN for China](https://www.vpndada.com/best-vpns-for-china/)","createdAt":1594289043496},{"id":8999,"originId":"5f570f5ac1c67a7dd9afdbac","articleId":2034,"userId":426,"content":"推荐这个了。感觉还不错的额了。[点击获取 ](https://github.com/myjiasuqi/jiasu/wiki)\r\n\r\n![2020-03-13_225626.jpg](//static.cnodejs.org/Frz5G12U_44O5UqnmaT0Xa2MSmjF)","createdAt":1599541082366},{"id":9000,"originId":"5f6db9e4f9736b02ceada548","articleId":2034,"userId":3082,"content":"我看这边有用[阿里云测试](https://wall101.com/fanqiang-vpn/)确定能够翻墙的VPN[推荐](https://wall101.com)\r\n我自己参考他们用的[光年](https://wall101.com/fanqiang-vpn/lightyearvpn/), 感觉还不错\r\n\r\n翻墙违法的[报导](https://wall101.com/status/law/)","createdAt":1601026532321},{"id":9001,"originId":"5ff6f9e7a2a213bfc2f6d544","articleId":2034,"userId":53,"content":"应该不至于全部禁止吧。\r\n现在不管各方面需求还是有很多人都需要用VPN，可能大家很多人会纠结翻墙到底是否违法？其实VPN在中国以前一直是灰色地带，有大量网民通过VPN翻墙，同时也有不少公司提供付费VPN服务。不难看出，这条通知并不是针对VPN个人用户的，也没有涉及禁止在中国使用VPN的内容，所以如果一直在用[VPN翻墙](https://wallvpn.com)，大概可以放心，政府并没有宣布你的行为是违法的。","createdAt":1610021351806},{"id":9002,"originId":"6073f8b44d20cb493968b74c","articleId":2034,"userId":185,"content":"年年都在禁，结果大家都在快乐地[翻 墙](https://qiangwaikan.com/gvc/)啊，科学 上网是无法完全禁止的，本身就是一场猫鼠游戏。\r\n\r\n## V PN推荐一：[ExpressV PN](https://qiangwaikan.com/express-review/)\r\n全球160+服务器所在地 / 无限流量 / 私有Lightway协议，包括openV PN / 一键连接 / 同时5台设备连接 / 256-bit AES加密 / 支付宝支付 / 支持路由器连接 / 完全IP隐藏 / 无日志策略 / 支持众多设备 / 30天无条件退款 / Split tunneling技术 + 浏览器插件，同时访问内外网 / 推荐原因：速度快带宽大\r\n\r\n## V PN推荐二：[Panda V PN](https://qiangwaikan.com/panda-review/)\r\n中国研发团队 / 价格便宜 / 支持Onion over / 一键连接 / 同时3台设备 / 支持P2P / 双重加密 / PayPal支付 / 支持路由器连接 / CyberSec安全技术 / 专业客户端 / 2年款最大优惠 / 7天退款保证 / 推荐原因：性价比超高\r\n\r\n## V PN推荐三：[VyprV PN](https://qiangwaikan.com/vypr-review/)\r\n70+自有服务器所在地，200,000+IP地址 / 无限流量 / 多协议，独家混淆协议 / 一键连接 / 同时5台设备 / 支持P2P / 变色龙加密 / 支付宝支付 / 支持路由器连接 / NAT安全机制 / DNS加密 / 全终端覆盖 / 2年套餐最大优惠 / 30天无条件退款 / 按程序控制网络技术，同时访问内外网 / 推荐原因：连接相对最稳定\r\n\r\n### »点击这里：查看更多有关[中国V PN推荐](https://qiangwaikan.com/bvc/)的详细测评。","createdAt":1618213044648},{"id":9003,"originId":"55fc11ea722102be3732e805","articleId":2035,"userId":577,"content":"那一天，人类回想起了\r\n受那些家伙支配的恐怖……\r\n被囚禁在鸟笼中的屈辱……\r\n\r\n进击的沙发","createdAt":1442583018545},{"id":9004,"originId":"55fc1f03722102be3732e809","articleId":2035,"userId":2736,"content":"103.7.200.79","createdAt":1442586371393},{"id":9005,"originId":"55fcb476148959375f34fd3f","articleId":2035,"userId":3084,"content":"[@p412726700](/user/p412726700) 不管用啊 亲测","createdAt":1442624630814},{"id":9006,"originId":"55fcc30d152fdd025f0f4eaf","articleId":2035,"userId":3085,"content":"search 谷歌镜像","createdAt":1442628365455},{"id":9007,"originId":"55fcc4ab152fdd025f0f4eb1","articleId":2035,"userId":3086,"content":"guge.in我是老实人不骗你😂","createdAt":1442628779963},{"id":9008,"originId":"55fd0f89272b724e5efefb06","articleId":2035,"userId":3083,"content":"[@p412726700](/user/p412726700) 不好用呢  莫非是昨天还好用的？","createdAt":1442647945914},{"id":9009,"originId":"55fd0fe9148959375f34fd5a","articleId":2035,"userId":3083,"content":"[@Go-Faram](/user/Go-Faram) 多谢兄台  好人一生平安","createdAt":1442648041598},{"id":9010,"originId":"55fd103e48055cd15e2c86d2","articleId":2035,"userId":3083,"content":"[@wewea](/user/wewea) 教人以渔啊  多谢","createdAt":1442648126343},{"id":9011,"originId":"55fd2f0c48055cd15e2c86db","articleId":2035,"userId":3087,"content":"九尾搜搜http://jiuweisoso.wallpai.com/","createdAt":1442656012527},{"id":9012,"originId":"55fe1d1b48055cd15e2c8702","articleId":2035,"userId":205,"content":"http://google.magicdawn.ml\r\n源码在 https://github.com/magicdawn/my-google\r\n部署在heroku","createdAt":1442716955866},{"id":9013,"originId":"55fe2377152fdd025f0f4eef","articleId":2035,"userId":1632,"content":"64.233.162.86 www.google.com.hk \r\n不要问我是谁。。。","createdAt":1442718583951},{"id":9014,"originId":"55fe3b2148055cd15e2c870b","articleId":2035,"userId":12,"content":"其实就算你搜索到，也打不开\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1442724641520},{"id":9015,"originId":"55fe5493148959375f34fd7c","articleId":2035,"userId":3083,"content":"[@joney-pinkman](/user/joney-pinkman) 这个访问不了呢","createdAt":1442731155756},{"id":9016,"originId":"55fe55b2152fdd025f0f4ef6","articleId":2035,"userId":3083,"content":"[@magicdawn](/user/magicdawn) 有点意思  单纯访问那个IP是访问不了的  但是访问这个url就行  不明觉厉👍","createdAt":1442731442081},{"id":9017,"originId":"55fe643a48055cd15e2c870e","articleId":2035,"userId":205,"content":"[@shinka](/user/shinka) 因为部署在国外, 哈哈","createdAt":1442735162984},{"id":9018,"originId":"55ff5608152fdd025f0f4f0f","articleId":2035,"userId":3083,"content":"[@magicdawn](/user/magicdawn) 原来如此  懂了","createdAt":1442797064464},{"id":9019,"originId":"55ff6386152fdd025f0f4f15","articleId":2035,"userId":1303,"content":"goagent可用啊","createdAt":1442800518249},{"id":9020,"originId":"55ff64fe152fdd025f0f4f18","articleId":2035,"userId":3088,"content":"你可以申请一个免费12个月的aws云服务器，在上面安装个hadowsocks的服务端，在你的机器上装个客户端，就可以翻墙了，东京地区的实例网速还可以，看youtube基本不卡，亲身体验，楼主可以试试","createdAt":1442800894774},{"id":9021,"originId":"55ff6bd5148959375f34fd9a","articleId":2035,"userId":3083,"content":"[@tallman2014](/user/tallman2014) 哇  挺着挺棒啊  等有空了我去试试","createdAt":1442802645229},{"id":9022,"originId":"55ff6bf348055cd15e2c8736","articleId":2035,"userId":3083,"content":"[@xinshouke](/user/xinshouke) 好  有空我研究下这东西咋用","createdAt":1442802675322},{"id":9023,"originId":"6072843d4d20cb3c0768b3bc","articleId":2035,"userId":165,"content":"[ExpressVPN-大陆翻墙首选速度快稳定抗封锁的优质VPN](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 SSR，V2ray 代理，网络是CN2 GIA，连接速度快，并且官方保证IP可用，提供5个IP地址，支持支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)","createdAt":1618117693849},{"id":9024,"originId":"6073f3fa4d20cb64b268b70b","articleId":2035,"userId":185,"content":"这种就是所谓的Google代理，过不了几天在中国就会被墙，不要小看防火长 城的爬虫。封 杀这些网站分分钟的事情，还是老老实实用工具[翻 墙](https://qiangwaikan.com/gvc/)吧\r\n## 目前也有很多可用的[翻 墙V PN](https://qiangwaikan.com/bvc/)","createdAt":1618211834822},{"id":9025,"originId":"607284284d20cb74eb68b3b5","articleId":2036,"userId":165,"content":"[ExpressVPN-大陆翻墙首选速度快稳定抗封锁的优质VPN](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 SSR，V2ray 代理，网络是CN2 GIA，连接速度快，并且官方保证IP可用，提供5个IP地址，支持支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)","createdAt":1618117672182},{"id":9026,"originId":"6073f2ab4d20cb805f68b703","articleId":2036,"userId":185,"content":"麻烦老外不要来尬吹了，机翻看着真的让人头大，你用过腾讯视频、爱奇艺、B站这些软件吗？[翻 墙回国](https://qiangwaikan.com/into-china/)需要V PN有中国大陆服务的。大多数中国用户想要的还是[科学 上网工具](https://qiangwaikan.com/gvc/)\r\n## 也就是用来翻 墙的好用的[中国V PN](https://qiangwaikan.com/bvc/)。","createdAt":1618211499353},{"id":9027,"originId":"5d47cff3bf26dc7fc5337816","articleId":2037,"userId":545,"content":"用 ab 做下压测，或者用不同浏览器同时打开 就明白了~","createdAt":1564987379629},{"id":9028,"originId":"5d47d1ccbf26dc7fc5337832","articleId":2037,"userId":128,"content":"[@zuohuadong](/user/zuohuadong) 感谢。没用过 ab……不同浏览器打开确实就没这个问题了，为什么呢？","createdAt":1564987852539},{"id":9029,"originId":"5d47f6444f472f7fee152ac4","articleId":2037,"userId":97,"content":"[@daGaiGuanYu](/user/daGaiGuanYu) 大概是浏览器有个某个优化的策略，对同一个 URL 的资源同一时间只进行一个活动请求。可以 terminal 中开几个 tab，用 `curl http://127.0.0.1:3000/` 在几个 tab 中同时试一下","createdAt":1564997188935},{"id":9030,"originId":"5d47fb014f472f7fee152aea","articleId":2037,"userId":268,"content":"这个问题是因为如果用chrome不同的tab打开同一个url的时候，每个tab会等待前面一个tab执行完才会执行\r\n\r\nhttps://stackoverflow.com/a/14119399/1805188\r\n\r\nhttps://stackoverflow.com/questions/27513994/chrome-stalls-when-making-multiple-requests-to-same-resource","createdAt":1564998401453},{"id":9031,"originId":"5d48f1114f472f7fee152e0c","articleId":2037,"userId":128,"content":"见笑了，我还以为是不能并发处理……","createdAt":1565061393133},{"id":9032,"originId":"5d5266a312a0194544416450","articleId":2037,"userId":2246,"content":"楼主示例使用 ab 测试的确能并发，但为什么下面的例子(大量计算)却不能并发：\r\n```js\r\nconst Koa = require('koa');\r\nconst app = new Koa();\r\n\r\napp.use(async ctx => {\r\n  console.log('收到请求');\r\n  ctx.body = await getResult();\r\n  console.log('已响应');\r\n});\r\n\r\napp.listen(3000);\r\n\r\nasync function getResult(){\r\n  return new Promise( resolve => {\r\n    let sum = Math.PI;\r\n    for (let i = 0; i < 100000000; i++) {\r\n      sum /= 1.2;\r\n    }\r\n    resolve(sum);\r\n  })\r\n}\r\n```\r\n","createdAt":1565681315346},{"id":9033,"originId":"5d526a0612a019454441646f","articleId":2037,"userId":109,"content":"[@xuxu7](/user/xuxu7) 高CPU计算把主进程占满了，怎么能并发呢","createdAt":1565682182629},{"id":9034,"originId":"5d526c3f12a0194544416496","articleId":2037,"userId":2246,"content":"[@waitingsong](/user/waitingsong) 谢谢，看了下 CPU，其中1核占用了 99.9%","createdAt":1565682751458},{"id":9035,"originId":"5d52716312a01945444164bf","articleId":2037,"userId":109,"content":"[@xuxu7](/user/xuxu7) 换个说法： 如果CPU都被占满了，此时多进程/线程模式又有何用处呢。","createdAt":1565684067464},{"id":9036,"originId":"5d52bd3012a01945444165e2","articleId":2037,"userId":2246,"content":"嗯，我对 Node.js 还没有深刻的理解，想验证下异步 io，结果 CPU 占满了没能验证。","createdAt":1565703472922},{"id":9037,"originId":"6066c46b2357dd5542f9e756","articleId":2037,"userId":128,"content":"[@waitingsong](/user/waitingsong) 之所以有”多线程“这种概念，是因为 cpu 资源经常闲置。\r\n也就是说，”多线程“是 cpu 资源闲置的一种解决方案。\r\ncpu 资源不够的情况下，多线程当然就没用了。\r\n\r\n就像红绿灯是”指示谁该走，谁不能走“的，如果路上没有行人，那红绿灯当然没用了。\r\n但是，不能否认红绿灯的作用。","createdAt":1617347691717},{"id":9038,"originId":"607196914d20cb729468b324","articleId":2037,"userId":109,"content":"[@daGaiGuanYu](/user/daGaiGuanYu) 你的理解方向不对，应该是：\r\n如果路上人山人海道路塞满车，那么“此时”红绿灯就没用了。","createdAt":1618056849583},{"id":9039,"originId":"6073db5f4d20cb63e668b678","articleId":2037,"userId":128,"content":"[@waitingsong](/user/waitingsong) 这是打个比方啊大兄弟，这也能较劲","createdAt":1618205535188},{"id":9040,"originId":"590d420d3504ce1c2ac45905","articleId":2038,"userId":44,"content":"需要登记，不惹事登记了也没啥，但很多人绕过了这一点\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1494041101228},{"id":9041,"originId":"590d466ecfb837012a59b418","articleId":2038,"userId":535,"content":"[@fightAndLearn](/user/fightAndLearn) 那请问是办公楼方面提供的VPN，还是要自己找的呀？合法的VPN是不是都在国内？","createdAt":1494042222646},{"id":9042,"originId":"590d492b3504ce1c2ac45909","articleId":2038,"userId":44,"content":"[@zhanzhenzhen](/user/zhanzhenzhen) 我们团队自己出钱弄了个香港那边的服务器，只是做普通用途的vpn基本不会被抓，感觉还是范围小点比较方便，不向外提供\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1494042923017},{"id":9043,"originId":"590d4bbbd371b6372a8af606","articleId":2038,"userId":413,"content":"好老板，还为员工考虑fq的问题\r\n\r\n其实可以给员工钱，让员工自己去弄，这样不就分散了吗","createdAt":1494043579571},{"id":9044,"originId":"590d618f3504ce1c2ac4590f","articleId":2038,"userId":418,"content":"现在国内不是不允许自己架vpn了吗？","createdAt":1494049167432},{"id":9045,"originId":"590ed1a7d371b6372a8af65e","articleId":2038,"userId":236,"content":"工信部的条文指出“未经电信主管部门批准，不得自行建立或租用专线（含虚拟专用网络VPN）等其他信道开展跨境经营活动”。我的理解是不能私自提供VPN服务，大概是指向客户出售VPN服务的公司，至于公司自建VPN自己使用，我想也许不在这个限制的范围之内吧。\r\n\r\n另外，使用VPN目前还不是违规的，但建议不要使用国内服务商的VPN（因为国内服务商可能已经违规），可以使用国外的VPN服务商。具体使用哪一家可以参考这个[VPN评测网站](https://www.vpndada.com/):\r\n\r\nhttps://www.vpndada.com/best-vpns-for-china/ （英文）\r\nhttps://www.vpndada.com/best-vpns-for-china-cn/ （中文）","createdAt":1494143399259},{"id":9046,"originId":"590ed56c3504ce1c2ac45944","articleId":2038,"userId":535,"content":"[@designsmart](/user/designsmart) 为什么我的推论和你有些不同。。。我觉得，政府可能并不是想取缔所有国内的VPN，而是想让国内的VPN服务商服从政府管理（例如汇报用户上网记录）。所以我觉得国内的可能会消失一大批，但剩下的会反而比国外的稳定（但价格可能会上升）。","createdAt":1494144364480},{"id":9047,"originId":"590f279fcfb837012a59b476","articleId":2038,"userId":110,"content":"可以在路由器上跑Shadowsocks+ChinaDNS\r\n想翻墙就翻吧。目前还没听说不用来干坏事光翻墙就被罚的","createdAt":1494165407176},{"id":9048,"originId":"590f2ae9cfb837012a59b478","articleId":2038,"userId":1485,"content":"只是纯粹的办公、学习，我感觉就没有必要考虑这个问题。","createdAt":1494166249200},{"id":9049,"originId":"590fc72f3504ce1c2ac4595b","articleId":2038,"userId":3066,"content":"做什么项目，我给你远程办公，要不要","createdAt":1494206255019},{"id":9050,"originId":"590fd51bba8670562a40edd4","articleId":2038,"userId":218,"content":"我们老板不给我们提供 vpn，都是我们自己搭的，翻墙只是办公、学习用，应该不会有人查你，即使要查，他们也忙不过来啊","createdAt":1494209819050},{"id":9051,"originId":"591262873504ce1c2ac45a31","articleId":2038,"userId":539,"content":"翻墙应该向哪个部门登记呢？","createdAt":1494377095329},{"id":9052,"originId":"5b43809013ca2fe569fb9238","articleId":2038,"userId":224,"content":"可以直接买别的公司的v p n，[VyprVPN](https://www.goldenfrog.com/zh/vyprvpn?offer_id=174&amp;aff_id=3008)或者[expressVPN](http://www.linkev.com/?a_fid=clover)","createdAt":1531150480891},{"id":9053,"originId":"5d6cd9c8d50f572345910e2d","articleId":2038,"userId":1964,"content":"工作用途一般不会管你的，参考一下这个吧[https://vpnfast.github.io](https://vpnfast.github.io)","createdAt":1567414728239},{"id":9054,"originId":"5e83353758ab6717beb7d903","articleId":2038,"userId":231,"content":"[2020最好用的翻墙软件推荐](https://www.fq7.org/fq-soft.html)\r\n[ExpressVPN](https://www.fq7.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的[VPN](https://www.fq7.org/tag/vpn)服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n购买ExpressVPN:[点我](hhttps://www.xvbelink.com/?a_fid=19912018)\r\n\r\nExpressVPN位于英属维尔京群岛，既不需要遵守美国数据保留制度，也不需要遵守欧盟DRD法律法规。换句话说，他们没有义务与任何政府分享他们的数据，这意味着他们不需要保留流量日志。另外英属的维尔京群岛是英国的海外主权领土，但它们不受英国监视条约的约束。\r\nExpressVPN会收集有关提升其服务质量的少量信息。此数据用于识别和解决技术问题，但无法识别用户的在线行为。换句话说，该公司不会收集任何能够显示你的IP和连接的流量日志。\r\n该公司使用AES-256密码和RSA-4096以及SHA-512 HMAC进行身份验证，这是一种非常可靠的加密方式。此外，ExpressVPN允许比特币支付。\r\n购买ExpressVPN:[点我买ExpressVPN](https://www.xvbelink.com/?a_fid=19912018)","createdAt":1585657143673},{"id":9055,"originId":"5ea6894ed870946c6b6be63f","articleId":2038,"userId":226,"content":"在中国使用[翻墙软件](https://www.topvpnguides.com/best-vpn-for-china-cn/)的人很多，你要知道中国有多少外贸企业和外贸从业者，还有多少海外投资人，留学生和海归等。\r\n这些人都需要翻墙，而真正备案的人非常非常的少。备案非常的麻烦，而且价格也非常的贵。\r\n所以大家都使用的是海外的翻墙VPN。\r\n这样即简单又便宜。\r\n在中国可以使用，且性价比比价好的有：：\r\n[NordVPN](https://www.topvpnguides.com/nordvpn-review/): 功能很强悍，30天退款保证。\r\n[ExpressVPN](https://www.topvpnguides.com/expressvpn-review/)：速度超快，30天退款保证。\r\n[Surfshark](https://www.topvpnguides.com/surfshark-review/)：一个帐号可以同时在N台设备上登录（最少几百个吧），性价比最高。\r\n[PureVPN](https://www.topvpnguides.com/purevpn-review/)：价格优惠，性价比高，30天退款保证。\r\n......\r\n更多可在中国使用的VPN请点击：[2020年中国最好用的翻墙软件VPN推荐](https://www.topvpnguides.com/best-vpn-for-china-cn/)\r\n\r\n","createdAt":1587972430916},{"id":9056,"originId":"5f6d8e81f9736b02ceada498","articleId":2038,"userId":210,"content":"只要不是公司的名义应该都没问题。\r\n我看这边有一些阿里云实测的[VPN推荐](https://wall101.com/fanqiang-vpn/)还不错","createdAt":1601015425126},{"id":9057,"originId":"5ff2d7ff5393a591775468a3","articleId":2038,"userId":53,"content":"关于在中国翻墙以及使用[翻墙软件](https://wallvpn.com/best-vpn-china/)还是存在很多的禁忌的，在使用之前，建议群主阅读一下[如何科学上网指南](https://wallvpn.com)，避免一些不必要的麻烦。谢谢。","createdAt":1609750527304},{"id":9058,"originId":"600a25275d04ac1bbf217e77","articleId":2038,"userId":3090,"content":"這是可以創建以創建VPN連接的兩種主要技術 [https://en.finevpn.org/](https://en.finevpn.org/)，該VPN連接可以在公共網絡上安全可靠地傳輸數據。這是加密和隧道傳輸。\r\n\r\n加密：如您所知，用簡單的話加密數據，以便只有收件人才能理解您發送的內容，這對其他人似乎毫無用處。\r\n\r\n隧道：另一方面，隧道意味著在公共網絡上創建隧道，在該隧道中，整個數據包將以其他數據包的形式傳輸到公共網絡。這樣，選擇封裝協議，以使其他計算機或網絡設備在將數據傳輸到公共網絡時無法理解它。","createdAt":1611277607185},{"id":9059,"originId":"60289aa403d79716fc66fbc9","articleId":2038,"userId":227,"content":"## 能有这老板也太好了\r\n\r\n我们自己以前是架了一台服务器，大家一起连过去这样，刚好还能跑一些小测试。后来看到一些[翻墙违法](https://wall101.com/guides/law/)的新闻，吓得大家也不敢搞了，怕以非法经营罪被抓。\r\n\r\n现在都是员工他们自己搞一些[梯子](https://wall101.com/tizi/) 。翻墙不好翻，还是要多看一些[科学上网](https://wall101.com/fanqiang-vpn/)的信息","createdAt":1613273764394},{"id":9060,"originId":"605dd1ac1b33876c2c5daaad","articleId":2038,"userId":165,"content":"[ExpressVPN-大陆翻墙首选速度快稳定抗封锁的优质VPN](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 SSR，V2ray 代理，网络是CN2 GIA，连接速度快，并且官方保证IP可用，提供5个IP地址，支持支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)","createdAt":1616761260208},{"id":9061,"originId":"6073c91b4d20cb3e3468b647","articleId":2038,"userId":185,"content":"公司大的话建议还是去登记吧，一二十个人的小公司就没必要了\r\n## 直接选择这些在[中国好用的V PN](https://qiangwaikan.com/bvc/)\r\n不过平时不要太高调，猥琐发育才是[科学 上网](https://qiangwaikan.com/gvc/)的根本。不要太抠门了，别去用[免费V PN](https://qiangwaikan.com/free/)翻墙 软件，风险太大不值得。","createdAt":1618200859601},{"id":9062,"originId":"593deb2b8ce045ee166a1423","articleId":2039,"userId":1741,"content":"node不会自动通过代理服务器访问，你需要先在node里连接shadowsocks","createdAt":1497230123312},{"id":9063,"originId":"593e00a98ce045ee166a1449","articleId":2039,"userId":1713,"content":"没错，shadowsocks 它只解决了浏览器的问题，要全局的话 还得做相关配置吧","createdAt":1497235625474},{"id":9064,"originId":"593e253bd7c0b0d31684ca06","articleId":2039,"userId":3092,"content":"你shadowsocks 设置全局代理试下， 如果不行的话，那就直接用vpn, 不走shadowsocks","createdAt":1497244987355},{"id":9065,"originId":"5b1976cf8a4f51e140d94672","articleId":2039,"userId":223,"content":"用[工具](https://indx.cc/exp)，把程序部署到国外vps上跑，或者买专门的爬虫空间。","createdAt":1528395471268},{"id":9066,"originId":"5b19e83d57137f22415c4a77","articleId":2039,"userId":2272,"content":"如果是mac的话，即便SS开了全局，终端也是不走代理的（安全限制），可以考虑：\r\n1、用类似proxychains，将请求代码到SS\r\n2、用proxifier，将终端请求代理到SS\r\n3、用VPN","createdAt":1528424509566},{"id":9067,"originId":"5b4383c7e374eeab6929d575","articleId":2039,"userId":224,"content":"直接走付费v pn，推荐用[VyprVPN](https://www.goldenfrog.com/zh/vyprvpn?offer_id=174&amp;aff_id=3008)或者[expressVPN](http://www.linkev.com/?a_fid=clover)，省心多了","createdAt":1531151303513},{"id":9068,"originId":"5d89ae885cbcc579bb9ea6d0","articleId":2039,"userId":208,"content":"shadowsocks现在都是裸奔了，特殊时期容易被封，参考[VPN推荐](http://qiangwaikan.com/best-vpn-china/)","createdAt":1569304200597},{"id":9069,"originId":"5dd63a408287937a65af5f28","articleId":2039,"userId":172,"content":"ShadowSocks会产生代理连接，在你的nodejs程序里指定网路走这个代理即可，任何网络操作的库都可以设置代理，另外参考[翻墙后](https://www.wallmama.com/fqh)。","createdAt":1574320704176},{"id":9070,"originId":"5f5637dfc1c67a7dd9afda3e","articleId":2039,"userId":175,"content":"如果有条件，直接用海外的VPS来运行爬虫就可以了。\r\nAmazon AWS和Google Cloud都有免费试用期可以使用。\r\n如果非得在国内的机器上运行，那就得使用[翻墙软件](https://www.vpndada.com/best-vpns-for-china-cn/)了。不推荐Shadowsocks，但可以试试其它可以在Linux上运行的梯子。","createdAt":1599485919225},{"id":9071,"originId":"5f6d8fa272af8c02d3f8d57a","articleId":2039,"userId":210,"content":"SS是通过代理的端口翻墙的，一般的APP不会自动默认走代理，需要[设置](https://wall101.com/fanqiang-vpn/windows/)\r\n或者选择一些非SS类的VPN，例如[Express](https://wall101.com/fanqiang-vpn/expressvpn/)， [Astrill](https://wall101.com/fanqiang-vpn/astrillvpn/)\r\n速度可以参考这个阿里云的[VPN测速结果](https://wall101.com/fanqiang-vpn/)","createdAt":1601015714220},{"id":9072,"originId":"600808925d04ac3429217ac3","articleId":2039,"userId":184,"content":"**付费吧，省心省力呀。如果不确定什么VPN好，可以先看看[免费VPN](https://wallvpn.com/free-vpn/),一些大家都推荐的[好用的VPN](https://wallvpn.com/best-vpn-china/)都是有一定的试用时间，所以用起来。。希望楼主翻墙顺利 lol**","createdAt":1611139218015},{"id":9073,"originId":"603700714655ea8662218361","articleId":2039,"userId":211,"content":"# SS目前流量特征有些明显，可以参考[SSR](https://dr-wall.com/tizi/)\r\n自建梯子还是有一些技术难度的，而且terminal需要设置走翻墙代理。可以看一些[免费试用的VPN](https://dr-wall.com/free-vpn/)，试试看哪种翻墙协议比较好用","createdAt":1614217329813},{"id":9074,"originId":"607283fa4d20cbbef268b3ac","articleId":2039,"userId":165,"content":"[ExpressVPN-大陆翻墙首选速度快稳定抗封锁的优质VPN](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 SSR，V2ray 代理，网络是CN2 GIA，连接速度快，并且官方保证IP可用，提供5个IP地址，支持支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)","createdAt":1618117626802},{"id":9075,"originId":"6073c05b4d20cb083d68b601","articleId":2039,"userId":185,"content":"很老的帖子了啊，想必题主已经找到[好用的翻 墙V PN](https://qiangwaikan.com/bvc/)了吧，不过目前sha dowsocks有点凉凉。\r\n## 目前最火的[翻 墙工具](https://qiangwaikan.com/gvc/)\r\n还是V 2Ray吧，软件app更好用一些，伪装性也更好，Windows、安卓、苹果、Linux全平台支持。","createdAt":1618198619626},{"id":9076,"originId":"5514bcbce26684ed7ff21c12","articleId":2040,"userId":1943,"content":"最近刚在DigitalOcean服务器上搭了个VPN, 感觉够用了。。。 [可以参考这里](http://lesca.me/archives/quickly-deploy-vpn-on-ubuntu-with-ovm.html)","createdAt":1427422396257},{"id":9077,"originId":"5514c034e26684ed7ff21c19","articleId":2040,"userId":3094,"content":"付费的VPN，推荐runox，速度快，稳定，多协议，多客户端， [请点击这里](https://www.runox.us/member/aff.php?aff=1742)","createdAt":1427423284494},{"id":9078,"originId":"5514c3f2e26684ed7ff21c27","articleId":2040,"userId":1632,"content":"翻墙直接用goagent","createdAt":1427424242738},{"id":9079,"originId":"5514c568e26684ed7ff21c29","articleId":2040,"userId":3093,"content":"多谢各位了。\r\n一回来就瞎了，发现不光是 google 用不了\r\n不过我的手机漫游就可以，自动漫游到联通。 但是一用 wifi 就又不行了。看来手机漫游不过 GFW","createdAt":1427424616206},{"id":9080,"originId":"5514c78de26684ed7ff21c33","articleId":2040,"userId":3095,"content":"\r\n一键搭vpn~\r\nhttps://github.com/viljoviitanen/setup-simple-pptp-vpn\r\n\r\n一键搭pptp~\r\nhttp://yansu.org/2013/12/11/deploy-pptp-vpn-in-ubuntu.html\r\n可以尝试下~","createdAt":1427425165704},{"id":9081,"originId":"5514d465e26684ed7ff21c68","articleId":2040,"userId":273,"content":"[@joney-pinkman](/user/joney-pinkman) goagent还能用？","createdAt":1427428453684},{"id":9082,"originId":"5514f2dfe26684ed7ff21c92","articleId":2040,"userId":1632,"content":"[@shinygang](/user/shinygang) 一直都能用啊 ","createdAt":1427436255332},{"id":9083,"originId":"55154524e26684ed7ff21d26","articleId":2040,"userId":3096,"content":"云梯呢  \r\nhttps://www.ytvpn.com/","createdAt":1427457316869},{"id":9084,"originId":"55160dd7e26684ed7ff21db8","articleId":2040,"userId":3097,"content":"https://v2ex.com/   不是可以直接登录吗？ 貌似摸鱼vpn可以免费","createdAt":1427508695827},{"id":9085,"originId":"5518fd67687c387d2f5b2a09","articleId":2040,"userId":1635,"content":"买个Linode的vps，自己搭建vpn服务","createdAt":1427701095232},{"id":9086,"originId":"55190332687c387d2f5b2a18","articleId":2040,"userId":3098,"content":"一直用[云梯](https://www.ytbit.com/)，还算稳定","createdAt":1427702578045},{"id":9087,"originId":"554c05f4b68166372e6001aa","articleId":2040,"userId":2028,"content":"一直用green vpn，mac Linux Windows都行，手机也是，速度稳定，10块一个月，http://gjsq.me/790686","createdAt":1431045620599},{"id":9088,"originId":"554c2515b68166372e6001f1","articleId":2040,"userId":1629,"content":"我用自己搭的 SS","createdAt":1431053589222},{"id":9089,"originId":"554c5f74ba6070b06ac28e21","articleId":2040,"userId":368,"content":"[@luicfer](/user/luicfer) 为何不是vpn呢?","createdAt":1431068532557},{"id":9090,"originId":"554c8b89ba6070b06ac28e59","articleId":2040,"userId":3099,"content":"[@chapgaga](/user/chapgaga) 看需求了，一般VPN是全局的，用ss可以更灵活一些。我就用ss，chrome+ss翻墙，其他浏览器访问国内的网站，工作娱乐两不误啊","createdAt":1431079817301},{"id":9091,"originId":"56cd1752c045c3743304beee","articleId":2040,"userId":223,"content":"更新：[2019年便宜好用的翻墙VPN推荐](https://www.wallmama.com/best-vpn-china-2019/)\r\n\r\n别用国内付费VPN服务，**Green就是教训**。\r\n别想着“免费”，能用的付费vpn得花钱，不便宜，**便宜的根本没法用**，几十块一年的等于智商税。\r\n**没有100%稳定高速的服务**，特殊时段，即使付费vpn也不能总是“高速稳定”，别指望一年365天一天24小时随时1080p油管。\r\n一线国外付费VPN能保证的是“**较好**”的连通率和速度，不完美，但至少能用google，gmail和可接受的油管速度，这仍是目前最好的方案。\r\n\r\n**国内还能用支付宝买到**的国外付费vpn推荐：\r\n\r\n## [ExpressVPN](https://indx.cc/exp) \r\n\r\n全球148+服务器所在地 / 无限流量 / 多协议，包括openVPN / 一键连接 / 同时3台设备 / 256-bit AES加密 / 支付宝支付 / 支持路由器连接 / 完全IP隐藏 / 零日志 / 全终端覆盖 / 30天无条件退款 / Split tunneling技术 + 浏览器插件，同时访问内外网 / **速度相对最快**\r\n\r\n## [VyprVPN](https://indx.cc/vyr)\r\n\r\n70+自有服务器所在地，200,000+IP地址 / 无限流量 / 多协议，独家混淆协议 / 一键连接 / 同时5台设备 / 支持P2P / 变色龙加密，**连接相对最稳定** / 支付宝支付 / 支持路由器连接 / NAT安全机制 / DNS加密 / 全终端覆盖 / 2年款最大优惠 / 30天无条件退款 / 按程序控制网络技术，同时访问内外网\r\n\r\n## [Nord](https://indx.cc/nrd)\r\n\r\n3400+服务器 / 无限流量 / 支持Onion over vpn / 一键连接 / 同时6台设备 / 支持P2P / 双重加密 / 支付宝支付 / 支持路由器连接 / CyberSec安全技术 / 零日志 / 专业客户端 / 2年款最大优惠 / 随时退款 / 浏览器代理插件，同时访问内外网 / **随时退款**\r\n\r\n不推荐自架，单IP长期很难可靠，除非你想反复切IP（要花钱），可以选IP池比较大的：[Vultr](https://www.vultr.com/?ref=6996621)，但加上换的IP整体成本往往高于付费VPN。\r\n\r\n[付费vpn推荐](https://www.wallmama.com/2018/05/%E5%93%AA%E7%A7%8D%E4%BB%98%E8%B4%B9vpn%E6%AF%94%E8%BE%83%E7%A8%B3%E5%AE%9A/)\r\n\r\n蓝灯其实也不错，很稳定，但是免费版给的流量太少，想用Pro的朋友，可以用这个优惠码：NQGP7F。","createdAt":1456281426987},{"id":9092,"originId":"56f89f10a335b3e931b1647f","articleId":2040,"userId":232,"content":"建议自己搭建SS，如果要用VPN，推荐使用国外的付费VPN，可以参考这个链接：\r\n\r\n[VPN China](https://www.vpndada.com/best-vpns-for-china/)","createdAt":1459134224675},{"id":9093,"originId":"56f8c7efa335b3e931b16493","articleId":2040,"userId":3100,"content":"ss 万岁","createdAt":1459144687439},{"id":9094,"originId":"56f93b65c5f5b4a959e915cc","articleId":2040,"userId":892,"content":"挖坟啊.. \r\n\r\n几乎没用过vpn,日常ss。","createdAt":1459174245893},{"id":9095,"originId":"571e066d5a26c4a841ecbceb","articleId":2040,"userId":1948,"content":"自己用美国服务器搭建过，也使用过付费VPN（多数不稳定，而且还有卷钱跑路的），最后用shadow，稳定、靠谱、价格实惠http://dwz.cn/3crJEI","createdAt":1461585517698},{"id":9096,"originId":"57eb2f33d3c70faa43663ed0","articleId":2040,"userId":236,"content":"这篇文章可以参考：\r\n[Best VPN for China](https://www.24hchina.com/vpn-china-best/)","createdAt":1475030835849},{"id":9097,"originId":"57eb61576ab98805449b9544","articleId":2040,"userId":146,"content":"最近用vultr最便宜的服务器（一个月$5的样子）搭建了翻墙，上网速度杠杠的...用的LA的节点，延迟100ms到200ms不等","createdAt":1475043671273},{"id":9098,"originId":"57eb68ddea2fa420446d4385","articleId":2040,"userId":3101,"content":"看看你们用的什么VPN","createdAt":1475045597435},{"id":9099,"originId":"57ebbdd5ea2fa420446d43ad","articleId":2040,"userId":3102,"content":"租用虚拟机只是一个VPN是有点我的价格范围。尝试SOFTETHER和自由vpngate网关。选择在HTTPS协议之上的SOFTETHER。如果中国在其黑名单vpngate再看到这种中[中国VPN的文章.](https://www.bestvpnprovider.com/best-vpn-for-china/).","createdAt":1475067349735},{"id":9100,"originId":"57ec61bcea2fa420446d43c0","articleId":2040,"userId":220,"content":"蓝灯mac,ios 同时都用,而且无毒免费","createdAt":1475109308477},{"id":9101,"originId":"57eca6676ab98805449b95af","articleId":2040,"userId":3103,"content":"钓鱼帖。。。","createdAt":1475126887291},{"id":9102,"originId":"586b9cff226b054c679795fe","articleId":2040,"userId":3104,"content":"除了使用可靠的VPN软件，因为它是唯一的互联网被完全限制的国家，一些强烈推荐的，在先进国家的技术精明的人不能享受他们的生活在中国. [http://www.vpnlogics.com/best-china-vpn/](http://www.vpnlogics.com/best-china-vpn/)","createdAt":1483447551320},{"id":9103,"originId":"586ba064c59e6c686720822e","articleId":2040,"userId":3105,"content":"云梯\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1483448420350},{"id":9104,"originId":"586ce8d6226b054c6797963e","articleId":2040,"userId":146,"content":"收回之前的发帖，vultr翻墙速度不行，最近换到googlecloud，真心给力很多了","createdAt":1483532502570},{"id":9105,"originId":"586dca13df04f6ab76081d8c","articleId":2040,"userId":3106,"content":"我用的这个：http://www.51xiaoshuang.com/","createdAt":1483590163035},{"id":9106,"originId":"59e94bd0d081ecfd360d8793","articleId":2040,"userId":44,"content":"老铁\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1508461520493},{"id":9107,"originId":"5ae71fb81b02288048bd0b45","articleId":2040,"userId":229,"content":"黄金青蛙的[VyprVPN](https://www.goldenfrog.com/zh/vyprvpn?offer_id=174&aff_id=3008)或者[expressVPN](http://www.linkev.com/?a_fid=clover)\r\n\r\n在中国，更多好用的付费VPN参阅[本文](https://vpnchina.zdhweb.com)，长期更新，你可以根据自己的偏好选择注册所有推荐的vpn，然后根据使用效果，哪个好用就付款哪个。","createdAt":1525096376884},{"id":9108,"originId":"5d89ac5d5cbcc579bb9ea6b2","articleId":2040,"userId":208,"content":"我是参考的这个VPN推荐，[http://qiangwaikan.com/best-vpn-china/](http://qiangwaikan.com/best-vpn-china/)","createdAt":1569303645867},{"id":9109,"originId":"5d91b2e4865a9844a3019366","articleId":2040,"userId":1965,"content":"我在中国的时候我找了好多网站。。。然后我在找到了一个中国VPN网站。。。如果想知道VPN的信息请看以下。。。\r\n[付费vpn推荐](https://www.vpnnice.com/go/vpnnice/)\r\n[2019年便宜好用的翻墙vpn推荐](https://www.vpnnice.com)\r\n","createdAt":1569829604532},{"id":9110,"originId":"5dbcecbdece3813ad9ba5d78","articleId":2040,"userId":3081,"content":"## 上面的很多vpn在国内早就不能用了，楼上面的几个还在推荐？？？\r\n目前我自己在用的有两个，用了1年多了，稳定压倒一切：\r\n1.[主要使用的VPN，大部分时间使用](https://www.linkev.com/?offer=3monthsfree&a_fid=fastwebcn)，支持电脑（Win/Mac/Linux）、手机（iOS/安卓）和路由器等网络设备的客户端APP，速度很快，全年97%左右时间可用，目前有优惠。\r\n2.[作为替补的，主力不稳定时使用](http://go.affiliatescn.net/aff_c?offer_id=177&aff_id=6186&url_id=3079)，同样也支持电脑和手机各平台的客户端APP。\r\n参考谷歌上搜到的国内使用翻墙VPN的信息：\r\n[VPN推荐](https://www.fastwebcn.com/5-best-vpn-in-china/)","createdAt":1572662461542},{"id":9111,"originId":"5e41301a1225c9423dcd9c12","articleId":2040,"userId":237,"content":"其实就目前来看付费VPN服务仍是目前最好的方案。不是技术大神的话，就不要尝试自己搭建了，因为现在ip被墙的太多了，自己搭建的vpn是单ip，而且往往用的是大家都在用来搭建vpn的主机，流量特征明显，很容易导致这种VPS服务商ip大面积被屏蔽，BWG和Vultr就是例子，ip被墙的太多，很多服务商还只能付费换ip，换ip也可能是被墙的。\r\n买主机自己搭建的费用其实和买专业的付费vpn服务差不了多少，付费vpn服务一般体验更好，比如[我经常用的这个VPN](https://linkv.org/express)，用了3年多，速度快、稳定，但是界面是全英文，不支持中文。\r\n别用国内付费VPN服务，用过的应该知道教训，跑路的太多了。别想着“免费”，能用的付费vpn得花钱，不便宜，便宜的根本没法用，几十块一年的等于智商税。\r\n没有100%稳定高速的服务，在敏感时期，即使付费vpn也不能总是“高速稳定”，别指望一年365天任何时候都能随时1080p油管。一线国外付费VPN能保证的是“较好”的连接成功率和速度，不完美，但至少能流畅的访问google，gmail和不错的的油管速度，**保证95%左右的全年可用时间**。\r\n\r\n## 中国还能用的VPN：\r\n### 1.ExpressVPN - 点击下方获得优惠\r\n#### [优惠链接-现在一年送3个月](https://linkv.org/express)\r\n\r\n>这款VPN我用的最多，是我使用过的所有翻墙软件中最好用的。客户端支持度最全，你能想到的网络设备都有客户端APP，要是洗衣机能上网他可能会支持洗衣机客户端[狗头]，速度很快，已经用了3年多了，基本上能保证全年97%左右时间的正常使用。\r\n\r\n**主要特点：**\r\n*全球160+服务器所在地 / 掉线重连/无限流量 / 多协议，包括openVPN / 同时3台设备 / 256-bit AES加密 / 支付宝支付 / 支持路由器连接 / 完全IP隐藏 / 零日志 / 全终端覆盖 / 30天无条件退款/一键连接 / /Split tunneling技术 + 浏览器插件，同时访问内外网 / 速度相对最快*\r\n\r\n### 2.NordVPN - 点击下方获取优惠\r\n#### [优惠链接-最多优惠70%](http://linkv.org/nord)\r\n\r\n>这款VPN在国内用户也较多，我自己也在用，稳定性比ExpressVPN稍差，但速度也很快。\r\n\r\n**主要特点：**\r\n3400+服务器 / 无限流量 / 支持Onion over vpn / 一键连接 / 同时6台设备 / 支持P2P / 双重加密 / 支付宝支付 / 支持路由器连接 / CyberSec安全技术 / 零日志 / 专业客户端 /3年套餐最大优惠 /浏览器代理插件，同时访问内外网 / 30天内随时退款\r\n\r\n### 3.VyprVPN - 点击下方获得优惠\r\n#### [优惠链接](http://linkv.org/vypr)\r\n\r\n**主要特点：**\r\n70+自有服务器所在地，200,000+IP地址 / 无限流量 / 多协议，独家混淆协议 / 一键连接 / 同时5台设备 / 支持P2P / 变色龙加密，连接相对最稳定 / 支付宝支付 / 支持路由器连接 / NAT安全机制 / DNS加密 / 全终端覆盖 / 2年款最大优惠 / 30天无条件退款 / 按程序控制网络技术，同时访问内外网\r\n\r\n部分参考信息来源：[中国VPN推荐](https://www.vpnzhihu.com/best-vpn-for-windows-and-phone/)\r\n","createdAt":1581330458526},{"id":9112,"originId":"5e53c63d267721420912c49f","articleId":2040,"userId":3107,"content":"\r\n如果需要翻墙或者V2Ray可以试试 [ConnectSSR](https://www.connectssr.com/)**ConnectSSR** 。客服很耐心推荐","createdAt":1582548541865},{"id":9113,"originId":"5e5f048ca72b853f100458b8","articleId":2040,"userId":165,"content":"[ExpressVPN购买使用教程-大陆可用的VPN，速度快，抗封锁 2020版](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 Shadowsocks 代理，网络是CN2 Gia，连接速度快，并且官方保证IP可用，提供5个IP地址，支持中国的支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)\r\n","createdAt":1583285388093},{"id":9114,"originId":"5e788dbd64259617c49a274c","articleId":2040,"userId":3108,"content":"推荐一个免费的 https://play.google.com/store/apps/details?id=com.exnor.vray ","createdAt":1584958909269},{"id":9115,"originId":"5ea685f530176508da9b699a","articleId":2040,"userId":226,"content":"寻找免费VPN需要谨慎，给你推荐几个真正免费，而且比较安全，没有广告的 [Free VPN](https://www.topvpnguides.com/best-free-vpn/)：\r\n\r\n（1）[Hide.me Free VPN](https://www.topvpnguides.com/hide-me-vpn-review/)：这个VPN每月有10GB的免费流量，安全性比较高，而且不会有广告骚扰，还比较好用。\r\n\r\n（2）TunnelBear Free VPN：这个也是比较安全的纯免费。\r\n\r\n（3）Windscribe Free VPN：这个也是纯免费的，每月有10GB的流量。\r\n\r\n（4）[Hotspot Shield free VPN](https://www.topvpnguides.com/hotspot-shield-vpn-review/)：这个每月15GB免费流量。\r\n\r\n（5）Proton Free VPN ：这个免费流量无限制，但速度可能会慢点。\r\n\r\n另外，如果你在中国境内无法打开以上这些网站，给你推荐一个纯免费的VPN插件：[手把手教你如何科学上网](https://www.topvpnguides.com/how-to-set-up-and-use-a-vpn/)\r\n\r\n能用的[中国VPN翻墙软件](https://www.topvpnguides.com/best-vpn-for-china-cn/)很少了，且用且珍惜吧。希望对你有帮助。","createdAt":1587971573969},{"id":9116,"originId":"5eb508fee785ec40b04fb1bd","articleId":2040,"userId":225,"content":"也有很多不錯的[免費VPN](https://www.vpntuijian.tw/%e5%85%8d%e8%b2%bbvpn/)。 但是它們對於短期用戶更有用。 我同意，從長遠來看，最好使用付費VPN。","createdAt":1588922622556},{"id":9117,"originId":"5ebcdaade785ec40b04fc44a","articleId":2040,"userId":182,"content":"因为近几年的[VPN封杀](https://www.vpndada.com/china-ban-vpn/)，目前[好用的VPN翻墙软件](https://www.vpndada.com/best-vpns-for-china-cn/)已经不多，建议考虑国外的付费VPN，个人感觉值得推荐的有：\r\n\r\n| VPN 品牌 | VPN 评测 | 优惠链接 |\r\n| ------ | ------ | ------ |\r\n| **ExpressVPN** | [ExpressVPN评测](https://www.vpndada.com/expressvpn-review-cn/) | [**--> ExpressVPN优惠链接**](https://www.vpndada.com/go/expressvpn-discount-cn) |\r\n| **NordVPN** | [NordVPN评测](https://www.vpndada.com/nordvpn-review-cn/) | [**--> NordVPN优惠链接**](https://www.vpndada.com/go/nordvpn-cn) |\r\n| **VyprVPN** | [VyprVPN评测](https://www.vpndada.com/vyprvpn-review-cn/) | [**--> VyprVPN优惠链接**](https://www.vpndada.com/go/vyprvpn-cn) |\r\n| **PureVPN** | [PureVPN评测](https://www.vpndada.com/purevpn-review/) | [**--> PureVPN优惠链接**](https://www.vpndada.com/go/purevpn-cn) |\r\n*注：PureVPN还可以用于[翻墙回国](https://www.vpndada.com/vpn-into-china-cn/)*\r\n*参考资料：[中国VPN翻墙软件评测推荐](https://www.vpndada.com/best-vpns-for-china-cn/)*","createdAt":1589435053058},{"id":9118,"originId":"5ef7d6f2472c7975b04b7a1a","articleId":2040,"userId":174,"content":"推荐光年VPN。无限流量，SSR节点，采用BGP中继，速度快稳定。注册还可以免费VIP试用。现在有限时特惠活动24+6。送大家一个折扣码：2WEs5aVO\r\n\r\n![光年VPN](//static.cnodejs.org/Fh0tPq5vFtt14fLHcL1RnbD-PojW)\r\n\r\nhttps://lightyearvpn.com/\r\nhttps://lightyearapp.life/","createdAt":1593300722692},{"id":9119,"originId":"5f19317d4b61050e36e7bd54","articleId":2040,"userId":233,"content":"2020年安卓系统的提子推荐\r\nhttps://github.com/jiashihar/yanfa","createdAt":1595486589402},{"id":9120,"originId":"5f3399fb2799ce64a0aabe09","articleId":2040,"userId":177,"content":"目前就是用的这个还可以的了 还有免费用 \r\n\r\n[点击获取](https://github.com/myjiasuqi/jiasu/wiki)\r\n* \r\n* \r\n![wordpress.png](//static.cnodejs.org/Fim-pcDhpibni0E2HIlwP0TCEF1S)","createdAt":1597217275425},{"id":9121,"originId":"5f4c85dde8a599751bb51927","articleId":2040,"userId":238,"content":"[ConnectSSR](https://www.connectyy.com/) 推荐给大家蛮好用的","createdAt":1598850525745},{"id":9122,"originId":"5f5ef0e4c1c67a7dd9afe75b","articleId":2040,"userId":178,"content":"27 美元一年\r\n250G 流量每个月\r\n使用方便，速度正常稳定，不会被封。我自己使用多年的。\r\nhttps://reurl.cc/MdXAlv","createdAt":1600057572561},{"id":9123,"originId":"5f6db40272af8c02d3f8d5f4","articleId":2040,"userId":210,"content":"阿里云测速下来的[VPN推荐](https://wall101.com/fanqiang-vpn/)\r\n\r\n我比较推荐的是：\r\n[光年VPN](https://wall101.com/fanqiang-vpn/lightyearvpn/)\r\n[Express](https://wall101.com/fanqiang-vpn/expressvpn/)\r\n[Astrill](https://wall101.com/fanqiang-vpn/astrillvpn/)\r\n[Panda](https://wall101.com/fanqiang-vpn/pandavpn/)","createdAt":1601025026743},{"id":9124,"originId":"5febf9e15393a54ce1545f71","articleId":2040,"userId":53,"content":"在网上搜罗了一些热门的今年[中国vpn翻墙](https://wallvpn.com/best-vpn-china/)工具。推荐给你吧：建议采用付费的，都有售后期，不好用可以退。我用了其中的2个还可以的。看你个人对网络的需求。\r\n\r\n**TOP 1: ExpressVPN：速度最快，安全性高**\r\nExpressVPN在我们测试的上百个VPN中排名第一。ExpressVPN以速度快、翻墙稳定、安全性高等优点成为最佳的中国VPN。\r\n\r\n* 速度：非常快\r\n* 稳定性：很稳定\r\n* 价格：$6.67/月\r\n* 允许同时连接的设备数：5台设备\r\n* 客服：24/7人工客服\r\n* 付款方式：支付宝、银联卡、信用卡、Paypal、比特币\r\n* 退款保证：30天退款保证\r\n* 官网：[ExpressVPN.com](https://wallvpn.com/go/expressvpn/)\r\n\r\nExpressVPN怎么样？ExpressVPN在中国还能使用吗？\r\n\r\nExpressVPN是国际最知名的VPN服务商，在中国也有很大的名气，是中国网民翻墙的首选。它唯一的缺点就是价格较贵，需要6.67美金每月（买一年赠送3个月）。但它贵是有它的道理的，即使在中国最敏感时期，在中国也一直能使用，也可以保持稳定快速的连接。很多价格便宜的翻墙软件，虽然便宜，但经常被长城防火墙封锁而无法使用或者连接速度非常慢。\r\n\r\nExpressVPN采用银行级别的加密技术，并提供包括OpenVPN，L2TP / IPsec，SSTP和PPTP在内的多种VPN协议，它还会自动检测你的设备类型，并为你选择最佳的VPN协议。除了强大的加密之外，ExpressVPN还采用严格的零日志策略，不会收集和记录用户的任何网络日志。ExpressVPN可用于Windows电脑、Mac电脑、Linux电脑、iPhone手机、iPad平板电脑、Android手机、路由器、谷歌Chrome浏览器、火狐浏览器等。\r\n\r\nExpressVPN在全球拥有3000多台服务器，这些服务器遍布全球94个国家的160多个地区。为了更好的服务中国VPN用户，ExpressVPN还在香港、台湾、新加坡、泰国、日本、韩国、马来西亚等地区部署了大量服务器。你可以通过连接中国周边的这些服务器来翻墙访问Youtube、Facebook、Twitter、Google、Skype、Telegram等社交平台。也可以通过连接美国服务器来访问Netflix、Hulu、HBO等流媒体。此外，ExpressVPN还在其APP中内置了很多强大的功能，比如Kill Switch，拆分隧道、IP和DNS泄漏保护、广告拦截等功能。\r\n\r\nExpressVPN除了提供接受多种付款方式之外，还支持30天退款保证。这也就意味着在30天内，无论你有任何不满意的地方，都可以申请全额退款。\r\n\r\n**TOP 2 : PureVPN：$1.32/月，性价比最高的VPN**\r\n\r\nPureVPN是一家老牌的VPN翻墙软件服务商，它线路稳定、速度快，价格便宜，且支持翻墙回国，是最好的中国VPN之一，也是性价比最高的VPN。\r\n\r\n* 稳定性：可提供稳定快速的翻墙（支持翻墙回国）\r\n* 价格：$1.32/月\r\n* 允许同时连接的设备数：10台设备\r\n* 客服：24/7人工客服\r\n* 付款方式：支付宝、Visa信用卡、银联卡、Paypal、比特币等\r\n* 退款保证：31天无理由退款\r\n* 官网：[PureVPN.com](https://wallvpn.com/go/purevpn/)\r\n\r\nPureVPN成立于2006年，在全球的140多个国家拥有6500多台服务器和300000多个IPs，中国用户可通过连接台湾、澳门、香港、日本、泰国和越南等中国周边服务器，以获取快速稳定的连接，中国网民可以通过PureVPN翻墙访问Google、Gmail、Youtube、Facebook、Twitter、Instagram、Pinterest、WhatsApp和Telegram等，也可以通过连接PureVPN位于美国和英国的服务器去访问Netflix、Hulu、Amzon Prime Video和BBC iPlayer等流媒体。此外，PureVPN在中国也布置了12台服务器（6台在北京，6台在上海），可支持海外华人翻墙回国访问中国的腾讯视频、爱奇艺、新浪微博、QQ音乐、优酷视频、网易新闻、抖音、酷狗音乐、土豆视频、喜马拉雅等。\r\n\r\n与ExpressVPN一样，PureVPN也采用银行级别的AES-256位加密方式，并支持多种VPN协议。PureVPN可用于Windows电脑、Mac电脑、Linux电脑、iPhone手机、iPad平板电脑、Android手机、Chrome浏览器、Firefox浏览器和路由器等。\r\n\r\n此外，PureVPN还为中国用户提供了专用的中文版本官方网站和中文版本的客户端。\r\n\r\n**TOP 3：Surfshark：唯一不限设备数量的VPN**\r\n\r\nSurfshark公司成立于2018年，是一家相对年轻的VPN服务商，但它却是为数不多的在中国还能使用的VPN，且它是市面上唯一一个允许同时连接无数台设备的VPN翻墙软件。\r\n\r\n* 价格：$2.21/月\r\n* 允许同时连接的设备数：无数台设备\r\n* 客服：24/7人工客服\r\n* 付款方式：Visa信用卡，Paypal，Google Pay，AmazonPay和比特币\r\n* 退款保证：30天退款保证\r\n* 官网：[SurfsharkVPN](https://wallvpn.com/go/surfsharkvpn/)\r\n\r\n虽然Surfshark很年轻，但它确是一款非常强大的VPN翻墙软件，它独有的加密技术可轻松绕过长城防火墙的封锁。Surfshark在全球的63个国家拥有超过1700台服务器，为了给中国用户提供稳定而快速的翻墙服务，Surfshark在中国附近的香港，台湾和新加坡等地区也部署了大量的服务器，你可以借助Surfshark位于中国附近的服务器轻松翻越长城防火墙，并享受稳定快速的连接。\r\n\r\nSurfShark使用AES 256位加密方式和严格的零日志记录策略，且在其APP中还内置了Kill Switch、IP/DNS泄漏保护、广告拦截、拆分隧道等功能。这些强大的功能可有效的保护用户的隐私安全。\r\n\r\nSurfShark最大的亮点是它允许同时连接无数台设备。且它可以用于Windows电脑、Mac电脑、Linux电脑、Android手机、iPhone手机、iOS平板电脑、Chrome浏览器和Firefox浏览器。\r\n\r\n**TOP 4：Ivacy VPN：$1/月，价格最低的VPN翻墙软件之一**\r\n\r\nIvacy VPN是一家总部位于新加坡的VPN服务商，公司成立于2007年。虽然它的知名度不高，但它却是为数不多的在中国仍然可以使用的VPN，也是价格最低的VPN翻墙软件之一。\r\n\r\n* 价格：$1/月\r\n* 允许同时连接的设备数：10台设备\r\n* 客服：24/7人工客服\r\n* 付款方式：支付宝，信用卡，Paypal，银联卡，比特币\r\n* 退款保证：31天退款保证\r\n* 官网：[IvacyVPN](https://wallvpn.com/go/ivacyvpn/)\r\n\r\nIvacyVPN至今已有十多年的历史，它提供了军事级别的256位加密方式和多种VPN协议，且在APP中内置了Kill Switch、IPv6泄漏保护、拆分隧道、恶意软件防护、端口转发、智能连接等高级功能。\r\n\r\nIvacy VPN在全球100多个地区拥有2000多个服务器，并在中国周边也布置了大量的服务器，比如香港、日本和韩国等地区。此外，Ivacy VPN在中国内地也部署了6台服务器（3台在上海，3台在北京）。中国VPN用户可以借助Ivacy VPN翻墙访问被限制的国外网站和工具，海外华人也可以借助Ivacy VPN翻墙回国访问中国受限制的网站和服务。\r\n\r\n与其他顶级的VPN一样，Ivacy VPN也适用于iOS，Android，Windows，Linux，Kodi，xBox，PS4，Roku，路由器，智能电视等设备。\r\n\r\n现在越来越多的翻墙工具真的搞几天就嗝屁了，这上面的一些能存活下来不容易啊。在中国采用翻墙软件还是需要多多的了解[翻墙与科学上网指南](https://wallvpn.com)，避免有不必要的麻烦。\r\n","createdAt":1609300449700},{"id":9125,"originId":"5ff6b8c2a2a21376ddf6d416","articleId":2040,"userId":112,"content":"我想这个网站上的很多网友都会自己搭建梯子，然后配合[翻墙软件](https://www.vpndada.com/best-vpns-for-china-cn/)使用吧。这几年以来[免费VPN](https://www.fanqiangzhe.com/post/free-vpn-guide/)已经靠不住了。虽然目前网上的[VPN推荐](https://www.vpndada.com/best-vpns-for-china-cn/)有很多，但不同VPN在不同系统的表现是不太一样的，一个好用的[电脑VPN](https://www.vpndada.com/vpn-for-pc-cn/)未必同时也是好用的[安卓VPN](https://www.vpndada.com/android-vpn-for-china-cn/)，所以最好在不同的操作系统都试试看！","createdAt":1610004674897},{"id":9126,"originId":"6036fd9c4655ea0fc221834d","articleId":2040,"userId":211,"content":"# 为什么推一堆不能用的[梯子](https://dr-wall.com/tizi/)？\r\n## VPN都不能翻墙了，SSR才是未来\r\n[翻墙的技术](https://dr-wall.com/)早已更新换代了，不能用的就不要推. Dr. Wall 给你推荐一些[好用的VPN](https://dr-wall.com/best-vpn-china/)","createdAt":1614216604862},{"id":9127,"originId":"6073bebf4d20cbe8b168b5f8","articleId":2040,"userId":185,"content":"哇，这层楼很热闹啊，说说我的看法吧:\r\n## 国外具有私有协议[好用的V PN](https://qiangwaikan.com/bvc/)还是有几款\r\nS SR、V 2ray等更适合折腾[翻 墙软件](https://qiangwaikan.com/gvc/)，还要自己配置电脑、安卓、苹果手机的app。","createdAt":1618198207249},{"id":9128,"originId":"54525b00d0c2f0fe2f533ad8","articleId":2041,"userId":3110,"content":"买个 vps，搭个 shadowsocks，我不细什么大神","createdAt":1414683392085},{"id":9129,"originId":"5452d63dd0c2f0fe2f533aea","articleId":2041,"userId":3111,"content":"人肉翻墙算不算.","createdAt":1414714941164},{"id":9130,"originId":"5452f274d0c2f0fe2f533b17","articleId":2041,"userId":1801,"content":"一直在用 [熊猫翻滚](https://www.pandafan.org/)","createdAt":1414722164398},{"id":9131,"originId":"5452f321d0c2f0fe2f533b19","articleId":2041,"userId":3112,"content":"[云梯](http://ugetvpn.com/?r=694b573a7aadd55a) 用户","createdAt":1414722337163},{"id":9132,"originId":"5452fc38d0c2f0fe2f533b30","articleId":2041,"userId":3113,"content":"红杏出墙的噻。。。","createdAt":1414724664907},{"id":9133,"originId":"5452fe01d0c2f0fe2f533b36","articleId":2041,"userId":3114,"content":"同shadowsocks搭个梯子，买的vpn大都太卡了","createdAt":1414725121186},{"id":9134,"originId":"54530fb9c7386fa050574386","articleId":2041,"userId":952,"content":"替朋友打个广告 [proxy](http://woniu.yousublime.com/)","createdAt":1414729657404},{"id":9135,"originId":"545340c5c7386fa0505743af","articleId":2041,"userId":18,"content":"vpn 啊","createdAt":1414742213938},{"id":9136,"originId":"5a4c271f9ea8f8bc490e6431","articleId":2041,"userId":3115,"content":"多年老牌子，我一直在用这个http://t.cn/RYkkbkG [老品牌](https://www.waimaoribao.com/waimaogongju/21.html)","createdAt":1514940191003},{"id":9137,"originId":"5b0987dd29e6e510415b24f0","articleId":2041,"userId":3116,"content":"目前稳定可用的\r\nhttps://www.kexuesw2.com/","createdAt":1527351261938},{"id":9138,"originId":"5d27f4d9fa8ef0094e064497","articleId":2041,"userId":1962,"content":"[中国VPN翻墙软件推荐，最好用的付费VPN，SSR节点分享](https://cnodejs.org/topic/5b101b058a4f51e140d9440c)","createdAt":1562899673762},{"id":9139,"originId":"5e5f0515a72b853f100458cd","articleId":2041,"userId":165,"content":"[ExpressVPN购买使用教程-大陆可用的VPN，速度快，抗封锁 2020版](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 Shadowsocks 代理，网络是CN2 Gia，连接速度快，并且官方保证IP可用，提供5个IP地址，支持中国的支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)\r\n","createdAt":1583285525360},{"id":9140,"originId":"5e793fea64259617c49a27ea","articleId":2041,"userId":231,"content":"[搬瓦工(CN2)购买使用新手教程带优惠码-2020版](https://www.fq7.org/bwg.html)\r\n购买搬瓦工，搭建ssr或者v2ray，并且是CN2网络，上网体验很好。","createdAt":1585004522771},{"id":9141,"originId":"5f1937814b61050e36e7bd88","articleId":2041,"userId":233,"content":"稳定运营了三四年的安卓穿墙工具，国外注册，多年在中国运作经验，\r\nhttps://github.com/jiashihar/yanfa\r\n连接快速稳定，多线路选择，永不被封","createdAt":1595488129335},{"id":9142,"originId":"5f339c2e2799ce64a0aabe28","articleId":2041,"userId":177,"content":"用这个有勉废体验的吧 \r\n[https://github.com/myjiasuqi/jiasu/wiki](https://github.com/myjiasuqi/jiasu/wiki)","createdAt":1597217838890},{"id":9143,"originId":"5f6db49c72af8c02d3f8d609","articleId":2041,"userId":210,"content":"阿里云测速下来的[VPN推荐](https://wall101.com/fanqiang-vpn/)\r\n\r\n我比较推荐的是：\r\n[光年VPN](https://wall101.com/fanqiang-vpn/lightyearvpn/)\r\n[Express](https://wall101.com/fanqiang-vpn/expressvpn/)\r\n[Astrill](https://wall101.com/fanqiang-vpn/astrillvpn/)\r\n[Panda](https://wall101.com/fanqiang-vpn/pandavpn/)","createdAt":1601025180083},{"id":9144,"originId":"5fe1f63998427e0a4e6a9eba","articleId":2041,"userId":112,"content":"如果有条件有时间，可以考虑自己搭建梯子，需要购买国外的VPS服务器，然后使用SSR、V2Ray、Trojan等技术（都是开源免费的）搭建。如果不懂技术或懒得折腾，可以参考网上的[VPN推荐](https://www.vpndada.com/best-vpns-for-china-cn/)购买靠谱的[电脑VPN](https://www.vpndada.com/vpn-for-pc-cn/)作为科学上网的工具。","createdAt":1608644153237},{"id":9145,"originId":"5ff2d6575393a52fbc546899","articleId":2041,"userId":53,"content":"要科学上网，那就需要知道[科学上网的方法](https://wallvpn.com)，在一般情况下都需要采用VPN来实现，以下给你推荐几款目前比较好用的[中国VPN推荐](https://wallvpn.com/best-vpn-china/)：\r\n\r\n**TOP 1：[ExpressVPN](https://wallvpn.com/go/expressvpn/)：最佳的中国VPN翻墙软件\r\nTOP 2：[PureVPN](https://wallvpn.com/go/purevpn/)：1.32美金/月，性价比最高且支持翻墙回国的VPN\r\nTOP 3：[Surfshark](https://wallvpn.com/go/surfsharkvpn/)：唯一不限设备数量的VPN\r\nTOP 4：[Ivacy VPN](https://wallvpn.com/go/ivacyvpn/)：1.16美金/月，价格最低的VPN翻墙软件之一\r\nTOP 5：[North VPN](https://wallvpn.com/go/nordvpn/)：支持6台设备同时在线，30天售后**。\r\n\r\n如果群主和其他小伙伴有更好的欢迎跟帖呀。~","createdAt":1609750103657},{"id":9146,"originId":"6037012c4655ea3812218366","articleId":2041,"userId":211,"content":"# [科学上网](https://dr-wall.com)要先了解科学吧\r\n翻墙的技术与原理都要懂一些，这样出问题了自己也好解决。上来就找一些[梯子](https://dr-wall.com/tizi/)不是找着被骗么。","createdAt":1614217516333},{"id":9147,"originId":"6073bcc84d20cb882468b5e9","articleId":2041,"userId":185,"content":"## [翻 墙与科 学上网详解](https://qiangwaikan.com/gvc/)\r\n可以看看这篇文章，里面有一些翻 墙教程讲解，自己搭建梯 子太麻烦了，还是用[翻 墙V PN](https://qiangwaikan.com/bvc/)更方便哦。","createdAt":1618197704561},{"id":9148,"originId":"607195ee4d20cb770f68b320","articleId":2042,"userId":109,"content":"1. 开发阶段： 升级依赖包，升级开发技术\r\n2. 部署阶段： 容器化","createdAt":1618056686365},{"id":9149,"originId":"6073b5bd4d20cb60a868b59c","articleId":2042,"userId":117,"content":"只升级node版本，不升级依赖库应该没什么问题","createdAt":1618195901308},{"id":9150,"originId":"6073b6074d20cb2e6f68b5a3","articleId":2042,"userId":33,"content":"ฏ๎๎๎๎๎๎๎๎๎ฏฏด้้้้้็็็็็้้้้้็็็็็้้้้้็็็้็็็ฏ๎็็็...","createdAt":1618195975215},{"id":9151,"originId":"6073b6674d20cb52fd68b5ac","articleId":2042,"userId":358,"content":"1. 日常 CI 把 LTS 的几个版本都配了，杜绝兼容性问题的延后发现。\r\n2. 能用 docker 用 docker，不能用的，把应用的版本打包到应用本身，不依赖服务器的统一版本。\r\n3. 尽可能快的升级是需要保障的，有时候费心优化一年，都不如升级下版本带来的性能提升大。\r\n\r\n可以看下我以前写的科普文：https://zhuanlan.zhihu.com/p/39226941","createdAt":1618196071158},{"id":9152,"originId":"606d6a714d20cbfbc668aac0","articleId":2043,"userId":41,"content":"用 eslint 来限制吧\r\nhttps://eslint.org/docs/rules/consistent-this","createdAt":1617783409107},{"id":9153,"originId":"606d74484d20cba25d68aaf5","articleId":2043,"userId":98,"content":"不是什么时候都记得箭头函数与普通函数的区别，所以这样写是100%不出错的写法","createdAt":1617785928406},{"id":9154,"originId":"606e60b94d20cb7a6468ac33","articleId":2043,"userId":128,"content":"老项目呗","createdAt":1617846457772},{"id":9155,"originId":"606eadb64d20cb4e6d68ad71","articleId":2043,"userId":1947,"content":"主要这种你调试的时候好调试","createdAt":1617866166394},{"id":9156,"originId":"606ed6624d20cb136368ae27","articleId":2043,"userId":2,"content":"老项目，什么妖魔鬼怪都有","createdAt":1617876578401},{"id":9157,"originId":"606ee9224d20cb53d268ae52","articleId":2043,"userId":296,"content":"[@oyosc](/user/oyosc) \r\n没感觉啊这个。","createdAt":1617881378539},{"id":9158,"originId":"606ee9254d20cb7e1968ae56","articleId":2043,"userId":296,"content":"[@dingyuanwu](/user/dingyuanwu) \r\n[@daGaiGuanYu](/user/daGaiGuanYu) \r\n并不，新项目。。。\r\n","createdAt":1617881381834},{"id":9159,"originId":"6073a0094d20cb02f168b4fa","articleId":2043,"userId":22,"content":"因为很多人是复制粘贴式写代码，其他他也不知道具体什么意思，反正写出来的代码能正常运行就 ok 了","createdAt":1618190345044},{"id":9160,"originId":"588463fc171f3bc843f6011e","articleId":2044,"userId":41,"content":"淘宝镜像快，不翻墙也可以用。","createdAt":1485071356514},{"id":9161,"originId":"588466a55d4612c33919e93c","articleId":2044,"userId":640,"content":"官方不好啊，里面有很多不和谐的东西","createdAt":1485072037516},{"id":9162,"originId":"58846b711dc8ff8739cbc589","articleId":2044,"userId":516,"content":"有的时候你npm install 半天还在转圈的时候你就知道国内用淘宝源还是很好用的","createdAt":1485073265182},{"id":9163,"originId":"5884789e1dc8ff8739cbc593","articleId":2044,"userId":146,"content":"因为有**GFW**，不知道这东西养活了多少人...","createdAt":1485076638131},{"id":9164,"originId":"5885555b171f3bc843f60143","articleId":2044,"userId":2771,"content":"因为墙，速度区别太大了，而且镜像和官方基本一致，大家为什么要自己浪费不该浪费的时间。","createdAt":1485133147985},{"id":9165,"originId":"58856fa01dc8ff8739cbc5c5","articleId":2044,"userId":755,"content":"至少快5倍~~","createdAt":1485139872892},{"id":9166,"originId":"58857628250bf4e2390e9ed3","articleId":2044,"userId":508,"content":"体验下啥叫速度","createdAt":1485141544348},{"id":9167,"originId":"5885a5d5250bf4e2390e9ede","articleId":2044,"userId":1949,"content":"Facebook yarn飘过","createdAt":1485153749424},{"id":9168,"originId":"5885a7891dc8ff8739cbc5dd","articleId":2044,"userId":111,"content":"http://news.xinhuanet.com/info/2017-01/22/c_136004336.htm","createdAt":1485154185692},{"id":9169,"originId":"5886dac41dc8ff8739cbc617","articleId":2044,"userId":3118,"content":"vpn才是王道.","createdAt":1485232836959},{"id":9170,"originId":"588722545d4612c33919e9ce","articleId":2044,"userId":3119,"content":"淘宝镜像快，不翻墙也可以用。","createdAt":1485251156364},{"id":9171,"originId":"58899e501dc8ff8739cbc65d","articleId":2044,"userId":3073,"content":"因为中国有道墙，哥们。。。^_^","createdAt":1485413968059},{"id":9172,"originId":"5889b1195d4612c33919ea06","articleId":2044,"userId":387,"content":"淘宝镜像很快。","createdAt":1485418777861},{"id":9173,"originId":"58904d1f1683265c18866a16","articleId":2044,"userId":314,"content":"中国有道长城防火墙。。。\n\n来自酷炫的 [CNode客户端](https://github.com/lzq920)","createdAt":1485851935856},{"id":9174,"originId":"589076d10a36129b17dd8bca","articleId":2044,"userId":3120,"content":"just testing","createdAt":1485862609194},{"id":9175,"originId":"58921273800323b708f7bb8a","articleId":2044,"userId":3121,"content":"现在自建VPN都是犯法的了。","createdAt":1485967987514},{"id":9176,"originId":"591947ed9e32cc84569a6f91","articleId":2044,"userId":3122,"content":"[@xiami2046](/user/xiami2046) 哎，在天朝犯法都不知道犯的是哪部法律的哪一条","createdAt":1494829037464},{"id":9177,"originId":"59194fd3ba8670562a40f11c","articleId":2044,"userId":3123,"content":"因为这里是天朝","createdAt":1494831059832},{"id":9178,"originId":"59196c5aba8670562a40f12b","articleId":2044,"userId":3124,"content":"用淘宝镜像遇到过一个问题，部署到国外服务托管时，国外有时连不上淘宝镜像，如heroku，😂","createdAt":1494838362095},{"id":9179,"originId":"5919889b9e32cc84569a6fb7","articleId":2044,"userId":1739,"content":"不用也没什么问题","createdAt":1494845595757},{"id":9180,"originId":"591a62093504ce1c2ac45cad","articleId":2044,"userId":3125,"content":"因为中国和外国有堵墙，不翻墙的可以通过淘宝的镜像来下载。而且淘宝的镜像做的很不错，速度很快。","createdAt":1494901257895},{"id":9181,"originId":"591b9a6cba8670562a40f1dc","articleId":2044,"userId":3126,"content":"因为好多模块下载都在国外，不用的话有时候下载特别慢，  或者根本下不了 ","createdAt":1494981228164},{"id":9182,"originId":"591b9f639e32cc84569a704b","articleId":2044,"userId":3127,"content":"近来用淘宝都安装不成功，让挂vpn用原生的\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1494982499566},{"id":9183,"originId":"591c184dba8670562a40f20d","articleId":2044,"userId":3128,"content":"不知道为什么我的node 项目 用cnpm 来装模块的时候，会多出很多下划线开头的文件夹，导致我启服务cpu占用在50%。之前一直没找到cpu占用高的原因,偶然间发现的。改用npm后，cpu占用才回归正常。","createdAt":1495013453070},{"id":9184,"originId":"591cec4ed371b6372a8afb02","articleId":2044,"userId":3129,"content":"淘宝镜像速度快\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1495067726648},{"id":9185,"originId":"6072847c4d20cb205568b3ca","articleId":2044,"userId":165,"content":"[ExpressVPN-大陆翻墙首选速度快稳定抗封锁的优质VPN](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 SSR，V2ray 代理，网络是CN2 GIA，连接速度快，并且官方保证IP可用，提供5个IP地址，支持支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)","createdAt":1618117756846},{"id":9186,"originId":"5a07152af31111711f3a770c","articleId":2045,"userId":3130,"content":"何来墙外上不去之说？","createdAt":1510413610019},{"id":9187,"originId":"5a0912e9310be7561d4c040b","articleId":2045,"userId":18,"content":"等要求实名制的时候再搬也不迟吧？","createdAt":1510544105310},{"id":9188,"originId":"5a0c1b60310be7561d4c04bf","articleId":2045,"userId":1178,"content":"[@alsotang](/user/alsotang) 顶风而上的最好结果是网站被墙。","createdAt":1510742880165},{"id":9189,"originId":"5a0c1ed2e2f4b8ea2249646f","articleId":2045,"userId":21,"content":"[@dou4cc](/user/dou4cc) \r\n都是中文，墙外上意义何在？\r\n难道我们先翻墙，然后再访问？\r\n华侨node开发毕竟少数吧。","createdAt":1510743762835},{"id":9190,"originId":"5a0c4383f9c5b3853958d93e","articleId":2045,"userId":1178,"content":"[@zy445566](/user/zy445566) 要想让爬虫、archive.is、tor正常访问CNode，都得确保其在国外的连通性。","createdAt":1510753155468},{"id":9191,"originId":"5a0c43e8e2f4b8ea22496474","articleId":2045,"userId":1178,"content":"[@zy445566](/user/zy445566) 墙内的人知道翻出去，墙外的人不知道翻进来。毕竟站内搜索使用谷歌已经是对社区成员翻墙能力的钦定。","createdAt":1510753256498},{"id":9192,"originId":"5a0cf72bf9c5b3853958d952","articleId":2045,"userId":1835,"content":"小众技术论坛还怕被墙？","createdAt":1510799147741},{"id":9193,"originId":"5a22735a6190c8912ebacece","articleId":2045,"userId":1178,"content":"[@alsotang](/user/alsotang) RubyChina已经挂了，你考虑一下。","createdAt":1512207194569},{"id":9194,"originId":"5a229c13110a338547d6e3bb","articleId":2045,"userId":383,"content":"[@dou4cc](/user/dou4cc) ？![](https://ws1.sinaimg.cn/large/006tNc79ly1fm2p2uqtiyj309y03haaf.jpg)\r\n![](https://ws3.sinaimg.cn/large/006tNc79ly1fm2p312msoj30lg0k9aek.jpg)","createdAt":1512217619378},{"id":9195,"originId":"5a22a4748eab6ee92a694616","articleId":2045,"userId":1178,"content":"[@vanishcode](/user/vanishcode) 我回复时是坏的，现在确实好了。","createdAt":1512219764144},{"id":9196,"originId":"5a24b8b46190c8912ebacf0e","articleId":2045,"userId":18,"content":"[@dou4cc](/user/dou4cc) 别急。封了再搬不迟","createdAt":1512356020052},{"id":9197,"originId":"5a26671e8230827a182934a2","articleId":2045,"userId":146,"content":"这要是封了，我就疯了... 纯技术论坛... 好阔怕的某家","createdAt":1512466206738},{"id":9198,"originId":"5a2e364a8230827a18293604","articleId":2045,"userId":1178,"content":"[@alsotang](/user/alsotang) 有定期把全站备份到国外吗？","createdAt":1512977994299},{"id":9199,"originId":"5a2e43529807389a1809f2d7","articleId":2045,"userId":18,"content":"[@dou4cc](/user/dou4cc) 没","createdAt":1512981330128},{"id":9200,"originId":"5a2e6541f15b4f306d2f0243","articleId":2045,"userId":1178,"content":"[@alsotang](/user/alsotang) 小心被删库，参见萌百","createdAt":1512990017300},{"id":9201,"originId":"5a3110b6d92f2f5b185ace2b","articleId":2045,"userId":535,"content":"怎么墙外上不去了？我用VPN上cnode妥妥的","createdAt":1513164982819},{"id":9202,"originId":"5a33366dd1536726354b7da3","articleId":2045,"userId":354,"content":"最终还是得实名认证的，国内对于回帖之类的功能管控会逐渐加强。","createdAt":1513305709845},{"id":9203,"originId":"607284484d20cb745d68b3c0","articleId":2045,"userId":165,"content":"[ExpressVPN-大陆翻墙首选速度快稳定抗封锁的优质VPN](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 SSR，V2ray 代理，网络是CN2 GIA，连接速度快，并且官方保证IP可用，提供5个IP地址，支持支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)","createdAt":1618117704854},{"id":9204,"originId":"606fcbe54d20cbda6b68aff0","articleId":2046,"userId":145,"content":"```javascript\r\nlet package;\r\ntry {\r\n  package = require('d21d12');\r\n} catch (err) {\r\n  package = require('http');\r\n}\r\n```\r\n这样 ?","createdAt":1617939429426},{"id":9205,"originId":"606fb5414d20cb099f68af61","articleId":2047,"userId":33,"content":"后续： 接入了cdn解决了问题，，腾讯云cdn支持非常细的回源策略，，图片回到oos，正常的请求回到自己服务器","createdAt":1617933633523},{"id":9206,"originId":"606d67de4d20cb501568aaaf","articleId":2049,"userId":3132,"content":"这是 .d.ts 文件的语法，是 typescript 的相关语句。\r\nhttps://www.typescriptlang.org/\r\nhttps://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html","createdAt":1617782750585},{"id":9207,"originId":"602f12de03d79777186701ef","articleId":2051,"userId":3,"content":"武汉nodejs确实有点少，我也是在武汉","createdAt":1613697758382},{"id":9208,"originId":"602f1a7703d797eb0467020c","articleId":2051,"userId":111,"content":" 随着国内互联网从web应用转向到 大数据，人工智能 越来越多的IT企业在转型 不光是互联网企业象网易开始养猪，连传统IT企    业华为也开始用人工智能养猪了 \r\n![Screenshot_1.jpg](//static.cnodejs.org/FpLXn6nN3J9rWHehUIhCEJOImwyb)\r\nfrom  https://www.sohu.com/a/450952674_612784\r\n大数据，人工智能的主要是cpu密集型应用 ,更多适合rust,c++ 的场景   nodejs以后的应用场景主要集中在前端工具链 就象面试造火箭，入职拧螺丝，入职以后不 是让你天天造火箭 但不会造火箭，就没有拧螺丝的机会   noodes在前端的作用也一样，虽然前端不是天天写nodejs代码 但是不会nodejs,前端面试都过不了 ","createdAt":1613699703463},{"id":9209,"originId":"602f2e2203d7977a72670272","articleId":2051,"userId":2142,"content":"现在国内大多数人对node的理解：一种非主流的后端编程语言。\r\n未来我觉得，除非云原生大规模成熟并普及，否则node依然不会火\r\n\r\n国内用node写纯后端核心服务代码的特别少，但是我们公司是其中一家\r\n\r\n楼主如果能接受到广州工作，欢迎给我们投递简历","createdAt":1613704738080},{"id":9210,"originId":"602f4b9503d79734a16702d5","articleId":2051,"userId":249,"content":"[@zhaochy1990](/user/zhaochy1990) 谢谢，我还是呆在武汉发展","createdAt":1613712277544},{"id":9211,"originId":"602f4bd803d7974e756702d9","articleId":2051,"userId":249,"content":"[@yakczh](/user/yakczh) 我觉得猪很可爱","createdAt":1613712344115},{"id":9212,"originId":"602f4c0203d797660f6702dd","articleId":2051,"userId":249,"content":"[@darrenliuwei](/user/darrenliuwei) 最近多了几家，但是还是不超过10家","createdAt":1613712386914},{"id":9213,"originId":"602f7d5303d797502b6703bd","articleId":2051,"userId":2,"content":"我知道小安科技在使用Node作为服务端开发，是一家主要做共享出行解决方案的公司，http://xiaoantech.com","createdAt":1613725011852},{"id":9214,"originId":"602f881a03d797ffea670440","articleId":2051,"userId":90,"content":"纯后端，转java吧。","createdAt":1613727770183},{"id":9215,"originId":"6030c48c03d7973386670836","articleId":2051,"userId":74,"content":"good","createdAt":1613808780289},{"id":9216,"originId":"60319f1e03d7970f286709f5","articleId":2051,"userId":701,"content":"武汉不知道,为我的前东家打个call,不少项目都是用node作为纯后端开发的.不过坐标在杭州","createdAt":1613864734305},{"id":9217,"originId":"606529dd2357ddf487f9e2d4","articleId":2051,"userId":3134,"content":"楼主找到工作了吗，我们公司70%服务都是通过node，坐标武汉","createdAt":1617242589949},{"id":9218,"originId":"606c242c4d20cb77d068a6f4","articleId":2051,"userId":249,"content":"[@JianGuoPaPa](/user/JianGuoPaPa) 我在武汉，主职前端，然后现在后端的php我也在写，我考虑抽一部分接口用node来实现","createdAt":1617699884320},{"id":9219,"originId":"605e95941b3387c7cb5dab44","articleId":2052,"userId":98,"content":"首先，我们可以明确的是这种情况下foo函数里面的this一定是指向全局对象的，在node里是global，在浏览器中是window\r\n我们发现在node里面输出的是undefined，这就说明bar不在全局对象上\r\n为什么会这样呢？回想一下var声明的变量只有全局和函数作用域，如果我们直接写成bar=2;没有var修饰那将一定是在全局作用域，改成这种写法后无论是node还是浏览器运行结果都是2了。\r\n再深挖一下，如果我们在最后添加一行console.log(this.bar);会发现浏览器还是输出2，node又输出undefined了，这说明在这个地方node环境this并不是指向全局对象，因为我们已经证明全局对象上存在bar了而这里没有，这又是为什么？这时候this指向谁？\r\n```js\r\nfunction(module, exports) {\r\n// 你的代码\r\n}\r\n```\r\n因为node中一个js文件就是一个模块，实际上你的代码在node中执行时至少是放在一个像这样的函数中的，这就很好的解释了为什么在node运行时var修饰的bar没有出现在全局对象上\r\n如果你的代码写成这样：\r\n```js\r\nfunction test() {\r\n    var obj = {\r\n        foo: function () { console.log(this.bar) },\r\n        bar: 1,\r\n    };\r\n\r\n    var foo = obj.foo;\r\n    bar = 2;\r\n    foo();\r\n    console.log(this.bar);\r\n}\r\nnew test();\r\n```\r\n在node和浏览器的运行结果就是相同的了，最后那个奇怪的this指向问题也得到了解答\r\n最后，请各位大佬不要拿这种问题来做面试题！！！\r\n","createdAt":1616811412564},{"id":9220,"originId":"605ea3d51b3387b25e5dab6e","articleId":2052,"userId":3135,"content":"[@zengming00](/user/zengming00) 非常感谢，谢谢前辈解惑~","createdAt":1616815061529},{"id":9221,"originId":"605ec0981b3387f3a15dabcd","articleId":2052,"userId":97,"content":"我根据 [语言标准](https://262.ecma-international.org/) 来做一个补充\r\n\r\n```js\r\nvar obj = {\r\n    foo: function () { console.log(this.bar) },\r\n    bar: 1,\r\n};\r\n\r\nvar foo = obj.foo;\r\n```\r\n\r\n`foo = obj.foo` 对应的执行流程通过 [赋值操作符（AssignmentOperator）](https://262.ecma-international.org/6.0/#sec-assignment-operators-runtime-semantics-evaluation) 来解释\r\n\r\n赋值操作符 `=` 规定引擎要对右侧的赋值表达式进行求值。求值的结果通过一个引擎内部实现使用的类型 [Reference](https://262.ecma-international.org/6.0/#sec-reference-specification-type) 来表示，需要补充的是 Reference 并不一定在引擎内部存在实体映射，因为它只是语言标准中为了方便描述而提出的数据结构\r\n\r\nReference 有 base 和 referenced name 两个字段，针对例子 `obj.foo` 的执行结果就是 `Reference{base: obj, referencedName: 'foo'}`\r\n\r\n注意接下来的步骤，赋值操作符继续规定，要求对上一步的求值结果进一步做 `GetValue(rref)` 操作\r\n\r\n`GetValue(Reference{base: obj, referencedName: 'foo'})` 的结果就是返回了一个函数对象（不是 Reference 了）\r\n\r\n再看 `foo()` 对应的描述是 [调用表达式（CallExpression）](https://262.ecma-international.org/6.0/#sec-function-calls-runtime-semantics-evaluation) 的执行过程，调用表达式的组成为两部分：\r\n\r\n```bnf\r\nCallExpression : MemberExpression Arguments\r\n```\r\n\r\n`MemberExpression` 就对应例子里 `foo()` 中的 `foo`，标准规定要对 MemberExpression 进行求值，除了求值以外，这一步要需要准备一个变量 `thisValue`：\r\n\r\n- 如果 `MemberExpression` 的求值结果 v 是 Reference 类型的话，那么就让 `thisValue` 等于 `GetThisValue(v)`\r\n- 如果不是 Reference 类型则 `thisValue` 就是 `undefined`。对应这里的例子，此时 `thisValue` 就是 `undefined` 了\r\n\r\n当然 Arguments 也是要求值的，但是这里就跳过了。最后的完整的函数调用形式，可以看成是这样：\r\n\r\n```\r\nF.[[Call]](V, argumentsList)\r\n```\r\n\r\n没错，按标准的描述，就是 `foo.call(thisValue, argumentsList)` 的意思，那换成例子到这里就是 `foo.call(undefined)`\r\n\r\n继续 `foo.call` 对应的是 [\\[\\[Call\\]\\] ( thisArgument, argumentsList)](https://262.ecma-international.org/6.0/#sec-call)，可以理解成引擎内部的一个方法，它内部又会调用 [OrdinaryCallBindThis](https://262.ecma-international.org/6.0/#sec-ordinarycallbindthis) 用于将 `thisArgument` 绑定到当前的执行环境\r\n\r\n最后要说道 `this.bar` 对应的是 [Property Accessors](https://262.ecma-international.org/6.0/#sec-property-accessors) 就是那个 `.` 的作用，它要求对左边的表达式求值，也就是这里的 `this` 表达式\r\n\r\n`this` 表达式的求值对应的是 [ResolveThisBinding](https://262.ecma-international.org/6.0/#sec-resolvethisbinding)，它要从当前环境开始（包括当前环境）不断看 outer 环境是否存在 this 绑定，返回第一个有 this 绑定的环境，然后取那个环境中的 this 绑定作为求值结果。对于例子来说，只有遍历到顶层的环境才会返回，一方面是因为直到顶层都没有 this 绑定，另一方面因为顶层环境总是有 this 绑定\r\n\r\n所以例子在浏览器和 node 表现差异就在于 `var bar = 2` 有没有被绑定到顶层环境\r\n\r\n一时看不懂也没事，以后想深入的话再回头看，或者也可以直接看上面给出的链接中的原文\r\n","createdAt":1616822424805},{"id":9222,"originId":"605edb611b338759455dac00","articleId":2052,"userId":3135,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 感谢大佬，没想到一个this居然水这么深","createdAt":1616829281425},{"id":9223,"originId":"6062cb2c2357dde1b4f9ddc5","articleId":2052,"userId":2380,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 👍","createdAt":1617087276639},{"id":9224,"originId":"606bfcb84d20cb7b6968a52e","articleId":2052,"userId":128,"content":"# 问题一：this 指向\r\n记住：\r\n+ **this** 指向“方法的调用者”\r\n+ “找不到”调用者时，this 就指向“根对象”（也就是**浏览器里的 window 对象**或**node 里的 global 对象**）  \r\n比如：\r\n```js\r\nlet a = { name: 'haha' }\r\nlet b = { name: 'heihei' }\r\nfunction f(){ console.log(this.name) }\r\n\r\nf() // 啥也没有\r\na.f = f\r\na.f() // 2. 'haha'\r\nb.f = f\r\nb.f() // 3. 'heihei'\r\nf() // 啥也没有\r\n```\r\n+ 第**二**次时，使用 a 调用 f 函数，那么 this 就指向 a  \r\n+ 第三次一样  \r\n+ 第一次和最后一次，没用任何对象调用 f，所以指向 this 指向 window\r\n\r\n这一点非常重要，也很简单。但往往被误以为很复杂，而且讲得也很复杂。但，很简单。  \r\n下面一点不怎么重要，但对你的问题的解答，还是有帮助的。\r\n# 问题二：全局变量的归属\r\n#### 浏览器环境\r\n假设有这段代码：\r\n``` html\r\n<html>\r\n<script>\r\nvar bar = 2\r\nconsole.log(window.bar) // 输出 2\r\n</script>\r\n</html>\r\n```\r\n记住：\r\n+ 浏览器里的全局变量，都被赋给 window 对象\r\n\r\n所以，在浏览器中，你的代码：\r\n+ foo 被调用时，“没有”调用者，所以 this 指向根对象，也就是 window\r\n+ 你声明的 bar 全局变量，正好被赋给了 window 对象\r\n\r\n一般人不会这么写代码，或者说，一般人**不会使用全局变量**  \r\n因为这样非常容易出错  \r\n但我们经常一不小心，就声明一个不起眼全局变量，这个只能用“仔细”来避免  \r\n\r\n所以，node 干脆不让你“一不小心”声明全局变量\r\n\r\n#### node 环境\r\n在浏览器里，你可以通过 ```var bar = 2``` 来声明一个全局变量（而且，必须在任何函数之外）  \r\n而在 node 里，你只能通过 ```global.bar``` 来声明（在任何地方都行）  \r\n所以你的 ```var bar = 2``` 不被赋给 global 变量  \r\n所以，foo 里的输出，啥也没有（undefined）\r\n\r\n#### node 控制台\r\n不重要，不说了","createdAt":1617689784633},{"id":9225,"originId":"6066d34f2357dd6f3af9e78a","articleId":2053,"userId":19,"content":"先占个楼，我就想问google自己用flutter怎么样？还是说app本身收集了太多东西导致的？有没有原咸鱼开发组的人来现身说法","createdAt":1617351503786},{"id":9226,"originId":"6062f4c92357dd7dbcf9dea7","articleId":2054,"userId":11,"content":"神奇，看js也没卡死，如果楼主解决了记得@我下","createdAt":1617097929072},{"id":9227,"originId":"6062f7a12357dd7024f9dead","articleId":2054,"userId":11,"content":"感觉上不是 js 死循环了，而是绘制 dom 的时候卡住了，比如卡住的时候在控制台执行 `document.body.append('<b>Hello world!</b>')` 是没反应的，但是敲 `console.log('hello')` 是可以的\r\n我猜测你的加 tab 逻辑里是不是会不停触发 dom 的重绘，导致页面卡住","createdAt":1617098657076},{"id":9228,"originId":"606320652357ddc5acf9defe","articleId":2054,"userId":1574,"content":"\r\nvue里面的代码一直在递归调用，看起来像是框架的bug。\r\n\r\n先把控制台切换到`CodePen(jOyMQLV)` 等卡住的时候按下 `F8` 暂停js，然后随便抛一个什么东西出来，就可以在控制台看到一个超长的调用堆栈。\r\n![image.png](//static.cnodejs.org/Fs7lU78nq3JrDShe5bkfnRH6LJYe)\r\n```\r\nthrow 123\r\nVM75:1 Uncaught 123\r\neval @ VM75:1\r\nflushSchedulerQueue @ vue.js:4300\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\nPromise.then (async)\r\ntimerFunc @ vue.js:1942\r\nnextTick @ vue.js:1999\r\nqueueWatcher @ vue.js:4403\r\nupdate @ vue.js:4543\r\nnotify @ vue.js:745\r\nreactiveSetter @ vue.js:1070\r\nproxySetter @ vue.js:4630\r\nupdate @ index.js:1\r\nupdated @ index.js:1\r\ninvokeWithErrorHandling @ vue.js:1863\r\ncallHook @ vue.js:4220\r\ncallUpdatedHooks @ vue.js:4352\r\nflushSchedulerQueue @ vue.js:4337\r\n(anonymous) @ vue.js:1989\r\nflushCallbacks @ vue.js:1915\r\n```","createdAt":1617109093633},{"id":9229,"originId":"6063dba72357dde0ddf9dfea","articleId":2054,"userId":3136,"content":"把 important 的优先取消掉，提级操作过多其实很耗计算的。","createdAt":1617157031700},{"id":9230,"originId":"6063fe032357dd309ff9e066","articleId":2054,"userId":36,"content":"以为是标题党","createdAt":1617165827544},{"id":9231,"originId":"606441bc2357dd62baf9e154","articleId":2054,"userId":247,"content":"[@yuanliwei](/user/yuanliwei) 其实还没不是太明白，为何会引起 Vue 的内部递归，可是如果注释了那 width 属性，又为啥可以了","createdAt":1617183164460},{"id":9232,"originId":"606459342357dd5418f9e1ba","articleId":2054,"userId":3137,"content":"这样就下出css的结论？明显就是js问题嘛，肯定是哪段逻辑和宽度有关没处理对或者就没考虑你这种情况","createdAt":1617189172010},{"id":9233,"originId":"606476082357dd8e89f9e229","articleId":2054,"userId":247,"content":"[@linlifengx](/user/linlifengx) 老哥，demo 是从饿了么那么直接拿来的（饿了么： https://codepen.io/pen/   ），你可以把前面有问题的地址的css 复制进行，就能重现。\r\n\r\n至于具体啥问题，这个确实我没有头绪😞~ 只能望各位大佬解惑。","createdAt":1617196552781},{"id":9234,"originId":"606560a42357ddf9e9f9e3c1","articleId":2054,"userId":1574,"content":"![image.png](//static.cnodejs.org/FoD3bn7UjXnmMxl0CmGxr8xNc51Q)\r\n\r\n问题原因：`width: 100%!important;` 放在了 `.is-scrollable`下面，`element-ui`会在`tab`中的内容宽度超出自身宽度的时候动态添加`.is-scrollable`，因此出现死循环、\r\n\r\n具体流程如下：\r\n\r\n`tab`中内容宽度超出自身宽度\r\n`element-ui`给`tab`添加了一个`.is-scrollable`\r\n此时`width: 100%!important;`起作用了，`tab`内容的宽度被设置为`tab`的宽度\r\n然后`element-ui`把`.is-scrollable`移除\r\n`tab`中内容宽度超出自身宽度\r\n`element-ui`给`tab`添加了一个`.is-scrollable`\r\n此时`width: 100%!important;`起作用了，`tab`内容的宽度被设置为`tab`的宽度\r\n然后`element-ui`把`.is-scrollable`移除\r\n`tab`中内容宽度超出自身宽度\r\n`element-ui`给`tab`添加了一个`.is-scrollable`\r\n此时`width: 100%!important;`起作用了，`tab`内容的宽度被设置为`tab`的宽度\r\n然后`element-ui`把`.is-scrollable`移除\r\n`tab`中内容宽度超出自身宽度\r\n`element-ui`给`tab`添加了一个`.is-scrollable`\r\n此时`width: 100%!important;`起作用了，`tab`内容的宽度被设置为`tab`的宽度\r\n然后`element-ui`把`.is-scrollable`移除\r\n`tab`中内容宽度超出自身宽度\r\n......","createdAt":1617256612346},{"id":9235,"originId":"6065664a2357ddcc3ef9e3e5","articleId":2054,"userId":117,"content":"[@yuanliwei](/user/yuanliwei) 盲猜也是element-ui动态调整css陷入死循环了，不过没找到对应代码","createdAt":1617258058625},{"id":9236,"originId":"606671492357dd37f9f9e597","articleId":2054,"userId":1574,"content":"代码从调用堆栈点过去就是了\r\n![image.png](//static.cnodejs.org/Fh8apniIRNmK4KUqN3S5VGeOs9oc)\r\n![image.png](//static.cnodejs.org/Fi3vvIYCVrihRzRl8NrQXCjinlCD)\r\n![image.png](//static.cnodejs.org/FtMvf58h8SRpBinhpVQhQ3po1-b0)","createdAt":1617326409732},{"id":9237,"originId":"6066cd9a2357ddcff6f9e776","articleId":2054,"userId":247,"content":"[@yuanliwei](/user/yuanliwei) 看样子应该是加了 width 和框架内部发生了 死循环了。 感谢大佬解惑哈👍","createdAt":1617350042030},{"id":9238,"originId":"5d51350e12a0194544416079","articleId":2055,"userId":109,"content":"为啥要修改原型链？","createdAt":1565603086482},{"id":9239,"originId":"5d51466012a01945444160e4","articleId":2055,"userId":1705,"content":"interface 拓展要放在 d.ts 中 ![image.png](//static.cnodejs.org/Fv57G1MXKrd9gjkHNS0O-hrSq_g0) ![image.png](//static.cnodejs.org/FgYkYfp6EE0xozbVT8LGLvorJpA6)","createdAt":1565607520478},{"id":9240,"originId":"5d5203ea12a0194544416224","articleId":2055,"userId":128,"content":"[@guchongxi](/user/guchongxi) 感谢！添加了 .d.ts 果然好了","createdAt":1565656042255},{"id":9241,"originId":"5d56221212a01945444171d7","articleId":2055,"userId":754,"content":"对于老是修改公有对象原型的同事，我真的是想打死\r\n\r\n不巧接手的项目刚好有一个  String number Date   全加了一堆方法 ，维护起来真的是他妈的美如画","createdAt":1565925906228},{"id":9242,"originId":"5d5b4c91d53e9171e98a942e","articleId":2055,"userId":1199,"content":"适当的扩展还是挺方便的,比如 日期快速格式化,number安全fix并可选设置默认值之类的业务无关型辅助方法.","createdAt":1566264465388},{"id":9243,"originId":"6066c1d62357dd1872f9e73c","articleId":2055,"userId":128,"content":"[@liaoyinglong](/user/liaoyinglong) 昨天我看到路上有个人被车撞得粉碎，于是我决定，再也不出门了。","createdAt":1617347030068},{"id":9244,"originId":"6063d2172357dd6ad8f9df9a","articleId":2056,"userId":3051,"content":"我想可能是版本问题，导致API函数的使用方法发生了变化，所以才找不到说明的!","createdAt":1617154583869},{"id":9245,"originId":"6063e3492357dd6f80f9e018","articleId":2056,"userId":89,"content":"一般看readme，然后是about出的网址。然后去找源码中的docs，如果还看不懂就去翻example，如果还没有，就去扒test测试用例。实在都没办法，扒源码啃api吧","createdAt":1617158985924},{"id":9246,"originId":"606533e72357dd3075f9e31a","articleId":2056,"userId":3051,"content":"[@i5ting](/user/i5ting) 好的，谢谢！","createdAt":1617245159702},{"id":9247,"originId":"5b7acae5a210553a0cde2aa3","articleId":2057,"userId":1599,"content":"阿里在用算吗?","createdAt":1534773989761},{"id":9248,"originId":"5b7acbd5a210553a0cde2aa5","articleId":2057,"userId":1764,"content":"不了解egg  刚学会koa，哪里有egg的视频教程推荐一下  老铁们","createdAt":1534774229375},{"id":9249,"originId":"5b7acd02632c7f422e5b8009","articleId":2057,"userId":1759,"content":"[@zdingfeng](/user/zdingfeng) \r\n\r\n\r\n**Eggjs 视频教程百度网盘分享**： https://pan.baidu.com/s/1t6XHpny8-H8mApLkzcsS8w\r\n\r\n\r\n**或者此链接Egg.js视频教程链接**： https://pan.baidu.com/s/1-jdCXKGgfk9yI8xJOOhPhg  **密码**：4b6i\r\n\r\n\r\n拿走不谢\r\n\r\ncsdn找的","createdAt":1534774530652},{"id":9250,"originId":"5b7ad3ada210553a0cde2aaa","articleId":2057,"userId":358,"content":"抱歉，我这边也不知道，没统计过。印象中：\r\n- 深度使用的： 阿里，全民直播\r\n- 使用并有分享过使用经验的：去哪儿，摩拜，点评\r\n- 有个别团队咨询过试水但最终有没有落地的不知道：美团，新浪，百度，腾讯，YY 等","createdAt":1534776237233},{"id":9251,"originId":"5b7ad62fc52ad1482eb940c3","articleId":2057,"userId":2414,"content":"在用，公司名就不说了。权作计数。","createdAt":1534776879882},{"id":9252,"originId":"5b7ae62c944cb8340c27e221","articleId":2057,"userId":10,"content":"> https://antpress.eggjs.app/ （测试域名）\r\n\r\n😝来吧，写了说不定可以加到新官网呢？\r\n","createdAt":1534780972860},{"id":9253,"originId":"5b7ae6d2944cb8340c27e223","articleId":2057,"userId":3139,"content":"和信贷 - 纳斯达克上市P2P平台 部分业务在用","createdAt":1534781138390},{"id":9254,"originId":"5b7b37fc944cb8340c27e228","articleId":2057,"userId":2187,"content":"用了好久了，为什么不用呢","createdAt":1534801916978},{"id":9255,"originId":"5b7b55a9632c7f422e5b801b","articleId":2057,"userId":3140,"content":"egg用起来还是蛮爽的，提高效率","createdAt":1534809513287},{"id":9256,"originId":"5b7b6505c52ad1482eb940cc","articleId":2057,"userId":3141,"content":"在用，公司名就不说了。权作计数。","createdAt":1534813445138},{"id":9257,"originId":"5b7b677ea210553a0cde2aae","articleId":2057,"userId":878,"content":"在用，公司名就不说了。权作计数。","createdAt":1534814078651},{"id":9258,"originId":"5b7b6889a210553a0cde2ab1","articleId":2057,"userId":1934,"content":"我在用了一个项目上，\r\nhttps://www.taolingsheng.com","createdAt":1534814345771},{"id":9259,"originId":"5b7b6a22c52ad1482eb940ce","articleId":2057,"userId":1598,"content":"[@atian25](/user/atian25) 谢谢  谢谢 ，这么多人用我就放心了","createdAt":1534814754976},{"id":9260,"originId":"5b7b6c45632c7f422e5b8020","articleId":2057,"userId":3142,"content":"在用，公司名就不说了。权作计数。","createdAt":1534815301796},{"id":9261,"originId":"5b7b6f30c52ad1482eb940d2","articleId":2057,"userId":1195,"content":"要文档要求，\n写个简单功能的服务端，用来面试。\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1534816048765},{"id":9262,"originId":"5b7b7266944cb8340c27e234","articleId":2057,"userId":36,"content":"在用，公司名就不说了。权作计数。","createdAt":1534816870334},{"id":9263,"originId":"5b7b7499c52ad1482eb940d8","articleId":2057,"userId":2226,"content":"在用，公司名就不说了。权作计数。","createdAt":1534817433394},{"id":9264,"originId":"5b7b7a17c52ad1482eb940dd","articleId":2057,"userId":866,"content":"在用 虽然用起来很奇怪","createdAt":1534818839140},{"id":9265,"originId":"5b7b8446c52ad1482eb940e0","articleId":2057,"userId":281,"content":"+1\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1534821446003},{"id":9266,"originId":"5b7bc4a7944cb8340c27e255","articleId":2057,"userId":3143,"content":"以前的公司天天用，本来不用的已经被我调教用了。\r\n\r\n之后自己创业也用，为什么不用 ","createdAt":1534837927140},{"id":9267,"originId":"5b7bc4e1632c7f422e5b8038","articleId":2057,"userId":3144,"content":"感觉nodejs要干掉其他后端语言的感觉，现在php java python能实现的nodejs基本都能实现了吧","createdAt":1534837985935},{"id":9268,"originId":"5b7bcf82944cb8340c27e264","articleId":2057,"userId":3145,"content":"之前用sails，现在全部换成egg了","createdAt":1534840706006},{"id":9269,"originId":"5b7bd211c52ad1482eb940f8","articleId":2057,"userId":3145,"content":"被集成度太高的框架锁着，真的很难受","createdAt":1534841361094},{"id":9270,"originId":"5b7cb3dd944cb8340c27e27b","articleId":2057,"userId":1598,"content":"[@kalebwww](/user/kalebwww) 感觉 egg还是比较灵活 ，koa中的中间件基本都可以用","createdAt":1534899165399},{"id":9271,"originId":"5b7cb403a210553a0cde2af1","articleId":2057,"userId":1598,"content":"[@215566435](/user/215566435) 创业公司用的话真的不错    感觉和thinkphp差不多","createdAt":1534899203999},{"id":9272,"originId":"5b7cd37ea210553a0cde2b13","articleId":2057,"userId":3146,"content":"网易考拉，半年前开始使用 Egg，目前 50+ 应用已接入\r\n\r\n另借楼打波广告：\r\n招聘前端开发与 Node.js 工程师","createdAt":1534907262594},{"id":9273,"originId":"5b7ce45aa210553a0cde2b18","articleId":2057,"userId":358,"content":"[@ImHype](/user/ImHype) cool","createdAt":1534911578649},{"id":9274,"originId":"5b7ceec3944cb8340c27e293","articleId":2057,"userId":743,"content":"nest.js 不解释\r\n配合导出Excel模板引擎 ejsExcel","createdAt":1534914243461},{"id":9275,"originId":"5b7d01c7a210553a0cde2b2a","articleId":2057,"userId":850,"content":"刚查了下，去哪儿也有用","createdAt":1534919111397},{"id":9276,"originId":"5b7d2636a210553a0cde2b3e","articleId":2057,"userId":1598,"content":"[@okoala](/user/okoala) 如何查的","createdAt":1534928438315},{"id":9277,"originId":"5b7d2685632c7f422e5b8084","articleId":2057,"userId":1598,"content":"[@ImHype](/user/ImHype) 网易考拉 电商网站吗？  确定egg写的？","createdAt":1534928517155},{"id":9278,"originId":"5b7d2787944cb8340c27e2b2","articleId":2057,"userId":358,"content":"[@nodeper](/user/nodeper) GMTC 有个分享","createdAt":1534928775150},{"id":9279,"originId":"5b7d27ba944cb8340c27e2b4","articleId":2057,"userId":358,"content":"[@nodeper](/user/nodeper) 淘宝天猫不就是最大的电商网站么 😂","createdAt":1534928826735},{"id":9280,"originId":"5b7d2848a210553a0cde2b42","articleId":2057,"userId":1598,"content":"[@atian25](/user/atian25) 厉害   厉害     好火的样子 我得抓紧学了","createdAt":1534928968295},{"id":9281,"originId":"5b7d2c7b632c7f422e5b8088","articleId":2057,"userId":1871,"content":"前公司是做公积金的，用的egg做的中间层","createdAt":1534930043917},{"id":9282,"originId":"5b7fce41944cb8340c27e349","articleId":2057,"userId":866,"content":"[@gogogosns](/user/gogogosns) 想太多 流媒体nodejs就不咋样","createdAt":1535102529186},{"id":9283,"originId":"5b835270c52ad1482eb94209","articleId":2057,"userId":1601,"content":"[@phper-chen](/user/phper-chen) nodejs可以做流媒体的哦","createdAt":1535332976536},{"id":9284,"originId":"5b84aebdfad9359e2e83125b","articleId":2057,"userId":1598,"content":"[@atian25](/user/atian25) 天猫也是 egg做的吗？","createdAt":1535422141590},{"id":9285,"originId":"5b84b644632c7f422e5b81ad","articleId":2057,"userId":358,"content":"[@nodeper](/user/nodeper) \r\n你能看到的绝大部分的阿里系页面，它的渲染层都是基于 Egg 的 （并不是全套都是一个语言的，天猫多大你估计没啥概念）。\r\n\r\n自己看吧，3 年前的分享了： [知乎：Node.js 在双十一中有哪些应用，表现如何？](https://www.zhihu.com/question/37379084)","createdAt":1535424068604},{"id":9286,"originId":"5b85026dfad9359e2e83127a","articleId":2057,"userId":1598,"content":"[@atian25](/user/atian25) 好的谢谢  非常感谢","createdAt":1535443565070},{"id":9287,"originId":"5b85f75d632c7f422e5b8202","articleId":2057,"userId":3144,"content":"[@phper-chen](/user/phper-chen) 确实没有用过这块,回头研究研究","createdAt":1535506269549},{"id":9288,"originId":"5b85f83908d0b0fb2d8e6ca1","articleId":2057,"userId":109,"content":"[@lvyueyang](/user/lvyueyang) 请问哪家呢。我们在评估上egg做中间层","createdAt":1535506489382},{"id":9289,"originId":"5b86092e08d0b0fb2d8e6cb2","articleId":2057,"userId":1589,"content":"[@atian25](/user/atian25) ![aaa.png](//static.cnodejs.org/FttD4K9s7PjBGbdy9Kbx3NQdu4gI)              大神这是你吗？  名字和你一样。","createdAt":1535510830643},{"id":9290,"originId":"5b860a0208d0b0fb2d8e6cb5","articleId":2057,"userId":358,"content":"[@vueper](/user/vueper) 嗯，不过这插件只是写着玩的，里面 80% 的代码没啥用了，没时间改。\r\n\r\n主要功能是支撑调试，现在也没啥用了，手动复制个配置就搞定了。","createdAt":1535511042855},{"id":9291,"originId":"5b861513632c7f422e5b822d","articleId":2057,"userId":1589,"content":"[@atian25](/user/atian25) 厉害 厉害  我感觉还是很好用的。非常简单","createdAt":1535513875460},{"id":9292,"originId":"5b8670ce08d0b0fb2d8e6ceb","articleId":2057,"userId":109,"content":"[@atian25](/user/atian25)  egg 如何在 config/config.default.js 中定义 https 证书文件？\r\n\r\n按照 https://eggjs.org/zh-cn/core/deployment.html 这儿提到\r\n```ts\r\nexport default (appInfo: EggAppConfig) => {\r\n  const config = <EggAppConfig> {}\r\n\r\n //.....\r\n\r\n  // @ts-ignore\r\n  config.cluster = {\r\n    listen: {\r\n      port: 7008,\r\n      // hostname: '127.0.0.1',\r\n      path: '/var/run/egg.sock',\r\n      // https: true,\r\n      foo: 123,\r\n\t  https: {\r\n         key: 'c:/config/02.key.unsecure',\r\n         cert: 'c:/config/02.crt',\r\n      },\r\n    },\r\n\r\n  }\r\n\r\n  return config\r\n}\r\n\r\n```\r\n服务可以 7008 端口启动，但是无法读取到 https 的配置 . \r\n难道https参数只能通过命令行传入？","createdAt":1535537358659},{"id":9293,"originId":"5b8673da632c7f422e5b825a","articleId":2057,"userId":358,"content":"[@waitingsong](/user/waitingsong) 文档没提到支持这个配置吧，你看下 egg-cluster 源码有没有读取，不太记得了。建议在 slb 层处理 https","createdAt":1535538138949},{"id":9294,"originId":"5b8675012a585e4e2f26ffc0","articleId":2057,"userId":109,"content":"[@atian25](/user/atian25) 好像是没有读取。并且 cluster 参数（不知道哪儿处理）只取了 listen.port 值，上面的 listen.foo 也丢弃了。 \r\n主要是做面向内网用户的服务，核心系统部署了 TLS， 如果访问这个服务用普通 http 的话 Firefox 默认设置会阻止请求发起的（暂时使用用户直连服务方式，前面没有使用负载均衡）。\r\n如果用命令传参倒是可行\r\n` \"start\": \"egg-scripts start --daemon --https.key=\\\"c:/key\\\" --https.cert=\\\"c:/key.crt\\\" \" `\r\n但必须是全路径，而无法用相对路径（自签发的证书是准备直接丢在项目的 config 目录下的）。","createdAt":1535538433324},{"id":9295,"originId":"5b867ecc08d0b0fb2d8e6cee","articleId":2057,"userId":466,"content":"我觉得还有一个问题需要调查，就是什么场景用的egg，我个人觉得多数都是用来做BFF层的吧？","createdAt":1535540940364},{"id":9296,"originId":"5b86936208d0b0fb2d8e6cf3","articleId":2057,"userId":358,"content":"[@waitingsong](/user/waitingsong) 欢迎 PR，或者自己写个 bin/start.js 去调用 egg-scripts 呗","createdAt":1535546210534},{"id":9297,"originId":"5b8693bafad9359e2e8312e3","articleId":2057,"userId":358,"content":"[@rwing](/user/rwing) \r\n我觉得是橄榄型，超大和超小的更容易担当更多职责。\r\n\r\n中间大一点的公司做 BFF 多吧(毕竟要考虑到原来掌握先发优势的语言\r\n\r\n小公司反而有可能从头到尾直接 node","createdAt":1535546298945},{"id":9298,"originId":"5b8693befad9359e2e8312e6","articleId":2057,"userId":109,"content":"[@atian25](/user/atian25)  https://github.com/eggjs/egg-cluster/pull/75","createdAt":1535546302207},{"id":9299,"originId":"5b874b57632c7f422e5b8273","articleId":2057,"userId":1589,"content":"[@rwing](/user/rwing) 感觉有点类似php 里面的thinkphp   ，方便很多，大小公司都可以用吧。","createdAt":1535593303970},{"id":9300,"originId":"5b87574c632c7f422e5b827e","articleId":2057,"userId":801,"content":"在用，主要看中代码可维护性、开发和运行效率。\r\n\r\n来自✨ [Node.js开源项目精选](https://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1535596364401},{"id":9301,"originId":"5b88a70e632c7f422e5b82f7","articleId":2057,"userId":1591,"content":"egg github的关注不是特别多,可能很多人还不知道","createdAt":1535682318985},{"id":9302,"originId":"5b88ac882a585e4e2f270031","articleId":2057,"userId":3147,"content":"相比于使用koa，提升效率","createdAt":1535683720307},{"id":9303,"originId":"5b8de46e82f0728f354d73c9","articleId":2057,"userId":1595,"content":"[@xiongc](/user/xiongc) 应该是提升开发效率吧","createdAt":1536025710242},{"id":9304,"originId":"5b8df96182f0728f354d73d8","articleId":2057,"userId":3148,"content":"在用，公司名就不说了。权作计数。","createdAt":1536031073921},{"id":9305,"originId":"5b8e2e9937b3005a0b0e6b55","articleId":2057,"userId":634,"content":"正准备用 ","createdAt":1536044697707},{"id":9306,"originId":"5b8e4a0537b3005a0b0e6b61","articleId":2057,"userId":368,"content":"[@215566435](/user/215566435) 开始创业了么：）","createdAt":1536051717608},{"id":9307,"originId":"5b8f4dd94cdb88f72f5a9093","articleId":2057,"userId":1598,"content":"[@zlnvsheng](/user/zlnvsheng) 慢慢就会多起来  因为太好用了","createdAt":1536118233396},{"id":9308,"originId":"5b90fed737b3005a0b0e6c0f","articleId":2057,"userId":545,"content":"[@zlnvsheng](/user/zlnvsheng)  之前关注 egg ，后来用了 nest.js  。\r\n算是一步步看着这俩框架成长的。\r\n最早的时候  nest 4k start  egg 7k  。 现在 nest 8k   egg 9k","createdAt":1536229079903},{"id":9309,"originId":"5b912aec37b3005a0b0e6c27","articleId":2057,"userId":1591,"content":"[@zuohuadong](/user/zuohuadong) nest.js 主要老外在用吧，感觉学习成本高一些。  不过基于TypeScript 的开发模式确实不错。","createdAt":1536240364654},{"id":9310,"originId":"5b97bebdce9d14c2254df90b","articleId":2057,"userId":1601,"content":"[@zuohuadong](/user/zuohuadong)  start能反应一些东西，但是也说明不了什么   比如angular的start 和vue 差很多，但是不代表angular用户量少。只是大家知道了没有必要start了吧","createdAt":1536671421702},{"id":9311,"originId":"5b986e25f1e8bc7579c7849f","articleId":2057,"userId":1763,"content":"正准备用 +1","createdAt":1536716325198},{"id":9312,"originId":"5b987fc8f1e8bc7579c784b5","articleId":2057,"userId":545,"content":"[@bupafengyu](/user/bupafengyu) AngularJS 用户量不错，但 Angular 是真少，从github 上很多组件就能看出来，vue 和 react 居多。\r\n\r\nnest.js  和  egg  都建议你用心看下，尤其是从 java 或者 .net 转过来的，会特别喜欢 nest.js ， 也真正算得上后端了。","createdAt":1536720840770},{"id":9313,"originId":"5b9efd7737a6965f59051a1c","articleId":2057,"userId":1598,"content":"[@zuohuadong](/user/zuohuadong) 大神指点的对  谢谢","createdAt":1537146231876},{"id":9314,"originId":"5ba256c08f5b0c1c59ea0ffb","articleId":2057,"userId":1595,"content":"[@zlnvsheng](/user/zlnvsheng) TypeScript 是趋势","createdAt":1537365696450},{"id":9315,"originId":"5c8783b5acb681372d4176d2","articleId":2057,"userId":829,"content":"汽车之家部分团队在用","createdAt":1552384949785},{"id":9316,"originId":"5c87a9697ce0df37324275de","articleId":2057,"userId":685,"content":"[@OXOYO](/user/OXOYO) 你怎么知道的","createdAt":1552394601131},{"id":9317,"originId":"5c8859697ce0df37324276e1","articleId":2057,"userId":100,"content":"看来egg的生态很好","createdAt":1552439657776},{"id":9318,"originId":"5c885ac9acb681372d4178c7","articleId":2057,"userId":829,"content":"[@eggper](/user/eggper) 我就在啊","createdAt":1552440009616},{"id":9319,"originId":"5c8872ba7ce0df37324277a7","articleId":2057,"userId":634,"content":"正准备用。","createdAt":1552446138394},{"id":9320,"originId":"5c88a3077ce0df37324278d6","articleId":2057,"userId":685,"content":"[@OXOYO](/user/OXOYO) 牛 牛 牛,汽车之家也是大公司哦 羡慕你们大公司的大牛","createdAt":1552458503131},{"id":9321,"originId":"5c8b0a96acb681372d41845a","articleId":2057,"userId":191,"content":"公司准备用了","createdAt":1552616086500},{"id":9322,"originId":"5c8f0ddd7ce0df3732429239","articleId":2057,"userId":1767,"content":"[@xuemeifenglin](/user/xuemeifenglin) 你们是什么公司","createdAt":1552879069299},{"id":9323,"originId":"5c8f5bf9acb681372d4197db","articleId":2057,"userId":191,"content":"[@gougou168](/user/gougou168) 创业公司","createdAt":1552899065516},{"id":9324,"originId":"5c91a78b8a587f26b426cafa","articleId":2057,"userId":100,"content":"[@nodeper666](/user/nodeper666) egg描述我们深知企业级应用在追求规范和共建的同时，还需要考虑如何平衡不同团队之间的差异，求同存异。所以我们没有选择社区常见框架的大集市模式（集成如数据库、模板引擎、前端框架等功能），而是专注于提供 Web 开发的核心功能和一套灵活可扩展的插件机制。我们不会做出技术选型，因为固定的技术选型会使框架的扩展性变差，无法满足各种定制需求。通过 Egg，团队的架构师和技术负责人可以非常容易地基于自身的技术架构在 Egg 基础上扩展出适合自身业务场景的框架","createdAt":1553049483756},{"id":9325,"originId":"5c91e8af8a587f26b426cddf","articleId":2057,"userId":851,"content":"[刺梨之家](http://www.meicili.com)  这是我用eggjs写的，生产环境。","createdAt":1553066159259},{"id":9326,"originId":"5c943a1c00bcfd7eb2be4cf4","articleId":2057,"userId":99,"content":"[@lisniuse](/user/lisniuse) 你的伪静态是如何做的","createdAt":1553218076227},{"id":9327,"originId":"5c9b047200bcfd7eb2be6b69","articleId":2057,"userId":851,"content":"[@phonegap100](/user/phonegap100) 正则表达式。","createdAt":1553663090890},{"id":9328,"originId":"5c9b59e800bcfd7eb2be6fbf","articleId":2057,"userId":99,"content":"[@lisniuse](/user/lisniuse) Nginx伪静态实现的吗  牛","createdAt":1553684968783},{"id":9329,"originId":"5c9c14cd99e62a362ff409b8","articleId":2057,"userId":1605,"content":"这个创业公司用的多\r\n","createdAt":1553732813423},{"id":9330,"originId":"5c9f5a2199e62a362ff417ac","articleId":2057,"userId":191,"content":"[@GGBond1989](/user/GGBond1989) 求伪静态配置方法","createdAt":1553947169474},{"id":9331,"originId":"5ca2e9be31010b2dfbb42298","articleId":2057,"userId":685,"content":"[@xuemeifenglin](/user/xuemeifenglin) Nodejs路由本来就是伪静态的。结合mongodb的话_id太长不好做伪静态   ,     但是如果是mysql的话伪静态很好做.搜nginx伪静态一大把教程","createdAt":1554180542970},{"id":9332,"originId":"5ca327e631010b2dfbb42648","articleId":2057,"userId":1078,"content":"[@xuemeifenglin](/user/xuemeifenglin) 我路由是配置在程序里的，而且我也没有用nginx，我是用caddy做的反向代理，支持的http/3协议，配置估计你也用不了。","createdAt":1554196454755},{"id":9333,"originId":"5ca3f4766c1de62dce467249","articleId":2057,"userId":3149,"content":"没用过一直觉得 express 简单够用了","createdAt":1554248822011},{"id":9334,"originId":"5ca5ee486c1de62dce467fd9","articleId":2057,"userId":1697,"content":"在用，公司名就不说了。权作计数。\r\n\r\n","createdAt":1554378312104},{"id":9335,"originId":"5cad5fdedad66d658e4075a3","articleId":2057,"userId":1769,"content":"公司打算用 正在学","createdAt":1554866142034},{"id":9336,"originId":"5cae79ff207b2365936ebb36","articleId":2057,"userId":513,"content":"请问还有更多的Eggjs 视频教程吗？那10讲我看完了，也应用了，真的满好的 视频教程教学，它还有10讲之後的视频吗？\r\n花点钱也无所谓！","createdAt":1554938367695},{"id":9337,"originId":"5cae7ea7dad66d658e407a52","articleId":2057,"userId":513,"content":"找到「大地」老师的全套课程了，要198元\r\nhttps://www.itying.com/goods-941.html\r\n其实讲的不错","createdAt":1554939559556},{"id":9338,"originId":"5cb0033fdad66d658e4083ab","articleId":2057,"userId":1769,"content":"[@Solomonqoo](/user/Solomonqoo) 你这是广告响亮","createdAt":1555039039200},{"id":9339,"originId":"5cb5338fdad66d658e409968","articleId":2057,"userId":2028,"content":"我们公司在用啊，也欢迎大佬们回烟台， 山东威尔数据股份科技有限公司  ","createdAt":1555379087889},{"id":9340,"originId":"5cb5be8537faec0ce1d026f9","articleId":2057,"userId":60,"content":"在用","createdAt":1555414661763},{"id":9341,"originId":"5cb9273237faec0ce1d038e1","articleId":2057,"userId":1767,"content":"[@shanzemin](/user/shanzemin) 什么公司","createdAt":1555638066744},{"id":9342,"originId":"5cb96ac137faec0ce1d03b2e","articleId":2057,"userId":60,"content":"[@gougou168](/user/gougou168) 公司不方便透露吧？请问你想干嘛？","createdAt":1555655361103},{"id":9343,"originId":"5cbc68ef37faec0ce1d0437f","articleId":2057,"userId":513,"content":"在论坛讨论，除了交流技衔，也要分享学习资源来帮助刚入门的新手，\r\n有相关的学习资源，就该分享。\r\n而且这个课程的前10讲，是免费的，对於建立观念很有帮助。我自已\r\n\r\n是初学者，在上面前辈的分享得到帮助，自已找後面的信息，回到这里\r\n\r\n分享，哎~~~~~\r\n\r\n看视频学习，还是国人经常使用的方式，效率也快，若看书本或上网查\r\n找学习，那太慢了！如果这个论坛这麽封闭，那请版主把我帐号删了吧！\r\n这个论坛没有来的意义了！","createdAt":1555851503362},{"id":9344,"originId":"5cbf202b37faec0ce1d05631","articleId":2057,"userId":1767,"content":"[@Solomonqoo](/user/Solomonqoo) 哥 我支持你，互相学习 互相分享 这样对程序员都好","createdAt":1556029483855},{"id":9345,"originId":"5cced4555a5bae6e0781322c","articleId":2057,"userId":2894,"content":"想了解下egg项目的一些数据表现，比如接口可用性？服务器的利用率？之类的。 [@atian25](/user/atian25) 大佬你们团队有统计过吗？方便透漏下么。","createdAt":1557058645649},{"id":9346,"originId":"5ccef4965a5bae6e07813289","articleId":2057,"userId":358,"content":"[@yooungt13](/user/yooungt13) 接口可用性跟你的业务代码质量有关。服务器利用率这个指的是 CPU 占用么？一般 BFF 的水位不会很高，是会有一些浪费。","createdAt":1557066902374},{"id":9347,"originId":"5ccf8661776fb66e0d1723b8","articleId":2057,"userId":1161,"content":"[@atian25](/user/atian25)运营商体系，目前项目深度使用eggjs。。。egg+kafka+mongo+redis+grpc+mqtt+coap+lwm2m","createdAt":1557104225204},{"id":9348,"originId":"5ccf87915a5bae6e0781331d","articleId":2057,"userId":358,"content":"[@JsonMa](/user/JsonMa) ☺ 这么深度使用，那有空可得单独写篇踩坑心得总结回馈下~","createdAt":1557104529069},{"id":9349,"originId":"5ccf88765a5bae6e07813332","articleId":2057,"userId":1161,"content":"[@atian25](/user/atian25) 可以，之前在issue讨论了一下docker中的单进程模式，你们很快实现了，赞一个！！","createdAt":1557104758266},{"id":9350,"originId":"5cd43d74e333b24979ca9e25","articleId":2057,"userId":1217,"content":"同上 ","createdAt":1557413236188},{"id":9351,"originId":"5cd77efae57aac76fed29ae8","articleId":2057,"userId":99,"content":"[@jeremy16601](/user/jeremy16601) 全国人民发来贺电","createdAt":1557626618391},{"id":9352,"originId":"5cd948e8d5fff6772a2fe42c","articleId":2057,"userId":189,"content":"现在dart  flutter是不是比较火","createdAt":1557743848689},{"id":9353,"originId":"5cda3ce5e57aac76fed2a596","articleId":2057,"userId":99,"content":"[@sinazl](/user/sinazl) flutter是比较火  很多人都在关注","createdAt":1557806309058},{"id":9354,"originId":"5cda741a518e0954fc40e24d","articleId":2057,"userId":513,"content":"这个太新了，属前端的。\r\n\r\n感觉後端的东西很明确，但前端都还在春秋战国啊","createdAt":1557820442330},{"id":9355,"originId":"5cdb939ce57aac76fed2ac42","articleId":2057,"userId":99,"content":"[@Solomonqoo](/user/Solomonqoo) 是啊 前端现在就是春秋战国  前端太苦逼了 学的东西很多。没法比 硬着头皮学","createdAt":1557894044335},{"id":9356,"originId":"5cdbae28518e0954fc40e810","articleId":2057,"userId":513,"content":"[@phonegap100](/user/phonegap100) 所以，我现在是在制造厂里面，搞的前端就只用ext.js，因为封闭，也有完善的元、组件，而且也不\r\n\r\n太会变动。\r\n\r\n至於react、vue、angular，我工作中用不太到，也没有一定要使用的必要，所以新技术我还在观望中，毕竟不是\r\n\r\n互联网行业，\r\n\r\n哎~","createdAt":1557900840432},{"id":9357,"originId":"5cdcc985518e0954fc40ebcf","articleId":2057,"userId":3150,"content":"我在用","createdAt":1557973381049},{"id":9358,"originId":"5ce25fc2518e0954fc40fdaf","articleId":2057,"userId":100,"content":"[@Solomonqoo](/user/Solomonqoo) ext.js好老了，看来你也是老前辈  膜拜","createdAt":1558339522142},{"id":9359,"originId":"5ce2b350e57aac76fed2c4a7","articleId":2057,"userId":513,"content":"[@youmenglinzi](/user/youmenglinzi) \r\n前端处在百花争鸣，春秋战国，我慢一点不打紧的！呵呵","createdAt":1558360912085},{"id":9360,"originId":"5ce3c3ab518e0954fc410574","articleId":2057,"userId":100,"content":"[@Solomonqoo](/user/Solomonqoo) 前端学的东西是有点多哦    北上广必须学 没办法哦","createdAt":1558430635673},{"id":9361,"originId":"5ce3e238518e0954fc41067c","articleId":2057,"userId":513,"content":"[@youmenglinzi](/user/youmenglinzi) 嗯嗯，辛苦了你们，我还是搞好一套extjs就好了，感觉您讲的是互联网公司，电商相关，才要搞的这麽多又杂，而我只要把系统前端介面开发好，又方便维运，功能完整，其实就很棒了！","createdAt":1558438456432},{"id":9362,"originId":"5ce48d784d4b857836e8543a","articleId":2057,"userId":3151,"content":"[Writeathon](https://www.writeathon.cn)在用，非常高效的框架","createdAt":1558482296656},{"id":9363,"originId":"5ce539534036f24194cf5655","articleId":2057,"userId":3152,"content":"顺网科技","createdAt":1558526291214},{"id":9364,"originId":"5ce6009152ccb64168ba698a","articleId":2057,"userId":685,"content":"[@JkYou](/user/JkYou) 支持一下","createdAt":1558577297612},{"id":9365,"originId":"5ce64ac04036f24194cf5c99","articleId":2057,"userId":3153,"content":"百姓网","createdAt":1558596288164},{"id":9366,"originId":"5ce651474036f24194cf5ccf","articleId":2057,"userId":3154,"content":"在用，各位有什么问题可以相互讨论下","createdAt":1558597959285},{"id":9367,"originId":"5ceb36ce52ccb64168ba7b51","articleId":2057,"userId":99,"content":"[@WinjayYu](/user/WinjayYu) 厉害了   百姓网挺大啊，你们为什么要用egg.js呢 ","createdAt":1558918862047},{"id":9368,"originId":"5cedcd654036f24194cf75f4","articleId":2057,"userId":100,"content":"在用 公司名就不说了","createdAt":1559088485172},{"id":9369,"originId":"5cf5e1ed95fcc914aa265ebe","articleId":2057,"userId":189,"content":"[@youmenglinzi](/user/youmenglinzi) 电商项目 还是普通项目","createdAt":1559618029086},{"id":9370,"originId":"5d082b7f1fe902120f320069","articleId":2057,"userId":189,"content":"在用","createdAt":1560816511052},{"id":9371,"originId":"5d08323595fcc914aa26a068","articleId":2057,"userId":1091,"content":"在用啊，刚用egg开发了一个前端社区，[FE社区 - 一个基于JavaScript的垂直化前端技术社区](https://www.fechat.ink/) ，只用了4天时间，开发效率还蛮高的。","createdAt":1560818229821},{"id":9372,"originId":"5d0ae44b1fe902120f320bce","articleId":2057,"userId":191,"content":"[@w3cvip](/user/w3cvip) 社区不错","createdAt":1560994891143},{"id":9373,"originId":"5d0b9172cdb1f967c15745a9","articleId":2057,"userId":1091,"content":"[@xuemeifenglin](/user/xuemeifenglin) 哈哈，感谢支持~~","createdAt":1561039218117},{"id":9374,"originId":"5d102260cdb1f967c157526d","articleId":2057,"userId":685,"content":"我也用egg搭建了一个论坛   https://www.cflutter.com/  ","createdAt":1561338464006},{"id":9375,"originId":"5d260608fa8ef0094e063eb7","articleId":2057,"userId":743,"content":"nestjs了解一下","createdAt":1562773000558},{"id":9376,"originId":"5d2f165ab2b9222961dab97c","articleId":2057,"userId":189,"content":"[@eggper](/user/eggper) 哈哈和cnode一样的哦","createdAt":1563367002907},{"id":9377,"originId":"5d351b319969a529571d606a","articleId":2057,"userId":191,"content":"[@lizhongyi](/user/lizhongyi) express 多人开发 有人离职后代码维护成本高 小项目express很好，现在express 也支持 async await   大项目egg","createdAt":1563761457105},{"id":9378,"originId":"5d354dbc9969a529571d62ad","articleId":2057,"userId":801,"content":"一直在用 +1","createdAt":1563774396885},{"id":9379,"originId":"5d397b209969a529571d729b","articleId":2057,"userId":3155,"content":"egg比较轻量，学习成本低，快速出活，最重要的是文档非常详细，能学到非常多服务端的开发知识。","createdAt":1564048160738},{"id":9380,"originId":"5d463f5c4f472f7fee15253d","articleId":2057,"userId":377,"content":"在用，一家国企。你感相信吗?","createdAt":1564884828477},{"id":9381,"originId":"5d4f77a412a0194544415bbb","articleId":2057,"userId":685,"content":"[@zouzhenxing](/user/zouzhenxing)  不相信  呵呵","createdAt":1565489060420},{"id":9382,"originId":"5d56691e12a01945444173a8","articleId":2057,"userId":3156,"content":"在用，公司名就不说了。权作计数。\r\n\r\n","createdAt":1565944094884},{"id":9383,"originId":"5d70bddcd50f572345911e99","articleId":2057,"userId":189,"content":"[@Zchary](/user/Zchary) 什么公司","createdAt":1567669724468},{"id":9384,"originId":"5d8c845b8b9e1c0d6dc5e3f3","articleId":2057,"userId":3157,"content":"在用，公司名就不说了。权作计数。","createdAt":1569490011730},{"id":9385,"originId":"60640bcb2357dd58f3f9e08d","articleId":2057,"userId":2096,"content":"[@ImHype](/user/ImHype) 还招吗","createdAt":1617169355221},{"id":9386,"originId":"605ae5ebdac5422b12e294b8","articleId":2058,"userId":3158,"content":"你不能在input上用v-for ，你在input外面的div上用v-for","createdAt":1616569835384},{"id":9387,"originId":"605b28f0dac5420480e29610","articleId":2058,"userId":111,"content":"[@SKandAV](/user/SKandAV)   怎么取得当前选择的节点 比如event.target 比如象ng里面\r\n\r\n```\r\nng-click=\"select_current(item,$event)\" \r\n \r\n\r\n$scope.select_current = function(item,event){     \r\n```\r\nitem是对应的数组的元素  event.target是对应的页面元素","createdAt":1616586992104},{"id":9388,"originId":"605d4c4b5ac88c048715b235","articleId":2058,"userId":3158,"content":"[@yakczh](/user/yakczh) v-for 的时候 这样 v-for=\"(item,index) in list\" 这个index就是选择的节点","createdAt":1616727115739},{"id":9389,"originId":"606149cd2357dd61b2f9d88a","articleId":2058,"userId":117,"content":"+ el挂载错误，****https://cn.vuejs.org/v2/api/#el\r\n+ v-for 对item 也起不了作用\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n  <script src=\"https://unpkg.com/vue@2.6.12/dist/vue.js\"></script>\r\n</head>\r\n\r\n<body>\r\n  <div id=\"app\">\r\n    <div id='novfor'>\r\n      <input type=\"checkbox\" value=\"Jack\" v-model=\"checkedNames\">\r\n      <label for=\"jack\">Jack</label>\r\n      <input type=\"checkbox\" value=\"John\" v-model=\"checkedNames\">\r\n      <label for=\"john\">John</label>\r\n      <input type=\"checkbox\" value=\"Mike\" v-model=\"checkedNames\">\r\n      <label for=\"mike\">Mike</label>\r\n      <br>\r\n      <span>Checked names: {{ checkedNames }}</span>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div id=\"vfor\">\r\n      <div v-for=\"item in list \">\r\n        <input type=\"checkbox\" :value=\"item\" v-model=\"checkedNames\">{{item}}\r\n      </div>\r\n      <br>\r\n      <span>Checked names: {{ checkedNames }}</span>\r\n    </div>\r\n  </div>\r\n  <script>\r\n    new Vue({\r\n      el: '#app', // novfor\r\n      data: {\r\n        list: ['Jack', 'John', 'Mike'],\r\n        checkedNames: []\r\n      }\r\n    });\r\n  </script>\r\n</body>\r\n\r\n</html>\r\n```","createdAt":1616988621031},{"id":9390,"originId":"6061acf62357dd206af9db3f","articleId":2058,"userId":111,"content":"[@chenkai0520](/user/chenkai0520)   但这样就破坏了原来的页面结构   保持原来煌页面结构不变怎么写","createdAt":1617014006844},{"id":9391,"originId":"60628f5d2357dd3525f9dccc","articleId":2058,"userId":117,"content":"[@yakczh](/user/yakczh) 你原先页面是错误的，vue的语法都没搞清楚，\r\n你看看这两个有什么区别\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n  <script src=\"https://unpkg.com/vue@2.6.12/dist/vue.js\"></script>\r\n</head>\r\n\r\n<body>\r\n  <div id='novfor'>\r\n    <input type=\"checkbox\" value=\"Jack\" v-model=\"checkedNames\">\r\n    <label for=\"jack\">Jack</label>\r\n    <input type=\"checkbox\" value=\"John\" v-model=\"checkedNames\">\r\n    <label for=\"john\">John</label>\r\n    <input type=\"checkbox\" value=\"Mike\" v-model=\"checkedNames\">\r\n    <label for=\"mike\">Mike</label>\r\n    <br>\r\n    <span>Checked names: {{ checkedNames }}</span>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  <div id=\"vfor\">\r\n    <input v-for=\"item in list \" type=\"checkbox\" :value=\"item\" v-model=\"checkedNames\">{{item}}\r\n    <br>\r\n    <span>Checked names: {{ checkedNames }}</span>\r\n  </div>\r\n  <script>\r\n    new Vue({\r\n      el: '#novfor', // novfor\r\n      data: {\r\n        list: ['Jack', 'John', 'Mike'],\r\n        checkedNames: []\r\n      }\r\n    })\r\n    new Vue({\r\n      el: '#vfor', // novfor\r\n      data: {\r\n        list: ['Jack', 'John', 'Mike'],\r\n        checkedNames: []\r\n      }\r\n    })\r\n  </script>\r\n</body>\r\n\r\n</html>\r\n```","createdAt":1617071965971},{"id":9392,"originId":"606193492357dd3dd4f9da84","articleId":2059,"userId":1619,"content":"官方文档的 readme 就有呀。\r\nhttps://yarnpkg.com/package/mqtt","createdAt":1617007433634},{"id":9393,"originId":"606198812357dd0ef4f9dabc","articleId":2059,"userId":3051,"content":"[@qwer34](/user/qwer34) 找到了，谢谢大神指点！：-）","createdAt":1617008769352},{"id":9394,"originId":"606188b22357dd2dd7f9d9f2","articleId":2060,"userId":2,"content":"server有回复请求结果吗？看前端的代码没有什么问题，后端的代码实现是怎样的呢？\r\n","createdAt":1617004722055},{"id":9395,"originId":"606193052357dd9246f9da7a","articleId":2060,"userId":3159,"content":"[@dingyuanwu](/user/dingyuanwu) 你好，我的后端代码其实很简单，因为主要是为了测试用\r\n\r\n\texports.submit = (req, res) => {\r\n\t  \tconsole.log(req.body);\r\n\t  \tconsole.log(req.body.username, ' ', req.body.password);\r\n\t}\r\n\r\n然后，我在命令行的消息中已经看到了传送的数据。","createdAt":1617007365414},{"id":9396,"originId":"606194902357ddf2d1f9da9c","articleId":2060,"userId":2,"content":"[@Jedi-walker](/user/Jedi-walker) \r\n你这个。。。。。   \r\nserver都没有返回数据啊\r\nserver有返回的情况下，ajax才会执行成功/失败的回掉函数\r\n```\r\nres.end();\r\n```","createdAt":1617007760964},{"id":9397,"originId":"6061958a2357ddb6b2f9daaa","articleId":2060,"userId":3159,"content":"[@dingyuanwu](/user/dingyuanwu) 啊，果真是这个问题，现在好了，多谢大神","createdAt":1617008010225},{"id":9398,"originId":"6051d1a8dac54253a9e27dc8","articleId":2061,"userId":570,"content":"setTimeout(fn, 1000, value)，你是想要这样？","createdAt":1615974824415},{"id":9399,"originId":"6052c4cddac54244fde27fbd","articleId":2061,"userId":3160,"content":"[@linliny](/user/linliny) 不是的，这个函数是个死循环，我要的结果就是能控制住这个死循环什么时候能停止，那么就只能判断value的值了，但是判断写在函数外面的话，很乱，就想看看当作形参来判断。","createdAt":1616037069564},{"id":9400,"originId":"6052d8a8dac542681de28045","articleId":2061,"userId":388,"content":"```js\r\nfunction func(value) {\r\n\tif (value === true) return;\r\n\tconst random = Math.round(Math.random() * 10);\r\n\tvalue = random === 5;\r\n\tconsole.log(value);\r\n\tconsole.log(random);\r\n\tsetTimeout(func, 1000, value);\r\n}\r\n\r\nfunc(false);\r\n```\r\n\r\n这种吗","createdAt":1616042152692},{"id":9401,"originId":"605309d8dac5420685e28179","articleId":2061,"userId":510,"content":"\r\nlet flag = true;\r\nfunction fn(v) {\r\n    if (v == flag) {\r\n        console.log('stop')\r\n        return\r\n    }\r\n    console.log(v)\r\n    setTimeout(fn.bind(null, v), 1000);\r\n}\r\nfn(false)\r\nsetTimeout(() => {\r\n    flag = false\r\n}, 1000 * 10);\r\n\r\n不知是不是这个意思","createdAt":1616054744182},{"id":9402,"originId":"60531f5bdac5427d7fe2824b","articleId":2061,"userId":3060,"content":"```js\r\n// 这种？\r\nsetTimeout(fn, 1000, value);\r\n\r\n// 这种？\r\nif (global.value) return;\r\n\r\n// 这种？\r\nconst timeout = setTimeout(fn, 1000);\r\nif (value) clearTimeout(timeout);\r\n```\r\n","createdAt":1616060251698},{"id":9403,"originId":"60542eb0dac542490fe2851c","articleId":2061,"userId":3160,"content":"[@bubao](/user/bubao) 能不能就是func(false)作为启动死循环，然后如果停止的话，就执行func(true)；","createdAt":1616129712538},{"id":9404,"originId":"6056413ddac542cf80e28972","articleId":2061,"userId":388,"content":"[@areny7](/user/areny7) 我写了两个例子\r\n\r\n**发布订阅模式**\r\n\r\n```js\r\nclass Subject {\r\n    constructor() {\r\n        this.state = 0\r\n        this.observers = []\r\n\t\tthis.setState = this.setState.bind(this)\r\n    }\r\n\r\n    getState() {\r\n        console.log(this.state)\r\n        return this.state\r\n    }\r\n    setState(state) {\r\n        this.state = state\r\n        this.notifyAllObservers()\r\n    }\r\n\r\n\tdetach(observer) {\r\n        const observerIndex = this.observers.indexOf(observer);\r\n        if (observerIndex === -1) {\r\n            return;\r\n        }\r\n\r\n        this.observers.splice(observerIndex, 1);\r\n    }\r\n\r\n    notifyAllObservers(){\r\n        this.observers.forEach(observer => {\r\n            observer.update()\r\n        })\r\n    }\r\n    attach(observer) {\r\n        this.observers.push(observer)\r\n    }\r\n}\r\n\r\nclass Observer {\r\n\t/**\r\n\t *Creates an instance of Observer.\r\n\t * @author bubao\r\n\t * @date 2021-03-21\r\n\t * @param {String} name\r\n\t * @param {Subject} subject\r\n\t * @memberof Observer\r\n\t */\r\n\tconstructor(name, subject) {\r\n        this.name = name\r\n        this.subject = subject\r\n        this.subject.attach(this)\r\n    }\r\n    update(){\r\n\t\tif (!this.subject.state) {\r\n\t\t\tthis.subject.detach(tick)\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconsole.log(\"update\",this.subject.state)\r\n\t\tsetTimeout(this.subject.setState, 1000, this.subject.state);\r\n    }\r\n}\r\n\r\nconst subject = new Subject()\r\nconst tick = new Observer('tick',subject)\r\n\r\nsubject.setState(true)\r\n\r\nsetTimeout(()=>{\r\n\tsubject.setState(false)\r\n},5000)\r\n```\r\n\r\n另一个就low一点了，但是方便理解\r\n\r\n```js\r\nclass Test {\r\n\tconstructor(){\r\n\t\tthis.count = 0;\r\n\t\tthis.func = this.func.bind(this)\r\n\t\t// this.func(true);\r\n\t}\r\n\r\n\tsetState(value){\r\n\t\tthis.value = value;\r\n\t\tthis.value && this.func();\r\n\t}\r\n\r\n\tfunc() {\r\n\t\tif (this.value === false) return;\r\n\t\tthis.count += 1;\r\n\t\tconsole.log(this.count,this.value);\r\n\t\tsetTimeout(this.func, 1000);\r\n\t}\r\n}\r\n\r\nconst test = new Test();\r\ntest.setState(true)\r\nsetTimeout(()=>{\r\n\ttest.setState(false)\r\n},5000)\r\n\r\nsetTimeout(()=>{\r\n\ttest.setState(true)\r\n},10000)\r\n\r\nsetTimeout(()=>{\r\n\ttest.setState(false)\r\n},15000)\r\n```\r\n\r\n也可以把func写在外边，那可以改成这样\r\n\r\n```js\r\nclass Test {\r\n\tconstructor(cb){\r\n\t\tthis.state = true\r\n\t\tthis.funcName = cb.name\r\n\t\tthis[this.funcName] = cb.bind(this)\r\n\t}\r\n\r\n\tsetState(state){\r\n\t\tthis.state = state;\r\n\t\tthis.state && this[this.funcName]();\r\n\t}\r\n}\r\nlet count = 0\r\nconst test = new Test(function func() {\r\n\tif (this.state === false) return;\r\n\tcount += 1;\r\n\tconsole.log(count,this.state);\r\n\t// this.func 要与callback函数名一样\r\n\tsetTimeout(this.func, 1000);\r\n});\r\ntest.setState(true)\r\nsetTimeout(()=>{\r\n\ttest.setState(false)\r\n},5000)\r\n\r\nsetTimeout(()=>{\r\n\ttest.setState(true)\r\n},10000)\r\n\r\nsetTimeout(()=>{\r\n\ttest.setState(false)\r\n},15000)\r\n```\r\n\r\n这样写就需要在new的时候传一个非匿名函数。不传函数会报错。这样就把方法分离出来了，但是也有坏处，就是在vscode中，在callback函数里this显示是any。","createdAt":1616265533993},{"id":9405,"originId":"606160fd2357dd6af7f9d8fa","articleId":2061,"userId":117,"content":"用闭包\r\n```js\r\nfunction fun() {\r\n  let interval;\r\n  const log = ()=>{\r\n    console.log('console');\r\n  }\r\n  return (value)=>{\r\n    if(value === true){\r\n      interval = setInterval(log, 1000);\r\n    } else {\r\n      clearInterval(interval)\r\n    }\r\n  }\r\n}\r\n\r\nconst test = fun();\r\n\r\ntest(true);\r\nsetTimeout(() => {\r\n  test(false);\r\n}, 5000);\r\n```","createdAt":1616994557486},{"id":9406,"originId":"60600d411b338735d55dad47","articleId":2062,"userId":98,"content":"测试代码本来就是巨啰嗦，会占用大量的开发时间，而且如果测试代码体量大需求变更后维护起来也难，这也是很多公司不要求写测试的原因\r\n当然测试覆盖率高程序也更安全可靠，尤其是改完代码跑一遍测试发现还是全绿基本可以放心大胆上线运行","createdAt":1616907585195},{"id":9407,"originId":"606014a31b33872d1f5dad50","articleId":2062,"userId":3161,"content":"[@zengming00](/user/zengming00) 感谢回复，目前我打算将 Socket.io 请求和事件监听封装一下，改成类似于 JQuery 的 ajax 请求方式，然后再利用封装的方式来结合 should/mocha 测试，也许可以减少编写测试用例的工程量。\r\n\r\n如果有这方面的轮子自然更好，不过我没找到...","createdAt":1616909475652},{"id":9408,"originId":"605c110fdac542e20fe29861","articleId":2063,"userId":98,"content":"这个问题相关部门比较懂怎么证明你是你","createdAt":1616646415145},{"id":9409,"originId":"605c1ccadac5423466e2987c","articleId":2063,"userId":111,"content":"拍买成功以后发同一 token 到用户和管理员，可以用短信形式，短信通道都必须开头有签名，这个一般伪造的可能性小\r\n拿货时出示token 与管理员的token核对    token里面可以写上拍卖物品单号，时间，地点，用户账号等关键信息","createdAt":1616649418785},{"id":9410,"originId":"605d47f95ac88cfc8915b1bd","articleId":2063,"userId":249,"content":"这跟取快递应该是一个道理","createdAt":1616726009544},{"id":9411,"originId":"605b1768dac5427022e295b4","articleId":2064,"userId":98,"content":"放在async函数里let wechatConfig = await getConfig()调用，或者\r\ngetConfig().then(function(wechatConfig){\r\n});\r\n另外我也非常认可在nodejs里直接用js做配置文件最好用","createdAt":1616582504433},{"id":9412,"originId":"605b1d58dac5420f26e295cf","articleId":2064,"userId":1504,"content":"[@zengming00](/user/zengming00) 嗯,放在async函数里调用是没问题的,但是这里因为种种原因,还是想直接在require里调用这个方法\r\n\r\n是不是require不能调用带async的方法","createdAt":1616584024656},{"id":9413,"originId":"605b1dd7dac542ecd9e295d6","articleId":2064,"userId":98,"content":"[@iori2882](/user/iori2882) 当然可以，只是直接调用async方法返回的都是promise并不是你想要的值","createdAt":1616584151140},{"id":9414,"originId":"605b1f6bdac542f0e5e295df","articleId":2064,"userId":1504,"content":"[@zengming00](/user/zengming00) 那只有放弃了啊","createdAt":1616584555961},{"id":9415,"originId":"605b1f7cdac5426cc7e295e2","articleId":2064,"userId":1504,"content":"[@zengming00](/user/zengming00) 那只有放弃了啊","createdAt":1616584572957},{"id":9416,"originId":"605b205ddac542a6fde295ec","articleId":2064,"userId":98,"content":"放弃什么？这没毛病呀，等到一切准备就绪最后开启服务，其实我发现很多公司的项目都忽略了这点，直接上来就把http服务开启了也不管数据库和其它资源有没有初始化完成","createdAt":1616584797736},{"id":9417,"originId":"605b2596dac542d0a3e295fd","articleId":2064,"userId":1504,"content":"[@zengming00](/user/zengming00) 是这样的,我调用了一个微信消息服务框架,如下面代码,他的config是静态的,而我的config是调用带有async的方法获得的,所以现在我没办法在/main路由里注入我的config\r\n\r\nvar wechat = require('wechat');\r\nvar config = {\r\n  token: 'token',\r\n  appid: 'appid',\r\n  encodingAESKey: 'encodinAESKey',\r\n  checkSignature: true \r\n};\r\napp.use('/wechat', wechat(config, function (req, res, next) {\r\n//do something\r\n}","createdAt":1616586134940},{"id":9418,"originId":"605b44fadac542019ee296c5","articleId":2064,"userId":388,"content":"其实问题不大呀，肯定是先获取到config再去调用微信的接口的，这是顺序执行的，异步只不过是非阻塞，但是执行顺序是不变的。既然你的config是异步获取，那就在异步回调或者async  wait或者promise then中去调用微信","createdAt":1616594170901},{"id":9419,"originId":"605b5141dac5421e9de296f7","articleId":2064,"userId":113,"content":"[@iori2882](/user/iori2882) 自己开发一个中间件，把wechat中间件再包一层即可","createdAt":1616597313875},{"id":9420,"originId":"605472c1dac542a85ee28713","articleId":2065,"userId":358,"content":"https://github.com/eggjs/egg-logger/blob/master/lib/transports/file.js#L104\r\n\r\n就这句吧","createdAt":1616147137887},{"id":9421,"originId":"6054866bdac542381be28790","articleId":2065,"userId":2145,"content":"[@atian25](/user/atian25) 感谢回答\r\n\r\n这一句只是开了一个追加的可写流。没看到有特别的地方。\r\n\r\n难道多进程日志指的是每个worker都往这一个文件里去打印日志么？\r\n\r\n我说的多进程日志，比如：log4js日志，默认所有的worker会发送日志到master进程，然后master进程统一打印。","createdAt":1616152171955},{"id":9422,"originId":"60549584dac5425980e287c9","articleId":2065,"userId":125,"content":"[@yansong](/user/yansong) 不是有个writable的判断吗，发生不安全写会直接报错，不过一般每个进程都会单独的日志文件，就像pm2一样","createdAt":1616156036336},{"id":9423,"originId":"60549947dac542be54e287f0","articleId":2065,"userId":2145,"content":"[@dlutwuwei](/user/dlutwuwei) 你说的writable只是写之前的判断，基本上所有的写操作都会加上这个判断。\r\n\r\n不过这个跟多进程日志无关。\r\n\r\n我只想搞懂egg的多进程日志具体是怎么去做的。","createdAt":1616156999827},{"id":9424,"originId":"605854a1dac5427610e28d70","articleId":2065,"userId":2145,"content":"[@atian25](/user/atian25) 能再详细解答一下么","createdAt":1616401569882},{"id":9425,"originId":"60593e01dac5424424e28ec9","articleId":2065,"userId":145,"content":"egg-logger 我记得是 直接多个进程不停的往同一个文件写入的。你是在纠结，会不会多个进程写入发生错误或者冲突吗？可以看我的发帖记录，是同一个问题么","createdAt":1616461313368},{"id":9426,"originId":"605964d9dac542dc69e29005","articleId":2065,"userId":2145,"content":"[@zhangxh1023](/user/zhangxh1023) 看了下应该是同一个问题。\r\n很早之前用 log4js 1.0 的时候，log4js的机制就是多个进程写一个日志文件。一打压，worker很容易就因为日志堆积而崩溃了。而且日志全是乱的。\r\n\r\n目前用log4js的cluster模式后，一打压，会导致master进程内存堆积严重，CPU打满，继而导致maser无法接收正常请求。\r\n所有想了解一下 eggjs 的处理方式。\r\n\r\n你是怎么理解当前 eggjs 的方式呢","createdAt":1616471257389},{"id":9427,"originId":"60598230dac542540fe2906a","articleId":2065,"userId":145,"content":"[@yansong](/user/yansong) 我觉得吧，多进程往同一个文件内追加日志，没问题。而且我当时自己试了一下也确实没发现问题。\r\n之前搜到的讨论的帖子。\r\nhttps://cnodejs.org/topic/5784ba5b49e4faa95429c6d2","createdAt":1616478768237},{"id":9428,"originId":"60599222dac542c0a9e290e3","articleId":2065,"userId":11,"content":"本来就只需要加 flag `a` 打开的可写流可以多进程向同一个文件写的。。。底层是安全的，只是顺序不保证而已。\r\n原因是 unix 下使用 flag `a` 打开的可写流对应的 libuv 文件池实现是 `UV_FS_O_APPEND`，即 `O_APPEND`，而 `O_APPEND` 本身在 man 手册里就定义为原子操作，内核保证了对这个可写流的并发写是安全的不需要在应用层额外加锁（除了在 NFS 类的文件系统上并发写会造成文件信息丢失或者损坏）","createdAt":1616482850655},{"id":9429,"originId":"605992f0dac54234cbe290ea","articleId":2065,"userId":11,"content":"NFS 类的网络挂载的文件系统主要是靠模拟掉底层的 api 来实现的类本地操作，显然无法在竞争条件下完美还原这类的原子操作 api，所以如果你的日志要写到类似 oss 云盘挂载本地的这种就不能这么干，多进程写的话必须在应用层自己手动加锁","createdAt":1616483056977},{"id":9430,"originId":"605ae2fddac54258b4e294a7","articleId":2065,"userId":2145,"content":"嗯，大致明白了。感谢大家的回答~  [@hyj1991](/user/hyj1991) [@zhangxh1023](/user/zhangxh1023) ","createdAt":1616569085641},{"id":9431,"originId":"60599867dac542fa7be29133","articleId":2066,"userId":11,"content":"这需求不就是放到 agent 进程上的么","createdAt":1616484455471},{"id":9432,"originId":"605998fbdac5424b18e2913e","articleId":2066,"userId":3163,"content":"[@hyj1991](/user/hyj1991) 嗯嗯  我最开始也是用的Agent进程，但是因为我需要只在一个进程中运行的代码还挺多的 不知道这样污染和占用Agent进程是否合适","createdAt":1616484603643},{"id":9433,"originId":"6059a14ddac542455ee29199","articleId":2066,"userId":248,"content":"Egg ? 试试 Midway.js v2 吧，可以兼容 Egg ，又可以享受 TS 的特性。可以从这个项目上手 https://github.com/fsd-nodejs/service-mw2","createdAt":1616486733222},{"id":9434,"originId":"6059a405dac54278d2e291b4","articleId":2066,"userId":11,"content":"[@yxw13141618](/user/yxw13141618) agent 进程就是为只需要一个进程运行的逻辑设计的，只要你的逻辑本身没问题不会有其它影响","createdAt":1616487429926},{"id":9435,"originId":"6059a4cfdac542b356e291c6","articleId":2066,"userId":3163,"content":"[@hyj1991](/user/hyj1991) 收到 谢谢 那我是不是可以通过ipc来通知其中的某一个worker来干具体的操作事情。","createdAt":1616487631430},{"id":9436,"originId":"6059ab55dac5427c90e291ef","articleId":2066,"userId":11,"content":"[@yxw13141618](/user/yxw13141618) 可以，但是 ipc 最好不要传递过大的数据或者过于频繁的传递","createdAt":1616489301123},{"id":9437,"originId":"604b30cc4655eab22d21b2ee","articleId":2067,"userId":247,"content":"目前我的处理方式是，遍历 + setTimeout 来进行分片渲染 ，应该还有更优解","createdAt":1615540428006},{"id":9438,"originId":"604ef01c4655eaa14821b7d4","articleId":2067,"userId":125,"content":"可以从数据层面上考虑是否可以进行一下多边形的合并，而且多边形不应绘制在同一个图层里吗，5000-1000个多边形超出了sdk引擎的承受范围，即使渲染出来，交互的时候也会卡吧。\r\n还有个办法是计算一下，只绘制可视区内的图形。","createdAt":1615786012118},{"id":9439,"originId":"604ef6a24655eac8a621b7fa","articleId":2067,"userId":247,"content":"首先业务需求不是对多边形进行合并的，是对绘制的点位来进行数据分析的。\r\n目前的处理方案如你所说，对数据过滤，绘制以中心点位10公里范围内的数据，这个方案确实可行，但是还有一点不足，就是无法查看整个城市级别的图层分布了，不过这个在业务上暂时不关心。\r\n\r\n感谢大佬的分享哈~","createdAt":1615787682645},{"id":9440,"originId":"60548147dac5428b77e2876e","articleId":2067,"userId":117,"content":"一万个多边形应该不至于卡死把？","createdAt":1616150855785},{"id":9441,"originId":"60587773dac5420d64e28df9","articleId":2067,"userId":247,"content":"[@chenkai0520](/user/chenkai0520) 兄弟 3000左右的点位，浏览器已经有点卡顿了...  你可以到高德他们的官方的 demo 中去试一下哈","createdAt":1616410483905},{"id":9442,"originId":"605869cddac5423009e28dd3","articleId":2068,"userId":38,"content":"```\r\nsomeLib('sth', function (err) {\r\n  // err\r\n})\r\n```\r\n上面拿到的 error 跟下面的情况基本是可以类比的\r\n```\r\ntry {\r\n  someLib('sth');\r\n} catch(err) {\r\n  // err\r\n}\r\n```\r\n前者是一个常见的约定写法。会有这个写法的原因是以前的 try/catch catch 不到异步的报错（不过现在用 async await 是可以 catch 到的）。","createdAt":1616406989531},{"id":9443,"originId":"60570d24dac5425ef4e289e8","articleId":2069,"userId":147,"content":"楼主提了很多问题，也是很好的问题，nodejs的崛起我觉得和前端的崛起有很大关系，这也不代表nodejs真的很好，很强。但是对前端来说，前后端一致的好处很多，也因为nodejs，前端人也多了一把利器，把领地拓展到其他地方。另外，起多个端口那个问题不是很理解楼主意思。起端口在nodejs有什么限制？","createdAt":1616317732064},{"id":9444,"originId":"60570ec7dac542796ae289f3","articleId":2069,"userId":98,"content":"我给新手的建议是：别把其它语言的设计思想带到node上，尤其是java，node和go本身应用起来是很简单的，你用nodejs写几个项目就知道它有多爽了\r\n如果你喜欢php，你可以试试我几年前做的一个有趣的小玩意：https://github.com/zengming00/go-server-js","createdAt":1616318151583},{"id":9445,"originId":"605747dedac5420a89e28a94","articleId":2069,"userId":111,"content":"相对服务端nodejs优势已经不明显，js更靠近客户端 不如用js写客户端吧 直接生成机器码双击运行 \r\nhttps://html-notepad.com/\r\n[下载试用](https://html-notepad.com/dist/html-notepad.zip)","createdAt":1616332766610},{"id":9446,"originId":"60580d5bdac54224dce28c4e","articleId":2069,"userId":33,"content":"asp不是c#吗，，php性能差啊，js能全栈语言统一成本低啊，端口问题可以加一层负载均衡啊，，你是想把nodejs改造成windows上的点点点桌面程序吗","createdAt":1616383323235},{"id":9447,"originId":"60584220dac5426693e28d14","articleId":2069,"userId":38,"content":"> 有些书写node是第一个使用js作为后台的编程语言，难道他们不知道ASP早就使用了么？\r\n\r\n没读到过这种书，不了解。11 年用过 PHP/ASP/JSP，不太理解你说的早就使用过是指什么，是指渲染出来的前端页面可以调用 JavaScript 还是指内置了一个 JavaScript 引擎可以服务端执行用户的代码。如果是后者的话，在服务端执行 JavaScript 代码，在 Node.js 诞生之初（09年） V8 就是比较优秀的选项，现在已经是个无疑义的选项，微软一直没有办法超越（查克拉已死），所以如果说要在后端跑 JavaScript 代码的话，各路语言早不早其实都不重要，重要的是要使用 V8。\r\n\r\n> 如果ASP支持新版的js，并且增加异步功能，实现跨平台，那还有node什么事？当然现在无法实现。\r\n\r\nASP 支持 js 并增加异步功能，实现跨平台。怎么说呢，不符合微软的发展方向，从上个世纪开始微软的大方向一直都是，“一个平台，所有语言”，也就是希望开发者们都跑到微软自家的平台上去，支持跨平台不是给他们自家挖角吗（现在微软的思想已经放开了，但是也就那样把，早就过了跨平台风口了）。异步功能怎么说呢，这东西很早就有了，很多古早的语言其实都有使用 libevent 之类的库开发异步程序，只是太难用了。如果能在语言层面封装，确实可以极大的提高生产力。\r\n\r\n总得来说这个问题问得不太有水平，更合理一点问应该是问，为什么不是 Node.lua、Node.py ... 而是现在的 Node.js。如果你是 js 厨的话，ASP or 其他啥发展到 Node 现在的规模其实只是历史的轱辘转到了它该转的地方。\r\n\r\n> node 繁琐的路由机制，不应该在node的本身exe，作为一个服务器实现么？这样就简单多了，效率也会提升，那为什么不完善？至少可以提供一个开关，决定是否启用这项功能，这样也会简单多了。路由为什么exe本身不完善？\r\n\r\n看不太懂问题。\r\n\r\n> 目前一次只能node一个js应用，虽然可以开多个端口、借助cluster，但任意多就不行，问题是都要用一个端口，怎么解决？一百个应用，一百个端口？比如一个网站有100个js应用，启动服务node index.js，应用app1.js，app2.js……app100.js都是通过index.js路由，无法绕过路由这一关，直接访问。\r\n\r\n都要用一个端口可以使用 Nginx 做反向代理。端口丢给 Nginx 这样的 web server 即可，这也是 PHP 这样的语言实现的思路，PHP 本身也是不监听端口的而是通过对应的 web server 来listen请求（例如 Nginx、Tomcat 等），而 Node.js 集成了一定 web server 的功能所以比 PHP 要简单一些，直接可以启动起来监听端口，不过复杂一点的应用也可以回到 web server 的模型下。\r\n\r\n一个网站有 100 个 js 应用，除了上述通过 web server 反向代理，还可以考虑使用微服务（RPC 等）方式来处理。一般来说，一个大型的门户网站背后有几百个应用的组织方式应该是十分成熟且与语言无关的。\r\n\r\n> php也可以实现异步非阻塞，那么node的意义何在？是前端不想学习语言的借口么？\r\n\r\n这种车轱辘话我也可以随口遍很多出来：\r\n\r\n- 汇编也可以开发 window 桌面应用，那么 C# 的 winform 的意义何在？是 C# 工程师不想学习汇编的借口吗？\r\n- PHP 也可以渲染页面，那么 JSP、ASP 的意义何在？是 Java、C# 工程师不想学习 PHP 的借口么？\r\n\r\n不抖机灵的说，Web 应用的开发应该是跟语言无关的，基础知识就那么点，学明白了用啥语言都差不到哪去。无非是团队选型、招聘成本等外场因素，不存在说一定要怎么样。\r\n\r\n> php占大多数，便于扩展、使用现成的程序，node有什么优势？\r\n\r\nNode.js 优势不大，JavaScript 优势大。会 JavaScript 开发者占程序员的大多数。好招聘，人口基数在，未来可期。\r\n\r\n举个例子，上个世纪 C 刚流行的时候，很多擅长汇编的会觉得 C 编译出来的汇编太慢了，所以即使用了 C 语言也会在特定的地方使用汇编，但是慢慢的就没人这么做了。为什么，因为摩尔定律的存在，应用对于内存等指标越来越宽松，直接用 C 更简单的情况下最终结果就是大家都直接用 C 语言。JavaScript 也是一个被预言成有这种潜力+趋势的语言。\r\n\r\n> 很多接口提供php的，但很少有node，造成不便，如何解决？\r\n\r\nPHP 提供的接口不是 HTTP 吗？如果是 HTTP 的那么接入的方式应与语言无关，而与提供接口的人有关。\r\n\r\n> npm 数量虽多，但质量参差不齐，用于生产，恐怕有风险，所以npm数量衡量node的优势，有意义么？\r\n\r\n经典车轱辘问题吧。不看看隔壁 Java 的 maven 吗，maven 的包也很多，质量也参差不齐，没人吐槽吗？阿里巴巴的 FastJson 每隔一段时间都报个大 BUG，除了阿里的 Java 谁想去吃这坨 x，可是就这样你看他们（社区 Java 开发）吐槽的是 maven 吗？正常人吐槽的都是阿里吧？\r\n\r\n对于平台而言，重要的不是个体如何而是规模如何，只要规模上来了，那么出现精品只是时间问题。人是社会性动物，在足够大规模的平台下肯定能碰撞出好的东西。而且开源人的想法，落到具体的技术产品上也是想被人看见的，同样写一个 curl 的 lib，用 golang 写如果只有 1000 人能试用到（几十个star），但是用 NPM 你能让 10000 人用到（几百个star），那么你会选择哪个平台来落地你的想法？很多这些东西都是在规模大到一定程度就可以潜移默化的。笼统的说，就是生态影响力。\r\n\r\n> 搭建服务器方面，如何实现多个网站，多个域名，多个二级子域名？并实现安全隔离。有成熟方案么？并解决安全问题，node本身不能解决这些问题吧？\r\n\r\nem，这个问题问出来，感觉你需要认真学习一下 HTTP 协议。Node.js 可以解决这些问题，你开心的话用 C 语言 or 汇编都行，这都是跟语言无关的事情，只需要要你了解 HTTP协议即可。成熟的方案来说一般不会用 Node.js 实现（虽然我写过.. 在用 Node.js 写网关的时候），因为管理这些东西的人通常来说都是网络工程师 or 运维工程师而不是 Web 开发。\r\n\r\n> 速度方面，测试都是极端，但一般用似乎没有什么特别的感觉？是这样么？\r\n\r\n大部分人开发的时候都触摸不到用户体验在性能上的天花板，就好像大部分人工作中都遇不到高并发场景一样。性能主要是个适合装逼和面试场景的领域。也就是经典的造核弹和拧螺丝的差别，咱们还是多讨论一下螺丝的型号啥的比较实在。","createdAt":1616396832563},{"id":9448,"originId":"60502ca14655ea1bff21bb35","articleId":2070,"userId":11,"content":"大致看了下原理，基本上是启动多个针对 I/O 的 event loop，但是注册的网络请求处理逻辑还是丢回 JS 工作线程做，理论上 nodejs 也可以这么干，主要看业务场景的瓶颈是不是在网络层面了，要不然提升可能压测下基本感知不到。","createdAt":1615867041081},{"id":9449,"originId":"60502e924655eae08b21bb3f","articleId":2070,"userId":33,"content":"[@hyj1991](/user/hyj1991) 蚂蚱也是肉","createdAt":1615867538025},{"id":9450,"originId":"6052f12adac54254c1e280b7","articleId":2070,"userId":33,"content":"顶下","createdAt":1616048426265},{"id":9451,"originId":"5d2d885c51637b492bb0f2e5","articleId":2071,"userId":867,"content":"发技术贴，支持","createdAt":1563265116030},{"id":9452,"originId":"5d2d9a07c5fe2549619aeda0","articleId":2071,"userId":545,"content":"说了这么多你是什么场景。\r\n```\r\nvar num =2.446242342;\r\nnum = num.toFixed(2);  // \b输出结果为 2.45\r\n```\r\n```\r\nMath.floor(15.7784514000 * 100) / 100   // \b输出结果为 15.77\r\n```\r\n```\r\nNumber(15.7784514000.toString().match(/^\\d+(?:\\.\\d{0,2})?/))   // \b输出结果为 15.77,不能用于整数如 10 必须写为10.0000\r\n```","createdAt":1563269639183},{"id":9453,"originId":"5d2dacdd51637b492bb0f409","articleId":2071,"userId":640,"content":"不知道你是什么场景。\r\n我遇到过的需要舍掉小数的情况\r\n1.给用户显示用的，只显示小数点后五位（记得外汇期货一般是这样）或者七位就差不多了，一般是给足够精度，然后客户端处理显示。\r\n2.帧同步的服务器需要定点数，一般都有现成的定点数的库，或者参考一下unity或者unreal现成的实现一下。","createdAt":1563274461031},{"id":9454,"originId":"5d2deeab51637b492bb0f4d5","articleId":2071,"userId":751,"content":"可以考虑用下库\r\nhttps://github.com/MikeMcl/decimal.js/\r\n\r\n第一次知道 js 运算不精确的时候我是崩溃的，还好找到一个库可以弥补","createdAt":1563291307866},{"id":9455,"originId":"5d2e84a251637b492bb0f605","articleId":2071,"userId":3164,"content":"浮点存储引起的精度问题，可以用toPrecision:\r\n```\r\n5.192.toPrecision(3)\r\n```","createdAt":1563329698404},{"id":9456,"originId":"5d2eb79651637b492bb0f739","articleId":2071,"userId":22,"content":"[@xkazer](/user/xkazer) 并不能 https://www.ecma-international.org/ecma-262/6.0/#sec-number.prototype.toprecision","createdAt":1563342742837},{"id":9457,"originId":"5d2ecb8e9969a529571d4b31","articleId":2071,"userId":1413,"content":"[@zuohuadong](/user/zuohuadong) 你的方法用楼主给出的值试试？有很多边界情况的","createdAt":1563347854848},{"id":9458,"originId":"5d2eeb62b2b9222961dab8a3","articleId":2071,"userId":1702,"content":"```\r\n// 将数字转换为字符串并保留指定小数位\r\n// 未验证参数, 参数必须为数字\r\nfixed = function (num, len = 2) { \r\n    num = String(num)\r\n    len = parseInt(len)\r\n    const pad = new Array(len + 1).join('0')\r\n\r\n    if (num.indexOf('e-') > 0) {\r\n        num = '0' + String(Number(num) + 1).substr(1)\r\n    }\r\n\r\n    const arr = num.split('.')\r\n    if (len < 1) {\r\n        return arr[0]\r\n    }\r\n    arr[1] = (arr.length < 2 ? pad : arr[1] + pad).substr(0, len)\r\n    return arr.join('.')\r\n}\r\n```","createdAt":1563356002634},{"id":9459,"originId":"5d2f2dec9969a529571d4dc1","articleId":2071,"userId":43,"content":"这样可以吗\r\n``` javascript\r\nMath.round(5.1 * 100) / 100\r\n```","createdAt":1563373036629},{"id":9460,"originId":"5d2fdcb1b2b9222961dabc2a","articleId":2071,"userId":1373,"content":"推荐两个专门处理JS浮点数问题的插件：\r\n\r\n1、[https://github.com/nefe/number-precision](https://github.com/nefe/number-precision)\r\n2、[https://github.com/josdejong/mathjs](https://github.com/josdejong/mathjs)\r\n\r\n希望能帮到你","createdAt":1563417777145},{"id":9461,"originId":"60501a774655ea460521badd","articleId":2071,"userId":3165,"content":"可以总是通过加上一个很小的数，就能得到正确的 integer：\r\nconsole.log(Math.floor(5.1 * 100 + 10e-7) / 100)","createdAt":1615862391347},{"id":9462,"originId":"60457b6f4655ea690821a2d4","articleId":2072,"userId":145,"content":"如果暂时没有好去处，就写写呗。。。。又不是说你写了 java，就不会写 nodejs 了。\r\nhhhh 我现在就是这样，node 项目太少了，让我考虑一下帮忙写一下前端。然后我拒绝了，表示还不如写 java。然后就开始写 java 了orz 。","createdAt":1615166319070},{"id":9463,"originId":"6045bf9c4655ea1e2621a3dd","articleId":2072,"userId":3167,"content":"可以考虑的，我现在珠海搞了5年nodejs了，都打算转golang了\r\n\r\n不是说这语言不行，只是说，真的没市场。。。","createdAt":1615183772188},{"id":9464,"originId":"6045daf34655eaad0d21a472","articleId":2072,"userId":3166,"content":"[@CoderIvan](/user/CoderIvan) 我在杭州，看招聘上还挺多要node的","createdAt":1615190771283},{"id":9465,"originId":"6046f0984655ea078821a70d","articleId":2072,"userId":2142,"content":"果断转Java啊","createdAt":1615261848427},{"id":9466,"originId":"604c8f6a4655ea0d8121b4ba","articleId":2072,"userId":3168,"content":"天赐良机啊兄弟","createdAt":1615630186697},{"id":9467,"originId":"604c936c4655ea495a21b4c6","articleId":2072,"userId":106,"content":"[@helloHT](/user/helloHT) 杭州被阿里系带的节奏吧？用来用去感觉还是 java / go 做后端性价比高","createdAt":1615631212020},{"id":9468,"originId":"604ca2764655ea68f321b4d2","articleId":2072,"userId":111,"content":"刚毕业如果基础好，就直接入c/c++   水平一般的话就选java/php 做crud   nodejs/go是宣称高并发起来的，但是有高并发业务的公司只占很少比例，但是要求却很高   一般是写crud写了好几年都写吐了的码农才转golang/nodejs    ","createdAt":1615635062993},{"id":9469,"originId":"604e1e664655ea722c21b660","articleId":2072,"userId":80,"content":"牛啊，兄弟","createdAt":1615732326039},{"id":9470,"originId":"604eb0c24655ea700721b692","articleId":2072,"userId":36,"content":"写","createdAt":1615769794582},{"id":9471,"originId":"58a32632f1c732c53643a385","articleId":2073,"userId":3169,"content":"两个都用过的，腾讯云用的是最低配置的，期间出了一个小问题，半夜打客服电话很快的解决了问题。阿里云做活动送了半年的时间，所以转到阿里云来了，我只是用的基本功能，所以感觉两者都差不多，但是我们公司用的是阿里云，因为貌似阿里云其他服务多。。。","createdAt":1487087154560},{"id":9472,"originId":"58a3b5eecefe06e13676a810","articleId":2073,"userId":1860,"content":"听说阿里云的磁盘io很差，腾讯的好很多，同样价格。","createdAt":1487123950838},{"id":9473,"originId":"58a45f381045d6892b1f2df2","articleId":2073,"userId":367,"content":"国内现在只有阿里云和其他...选择不太多","createdAt":1487167288439},{"id":9474,"originId":"58a4643ac41c94fd36911fb0","articleId":2073,"userId":1956,"content":"阿里云好。","createdAt":1487168570848},{"id":9475,"originId":"58a5078df1c732c53643a3de","articleId":2073,"userId":423,"content":"今天公司的360的服务器ip拿不到了。。。","createdAt":1487210381622},{"id":9476,"originId":"58a51c70c41c94fd36911fd7","articleId":2073,"userId":18,"content":"腾讯云界面比较好看哈哈哈\r\n","createdAt":1487215728443},{"id":9477,"originId":"58a51e071045d6892b1f2e0e","articleId":2073,"userId":3105,"content":"百度云用户路过  是不是太low了","createdAt":1487216135850},{"id":9478,"originId":"58a56be5414c2f516447879e","articleId":2073,"userId":3170,"content":"没用过腾讯云，不过觉得阿里云很好用","createdAt":1487236069857},{"id":9479,"originId":"58a583b8414c2f51644787ac","articleId":2073,"userId":3171,"content":"用过个把月腾讯云，最后死在不能在浙江省备案上，果断换阿里云","createdAt":1487242168569},{"id":9480,"originId":"604b38884655ea1f9121b319","articleId":2073,"userId":364,"content":"两家都好用，我建议都可以去用，换着来使用，对于个人来讲。如果对于企业来讲，那就选腾讯云吧，价格稍微便宜点。\r\n\r\n腾讯云服务器最新优惠活动汇总：[](http://begin.yundashi168.com/tencent/index)http://begin.yundashi168.com/tencent/index\r\n阿里云服务器最新优惠活动汇总: [](http://begin.yundashi168.com/aliyun/index)http://begin.yundashi168.com/aliyun/index\r\n\r\n现在阿里云和腾讯云学生机的都更新了，最新地址\r\n阿里云学生机：[](https://dashi.aliyun.com/site/arison/student)https://dashi.aliyun.com/site/arison/student    1核2G1M  108元 推荐1年\r\n腾讯云学生机：[](https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314&cps_key=806a34e58199d2e0ccdf9a10ef0ba6ac)https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314    1核2G1M  114元 推荐1年\r\n\r\n其它还有华为云，Ucloud云，金山云和硅云，这些活动可以[点击这里](http://tencent.yundashi168.com/)查看","createdAt":1615542408989},{"id":9481,"originId":"604df0f64655ea481121b61a","articleId":2073,"userId":80,"content":"测试","createdAt":1615720694952},{"id":9482,"originId":"5a4094d98230827a18293a28","articleId":2074,"userId":358,"content":"leancloud ?","createdAt":1514181849505},{"id":9483,"originId":"5a409cee9807389a1809f6ac","articleId":2074,"userId":1186,"content":"之前腾讯云有校园活动，1核 1G 1M，1元/月。现在应该是没有这么白菜的机器了。","createdAt":1514183918509},{"id":9484,"originId":"5a409db38230827a18293a30","articleId":2074,"userId":466,"content":"阿里云的学生计划已经够便宜了","createdAt":1514184115417},{"id":9485,"originId":"5a40a7b2d92f2f5b185ad1dc","articleId":2074,"userId":1199,"content":"可以考虑SAE,\r\n比如百度的,12块一个月.","createdAt":1514186674696},{"id":9486,"originId":"5a40b751d1536726354b80f2","articleId":2074,"userId":390,"content":"阿里云首单个人免费使用6个月\r\nhttps://free.aliyun.com/?spm=5176.8112568.738194.4.64b3a114o1mrFp\r\n每天10点开抢，免费的抢不到，就抢一个9.9的吧，有一个域名券可以用\r\n亚马逊\r\n注册填写信息，送一年服务器，","createdAt":1514190673351},{"id":9487,"originId":"5a40b7808230827a18293a3e","articleId":2074,"userId":390,"content":"自己创建一个centos的实例就行","createdAt":1514190720669},{"id":9488,"originId":"5a40bc85d1536726354b80f7","articleId":2074,"userId":1985,"content":"阿里云首单个人免费使用6个月，现在还有个活动，再续费一年才330  1核 1G 1M的，够便宜了吧感觉","createdAt":1514192005827},{"id":9489,"originId":"5a40c689d1536726354b8102","articleId":2074,"userId":254,"content":"非常感觉大家的回复，我就先不一一回复了","createdAt":1514194569589},{"id":9490,"originId":"5a40dbdc8230827a18293a49","articleId":2074,"userId":250,"content":"阿里云的学生机才9.9，装个ubuntu挺好的，像搞啥不行。\n百度的bae也便宜，但是不好用\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1514200028235},{"id":9491,"originId":"5a419b678230827a18293a5b","articleId":2074,"userId":254,"content":"[@mengdu](/user/mengdu) 已经工作快两年了，不是学生了 =。=","createdAt":1514249063742},{"id":9492,"originId":"5a419ca0d92f2f5b185ad1f9","articleId":2074,"userId":1328,"content":"一个月70多块钱，每天2块多，还不够你吃早点的，不知道你为什么还在嫌贵","createdAt":1514249376026},{"id":9493,"originId":"5a41b9cc8230827a18293a75","articleId":2074,"userId":111,"content":"自己做项目用localhost啊 一分钱不要  ","createdAt":1514256844980},{"id":9494,"originId":"5a41c112d1536726354b812e","articleId":2074,"userId":2825,"content":"腾讯云最近做活动，1核1G才20多块钱一个月，真心白菜价了吧……一顿饭钱，这你还嫌贵（? _ ?）","createdAt":1514258706725},{"id":9495,"originId":"5a41c4089807389a1809f6e1","articleId":2074,"userId":3172,"content":"基础的 一年也就300+，  够你用了","createdAt":1514259464048},{"id":9496,"originId":"5a44c0ebf320ae9f0dd58151","articleId":2074,"userId":1527,"content":"京东云\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1514455275266},{"id":9497,"originId":"5a48cf1d9807389a1809f87e","articleId":2074,"userId":3173,"content":"自己是用的京东云学生机 88一年 1核2G1M","createdAt":1514721053334},{"id":9498,"originId":"5a4afee4f320ae9f0dd5823f","articleId":2074,"userId":1215,"content":"如果应用适合 API Gateway + 函数计算的话，这两个技术栈最便宜。","createdAt":1514864356885},{"id":9499,"originId":"5a7c10e999ef9fac6b2e685e","articleId":2074,"userId":254,"content":"阿里云\r\n![image.png](//static.cnodejs.org/FsQxuDdZhbdlgo4o_m5J0zXZEZMX)\r\n腾讯云\r\n![image.png](//static.cnodejs.org/FtG1uw_KPYnMyy33hnwfZ8jyjQEQ)\r\n\r\n![image.png](//static.cnodejs.org/FoYSfXRrux2R2WVQ4eb0HOTKBJpK)\r\n![image.png](//static.cnodejs.org/FmZexAY-WIP7qBbBiXFCF2BRjYeH)\r\n\r\n腾讯云 **系列2 **和 阿里云** 系列3 ** 的区别是啥？？？\r\n\r\n腾讯云 的这个，比平常便宜吧，\r\n1核1G 平常价格  2772元/3年？？？？？","createdAt":1518080233067},{"id":9500,"originId":"5a7c127d99ef9fac6b2e685f","articleId":2074,"userId":3174,"content":"APICloud，物美价廉质优","createdAt":1518080637499},{"id":9501,"originId":"5a7c134f497a08f571384f17","articleId":2074,"userId":1734,"content":"阿里云的客服服务还是...太慢了, 不到万不得已, 只能工单.","createdAt":1518080847991},{"id":9502,"originId":"5a7c3a198d6e16e56bb80684","articleId":2074,"userId":2108,"content":"阿里云 已经很便宜了，有个一年才330  1核 1G 1M的，可以一直续费好像都是一年 330的","createdAt":1518090777377},{"id":9503,"originId":"5a7c5ed75321b5396004ecca","articleId":2074,"userId":772,"content":"论坛上说了，新手搭建 Node.js 服务器，推荐使用无需备案的 DigitalOcean(https://www.digitalocean.com/)","createdAt":1518100183607},{"id":9504,"originId":"604b380e4655eaddef21b30e","articleId":2074,"userId":364,"content":"腾讯云服务器最新优惠活动汇总：[](http://begin.yundashi168.com/tencent/index)http://begin.yundashi168.com/tencent/index\r\n阿里云服务器最新优惠活动汇总: [](http://begin.yundashi168.com/aliyun/index)http://begin.yundashi168.com/aliyun/index\r\n\r\n现在阿里云和腾讯云学生机的都更新了，最新地址\r\n阿里云学生机：[](https://dashi.aliyun.com/site/arison/student)https://dashi.aliyun.com/site/arison/student    1核2G1M  108元 推荐1年\r\n腾讯云学生机：[](https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314&cps_key=806a34e58199d2e0ccdf9a10ef0ba6ac)https://cloud.tencent.com/act/campus?fromSource=gwzcw.1293314.1293314.1293314    1核2G1M  114元 推荐1年\r\n\r\n其它还有华为云，Ucloud云，金山云和硅云，这些活动可以[点击这里](http://tencent.yundashi168.com/)查看","createdAt":1615542286373},{"id":9505,"originId":"604ac90c4655ea262021b16f","articleId":2075,"userId":147,"content":"这个问题有点意思，这个可能要看keepalive的实现，nodejs的话，目前想到的一个方式是，因为keepalive情况下是同一个socket，每次收到请求的时候，打标记，比如req.socket.keepaliveFlag等于true。那么每次收到请求的时候，判断标记，true就说明是长连接。但是对于第一个请求，这个方式不行，可以使用rsp.shouKeepalive这个字段。这个字段标记一个请求是否设置了keepalive头。","createdAt":1615513868294},{"id":9506,"originId":"604b28074655ea508d21b2d1","articleId":2075,"userId":3175,"content":"评论+1","createdAt":1615538183584},{"id":9507,"originId":"604b28104655ea6c9821b2d3","articleId":2075,"userId":3175,"content":"[@pazh123qq](/user/pazh123qq) 评论+2","createdAt":1615538192111},{"id":9508,"originId":"604598b04655eae40621a368","articleId":2076,"userId":11,"content":"实际上也确实快，esbuild 现在用的人也不少了已经","createdAt":1615173808374},{"id":9509,"originId":"6045c2854655ea2a0a21a3fc","articleId":2076,"userId":153,"content":"挺快的，主要是使用 go 语言写的，可以并行执行，比如编译、构建等等可以一起执行，同时内部也有很多优化的算法，整体上速度会很快","createdAt":1615184517594},{"id":9510,"originId":"6046ed084655ea8ae821a6e1","articleId":2076,"userId":2,"content":"是的，实测了下，感觉直接起飞了","createdAt":1615260936358},{"id":9511,"originId":"6046ed224655eae02121a6e4","articleId":2076,"userId":2,"content":"但是实际的项目还在观望中","createdAt":1615260962702},{"id":9512,"originId":"604783ae4655ea7abc21aaf1","articleId":2076,"userId":3176,"content":"是挺快的，基本就是实时，没有转es6+代码的过程了，浏览器直接解析代码，vite 就用的 esbuild","createdAt":1615299502912},{"id":9513,"originId":"603f24ad4655ea223d219658","articleId":2077,"userId":3177,"content":"划分标准就是现代浏览器和古代浏览器啊","createdAt":1614750893506},{"id":9514,"originId":"6047277e4655ea019a21a85a","articleId":2077,"userId":314,"content":"我的理解是，浏览器原生支持ES6+特性应该就算是现代浏览器了","createdAt":1615275902467},{"id":9515,"originId":"604599c94655ea638121a371","articleId":2078,"userId":358,"content":"往 process.stdin 里面写，需要 fork 时开 ipc\r\n\r\n可以找下一些 cli 的单测库来看看他们的实现","createdAt":1615174089608},{"id":9516,"originId":"6045bb414655ea44ba21a3c2","articleId":2078,"userId":93,"content":"[@atian25](/user/atian25) 好的，我试试","createdAt":1615182657275},{"id":9517,"originId":"6045eef34655ea529c21a4b8","articleId":2078,"userId":93,"content":"[@atian25](/user/atian25) 请问有代码段参考么？","createdAt":1615195891635},{"id":9518,"originId":"6046c3c24655ea4ae121a5ae","articleId":2078,"userId":358,"content":"https://github.com/node-modules/coffee/blob/master/lib/coffee.js#L284","createdAt":1615250370602},{"id":9519,"originId":"6046cf884655ea1fc421a600","articleId":2078,"userId":93,"content":"[@atian25](/user/atian25) 太感谢了！","createdAt":1615253384956},{"id":9520,"originId":"5bd034c6ad50495f5e2fbad3","articleId":2080,"userId":1093,"content":"你应该思考得更上层一些。需求是什么，要解决什么场景下的问题。我觉得没有场景是一定要用这种hack的方式才能解决的。\r\n如果你想实现即时禁用用户的功能，就不应该依赖session，而是从数据库中读取权限。比如说用token来做用户认证而不是依赖session","createdAt":1540371654842},{"id":9521,"originId":"60419bc94655ea03f2219cc2","articleId":2080,"userId":3180,"content":"鉴权 中间件里加上下面代码, 在需要的地方给用户的session 标记相应的状态\r\n```\r\nconst ses = await ctx.app.redis.get(ctx.session._sessCtx.externalKey)\r\n// console.log(val, JSON.parse(val))\r\n```","createdAt":1614912457812},{"id":9522,"originId":"603f59f14655ea6a10219798","articleId":2081,"userId":2,"content":"可以使用js的bigint类型，不过需要自己写转化的方法","createdAt":1614764529293},{"id":9523,"originId":"603f96944655ea7cf721984d","articleId":2081,"userId":147,"content":"之前恰好碰到类似的，研究了一下，可以看看这个https://zhuanlan.zhihu.com/p/352709846","createdAt":1614780052197},{"id":9524,"originId":"603c479f4655ea0963218e75","articleId":2082,"userId":250,"content":"你要的只是个编辑器吧，直接用 codermirror 或者 monaco-editor 编辑器都行，设置语言类型是sql就可以智能提示了","createdAt":1614563231379},{"id":9525,"originId":"603f30ff4655eae3e6219694","articleId":2082,"userId":43,"content":"[@mengdu](/user/mengdu) 感谢 感谢 我这就试试","createdAt":1614754047674},{"id":9526,"originId":"603e27b64655ea1dde21945f","articleId":2083,"userId":79,"content":"找到了， 有收录开源的项目： https://github.com/ligurio/awesome-ci     https://github.com/cicdops/awesome-ciandcd","createdAt":1614686134170},{"id":9527,"originId":"602f86e503d7974e29670429","articleId":2084,"userId":3185,"content":"post请求，请求参数放在body里，你放在params里了。。。","createdAt":1613727461954},{"id":9528,"originId":"602f8cbe03d79745be670456","articleId":2084,"userId":3184,"content":"[@nikolausliu](/user/nikolausliu) 麻烦大佬能帮我测一下吗，然后发个截图回复一下，测试太多次到达每日发帖上限了QWQ...\r\n","createdAt":1613728958375},{"id":9529,"originId":"602f8ffd03d7972b4f670467","articleId":2084,"userId":80,"content":"老哥，现有的API能做登陆吗？ 新建主题不是要先登录，获取token才可以吧？\r\n","createdAt":1613729789012},{"id":9530,"originId":"602f994303d7978cb067048c","articleId":2084,"userId":3184,"content":"[@moshengqing](/user/moshengqing) 登录没问题，就发帖这个我整不出来","createdAt":1613732163446},{"id":9531,"originId":"6033afcc4655ea450e21793d","articleId":2084,"userId":80,"content":"[@YuinS316](/user/YuinS316)  老哥，请教一下，登录用哪个API??","createdAt":1614000076001},{"id":9532,"originId":"603658f64655ea1d712182d1","articleId":2084,"userId":3186,"content":"[@moshengqing](/user/moshengqing) 登录的话我是先验证token正确性，正确的话就会拿到token对应的用户名，然后用用户名去获取具体的用户信息，这样就算登陆啦，然后保存token，自动登录。","createdAt":1614174454280},{"id":9533,"originId":"603dd8d04655ea7d2f21930a","articleId":2084,"userId":80,"content":"[@AzuraXW](/user/AzuraXW)  非常感谢解惑！","createdAt":1614665936497},{"id":9534,"originId":"60384dad4655ea4cc421877a","articleId":2085,"userId":3187,"content":"自己顶一下，第一道题我自己解决了，第二题尚未解决，大家对这个没兴趣嘛","createdAt":1614302637792},{"id":9535,"originId":"603852204655ea899d2187a0","articleId":2085,"userId":147,"content":"后序遍历，算出所有孩子的value，再算出父亲的value，直到根\r\n```\r\nfunction traversal(node) {\r\n    if (node.children && node.children.length) {\r\n        let ret = 0;\r\n        for (let i = 0; i < node.children.length; i++) {\r\n            traversal(node.children[i]);\r\n            ret += node.children[i].value;\r\n        }\r\n        node.value = ret;\r\n    }\r\n}\r\n```","createdAt":1614303776018},{"id":9536,"originId":"60385bf94655ea8d342187dc","articleId":2085,"userId":3187,"content":"[@theanarkh](/user/theanarkh) 谢谢大佬，原来不是递归能解决的问题了，我去看看后序遍历","createdAt":1614306297058},{"id":9537,"originId":"6038b8c14655ea888c21897f","articleId":2085,"userId":3188,"content":"随便写写，自己优化一下\r\n```\r\nvar data = [\r\n  {\r\n    name: \"a\",\r\n    children: [\r\n      {\r\n        name: \"a1\",\r\n        children: [\r\n          {\r\n            name: \"aa1\",\r\n            value: 1,\r\n          },\r\n          {\r\n            name: \"aa2\",\r\n            value: 1,\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        name: \"a11\",\r\n        children: [\r\n          {\r\n            name: \"aAA\",\r\n            value: 2,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: \"b\",\r\n    children: [\r\n      {\r\n        name: \"b1\",\r\n        value: 3,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nvar computed = (list) => {\r\n  let count = 0;\r\n  for (const item of list) {\r\n    if (item.children) {\r\n      item.value = computed(item.children);\r\n    }\r\n    count += item.value;\r\n  }\r\n  return count;\r\n};\r\ncomputed(data);\r\nconsole.log(data);\r\n```","createdAt":1614330049874},{"id":9538,"originId":"603c95174655ea5c4a218fe8","articleId":2085,"userId":3187,"content":"[@lyt308012546](/user/lyt308012546) 谢谢大佬","createdAt":1614583063147},{"id":9539,"originId":"603375ba4655ea2e5a21789c","articleId":2086,"userId":33,"content":"nestjs","createdAt":1613985210566},{"id":9540,"originId":"603453e14655eaaf992179ec","articleId":2086,"userId":89,"content":"Egg吧","createdAt":1614042081921},{"id":9541,"originId":"603497494655eabb5d217b6b","articleId":2086,"userId":90,"content":"怎么盈利？目的和手段都没搞明白哦？","createdAt":1614059337075},{"id":9542,"originId":"6034b08e4655ea363d217c1f","articleId":2086,"userId":3189,"content":"[@i5ting](/user/i5ting) 日常看到狼叔","createdAt":1614065806711},{"id":9543,"originId":"6034c92f4655ead1ea217d30","articleId":2086,"userId":60,"content":"egg +1","createdAt":1614072111468},{"id":9544,"originId":"6035b8054655ea779a217f9b","articleId":2086,"userId":3,"content":"egg.js","createdAt":1614133253095},{"id":9545,"originId":"60375b1e4655ea2825218561","articleId":2086,"userId":3190,"content":"express老而弥坚~.~","createdAt":1614240542232},{"id":9546,"originId":"60375c254655eadd0f218577","articleId":2086,"userId":43,"content":"最近在用NestJs，爽的一P","createdAt":1614240805449},{"id":9547,"originId":"6037ca544655ea3be121871d","articleId":2086,"userId":411,"content":"加入我们一起开发这个系统呗?\r\n![程序员脱单-ad.jpg](//static.cnodejs.org/Fq2daPFbYhK6W9AYxHOCREiS5uqh)","createdAt":1614269012060},{"id":9548,"originId":"6032093703d79774de670b28","articleId":2087,"userId":354,"content":"这个是不同系统之间的问题，你试着用 corssenv 来设置环境变量","createdAt":1613891895002},{"id":9549,"originId":"603790404655ea02ec218681","articleId":2087,"userId":146,"content":"不是贴代码上来更容易找到问题么","createdAt":1614254144604},{"id":9550,"originId":"554b3c28b68166372e600107","articleId":2088,"userId":368,"content":"搬瓦工?\r\n寡妇网是什么?","createdAt":1430993960911},{"id":9551,"originId":"554b3c2db68166372e600109","articleId":2088,"userId":3193,"content":"别追求免费了。不稳定速度慢。搭个ss也行，买别人的ss服务也行，一年也超不过一百几十块。","createdAt":1430993965473},{"id":9552,"originId":"554b4515b68166372e600118","articleId":2088,"userId":217,"content":"只是浏览器的话倒是可以介绍给你一个 [时空隧道](http://sksd.ga:8080/invi/s1IJSl)","createdAt":1430996245710},{"id":9553,"originId":"554b58f7b68166372e60012b","articleId":2088,"userId":3194,"content":"果断买vpn啊","createdAt":1431001335849},{"id":9554,"originId":"554b6677b68166372e60013e","articleId":2088,"userId":3195,"content":"[EasyGoagent](:https://github.com/DIYgod/EasyGoAgent) Goagent的改良版","createdAt":1431004791298},{"id":9555,"originId":"554b6cdcb68166372e600141","articleId":2088,"userId":1636,"content":"[@sysukiros](/user/sysukiros) 有推荐的嘛","createdAt":1431006428607},{"id":9556,"originId":"554b6f8eb68166372e600146","articleId":2088,"userId":965,"content":"http://118.174.27.112/","createdAt":1431007118138},{"id":9557,"originId":"554b712cb68166372e600149","articleId":2088,"userId":1636,"content":"[@chapgaga](/user/chapgaga) GFW = 寡妇网","createdAt":1431007532690},{"id":9558,"originId":"554b73eeb68166372e600150","articleId":2088,"userId":3196,"content":"你用谷粉搜索，它只是个跳板，最终跳到谷歌","createdAt":1431008238369},{"id":9559,"originId":"554b7f6bb68166372e60015e","articleId":2088,"userId":89,"content":"baigoogledu.com","createdAt":1431011179157},{"id":9560,"originId":"554b8866b68166372e60016c","articleId":2088,"userId":2415,"content":"话说… 我做了一个暴力找google hosts的东西… 找到的ip还是很快的…https://github.com/hit9/fast-google-hosts.js\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1431013478340},{"id":9561,"originId":"554b8d35b68166372e600175","articleId":2088,"userId":692,"content":"要快和稳定的话还是上VPN吧","createdAt":1431014709597},{"id":9562,"originId":"554b8faeb68166372e600179","articleId":2088,"userId":3197,"content":"173.194.14.53\r\n193.192.250.158\r\n\r\n有一个很搞笑的方法 用aol.com搜索，它用的就是google，没封 >-<!","createdAt":1431015342690},{"id":9563,"originId":"554b9037b68166372e60017d","articleId":2088,"userId":940,"content":"花钱买，最实在，天天找地址，人力成本高哇\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1431015479470},{"id":9564,"originId":"554c0ab3b68166372e6001b7","articleId":2088,"userId":3198,"content":"http://levi.cg.am/archives/3553\r\n我用的这个","createdAt":1431046835932},{"id":9565,"originId":"554c0b38b68166372e6001bd","articleId":2088,"userId":3099,"content":"买个shadowsocks服务吧，shadow cheap，最便宜一年才40多块，也够用了。用台湾的服务器，速度刷刷的","createdAt":1431046968974},{"id":9566,"originId":"554c1273b68166372e6001c1","articleId":2088,"userId":1636,"content":"[@hit9](/user/hit9) 学习了，可是理论上ip是有上限的。。。早晚有一天被GFW封干净了","createdAt":1431048819742},{"id":9567,"originId":"554c160cb68166372e6001ce","articleId":2088,"userId":1943,"content":"我比较懒..[谷歌访问助手](https://chrome.google.com/webstore/detail/%E8%B0%B7%E6%AD%8C%E8%AE%BF%E9%97%AE%E5%8A%A9%E6%89%8B/gocklaboggjfkolaknpbhddbaopcepfp)\r\n但是他要求你设置金山导航为主页....","createdAt":1431049740058},{"id":9568,"originId":"554c21abb68166372e6001e7","articleId":2088,"userId":1629,"content":"用 SS 吧。 还可以代理一些命令行的东西\r\n[我写的博客，SS相关](http://blog.ikaros.club/2015/04/05/freeworld/)","createdAt":1431052715758},{"id":9569,"originId":"554c7fb7ba6070b06ac28e53","articleId":2088,"userId":1941,"content":"看这里：[https://cnodejs.org/topic/54b3fc05edf686411e1b9ce1](https://cnodejs.org/topic/54b3fc05edf686411e1b9ce1) 正在用","createdAt":1431076791850},{"id":9570,"originId":"554cd35eba6070b06ac28e9e","articleId":2088,"userId":2415,"content":"[@CarlosRen](/user/CarlosRen) 是啊。。可恨的gfw 不过这一天很早才回来吧。。","createdAt":1431098206780},{"id":9571,"originId":"554cd373ba6070b06ac28ea1","articleId":2088,"userId":2415,"content":"对，还可以看看这个https://github.com/hit9/google.js","createdAt":1431098227742},{"id":9572,"originId":"554d5491ba6070b06ac28eb9","articleId":2088,"userId":2627,"content":" [gfsoso](http://www.gfsoso.net/)","createdAt":1431131281351},{"id":9573,"originId":"554d7fecba6070b06ac28ed2","articleId":2088,"userId":1308,"content":"下一个天行者浏览器（Xskywalker）","createdAt":1431142380480},{"id":9574,"originId":"554db52aed6f7db13c8491a7","articleId":2088,"userId":3199,"content":"use http://www.gfsoso.net/\r\n用了一年了 非常靠谱","createdAt":1431156010522},{"id":9575,"originId":"554dbeeaed6f7db13c8491b1","articleId":2088,"userId":3200,"content":"shadowsocks","createdAt":1431158506303},{"id":9576,"originId":"554e0c97ed6f7db13c849218","articleId":2088,"userId":2001,"content":"移步这里： [一个Hosts搞定你的梯子](https://github.com/highsea/Hosthttps://github.com/highsea/Host)  更新频率7d＋， 欢迎你的 issues","createdAt":1431178391939},{"id":9577,"originId":"554eed51ed6f7db13c84928d","articleId":2088,"userId":3201,"content":"果断付费代理","createdAt":1431235921766},{"id":9578,"originId":"554effe2ed6f7db13c849292","articleId":2088,"userId":1409,"content":"直接上教程http://weibo.com/p/1001603840963461139899 在chrome地址栏中使用google搜索，无惧墙。","createdAt":1431240674535},{"id":9579,"originId":"57d6366da183f0c13865c967","articleId":2088,"userId":568,"content":"方法很简单，\r\n第一步，打开浏览器，\r\n第二部，在地址栏输入 google.com 按回车，\r\n就可以了","createdAt":1473656429029},{"id":9580,"originId":"57d642d249e399fd386e19b9","articleId":2088,"userId":3202,"content":"[@CarlosRen](/user/CarlosRen) 666666666666666666666","createdAt":1473659602363},{"id":9581,"originId":"57d642e53d3520a5387c2bf2","articleId":2088,"userId":3202,"content":"修改hosts文件 ","createdAt":1473659621455},{"id":9582,"originId":"57d652aedd64a7dd387f3912","articleId":2088,"userId":3203,"content":"lantern 啊，找能翻墙的人给你下个安装包 ~","createdAt":1473663662922},{"id":9583,"originId":"57d680ee16f0b2bf35aa98b5","articleId":2088,"userId":1946,"content":"lattern，这个吧，输入我的邀请码 H9Q7JR ，额外获得三个月的蓝灯专业版！😁","createdAt":1473675502013},{"id":9584,"originId":"57d68514cb441239368989c1","articleId":2088,"userId":1499,"content":"[@muzi131313](/user/muzi131313) 老版本的蓝灯，不收费\n\nFrom [KoaHub.js](http://js.koahub.com)","createdAt":1473676564271},{"id":9585,"originId":"57d68530cb441239368989c6","articleId":2088,"userId":1499,"content":"[@heanxu](/user/heanxu) 不用翻墙，去github上下载就行了\n\nFrom [KoaHub.js](http://js.koahub.com)","createdAt":1473676592967},{"id":9586,"originId":"57d68e708fdd801b36d5f515","articleId":2088,"userId":3204,"content":"amazon ec2上面用pppoe搭建vpn","createdAt":1473678960442},{"id":9587,"originId":"57d6ca52cb441239368989d3","articleId":2088,"userId":281,"content":"马克\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1473694290888},{"id":9588,"originId":"57d7535ecb6f605d360105e4","articleId":2088,"userId":3205,"content":"一直用 lattern    免费的","createdAt":1473729374865},{"id":9589,"originId":"57d754c4cb6f605d360105e7","articleId":2088,"userId":3206,"content":"loco可以的","createdAt":1473729732794},{"id":9590,"originId":"57d840efb11d78e3659db4de","articleId":2088,"userId":743,"content":"http://so.chongbuluo.com/","createdAt":1473790191339},{"id":9591,"originId":"57d90be703e01d2f6b17ace6","articleId":2088,"userId":3203,"content":"[@einsqing](/user/einsqing) 试过 速度慢哭了。。","createdAt":1473842151971},{"id":9592,"originId":"57d91a1d3f3cb94e6b3267a1","articleId":2088,"userId":652,"content":"https://github.com/sunfeng90/XX-Net自己去撸吧。免费的，速度杠杠的","createdAt":1473845789691},{"id":9593,"originId":"57d9222d03e01d2f6b17acfa","articleId":2088,"userId":1442,"content":"试试这个：[https://github.com/huanz/surge-hosts](https://github.com/huanz/surge-hosts)","createdAt":1473847853527},{"id":9594,"originId":"57d95d8bb11d78e3659db513","articleId":2088,"userId":223,"content":"别用国内付费VPN服务，**Green就是教训**。\r\n别想着“免费”，能用的付费vpn得花钱，不便宜，**便宜的根本没法用**，几十块一年的等于智商税。\r\n**没有100%稳定高速的服务**，特殊时段，即使付费vpn也不能总是“高速稳定”，别指望一年365天一天24小时随时1080p油管。\r\n一线国外付费VPN能保证的是“**较好**”的连通率和速度，不完美，但至少能用google，gmail和可接受的油管速度，这仍是目前最好的方案。\r\n\r\n**国内还能用支付宝买到**的国外付费vpn推荐：\r\n\r\n## [ExpressVPN](https://indx.cc/exp) \r\n\r\n全球148+服务器所在地 / 无限流量 / 多协议，包括openVPN / 一键连接 / 同时3台设备 / 256-bit AES加密 / 支付宝支付 / 支持路由器连接 / 完全IP隐藏 / 零日志 / 全终端覆盖 / 30天无条件退款 / Split tunneling技术 + 浏览器插件，同时访问内外网 / **速度相对最快**\r\n\r\n## [VyprVPN](https://indx.cc/vyr)\r\n\r\n70+自有服务器所在地，200,000+IP地址 / 无限流量 / 多协议，独家混淆协议 / 一键连接 / 同时5台设备 / 支持P2P / 变色龙加密，**连接相对最稳定** / 支付宝支付 / 支持路由器连接 / NAT安全机制 / DNS加密 / 全终端覆盖 / 2年款最大优惠 / 30天无条件退款 / 按程序控制网络技术，同时访问内外网\r\n\r\n## [Nord](https://indx.cc/nrd)\r\n\r\n3400+服务器 / 无限流量 / 支持Onion over vpn / 一键连接 / 同时6台设备 / 支持P2P / 双重加密 / 支付宝支付 / 支持路由器连接 / CyberSec安全技术 / 零日志 / 专业客户端 / 2年款最大优惠 / 随时退款 / 浏览器代理插件，同时访问内外网 / **随时退款**\r\n\r\n不推荐自架，单IP长期很难可靠，除非你想反复切IP（要花钱），可以选IP池比较大的：[Vultr](https://www.vultr.com/?ref=6996621)，但加上换的IP整体成本往往高于付费VPN。\r\n\r\n[付费vpn推荐](https://www.wallmama.com/2018/05/%E5%93%AA%E7%A7%8D%E4%BB%98%E8%B4%B9vpn%E6%AF%94%E8%BE%83%E7%A8%B3%E5%AE%9A/)\r\n\r\n蓝灯其实也不错，很稳定，但是免费版给的流量太少，想用Pro的朋友，可以用这个优惠码：NQGP7F。","createdAt":1473863051309},{"id":9595,"originId":"57dbd9563f3cb94e6b3267ef","articleId":2088,"userId":652,"content":"https://github.com/sunfeng90/XX-Net","createdAt":1474025814260},{"id":9596,"originId":"57dbf7f45710e2ed658d6b87","articleId":2088,"userId":301,"content":"使用这个也可以，https://github.com/racaljk/hosts\n\r<br><br>来自<a href=\"https://lzxb.github.io/vue-cnode/\" target=\"_blank\">vue-cnode手机版</a>","createdAt":1474033652058},{"id":9597,"originId":"5b438322e374eeab6929d573","articleId":2088,"userId":224,"content":"现在都是直接走付费，推荐用黄金青蛙的[VyprVPN](https://www.goldenfrog.com/zh/vyprvpn?offer_id=174&amp;aff_id=3008)或者[expressVPN](http://www.linkev.com/?a_fid=clover)","createdAt":1531151138495},{"id":9598,"originId":"5d89ade14f109e79ef5ff247","articleId":2088,"userId":208,"content":"付费VPN才能用，一定要选择一线商家，免得跑路了，参考[http://qiangwaikan.com/best-vpn-china/](http://qiangwaikan.com/best-vpn-china/)","createdAt":1569304033724},{"id":9599,"originId":"5e5f04adb5a36940fe1cebb4","articleId":2088,"userId":165,"content":"[ExpressVPN购买使用教程-大陆可用的VPN，速度快，抗封锁 2020版](https://www.openull.org/expressvpn.html)\r\n购买链接: [https://www.expressvpn.com/](https://www.xvinlink.com/?a_fid=19912018)\r\n\r\n[ExpressVPN](https://www.openull.org/expressvpn.html)通常被认为是市场上最好，最快，最安全的VPN服务之一。它也是用户中最受欢迎的VPN提供商之一，因为它提供上千个服务器位置和多种协议，支持所有主要设备并提供不间断的客户支持。唯一遗憾的是页面没有中文版本，在阅读上会有些难度，不过本教程尽量做的十分简单，只要跟着教程一步步的操作就能够购买成功，享受ExpressVPN的高级服务了。\r\n[Just My Socks](https://www.openull.org/justmysocks.html)-搬瓦工出品的优质机场\r\nJust My Socks是知名VPS提供商[搬瓦工](https://www.openull.org/bwg.html)出口的[翻墙](https://www.openull.org)服务，提供 Shadowsocks 代理，网络是CN2 Gia，连接速度快，并且官方保证IP可用，提供5个IP地址，支持中国的支付宝付款，非常方便中国的网友购买使用。\r\n套餐\t带宽\t流量/月\t价格/月\t设备限制\t购买链接\r\nJust My Socks 500\t2.5G\t500 GB\t$5.88\t最多5个设备同时在线\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=2)\r\nJust My Socks 1000\t5G\t1TB\t$9.88\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=3)\r\nJust My Socks 5000\t5G\t5TB\t$48.99\t不限设备数量\t[立即购买](https://justmysocks2.net/members/aff.php?aff=1111&pid=4)\r\n","createdAt":1583285421218},{"id":9600,"originId":"5f570fefc1c67a7dd9afdbb4","articleId":2088,"userId":426,"content":"**这个简单的。[免费下载](https://github.com/myjiasuqi/jiasu/wiki)**\r\n","createdAt":1599541231673},{"id":9601,"originId":"5f5ef10dd22a6b1d622c8d37","articleId":2088,"userId":178,"content":"27 美元一年\r\n250G 流量每个月\r\n使用方便，速度正常稳定，不会被封。我自己使用多年的。\r\nhttps://reurl.cc/MdXAlv","createdAt":1600057613270},{"id":9602,"originId":"5f6dbb77f9736b02ceada570","articleId":2088,"userId":3082,"content":"我看这边有用[阿里云测试](https://wall101.com/fanqiang-vpn/)确定能够翻墙的VPN[推荐](https://wall101.com)\r\n我自己参考他们用的[光年](https://wall101.com/fanqiang-vpn/lightyearvpn/), 感觉还不错","createdAt":1601026935356},{"id":9603,"originId":"603612244655eaafc0218194","articleId":2088,"userId":184,"content":"**可能越来越多的VPN慢慢的遭受封杀，还是有一些好用的知名VPN是可以免费试用的，来吧楼主，2021年最新免费VPN推荐集合：**\r\n**[https://wallvpn.com/free-vpn/](https://wallvpn.com/free-vpn/)\r\n[https://www.topvpnguides.com/best-free-vpn/](https://www.topvpnguides.com/best-free-vpn/)\r\n......**\r\n希望对你有帮助。","createdAt":1614156324079},{"id":9604,"originId":"6035c2934655eaa0ac21800a","articleId":2089,"userId":541,"content":"wasm有一定的局限性，数据需要拷贝到wasm的内存中，还要把结果拷贝出来（当然也是直接访问Memory对象），或通过劫持fread，fwrite进行数据交换，比较繁琐。本质上也不是纯native代码， 性能还是有差距的，更类似是编译成特殊的代码，因为减少了动态性比js性能更高，但这部分性能提升的程度不一定足够弥补数据交换的性能损失。 \r\n\r\n如果只是在node中使用，可以考虑改成node的addon，可以减少拷贝等额外损失，现在napi的api已经很漂亮了。\r\n\r\n如果c/c++写得不好   或者可以考虑rust。","createdAt":1614135955118},{"id":9605,"originId":"6035b48b4655eaed95217f30","articleId":2090,"userId":144,"content":"问题解决了，卸载重新安装node包就可以了。大概是安装其他一些软件影响了吧。","createdAt":1614132363094},{"id":9606,"originId":"6035b1124655ea68ea217f0f","articleId":2091,"userId":3210,"content":"通过accesstoken这个接口登录拿数据","createdAt":1614131474388},{"id":9607,"originId":"600a920a5d04ac3681218018","articleId":2093,"userId":144,"content":"目前找到的有gitbook和mkdocs  ","createdAt":1611305482448},{"id":9608,"originId":"600c15cd5d04ac90e02182f5","articleId":2093,"userId":407,"content":"语雀试过么？ ","createdAt":1611404749984},{"id":9609,"originId":"6010b7ad5d04ac348a218992","articleId":2093,"userId":144,"content":"[@yunkou](/user/yunkou)  听说过，但是没有试，最后定的gitbook很好用，非常简单，还能发布成电子书","createdAt":1611708333032},{"id":9610,"originId":"60110cac03d797044866d91d","articleId":2093,"userId":358,"content":"https://www.yuque.com/ant-design/course/layout","createdAt":1611730092201},{"id":9611,"originId":"6030944a03d79767f36706ff","articleId":2093,"userId":79,"content":"还有石墨、腾讯文档、notion，找到适合自己需求的吧","createdAt":1613796426616},{"id":9612,"originId":"60334e0703d7970598670df1","articleId":2093,"userId":41,"content":"https://github.com/xcatliu/pagic","createdAt":1613975047692},{"id":9613,"originId":"60137cc303d797141a66dd8b","articleId":2094,"userId":117,"content":"还有就是nginx 也一块停了","createdAt":1611889859404},{"id":9614,"originId":"601380a503d797466c66ddb7","articleId":2094,"userId":358,"content":"egg 自己的在 common-error，线上是在 home 目录的，自己看下文档。\r\n\r\n至于一起停了，那看下你的操作系统看门狗或者 docker 对应的情况具体分析，这块属于运维知识，跟你的具体运维体系有关。","createdAt":1611890853534},{"id":9615,"originId":"601385d303d7976f1366ddd4","articleId":2094,"userId":117,"content":"[@atian25](/user/atian25) 感谢，找到原因了，系统重启了，","createdAt":1611892179375},{"id":9616,"originId":"603310fc03d7974a3f670cca","articleId":2094,"userId":161,"content":"建议设置开启程序自启","createdAt":1613959420246},{"id":9617,"originId":"603324b803d7973438670d57","articleId":2094,"userId":117,"content":"[@tzbcf](/user/tzbcf) 已经加到启动脚本里面了，之前不知道亚马逊的机器有时候会自动重启","createdAt":1613964472055},{"id":9618,"originId":"6014fb5103d797949866e061","articleId":2095,"userId":2679,"content":"同步改异步测试demo\r\nasync function b() {\r\n    await (() => {})();\r\n    let num = 0;\r\n    for(var i = 0;i < 100000;i ++){\r\n        num += new Date().getTime();\r\n    }\r\n    console.log(\"ccccc\");\r\n    console.log(num);\r\n    return num;\r\n}\r\n\r\nasync function a() {\r\n    let data = await b();\r\n    console.log(data);\r\n    console.log(\"aaaaa\");\r\n}\r\n\r\na();","createdAt":1611987793374},{"id":9619,"originId":"6014fd2503d7977f4766e06d","articleId":2095,"userId":2679,"content":"之前测试使用promise 实现异步redis获取转同步，服务端高并发时直接崩溃，是否时promise的资源消耗很高，redis的并发应该不会有问题的。现在不敢在高并发业务场景内使用promise。这个理解正确吗？","createdAt":1611988261201},{"id":9620,"originId":"6016893003d797fee566e250","articleId":2095,"userId":109,"content":"1. demo 代码 b() 不能这么写。本来就是同步阻塞，是无法转变为异步的。除非是丢给 v8 线程池执行（不过那样话接口也自然会是异步的了）\r\n2. 同步转异步，异步转同步，你想干啥呢……","createdAt":1612089648054},{"id":9621,"originId":"6017ed8503d797b87b66e543","articleId":2095,"userId":2679,"content":"[@waitingsong](/user/waitingsong) 1.上面代码测试是可运行，console效果是 先打印出aaaaa,后打印出ccccc。b函数阻塞不会导致a函数阻塞。2.同步如果逻辑太多太复杂是会阻塞主线程，降低主线程的执行能力。如果同步能转为异步不就能使用v8的线程池了吗","createdAt":1612180869820},{"id":9622,"originId":"6018b5b903d7971c3b66e5ff","articleId":2095,"userId":109,"content":"你应该理解有误。\r\n就设计上说是先打印 ccc 然后再 打印，否则体现不出  await 的意义。\r\n就实际代码执行结果也是 ccc 先：\r\n```\r\nccccc\r\n161223203570777020\r\n161223203570777020\r\naaaaa\r\n```\r\n","createdAt":1612232121233},{"id":9623,"originId":"6018b60f03d7972d3f66e603","articleId":2095,"userId":109,"content":"是否阻塞主线程不在于同步异步，而是在于代码是在 js 环境还是 Nodejs 底层的 v8 环境（线程池）执行。","createdAt":1612232207172},{"id":9624,"originId":"6018eba503d79767ee66e6d4","articleId":2095,"userId":21,"content":"你说的不就是这个么 https://www.npmjs.com/package/ncpu","createdAt":1612245925406},{"id":9625,"originId":"6018efbf03d797434666e704","articleId":2095,"userId":2679,"content":"[@waitingsong](/user/waitingsong) \r\nasync function b() {\r\n    await (() => {})();\r\n    let num = 0;\r\n    for(var i = 0;i < 100000;i ++){\r\n        num += new Date().getTime();\r\n    }\r\n    console.log(\"ccccc\");\r\n    console.log(num);\r\n    return num;\r\n}\r\n\r\nasync function a() {\r\n    //let data = await b();   //这里如果await，就会等待结果同步执行下去  但b函数已是异步函数\r\n    // console.log(data);\r\n    b();                            //这里测试不await\r\n    console.log(\"aaaaa\");\r\n}\r\n\r\na();\r\n\r\n执行结果：\r\naaaaa\r\nccccc\r\n161224681952400960","createdAt":1612246975987},{"id":9626,"originId":"6018f5a003d7977bbe66e743","articleId":2095,"userId":2679,"content":"[@zy445566](/user/zy445566) 我试了下ncpu,好像是这个意思。这个是同步函数改成异步执行了吧，能提高主线程的处理能力吧","createdAt":1612248480633},{"id":9627,"originId":"6018f5d103d797a1c566e747","articleId":2095,"userId":2679,"content":"[@zy445566](/user/zy445566) 你有用这个插件吗，有没有什么坑？","createdAt":1612248529842},{"id":9628,"originId":"6018fe3903d797480366e763","articleId":2095,"userId":358,"content":"重 CPU 的工作，一律丢到 阿里云函数计算（FC）这种地方去。","createdAt":1612250681968},{"id":9629,"originId":"6018fe8c03d7975f9166e76b","articleId":2095,"userId":21,"content":"[@kanghoulin](/user/kanghoulin) \r\n就有一点就是数据是和函数都是使用复制过去的，并不是原有数据。所以函数的上下文不支持，还有就是数据不支持带方法的这种。\r\n数据复制是使用了 https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm 方法复制的","createdAt":1612250764845},{"id":9630,"originId":"6018feec03d797f1c666e77b","articleId":2095,"userId":2679,"content":"[@atian25](/user/atian25) 很多数据在内存里面，针对有关联性没法独立的逻辑","createdAt":1612250860515},{"id":9631,"originId":"6018ff5a03d797a41466e786","articleId":2095,"userId":2679,"content":"[@zy445566](/user/zy445566) 公用内存就没问题，只要释放的是主线程的压力","createdAt":1612250970754},{"id":9632,"originId":"6018ff7603d797bf6766e78b","articleId":2095,"userId":21,"content":"[@kanghoulin](/user/kanghoulin) \r\n线程都是共用内存的，不过还是要警惕内存不安全问题，可能多线程读取内存的结果不一致问题。\r\nhttps://es6.ruanyifeng.com/#docs/arraybuffer#Atomics-%E5%AF%B9%E8%B1%A1","createdAt":1612250998773},{"id":9633,"originId":"601900a603d797360b66e79b","articleId":2095,"userId":2679,"content":"[@zy445566](/user/zy445566) 我测试，我的全局变量没法公用，确实是复制过去的。可能不好弄","createdAt":1612251302659},{"id":9634,"originId":"601900d303d797998766e7a3","articleId":2095,"userId":21,"content":"[@kanghoulin](/user/kanghoulin) \r\n这个全局变量不是属于公共内存，这是属于上下文。使用内存可以考虑使用 SharedArrayBuffer 来实现，这个可以实现内存共享","createdAt":1612251347548},{"id":9635,"originId":"601902d903d797acb166e7ba","articleId":2095,"userId":2679,"content":"[@zy445566](/user/zy445566) 像我上面的代码也是类似的效果，可以使用上下文。使用await (() => {})()让同步函数可以异步（线程池）执行。测试跑业务没问题，开销的话await也不大。这种方法你觉得可行吗？ 已做测试环境测试，目前没问题","createdAt":1612251865324},{"id":9636,"originId":"6019035c03d797248c66e7be","articleId":2095,"userId":2679,"content":"[@zy445566](/user/zy445566) v8线程池是可以使用多核cpu的吧，只是内存限制还存在，没有突破1.7G的限制是吧","createdAt":1612251996901},{"id":9637,"originId":"60190a0603d7973dd466e7f0","articleId":2095,"userId":358,"content":"[@kanghoulin](/user/kanghoulin) 我觉得是架构问题，数据可以丢 redis 啥的","createdAt":1612253702355},{"id":9638,"originId":"60190d5103d7977e6566e81a","articleId":2095,"userId":21,"content":"[@kanghoulin](/user/kanghoulin) \r\n\r\n理论上是不行的，async/await其实还是单线程，你在这里进行大量密集型运算还是会卡住其它运算的。只是说你的业务代码在V8进行了JIT和编译的一些优化后快到你没法察觉而已。\r\n\r\n你不信的话可以在你的异步执行这个方法就知道了，传个100s看看\r\n```js\r\n function stopWorld(s) {\r\n const exp = Date.now()+s*1000;\r\n while(Date.now()<exp){}\r\n}\r\n```\r\n真正多线程是不会因为这个而卡住其它代码的运行","createdAt":1612254545239},{"id":9639,"originId":"60190eb003d797867c66e834","articleId":2095,"userId":2679,"content":"[@atian25](/user/atian25) 我的服务端的设计数据结构比较繁杂，一个json包含全部，如果redis的话每次获取的数据太多了，如果拆分数据又太麻烦了。而且每次redis操作都得json格式化。目前我们是内存操作，定时器保存数据到redis（只做备份）","createdAt":1612254896297},{"id":9640,"originId":"60190f6c03d797170966e84b","articleId":2095,"userId":109,"content":"```\r\nb();                            //这里测试不await\r\n```\r\n这个实现（不 await）等同于用 setTimeout() 包裹实现代码。还是会阻塞主进程的，无非是在当前还是在下一个事件循环。","createdAt":1612255084449},{"id":9641,"originId":"601910dc03d79759d066e862","articleId":2095,"userId":2679,"content":"[@zy445566](/user/zy445566) \r\n\r\nasync function stopWorld(s) {\r\n    await (() => {})();           //实现同步函数转异步效果，不知道是不是真异步（线程池）？\r\n    const exp = Date.now()+s*1000;\r\n    while(Date.now()<exp){\r\n    }\r\n    console.log(\"stopWorld ok:\",Date.now());\r\n}\r\nasync function main() {\r\n    console.log(\"start:\",Date.now());\r\n    //await stopWorld(5);       //加await，main函数会等待stopWorld函数执行完成返回结果\r\n    stopWorld(5);        //不等待stopWorld函数返回结果\r\n    console.log(\"end:\",Date.now());\r\n}\r\n\r\nmain();\r\n\r\n执行结果：\r\nstart: 1612255375218\r\nend: 1612255375226\r\nstopWorld ok: 1612255380227","createdAt":1612255452748},{"id":9642,"originId":"6019112003d797829366e867","articleId":2095,"userId":2679,"content":"[@waitingsong](/user/waitingsong) 哦哦，我以为是不会阻塞，我看打印消息结果 后面的逻辑已经执行了","createdAt":1612255520836},{"id":9643,"originId":"601911d903d79717b466e86b","articleId":2095,"userId":2679,"content":"[@waitingsong](/user/waitingsong) 我说“阻塞“是不是不正确，我想实现的结果应该是b函数进入线程池执行，主函数继续执行。线程池里面执行应该就不会消耗主线程的处理能力吧。不知道理解是否正确","createdAt":1612255705056},{"id":9644,"originId":"601926fd03d7978ae966e8c3","articleId":2095,"userId":109,"content":"[@kanghoulin](/user/kanghoulin) JS 本身是单进程模式，需要本地运行的代码作都是在（这个）进程中执行，必然会阻塞（这个）进程。 而 Node.js  提供了 v8 运行环境（C++）实现，有个线程池来运行代码。 \r\n我们写的 JS 代码通常都是在 JS 的（单）进程中执行，有些代码可能会被优化到底层 v8 的环境执行。","createdAt":1612261117052},{"id":9645,"originId":"601927c103d7973de266e8c8","articleId":2095,"userId":2679,"content":"[@waitingsong](/user/waitingsong) 意思是 异步函数的执行 也是主进程中执行，不一定放入线程池是吗？","createdAt":1612261313210},{"id":9646,"originId":"601928cb03d7976e8466e8d1","articleId":2095,"userId":109,"content":"[@kanghoulin](/user/kanghoulin) 异步函数，如果是访问外设与network，并且调用的是 nodejs 提供的接口，那就是在 v8 的线程池中执行。","createdAt":1612261579070},{"id":9647,"originId":"6019295103d7974a4766e8db","articleId":2095,"userId":21,"content":"[@kanghoulin](/user/kanghoulin) \r\n这么说吧,stopWorld，你发放到http请求里就知道了,只要他运行其它请求统统进不来。还有node的线程池主要是针对FS这个模块，你一般的代码一般是没有线程池优化的\r\n","createdAt":1612261713227},{"id":9648,"originId":"601929d603d797631866e8e9","articleId":2095,"userId":109,"content":"[@zy445566](/user/zy445566) 这个是异步阻塞。 异步 != 不阻塞  哈哈","createdAt":1612261846249},{"id":9649,"originId":"60192a0b03d79766d166e8ef","articleId":2095,"userId":2679,"content":"[@waitingsong](/user/waitingsong) 哦哦，这个还真不知道，我一直理解是异步方法会被事件机制放入线程池执行","createdAt":1612261899256},{"id":9650,"originId":"60192a6e03d797d5c566e8fb","articleId":2095,"userId":2679,"content":"[@waitingsong](/user/waitingsong) 这个我理解确实有问题，我一直理解是异步方法会被事件机制放入线程池执行，这样就不会阻塞到主线程执行","createdAt":1612261998335},{"id":9651,"originId":"60192a9403d797c2b566e900","articleId":2095,"userId":21,"content":"[@waitingsong](/user/waitingsong) 我不白话点，不让他去实践，他不明白的","createdAt":1612262036539},{"id":9652,"originId":"60192e4203d797011f66e910","articleId":2095,"userId":109,"content":"[@kanghoulin](/user/kanghoulin) 同步对应异步， 阻塞对应不阻塞，这个两个不同的概念，不能等同说异步就是不阻塞。\r\n我的理解：\r\n1. 同步、异步是执行方法上面区别，但是执行的过程就产生了阻塞与非阻塞的概念。\r\n2. 同步就会阻塞。 异步多数情况是非阻塞，但是也会有阻塞，取决于调用方法的实现。","createdAt":1612262978755},{"id":9653,"originId":"601a3dee03d797855f66eac1","articleId":2095,"userId":2679,"content":"[@waitingsong](/user/waitingsong) 理解了\r\n\r\n异步函数，如果是访问外设与network，并且调用的是 nodejs 提供的接口，那就是在 v8 的线程池中执行。\r\n\r\nnodejs解决阻塞的办法就只能自己开子进程才能解决了是吧，代码实现脱离当前的js线程。","createdAt":1612332526447},{"id":9654,"originId":"601a3e3303d7972db266eac6","articleId":2095,"userId":2679,"content":"谢谢大家，异步和阻塞 之前确实没有弄明白","createdAt":1612332595095},{"id":9655,"originId":"601b5b4e03d797132b66ec76","articleId":2095,"userId":109,"content":"[@kanghoulin](/user/kanghoulin) 常用方式：\r\n1. fork、spawn 子进程进行处理\r\n2. worker ，权限有限制，不能访问 DOM https://developer.mozilla.org/zh-CN/docs/Web/API/Worker\r\n3. 写 nodejs 的扩展（运行在 V8 线程池）","createdAt":1612405582857},{"id":9656,"originId":"601d9a9a03d797869b66f2c7","articleId":2095,"userId":71,"content":"hj   \n\n\n[来自第三方vue-cnode](https://github.com/xjh22222228/vue-cnode)","createdAt":1612552858650},{"id":9657,"originId":"602e242403d797eeb2670125","articleId":2095,"userId":26,"content":"方法就实现角度来说，只要是同步不管怎么样都是会阻塞主线程的，比如带sync字眼的函数，把sync方法封装也是无用的，同步就是同步，async和await只是异步方法回调的另一种语法，使用它，首先这个方法就是异步的，异步的意思就是“先执行，后查询结果”，不管什么语言都是一个道理，而这个方法怎么异步执行的，对于你这个线程的代码来说不需要理会，其背后的实现各有各的方式。在js中，想让同步方法不影响主线程，主要的思想就是“让其他进程运行这个方法”，这样就打个比方委托其他程序比如你用其他语言或者另一个js进程实现的计算服务（像云计算），这个进程运行玩了“通知”你的代码。所以最后，node提供了worker_thread，看看文档就可以自己写一个简单的“多线程”js，把你的同步代码在另一个node进程中执行，而通过共享buffer交换数据，可以尝试。","createdAt":1613636644146},{"id":9658,"originId":"601e60f903d7976e1e66f409","articleId":2097,"userId":3211,"content":"User是可以获取到的，就是User的方法没有提示出来","createdAt":1612603641522},{"id":9659,"originId":"60208e9403d79779c766f750","articleId":2097,"userId":166,"content":"这个分析是 egg-ts-helper 做的，跑一下 ets 或者 eggbin 启动一下服务就有了","createdAt":1612746388594},{"id":9660,"originId":"601e006b03d79723fa66f311","articleId":2098,"userId":703,"content":"这。。也不知道说的是什么场景？前端页面？数据库？...\r\n数据库一般可以用 check约束 或 触发器之类的实现，其他场景就自己写代码检查判断吧。","createdAt":1612578923901},{"id":9661,"originId":"601e022f03d797642766f31e","articleId":2098,"userId":144,"content":"[@myy](/user/myy) 不是数据库，其实就是个数据模型吧，我们项目里边有很多动态组件是通过vuex生成的，有些数据项之间是有关系依赖的，所以想从这个层面写个公共的方法处理它们之间的一些关系。","createdAt":1612579375925},{"id":9662,"originId":"601e3f2a03d7977ca366f3a4","articleId":2098,"userId":144,"content":"再梳理下需求： \r\n多个数据对象，对象本身不同属性或者不同对象之间的不同属性可能存在一些依赖关系。如何建立一个模型通过自定义的关系规则管理多个对象属性之间的关系。 类似于vue属性计算","createdAt":1612594986533},{"id":9663,"originId":"601f9a3503d79723a966f692","articleId":2098,"userId":510,"content":"[@GeekHi](/user/GeekHi) proxy可以试一下  或者ts的装饰器 ","createdAt":1612683829389},{"id":9664,"originId":"6019069003d797e04866e7d7","articleId":2099,"userId":135,"content":"`req.on('data')` 只有在body有数据的时候才触发。 你可以用模拟post请求试下就可以触发了。\r\n至于 网页会返回两个 ‘Done parsing’, 用调试的方式排查，断点在 `end `函数里面，你就会看到有一个是 `/favicon.ico` 请求，浏览器自动请求网站图标用的。","createdAt":1612252816487},{"id":9665,"originId":"60190b1f03d7970d5966e7ff","articleId":2099,"userId":3159,"content":"[@abiuDoIT](/user/abiuDoIT) \r\n\r\n多谢啊，那就是说明书中这个例子还是错了。\r\n\r\n不过我又发现一个问题，就是在执行这个程序的时候，虽然这一段不执行，但网页是正常的，也就是说可以执行 req.on('end') 这一段，请求正常结束。\r\n\r\n可如果把这一段删了，只留下后面的一段。再执行的时候又有新的问题，就是网页始终处于加载状态，req.on('end') 这一段不会执行。\r\n\r\n请教一下这是什么原因？","createdAt":1612253983297},{"id":9666,"originId":"60195fdc03d797776266e99c","articleId":2099,"userId":147,"content":"[@Jedi-walker](/user/Jedi-walker) 因为没有监听data事件，flowing的值是null，没有办法触发下面这个逻辑。\r\n![image.png](//static.cnodejs.org/Fk-TXVt-D46XE8eSr-NBTw9-_-n7)。而end事件是在read函数触发的。你可以改成这样就看到区别了。\r\n```\r\nvar http = require('http');\r\nvar server = http.createServer(function(req, res) {\r\n  req._readableState.flowing  = true\r\n  req.on('end', function() {\r\n    console.log('Done parsing');\r\n    res.end('ok');\r\n  });\r\n});\r\nserver.listen(3000);\r\n```","createdAt":1612275676712},{"id":9667,"originId":"6019f31903d7976d1066e9d2","articleId":2099,"userId":3159,"content":"[@theanarkh](/user/theanarkh) \r\n\r\n多谢啊，这个 flow(stream) 我还没接触，希望能尽快搞懂","createdAt":1612313369606},{"id":9668,"originId":"601a095603d79772c866ea10","articleId":2099,"userId":135,"content":"[@Jedi-walker](/user/Jedi-walker) 这个细节我还真不知道，这个属于 http底层实现了。建议先不用深入了解。","createdAt":1612319062079},{"id":9669,"originId":"601a3c3203d797171f66eab2","articleId":2099,"userId":3159,"content":"[@abiuDoIT](/user/abiuDoIT) \r\n\r\n多谢多谢","createdAt":1612332082471},{"id":9670,"originId":"6017ba1a03d797f9e266e486","articleId":2100,"userId":3213,"content":"snowflake算法一般用于分布式的id生成哈， 如果只是为了不让id暴露，上雪花感觉比较浪费\r\n你可以给url上的id做hash，然后写个中间件解析数字到代码就好了。\r\nnode也有hashid这个库能进行此类操作","createdAt":1612167706201},{"id":9671,"originId":"6017e20803d7971e1a66e503","articleId":2100,"userId":3212,"content":"[@PerfectDemo](/user/PerfectDemo) 谢谢指点。不是仅为了不让id 暴露，还希望业务id 具有一点可读性和随机性和唯一性，比如像mongodbid那种16进制就挺合适的。找了下看起来snowflake id 看起来也比较合适。但现在讨论后 业务端希望id 都是stirng类型的。按照这种要求 准备用snowflake id 生成出来的8字节的long转存string  作为业务主键存储，但这样用感觉也有点怪。","createdAt":1612177928047},{"id":9672,"originId":"6018b0c203d797d07966e5ce","articleId":2100,"userId":109,"content":"[@CollapsarLi](/user/CollapsarLi) 轮子 https://github.com/waitingsong/koid/\r\nsnowflake id 是 Int64，数据库可以使用 int8 字段保存，应用层传输可以转换成 string （如果返回 JSON 类型，那么也得先转成 string 类型。因为 JSON 目前不支持 LONG 类型）。\r\n还可以当 request-id 使用： https://github.com/fsd-nodejs/service-mw2/blob/master/src/app/middleware/request-id.ts \r\n","createdAt":1612230850652},{"id":9673,"originId":"6018b19603d797176d66e5d8","articleId":2100,"userId":3212,"content":"[@waitingsong](/user/waitingsong) 感谢","createdAt":1612231062314},{"id":9674,"originId":"601907a403d7977d3e66e7de","articleId":2100,"userId":135,"content":"那也可以继续用mongoid啊😂   \r\nhttps://github.com/mongodb/js-bson/blob/master/src/objectid.ts","createdAt":1612253092586},{"id":9675,"originId":"601a0d8603d79732b866ea32","articleId":2100,"userId":3212,"content":"[@abiuDoIT](/user/abiuDoIT) 是的，简单粗暴直接用mongoid就完事了，但现在还是得仔细想想，埋坑后面就难弄了。","createdAt":1612320134190},{"id":9676,"originId":"6013e8fb03d7973b4f66df78","articleId":2101,"userId":98,"content":"我以前也研究过node的原生扩展，但是我不会c++，后来发现go语言也可以开发\r\nhttps://cnodejs.org/topic/5af4f829adea947348e76300\r\n另外你还可以尝试wasm","createdAt":1611917563707},{"id":9677,"originId":"6016567403d7977ad466e1c0","articleId":2101,"userId":21,"content":"如果不迫切需要V8的一些内部功能，建议少用C++扩展而多使用wasm。\r\n\r\nC++扩展或者其它语言扩展都会收到V8的API变化的影响，所以很多时候node. js版本一变，C++扩展就运行不了了。\r\n\r\n而使用C++编译为wasm两个好处明显不需要因为不同版本Linux重新编译问题，不会因为V8的API变化重新维护问题。第三写wasm一单固定就不太需要改，而减少被迫接手人的心智负担。\r\n\r\n我以前也经常会写C++扩展，但wasm完全可以解决调用其它语言库问题，这个时候C++扩展就显得非常鸡肋了，同时学习收益远低于wasm。","createdAt":1612076660712},{"id":9678,"originId":"6016587d03d7977a2266e1df","articleId":2101,"userId":21,"content":"[@zengming00](/user/zengming00) go应该现在也很方便编译成wasm了","createdAt":1612077181623},{"id":9679,"originId":"60165fee03d797c72366e1f9","articleId":2101,"userId":98,"content":"[@zy445566](/user/zy445566) go语言编译wasm是最简单的，c/c++编译为wasm只需要很少的改动，甚至不需要改动就可以直接编译为wasm，而且几乎所有的语言都已经支持wasm，使用wasm技术一次编译即可为所有支持wasm的语言提供扩展，是非常值得研究和学习的","createdAt":1612079086855},{"id":9680,"originId":"60167ca703d797b3fc66e23c","articleId":2101,"userId":3214,"content":"[@zy445566](/user/zy445566) v8也是读这本书的理由之一, 希望通过这本书对v8能有个基本的概念.","createdAt":1612086439795},{"id":9681,"originId":"60167d5c03d79710cc66e240","articleId":2101,"userId":3214,"content":"[@zengming00](/user/zengming00) 感谢, 我学习下wasm.","createdAt":1612086620538},{"id":9682,"originId":"601758db03d79782be66e2c2","articleId":2101,"userId":21,"content":"[@ruinb0w](/user/ruinb0w)\r\n建议看这里的早期文章，核心概念都有写\r\nhttps://v8.dev/blog\r\n如果关于node的文章\r\n这篇文章描写node架构骨架还是不错的：https://github.com/yjhjstz/deep-into-node\r\n另我觉得我们论坛里的theanarkh写的很细节：https://github.com/theanarkh/understand-nodejs\r\n\r\n","createdAt":1612142811111},{"id":9683,"originId":"6017612d03d797c49866e30d","articleId":2101,"userId":3214,"content":"[@zy445566](/user/zy445566) 感谢","createdAt":1612144941055},{"id":9684,"originId":"6012608603d797084a66dbf5","articleId":2102,"userId":33,"content":"nest搭配typeorm 啊","createdAt":1611817094281},{"id":9685,"originId":"6012624003d797ae7766dbfd","articleId":2102,"userId":433,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 习惯用sequelize了囧  感觉没差\r\n问题已经找到了\r\n","createdAt":1611817536987},{"id":9686,"originId":"601262dc03d797715866dc01","articleId":2102,"userId":433,"content":"此贴终结！找到问题了囧   sequelize v5  \r\nexport class Role extends Model<Role>\r\nsequelize v6  改成了如下\r\nexport class Role extends Model\r\n默认npm i 是最新版本的v6   在定义类型的时候不用Model<Role> 。。所以一直报错类型错误。。用sequelize的兄弟们一定要注意啊 ，v5 和v6区别还是挺大的","createdAt":1611817692621},{"id":9687,"originId":"600e389b5d04ac8bb52184dc","articleId":2103,"userId":145,"content":"看你读取的是什么文件喽\r\n读取一部分, 插入数据库, 然后再继续读取下一部分.","createdAt":1611544731004},{"id":9688,"originId":"600e5bf65d04ac4dd9218557","articleId":2103,"userId":19,"content":"1楼正解","createdAt":1611553782640},{"id":9689,"originId":"600e71865d04ac44d12185c4","articleId":2103,"userId":516,"content":"[readline](https://nodejs.org/api/readline.html)了解一下","createdAt":1611559302404},{"id":9690,"originId":"600e8f275d04ac4aff21864c","articleId":2103,"userId":117,"content":"之前写过一个处理大文件，你改一下应该就可以用了\r\n```js\r\nconst { once } = require('events');\r\nconst fs = require('fs');\r\nconst { createInterface } = require('readline');\r\n\r\nasync function processLineByLine(path, handler) {\r\n  let res = [];\r\n  try {\r\n    const rl = createInterface({\r\n      input: fs.createReadStream(path),\r\n      crlfDelay: Infinity\r\n    });\r\n\r\n    rl.on('line', (line) => {\r\n      res.push(handler(line, res));\r\n    });\r\n\r\n    await once(rl, 'close');\r\n    console.log('文件已处理');\r\n    return res;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n```","createdAt":1611566887311},{"id":9691,"originId":"600a11a85d04ac73a7217e54","articleId":2104,"userId":703,"content":"说实话，没看懂啥意思。","createdAt":1611272616563},{"id":9692,"originId":"600a317d5d04ac52d7217ec4","articleId":2104,"userId":19,"content":"这不是一个缓存击穿的问题吗？加一个锁，只有一个请求去拿服务器A的token,然后其他请求挂起吧，等拿到锁之后，就可以拿缓存了","createdAt":1611280765578},{"id":9693,"originId":"600a390d5d04ac43f7217eec","articleId":2104,"userId":21,"content":"你减2秒如果是提前失效，这没问题啊。但你这个描述有点像减2秒生效","createdAt":1611282701410},{"id":9694,"originId":"600ae7135d04ac0f0a21812a","articleId":2104,"userId":1504,"content":"[@myy](/user/myy) 额,就是服务器B为了取token的时候保证不失效.他把token的生命周期减少了2秒,本来token生命周期100秒,他就缓存98秒,那么98秒到100秒直接的请求,全部都去服务器A拿token....好像2楼说的对,缓存击穿了","createdAt":1611327251448},{"id":9695,"originId":"600ae7875d04acd0bb218131","articleId":2104,"userId":1504,"content":"[@zy445566](/user/zy445566) 服务器B为了取token的时候保证不失效.他把token的生命周期减少了2秒,本来token生命周期100秒,他就缓存98秒..服务器B的缓存是失效了,压力都给服务器A了","createdAt":1611327367151},{"id":9696,"originId":"600ae7b65d04ac38a9218135","articleId":2104,"userId":1504,"content":"[@luanxuechao](/user/luanxuechao) 您说的对,具体怎么加锁啊?用计数器么?","createdAt":1611327414826},{"id":9697,"originId":"600b87f75d04ac5688218179","articleId":2104,"userId":21,"content":"大致明白了，你设置一个全局变量和监听事件，发现token过期后，只要B发生请求前把这个全局变量设置成1，那么B发生第二个请求的时候，发现这个全局变量是1的时候，就不要去请求了，而改成监听事件。\r\n当B第一个请求回来，触发监听事件发送同时再把全局变量设置为0，这样B的其它请求其实就是等B的第一个请求完成的数据了。","createdAt":1611368439770},{"id":9698,"originId":"600c22325d04ac7ba521831a","articleId":2104,"userId":1504,"content":"[@zy445566](/user/zy445566) 明白了,我试试啊~!这样应该是可以的","createdAt":1611407922589},{"id":9699,"originId":"600c223d5d04ac925121831d","articleId":2104,"userId":1504,"content":"[@zy445566](/user/zy445566) 明白了,我试试啊~!这样应该是可以的..谢啦~","createdAt":1611407933064},{"id":9700,"originId":"5ff3d7e15393a5b70c5469d7","articleId":2105,"userId":89,"content":"- 云服务，百度是有的。https://ai.baidu.com/solution/oasis，阿里云的还在问。\r\n- 自己实现，基于ai写一些，需要部署到服务器上","createdAt":1609816033058},{"id":9701,"originId":"5ff3d8dc5393a532135469e4","articleId":2105,"userId":249,"content":"谢谢狼叔[@i5ting](/user/i5ting) ","createdAt":1609816284513},{"id":9702,"originId":"5ff48e945393a513ba546b85","articleId":2105,"userId":3216,"content":"[@Choicelin](/user/Choicelin) 学到了","createdAt":1609862804717},{"id":9703,"originId":"600ba0fc5d04ac144c2181b4","articleId":2105,"userId":249,"content":"https://github.com/pyloque/fastscan 这个库挺不错，大家可以看看","createdAt":1611374844691},{"id":9704,"originId":"600a90d55d04ac7114218010","articleId":2106,"userId":31,"content":"typedef unsigned char uint8_t;\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1611305173172},{"id":9705,"originId":"600a95625d04acb3eb218049","articleId":2106,"userId":33,"content":"二进制数组","createdAt":1611306338181},{"id":9706,"originId":"60018db25d04ac6cdb2171bb","articleId":2107,"userId":21,"content":"错误日志发全，里面肯定有","createdAt":1610714546447},{"id":9707,"originId":"60026e605d04ac8998217282","articleId":2107,"userId":3218,"content":"看起来是clone的时候无限递归了。检查下有哪些clone操作，里面有没有循环引用","createdAt":1610772064132},{"id":9708,"originId":"600a89325d04ac4a82217fef","articleId":2107,"userId":161,"content":"我也遇到过这样的问题，我是多docker，docker里面的node多进程使用了pm2管理（在云平台能自动监测docker，然后让docker自动重启可以不用）。这样一个node在挂起后，pm2能自动让node重启，或docker重启。但具体的问题，还是需要看日志查看某块代码出现了什么问题。","createdAt":1611303218421},{"id":9709,"originId":"5d32b6629969a529571d5b9a","articleId":2108,"userId":545,"content":"上面说的很明白了，node 下载地址的代理地址。\r\n比如 \r\n`nvm  proxy https://npm.taobao.org/mirrors/node/`\r\n国内从 node 官方下载 node.js 很慢的，你说有啥用呢？\r\n\r\n另外就是有些内网环境，连不到外网的","createdAt":1563604578777},{"id":9710,"originId":"5d32b673b2b9222961dac83f","articleId":2108,"userId":97,"content":"下载时候代理，考虑到潜在的网络环境问题无法直接下载资源","createdAt":1563604595520},{"id":9711,"originId":"5d32c8299969a529571d5c17","articleId":2108,"userId":3219,"content":"[@zuohuadong](/user/zuohuadong) 但是不管怎么改地址，都是提示这样\r\n![image.png](//static.cnodejs.org/Fo2wZVnqcEU1evug1xtlFgPWZw1N)\r\n另外，nvm node_mirror <node_mirror_url>也是设置镜像地址的，这是不是有点重复了。。。","createdAt":1563609129753},{"id":9712,"originId":"5d32c86eb2b9222961dac889","articleId":2108,"userId":3219,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 你好，可否举个栗子？","createdAt":1563609198967},{"id":9713,"originId":"5d32cbd69969a529571d5c35","articleId":2108,"userId":3132,"content":"proxy是代理。\r\n你如果本地有http代理可以设置通过代理下载。","createdAt":1563610070440},{"id":9714,"originId":"5d32e980b2b9222961dac93e","articleId":2108,"userId":109,"content":"执行 ` nvm list available`  结果：\r\n```\r\n|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |\r\n|--------------|--------------|--------------|--------------|\r\n|    12.6.0    |   10.16.0    |   0.12.18    |   0.11.16    |\r\n|    12.5.0    |   10.15.3    |   0.12.17    |   0.11.15    |\r\n|    12.4.0    |   10.15.2    |   0.12.16    |   0.11.14    |\r\n...\r\n....\r\nThis is a partial list. For a complete list, visit https://nodejs.org/download/release\r\n```\r\n\r\n执行 `nvm proxy https://npm.taobao.org/mirrors/node/` 之后再执行上面命令，结果\r\n```\r\n$ nvm list available\r\nCould not retrieve https://nodejs.org/dist/index.json.\r\nGet https://nodejs.org/dist/index.json: Bad Request\r\n```\r\n","createdAt":1563617664238},{"id":9715,"originId":"600a25965d04ac03bc217e82","articleId":2108,"userId":3090,"content":"代理服務器是專用計算機或在計算機上運行的軟件系統，充當端點設備（例如計算機）與用戶或客戶端從中請求服務的另一服務器之間的中介。代理服務器可以與防火牆服務器位於同一台計算機上 [https://buy.fineproxy.org/eng/china-proxy.html](https://buy.fineproxy.org/eng/china-proxy.html)，也可以位於單獨的服務器上，該服務器通過防火牆轉發請求。\r\n\r\n對用戶而言，代理服務器是不可見的；所有Internet請求和返回的響應似乎直接與所尋址的Internet服務器有關。 （該代理實際上並不是不可見的；必須將其IP地址指定為瀏覽器或其他協議程序的配置選項。）","createdAt":1611277718886},{"id":9716,"originId":"5a533fca99d207fa49f5cd12","articleId":2110,"userId":516,"content":"试试问问他们 [@atian25](/user/atian25) ","createdAt":1515405258703},{"id":9717,"originId":"5a542dc8afa0a121784a8a85","articleId":2110,"userId":261,"content":"`egg-static` 依赖 `koa-static-cache`，而这个是  `koa-static-cache` 的 bug，详见：https://github.com/koajs/static-cache/issues/1\r\n问题原因：`koa-static-cache` 没有解析请求头的 `range` 字段，且响应头也没有 `range` 字段，不符合 [RFC7233规范](https://tools.ietf.org/html/rfc7233)，导致浏览器提前断开了连接。目前的解决办法就是在 `koa-static-cache` 前面加一个中间件 [koa-range](https://github.com/koajs/koa-range)","createdAt":1515466184159},{"id":9718,"originId":"5a54385799d207fa49f5cd49","articleId":2110,"userId":261,"content":"已经提了 PR，麻烦 [@fengmk2](/user/fengmk2) 审一下：https://github.com/eggjs/egg-static/pull/13","createdAt":1515468887195},{"id":9719,"originId":"5a5820f0a3692d014f4f13f4","articleId":2110,"userId":261,"content":"[@jinxc](/user/jinxc) 官方 bug 已修，版本 egg-static@>=v2.1.0 和 egg-static@>=v1.5.0","createdAt":1515725040048},{"id":9720,"originId":"5a58297bafa0a121784a8b4c","articleId":2110,"userId":358,"content":"不用管版本，直接重新安装下依赖即可（不要锁版本！），我们都是通过 `^` 引入的，`egg-static` 是 `egg` 的子依赖，开发者不要自行引入。","createdAt":1515727227824},{"id":9721,"originId":"6009410f5d04ac37d1217d6c","articleId":2110,"userId":3220,"content":"这个问题，现在Eggjs还会报这种错，请问有办法处理吗","createdAt":1611219215121},{"id":9722,"originId":"6009264f5d04ac1712217ced","articleId":2111,"userId":358,"content":"egg-core 的 context loader","createdAt":1611212367045},{"id":9723,"originId":"600935f75d04ac0033217d49","articleId":2111,"userId":117,"content":"可以了，谢谢","createdAt":1611216375444},{"id":9724,"originId":"6004edee5d04ac8b53217485","articleId":2112,"userId":3222,"content":"返回的依旧是所有邮件    筛选的条件无效 求解答","createdAt":1610935790740},{"id":9725,"originId":"600130fda2a213f801f6e6c0","articleId":2113,"userId":33,"content":"硬盘只有一个啊，","createdAt":1610690813650},{"id":9726,"originId":"600151415d04acda692170c8","articleId":2113,"userId":3223,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 你仔细看，是同时耗时100ms的，如果是一个个按顺序每个100ms倒也正确","createdAt":1610699073308},{"id":9727,"originId":"600157155d04ac2a162170ee","articleId":2113,"userId":703,"content":"老梗了，循环中用异步，console.timeEnd(i) 把 console.timeEnd(9) 输出了 10 遍","createdAt":1610700565356},{"id":9728,"originId":"6001605c5d04ac55fb217145","articleId":2113,"userId":3223,"content":"[@myy](/user/myy) 那为啥每次的值还不一样呢","createdAt":1610702940413},{"id":9729,"originId":"6001852e5d04ac498921719b","articleId":2113,"userId":703,"content":"[@chxy85](/user/chxy85) \r\nconsole.timeEnd(9) 每次输出的是 “每个异步函数结束时间点” 与 “console.time(9)” 的差值，肯定是不一样的。","createdAt":1610712366620},{"id":9730,"originId":"5ff6b1f3a2a213bf95f6d3e5","articleId":2115,"userId":21,"content":"我觉得maxLength可以，别太钻牛角尖了","createdAt":1610002931705},{"id":9731,"originId":"5ffabc86a2a213e174f6d948","articleId":2115,"userId":113,"content":"检测到输入过多字符，直接裁剪写回即可","createdAt":1610267782335},{"id":9732,"originId":"5ff06aac5393a55c0e54643a","articleId":2116,"userId":1504,"content":"或者用另外的形式实现也行啊?","createdAt":1609591468160},{"id":9733,"originId":"5ff17f355393a54e435465bb","articleId":2116,"userId":1504,"content":"知道了,load方法是异步的,在回调函数里添加样式就好了","createdAt":1609662261770},{"id":9734,"originId":"5ff9bd05a2a213a78df6d8e3","articleId":2116,"userId":3216,"content":"学到了","createdAt":1610202373311},{"id":9735,"originId":"5fec12ac5393a57cb6545fd3","articleId":2117,"userId":358,"content":"这个插件我当初写着第一版，但后面没有在实际业务中使用的场景，所以没法维护了。\r\n\r\n可以看下社区有没有对应的插件，或者 Koa 社区的 Middleware 引入。","createdAt":1609306796368},{"id":9736,"originId":"5ff50b115393a567c5546ba7","articleId":2117,"userId":1630,"content":"这个已转到 egg-cloud 下，但是之后就没有继续维护了\r\n现在连egg 也没有怎样更新了","createdAt":1609894673029},{"id":9737,"originId":"5ff4019f5393a55ac2546a4f","articleId":2119,"userId":2333,"content":"os.cpus()\r\nReturns: <Object[]>\r\n\r\n文档里写的是返回数组，原因是 `each logical CPU core`，返回每个逻辑 CPU","createdAt":1609826719861},{"id":9738,"originId":"5febfd2e5393a599be545f90","articleId":2120,"userId":2142,"content":"有在APM框架里用，通过acync-hooks在代码里自动插桩","createdAt":1609301294317},{"id":9739,"originId":"5fec3d975393a5c37854605f","articleId":2120,"userId":19,"content":"[@zhaochy1990](/user/zhaochy1990) 是这玩意吗？https://github.com/elastic/apm-agent-nodejs","createdAt":1609317783966},{"id":9740,"originId":"5fec47295393a55063546080","articleId":2120,"userId":2142,"content":"[@luanxuechao](/user/luanxuechao) 不是，自己公司的项目","createdAt":1609320233222},{"id":9741,"originId":"5fec4b0c5393a526a2546093","articleId":2120,"userId":19,"content":"[@zhaochy1990](/user/zhaochy1990) 哦哦 懂了。。有没有什么性能问题呢，比如说CPU 内存之类的。。","createdAt":1609321228533},{"id":9742,"originId":"5fed43235393a58042546156","articleId":2120,"userId":2142,"content":"[@luanxuechao](/user/luanxuechao) 目前没遇到","createdAt":1609384739359},{"id":9743,"originId":"5fedd3885393a54321546281","articleId":2120,"userId":13,"content":"使用前后对比，性能会有轻微影响，可以看看这个 https://github.com/kuzzleio/kuzzle/pull/1604","createdAt":1609421704807},{"id":9744,"originId":"5ff285845393a56a95546761","articleId":2120,"userId":19,"content":"[@Q-Angelo](/user/Q-Angelo) 谢了，还是准备用这个","createdAt":1609729412060},{"id":9745,"originId":"5fe3f77c98427e438f6aa16d","articleId":2121,"userId":354,"content":"可以pm2 reload，新镜像是因为更好进行版本管理","createdAt":1608775548802},{"id":9746,"originId":"5fe458aa98427eb0306aa2e8","articleId":2121,"userId":33,"content":"[@cctv1005s](/user/cctv1005s) 对啊，主要是版本管理，想的是github action执行服务器中的docker 脚本，重新pull -> install -> pm2 reload。。但是如果部署在docker中的话，这一套脚本真麻烦啊，，docker我不是太熟，，所以在想有没有更简单的脚本来实现这一需求 ","createdAt":1608800426629},{"id":9747,"originId":"5fe465c898427e65b96aa348","articleId":2121,"userId":21,"content":"复用原来容器不销毁也可以，看你选择","createdAt":1608803784133},{"id":9748,"originId":"5fe4710298427e0d926aa377","articleId":2121,"userId":33,"content":"[@zy445566](/user/zy445566) 如何复用原来容器呢，，原来容器中的镜像代码版本是旧的，，如何做到复用容器且更新代码重新打包呢。","createdAt":1608806658097},{"id":9749,"originId":"5fe4712698427e70c06aa381","articleId":2121,"userId":21,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) \r\nWORKDIR设置好,写个这样的脚本就好了\r\n```sh \r\ndocker exec  xxxx git pull\r\ndocker exec  xxxx npm install\r\ndocker exec  xxxx pm2 reload all  \r\n```\r\n但这样不可避免每次都要npm install,但是如果你打镜像，把package.json放到前一步，提前做成镜像，docker就会自动跳过npm这一步","createdAt":1608806694228},{"id":9750,"originId":"5fe4805698427e953c6aa3e8","articleId":2121,"userId":358,"content":"不打镜像就没意义了，无法快速回滚止血","createdAt":1608810582827},{"id":9751,"originId":"5fe4927298427ee4046aa437","articleId":2121,"userId":33,"content":"[@zy445566](/user/zy445566) 这样确实也可以，，但是总感觉怪怪的，，好像破坏了镜像原本的状态，而且镜像也没法复用，因为他里面还是原本的版本代码。。","createdAt":1608815218095},{"id":9752,"originId":"5fe492d398427e218f6aa43b","articleId":2121,"userId":33,"content":"[@atian25](/user/atian25) 意思是每次还都是重新打镜像是吗，，然后定时任务删除旧的镜像这样？？容器的话一直都停止删除运行新的？","createdAt":1608815315625},{"id":9753,"originId":"5fe59e5698427e3d3e6aa67c","articleId":2121,"userId":358,"content":"镜像不删，构建阶段是打镜像的。\r\n部署阶段其实就拉一个特点的镜像启动而已。\r\n至于怎么平滑重启，这些 k8s 等基础设施都搞定了。","createdAt":1608883798973},{"id":9754,"originId":"5fe6d2eb98427e301e6aa80a","articleId":2121,"userId":33,"content":"[@atian25](/user/atian25) 我擦，，那一个nodejs镜像就1个g，，二十几次就给云盘干满了","createdAt":1608962795681},{"id":9755,"originId":"5fe7089598427e11966aa849","articleId":2121,"userId":11,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 用 alpine 做基础镜像，小很多","createdAt":1608976533100},{"id":9756,"originId":"5fe756aa98427ecaba6aa8a3","articleId":2121,"userId":358,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) \r\n\r\n1. 镜像是分层的，几个之间是会复用底层的，不会大多少吧。\r\n2. 基础镜像大小是可以优化的。\r\n3. 留几份镜像看你业务对稳定性的需求。\r\n4. 新发布后，线上出问题时，最快的止血方式就是回滚镜像，而不是慢吞吞的（P3 变 P1）重新打一个新的然后上线（还不一定能跑起来）","createdAt":1608996522716},{"id":9757,"originId":"5fe96f345393a516ad545a1f","articleId":2121,"userId":19,"content":"我觉得你说的整个流程上就有问题，下面是我个人见解哈，首先自动化部署流程应该是 pull code-->build docker image--> push docker image(这个都是在运维机器上做的,并且打tag)，\r\n服务器机器: pull docker image-->start docker image(如果是docker-compose 管理的话是省去停止容器的那步的)\r\n如果出问题，立马重启老的docker image.\r\npm2 reload是香，但是你如何保证快速的回滚？服务器机器和你的代码repo的网络是通的？这些在一些公司是不可以的，而且docker的本意是解决各个环境不兼容问题，不是说快速重启问题。。","createdAt":1609133876906},{"id":9758,"originId":"5fe9830e5393a5e523545a55","articleId":2121,"userId":33,"content":"[@hyj1991](/user/hyj1991) 没找到centos的 alpine镜像","createdAt":1609138958195},{"id":9759,"originId":"5fe983615393a53f0c545a59","articleId":2121,"userId":33,"content":"[@luanxuechao](/user/luanxuechao) 我的就一台机器，，，，全都打到本地，，，","createdAt":1609139041946},{"id":9760,"originId":"5fe9856f5393a53454545a61","articleId":2121,"userId":19,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 恩也没关系，基于各个场景吧，你现在的疑问主要是因为你杀鸡用宰牛刀，所以你觉得费事，就类比就两三个服务上不上K8S一样。能业务做大的时候，你会觉得用容器很香。","createdAt":1609139567835},{"id":9761,"originId":"5fe9a3375393a548c9545afd","articleId":2121,"userId":89,"content":"[@ganshiqingyuan](/user/ganshiqingyuan)  看一下 https://github.com/gliderlabs/docker-alpine 文档，都是镜像，不可能嵌套的。","createdAt":1609147191859},{"id":9762,"originId":"5fea97215393a5b4c1545c5d","articleId":2121,"userId":33,"content":"[@i5ting](/user/i5ting) 感谢狼叔指点！，，我发现我还是没理解精髓，，看来用docker打镜像的主要作用是像天猪说的快速止血了，，我这种只留一个镜像的做法确实有点杀鸡用牛刀了。。顺便问一嘴狼叔，，像数据库啥的是不是最好不要放到docker中，，，","createdAt":1609209633609},{"id":9763,"originId":"5fea979e5393a5c5e5545c6b","articleId":2121,"userId":89,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 如果日常只用mysql这种，其实不必要的，以前没有容器化的时候都是这样玩的。如果经常有隔离环境构建，用docker更好。","createdAt":1609209758818},{"id":9764,"originId":"5fea98845393a54644545c83","articleId":2121,"userId":33,"content":"[@i5ting](/user/i5ting) 懂了狼叔！","createdAt":1609209988239},{"id":9765,"originId":"5feebf1f5393a5b6fc5462e6","articleId":2121,"userId":3216,"content":"赞一个","createdAt":1609482015089},{"id":9766,"originId":"5fe1a65d98427e1c246a9cc7","articleId":2122,"userId":21,"content":"直接用七牛啊，后端甩个token让前端直接传就好了，后端存个url就好了。个人用户每个月10GB免费流量，企业的话不买就太抠了","createdAt":1608623709912},{"id":9767,"originId":"5fe1ae4d98427ec5f86a9d3d","articleId":2122,"userId":438,"content":"七牛+1，或者阿里腾讯的oss","createdAt":1608625741977},{"id":9768,"originId":"5fe1c65598427ec6d16a9ded","articleId":2122,"userId":1504,"content":"[@zy445566](/user/zy445566) 额,您说的有道理...谢谢啊","createdAt":1608631893135},{"id":9769,"originId":"5fe1c65f98427e1c986a9df1","articleId":2122,"userId":1504,"content":"[@xwadh](/user/xwadh) 谢谢回复","createdAt":1608631903171},{"id":9770,"originId":"5fe3e93098427ed7786aa148","articleId":2122,"userId":30,"content":"https://github.com/node-formidable/formidable 我用的这个","createdAt":1608771888392},{"id":9771,"originId":"5fec05675393a51f64545fa3","articleId":2122,"userId":1504,"content":"[@gafish](/user/gafish) 我也把这个配置上了,唯一一点不好的是,文件名不能自定义,要改文件名必须通过文件改名才行","createdAt":1609303399547},{"id":9772,"originId":"5fddb5a10f99cb47a25e38bd","articleId":2123,"userId":13,"content":"“配置参数” 配置中心也是一种选择，例如 Consul、ZK 等","createdAt":1608365473444},{"id":9773,"originId":"5fe009660f99cb47185e3a5b","articleId":2123,"userId":541,"content":"放配置中心，业界开源如携程Apollo，楼上那两个虽说有也叫配置中心，但是我理解跟这种配置中心干的不是一码事更是倾向于分布式数据一致性  \r\n放json文件/或者其他格式例如yml，但通过Jenkins等工作流工具自动在部署打包前注入到发布包里  ","createdAt":1608517990431},{"id":9774,"originId":"5fe00d940f99cb34e35e3a7f","articleId":2123,"userId":358,"content":"构建期或部署期注入方式，前者要保证镜像是私有的，后者 k8s 有个 secret map 来注入秘钥。","createdAt":1608519060754},{"id":9775,"originId":"5fe04c1498427eae8c6a98c0","articleId":2123,"userId":1504,"content":"[@Q-Angelo](/user/Q-Angelo) 谢谢回复,目前分布式还没涉及到","createdAt":1608535060868},{"id":9776,"originId":"5fe04c9398427e33b66a98ca","articleId":2123,"userId":1504,"content":"[@AnzerWall](/user/AnzerWall) 这个比较接近我的需求,但是还是有点太重了,没有没有轻量级的node.js能用的啊?十分感谢您的回复","createdAt":1608535187846},{"id":9777,"originId":"5fe04e4098427ef5d56a98e3","articleId":2123,"userId":1504,"content":"[@atian25](/user/atian25) k8s好像也太重了,现在没有分布式的需求,有更轻量级的参数管理的工具么?","createdAt":1608535616753},{"id":9778,"originId":"5feac0175393a51b0c545d31","articleId":2123,"userId":123,"content":"https://github.com/lvgithub/ctrip-apollo-client","createdAt":1609220119670},{"id":9779,"originId":"5fead90e5393a57c99545d79","articleId":2123,"userId":358,"content":"[@iori2882](/user/iori2882) 安全是看你整个部署环境链路的，任何一个环境薄弱都不行，要看你们的具体情况来选择具体方案。\r\n\r\n譬如服务器是安全的，那甚至可以直接明文文件放在服务器都行。或者是服务器上有私有启动脚本，源码里面放应用维度的加密过的秘钥，服务器上解密。","createdAt":1609226510040},{"id":9780,"originId":"5bbf2c939545eaf107b9c9fc","articleId":2125,"userId":358,"content":"https://github.com/atian25/blog/issues/7\r\n\r\n可以看看我几年前的总结。\r\n**年轻的时候总是想做一件事，却花了很多时间在周边上，然后自我感动的忘却初心。**\r\n\r\n我的建议是，如果你的**初心**就是 『记录一下自己生活的趣事，值得记忆的事，以及一些个人文章』，那你应该：\r\n- 不要折腾什么个人博客，构建技术，部署方式\r\n- 直接找一个现成的平台来写就好了，**专注于『写内容』本身**，而不是先花时间折腾『写内容的工具』\r\n\r\n**建议的平台：**\r\n- GitHub Issue\r\n  - 优点是简单，便于程序猿间的交流，跟代码容易结合。\r\n  - 缺点是导航组织稍弱\r\n- 知乎专栏\r\n  - 优点是：流量不少\r\n  - 缺点是：编辑体验差\r\n- **语雀** / 简书 / 掘金\r\n  - 优点是：编辑体验一级棒，支持团队协作\r\n  - 缺点是：流量一般\r\n  - 可以看下：\r\n    - 阮老师的：https://www.yuque.com/ruanyf/share/issue-25\r\n\t- https://www.yuque.com/page/luan.ma/yuque2blog\r\n\t- Ant Design 实战教程（beta 版） https://www.yuque.com/ant-design/course\r\n\t\r\n\t\r\n还是坚持想折腾的话，看下 vuepress， hexo 等","createdAt":1539255443292},{"id":9781,"originId":"5bbf3ab037a6965f590520db","articleId":2125,"userId":3228,"content":"用 hexo 搭建的 \r\nnoobakong.gitee.io","createdAt":1539259056488},{"id":9782,"originId":"5bbf443815e4fd1923f48e27","articleId":2125,"userId":108,"content":"楼上说了莫不就是我。\n先是Wordpress ，然后hexo，再然后自建，最后回归Github ，花了再多时间。\n\n直接上现成的工具就好了，博客平台不重要，重要的是内容\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1539261496563},{"id":9783,"originId":"5bbf45c615e4fd1923f48e29","articleId":2125,"userId":1597,"content":"用koa","createdAt":1539261894890},{"id":9784,"originId":"5bbf464515e4fd1923f48e2b","articleId":2125,"userId":3227,"content":"[@atian25](/user/atian25) 谢谢啦 了解了！","createdAt":1539262021470},{"id":9785,"originId":"5bbf465aede204052db8049a","articleId":2125,"userId":3227,"content":"[@axetroy](/user/axetroy) 哈哈哈说的有道理","createdAt":1539262042022},{"id":9786,"originId":"5bbf468515e4fd1923f48e2d","articleId":2125,"userId":3227,"content":"[@noobakong](/user/noobakong) 不错呢 学习了！","createdAt":1539262085485},{"id":9787,"originId":"5bbf46989545eaf107b9ca02","articleId":2125,"userId":3227,"content":"[@wuwangju](/user/wuwangju) 嘿嘿OK ","createdAt":1539262104512},{"id":9788,"originId":"5bbf4eee37a6965f590520e0","articleId":2125,"userId":3228,"content":"[@axetroy](/user/axetroy) \r\n前端新手 膜拜\r\n唉 何时能像你一样优秀","createdAt":1539264238162},{"id":9789,"originId":"5c1df30c3898674067a77209","articleId":2125,"userId":3229,"content":"个人博客的话，还是推荐用wordpress的，另外，分享几个好用的[国外虚拟主机](https://tophosting.github.io)","createdAt":1545466636641},{"id":9790,"originId":"5c270c793898674067a798e0","articleId":2125,"userId":1724,"content":"这网站里有很多博客网站，希望可以帮助到你\r\n[frontendjs.com](https://www.frontendjs.com)","createdAt":1546062969036},{"id":9791,"originId":"5c29a2f176c4964062a1f53c","articleId":2125,"userId":304,"content":"Gatsby","createdAt":1546232561394},{"id":9792,"originId":"5c2e2b065bf06c5e7e3f0efa","articleId":2125,"userId":62,"content":"了解一下hexo、ghost，这类markdown博客系统，熟悉vue的话，可以看看vuepress，也挺有趣的\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1546529542478},{"id":9793,"originId":"5c2e427e3898674067a7ae7f","articleId":2125,"userId":1980,"content":"**都是工具，不忘初心才是本意**\r\n我喜欢用hexo，用过wp，github 等等，作为一个js开发者选 hexo不折腾了（时间比较宝贵）\r\n如果感觉 hexo 没有适合的 ide， 可以试试 [hexo note](https://github.com/tmirun/Hexo-Note)\r\n自己开发的 用 electron 和 angular 做的 hexo 客户端。目前自用。（想想也挺搞笑的，最初开发这个项目就是为了可以在markdown 格式粘贴图片）\r\n![imagen.png](//static.cnodejs.org/FuzdqvNXQltv9NezIWI0xRQ3ftJ8)\r\n","createdAt":1546535550811},{"id":9794,"originId":"5fe98bab5393a5b8a2545a8e","articleId":2125,"userId":547,"content":"世界上38%+的网站是用WordPress做的，因为它门槛低，适合广大非技术人员，毕竟使用Markdown写东西大概也只适合技术人员，我是WordPress自由职业者，欢迎[交流](https://wpshushu.com)。","createdAt":1609141163254},{"id":9795,"originId":"5db6b598865a9844a301e469","articleId":2126,"userId":21,"content":"我买了香港的轻量应用服务，不是很稳定，也就是能勉强翻Wall(注意一旦访问非常规马上会ping不同，估计是有监控)。\r\n大陆内的轻量应用服务服务器贵太多，甚至一度以为香港服务器价格是不是标错单位了。","createdAt":1572255128657},{"id":9796,"originId":"5db7a9ab865a9844a301e70e","articleId":2126,"userId":223,"content":"[@zy445566](/user/zy445566) 我也一直不敢相信香港的轻量服务器是不是有猫腻，但用来做过两个网站了，也没感觉有什么不对（我的都是小网站）。你说的不是很稳定，如果是说用来翻，我觉得肯定啊，国内的主机服务商怎么可能拿来翻呢？我说的是做网站。\r\n\r\n","createdAt":1572317611892},{"id":9797,"originId":"5db7aa02ece3813ad9ba4e78","articleId":2126,"userId":223,"content":"[@454160064](/user/454160064) 兄弟，这波广告打得，拼团单开一帖吧还是 :) 买得人还是有的。","createdAt":1572317698192},{"id":9798,"originId":"5db7f298865a9844a301e877","articleId":2126,"userId":318,"content":"请问楼主，除了ECS，对于新手还有什么其他选择吗，好用，性价比高","createdAt":1572336280207},{"id":9799,"originId":"5db8da1a865a9844a301e9a7","articleId":2126,"userId":223,"content":"[@IEfucker](/user/IEfucker) \r\n\r\n如果是做网站，我觉得[阿里云轻量应用服务器](https://promotion.aliyun.com/ntms/act/shoppingcart.html?userCode=li2xtsvq)已经很不错了，国外类似的VPS不是没有，但基本提供不了北京时区的中文客服，这个你用过阿里云的工单系统就知道，如果嫌备案麻烦，用香港的就是了。\r\n\r\n[你可能只需要轻量应用服务器](https://www.54wzj.com/aliyun/aliyun-lite/)\r\n\r\n如果不是做网站，算了，我还是不推荐了。\r\n","createdAt":1572395546648},{"id":9800,"originId":"5db8fb56865a9844a301eae8","articleId":2126,"userId":173,"content":"我就是交了智商税的，之前买过5年的ECS做企业占，带宽贵没敢买多，只买了2M，后来发现很不够，扩充还是贵，然后看到去年阿里云出了现在的轻量... 后悔死了，问客服，说没法换，过了时间也不退款。","createdAt":1572404054352},{"id":9801,"originId":"5fe69e3a98427e24d36aa7bd","articleId":2126,"userId":547,"content":"轻量应用服务器的性价比的确是很高的，但个人不推荐它的一键安装，用的是老掉牙的CentOS版本，缺少很多工具，安装位置也感觉比较偏门，如果打算自己维护服务器的，我建议还是自己用Ubuntu装吧 - [wpshushu](https://wpshushu.com)","createdAt":1608949306626},{"id":9802,"originId":"5f86c184f9736b02ceadb54d","articleId":2127,"userId":22,"content":"有","createdAt":1602666884017},{"id":9803,"originId":"5f87b404f9736b02ceadb554","articleId":2127,"userId":21,"content":"[@justjavac](/user/justjavac) 👍","createdAt":1602728964059},{"id":9804,"originId":"5f87cb02f9736b02ceadb55d","articleId":2127,"userId":3230,"content":"上来，还是没有问题的。","createdAt":1602734850551},{"id":9805,"originId":"5f8e942772af8c02d3f8e700","articleId":2127,"userId":21,"content":"[@2627500295](/user/2627500295) 👍","createdAt":1603179559650},{"id":9806,"originId":"5f8f010472af8c02d3f8e708","articleId":2127,"userId":3231,"content":"我有时候打不开网站，为啥呀","createdAt":1603207428836},{"id":9807,"originId":"5f8fb2f772af8c02d3f8e719","articleId":2127,"userId":440,"content":"配了 host 来了","createdAt":1603252983748},{"id":9808,"originId":"5f959f1672af8c02d3f8e75e","articleId":2127,"userId":627,"content":"进来真是不容易","createdAt":1603641110817},{"id":9809,"originId":"5fdb3caf0f99cb5ea45e33ec","articleId":2127,"userId":34,"content":"niupi","createdAt":1608203439144},{"id":9810,"originId":"5fdb44260f99cb809c5e3402","articleId":2127,"userId":10,"content":"我猜有人~","createdAt":1608205350624},{"id":9811,"originId":"5fdb4cef0f99cb40665e3449","articleId":2127,"userId":11,"content":"人来了","createdAt":1608207599553},{"id":9812,"originId":"5fdb4dc90f99cb71035e3482","articleId":2127,"userId":3232,"content":"来了来了","createdAt":1608207817639},{"id":9813,"originId":"5fe1ac5998427e11166a9d1a","articleId":2127,"userId":45,"content":"接客啦啦啦啦","createdAt":1608625241892},{"id":9814,"originId":"5fe5f82e98427e0b656aa737","articleId":2127,"userId":655,"content":"哈哈","createdAt":1608906798987},{"id":9815,"originId":"5fdf482d0f99cb28b65e39be","articleId":2128,"userId":1581,"content":"[@atian25](/user/atian25)","createdAt":1608468525982},{"id":9816,"originId":"5fdffc930f99cbe9dd5e3a23","articleId":2128,"userId":358,"content":"没看懂你想问啥，await 不就是为了等待做完再返回么？如果耗时操作很占 CPU，甚至会影响其他请求的响应，这是可预期行为。","createdAt":1608514707820},{"id":9817,"originId":"5fe0096d0f99cb2dcd5e3a5f","articleId":2128,"userId":36,"content":"CPU密集型操作，直接fork一个子进程操作吧","createdAt":1608517997491},{"id":9818,"originId":"5fe034470f99cb4a995e3b01","articleId":2128,"userId":1581,"content":"[@atian25](/user/atian25) 具体业务是这样的，在这个logic函数中中要生成一份pdf文件，然后打成zip包，给请求的用户下载到本地。现在遇到的问题是pdf文件及zip包都正常生成，但最终要response给用户的逻辑没执行，但也没报错。\r\nclass MyController {\r\nasync logic(){\r\nawait createPdf() //这个耗时操作，注销掉就可正常返回数据.\r\nctx.attachment(由createPdf()生成的zip文件名);\r\nctx.body=fs.createReadStream(zip文件路径);\r\n}\r\n}\r\n","createdAt":1608528967193},{"id":9819,"originId":"5fe035da0f99cb03335e3b0b","articleId":2128,"userId":358,"content":"大概率是你 `createPdf()` 里面逻辑有问题，promise 一直没 resolve 了吧","createdAt":1608529370610},{"id":9820,"originId":"5fe0373e0f99cb5ae65e3b13","articleId":2128,"userId":1581,"content":"[@atian25](/user/atian25) 有resolve。有好多种文件导出并打包（除了pdf别的执行都时间都很短）都正常。就这个pdf出问题了。\r\n开始运行创建PDF, 2020-12-21 13:29:46\r\n开始执行: 1608529589161\r\n执行完毕: 1608529590867\r\n创建PDF结束, 2020-12-21 13:30:46\r\n开始运行创建ZIP, 2020-12-21 13:30:46\r\n添加zip文件2: 1608529589158\r\n写入zip成功\r\n创建ZIP结束, 2020-12-21 13:30:46\r\n开始下载...\r\n下载逻辑结束...","createdAt":1608529726568},{"id":9821,"originId":"5fe0382e0f99cb271a5e3b18","articleId":2128,"userId":1581,"content":"[@atian25](/user/atian25) 下载逻辑就两行代码:\r\nctx.attachment(fileName+\".zip\");\r\nctx.body=fs.createReadStream(\"zip文件绝对路径\");","createdAt":1608529966159},{"id":9822,"originId":"5fe040bc98427e1dfb6a9886","articleId":2128,"userId":11,"content":"这不肯定是你的 `createPdf()` 函数出了问题，走了什么异常分支没有 resolve / reject 吧，框架不可能把你的逻辑吃掉的","createdAt":1608532156863},{"id":9823,"originId":"5fe048fd98427ef8a16a98b5","articleId":2128,"userId":1581,"content":"所以很奇怪，这个控制器里好多生成文件然后压zip，都正常，就这个pdf\r\n","createdAt":1608534269582},{"id":9824,"originId":"5fe04ed398427e645c6a98f1","articleId":2128,"userId":117,"content":"生成文件不代表createPdf 函数执行完了，createPdf函数贴出来看看","createdAt":1608535763466},{"id":9825,"originId":"5fe04f1b98427ecdb26a98fb","articleId":2128,"userId":1504,"content":"[@nobody](/user/nobody) 有可能这个pdf太大了或别的什么原因,导致出错了,但是你没写try catch","createdAt":1608535835662},{"id":9826,"originId":"5fe053e998427e8a266a9943","articleId":2128,"userId":1581,"content":"[@iori2882](/user/iori2882) 我加个try catch试试","createdAt":1608537065893},{"id":9827,"originId":"5fe0542798427e1c696a9947","articleId":2128,"userId":1581,"content":"[@chenkai0520](/user/chenkai0520) 使用的是html-pdf \r\npdf.create(htmlStr, {\r\n                format: 'A4'\r\n            }).toStream(function(err, stream){\r\n                stream.pipe(fs.createWriteStream(filePath));\r\n                if(err){\r\n                    reject(err)\r\n                }else{\r\n                    console.log('执行完毕:',Date.now())\r\n                    resolve()\r\n                }\r\n            })","createdAt":1608537127102},{"id":9828,"originId":"5fe05db198427eb1616a997c","articleId":2128,"userId":117,"content":"[@nobody](/user/nobody) pipe不是一个同步函数，resolve的时候文件还没有生成呢","createdAt":1608539569842},{"id":9829,"originId":"5fe0833898427e798b6a9a5c","articleId":2128,"userId":1581,"content":"[@chenkai0520](/user/chenkai0520) 好的，我再试试","createdAt":1608549176979},{"id":9830,"originId":"5fe08ebb98427ef57b6a9aa3","articleId":2128,"userId":1581,"content":"[@iori2882](/user/iori2882) 加入try catch 没抓到任何错误。","createdAt":1608552123078},{"id":9831,"originId":"5fe0a85098427e47476a9ac4","articleId":2128,"userId":358,"content":"[@nobody](/user/nobody) 从上面那段代码看出，你对 Promise 和 Stream 这块的理解需要再复习下。\r\n\r\n```js\r\n// 餐厅点菜\r\nasync logic(){ \r\n   stream.pipe(fs.createWriteStream(filePath));  // 服务员通知厨师做菜，厨师说：好嘞，差不多 5 分钟搞定。\r\n   resolve() // 通知后 1 毫秒立刻告诉用户：这是你的菜，做好了。（厨师：『？？？』\r\n   ctx.body=fs.createReadStream(zip文件路径); // 用户对着空气吃菜，收获『???』\r\n}\r\n```","createdAt":1608558672319},{"id":9832,"originId":"5fe15eea98427e85fb6a9b50","articleId":2128,"userId":117,"content":"[@atian25](/user/atian25) 还有\r\n+ err的判断应该放到开始位置\r\n+ 没有判断pipe函数是不是执行成功了或失败了","createdAt":1608605418163},{"id":9833,"originId":"5fe5660898427e95436aa59a","articleId":2128,"userId":1581,"content":"[@atian25](/user/atian25) 已经解决了，忘记回来回复一下。谢谢大佬百忙之中给出通俗易懂的解释","createdAt":1608869384394},{"id":9834,"originId":"5fe5665698427e27d36aa59e","articleId":2128,"userId":1581,"content":"[@chenkai0520](/user/chenkai0520) 多谢大佬点拨","createdAt":1608869462683},{"id":9835,"originId":"5fe59dfb98427e38646aa676","articleId":2128,"userId":358,"content":"`stream.pipeline` 这个新方法可以关注下","createdAt":1608883707929},{"id":9836,"originId":"5bb5a80b15e4fd1923f48c68","articleId":2129,"userId":752,"content":"=。= 也是 egg 的上层封装。","createdAt":1538631691310},{"id":9837,"originId":"5bbaaa2a37a6965f59051f86","articleId":2129,"userId":1698,"content":"adonisjs自带ioc\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1538959914094},{"id":9838,"originId":"5bbaaae3ede204052db803f1","articleId":2129,"userId":22,"content":"egg","createdAt":1538960099275},{"id":9839,"originId":"5bbab16f15e4fd1923f48d18","articleId":2129,"userId":743,"content":"nest更有前途","createdAt":1538961775834},{"id":9840,"originId":"5bbab9bd37a6965f59051f8b","articleId":2129,"userId":545,"content":"[@wxs77577](/user/wxs77577) adonisjs 之前用过，后来换的 nest.js ， nest.js ioc  早就是标配了。  而且对 ts 支持更好。  adonis 虽然出的比 nest 早，现在 nest 下载量早就超过 adonis 了。","createdAt":1538963901844},{"id":9841,"originId":"5bbabe1215e4fd1923f48d25","articleId":2129,"userId":545,"content":"[@justjavac](/user/justjavac)   如果看npm 下载量的话， nest.js 很早就超过 egg 了，虽然 nest 起步晚，但是 star 数 也从之前差的3k 追到现在的 1k 。\r\n感觉开发者更喜欢 类spring 框架。\r\n不过也看好阿里的新框架 midway","createdAt":1538965010900},{"id":9842,"originId":"5bbac28c15e4fd1923f48d2b","articleId":2129,"userId":22,"content":"[@zuohuadong](/user/zuohuadong) egg 和 nextjs 定位不同。但是 midway 和 nest.js 的定位应该是一样的，我猜应该是 nest.js 胜出","createdAt":1538966156085},{"id":9843,"originId":"5bbac4319545eaf107b9c8de","articleId":2129,"userId":862,"content":"midway终于像社区开源了","createdAt":1538966577851},{"id":9844,"originId":"5bbb2af737a6965f59051fb5","articleId":2129,"userId":3234,"content":"> **倾家荡产推Nest**","createdAt":1538992887559},{"id":9845,"originId":"5bbb306d9545eaf107b9c8f9","articleId":2129,"userId":545,"content":"[@lxzgg](/user/lxzgg)  确实好用，目前公司后端已经由 nest.js 大一统了。\r\n\r\nmidway 也在关注，等成熟","createdAt":1538994285351},{"id":9846,"originId":"5bbb6cf315e4fd1923f48d4c","articleId":2129,"userId":850,"content":"想想知道 midway 还是四年前，现在终于开源了~","createdAt":1539009779607},{"id":9847,"originId":"5bbc1f1437a6965f59051fd4","articleId":2129,"userId":121,"content":"之前一直有使用egg，看了一下midway是基于egg开发的关系，还是比较期待这个框架能够更加完善！","createdAt":1539055380823},{"id":9848,"originId":"5bbc204cede204052db80423","articleId":2129,"userId":545,"content":"[@ZQun](/user/ZQun) nest.js  出来虽然比较晚，但star 数也快超过 egg 了。感觉国外接受程度更高\r\nmidway 跟 nest 很像，推广力度不够","createdAt":1539055692848},{"id":9849,"originId":"5fe59a5498427e3f286aa654","articleId":2129,"userId":3235,"content":"midway 全局扫描真香，nestjs还要去实例化","createdAt":1608882772907},{"id":9850,"originId":"5fe023bc0f99cba4dc5e3ae1","articleId":2130,"userId":358,"content":"ExtJS...","createdAt":1608524732906},{"id":9851,"originId":"5fe2b3ec98427efdf16a9f76","articleId":2130,"userId":111,"content":"react \r\n打开页面 只有一个div id='root'   和 sript src=\"bundle.js\"  ","createdAt":1608692716993},{"id":9852,"originId":"5f6b3626d22a6b1d622ca10f","articleId":2131,"userId":11,"content":"阿里内外？","createdAt":1600861734799},{"id":9853,"originId":"5f6b399cc1c67a7dd9affb87","articleId":2131,"userId":3237,"content":"[@hyj1991](/user/hyj1991) 什么是“阿里内外”？","createdAt":1600862620052},{"id":9854,"originId":"5f6b59dfc1c67a7dd9affbc8","articleId":2131,"userId":3238,"content":"阿里？","createdAt":1600870879512},{"id":9855,"originId":"5f6bd35272af8c02d3f8d231","articleId":2131,"userId":111,"content":" 请问国内还有哪些用nodejs技术栈 && 996的知名企业急招人?","createdAt":1600901970082},{"id":9856,"originId":"5f6bf0aef9736b02ceada151","articleId":2131,"userId":11,"content":"[@xieaolin](/user/xieaolin) Node.js 这一块，我能想到的只有阿里了","createdAt":1600909486320},{"id":9857,"originId":"5f6c04fff9736b02ceada183","articleId":2131,"userId":16,"content":"搁着招不到？","createdAt":1600914687076},{"id":9858,"originId":"5f6c0ff2f9736b02ceada1b3","articleId":2131,"userId":3237,"content":"[@AviorAlong](/user/AviorAlong) 今天是刚开始招聘的第二天，不过还是希望越快越好，毕竟机会不等人","createdAt":1600917490498},{"id":9859,"originId":"5f6c139772af8c02d3f8d291","articleId":2131,"userId":21,"content":"https://www.v2ex.com/go/nodejs","createdAt":1600918423345},{"id":9860,"originId":"5f6c1820f9736b02ceada1c9","articleId":2131,"userId":3237,"content":"[@zy445566](/user/zy445566) 谢谢，v2 已经发了招聘信息了。看来 v2 真是人心所向","createdAt":1600919584813},{"id":9861,"originId":"5f6c185472af8c02d3f8d299","articleId":2131,"userId":3237,"content":"突然想起来了还有掘金！","createdAt":1600919636742},{"id":9862,"originId":"5f6c239372af8c02d3f8d2b0","articleId":2131,"userId":22,"content":"[@xieaolin](/user/xieaolin) 掘金不是“vue 社区”吗😂，首页都是 vue 文章","createdAt":1600922515803},{"id":9863,"originId":"5f6c4014f9736b02ceada21d","articleId":2131,"userId":33,"content":"知乎啊","createdAt":1600929812475},{"id":9864,"originId":"5f6c627072af8c02d3f8d368","articleId":2131,"userId":3237,"content":"[@justjavac](/user/justjavac) 感觉用 vue  很 6 的大佬里面也有不少懂后端的吧，我也是先学的 vue ，后来慢慢因为公司需求才掌握的 nodejs。😅","createdAt":1600938608530},{"id":9865,"originId":"5f6c629872af8c02d3f8d36b","articleId":2131,"userId":3237,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 不知为什么，我现在很害怕在知乎上面讨论正经的问题","createdAt":1600938648208},{"id":9866,"originId":"5f6c7c3a72af8c02d3f8d3af","articleId":2131,"userId":33,"content":"[@xieaolin](/user/xieaolin) 只看对自己有益的就行了","createdAt":1600945210788},{"id":9867,"originId":"5f6d38b1f9736b02ceada330","articleId":2131,"userId":22,"content":"[@xieaolin](/user/xieaolin) 知乎技术板块可以，其他板块只看不评论","createdAt":1600993457492},{"id":9868,"originId":"5f6d6b9372af8c02d3f8d4e0","articleId":2131,"userId":616,"content":"招聘地点很重要，貌似 noder 只在北上广深，其他地方非常少。","createdAt":1601006483104},{"id":9869,"originId":"5f6d9867f9736b02ceada4db","articleId":2131,"userId":3237,"content":"[@zhaoyii](/user/zhaoyii) 😂我们就是在深圳呀","createdAt":1601017959790},{"id":9870,"originId":"5f6eeba972af8c02d3f8d6fd","articleId":2131,"userId":616,"content":"[@xieaolin](/user/xieaolin) QQ上有几个Node群，可以进去看看。","createdAt":1601104809627},{"id":9871,"originId":"5f6ff5d272af8c02d3f8d7e3","articleId":2131,"userId":3237,"content":"[@zhaoyii](/user/zhaoyii) 谢谢，你提醒我了，应该搜搜有没有 tg 的 node 社区","createdAt":1601172946727},{"id":9872,"originId":"5fdff67d0f99cb0e015e3a0e","articleId":2131,"userId":578,"content":"刚搭建了个 : nodejscn.com","createdAt":1608513149033},{"id":9873,"originId":"5fe0435c98427e32ea6a98a8","articleId":2131,"userId":12,"content":"非盈利性质的社区越来越难","createdAt":1608532828118},{"id":9874,"originId":"5fe1aba898427e09c76a9d0b","articleId":2131,"userId":45,"content":"社区氛围不错啊，很纯净","createdAt":1608625064527},{"id":9875,"originId":"5faba95df9736b02ceadb767","articleId":2132,"userId":2114,"content":"应该不会，兄弟。","createdAt":1605085533885},{"id":9876,"originId":"5fac928af9736b02ceadb780","articleId":2132,"userId":354,"content":"不会，我改hosts进来了","createdAt":1605145226906},{"id":9877,"originId":"5fdb44500f99cb43c85e3408","articleId":2132,"userId":10,"content":"赶紧发个新话题！","createdAt":1608205392945},{"id":9878,"originId":"5fdb4ab20f99cbe59c5e3425","articleId":2132,"userId":11,"content":"看起来你确实是之前的最后一个话题了","createdAt":1608207026296},{"id":9879,"originId":"5fdc52da0f99cbf6fd5e369c","articleId":2132,"userId":3240,"content":"[@thonatos](/user/thonatos) 贼羡慕\r\n","createdAt":1608274650854},{"id":9880,"originId":"5fdc60f90f99cb46ea5e3707","articleId":2132,"userId":30,"content":"谢天谢地，我的乌鸦嘴没有灵验，庆祝CNODE重开","createdAt":1608278265581},{"id":9881,"originId":"5fdc1ae20f99cbb52e5e35a1","articleId":2133,"userId":3242,"content":"我们这儿是把之前的pomelo拿来做微服务框架~","createdAt":1608260322930},{"id":9882,"originId":"5fdc55780f99cb9eb35e36cf","articleId":2133,"userId":3243,"content":"https://geekflare.com/javascript-frameworks-for-api/\r\n\r\nhttps://www.quora.com/What-is-the-best-framework-for-microservices-in-NodeJS","createdAt":1608275320897},{"id":9883,"originId":"5f96ca2b72af8c02d3f8e7b4","articleId":2134,"userId":3231,"content":"去哪里可以找到组织，感觉社区不是很活跃啊","createdAt":1603717675456},{"id":9884,"originId":"5f810f3272af8c02d3f8e615","articleId":2135,"userId":22,"content":"这就是 flow 啊。https://flow.org","createdAt":1602293554956},{"id":9885,"originId":"5f7c76faf9736b02ceadb43a","articleId":2136,"userId":3238,"content":"看了眼whois没有过期，难道是误操作了？","createdAt":1601992442731},{"id":9886,"originId":"5f7c785072af8c02d3f8e582","articleId":2136,"userId":3238,"content":"client Hold 了 ，啊这","createdAt":1601992784395},{"id":9887,"originId":"5f7c7d00f9736b02ceadb44a","articleId":2136,"userId":3238,"content":"估计是同样的问题\r\n/topic/5bd4772a14e994202cd5bdb7","createdAt":1601993984304},{"id":9888,"originId":"5ce38561518e0954fc4101ff","articleId":2137,"userId":417,"content":"[@Solomonqoo](/user/Solomonqoo) 利益相关：Casbin作者，可以加我们的QQ群，里面有一些教学资料：https://casbin.org/en/help","createdAt":1558414689291},{"id":9889,"originId":"5ce385ca518e0954fc410203","articleId":2137,"userId":941,"content":"Casbin-Nodejs版最近有出视频的计划，到时候可以第一时间学习。","createdAt":1558414794563},{"id":9890,"originId":"5ce38ed0e57aac76fed2c813","articleId":2137,"userId":513,"content":"[@hsluoyz](/user/hsluoyz) 好的，谢谢您！","createdAt":1558417104338},{"id":9891,"originId":"5ce38ee8e57aac76fed2c819","articleId":2137,"userId":513,"content":"[@Chalin-Shi](/user/Chalin-Shi) 若有消息，还请第一时间通知，太谢谢了！","createdAt":1558417128532},{"id":9892,"originId":"5ce653394036f24194cf5cf6","articleId":2137,"userId":3154,"content":"权限 根据自己实际需要用 rbac 或者 acl，要什么框架！","createdAt":1558598457574},{"id":9893,"originId":"5ce6579b52ccb64168ba6d28","articleId":2137,"userId":513,"content":"[@chenjiyong](/user/chenjiyong) 还满需要的，有框架就想要利用，顺便看别人如何设计","createdAt":1558599579609},{"id":9894,"originId":"5ce659b24036f24194cf5d58","articleId":2137,"userId":545,"content":"[@chenjiyong](/user/chenjiyong) \r\n对于没搞过权限设计的人来说，要么每套系统都写一套权限，要么搞一套通用的权限系统，但是这样你可能随着业务增长最少重构三次以上，才能避免坑。\r\n所以用现成的设计能避免很多坑，因为前人都踩过了。","createdAt":1558600114939},{"id":9895,"originId":"5ce6690852ccb64168ba6de6","articleId":2137,"userId":3154,"content":"角色表 用户表 模块表 为什么会跟着业务增长重构","createdAt":1558604040423},{"id":9896,"originId":"5f78029f72af8c02d3f8e471","articleId":2137,"userId":417,"content":"官网最新上线了一些视频教程：https://casbin.org/docs/en/tutorials#videos","createdAt":1601700511272},{"id":9897,"originId":"5f74306d72af8c02d3f8e214","articleId":2138,"userId":358,"content":"模块解决不了集群锁问题","createdAt":1601450093834},{"id":9898,"originId":"5f74471cf9736b02ceadb115","articleId":2138,"userId":615,"content":"[@atian25](/user/atian25) 刚才自己试验了一下，很不规范。\r\n修改了一下egg-redis插件\r\n```js\r\n//  /egg-redis/lib/redis.js\r\nconst Redlock = require('redlock')；\r\n...\r\nconst redlock = new Redlock([client]);\r\napp.redlock = redlock;\r\n// 具体业务代码上\r\nasync try() {\r\n\tconst lock = await this.app.relock.lock('lockName', 11);\r\n\tconst index = await this.app.redis.get('index'); // 这里已经提前赋值为1了\r\n\tawait this.app.redis.set('index', Number(index) + 1);\r\n\tawait lock.unlock();\r\n\tthis.ctx.body = 'success';\r\n}\r\n```\r\n这样似乎可以达到我的目的。\r\n","createdAt":1601455900688},{"id":9899,"originId":"5f74479c72af8c02d3f8e282","articleId":2138,"userId":615,"content":"[@atian25](/user/atian25) 这两个模块不知道有没有整合的可能和必要？","createdAt":1601456028306},{"id":9900,"originId":"5f76ede072af8c02d3f8e3f7","articleId":2138,"userId":113,"content":"冒昧试答一下：\r\n二者场景不同，没必要整合\r\n其次，虽然都使用redis，但仍然可以使用不同的redis服务，更没必要整合了\r\n","createdAt":1601629664230},{"id":9901,"originId":"5f77cf71f9736b02ceadb349","articleId":2138,"userId":21,"content":"[@974806047](/user/974806047) 建议fork出来修改，改个名重新推npm，这样在作者暂时不能改的时候，至少能满足自己需求","createdAt":1601687409575},{"id":9902,"originId":"5f71b25ff9736b02ceadabb4","articleId":2139,"userId":152,"content":"我们原来做saas，主体功能是不变的。 变的是UI跟对接。  ","createdAt":1601286751280},{"id":9903,"originId":"5f71b444f9736b02ceadabbe","articleId":2139,"userId":510,"content":"[@Gitforxuyang](/user/Gitforxuyang) 对呀　就一个小功能可能５个客户都不一样　怎么处理？　后台写５个接口　还是写一个接口？　前端写５个组件　还是写一个组件写5个if 还是其他解决方案","createdAt":1601287236444},{"id":9904,"originId":"5f71ba30f9736b02ceadabd5","articleId":2139,"userId":152,"content":"UI我们原来就是局部允许自定义（banner啥的）。 后端只有支付部分是需要对接的。","createdAt":1601288752023},{"id":9905,"originId":"5f728a0cf9736b02ceadac66","articleId":2139,"userId":145,"content":"公司好像也有这个问题...目前好像是分开写的, 一个人负责一个客户的需求, 接口....好复杂","createdAt":1601341964817},{"id":9906,"originId":"5f728a7ef9736b02ceadac71","articleId":2139,"userId":166,"content":"做一套标准版，兼容一些小一点的处理逻辑，如果有大的需求，针对大客户做定制版。\r\n另一个思路是以应用市场的形式把能力抽象出来，客户有需求自行安装一套你们抽象出来的应用，做配置。\r\n两种都需要对业务有好的抽象，都不算是短时间能完成的事。","createdAt":1601342078137},{"id":9907,"originId":"5f729164f9736b02ceadaced","articleId":2139,"userId":3212,"content":"物联网差不多的场景，同求大佬。目前用的是上面大佬说的做一个标准版，推广的时候尽量使用标准版推广，大客户加钱定制。把可配置的功能最初设计的时候就要分离出来，不然后面会非常难维护。　后台写５个接口　还是写一个接口？ 2楼说的这个问题，目前 做成一个接口正在被app的吐槽非常难用。","createdAt":1601343844199},{"id":9908,"originId":"5f73f029f9736b02ceadb027","articleId":2139,"userId":1466,"content":"90%的代码解决10%的需求。","createdAt":1601433641538},{"id":9909,"originId":"5f768b0f72af8c02d3f8e3cb","articleId":2139,"userId":113,"content":"强烈建议参考一下CabloyJS的架构设计。CabloyJS将所有业务逻辑化整为零，切分为不同的模块，需求变化较小的较通用的作为核心模块，需求变化大的定制化强的作为业务模块。这样就可以兼顾通用+定制的应用场景。此外，通过多域名的机制，天然的支持多租户场景，在可控的同时，给每一个租户更大的定制灵活性。","createdAt":1601604367991},{"id":9910,"originId":"5f706cc8f9736b02ceada8e5","articleId":2140,"userId":147,"content":"劫持或defineProperties","createdAt":1601203400940},{"id":9911,"originId":"5f7085a872af8c02d3f8d9bb","articleId":2140,"userId":109,"content":"重写这个方法呗","createdAt":1601209768476},{"id":9912,"originId":"5f7085cf72af8c02d3f8d9bf","articleId":2140,"userId":109,"content":"或者用proxy加个代理","createdAt":1601209807860},{"id":9913,"originId":"5f76874df9736b02ceadb28e","articleId":2140,"userId":113,"content":"使用ioc & aop","createdAt":1601603405728},{"id":9914,"originId":"5f71626272af8c02d3f8db95","articleId":2141,"userId":268,"content":"你把文件放在business/xxxx.jpg 就可以了，访问的话就是 http://host/business/xxxx.jpg","createdAt":1601266274669},{"id":9915,"originId":"5f7686fff9736b02ceadb289","articleId":2141,"userId":113,"content":"Koa-static源码很少。自己拉一个分支，改即可","createdAt":1601603327847},{"id":9916,"originId":"5f708b96f9736b02ceada915","articleId":2142,"userId":1581,"content":"一个耗时的回调函数返回时，回调内ctx怎么正常返回？","createdAt":1601211286506},{"id":9917,"originId":"5f70900e72af8c02d3f8d9f7","articleId":2142,"userId":1581,"content":"已解决，原因是对koa不熟悉，koa不能在回调函数内使用ctx.body。需要对回调方法包装一下即可！","createdAt":1601212430467},{"id":9918,"originId":"5f71344ff9736b02ceada965","articleId":2142,"userId":3250,"content":"可以把这个balabala方法用promise包一层\r\nlet xxx = await new Promise((resolve)=>{\r\n\tapi('balabala', function(err, cb) =>{\r\n\t\tresolve(xxx)\r\n\t})\r\n})\r\nif (xxx) this.ctx.body = 'success'","createdAt":1601254479651},{"id":9919,"originId":"5f71465af9736b02ceada9c8","articleId":2142,"userId":1581,"content":"[@gzx1996](/user/gzx1996) 昨天已正常运行，就是包装个promise。谢谢回复","createdAt":1601259098432},{"id":9920,"originId":"5f71861ff9736b02ceadab1d","articleId":2142,"userId":358,"content":"util.promisify","createdAt":1601275423840},{"id":9921,"originId":"5f746b8af9736b02ceadb143","articleId":2142,"userId":1581,"content":"[@atian25](/user/atian25) 谢谢大佬指点","createdAt":1601465226327},{"id":9922,"originId":"5f717ad872af8c02d3f8dbda","articleId":2143,"userId":3212,"content":"这个问题实际上应该可以拆成两部部分\r\n1 如何通过浏览器唤醒app并跳转到指定界面。\r\n2 如何重定向到唤醒url。\r\n第一个问题按照特定规则构造url 就可以实现唤醒app。你动手把这个url 填到浏览器地址栏，应该要确保可以唤醒。\r\n第二个问题\r\nctx.redirect(url); 行为应该设置http状体码，并在headers 填写了对应的重定向地址。https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/302\r\n而egg实现时应该对redirect传入参数做了检测，限制了协议。可以试试这个API: ctx.unsafeRedirect(url) 不判断域名，直接跳转，一般不建议使用，明确了解可能带来的风险后使用。\r\n如何实在不行可以返回一个新的界面，在界面里调用浏览器api进行跳转。","createdAt":1601272536863},{"id":9923,"originId":"5f7182d472af8c02d3f8dc06","articleId":2143,"userId":3251,"content":"[@CollapsarLi](/user/CollapsarLi) 我使用unsafeRedirect()后可以跳转了！十分感谢！\r\n","createdAt":1601274580113},{"id":9924,"originId":"5f698a74d22a6b1d622c9d97","articleId":2144,"userId":22,"content":"我建议你先调整一下排版","createdAt":1600752244574},{"id":9925,"originId":"5f69a0f4c1c67a7dd9aff837","articleId":2144,"userId":89,"content":"[@justjavac](/user/justjavac) 这代码是不是有点熟悉，table布局","createdAt":1600758004615},{"id":9926,"originId":"5f69af51c1c67a7dd9aff86b","articleId":2144,"userId":3253,"content":"取决于 url 会不会变，会变（包括 # 后的部分）才能用超链接。","createdAt":1600761681550},{"id":9927,"originId":"5f69ba7dd22a6b1d622c9e5c","articleId":2144,"userId":22,"content":"[@i5ting](/user/i5ting) 看到 `td` 了","createdAt":1600764541446},{"id":9928,"originId":"5f70875372af8c02d3f8d9d2","articleId":2144,"userId":3252,"content":"[@i5ting](/user/i5ting)  大神我是你粉丝，手里有狼书上下哈哈。\r\n","createdAt":1601210195639},{"id":9929,"originId":"5f708795f9736b02ceada905","articleId":2144,"userId":3252,"content":"[@justjavac](/user/justjavac) 谢谢各位","createdAt":1601210261468},{"id":9930,"originId":"5f6feb0bf9736b02ceada6f4","articleId":2145,"userId":1859,"content":"如果是一些行业软件倒有可能，公共的网站或APP之类的可能没这样的要求","createdAt":1601170187235},{"id":9931,"originId":"5f6febc4f9736b02ceada6fb","articleId":2145,"userId":1859,"content":"特别是针对某些行业ERP二开的应用，还是比较常见的","createdAt":1601170372810},{"id":9932,"originId":"54572b276537f4d52c414da4","articleId":2146,"userId":3254,"content":"yes","createdAt":1414998823360},{"id":9933,"originId":"54572bd56537f4d52c414da6","articleId":2146,"userId":892,"content":":-O omg","createdAt":1414998997579},{"id":9934,"originId":"54572cfe6537f4d52c414dab","articleId":2146,"userId":38,"content":"wtf....","createdAt":1414999294126},{"id":9935,"originId":"545730436537f4d52c414db0","articleId":2146,"userId":18,"content":"时刻翻墙表示无压力","createdAt":1415000131940},{"id":9936,"originId":"55ba35ecf36f579657fc5364","articleId":2146,"userId":1178,"content":"社会主义好！","createdAt":1438266860124},{"id":9937,"originId":"55bae5eaf36f579657fc541e","articleId":2146,"userId":692,"content":"嗯哼","createdAt":1438311914980},{"id":9938,"originId":"55fb842aed1da72438e33a8c","articleId":2146,"userId":146,"content":"[@alsotang](/user/alsotang) 用的什么翻墙大法","createdAt":1442546730088},{"id":9939,"originId":"55fb985d20d84f3d3775836f","articleId":2146,"userId":1268,"content":"[@DevinXian](/user/DevinXian) [@alsotang](/user/alsotang) 同问","createdAt":1442551901176},{"id":9940,"originId":"55fd26cf148959375f34fd5f","articleId":2146,"userId":3255,"content":"已经屏蔽很久了。。。用vpn科学上网吧lz","createdAt":1442653903843},{"id":9941,"originId":"5b43843ffb9e84ec69cc193f","articleId":2146,"userId":224,"content":"直接走付费v pn，推荐用[VyprVPN](https://www.goldenfrog.com/zh/vyprvpn?offer_id=174&amp;aff_id=3008)或者[expressVPN](http://www.linkev.com/?a_fid=clover)，省心多了","createdAt":1531151423830},{"id":9942,"originId":"5f6dba5cf9736b02ceada55b","articleId":2146,"userId":3082,"content":"我看这边有用[阿里云测试](https://wall101.com/fanqiang-vpn/)确定能够翻墙的VPN[推荐](https://wall101.com)\r\n我自己参考他们用的[光年](https://wall101.com/fanqiang-vpn/lightyearvpn/), 感觉还不错","createdAt":1601026652819},{"id":9943,"originId":"5f60bea3c1c67a7dd9afeb24","articleId":2147,"userId":545,"content":"企业微信浏览器应该跟微信一样禁用了 cookies ，可以用 jwt 方案~ 如果仅仅是用户识别的话 openid 就行","createdAt":1600175779520},{"id":9944,"originId":"5f61555cc1c67a7dd9afeb5c","articleId":2147,"userId":1618,"content":"[@zuohuadong](/user/zuohuadong) jwt方案也得前端存储，一般也是cookie多点吧。话说回来，微信浏览器是支持cookie的，不过不知道set-cookie怎么写不进去","createdAt":1600214364747},{"id":9945,"originId":"5f6d7251f9736b02ceada403","articleId":2147,"userId":545,"content":"[@vitozyf](/user/vitozyf)  浏览器一般 jwt 用 localstorage 的方案多一些， 另外 APP 是没 cookies  的。","createdAt":1601008209375},{"id":9946,"originId":"5f6afa95d22a6b1d622ca066","articleId":2148,"userId":22,"content":"你是不是用代理了？\r\n\r\n‘Attention Required! | Cloudflare’ 或者，你的网段被限制了？需要输入验证码才能继续访问","createdAt":1600846485383},{"id":9947,"originId":"5f6b04fac1c67a7dd9affaff","articleId":2148,"userId":858,"content":"老哥 谢谢，可以啦应该是网段被限制了，我开手机热点就可以啦","createdAt":1600849146472},{"id":9948,"originId":"5f68651fd22a6b1d622c9b74","articleId":2149,"userId":2193,"content":"我是这样做的.\r\n监控文件变化,然后从父级开始逐级删除缓存,然后再重新加载缓存.\r\n\r\n不知道其他大佬怎么做的,个人只是试了试这样可以在启动服务时,实现热更新,并没有深度研究,这其中是否有什么坑.","createdAt":1600677151769},{"id":9949,"originId":"5f699240d22a6b1d622c9dae","articleId":2149,"userId":21,"content":"其实最麻烦的是引用模块的\\__dirname和\\__filename的实现，还有就是父子孙之间模块引用的关系，所以require里面才有一堆环状引用。\r\n不过这种方法，简单用用来处理引用module的缓存还是不错的。顺便提个意见eval可以用new Function代替，这样作用域污染小些。","createdAt":1600754240665},{"id":9950,"originId":"5f6a9f78d22a6b1d622c9f12","articleId":2149,"userId":107,"content":"type: catch ---> cache","createdAt":1600823160288},{"id":9951,"originId":"5f61baa0d22a6b1d622c92c1","articleId":2150,"userId":135,"content":"对于复杂的语句我也是自己写sql,然后 条件部分 用 sequelize的 `where` 生成语句来拼接\r\n调用如下\r\n`model.QueryGenerator.getWhereConditions(where)`\r\n\r\n`model`是你定义的表实例","createdAt":1600240288539},{"id":9952,"originId":"5f61c05ec1c67a7dd9afed2a","articleId":2150,"userId":733,"content":"[@abiuDoIT](/user/abiuDoIT) 谢谢 我去试试 对这个库还不是太了解 ^ ^","createdAt":1600241758927},{"id":9953,"originId":"5f61c64fc1c67a7dd9afed5e","articleId":2150,"userId":117,"content":"[@KokoTa](/user/KokoTa) 喜欢写原生sql为什么还要用sequelize呢","createdAt":1600243279851},{"id":9954,"originId":"5f61d5c4c1c67a7dd9afedb2","articleId":2150,"userId":261,"content":"可以试试这个：[https://github.com/d-band/sk2](https://github.com/d-band/sk2)，让 sequelize 支持 knex","createdAt":1600247236294},{"id":9955,"originId":"5f62bad2c1c67a7dd9afeecf","articleId":2150,"userId":442,"content":"如果喜欢ts，可以试试typeorm。","createdAt":1600305874821},{"id":9956,"originId":"5f6471b2c1c67a7dd9aff276","articleId":2150,"userId":604,"content":"[@KokoTa](/user/KokoTa) 喜欢写原生sql语句，可以用mysql2","createdAt":1600418226849},{"id":9957,"originId":"5ed7699682b588109b64756a","articleId":2151,"userId":40,"content":"坐标杭州","createdAt":1591175574874},{"id":9958,"originId":"5ed83afd82b588109b64763d","articleId":2151,"userId":3258,"content":"123123213","createdAt":1591229181056},{"id":9959,"originId":"5f5981cdc1c67a7dd9afe06f","articleId":2151,"userId":40,"content":"有小伙伴过来吗？","createdAt":1599701453884},{"id":9960,"originId":"5f598de7d22a6b1d622c86f0","articleId":2151,"userId":2211,"content":"对学历有要求吗？","createdAt":1599704551096},{"id":9961,"originId":"5f59a07ad22a6b1d622c874a","articleId":2151,"userId":40,"content":"[@yspwf](/user/yspwf) 主要看工作经历和技术，简历可以先发一份看看","createdAt":1599709306558},{"id":9962,"originId":"5f59f516c1c67a7dd9afe255","articleId":2151,"userId":89,"content":"貌似这些经验我都有，哈哈哈","createdAt":1599730966547},{"id":9963,"originId":"5f5a4f3ec1c67a7dd9afe2d9","articleId":2151,"userId":514,"content":"还好，对于我们老码农来说，编程已无可编，除了生计之外。可参考我很久以前的nodejs资料学习[nodejs资料](https://github.com/dongguangming/dgm-collection/blob/master/node.js.md)","createdAt":1599754046372},{"id":9964,"originId":"5f5ad6d9d22a6b1d622c88f7","articleId":2151,"userId":40,"content":"[@i5ting](/user/i5ting) 狼叔，放过我，哈哈","createdAt":1599788761079},{"id":9965,"originId":"5f5b112bc1c67a7dd9afe3b7","articleId":2151,"userId":33,"content":"[@i5ting](/user/i5ting) 来份简历 哈哈","createdAt":1599803691609},{"id":9966,"originId":"5f5f4386d22a6b1d622c8e67","articleId":2151,"userId":150,"content":"发了邮件希望回复下哪些地方不匹配，以后冲刺学习下哈，大佬","createdAt":1600078726501},{"id":9967,"originId":"5f62b2adc1c67a7dd9afeea3","articleId":2151,"userId":40,"content":"来份简历","createdAt":1600303789012},{"id":9968,"originId":"5f62c86cc1c67a7dd9afef22","articleId":2151,"userId":856,"content":"[@ZhangDianPeng](/user/ZhangDianPeng) 大佬简历 http://v.freescatv.com/","createdAt":1600309356527},{"id":9969,"originId":"5f62dcedd22a6b1d622c9506","articleId":2151,"userId":150,"content":"[@ZhangDianPeng](/user/ZhangDianPeng) 已发邮件","createdAt":1600314605342},{"id":9970,"originId":"5f608193d22a6b1d622c9097","articleId":2153,"userId":358,"content":"内网应用。。。 不要到社区来问","createdAt":1600160147159},{"id":9971,"originId":"5f6081b8d22a6b1d622c909b","articleId":2153,"userId":358,"content":"如何断点在 Egg 文档里面写的很清楚了吧","createdAt":1600160184522},{"id":9972,"originId":"5f6088bec1c67a7dd9afead3","articleId":2153,"userId":510,"content":"[@atian25](/user/atian25) 好吧 一说内网应用我意识到应该是我require的egg路径有问题。。从test里扒出来的参数就直接用了。。","createdAt":1600161982520},{"id":9973,"originId":"5f608d76d22a6b1d622c90c5","articleId":2153,"userId":510,"content":"[@atian25](/user/atian25) 大佬 又有了另一个问题 为什么this会是undefined    ![image.png](//static.cnodejs.org/FnVCL3yfOU3M8X8gB3rgsUVoMP3C)","createdAt":1600163190104},{"id":9974,"originId":"5f608e98d22a6b1d622c90cf","articleId":2153,"userId":358,"content":"我咋知道。。。 进入断点后就是 Node 的事了。\r\n\r\n你按 Egg 的文档来就好了，不要自己写什么启动脚本。","createdAt":1600163480409},{"id":9975,"originId":"5f616a63c1c67a7dd9afeb79","articleId":2153,"userId":510,"content":"[@atian25](/user/atian25) 大佬 用egg-bin启动按照官网的来也是这样 不过egg-bin启动的egg-cluster是nodemodules里面的  啊 我裂开了  this应该有值才对的呀 还是我理解的有问题\r\n![image.png](//static.cnodejs.org/Fgjfu2d4jbOujCYUiF9CDarOdHre)","createdAt":1600219747711},{"id":9976,"originId":"5f616e4bd22a6b1d622c918a","articleId":2153,"userId":358,"content":"这种自己动下脑或动下手，不就分分钟知道了么。。。\r\n\r\n- 这不就是 js 的一个构造函数么，this  你觉得可能为 undefined 么？\r\n- 如果真的可以是 undefined，那你继续运行下去，问问自己的直觉，下面一行 `this.xx` 会报错么？没想过加一个 console.log 看看么？\r\n- 如果上面的实操结论告诉你不是 undefined，那左边显示 undefined ，那又是为什么呢？自己想一想呗，想不通就去给 VSCode 提 bug。","createdAt":1600220747994},{"id":9977,"originId":"5f617c71d22a6b1d622c91db","articleId":2153,"userId":510,"content":"[@atian25](/user/atian25) 好吧 谢谢大佬 最后那个问题实在是想不通了。。自己写demo试的是没问题的   大佬明示把QAQ\r\n![image.png](//static.cnodejs.org/Fpamg-R9QOFiKwgODHNTLSCzGbe1)![image.png](//static.cnodejs.org/FhDzhzcfJnzn_hab94DmoUxJJnFd)","createdAt":1600224369024},{"id":9978,"originId":"5f617efcc1c67a7dd9afec38","articleId":2153,"userId":358,"content":"意思是 vscode 显示问题，可能是它取值时机有问题。","createdAt":1600225020880},{"id":9979,"originId":"5f61a2a3c1c67a7dd9afecb8","articleId":2153,"userId":510,"content":"[@atian25](/user/atian25) 大佬 我发现好像是extends EventEmitter的问题    但是好像也没啥用？\r\n![image.png](//static.cnodejs.org/Fojx-6U2sg8SCKGBec8-XlZnEhP0)","createdAt":1600234147387},{"id":9980,"originId":"5f5f2fb1d22a6b1d622c8e0a","articleId":2154,"userId":117,"content":"以下是我瞎编，理论上可行的\r\n在线运行的代码如果js的话不需要后台也是可以的\r\n如果运行语言不是js就生成本地文件调用对应的环境的命令行\r\n","createdAt":1600073649325},{"id":9981,"originId":"5f5f344dc1c67a7dd9afe86d","articleId":2154,"userId":1168,"content":"自问自答吧\r\n找到了一个开源的平台（基于docker实现的），调用api即可\r\nhttps://glot.io\r\n大家可以看一下","createdAt":1600074829712},{"id":9982,"originId":"5f5f348fc1c67a7dd9afe872","articleId":2154,"userId":1168,"content":"[@chenkai0520](/user/chenkai0520) 逻辑是这样的，就是多语言的话，需要装好多环境，用docker的话比较方便","createdAt":1600074895760},{"id":9983,"originId":"5f5f3b71d22a6b1d622c8e44","articleId":2154,"userId":541,"content":"参考各个online judge平台（\r\nsuch as \r\nhttps://github.com/QingdaoU/OnlineJudge","createdAt":1600076657532},{"id":9984,"originId":"5f5c2427c1c67a7dd9afe4b8","articleId":2155,"userId":3238,"content":"需要过滤、排序、分组的字段请放在外面，或者留一份冗余，或者放在应用中进行排序\r\n非要这样用的话用 json_extract 和 Sequelize.literal 应该是可以做到","createdAt":1599874087540},{"id":9985,"originId":"5f5c95c5d22a6b1d622c8b58","articleId":2155,"userId":3262,"content":"没记错的话好像是，具体要看看生成的sql\r\n\r\n```javascript\r\nUser.findAll({\r\n  where: {\r\n  },\r\n  include: [\r\n  {\r\n  \tmodel: Task,\r\n\torder: [[\"time\",\"desc\"]]\r\n  }\r\n  ],\r\n  order: []\r\n}).then((items) => {\r\n  console.log(items)\r\n})\r\n```","createdAt":1599903173597},{"id":9986,"originId":"5f48b8da68156574e6e6d902","articleId":2156,"userId":135,"content":"原生 `vm`  看下.","createdAt":1598601434325},{"id":9987,"originId":"5f5b27bad22a6b1d622c89c7","articleId":2156,"userId":1859,"content":"[@abiuDoIT](/user/abiuDoIT) 谢谢~~~","createdAt":1599809466892},{"id":9988,"originId":"5f5b3725d22a6b1d622c89fb","articleId":2156,"userId":358,"content":"npx\r\n\r\nhttps://www.ruanyifeng.com/blog/2019/02/npx.html","createdAt":1599813413936},{"id":9989,"originId":"5f5b3d25d22a6b1d622c8a0e","articleId":2156,"userId":108,"content":"动态执行远端的代码嘛，你要干嘛\r\n\r\n![image.png](//static.cnodejs.org/FmUp2VrJCJAUop33ztXQ9GBunVq3)\r\n![image.png](//static.cnodejs.org/Fi__62riHlFwZu2j_hrOEk-Y_Oqe)","createdAt":1599814949965},{"id":9990,"originId":"5f5c46f1d22a6b1d622c8aec","articleId":2156,"userId":1859,"content":"[@axetroy](/user/axetroy) 自己人自己人~~~~只是在实现一些想法而已","createdAt":1599882993110},{"id":9991,"originId":"5f5c4705d22a6b1d622c8af0","articleId":2156,"userId":1859,"content":"[@axetroy](/user/axetroy) 谢谢，稍后来看下","createdAt":1599883013781},{"id":9992,"originId":"5f589511d22a6b1d622c858a","articleId":2158,"userId":3264,"content":"我是使用npm run dist发现和yarn run build里面的差不多，但是都无法找到我自己写的js模块","createdAt":1599640849677},{"id":9993,"originId":"5f589a69c1c67a7dd9afdf71","articleId":2158,"userId":22,"content":"原谅我理解力太差，确实没看懂","createdAt":1599642217829},{"id":9994,"originId":"5f589c25c1c67a7dd9afdf7f","articleId":2158,"userId":3264,"content":"[@justjavac](/user/justjavac) 打包成exe之后，因为我用绝对路径引用app文件夹里面的js模块，结果运行exe的时候报错了\r\n![批注 2020-09-09 170924.png](//static.cnodejs.org/FnCljd8Ok7weV0eC89IkPbAckAGW)![批注 2020-09-09 171042.png](//static.cnodejs.org/FtacbTH3PfXo8ldVzrC0zITRPOm_)","createdAt":1599642661697},{"id":9995,"originId":"5f589dd9c1c67a7dd9afdf88","articleId":2158,"userId":3264,"content":"[@Wy2926](/user/Wy2926) 说错了，相对路径","createdAt":1599643097256},{"id":9996,"originId":"5f589f8fc1c67a7dd9afdf8f","articleId":2158,"userId":358,"content":"[@justjavac](/user/justjavac) 我看懂了，但感觉按题主提问来看不少背景知识要补充，要解释起来太麻烦了，就放弃回答了。","createdAt":1599643535300},{"id":9997,"originId":"5f58a3a7c1c67a7dd9afdfa5","articleId":2158,"userId":3264,"content":"[@atian25](/user/atian25) 啊，刚接触nodejs。。。","createdAt":1599644583968},{"id":9998,"originId":"5f59a4fcd22a6b1d622c8752","articleId":2158,"userId":22,"content":"[@Wy2926](/user/Wy2926) 刚接触还是写点简单的项目吧","createdAt":1599710460812},{"id":9999,"originId":"5f5af267c1c67a7dd9afe375","articleId":2158,"userId":3264,"content":"[@justjavac](/user/justjavac) 这个项目没多少代码，就是需要打包成可执行程序，一个单机软件，那个websocket是服务端代码，没有一起打包，我将他放到打包的build目录下，可以执行，但是安装程序还是找不到，怎么办。。。。","createdAt":1599795815842},{"id":10000,"originId":"5f5af2e9d22a6b1d622c8958","articleId":2158,"userId":3264,"content":"[@justjavac](/user/justjavac) 用的electron-builder打包程序，通过手动把模块移到打包的app文件夹下的build目录则可以执行，但是无法运行electron-builder生成的安装程序，还是提示找不到模块","createdAt":1599795945014},{"id":10001,"originId":"5d8584da53c75a4136b4c3ec","articleId":2159,"userId":545,"content":"单点登录设计  auth2.0\r\n加上  路由控制 casbin ","createdAt":1569031386510},{"id":10002,"originId":"5d89a7f74f109e79ef5ff21f","articleId":2159,"userId":716,"content":"不知这个是否你需要的：https://github.com/Authing/authing","createdAt":1569302519863},{"id":10003,"originId":"5d89d08a4f109e79ef5ff31a","articleId":2159,"userId":523,"content":"微前端的portal是否可以做这个","createdAt":1569312906894},{"id":10004,"originId":"5d8ad0ade86cfb0d2a64591d","articleId":2159,"userId":1516,"content":"在代理服务器端做判断，这是通用方案。","createdAt":1569378477985},{"id":10005,"originId":"5d8ad653e86cfb0d2a645946","articleId":2159,"userId":36,"content":"分别对接了sso，每个spa页面对接的sso是一样的？如果一样的话，不就是单点登录嘛","createdAt":1569379923368},{"id":10006,"originId":"5f5ad4e4d22a6b1d622c88ed","articleId":2159,"userId":417,"content":"试试：https://casbin.org/  支持各种语言：Go, Java, Node.js, PHP, Python等等，以及前端React","createdAt":1599788260467},{"id":10007,"originId":"5f586236c1c67a7dd9afde38","articleId":2160,"userId":147,"content":"为啥进程不行？","createdAt":1599627830892},{"id":10008,"originId":"5f586f46c1c67a7dd9afde5e","articleId":2160,"userId":541,"content":"golang核心库带强制收回时间片的，还能抢任务，nodejs的模型会水土不服吧","createdAt":1599631174454},{"id":10009,"originId":"5f5879ecc1c67a7dd9afdea8","articleId":2160,"userId":358,"content":"这些都是语言层面的了，现在云背景下，可以考虑 函数计算 的方式，按需调用，用完即抛，干净，不用收拾手尾。","createdAt":1599633900434},{"id":10010,"originId":"5f58936ed22a6b1d622c8577","articleId":2160,"userId":21,"content":"node.js的多线程加异步是可以充分利用cpu。\r\n但golang如2楼所说比较类似于自动档。node.js是手动档，原生的话只算不方便的手动档，[ncpu](https://github.com/zy445566/ncpu)则算是方便的手动档了。\r\n自动挡内部复杂使用方便，但是有哪个赛车手是喜欢开自动挡的呢？","createdAt":1599640430295},{"id":10011,"originId":"5f598955c1c67a7dd9afe0b9","articleId":2160,"userId":33,"content":"[@atian25](/user/atian25) 擦，我买还不行吗，阿里nodejs大旗靠你们了","createdAt":1599703381999},{"id":10012,"originId":"5f59898ed22a6b1d622c869e","articleId":2160,"userId":33,"content":"[@theanarkh](/user/theanarkh) 进程通信没线程方便啊，而且更重一些","createdAt":1599703438326},{"id":10013,"originId":"5f5989b6d22a6b1d622c86a4","articleId":2160,"userId":33,"content":"[@zy445566](/user/zy445566) 然而新手喜欢自动挡啊，","createdAt":1599703478874},{"id":10014,"originId":"5f5989c6d22a6b1d622c86aa","articleId":2160,"userId":33,"content":"[@AnzerWall](/user/AnzerWall) 我想说的就是实现他这个机制","createdAt":1599703494861},{"id":10015,"originId":"5f598a25c1c67a7dd9afe0d5","articleId":2160,"userId":358,"content":"函数计算跟 node 没啥必然关系。","createdAt":1599703589174},{"id":10016,"originId":"5f598a94c1c67a7dd9afe0e1","articleId":2160,"userId":33,"content":"[@atian25](/user/atian25) 现在不是都node实现的吗？","createdAt":1599703700408},{"id":10017,"originId":"5f598bb0c1c67a7dd9afe0f4","articleId":2160,"userId":358,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 你把函数计算理解为一个 docker 实例调度器，你在里面写什么代码都随便你。\r\n\r\n它提供的是轻量的部署能力和极度的伸缩性，你有几个请求，它就启动几个实例来帮你执行，执行完毕后自动销毁，不占用资源。\r\n\r\n你也可以简单理解为一个云进程池。","createdAt":1599703984639},{"id":10018,"originId":"5f598c26c1c67a7dd9afe0f8","articleId":2160,"userId":33,"content":"[@atian25](/user/atian25) 好吧，，改天买个最便宜的试试。。。。。","createdAt":1599704102983},{"id":10019,"originId":"5f598cacc1c67a7dd9afe0ff","articleId":2160,"userId":358,"content":"![image.png](//static.cnodejs.org/Fgu3GOml7YNgj7vRP-1FXVM2sSr4)\r\n\r\nhttps://help.aliyun.com/document_detail/54301.html?spm=a2c4g.11174283.6.545.20685212ZMpLog\r\n\r\n免费的配额足够用了","createdAt":1599704236949},{"id":10020,"originId":"5f598eb3d22a6b1d622c86f7","articleId":2160,"userId":33,"content":"[@atian25](/user/atian25) ok！ 必须支持一波！但是不得不说一句你们阿里的视频点播没有腾讯的好用啊。。sdk竟然没有nodejs的。。。。差评。。。。","createdAt":1599704755358},{"id":10021,"originId":"5f598f8cc1c67a7dd9afe11f","articleId":2160,"userId":358,"content":"雨我无瓜","createdAt":1599704972508},{"id":10022,"originId":"5f598fc7d22a6b1d622c8705","articleId":2160,"userId":358,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 这个应该 [@JacksonTian](/user/JacksonTian) 朴灵老师","createdAt":1599705031466},{"id":10023,"originId":"5f4f657fe8a599751bb51d96","articleId":2161,"userId":21,"content":"机会来了，自己封装下babel造一个","createdAt":1599038847057},{"id":10024,"originId":"5f4f6841d22a6b1d622c7761","articleId":2161,"userId":1079,"content":"[@zy445566](/user/zy445566) 不会 babel 吧，不会 ts 吧，不会处理边界问题吧......不是我的机会。","createdAt":1599039553762},{"id":10025,"originId":"5f51a26831fc7a1d8ad65d34","articleId":2161,"userId":541,"content":"你开个ts项目，然后写ts，但所有ts语法都不写，开any，只用装饰器不就好了（过段时间你就变成ts的形状了","createdAt":1599185512921},{"id":10026,"originId":"5f51b762d22a6b1d622c7b05","articleId":2161,"userId":1079,"content":"[@AnzerWall](/user/AnzerWall) https://www.zhihu.com/question/308844713/answer/594169638","createdAt":1599190882799},{"id":10027,"originId":"5f5203d9d22a6b1d622c7c1c","articleId":2161,"userId":541,"content":"[@jaylin1011](/user/jaylin1011) 你想说明什么？","createdAt":1599210457861},{"id":10028,"originId":"5f531c13d22a6b1d622c7d3c","articleId":2161,"userId":1079,"content":"**此问题已解决**，*谢谢大佬们的回答*。","createdAt":1599282195256},{"id":10029,"originId":"5f56ee44c1c67a7dd9afdb3b","articleId":2161,"userId":191,"content":"vue3正式发布了吗","createdAt":1599532612077},{"id":10030,"originId":"5f574159d22a6b1d622c8304","articleId":2161,"userId":1079,"content":"[@xuemeifenglin](/user/xuemeifenglin) 据我了解尚未正式发布。","createdAt":1599553881604},{"id":10031,"originId":"5df994cb0696c446bf64ee87","articleId":2162,"userId":99,"content":"关注下这个教程  https://cnodejs.org/topic/5d9be327ece3813ad9ba04cc","createdAt":1576637643662},{"id":10032,"originId":"5df9b691ba8f6d46c4eddf85","articleId":2162,"userId":545,"content":"nestcloud 可以看看。\r\n少于20人项目不建议。\r\n","createdAt":1576646289090},{"id":10033,"originId":"5df9db280696c446bf64efe0","articleId":2162,"userId":688,"content":"[@zuohuadong](/user/zuohuadong) 其实从这点上也感到了egg的无奈，毕竟阿里以java为主，内部应该很难孵化出类似于nestcloud这样的项目（毕竟已经有spring cloud 的成熟方案）","createdAt":1576655656904},{"id":10034,"originId":"5dfc6c37ba8f6d46c4ede598","articleId":2162,"userId":545,"content":"[@wujohns](/user/wujohns)  阿里现在也有类似 nest 的 midwayjs ，大面积换的可能性肯定不大~","createdAt":1576823863430},{"id":10035,"originId":"5e01771c0696c446bf64fc94","articleId":2162,"userId":100,"content":"微服务目前用的多吗","createdAt":1577154332603},{"id":10036,"originId":"5e0187380696c446bf64fcee","articleId":2162,"userId":688,"content":"[@youmenglinzi](/user/youmenglinzi) 看业务规模吧，规模小或只是中等程度的话，单应用模式就可以覆盖了，如果是规模较大需要较多的研发参与推进，再考虑引入微服务模式。","createdAt":1577158456757},{"id":10037,"originId":"5e083fe7ba8f6d46c4edfb22","articleId":2162,"userId":100,"content":"[@wujohns](/user/wujohns) 中小公司一般用不到吧","createdAt":1577598951743},{"id":10038,"originId":"5e098bfc0696c446bf650c0f","articleId":2162,"userId":688,"content":"[@youmenglinzi](/user/youmenglinzi) 团队规模4~5人，单应用模式即可覆盖的话就没必要上微服务模式了，放在单个应用中治理即可。但出于对应用本身的层级划分与依赖管理建议使用nestjs（egg由于非要自带一套类似pm2的机制在调试上会繁琐很多，且每次调试的启动会慢很多，现在个人开坑不再考虑使用egg了）\r\n微服务有微服务的目标对象，其目标对象是为了解决在业务快速扩张，研发人员数量激增时在单体应用中遇到的问题，并给研发人员间工作安排上提供解耦的治理方案，便于项目管理与推进。","createdAt":1577683964926},{"id":10039,"originId":"5e0aa6c3ba8f6d46c4edff76","articleId":2162,"userId":99,"content":"[@wujohns](/user/wujohns) 哥  nestjs结合pm2有没有文档 或者教程","createdAt":1577756355583},{"id":10040,"originId":"5e0ab7c60696c446bf650ee0","articleId":2162,"userId":688,"content":"[@phonegap100](/user/phonegap100) 可以单独学下pm2（就用单个简单的httpserver js 文件实验），然后nestjs配合pm2怎么用就自然知道了\r\n","createdAt":1577760710329},{"id":10041,"originId":"5eb9f3eb2d0afc4087f545c3","articleId":2162,"userId":191,"content":"谢谢各位大神","createdAt":1589244907728},{"id":10042,"originId":"5eba4f16e785ec40b04fbbcf","articleId":2162,"userId":158,"content":"java用的很好, nestjs上位难哈哈哈, 而且jser技能树太容易点歪了","createdAt":1589268246487},{"id":10043,"originId":"5eba76cf2d0afc4087f549d3","articleId":2162,"userId":99,"content":"[@zhhb](/user/zhhb) 说的对啊","createdAt":1589278415947},{"id":10044,"originId":"5ebb9974e785ec40b04fc18d","articleId":2162,"userId":688,"content":"团队小的话可以考虑上serverless技术栈，可以享受类似微服务的便利，但是投入较少的运维人力资源","createdAt":1589352820622},{"id":10045,"originId":"5ebe48432d0afc4087f55e08","articleId":2162,"userId":191,"content":"[@wujohns](/user/wujohns) serverless教程有没有推荐一个","createdAt":1589528643441},{"id":10046,"originId":"5ec494f267c8a45803da0ac8","articleId":2162,"userId":190,"content":"[@xuemeifenglin](/user/xuemeifenglin) 这个新出的吧","createdAt":1589941490772},{"id":10047,"originId":"5ecf5e60b703280f0bcb727e","articleId":2162,"userId":688,"content":"[@xuemeifenglin](/user/xuemeifenglin) 知乎专栏上有很多","createdAt":1590648416965},{"id":10048,"originId":"5ef95b0513f8b244e57cbfb2","articleId":2162,"userId":99,"content":"[@xuemeifenglin](/user/xuemeifenglin) 微服务落地的不多","createdAt":1593400069286},{"id":10049,"originId":"5ef9673713f8b244e57cc017","articleId":2162,"userId":1071,"content":"身为鹅厂人，自然要推[Tars](https://github.com/TarsCloud)","createdAt":1593403191191},{"id":10050,"originId":"5efafc69472c7975b04b83e1","articleId":2162,"userId":711,"content":"[@zhhb](/user/zhhb) 怎么才算点歪?","createdAt":1593506921959},{"id":10051,"originId":"5f45cc5368156574e6e6d3c0","articleId":2162,"userId":191,"content":"[@zhhb](/user/zhhb) 学java的也来学nodejs了  赞","createdAt":1598409811513},{"id":10052,"originId":"5f4cb754e8a599751bb519d7","articleId":2162,"userId":158,"content":"[@xuemeifenglin](/user/xuemeifenglin) 不, 我是前端, 只不过会java而已, 很多java是真的的菜(基数大, 优秀的数量虽多, 但比例小了), 现在前端也差不多(已经是)这样了","createdAt":1598863188670},{"id":10053,"originId":"5f4cbe1e68156574e6e6dc54","articleId":2162,"userId":57,"content":"serverless可以看github上serverless官方repo","createdAt":1598864926698},{"id":10054,"originId":"5f4cbe56e8a599751bb51a0b","articleId":2162,"userId":57,"content":"用nest的话，之前有搭配angular，还是要学java去了。Java在服务端实在稳如老狗，惹不起（手动狗头）","createdAt":1598864982686},{"id":10055,"originId":"5f56edaad22a6b1d622c81b1","articleId":2162,"userId":191,"content":"[@zhhb](/user/zhhb) 学习了","createdAt":1599532458128},{"id":10056,"originId":"5f56df8fc1c67a7dd9afdafd","articleId":2163,"userId":22,"content":"- [Promise - MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\r\n- [使用 Promise - MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises)\r\n- [JavaScript Promises: An introduction](https://web.dev/promises/) （英）","createdAt":1599528847333},{"id":10057,"originId":"5f37f89dd8c8971d82088a88","articleId":2164,"userId":38,"content":"检查一下文件编码把，nodejs 默认只支持 UTF8","createdAt":1597503645341},{"id":10058,"originId":"5f41c48868156574e6e6cf85","articleId":2164,"userId":3267,"content":"[@lellansin](/user/lellansin) 应该不是文件编码的问题，因为其中还有文件夹。文件夹名称为中文也是会乱码的","createdAt":1598145672615},{"id":10059,"originId":"5f41fe6568156574e6e6cfde","articleId":2164,"userId":3238,"content":"[@rezym](/user/rezym) \r\n用这个吧，https://github.com/patrickjuchli/basic-ftp\r\nnode-ftp没有做编码转换和设置\r\n\r\n","createdAt":1598160485134},{"id":10060,"originId":"5f55f35ac1c67a7dd9afd98d","articleId":2164,"userId":3267,"content":"[@Shonke](/user/Shonke) 好的。谢谢哈","createdAt":1599468378714},{"id":10061,"originId":"5e0c5680f628e05aa2172d03","articleId":2165,"userId":89,"content":"试试 https://github.com/ykfe/egg-react-ssr 这个。4核8g单机150以上","createdAt":1577866880446},{"id":10062,"originId":"5e0c7b4af628e05aa2172d32","articleId":2165,"userId":545,"content":"是这样的，一般用 nuxt  ssr 只是给搜索引擎用。\r\n用户通过DNS 解析到 CDN 节点，nuxt SPA。\r\n爬虫通过DNS解析到渲染服务器，nuxt SSR","createdAt":1577876298764},{"id":10063,"originId":"5e0c7bc201c0915a9d9bd6d7","articleId":2165,"userId":3268,"content":"[@i5ting](/user/i5ting) 谢谢狼叔回复，目前的疑问是，nuxt 是否真的如我测试的性能这么差？还是我测试有误？如果确定后，再转其他方案","createdAt":1577876418860},{"id":10064,"originId":"5e0c7bf801c0915a9d9bd6dc","articleId":2165,"userId":3268,"content":"[@zuohuadong](/user/zuohuadong) 谢谢回复，所以 nuxt 真的如我测试的性能这么差吗？那如果这样，纯的 nuxt 应用是否很难应用于并发量高的场景，都需要做两套方案吗（爬虫 ssr，普通用户 spa）？","createdAt":1577876472195},{"id":10065,"originId":"5e0c7e8d01c0915a9d9bd6e8","articleId":2165,"userId":89,"content":"[@hanzichi](/user/hanzichi) \r\n\r\n1）比例问题，控制好首屏模块个数，其实还好。\r\n2）对api做cache。对返回的结果进行精简，最小化，保证吐出到浏览器的内容足够小。\r\n\r\n其他能优化的不多了。","createdAt":1577877133424},{"id":10066,"originId":"5e0c7ebff628e05aa2172d46","articleId":2165,"userId":89,"content":"[@hanzichi](/user/hanzichi) \r\n\r\n2018年见过vue ssr，很少突破50 qps的。今年没关注。","createdAt":1577877183326},{"id":10067,"originId":"5e0c9191f628e05aa2172d5b","articleId":2165,"userId":3268,"content":"[@i5ting](/user/i5ting) 目前测试的是 nuxt 的 helloworld 代码，本地测试结果吞吐量比 next 差好多倍，是否能说明 vue ssr 确实不太行？","createdAt":1577882001228},{"id":10068,"originId":"5e0d3debf628e05aa2172de0","articleId":2165,"userId":545,"content":"[@hanzichi](/user/hanzichi)  ssr 渲染也比较局限。某些组件不支持。\r\nnuxt 减少了首屏页面的大小，通过 云存储和 CDN  实际算下来要比 ssr 快不少。","createdAt":1577926123730},{"id":10069,"originId":"5e0d45b5f628e05aa2172dfc","articleId":2165,"userId":3268,"content":"[@zuohuadong](/user/zuohuadong) >通过 云存储和 CDN  实际算下来要比 ssr 快不少 说的是 spa 实际比 ssr 快不少的意思吗？","createdAt":1577928117451},{"id":10070,"originId":"5e0d6329f628e05aa2172e87","articleId":2165,"userId":1580,"content":"我觉得可以参考一下，总的来说react的生态圈总是比vue繁荣一些，虽然我用的是vue...\r\nhttps://segmentfault.com/a/1190000019067086?utm_source=tuicool&utm_medium=referral","createdAt":1577935657317},{"id":10071,"originId":"5e0d79d0f628e05aa2172ed1","articleId":2165,"userId":22,"content":"去年用过 nuxt 现在已经基本弃坑了，性能太差","createdAt":1577941456402},{"id":10072,"originId":"5e0d8c1301c0915a9d9bd8c7","articleId":2165,"userId":192,"content":"[@hanzichi](/user/hanzichi) 没看过nuxt源码，不过之前试了一下直接用vue提供的api来做ssr性能还可以，建议你可以自己用最简单方式直接用vue的api来做ssr压测一下。官方的benchmark的数据vuessr的性能是比react好一丢丢的","createdAt":1577946131223},{"id":10073,"originId":"5e0d958101c0915a9d9bd8ff","articleId":2165,"userId":545,"content":"[@hanzichi](/user/hanzichi)  不是~  SPA 首屏渲染还是要比 SSR 的慢。\r\n只是综合下来，网络、缓存。","createdAt":1577948545317},{"id":10074,"originId":"5e0da2faf628e05aa2172f93","articleId":2165,"userId":59,"content":" nuxt 慢好久了","createdAt":1577951994263},{"id":10075,"originId":"5e0dd50b01c0915a9d9bda48","articleId":2165,"userId":3269,"content":"用pm2起过多个端口给nuxt，并发高的时候有端口直接被kill","createdAt":1577964811650},{"id":10076,"originId":"5e0dd602f628e05aa2173083","articleId":2165,"userId":3269,"content":"即使用了组件缓存，优化效果也并不理想","createdAt":1577965058661},{"id":10077,"originId":"5e0df31e01c0915a9d9bda95","articleId":2165,"userId":1375,"content":"目前正在用nuxt，4c4g 单机 200TPS，跟原来的 java web 持平，没跟 next 对比过 ~ 生态确实不理想，加上会报一些迷之bug","createdAt":1577972510883},{"id":10078,"originId":"5e0e028f01c0915a9d9bdaa6","articleId":2165,"userId":89,"content":"[@mosaic101](/user/mosaic101) tps是每秒事务个数吧?\r\n\r\n发一下监控截图看看。如果是200qps还是很不错的。","createdAt":1577976463152},{"id":10079,"originId":"5e0ea0004bea432607fcca88","articleId":2165,"userId":3268,"content":"[@i5ting](/user/i5ting) 200qps 就算不错了嘛？我加了页面缓存，然后qps勉强 300 多。。。正常嘛？","createdAt":1578016768173},{"id":10080,"originId":"5e0ed45a81adfe2602079b2f","articleId":2165,"userId":1375,"content":"[@i5ting](/user/i5ting) 只有一个 request，压得一个首屏页面（SEO+首屏数据）~  截图没了，下次再压一次看看","createdAt":1578030170747},{"id":10081,"originId":"5e112be381adfe2602079da9","articleId":2165,"userId":110,"content":"[@hanzichi](/user/hanzichi) 建议你跑一个 [nuxt-hackernews](https://github.com/nuxt/hackernews) 试试，这个是官方极致优化过的，看看能快点不\r\n另外注意下是跑在dev模式下还是production模式下？要用 `npm run build && npm run start` 来测试而不是 `npm run dev`","createdAt":1578183651085},{"id":10082,"originId":"5e11f2a14bea432607fccee7","articleId":2165,"userId":110,"content":"我在本机用两个框架跑helloworld实测数据给你参考下：\r\n**nuxt:**\r\n```\r\nServer Software:\r\nServer Hostname:        127.0.0.1\r\nServer Port:            3000\r\n\r\nDocument Path:          /\r\nDocument Length:        1395 bytes\r\n\r\nConcurrency Level:      200\r\nTime taken for tests:   7.438 seconds\r\nComplete requests:      3000\r\nFailed requests:        0\r\nTotal transferred:      4851000 bytes\r\nHTML transferred:       4185000 bytes\r\nRequests per second:    403.32 [#/sec] (mean)\r\nTime per request:       495.885 [ms] (mean)\r\nTime per request:       2.479 [ms] (mean, across all concurrent requests)\r\nTransfer rate:          636.88 [Kbytes/sec] received\r\n\r\nConnection Times (ms)\r\n              min  mean[+/-sd] median   max\r\nConnect:        0    0   0.3      0       1\r\nProcessing:    94  477  70.1    470     697\r\nWaiting:       43  442  66.9    441     609\r\nTotal:         94  477  70.1    470     697\r\n```\r\n**next:**\r\n```\r\nServer Software:\r\nServer Hostname:        127.0.0.1\r\nServer Port:            3000\r\n\r\nDocument Path:          /\r\nDocument Length:        1383 bytes\r\n\r\nConcurrency Level:      200\r\nTime taken for tests:   4.105 seconds\r\nComplete requests:      3000\r\nFailed requests:        0\r\nTotal transferred:      4947000 bytes\r\nHTML transferred:       4149000 bytes\r\nRequests per second:    730.73 [#/sec] (mean)\r\nTime per request:       273.699 [ms] (mean)\r\nTime per request:       1.368 [ms] (mean, across all concurrent requests)\r\nTransfer rate:          1176.73 [Kbytes/sec] received\r\n\r\nConnection Times (ms)\r\n              min  mean[+/-sd] median   max\r\nConnect:        0    0   0.3      0       1\r\nProcessing:    65  266  32.2    264     385\r\nWaiting:        7  249  31.8    245     373\r\nTotal:         66  266  32.2    265     385\r\n\r\nPercentage of the requests served within a certain time (ms)\r\n  50%    265\r\n  66%    271\r\n  75%    277\r\n  80%    288\r\n  90%    310\r\n  95%    322\r\n  98%    343\r\n  99%    363\r\n 100%    385 (longest request)\r\n```","createdAt":1578234529406},{"id":10083,"originId":"5e1325004bea432607fcd20e","articleId":2165,"userId":3268,"content":"[@andyhu](/user/andyhu) \r\n\r\n谢谢，确实我本地没有用 production\r\n但是我有个应用，开了 production，吞吐量 50，再开 cache 也才 300，会是什么原因呢？\r\n我看哪个 nuxt-hackernews 好像并没有使用缓存，它的核心优化点是什么呢？","createdAt":1578312960678},{"id":10084,"originId":"5e1354404bea432607fcd250","articleId":2165,"userId":110,"content":"[@hanzichi](/user/hanzichi) 有很多优化，比如 component cache，这个是一个很有优势的缓存，另外还有 pwa，以及还有一些优化是图片懒加载，还有链接预读取。这些都是优化的地方。但是我其实也不是特别懂。我主要是没遇到过严重的性能问题，Nuxt 肯定是要比 Next 慢一点，严重情况下可能会慢一倍，但也不至于特别离谱。Vue 3 出来以后应该会有所改观","createdAt":1578325056099},{"id":10085,"originId":"5e13e5aa4bea432607fcd2c7","articleId":2165,"userId":1460,"content":"[@zuohuadong](/user/zuohuadong) 老哥，这样的操作有什么相关资料吗？","createdAt":1578362282724},{"id":10086,"originId":"5e13e5c84bea432607fcd2cc","articleId":2165,"userId":3268,"content":"[@andyhu](/user/andyhu) 谢谢你的回复给我打开了新的思路，感谢\r\n\r\n不过图片懒加载应该不会影响吞吐量数据吧，另外 nuxt-hackernews 也没用 component cache，得好好研究下它优化了啥提升了性能，兄弟有什么思路吗","createdAt":1578362312090},{"id":10087,"originId":"5e13e6624bea432607fcd2d1","articleId":2165,"userId":3269,"content":"[@andyhu](/user/andyhu) `另外还有 pwa，以及还有一些优化是图片懒加载，还有链接预读取` 这些如果不是用浏览器来测试，而是用工具测对结果应该没什么影响吧","createdAt":1578362466116},{"id":10088,"originId":"5e13eb1a81adfe260207a228","articleId":2165,"userId":3268,"content":"[@andyhu](/user/andyhu) 我测试了下 nuxt-hackernews，你测的应该是首页，它会重定向到 /news，我猜测可能就是个重定向，页面源码只是个 redirect，所以比较快？我 curl  / 拿不到任何数据\r\n\r\n我试了其他页面，比如直接压  /news，Requests per second 这项都不会超过 100","createdAt":1578363674923},{"id":10089,"originId":"5e14026581adfe260207a302","articleId":2165,"userId":3268,"content":"[@AcerFeng](/user/AcerFeng) 组件缓存，为啥不直接上页面缓存呢？","createdAt":1578369637813},{"id":10090,"originId":"5e14282981adfe260207a3a0","articleId":2165,"userId":3268,"content":"[@i5ting](/user/i5ting) 对于狼叔提的两个优化点，想再跟进请教下\r\n\r\n控制好首屏模块个数，对返回的结果进行精简，保证吐出到浏览器的内容足够小，这意思是不是首屏内容做 ssr 服务端渲染，非首屏内容走浏览器请求客户端渲染？如果是这样的话，对于 seo 的需求如何满足呢？","createdAt":1578379305178},{"id":10091,"originId":"5e143d5a4bea432607fcd4b6","articleId":2165,"userId":89,"content":"[@hanzichi](/user/hanzichi) 核心内容是啥，比如视频，核心肯定是视频信息，如果必要把播放相关的信息聚合进来。保证rt在20到50ms以内。那么你的首屏是足够满足seo和性能的。如果不能可能你ui设计有问题，核心内容不在首屏","createdAt":1578384730331},{"id":10092,"originId":"5e1445464bea432607fcd4d4","articleId":2165,"userId":3269,"content":"[@hanzichi](/user/hanzichi) 页面有些数据是动态获取要更新的","createdAt":1578386758711},{"id":10093,"originId":"5e144ada81adfe260207a426","articleId":2165,"userId":3268,"content":"[@i5ting](/user/i5ting) 弱弱问下rt是啥意思？","createdAt":1578388186042},{"id":10094,"originId":"5e144b034bea432607fcd4ea","articleId":2165,"userId":3268,"content":"[@AcerFeng](/user/AcerFeng) 是指这些数据需要实时的吗，每秒看到的都要不一样？还是说缓存几秒钟几分钟没啥意义？","createdAt":1578388227881},{"id":10095,"originId":"5e1468e54bea432607fcd54b","articleId":2165,"userId":89,"content":"[@hanzichi](/user/hanzichi) 响应时长","createdAt":1578395877244},{"id":10096,"originId":"5e1559614bea432607fcd679","articleId":2165,"userId":545,"content":"[@ontheroad1992](/user/ontheroad1992)  \r\n我之前发过一次：https://cnodejs.org/topic/5badd93037a6965f59051d40\r\n","createdAt":1578457441964},{"id":10097,"originId":"5e1584e44bea432607fcd76a","articleId":2165,"userId":3269,"content":"[@hanzichi](/user/hanzichi) 类似资讯平台门户网站的数据","createdAt":1578468580496},{"id":10098,"originId":"5e15bcb181adfe260207a7ad","articleId":2165,"userId":1460,"content":"[@zuohuadong](/user/zuohuadong) 谢谢大佬","createdAt":1578482865951},{"id":10099,"originId":"5e5e11f7b5a36940fe1cea28","articleId":2165,"userId":3270,"content":"[@zuohuadong](/user/zuohuadong) 你这样和prerenderio那种有什么区别呢？","createdAt":1583223287187},{"id":10100,"originId":"5f2bd00f4b61050e36e7e481","articleId":2165,"userId":3271,"content":"[@andyhu](/user/andyhu) 假如我使用了koa-router-cache 是不是 component cache就没什么用了？","createdAt":1596706831320},{"id":10101,"originId":"5f3386842799ce64a0aabd96","articleId":2165,"userId":110,"content":"[@lww555](/user/lww555) 我个人认为不是一个层级的cache，应该作用不一样，建议你自己可以测试下看看","createdAt":1597212292468},{"id":10102,"originId":"5f3389c52799ce64a0aabd9d","articleId":2165,"userId":358,"content":"其实，为啥你不直接接入 alinode 等 APM 软件，分析下压测时的瓶颈和热点在哪里，然后针对性优化就行了，没必要乱猜是哪里的问题。","createdAt":1597213125850},{"id":10103,"originId":"5f34edd4d8c8971d820886c1","articleId":2165,"userId":3234,"content":"这玩意,写静态页面还是比较舒服的,","createdAt":1597304276073},{"id":10104,"originId":"5f5597d7c1c67a7dd9afd866","articleId":2165,"userId":3271,"content":"[@andyhu](/user/andyhu) 使用了一下确实有效果。但是还是理解不了，假如页面缓存和组件缓存设置时间相同，\r\n1.第一访问，走代码，同时页面和组件同时缓存\r\n2.第二次访问走页面缓存。\r\n缓存时间过了，重复1，这组件缓存不就是没生效","createdAt":1599444951210},{"id":10105,"originId":"5f55d8a1d22a6b1d622c7fa1","articleId":2165,"userId":11,"content":"看下 CPU 火焰图叫知道了，MVVM 框架的 SSR 函数调用链太深了以至于一分钟的 CPU Profiler 能到几百M（正常抓五分钟也就几兆到几十兆），性能比模板字符串差 100 倍以上，如果是对 QPS 有要求的页面还是得用模板字符串做","createdAt":1599461537071},{"id":10106,"originId":"5f55a864d22a6b1d622c7f06","articleId":2166,"userId":268,"content":"试试\r\n```js\r\npm2 start npm run server --name server1\r\n\r\npm2 start npm run server --name server2\r\n```","createdAt":1599449188637},{"id":10107,"originId":"5f55d65ec1c67a7dd9afd921","articleId":2166,"userId":249,"content":"[@jiangli373](/user/jiangli373) 嗯呐，我刚准备自问自答的，谢谢，是这个name参数指定自定义名字","createdAt":1599460958607},{"id":10108,"originId":"5f5335c5d22a6b1d622c7d5c","articleId":2167,"userId":703,"content":"简单说，不能。\r\n不过你可以模仿一些绿化软件的bat，把 \"REG ADD...\" 写在一个 bat 文件中，然后在 bat 头部加入申请管理员权限的代码，然后 exec 这个 bat","createdAt":1599288773721},{"id":10109,"originId":"5f533beed22a6b1d622c7d6a","articleId":2167,"userId":3272,"content":"我去试试，谢谢回复","createdAt":1599290350721},{"id":10110,"originId":"5f545561c1c67a7dd9afd762","articleId":2167,"userId":3238,"content":"参考一下这个，可以用vbs\r\n\r\nhttps://github.com/coreybutler/node-windows/blob/master/bin/elevate/elevate.vbs\r\nhttps://stackoverflow.com/questions/37322862","createdAt":1599362401216},{"id":10111,"originId":"5f4e02a7e8a599751bb51ba5","articleId":2168,"userId":831,"content":"DDDDDDDDDDDDDDDDDD","createdAt":1598948007512},{"id":10112,"originId":"5f4f01afe8a599751bb51c5f","articleId":2168,"userId":89,"content":"java或php的应该很多，抄一个就好了","createdAt":1599013295476},{"id":10113,"originId":"5f53e793c1c67a7dd9afd73d","articleId":2168,"userId":831,"content":"[@i5ting](/user/i5ting) 也是。都是mvc的 好抄","createdAt":1599334291397},{"id":10114,"originId":"5f52d7e2d22a6b1d622c7cd7","articleId":2169,"userId":3238,"content":"这是shell 的行为\r\n不过你应该是用的zsh，需要找zsh的相关文档，你可以自己找一下试试\r\n\r\nbash的类似功能的文档在这里\r\nhttps://www.gnu.org/software/bash/manual/html_node/Filename-Expansion.html\r\nhttps://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html","createdAt":1599264738841},{"id":10115,"originId":"5f537c4bc1c67a7dd9afd712","articleId":2169,"userId":3132,"content":"所以如果你想传glob给程序处理，需要手动加上引号\r\n`node demo.js \"**/*\"`","createdAt":1599306827219},{"id":10116,"originId":"5f504b2331fc7a1d8ad65aad","articleId":2170,"userId":1254,"content":"https://github.com/mapbox/node-sqlite3","createdAt":1599097635859},{"id":10117,"originId":"5f5061c231fc7a1d8ad65b35","articleId":2170,"userId":109,"content":"sqlite3 加索引","createdAt":1599103426226},{"id":10118,"originId":"5f50ff66d22a6b1d622c7a2d","articleId":2170,"userId":619,"content":"谢谢","createdAt":1599143782883},{"id":10119,"originId":"5f50928b31fc7a1d8ad65bad","articleId":2171,"userId":89,"content":"没看懂","createdAt":1599115915487},{"id":10120,"originId":"5f50943431fc7a1d8ad65bb5","articleId":2171,"userId":3214,"content":"[@i5ting](/user/i5ting) 我在添加或修改src中文件时,watch的add和change事件会忽略一些文件, 导致src变了dist没变. 是不是我的gulpfile有什么问题?","createdAt":1599116340856},{"id":10121,"originId":"5f50c1d1d22a6b1d622c79ee","articleId":2171,"userId":89,"content":"[@ruinb0w](/user/ruinb0w) 如果是前端文件，用browsersync试试","createdAt":1599128017733},{"id":10122,"originId":"5f50b1fcd22a6b1d622c7994","articleId":2172,"userId":111,"content":"autocannon\r\n 参考  https://cnodejs.org/topic/5dd9feea8287937a65af66cb","createdAt":1599123964593},{"id":10123,"originId":"5d9c4c43865a9844a3019fad","articleId":2173,"userId":259,"content":"没有办法，JWT设计本身就是无状态的","createdAt":1570524227385},{"id":10124,"originId":"5d9c4d98ece3813ad9ba0705","articleId":2173,"userId":21,"content":"可以在token里面加个随机码，把随机码放到数据库里面。登陆成功就在数据库记录一下随机码，退出登陆和过期就把这条记录删掉。如果随机码存在就能成功登陆否则就失败。如果用持久型的redis做储存还方便些。\r\n注意看9楼，看回复时间。4，5，8楼的方式会更好些","createdAt":1570524568915},{"id":10125,"originId":"5d9c57cc865a9844a3019ffe","articleId":2173,"userId":2534,"content":"[@zy445566](/user/zy445566) 正解。。","createdAt":1570527180539},{"id":10126,"originId":"5d9c5c41ece3813ad9ba075a","articleId":2173,"userId":3275,"content":"用户退出登录看起来是一个前端的动作，这个时候把前端持久化的token删掉就行了啊","createdAt":1570528321136},{"id":10127,"originId":"5d9c6042865a9844a301a032","articleId":2173,"userId":1737,"content":"jwt生成的token都是保存在前端的（cookie,缓存等），用户退出登录删除token，最简单","createdAt":1570529346333},{"id":10128,"originId":"5d9ea93a865a9844a301a57e","articleId":2173,"userId":362,"content":"redis存一下token黑名单","createdAt":1570679098765},{"id":10129,"originId":"5d9ec240ece3813ad9ba0d7a","articleId":2173,"userId":1199,"content":"说用reidis的,那还不如用传统的模拟session呢\r\n不然不还是每一次请求都要去中心化的redis校验一遍?","createdAt":1570685504667},{"id":10130,"originId":"5d9ec97aece3813ad9ba0d98","articleId":2173,"userId":108,"content":"JWT 本身是无状态的。\r\n\r\n已经签发就有效，除非更换签发密钥。\r\n\r\n只要是需要查询来校验 token 的 （查询 redis/SQL 等）就失去了 JWT 的意义，那为什么要 JWT 呢","createdAt":1570687354854},{"id":10131,"originId":"5d9edb18ece3813ad9ba0df9","articleId":2173,"userId":21,"content":"[@jiyarong](/user/jiyarong)\r\n[@pretty-foam](/user/pretty-foam)\r\n[@axetroy](/user/axetroy) \r\n是的，有用户主动操作在，确实没必要服务端强判断，前端丢弃确实好一些","createdAt":1570691864387},{"id":10132,"originId":"5d9eddf7865a9844a301a64f","articleId":2173,"userId":545,"content":"[@zy445566](/user/zy445566)  [@axetroy](/user/axetroy) [@JsonSong89](/user/JsonSong89) \r\n\r\nhttps://github.com/auth0/express-jwt#revoked-tokens\r\n\r\nexpress 的 jwt 实现是支持 黑名单的，可以参考这个~\r\n","createdAt":1570692599463},{"id":10133,"originId":"5d9f2221ece3813ad9ba0f4a","articleId":2173,"userId":1199,"content":"[@zuohuadong](/user/zuohuadong) 你给的这个不是黑名单吧,只不过是一个错误处理回调而已.\r\n\r\n这里根本不需要考虑什么具体实现.\r\n只说一个本质问题,没有持久化的db(redis,数据库),你如何判断一个与token无关的外部状态?","createdAt":1570710049326},{"id":10134,"originId":"5d9fcd26ece3813ad9ba0ff1","articleId":2173,"userId":545,"content":"[@JsonSong89](/user/JsonSong89)    跟我读：Revoked tokens \r\n稍微往上一点就能看到了。\r\n对于无状态服务来说，确实存在 redis 或者 数据库里是合适一些，这些是具体的实现了。","createdAt":1570753830334},{"id":10135,"originId":"5d9fe7c8ece3813ad9ba1053","articleId":2173,"userId":1199,"content":"[@zuohuadong](/user/zuohuadong) \r\n\r\n```\r\n  function checkRevoked(decoded, callback) {\r\n        isRevokedCallback(req, dtoken.payload, function (err, revoked) {\r\n          if (err) {\r\n            callback(err);\r\n          }\r\n          else if (revoked) {\r\n            callback(new UnauthorizedError('revoked_token', {message: 'The token has been revoked.'}));\r\n          } else {\r\n            callback(null, decoded);\r\n          }\r\n        });\r\n      }\r\n```\r\n\r\n\trevoked的赋值过程和这个库没关系.\r\n\t都不知道你发这个库什么意思,和这个帖子的主题有什么关系吗?\r\n\t  ","createdAt":1570760648782},{"id":10136,"originId":"5d9fe9be865a9844a301a8c6","articleId":2173,"userId":545,"content":"[@JsonSong89](/user/JsonSong89)  吊销token 不返回错误返回什么？\r\n这个库是所有node.js 的  jwt库 里，唯一一个支持 黑名单的库，我发这个不合适？\r\n\r\n原理上讲 就是 、\r\n1. 专门维护一套黑名单， 单实例放内存也好，多实例放 redis， 甚至数据库 哪怕 sqlite 也好 。\r\n2. 验证token 前，先看是不是黑名单里面的，是的话直接返回错误。\r\n3. 如果不是黑名单里的再走正常的 jwt 验证流程。\r\n\r\n\r\n讨论问题为什么非要杠？","createdAt":1570761150336},{"id":10137,"originId":"5da0027d865a9844a301a95a","articleId":2173,"userId":1199,"content":"[@zuohuadong](/user/zuohuadong) 这也叫杠?现在是不是只要说的不和人心意就是杠啊?\r\n\r\n题目问的是让token失效,这从原理上来讲就不可能.\r\n\r\n前面也有人说的很清楚了,必须借助外部db来持久化状态\r\n然后你at几个人,扔个链接过来,也不说清楚,说是jwt支持黑名单\r\n搞半天还是借助db来实现的.\r\n所以你把别人已经明确的东西再给人说一遍,还不说清楚,语气还特别嘚瑟...\r\n到底是谁不好好讨论问题?\r\n","createdAt":1570767485116},{"id":10138,"originId":"5da00321865a9844a301a962","articleId":2173,"userId":1199,"content":"[@zuohuadong](/user/zuohuadong) 你这个库只涉及黑名单拒绝后的后续处理,然而这个帖子的关键点是黑名单的实现,你提到的最关键的1,和这个库无关吧.\r\n所以我说你发错东西了.","createdAt":1570767649720},{"id":10139,"originId":"5da00afb865a9844a301a981","articleId":2173,"userId":545,"content":"[@JsonSong89](/user/JsonSong89)   楼上也说了，这样违反 jwt 的本质了。\r\n唯一好结合的就是我提到的那个库。\r\n而且目前除了我提到的库之外，node.js 其他 jwt 相关的库都没提黑名单的事情。\r\n所以我贴的不合理？\r\n","createdAt":1570769659786},{"id":10140,"originId":"5da0260e865a9844a301a9f1","articleId":2173,"userId":1199,"content":"[@zuohuadong](/user/zuohuadong) 为什么没什么人做这种库,就应为完全没必要.\r\n而且两句代码就能搞定的事情,有什么好不好结合的\r\nconst blackTokenList = await getBlackTokenListFromRedis()\r\nconst denyFlag = blackTokenList.includes(token)\r\n//然后你该干嘛干嘛\r\n你就算要参与讨论,直接说这个重点不更有效率?","createdAt":1570776590551},{"id":10141,"originId":"5da0a400ece3813ad9ba12ce","articleId":2173,"userId":362,"content":"[@JsonSong89](/user/JsonSong89) 你这两句话有性能问题吧，我只需要判断token是否在redis黑名单里，没必要获取整个列表吧\r\n应该const isRevoked =await  redis.exists('revoked-'+tokenKey)","createdAt":1570808832770},{"id":10142,"originId":"5f4f66a5e8a599751bb51d9e","articleId":2173,"userId":3276,"content":"每个用户都有自己的秘钥，注销之后就把秘钥修改一次","createdAt":1599039141012},{"id":10143,"originId":"5f4ff8b331fc7a1d8ad65a56","articleId":2173,"userId":109,"content":"[@zy445566](/user/zy445566) 如果保存随机码，那为何不直接保存token本身呢。","createdAt":1599076531814},{"id":10144,"originId":"5f5040c931fc7a1d8ad65a77","articleId":2173,"userId":21,"content":"[@waitingsong](/user/waitingsong) 你看9楼，再看回复时间","createdAt":1599094985029},{"id":10145,"originId":"5f504fdf31fc7a1d8ad65adb","articleId":2173,"userId":16,"content":"无状态的认证结合有状态的认证，在jwt后再加一层后端可以统一控制的存储，不管是redis还是其他数据库，然后就可以通过控制这个存储的状态来控制认证的状态，但事实上这样就失去了jwt的意义","createdAt":1599098847662},{"id":10146,"originId":"5f50617fd22a6b1d622c78a1","articleId":2173,"userId":109,"content":"[@zy445566](/user/zy445566) 嗯，明白是很老的帖子。\r\n我的意思是保存一个和token一一对应的随机数，与保存这个token本身应该是没区别的吧(暂时不考虑token字符串长度关联的性能问题) 。","createdAt":1599103359174},{"id":10147,"originId":"5f50a1eed22a6b1d622c7935","articleId":2173,"userId":21,"content":"[@waitingsong](/user/waitingsong) 是的，当时没考虑清楚。就直接服务端思维套上了","createdAt":1599119854733},{"id":10148,"originId":"5f4dbe4668156574e6e6dd65","articleId":2174,"userId":19,"content":"我想的是，你创建一个下载任务，然后这个下载任务去生成临时数据，然后request 来请求这个任务的结果，如果这个任务失败，就返回失败呗。","createdAt":1598930502286},{"id":10149,"originId":"5f4f1ad2e8a599751bb51cb6","articleId":2174,"userId":703,"content":"只用 http 一个请求，我只能想到用 Transfer-Encoding:chunked 方式。\r\n中途强行报错的话，看能不能利用一下 chunk-extension 或 trailer （不过似乎浏览器都会忽略）","createdAt":1599019730349},{"id":10150,"originId":"5f3e84c668156574e6e6cc2e","articleId":2175,"userId":98,"content":"遇到过多台服务器之间因为时间差导致的bug，解决办法就是设置定时任务去更新系统时间","createdAt":1597932742616},{"id":10151,"originId":"5f49ae4fe8a599751bb5170d","articleId":2175,"userId":616,"content":"多台服务器之间时间不一致导致出错，需要一台时间同步服务器。\r\n服务器和客户端电脑之间时间不一致？该问题需要描述清楚，否则无法设计规避原则。","createdAt":1598664271208},{"id":10152,"originId":"5f4e2a8ae8a599751bb51bf2","articleId":2175,"userId":3279,"content":"如果是时区不一致导致的问题，存储是建议直接存时间戳","createdAt":1598958218746},{"id":10153,"originId":"5f3223a92799ce64a0aabac4","articleId":2176,"userId":33,"content":"没人回答默认肯定的回答了","createdAt":1597121449214},{"id":10154,"originId":"5f35013eebb8141d4bdda749","articleId":2176,"userId":747,"content":"在座的各位有在paypal的经验吗？？？","createdAt":1597309246819},{"id":10155,"originId":"5f3a287cd8c8971d82088c7c","articleId":2176,"userId":19,"content":"用或不用 对你有啥影响吗？\r\n","createdAt":1597646972615},{"id":10156,"originId":"5f3a59ded8c8971d82088d08","articleId":2176,"userId":33,"content":"[@luanxuechao](/user/luanxuechao) 学习一下多年沉淀的经验啊","createdAt":1597659614181},{"id":10157,"originId":"5f3c9b1c68156574e6e6c851","articleId":2176,"userId":19,"content":"别人不会告诉你的","createdAt":1597807388222},{"id":10158,"originId":"5f3cd12468156574e6e6c8dc","articleId":2176,"userId":16,"content":"部分有在用","createdAt":1597821220331},{"id":10159,"originId":"5f3f34b868156574e6e6ccba","articleId":2176,"userId":33,"content":"[@luanxuechao](/user/luanxuechao) 这有啥好藏着掖着的，，连nodejs都是开源的。。。","createdAt":1597977784618},{"id":10160,"originId":"5f3f34c9e8a599751bb50a84","articleId":2176,"userId":33,"content":"[@AviorAlong](/user/AviorAlong) get，搜到了相关文章","createdAt":1597977801807},{"id":10161,"originId":"5f4dbe8ae8a599751bb51b0f","articleId":2176,"userId":19,"content":"主要别人没有分享的原动力啊？","createdAt":1598930570857},{"id":10162,"originId":"5f2d7dfb4b61050e36e7e7fa","articleId":2177,"userId":108,"content":"存静态文件，为什么不上 nginx?","createdAt":1596816891134},{"id":10163,"originId":"5f2e26bc4b61050e36e7e83d","articleId":2177,"userId":3280,"content":"nginx","createdAt":1596860092003},{"id":10164,"originId":"5f30b6854b61050e36e7eac6","articleId":2177,"userId":135,"content":"[@axetroy](/user/axetroy) \r\n[@quarkhe](/user/quarkhe) \r\n因为要动态处理一点逻辑..  改headers 之类的.  ","createdAt":1597027973810},{"id":10165,"originId":"5f3a43eed8c8971d82088cc7","articleId":2177,"userId":3238,"content":"静态文件分发建议用nginx，用openresty可以对请求修改的\r\n要是文件不多的话，可以试一下内存文件系统（存在js进程里面的那种）\r\n","createdAt":1597653998029},{"id":10166,"originId":"5f3b4501d8c8971d82088e0e","articleId":2177,"userId":135,"content":"[@Shonke](/user/Shonke) 好~ 我去看看 `openresty`","createdAt":1597719809557},{"id":10167,"originId":"5f3c8f87e8a599751bb50628","articleId":2177,"userId":545,"content":"如果需要 node.js 的话， fastify 系列性能会好一些。\r\nhttps://github.com/fastify/fastify-static\r\n\r\n更方便一些的话，可以试试 caddy 。\r\n如果对性能还有更高要求的话，nginx 是个选择。 \r\n","createdAt":1597804423241},{"id":10168,"originId":"5f478d05e8a599751bb51457","articleId":2177,"userId":796,"content":"Openresty + Lua 写逻辑，应该比较合适，高流量网关场景验证无压力。","createdAt":1598524677011},{"id":10169,"originId":"5f4ba384e8a599751bb51847","articleId":2177,"userId":110,"content":"fastify或者 golang 的 gin","createdAt":1598792580775},{"id":10170,"originId":"5f4ba3a6e8a599751bb5184a","articleId":2177,"userId":110,"content":"如果只是动态加header，可以用nginx的Lua模块或者js模块，都可以编程","createdAt":1598792614134},{"id":10171,"originId":"5f46777968156574e6e6d4e5","articleId":2178,"userId":842,"content":"求稳就去用移动梦网, 阿里云这些,稍微贵点, 但是你也没啥不放心的\r\n","createdAt":1598453625757},{"id":10172,"originId":"5f4726ab68156574e6e6d639","articleId":2178,"userId":848,"content":"我用的联通。费用便宜，开发都有源代码，还有人对接客服。","createdAt":1598498475973},{"id":10173,"originId":"5f4a6cef68156574e6e6da67","articleId":2178,"userId":3281,"content":"腾讯云,","createdAt":1598713071856},{"id":10174,"originId":"5f44f03d68156574e6e6d34b","articleId":2180,"userId":111,"content":"根据wry.dat 中查询","createdAt":1598353469773},{"id":10175,"originId":"5f4881f8e8a599751bb515af","articleId":2180,"userId":523,"content":"gis 位置? 可以根据ip来查询吧","createdAt":1598587384958},{"id":10176,"originId":"5f46971868156574e6e6d523","articleId":2182,"userId":109,"content":"试试看用bigint作加法，得到结果后处理32位溢出，然后转为number。","createdAt":1598461720367},{"id":10177,"originId":"5f469d8168156574e6e6d52e","articleId":2182,"userId":109,"content":"try:\r\n```js\r\nconst limit = 4294967295n // Buffer.from([0,0,0,0, 0xff, 0xff, 0xff, 0xff])\r\nconst buf1a = Buffer.from([0,0,0,0, ...buf1])\r\nconst buf2a = Buffer.from([0,0,0,0, ...buf2])\r\nconst ret1 =  buf1a.readBigInt64BE() + buf2a.readBigInt64BE() // 4294967295n\r\n\r\nif (ret1 <= limit && ret1 >= Number.MIN_SAFE_INTEGER) {\r\n  const ret2 = Number(ret1)\r\n // do something\r\n}\r\nelse {\r\n // handel overflow\r\n}\r\n```","createdAt":1598463361303},{"id":10178,"originId":"5f46bc3b68156574e6e6d54b","articleId":2182,"userId":842,"content":"[@waitingsong](/user/waitingsong) \r\n老哥可能没理解我意思\r\n您这段跟我现在差不多,大概也是这种形式(buf1:Buffer, buf2:Buffer) => number\r\n溢出我倒是知道怎么处理\r\n我想要的是直接累加, 比如buf1+buf2...+bufn, 结果直接就是一个安全的32位数\r\n而不是 safeAdd(buf3, safeAdd(buf1,buf2))这样套娃套下去\r\n","createdAt":1598471227335},{"id":10179,"originId":"5f47057868156574e6e6d59b","articleId":2182,"userId":109,"content":"那你如何处理溢出呢？","createdAt":1598489976959},{"id":10180,"originId":"5f47171d68156574e6e6d5f4","articleId":2182,"userId":33,"content":"这不是leetcode上面的题吗，，去把最优解抄过来放到Math对象上假装Math支持。","createdAt":1598494493246},{"id":10181,"originId":"5f47934768156574e6e6d75c","articleId":2182,"userId":842,"content":"[@waitingsong](/user/waitingsong) 直接按位& 0xffffffff就行了啊","createdAt":1598526279810},{"id":10182,"originId":"5f479358e8a599751bb51468","articleId":2182,"userId":842,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 老哥能说题目编号吗, 我看了下没找到","createdAt":1598526296367},{"id":10183,"originId":"5f47bef8e8a599751bb514c6","articleId":2182,"userId":109,"content":"[@kknbb](/user/kknbb) 那就开始用bigint做加法，最后做一次按位与不行么","createdAt":1598537464482},{"id":10184,"originId":"5f47c669e8a599751bb514d5","articleId":2182,"userId":18,"content":"[@waitingsong](/user/waitingsong) 我觉得这个方法不错，效率应该也还行的。","createdAt":1598539369735},{"id":10185,"originId":"5f3fd7ab68156574e6e6ce41","articleId":2183,"userId":358,"content":"不要考虑那么多，直接丢 CDN，它们会帮你考虑。","createdAt":1598019499349},{"id":10186,"originId":"5f476f2268156574e6e6d717","articleId":2183,"userId":33,"content":"不用你的网站就会显示不安全，，用不用把。。","createdAt":1598517026076},{"id":10187,"originId":"5f34d068b1dd40544e4613e4","articleId":2184,"userId":31,"content":"```js\r\nconst { pipe, path, has, both,  concat, cond, T, identity, is,  reduce, append, isNil, flip,  useWith } = require('ramda')\r\n\r\nconst isNull = flip(isNil);\r\nconst isArray = flip(is(Array));\r\nconst isObjectAndHasProps = flip(both(is(Object), has('props')));\r\n\r\nconst toArray1 = reduce(\r\n    cond([\r\n        [isNull, identity],\r\n        [isArray, useWith(concat, [identity, t => toArray1(t)])],\r\n        [isObjectAndHasProps, useWith(concat, [identity, pipe(path(['props', 'children']), t => toArray1(t))])],\r\n        [T, flip(append)]\r\n    ]),\r\n    []\r\n)\r\n\r\n```\r\n\r\n不可读","createdAt":1597296744513},{"id":10188,"originId":"5f34eef0ebb8141d4bdda6c6","articleId":2184,"userId":135,"content":"### 挺简单的逻辑为啥一定要用这些函数...\r\n\r\n\r\n来个不严谨的写法🙈\r\n```\r\nconst childrenStr = JSON.stringify(children);\r\nconst ret = childrenStr.match(/\\d+/g) || [];\r\n```","createdAt":1597304560241},{"id":10189,"originId":"5f3630dad8c8971d820888de","articleId":2184,"userId":442,"content":"[@abiuDoIT](/user/abiuDoIT) 这解法  🐂   🐄   🐮","createdAt":1597386970405},{"id":10190,"originId":"5f3a3bb5d8c8971d82088cb3","articleId":2184,"userId":3238,"content":"难道不是一句话的事吗？\r\n```javascript\r\nchildren.flatMap(item => item?.props?.children || item).filter(i => i != null)\r\n```\r\n\r\n","createdAt":1597651893666},{"id":10191,"originId":"5f3b43cbebb8141d4bddae09","articleId":2184,"userId":135,"content":"[@Shonke](/user/Shonke) `?.`   现在js 支持这写法了? 😳","createdAt":1597719499446},{"id":10192,"originId":"5f3b6094d8c8971d82088e40","articleId":2184,"userId":3238,"content":"[@abiuDoIT](/user/abiuDoIT) 支持了\r\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/%E5%8F%AF%E9%80%89%E9%93%BE","createdAt":1597726868991},{"id":10193,"originId":"5f44c487e8a599751bb5102d","articleId":2184,"userId":3286,"content":"[@Shonke](/user/Shonke) node的最新版本吗？","createdAt":1598342279337},{"id":10194,"originId":"5f3f1412e8a599751bb50a12","articleId":2186,"userId":22,"content":"一起学吧","createdAt":1597969426066},{"id":10195,"originId":"5f3f1d4268156574e6e6cc60","articleId":2186,"userId":111,"content":" [为什么我们放弃了 Vue？Vue 和 React 深度对比](https://taskhub.work/article/79319258450055168  )\r\n 套用这里面的万精油结论  大项目用 React，小项目用 Vue    关于什么算大项目小项目，我觉得不 应该按代码行数，或者接口数量，而应该看团队规模   超过10个人以上团队如果选择的技术方案api不稳定，坑多的话，产生的沟通成本和维护成本是很大的","createdAt":1597971778239},{"id":10196,"originId":"5f3f1ec6e8a599751bb50a22","articleId":2186,"userId":3288,"content":"你牛逼了，不管哪个都能用的来，先学angular吧，没基础用react或者vue相当于一级一级打怪，angular直接把你带到40级","createdAt":1597972166224},{"id":10197,"originId":"5f3f324568156574e6e6ccac","articleId":2186,"userId":107,"content":"react all in js 的操控感让你更充分的发挥想象力，庞大的生态也可以助你少走很多弯路，再搭配一些框架一起开发，能让你减少很多学习障碍\r\nhttps://github.com/concentjs/concent\r\n\r\n个人推荐react，不过如果你更喜欢面向tempate写的话，vue的确比react更接近html的dsl表达。","createdAt":1597977157886},{"id":10198,"originId":"5f3f38b768156574e6e6cccc","articleId":2186,"userId":296,"content":"都ok。\r\nreact写起来比较顺手，但是啥插件、生态都要自己找。\r\nvue 写起来快（个人感觉），官方已经有一个较好的生态，拿来就用。但是总体生态不如react。\r\nangular没写过，不评价。","createdAt":1597978807761},{"id":10199,"originId":"5f3f767ee8a599751bb50b39","articleId":2186,"userId":528,"content":"一般网站项目可以使用 React，生态好，各种库都很丰富。\r\n如果是数据操作比较多的后台管理系统推荐 Angular，开发效率很高。","createdAt":1597994622954},{"id":10200,"originId":"5f3facae68156574e6e6ce10","articleId":2186,"userId":57,"content":"之前用过angular，原生ts支持，rxjs, 依赖注入，清晰的模块管理（对Java程序员比较友好），刚开始有心智负担（对于新人/菜鸟来说），进阶的话，除了少数专栏讲解部分API，没有源码解析类教程，有因为东西确实很多，自己要坑源码（深入学习头大)，国内不推荐\r\n\r\nreact生态最丰富，最纯粹的一个UI library，所以react生态的react-redux, react-router都是一溜的组件化，JSX写起来还是真舒服，刚开始只需要了解JSX, state, props就可以开始写，可以放心的层层深入，教程也很全（Dan确实会来事）\r\n国内外坑位最多（前端工程我现在都选择react生态，死磕它没有错）\r\n\r\nvue没有用过，翻过文档，感觉上有从React 和 Angular吸收东西，但是不够纯粹，个人不喜欢，国内也可以放心学","createdAt":1598008494285},{"id":10201,"originId":"5f3fdd6fe8a599751bb50be6","articleId":2186,"userId":514,"content":"在国内vuejs，老外还是reactjs","createdAt":1598020975155},{"id":10202,"originId":"5f3f7537e8a599751bb50b1b","articleId":2187,"userId":98,"content":"某天考生物，其中有一题是看鸟的腿猜出鸟的名字。某生实在不懂，生气的把卷子一撕准备离开考场。监考老师很生气于是问他：“你是哪班的，叫什么名字？”某生把裤腿一掀，说：“你猜啊你猜啊。”","createdAt":1597994295566},{"id":10203,"originId":"5f27a850f0739b0e62d13490","articleId":2188,"userId":11,"content":"你的 egg 项目放到本地目录层级浅一点的地方","createdAt":1596434512192},{"id":10204,"originId":"5f27a88ff0739b0e62d13495","articleId":2188,"userId":11,"content":"另外可以加钉钉群 **35149528**，有问题可以直接在里面问。","createdAt":1596434575800},{"id":10205,"originId":"5f27a9844b61050e36e7d9e1","articleId":2188,"userId":1843,"content":"[@hyj1991](/user/hyj1991) 当前是/Users/lp/Desktop/workspace/apm-info-new-project/node/logs/apm-node/xprofiler' 是这个太长了吗","createdAt":1596434820388},{"id":10206,"originId":"5f27aa9df0739b0e62d134a5","articleId":2188,"userId":11,"content":"就是把 egg 的项目目录挪到层级浅一点的地方，本地开发下 socket 会生成到 `项目/logs/` 下面，线上一般不会有这个问题，因为线上生成到 `~/logs` 里","createdAt":1596435101785},{"id":10207,"originId":"5f27ab524b61050e36e7da2d","articleId":2188,"userId":1843,"content":"[@hyj1991](/user/hyj1991) 好的 谢谢～","createdAt":1596435282610},{"id":10208,"originId":"5f27aba8f0739b0e62d134e5","articleId":2188,"userId":358,"content":"[@hyj1991](/user/hyj1991) 可以大概估算下目录的长度，在 egg 插件启动的时候提示下","createdAt":1596435368943},{"id":10209,"originId":"5f27ac484b61050e36e7da3c","articleId":2188,"userId":11,"content":"mac 下是 103，现在是启动的时候发现长度限制了直接抛错，我在文档里添加下这个问题的来源和说明","createdAt":1596435528443},{"id":10210,"originId":"5f27b29d4b61050e36e7da60","articleId":2188,"userId":358,"content":"[@hyj1991](/user/hyj1991) 也可以 try 到这个错误，然后加一个修复指引，再抛错","createdAt":1596437149444},{"id":10211,"originId":"5f27b75ff0739b0e62d13518","articleId":2188,"userId":1843,"content":"[@hyj1991](/user/hyj1991) 你好 这个团队号  我搜不到，有二维码之类的吗","createdAt":1596438367580},{"id":10212,"originId":"5f27f20af0739b0e62d135de","articleId":2188,"userId":11,"content":"[@lpbird](/user/lpbird) ![image.png](//static.cnodejs.org/Fsa1iFGLLZcGXx51iV6iBQiHCyS0)","createdAt":1596453386334},{"id":10213,"originId":"5f27f2304b61050e36e7db2e","articleId":2188,"userId":11,"content":"这图片怎么这么大。。。","createdAt":1596453424625},{"id":10214,"originId":"5f3a6893d8c8971d82088d26","articleId":2188,"userId":393,"content":"[@hyj1991](/user/hyj1991) 23333","createdAt":1597663379686},{"id":10215,"originId":"5e83ec6764259617c49a3d6c","articleId":2189,"userId":3,"content":"现在可以正常访问","createdAt":1585704039760},{"id":10216,"originId":"5e843aad64259617c49a3e52","articleId":2189,"userId":1244,"content":"可以正常访问，不过有些静态资源需要挂梯子才能加载","createdAt":1585724077823},{"id":10217,"originId":"5f369d87d8c8971d82088993","articleId":2189,"userId":177,"content":"可以的啊。不行就用个梯了 [https://github.com/myjiasuqi/jiasu/wiki](https://github.com/myjiasuqi/jiasu/wiki)","createdAt":1597414791918},{"id":10218,"originId":"5f377f80d8c8971d82088a40","articleId":2189,"userId":514,"content":"[@a6x2co](/user/a6x2co) 好几月了了才回答，晚了","createdAt":1597472640856},{"id":10219,"originId":"5f2e52e3f0739b0e62d1431f","articleId":2190,"userId":3290,"content":"比如说哪些浏览器呢","createdAt":1596871395686},{"id":10220,"originId":"5f33b3862799ce64a0aabe93","articleId":2190,"userId":859,"content":"//***.com 这种写法叫 “相对协议”","createdAt":1597223814851},{"id":10221,"originId":"5f35f036ebb8141d4bdda856","articleId":2190,"userId":18,"content":"印象中最初是ie浏览器的一种错误src的兼容性处理，但后来被大家利用来自动区分 http 和 https，已经算是事实上的规范了。","createdAt":1597370422937},{"id":10222,"originId":"5f361731d8c8971d820888b3","articleId":2190,"userId":22,"content":"deno 的 url 实现是我开发的，为此我阅读了好几遍相关规范。\r\n\r\n这种写法在 WHATWG URL 规范中叫做 **scheme-relative-URL**，定义在 https://url.spec.whatwg.org/#syntax-url-scheme-relative","createdAt":1597380401147},{"id":10223,"originId":"5f36af57ebb8141d4bdda9f1","articleId":2190,"userId":18,"content":"[@justjavac](/user/justjavac) 专业！","createdAt":1597419351716},{"id":10224,"originId":"5f1fe104f0739b0e62d127cb","articleId":2191,"userId":1723,"content":"openoffice,libreoffice后端转换.","createdAt":1595924740728},{"id":10225,"originId":"5f1fe141f0739b0e62d127cf","articleId":2191,"userId":1723,"content":"soffice --headless --invisible --convert-to pdf ./app/public/ppt' + parseUrl + ' --outdir ./app/public/pdf/","createdAt":1595924801096},{"id":10226,"originId":"5f1fe152f0739b0e62d127d3","articleId":2191,"userId":1723,"content":"不过样式我不敢保证可以,你可以自己测试一下","createdAt":1595924818201},{"id":10227,"originId":"5f362871ebb8141d4bdda92b","articleId":2191,"userId":3291,"content":"[@shenqidebaozi](/user/shenqidebaozi) 谢谢  我就用的这个   还挺好用","createdAt":1597384817713},{"id":10228,"originId":"5f31e11e4b61050e36e7ec93","articleId":2192,"userId":1926,"content":"加油","createdAt":1597104414717},{"id":10229,"originId":"5f3349526c9ee864cf0e48f0","articleId":2192,"userId":405,"content":"这个规律估计在c++和rust上不太适用","createdAt":1597196626983},{"id":10230,"originId":"5f3357386c9ee864cf0e4935","articleId":2192,"userId":525,"content":"我认为基本的数学/计算机基础（参考大学课程）才是进入code世界的钥匙，谢谢","createdAt":1597200184540},{"id":10231,"originId":"57a945339c26ea7c72260972","articleId":2193,"userId":3293,"content":"redis-cli\r\n跑走","createdAt":1470711091291},{"id":10232,"originId":"57a9460eba44d08f4c1cdf9f","articleId":2193,"userId":3294,"content":"Medis,强烈推荐，也是收费，不过不强制，反正我已买","createdAt":1470711310125},{"id":10233,"originId":"57a94d2a4653749872ec6f03","articleId":2193,"userId":2539,"content":" aliyun DMS","createdAt":1470713130882},{"id":10234,"originId":"57aa08e24653749872ec6f49","articleId":2193,"userId":757,"content":"哇，感谢推荐 Medis！Medis 是我开发的 Redis GUI 客户端，目前开源在 GitHub 上可以免费使用：https://github.com/luin/medis, 也可以到 App Store 上购买来支持我的开发，两者功能上没有任何区别。自我感觉还挺好用的，我们团队目前都在用...","createdAt":1470761186503},{"id":10235,"originId":"57aa13bb9c26ea7c722609b3","articleId":2193,"userId":3295,"content":"[@luinlee](/user/luinlee) 你这个工具太酷了。给你点个赞。","createdAt":1470763963844},{"id":10236,"originId":"57aa18199c26ea7c722609b6","articleId":2193,"userId":3295,"content":"[@luinlee](/user/luinlee) 这么酷的工具，开始可以免费使用1个月，挖掘潜在用户。在各大博客和百度经验发几篇教程，提高搜索引擎抓取。\r\n支持两个版本，免费基础版和增强收费版，争取扩大市场份额，然后扩展支持mongodb，mysql等，最后支持移动版本。\r\n产品设计+运营，应该可以收一点流水。毕竟这种工具长期使用，用户留存率很高。","createdAt":1470765081183},{"id":10237,"originId":"57ae8240ba44d08f4c1ce0e5","articleId":2193,"userId":757,"content":"[@linyouhappy](/user/linyouhappy) 多谢建议！Medis 起初只是为了满足自己的工作需求开发的，所以没想这么多。现在已经开源了，就不考虑收益了哈哈","createdAt":1471054400144},{"id":10238,"originId":"57aeac58476898b472247ebe","articleId":2193,"userId":1863,"content":"[@luinlee](/user/luinlee) 已 star","createdAt":1471065176930},{"id":10239,"originId":"57aff3ba476898b472247ef7","articleId":2193,"userId":757,"content":"[@klesh](/user/klesh) 感谢~","createdAt":1471148986339},{"id":10240,"originId":"5cb1ae4b207b2365936eca1f","articleId":2193,"userId":3296,"content":"推荐一款跨平台客户端，性能还可以，关键是精简 [AnotherRedisDesktopManager](https://github.com/qishibo/AnotherRedisDesktopManager/)\r\n![status.png](//static.cnodejs.org/FhED8V-woF_FZoBruDR7T2e8yiCL)","createdAt":1555148363518},{"id":10241,"originId":"5eedc78913f8b244e57caa96","articleId":2193,"userId":3297,"content":"vscode 的 redis 扩展，内置完整的命令行，redis管理和图形化界面。\r\nGithub地址：https://github.com/pikadun/vscode-redis\r\nVSCode Marketplace地址：https://marketplace.visualstudio.com/items?itemName=Dunn.redis\r\n\r\n![redis.png](//static.cnodejs.org/FuakgTuGXNBZALaWxtNfUw0d-ciJ)","createdAt":1592641417201},{"id":10242,"originId":"5f3351246c9ee864cf0e491e","articleId":2193,"userId":3298,"content":"QuickRedis 是一款 永久免费 的 Redis 可视化管理工具。它支持直连、哨兵、集群模式，支持亿万数量级的 key，还有令人兴奋的 UI。QuickRedis 支持 Windows 、 Mac OS X 和 Linux 下运行。下载地址：https://github.com/quick123official/quick_redis_blog","createdAt":1597198628780},{"id":10243,"originId":"5f2e14e9f0739b0e62d142e0","articleId":2195,"userId":514,"content":"人工智能的缘故，它的库很多，也方便","createdAt":1596855529770},{"id":10244,"originId":"5f2e9a7d4b61050e36e7e8cf","articleId":2195,"userId":38,"content":"简单看了下大概 60% 是数据分析，30% 测试工程师，做 web 的话首选还是不推荐的 Python 的。\r\n另外有个小 tip，Node.js 的数据是 Node.js 和 Nodejs 这两个关键词加起来的。","createdAt":1596889725735},{"id":10245,"originId":"5f2ed8864b61050e36e7e8e8","articleId":2195,"userId":711,"content":"[@lellansin](/user/lellansin) py三万多的岗位呀 node4400左右","createdAt":1596905606490},{"id":10246,"originId":"5f30adbcf0739b0e62d14566","articleId":2195,"userId":541,"content":"node的数据其实也不准，会夹杂一些纯前端的岗位","createdAt":1597025724221},{"id":10247,"originId":"5f30d6ad4b61050e36e7eb0d","articleId":2195,"userId":38,"content":"[@genaller](/user/genaller) 前端有 4w 多，Node.js 是 Node.js （3k）+ Nodejs（4k）= 7k。\r\n\r\n如果以后想转岗大数据 or 测试岗感觉没毛病。纯搞 Web 真没必要学 Python。\r\n\r\n楼上说 Node 夹杂前端是正常现象，一般情况下 Node 和前端就是没法分离的。很多 IT 岗位都是这样的，比如 3w Python 岗位里找大数据和测试的也不都是直接找 Python 的，挺多只是要求的几门语言里有 Python 罢了，我还翻到几个本来就是招前端的，只是 JD 里面列的几门语言里有 Python 罢了。","createdAt":1597036205038},{"id":10248,"originId":"5f31035c4b61050e36e7eb7b","articleId":2195,"userId":711,"content":"[@lellansin](/user/lellansin) 不是的 应该直接搜node 搜node.js加nodejs里面有重复","createdAt":1597047644283},{"id":10249,"originId":"575a1533dc4ef1e71a4640e9","articleId":2196,"userId":277,"content":"这个问题目前也困扰着我，目前我自己只实践到Promise为止\r\n感觉规范维护者倾向于认为async/await是最终的异步解决方案，所以大家在思想上更容易靠近政治正确？\r\n中央已经讨论决定了就是你了，是不是有种钦定的感觉？\r\n\r\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1465521459516},{"id":10250,"originId":"575a16bedc4ef1e71a4640eb","articleId":2196,"userId":203,"content":"官方标配总会更得人心的，特别是对于广大程序员，yield和await对于他们来说都是黑盒，肯定会优先选择语言级别支持的特性，换位思考下呢😊\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1465521854363},{"id":10251,"originId":"575a1c3c4fb027d05f4328e0","articleId":2196,"userId":1937,"content":"yield  不是语言规范？","createdAt":1465523260975},{"id":10252,"originId":"575a1cb14fb027d05f4328e2","articleId":2196,"userId":863,"content":"不管yield是否优越，但总归是上不了台面的","createdAt":1465523377101},{"id":10253,"originId":"575a34d2dc4ef1e71a4640f1","articleId":2196,"userId":203,"content":"[@leizongmin](/user/leizongmin) 就像老婆和小三的地位\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1465529554419},{"id":10254,"originId":"575a47bc2ad3c06f1aa3d58e","articleId":2196,"userId":863,"content":"[@DoubleSpout](/user/DoubleSpout) 形容得很生动","createdAt":1465534396491},{"id":10255,"originId":"575a4a9c4fb027d05f4328eb","articleId":2196,"userId":1213,"content":"语意，作为语法来讲，怎么说贴切最重要了。\r\nyield 对大多数人来说，理解起来是晦涩的，这点就完败了。","createdAt":1465535132246},{"id":10256,"originId":"575a55122ad3c06f1aa3d591","articleId":2196,"userId":692,"content":"而且 async/awiat 的功能还一再阉割，虽然这是标准也实在是...","createdAt":1465537810200},{"id":10257,"originId":"575b86b82ad3c06f1aa3d5c5","articleId":2196,"userId":1947,"content":"我觉得不过就是一个是亲生的一个是领养的,就这么简单","createdAt":1465616056085},{"id":10258,"originId":"575ba3c0e5fa62531af6e19c","articleId":2196,"userId":205,"content":"async/await is a standard","createdAt":1465623488340},{"id":10259,"originId":"575ba5ba4fb027d05f432936","articleId":2196,"userId":133,"content":"语义上更规范，其它我也不知道有什么好的。","createdAt":1465623994697},{"id":10260,"originId":"575bae5fe5fa62531af6e1a4","articleId":2196,"userId":3300,"content":"1. await 可不是只能一次执行一个 promise\r\n`await Promise.all([getFoo(), getBar()]);`\r\n\r\n2. generator 得用 co/执行器 来执行吧\r\n新人菜逼，轻喷","createdAt":1465626207860},{"id":10261,"originId":"575bc0b84fb027d05f43293d","articleId":2196,"userId":89,"content":"目前看2者是一样的东西，都是generator，详见 https://cnodejs.org/topic/575bbf22e5fa62531af6e1a8","createdAt":1465630904612},{"id":10262,"originId":"575bcd3be5fa62531af6e1a9","articleId":2196,"userId":3301,"content":"await 规定只能使用在promise真的好蛋疼，promise本身可读性就差，还得再包装一次","createdAt":1465634107015},{"id":10263,"originId":"575bcef8dc4ef1e71a464145","articleId":2196,"userId":568,"content":"语义才是重点，至于promise，原生的我觉得很好理解吧\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1465634552476},{"id":10264,"originId":"575bda8fdc4ef1e71a46414b","articleId":2196,"userId":1568,"content":"[@i5ting](/user/i5ting) 人真高手都上升到语言的高度来理解的，你呀，非得把那层皮给扒拉下来，你让人家装会逼成么？\r\n\r\n语义，语义，语义，重要的事情说三遍，懂了么？\r\n\r\n一年一个标准，我是非常，非常，非常看好这样的语言的，重要的事情说三遍，三个非常，就如我看好C++一样，这种标准委员会规范出来的语言那都是集各编程语言之精华的，那都是真真切切要解决程序员的疾苦的。","createdAt":1465637519760},{"id":10265,"originId":"575bdfe8e5fa62531af6e1ae","articleId":2196,"userId":89,"content":"[@coordcn](/user/coordcn) 我错了，你说的对","createdAt":1465638888896},{"id":10266,"originId":"575c97fd4fb027d05f432954","articleId":2196,"userId":1860,"content":"我觉得大家都在说什么亲生的小三的，什么生成器本来不是这样设计用的，有那么复杂吗？难道现实世界中，你不能拿扳手来敲钉子么？\r\n我家里的窗户装修的时候没弄好，防盗网和墙壁之间有很大的缝隙，夏天蚊子就进来了，我就是拿防撞胶裁剪合适了，塞到缝隙里的，为了压实，最后最趁手的工具居然是衣架！请问完成这些工作，有那样是所谓专业的工具？\r\n还有刚刚看的帖子，elem这个新语言，作者鼓吹他的语言多纯，知乎就有吐槽。所以可见，世界并不是人类想象的那样运行的，即使是人类自己创造的工具。","createdAt":1465686013842},{"id":10267,"originId":"575ccf09e5fa62531af6e1d6","articleId":2196,"userId":3302,"content":"分享一个链接 http://rossboucher.com/await.\r\n\r\n1. 为了干掉回调地狱，出了个 promise \r\n2. 但 promise 也不是万金油，`then().then().then().`，这种代码写多了，代码量也没减多少，也想吐\r\n3. 为了解决 promise 的坑，为了语义，开发体验，最佳实践吧，出了 async/await，代码量确实减少了很多\r\n4. Node 还是单线程","createdAt":1465700105820},{"id":10268,"originId":"575e4a624a43c1cb159ffe09","articleId":2196,"userId":1949,"content":"[@fundon](/user/fundon) Node还是单线程?去看看Child Processes","createdAt":1465797218526},{"id":10269,"originId":"575e4f36d395c3e715cf1e31","articleId":2196,"userId":3302,"content":"[@huangyanxiong01](/user/huangyanxiong01)  await 仍然是单线程！","createdAt":1465798454895},{"id":10270,"originId":"575e6b7ec1518403160a4595","articleId":2196,"userId":1949,"content":"[@fundon](/user/fundon) 不阻塞就好了，管它几线程","createdAt":1465805694547},{"id":10271,"originId":"575e8c47d395c3e715cf1e65","articleId":2196,"userId":223,"content":"虽然都处理异步编程的问题，但这些东西并不是完全相互替代的关系 calback => promise => yield (async/await)还有RxJS，因为一段程序不止处理返回值与传参接口，还需要处理side effect，这就像类设计要getter，setter，而不直接用属性赋值。所以会有不少情况一个callback和一个promise比async/await实用的情况，或者说在一些程序里，async/await并不是关键的程序结构，而是一种语法糖而已，真正的核心仍然是一个Promise序列。","createdAt":1465814087122},{"id":10272,"originId":"575ec0931e51871e576e31f5","articleId":2196,"userId":940,"content":"通用，好用就好","createdAt":1465827475436},{"id":10273,"originId":"575ecc0e4971a77702148c0e","articleId":2196,"userId":18,"content":"[@huangyanxiong01](/user/huangyanxiong01) 可能你跟 [@fundon](/user/fundon) 对于多线程的理解不一样。我指的是看这个 await 问题的角度不一样。\r\n\r\nchild_process 那已经是新开一个进程了。在当前进程中，js无论如何都是单线程的，libuv那层面的多线程 file io 不能算进来。","createdAt":1465830414141},{"id":10274,"originId":"575eccd9f2d6aeb302e8a675","articleId":2196,"userId":18,"content":"[@flamingtop](/user/flamingtop) 呃。。。跳出题目来说的话，async await 和 yield 可以看成语法糖没错。","createdAt":1465830617144},{"id":10275,"originId":"575f675d95dcb2940229b56c","articleId":2196,"userId":1119,"content":"受到这个启发，写了一个模块，yield 并发执行\r\nhttps://github.com/classfellow/pyield","createdAt":1465870173494},{"id":10276,"originId":"575f6ed95e870b5a02066abb","articleId":2196,"userId":18,"content":"[@classfellow](/user/classfellow) yield 后面直接跟一个 promise 数组的话，这些 promise 都会并发执行啊。你试试看。","createdAt":1465872089931},{"id":10277,"originId":"575f7afe4971a77702148c38","articleId":2196,"userId":1119,"content":"[@alsotang](/user/alsotang) 感觉yield 形式上简单，照着写即可，甚至不必了解清楚promise 。pyield 有意回避更多的概念实现多并发，嘿嘿嘿。对与我这种C++出身的人，更喜欢yield","createdAt":1465875198487},{"id":10278,"originId":"575f7f725e870b5a02066abf","articleId":2196,"userId":1439,"content":"[@alsotang](/user/alsotang)   async/await 相对于 Generator，1）语义上更容易理解一些  2）async/await 更规范一些，后面只能接 Promise，并且返回的也是 Promise，而 Promise 对开发者也是隐形的。而 Generator 只是迭代器的一个子类型，设计时并不是拿来解决异步问题，只是我们发现可以用来解决问题。Generator 执行时需要借助第三方执行器，如：co，最后支持哪些功能需要依赖第三方执行器包装了哪些东西。co 里使用 Promise（用其他也是可以的），抹平了 yield 和 yield * 的差异，yield 后面是数组的话自动加 Promise.all 来并行执行。\r\n\r\n","createdAt":1465876338556},{"id":10279,"originId":"575fa6ce50312f1107e614da","articleId":2196,"userId":375,"content":"简单点说，js出身的对异步比较熟悉的都喜欢yield，别的语言转过来不熟悉异步的都喜欢async/await。。。哈哈，猜测一下，反正我是菜鸡，喜欢async/await","createdAt":1465886414553},{"id":10280,"originId":"575fb9f150312f1107e614e8","articleId":2196,"userId":3303,"content":"适合自己就行啦。开发一个网站有人喜欢java，有人喜欢.Net。萝卜青菜而已。","createdAt":1465891313832},{"id":10281,"originId":"576036c1e8689e7906af738d","articleId":2196,"userId":1215,"content":"只要任何东西都可以变成一个Promise之后，await的功能不会比yield弱的。 https://github.com/JacksonTian/tinywork  （注意名字）\r\n要理解async/await还得先理解Promise的意图，Promise带有延迟求值的意思（更多细节参见：http://alinode.aliyun.com/blog/5 ），async/await就是为之在语义上的准备。\r\nGenerator目前在co的帮助下能实现async/await的功能，但async/await是不需要借助外部工具即可用的。","createdAt":1465923265904},{"id":10282,"originId":"5760aaf3fa83165906ace2d9","articleId":2196,"userId":3304,"content":"[@welefen](/user/welefen) aa后面只能跟promise，yield可以跟数组或者对象很方便，aa还得用Promise.all或者bb转一下，略麻烦\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1465953011803},{"id":10283,"originId":"5760efa4ce2caded068f9d57","articleId":2196,"userId":3305,"content":"这么巧最近经常看到有新人问「Monad 跟 Continuation是等价的，那为什么还要 Monad？」\r\n……我只想表示，中断也是事件","createdAt":1465970596899},{"id":10284,"originId":"5760f00cce2caded068f9d59","articleId":2196,"userId":3305,"content":"然后，我们其实不需要 this —— by  Douglas Crockford","createdAt":1465970700780},{"id":10285,"originId":"57615a9d50312f1107e6158e","articleId":2196,"userId":1944,"content":"我个人还是比较喜欢yield 因为 object 和 array 并发很方便，而async实现并发后在手动把并发后的内容整合到object中，反而代码要冗余很多。。async的优点是原生语法，语意更好，但我觉得效率上yield这样的hack也并不会逊色很多。。。\r\n可能重要的缺点是async这种对于新人来说比较容易理解，而yield被co包装后不太容易理解吧\r\n所以，我觉得对于老司机来说，yield array 和 yield {} 要比 async promise..... 来的更方便吧。。。\r\n\r\n可能我又要挨骂了。。。。","createdAt":1465997981473},{"id":10286,"originId":"57616db050312f1107e615a3","articleId":2196,"userId":284,"content":"async await 自动co, 语义更清晰...\r\nyield 程序员自己可以控制next的时刻, 更灵活","createdAt":1466002864901},{"id":10287,"originId":"57624a50fa83165906ace3b9","articleId":2196,"userId":405,"content":"楼上好几个人说了generator本意不是这样用，但实际上generator究竟怎样用才是适当根本没人提过","createdAt":1466059344519},{"id":10288,"originId":"57624b2bfa83165906ace3bd","articleId":2196,"userId":405,"content":"[@welefen](/user/welefen) \r\n*而 Generator 只是迭代器的一个子类型，设计时并不是拿来解决异步问题*\r\n真是一言惊醒梦中人，按照这么说generator的设计初衷应该就是用来做循环迭代之类的工作，因为它本质上市一个迭代器？","createdAt":1466059563022},{"id":10289,"originId":"57626f61e8689e7906af7476","articleId":2196,"userId":18,"content":"[@youth7](/user/youth7) 好像是个迭代器诶，做延迟计算的。","createdAt":1466068833879},{"id":10290,"originId":"5762813ce8689e7906af7484","articleId":2196,"userId":223,"content":"[@alsotang](/user/alsotang) 跑个题，你把首页广告拿下来了，这网站怎么挣钱啊?","createdAt":1466073404445},{"id":10291,"originId":"5762b0dfce2caded068f9e43","articleId":2196,"userId":18,"content":"[@flamingtop](/user/flamingtop) 你是要回这个贴吗？ https://cnodejs.org/topic/575f61555e870b5a02066aa8","createdAt":1466085599878},{"id":10292,"originId":"5762d6d7fa83165906ace418","articleId":2196,"userId":223,"content":"[@alsotang](/user/alsotang) 没，我只是好奇，你积分第一应该是这里老大，前两天看到网站还有广告，后来看到没有了，所以问问。这个系统不能发私信，所以用了这个帖子。","createdAt":1466095319099},{"id":10293,"originId":"57637961b839060d2249bc1b","articleId":2196,"userId":2745,"content":"拿 async/await 做對比就真的有點 naive 了，當你們嘗試在前端中使用 async/await 后，就會知道由 TJ 創造的 Generator 另類用法的侷限性是多麼嚴重。至於 Generator 的真正意義？直接傳送門吧 [https://zhuanlan.zhihu.com/p/20794401](https://zhuanlan.zhihu.com/p/20794401)。","createdAt":1466136929078},{"id":10294,"originId":"5f30c20af0739b0e62d145b2","articleId":2196,"userId":1244,"content":"* async/await 可读性更好，更容易理解代码流程\r\n* generator 可以对代码流程进行更复杂的控制","createdAt":1597030922830},{"id":10295,"originId":"5f2aa9f8f0739b0e62d13c8e","articleId":2197,"userId":296,"content":"？开局一张图？\r\n","createdAt":1596631544903},{"id":10296,"originId":"5f2b6d4ff0739b0e62d13d87","articleId":2197,"userId":354,"content":"此处应该@胖茶","createdAt":1596681551968},{"id":10297,"originId":"5f2b6dc8f0739b0e62d13d8d","articleId":2197,"userId":3307,"content":"text 这?","createdAt":1596681672488},{"id":10298,"originId":"5f2cdb62f0739b0e62d140dd","articleId":2197,"userId":36,"content":"那里报错了","createdAt":1596775266595},{"id":10299,"originId":"5f2f6dc64b61050e36e7e91d","articleId":2197,"userId":3308,"content":"哥们，最好报错信息和代码能贴全一些。","createdAt":1596943814357},{"id":10300,"originId":"5f30a4acf0739b0e62d144ee","articleId":2197,"userId":514,"content":"对啊，把错误贴上来","createdAt":1597023404656},{"id":10301,"originId":"5f27d0f94b61050e36e7dae3","articleId":2198,"userId":438,"content":"我记得一年前的这个项目好像git下来就能用啊，你试试我之前fork下来的项目https://github.com/xwadh/lordofpomelo","createdAt":1596444921259},{"id":10302,"originId":"5f2d12394b61050e36e7e729","articleId":2198,"userId":3309,"content":"[@xwadh](/user/xwadh) 不行，是网易放图片资源的服务器访问不起了。除非之前自己下载下来放自己服务器了才能用。","createdAt":1596789305736},{"id":10303,"originId":"5f2bc41bf0739b0e62d13f1d","articleId":2199,"userId":21,"content":"npm的preinstall了解一下","createdAt":1596703771174},{"id":10304,"originId":"5f2bc5104b61050e36e7e465","articleId":2199,"userId":11,"content":"把各个平台的 binary 都塞到包里，再用 os.platform() 判断当前平台来执行哪一个","createdAt":1596704016220},{"id":10305,"originId":"5f2b64804b61050e36e7e224","articleId":2200,"userId":541,"content":"找canvas类的库，一般都支持放大缩小，鼠标事件，自己弄一下很简单的","createdAt":1596679296620},{"id":10306,"originId":"5f29601e4b61050e36e7dee9","articleId":2201,"userId":98,"content":"那就不用taobao源","createdAt":1596547102378},{"id":10307,"originId":"5f28c0c34b61050e36e7dc3d","articleId":2202,"userId":358,"content":"https://npms.io/search?q=file+line\r\n\r\n随便找一个","createdAt":1596506307186},{"id":10308,"originId":"5f28c194f0739b0e62d13727","articleId":2202,"userId":44,"content":"有readline方法，监听close事件不就知道什么是最后一行？","createdAt":1596506516418},{"id":10309,"originId":"5f287e3f4b61050e36e7dbbe","articleId":2203,"userId":1737,"content":"貌似没有，上ts吧","createdAt":1596489279086},{"id":10310,"originId":"5ee1bdea82b588109b64848a","articleId":2205,"userId":33,"content":"提示你是爆栈啊要不你哪知道你写错了，（我瞎猜的）","createdAt":1591852522075},{"id":10311,"originId":"5ee1cc9882b588109b6484c2","articleId":2205,"userId":21,"content":"1. 函数彻底执行完成之前，这个指针是一直保留在执行调用栈中\r\n2. 调用栈一般会额外限制一个一般来说远低于内存的大小限制，所以确实是爆栈\r\n3. 在尾递归优化方案中，外层函数帧可以被丢弃这样可以减少一些栈的消耗","createdAt":1591856280893},{"id":10312,"originId":"5ee30404b703280f0bcb93e8","articleId":2205,"userId":3066,"content":"[@zy445566](/user/zy445566) 之前我也是这么认为，但是看到下面两篇文章，都有说到，调用栈清空后才会去执行任务队列中的任务，这时我懵了\r\nhttps://segmentfault.com/a/1190000016278115\r\nhttps://zhuanlan.zhihu.com/p/55511602\r\n(查阅时，页面内搜索“清空”，快速定位)","createdAt":1591936004878},{"id":10313,"originId":"5ee343aa82b588109b648809","articleId":2205,"userId":1079,"content":"栈也是内存的一种，爆栈和爆内存不是一个说法吗。。递归也不一定跟消息队列有直接关系，队列放置的是异步任务。最普通的递归求阶乘，同步任务不设置结束条件也会栈溢出，这相当于是一个死循环。","createdAt":1591952298845},{"id":10314,"originId":"5ee38fb7b703280f0bcb955b","articleId":2205,"userId":21,"content":"[@JarvisQJ](/user/JarvisQJ) 我先做个假设，如果都是同步代码，那么执行完了，调用栈本身就是空的，所以清空不清空都是一样的。\r\n\r\n如果存在异步代码，假设执行完同步代码，调用栈还有数据？如果是，只能猜测是为了防止异步代码被提前调用，那么为什么会提前调用，什么时候会出现这种情况，我觉得可以看V8和nodejs的测试用例中应该有。但是如果不存在这种情况，那么本身清空有什么意义？只能看它代码实现为什么会影响执行结果。\r\n\r\n所以就算没有保留也只是nodejs或V8做的一种特殊处理，所以我觉得依旧可以认为函数彻底执行完成之前，这个指针是一直保留在执行调用栈中。\r\n\r\n当然如果有大牛可以直接解答清空调用栈的原因和什么情况是必须清空的，那肯定更好了。","createdAt":1591971767653},{"id":10315,"originId":"5f27618e4b61050e36e7d8da","articleId":2205,"userId":3066,"content":"谢谢大家的解惑。\r\n这个问题产生根源是，本人对于同步任务和异步任务理解错误（误以为所有的函数都是异步的，从而认为所有任务都会加入任务队列，最终得出了矛盾）。\r\n很惭愧，曾经很清楚理解的概念，多年后记忆混淆，搞出了状况。\r\n异步任务的执行需要通过任务队列配合主线程完成执行，而同步任务直接由主线程压入执行栈执行。\r\n异步任务包括ajax、事件、回调函数、promise等；\r\n同步任务除了以上，包括普通函数、递归等","createdAt":1596416398997},{"id":10316,"originId":"5f2281d04b61050e36e7d2dc","articleId":2207,"userId":90,"content":"能先看下文档？ https://nodejs.org/api/http.html#http_http_get_url_options_callback\r\n补充下，自己刷新下dns, mac终端执行 sudo killall -HUP mDNSResponder","createdAt":1596096976297},{"id":10317,"originId":"5f2281e54b61050e36e7d2e4","articleId":2207,"userId":1535,"content":"```js\r\n\r\nvar http = require('http');\r\n\r\n\r\nhttp.get('http://api.81p.net/api?p=json&t=jisupk10&token=15414985AABD5796&limit=1', (res) => {\r\n    let data = ''\r\n    res.on('data', (chunk) => data+=chunk)\r\n    res.on('end', (chunk) => console.log(data))\r\n})\r\n```","createdAt":1596096997394},{"id":10318,"originId":"5f2282804b61050e36e7d2f2","articleId":2207,"userId":2003,"content":"[@leemove](/user/leemove) 这个报错，![image.png](//static.cnodejs.org/Ft1dQNc4YgEHx8bs53Lj54ovDPgR)","createdAt":1596097152646},{"id":10319,"originId":"5f228390f0739b0e62d12d52","articleId":2207,"userId":1535,"content":"[@quanpf2481](/user/quanpf2481) 这个是你的网络问题吧,我这边运行了一下没问题","createdAt":1596097424586},{"id":10320,"originId":"5f2284cf4b61050e36e7d30c","articleId":2207,"userId":2003,"content":"[@leemove](/user/leemove) 能不能把你的代码贴出来看一下呢？？？","createdAt":1596097743477},{"id":10321,"originId":"5f2285e9f0739b0e62d12d6a","articleId":2207,"userId":1535,"content":"[@quanpf2481](/user/quanpf2481) 一字不差,就是上面的代码.","createdAt":1596098025980},{"id":10322,"originId":"5f258c9af0739b0e62d132ba","articleId":2207,"userId":296,"content":"这个一般就是网络问题。\r\n\r\n可能你需要代理 proxy。","createdAt":1596296346063},{"id":10323,"originId":"5f23821ff0739b0e62d13020","articleId":2208,"userId":1737,"content":"package.json配置 postcss 属性里面的postcss-pxtorem","createdAt":1596162591710},{"id":10324,"originId":"5d6f28acd50f57234591155c","articleId":2209,"userId":1723,"content":"哦，可以直接挂载到 app 上有方法","createdAt":1567565996828},{"id":10325,"originId":"5d6f334dd50f5723459115b1","articleId":2209,"userId":89,"content":"可以的，直接serverless不更好么","createdAt":1567568717113},{"id":10326,"originId":"5d6f42f5a7474a231a588b65","articleId":2209,"userId":109,"content":"midway 可以的， 对于 construct 有 [@init](/user/init) 注解。\r\n也可以在 app.js 里面异步加载，egg midway 都支持。","createdAt":1567572725593},{"id":10327,"originId":"5d705bfbd50f572345911863","articleId":2209,"userId":1161,"content":"[@i5ting](/user/i5ting) ![image.png](//static.cnodejs.org/FqrvB2apr84f7exQ-IRG8tWt_5Nf) 这里应该只支持同步的修改吧？异步的话是需要在didlload生命周期里去拉取然后手动合并？","createdAt":1567644667112},{"id":10328,"originId":"5d705f00a7474a231a588e48","articleId":2209,"userId":1163,"content":"[@shenqidebaozi](/user/shenqidebaozi) 不能挂 app，是插件的配置，redis 的配置是存储在数据库的\r\n[@JsonMa](/user/JsonMa) 我也是看的这个\r\n[@i5ting](/user/i5ting) 狼叔 serverless 是好，但是只有过腾讯云出的，自己这么弄？serverless 看到的都是要收费的，但是我们自己买的是 linux 服务器，能自己配置相关环境么\r\n[@waitingsong](/user/waitingsong) 谢谢，我试试","createdAt":1567645440734},{"id":10329,"originId":"5d7060d2a7474a231a588e58","articleId":2209,"userId":26,"content":"异步目前看来似乎在生命周期里面应该不行（配合一些插件的话），configwiiload是同步的钩子，如果需要异步，只能说启动完成后不能保证`config`对象是预期的配置，所以，我觉得如果异步的话，最好在启动后通过emit告知业务逻辑异步config已经修改好，然后其他依赖于这些config的业务再运行，不过这样一些插件就没办法按照预期的运行了。我看到egg-redis的初始化去阻塞app启动是用旧的app.beforeStart()，里面可以加async方法，但这个API比较泛，没有像新的有区分，所以没办法确保在里面异步修改config会在egg-redis加载前完成。","createdAt":1567645906151},{"id":10330,"originId":"5d706191a7474a231a588e5d","articleId":2209,"userId":1163,"content":"[@waitingsong](/user/waitingsong) 大佬  init 装饰器的文档链接有么，我没找到","createdAt":1567646097576},{"id":10331,"originId":"5d706376a7474a231a588e6c","articleId":2209,"userId":1161,"content":"[@HobaiRiku](/user/HobaiRiku) 现在已经不推荐使用beforestart了，替代方案是lifecycle，可在egg-core的lifecycle.js找到，之前想提个pr，在  triggerConfigWillLoad 中支持async。。。[@i5ting](/user/i5ting) 大佬有什么看法？","createdAt":1567646582016},{"id":10332,"originId":"5d7063f0d50f5723459118a4","articleId":2209,"userId":1161,"content":"[@zhengxsFE](/user/zhengxsFE) 有种委婉的方案是可行的，基于环境变量来实现启动前异步加载配置，如果在egg didlload中是支持的就可以不去考虑了，这个我稍后在didload中尝试下","createdAt":1567646704473},{"id":10333,"originId":"5d7063f4d50f5723459118a8","articleId":2209,"userId":109,"content":"[@zhengxsFE](/user/zhengxsFE) \r\nhttps://midwayjs.org/injection/guide.html#%E5%BC%82%E6%AD%A5%E5%88%9D%E5%A7%8B%E5%8C%96\r\n","createdAt":1567646708011},{"id":10334,"originId":"5d706783d50f5723459118c2","articleId":2209,"userId":26,"content":"[@JsonMa](/user/JsonMa) 虽然是这样，但是很多插件还没有更新，另外如果更新了，官方也是建议在didload上运行插件初始化，所以这里又没办法去找比这个更前的async钩子了，还是没办法直接异步做，所以，如果configWillLoad是支持异步的话似乎就没有什么问题了。我这边一直都是在configWillLoad里面用readFileSync，这样来加载自定义的配置，如果是类似做配置系统，只能说启动前先pull好这个自定义配置文件。","createdAt":1567647619781},{"id":10335,"originId":"5d706863a7474a231a588e9a","articleId":2209,"userId":1163,"content":"[@waitingsong](/user/waitingsong) 这个不是给启动的，只有用 [@provide](/user/provide) 装饰过的才可以","createdAt":1567647843995},{"id":10336,"originId":"5d7068b2d50f5723459118dc","articleId":2209,"userId":1163,"content":"[@JsonMa](/user/JsonMa) 环境变量太约束了，会限制死程序的，我们未来会有两套独立的系统，互相之间不能访问数据的","createdAt":1567647922479},{"id":10337,"originId":"5d70692ad50f5723459118e6","articleId":2209,"userId":1163,"content":"[@JsonMa](/user/JsonMa) triggerConfigWillLoad 官网文档没写，估计用途不是这个吧","createdAt":1567648042930},{"id":10338,"originId":"5d706a90a7474a231a588ec5","articleId":2209,"userId":1161,"content":"[@zhengxsFE](/user/zhengxsFE) https://github.com/JsonMa/egg-apollos 考虑下apollo配置中心吧 我们目前是这种方式实现的异步获取配置","createdAt":1567648400252},{"id":10339,"originId":"5d706c14a7474a231a588ee9","articleId":2209,"userId":1163,"content":"[@JsonMa](/user/JsonMa) 我试试","createdAt":1567648788389},{"id":10340,"originId":"5d70b4fad50f572345911e15","articleId":2209,"userId":358,"content":"因为现在 2.0 不能 break，所以要到 3.0 才能有。\r\n现在的解决方案可以是：在 agent 的 钩子里面去请求配置，写入文件；然后在 app 的 config 里面 require 这个文件\r\n\r\nhttps://github.com/atian25/egg-remote-config","createdAt":1567667450633},{"id":10341,"originId":"5d71b139a7474a231a589689","articleId":2209,"userId":1163,"content":"[@atian25](/user/atian25) 已看到 github 上的回复了，期待 3.x 解决，感谢各位的努力，让我们用到这么好的框架","createdAt":1567732025318},{"id":10342,"originId":"5d71b72da7474a231a5896bb","articleId":2209,"userId":1161,"content":"[@atian25](/user/atian25) agent通过钩子获取然后写入自定义配置文件，除了感觉有些怪异，使用倒是挺OK的。","createdAt":1567733549604},{"id":10343,"originId":"5d75e929a7474a231a58a340","articleId":2209,"userId":3316,"content":"https://www.npmjs.com/package/@zijin-m/egg-apollo 可以参考","createdAt":1568008489797},{"id":10344,"originId":"5d770992a7474a231a58a832","articleId":2209,"userId":36,"content":"mark 这个应该是个常见的需求","createdAt":1568082322633},{"id":10345,"originId":"5f236086f0739b0e62d12f5b","articleId":2209,"userId":123,"content":"https://github.com/lvgithub/ctrip-apollo-client 值得试试","createdAt":1596153990471},{"id":10346,"originId":"5f1eaa73f0739b0e62d12480","articleId":2210,"userId":150,"content":"现在对这个接口做了火焰图\r\n![image.png](//static.cnodejs.org/Fr7tm8rklvUYn_eKVryxexEMwbBO)","createdAt":1595845235428},{"id":10347,"originId":"5f1f7eacf0739b0e62d12609","articleId":2210,"userId":150,"content":"有朋友也用graphQL遇到此类性能问题的吗？","createdAt":1595899564435},{"id":10348,"originId":"5f1ffa104b61050e36e7cd5b","articleId":2210,"userId":150,"content":"使用 clinic bubbleprof 进行I/O分析\r\n压测配置：\r\n1. 并发数：5\r\n2. 总共发送请求数量：20\r\n\r\n结果：\r\n```\r\n{\r\n  totalRequests: 20,\r\n  totalErrors: 0,\r\n  totalTimeSeconds: 11.606238900000001,\r\n  rps: 2,\r\n  meanLatencyMs: 2770.3,\r\n  maxLatencyMs: 3273,\r\n  minLatencyMs: 2593,\r\n  percentiles: { '50': 2712, '90': 2930, '95': 3273, '99': 3273 },\r\n  errorCodes: {},\r\n  instanceIndex: 0\r\n}\r\n```\r\n![image.png](//static.cnodejs.org/FpvWncpSz4WB0iptOwB7exJ8ij0L)","createdAt":1595931152353},{"id":10349,"originId":"5e604f1d3cadb020b915f764","articleId":2211,"userId":21,"content":"贴代码。不贴怎么知道哪写的有问题","createdAt":1583370013453},{"id":10350,"originId":"5e60700c3cadb020b915f7c3","articleId":2211,"userId":1662,"content":"[@zy445566](/user/zy445566) 不好意思，已经贴上代码，查到哪个地方出了问题，但不知原因，还请指教。谢谢。\r\n![node-error.png](//static.cnodejs.org/FswJdeRdtcbQT6uTg2317AzAiwrf)\r\n![微信图片_20200305112023.png](//static.cnodejs.org/FkZ7GPpxTSPTHxMks2CsvkY2xGod)","createdAt":1583378444335},{"id":10351,"originId":"5e61e5f423bc9e20b4e32673","articleId":2211,"userId":1079,"content":"因为你这个 mssql 模块的 connect() 方法接收的第一个参数要求字符串类型，所以你传其他类型的参数就报错。你可以看一下 mssql 的 API。","createdAt":1583474164301},{"id":10352,"originId":"5f1f0261f0739b0e62d12596","articleId":2211,"userId":3318,"content":"在 config 中增加\r\n\r\n    options:{\r\n        encrypt: false\r\n    }\r\n\t\r\n原因是 tedious 库中\tencrypt 的缺省 有false 改为 true 了","createdAt":1595867745103},{"id":10353,"originId":"5f1a3424f0739b0e62d11ba7","articleId":2212,"userId":21,"content":"如果你是为了监控，那么before-server可以做到，只需要一点点配置，修改请求IP到before-server就可以实现监控，一次配置还能支持整个团队，方便移动端和ssr开发。我们开发团队用了小半年了，效果还行。\r\n地址：https://github.com/zy445566/before-server","createdAt":1595552804897},{"id":10354,"originId":"5f1eef0e4b61050e36e7ca77","articleId":2212,"userId":3319,"content":"谢谢您，我发现我是被网关给卡住了，还是对http不熟啊，现在在补http","createdAt":1595862798406},{"id":10355,"originId":"5f155f3b4b61050e36e7b346","articleId":2213,"userId":11,"content":"没必要，redis / mysql 还是应该放在 app worker，agent 是用来处理一些只需要单个进程执行的逻辑，比如配置变动走配置中心对应的 client 就应该集成到 agent 里面","createdAt":1595236155036},{"id":10356,"originId":"5f16e454f0739b0e62d11383","articleId":2214,"userId":89,"content":"最好的是分布式事务处理。其次是etl将表同步到一个库里。","createdAt":1595335764807},{"id":10357,"originId":"5f17ace04b61050e36e7b846","articleId":2214,"userId":21,"content":"使用两个sequelize实例查两次。或者另外一个库启动一个服务，使用类似微服务的方式调用。","createdAt":1595387104254},{"id":10358,"originId":"5f17df9c4b61050e36e7b91a","articleId":2214,"userId":103,"content":"必须要用两个实例，3个，4个也行。但是这样合理吗？跨库查询本身就有点问题，既然是跨库了最好是跨服务，再将数据聚合到一个表中","createdAt":1595400092229},{"id":10359,"originId":"5f18ebc8f0739b0e62d117be","articleId":2214,"userId":846,"content":"歪个楼，目前 Breword 正在将 sequelize 文档翻译为中文，对 Sequelize 熟悉，以及想要参与贡献翻译的同学，欢迎一起参与翻译。\r\n\r\n翻译项目地址为：https://www.breword.com/projects/5f16a188b1836a001beb781a","createdAt":1595468744654},{"id":10360,"originId":"5f1a773bf0739b0e62d11c96","articleId":2215,"userId":628,"content":"html2canvas ?","createdAt":1595569979004},{"id":10361,"originId":"5f1a90fa4b61050e36e7c179","articleId":2215,"userId":3322,"content":"[@zhuweiyou](/user/zhuweiyou) nodejs用不了\r\n","createdAt":1595576570759},{"id":10362,"originId":"5f1e45f0f0739b0e62d12346","articleId":2215,"userId":628,"content":"[@Tenneat](/user/Tenneat)  扔到 https://github.com/puppeteer/puppeteer 里，调用截图方法呢？","createdAt":1595819504270},{"id":10363,"originId":"5f150cbc4b61050e36e7b231","articleId":2216,"userId":11,"content":"nginx 和 egg 应用建立的连接？你这还有很多 root 用户建立的，看看是什么应用，nginx 用户的应该是正常的","createdAt":1595215036855},{"id":10364,"originId":"5f1531dcf0739b0e62d10f8a","articleId":2216,"userId":639,"content":"[@hyj1991](/user/hyj1991) 应该是和nginx建立的正向和反向的连接吧，你看端口号都是成对出现的，nginx->node，node->nginx","createdAt":1595224540898},{"id":10365,"originId":"5f113bde4b61050e36e7ae3d","articleId":2217,"userId":89,"content":"Midway faas是基于ts编写的函数通用层。同一种写法，可以部署到阿里云、腾讯云、aws lamda上。","createdAt":1594964958701},{"id":10366,"originId":"5f1b063ef0739b0e62d11e9c","articleId":2217,"userId":121,"content":"midway serverless + 1","createdAt":1595606590412},{"id":10367,"originId":"5f196b6c4b61050e36e7bef5","articleId":2218,"userId":89,"content":"招聘啊","createdAt":1595501420862},{"id":10368,"originId":"5f196ba64b61050e36e7befa","articleId":2218,"userId":89,"content":"github上的东西看不出水平。可以贴一下简历。","createdAt":1595501478337},{"id":10369,"originId":"5f1a86754b61050e36e7c13f","articleId":2218,"userId":22,"content":"直接发给狼叔就行😂😂😂","createdAt":1595573877024},{"id":10370,"originId":"5af18a061b02288048bd0dbb","articleId":2220,"userId":1741,"content":"记录写入的数量，只取写入长度的buffer","createdAt":1525778950096},{"id":10371,"originId":"5af1a9810a36e5312d6ece64","articleId":2220,"userId":21,"content":"buffer默认填充\\0,把这个去掉就好了\r\n```js\r\nlet buf = Buffer.alloc(20);\r\nbuf.write(\"123456789012345678\")\r\nlet str = buf.toString().replace(/[\\u0000]+/,\"\");\r\nconsole.log(JSON.stringify(str));\r\n```","createdAt":1525787009891},{"id":10372,"originId":"5f169dd1f0739b0e62d112a0","articleId":2220,"userId":3326,"content":"[@zy445566](/user/zy445566) \r\n多谢","createdAt":1595317713395},{"id":10373,"originId":"5f0e81fcf0739b0e62d10571","articleId":2221,"userId":383,"content":"rc-form\r\nhttps://www.npmjs.com/package/rc-form","createdAt":1594786300721},{"id":10374,"originId":"5f1112144b61050e36e7adf9","articleId":2221,"userId":513,"content":"[@vanishcode](/user/vanishcode) 感谢，我去试了一下，但\"手工\"的程度很高，不晓得有没有方便的  「表单设计器或工具」，感谢","createdAt":1594954260052},{"id":10375,"originId":"5f0eceaf4b61050e36e7aa4a","articleId":2222,"userId":1104,"content":"restful是一种约束、规则。你想放在body里，你放就好了。不影响啥，问题的关键是要有统一的规则。\r\n当然，遵从已经制订好的规则，是一个不错的选择。","createdAt":1594805935359},{"id":10376,"originId":"5f0fcbc2f0739b0e62d108f6","articleId":2222,"userId":3327,"content":"我看egg里面是轻质带后面的ID参数的，我想就是能不能不严格遵守这个约定，在同个url下crud统一。我看源码里面对put、patch、deleted是必须带的","createdAt":1594870722521},{"id":10377,"originId":"5f0fccdc4b61050e36e7abd0","articleId":2222,"userId":358,"content":"你有自己的约定，就自己封个类似的上层方法，里面自己调用 router 的方法去注册就好了。\r\n\r\nhttps://github.com/eggjs/egg-router/blob/master/lib/egg_router.js","createdAt":1594871004683},{"id":10378,"originId":"5f0feaaf4b61050e36e7ac37","articleId":2222,"userId":3327,"content":"好的，谢谢，我就是想偷懒看看有没有现成的","createdAt":1594878639395},{"id":10379,"originId":"5f10f41c4b61050e36e7ad5c","articleId":2222,"userId":26,"content":"很多http客户端或服务端不支持delete中放数据，同理get也是，但http是自由的，rest只是约束和规范。就像阿里的API一样，全是get，一样做得事情让你很舒服。但遵循规范，和标准化，是提升竞争力和生产力的捷径。","createdAt":1594946588993},{"id":10380,"originId":"5eef22d6472c7975b04b6ab0","articleId":2223,"userId":711,"content":"[@zuohuadong](/user/zuohuadong)","createdAt":1592730326859},{"id":10381,"originId":"5eef758113f8b244e57cad43","articleId":2223,"userId":1980,"content":"作为用过 nestjs 的开发人员，\r\n我认为框架有两个优点 \r\n第一 蹭了一波 typescript 的热度。\r\n第二 它的标准化使的开发的流程非常方便，特别是针对流动性比较大的公司来说这是个好事，koa 和 express 你非常自由这导致了大家开发的时候有自己的一套开发方式（比如，不同的分层，文件命名，项目整体结构），如果制定项目的人走了，经过几波换人会不会把这个项目改的面目全非？\r\n针对第二点我深有体会，所以在大公司里面任职的时候我们都是建议用一些标准化规则的框架。\r\n开发人员不要限制于框架，我们要看到整体的好处和坏处然后针对当下的项目做出一个正确的抉择\r\n希望我的回答能帮助你\r\n","createdAt":1592751489194},{"id":10382,"originId":"5ef007b713f8b244e57cadfb","articleId":2223,"userId":33,"content":"全栈ts效率杠杠的你说呢","createdAt":1592788919020},{"id":10383,"originId":"5ef046cd13f8b244e57caeb0","articleId":2223,"userId":590,"content":"nestjs在国内的未来不见得会很好，因为缺少布道者，另一方面是国内有阿里egg.js、midway的竞争。如果从企业级开发的角度来看，nest.js的理念比其他node.js web框架都好太多了","createdAt":1592805069684},{"id":10384,"originId":"5ef050b4472c7975b04b6cb5","articleId":2223,"userId":21,"content":"[@davanchen](/user/davanchen) \r\n\r\n目前V2的nestjs的风评比其它框架要好一些，这些人就是潜在的nestjs布道者。\r\n\r\n虽然nestjs我也没用过，但是如果非要nest和egg，midway选一个，看过他们的风评后，可能就选择nestjs了。\r\n\r\n比如：\r\n* https://www.v2ex.com/t/676667?p=1\r\n* https://www.v2ex.com/t/681393?p=1\r\n\r\n但老实说他们的骨架都不算轻，非必要，我可能都不会选","createdAt":1592807604397},{"id":10385,"originId":"5ef0575c472c7975b04b6cd4","articleId":2223,"userId":590,"content":"[@zy445566](/user/zy445566) nest.js的更新非常非常的频繁，这说明社区活跃度很高。我们团队18年刚开始用的egg.js，我为此开发了上层的框架，后来发现nest.js早就把这些事情都做好了，比如装饰器路由、Exception filters、Pipes、Guards、Interceptors，","createdAt":1592809308443},{"id":10386,"originId":"5ef15fc7472c7975b04b6eb3","articleId":2223,"userId":2210,"content":"TS的稍微大点的服务端工程，NestJS应该是必学科目了吧。作为前端来说nodejs是必学的。","createdAt":1592876999584},{"id":10387,"originId":"5ef17e78472c7975b04b6f54","articleId":2223,"userId":528,"content":"跟 Angular 一样，都是国内布道的少，但是不能掩饰他们的优秀。\r\n\r\n现在 Angular 加 Nestjs 基本是标配了，真正的前后端统一，风格统一，TS 统一，开发快、集成好，非常舒服。\r\n\r\n希望有意愿的都去尝试一下。","createdAt":1592884856809},{"id":10388,"originId":"5ef1b5fa472c7975b04b71d4","articleId":2223,"userId":52,"content":"布道者+1","createdAt":1592899066746},{"id":10389,"originId":"5ef1c7b813f8b244e57cb2c5","articleId":2223,"userId":1079,"content":"挺好的，但如果不熟悉 JavaSpring 的话， 上手需要一定成本。不过我觉得挺像 Midway.js，我 IOC 是看 Midway 的，有这一专题的文档，你可以找找看。nestjs 的生态是基于 Express， Midway 是基于 koa 和阿里的 egg。","createdAt":1592903608765},{"id":10390,"originId":"5ef226d413f8b244e57cb344","articleId":2223,"userId":590,"content":"[@jaylin1011](/user/jaylin1011) nestjs不仅支持express,也支持号称目前最快的node.js web框架fastfiy，当然也可以自己写个适配器支持koa，相比midway有更高的自由度，nest.js最大的问题可能确实如你所言入门成本有点高","createdAt":1592927956039},{"id":10391,"originId":"5ef2b3c713f8b244e57cb392","articleId":2223,"userId":2119,"content":"nestjs 框架本身的设计很优秀，国内的话还是缺少有分量的人和企业背书","createdAt":1592964039179},{"id":10392,"originId":"5ef2c3e2472c7975b04b733e","articleId":2223,"userId":545,"content":"[@m1911star](/user/m1911star) 跟 angular 比还是差那么点意思 。 Ioc 实现比 ng 差很多~","createdAt":1592968162580},{"id":10393,"originId":"5ef2f54b472c7975b04b742b","articleId":2223,"userId":2119,"content":"[@zuohuadong](/user/zuohuadong) 是，Angular 本身是非常优秀的，奈何国内也同样的不是那么火，Angular + Nest 搭配 https://nx.dev/ 一起食用，比较香","createdAt":1592980811251},{"id":10394,"originId":"5ef74fac13f8b244e57cba2c","articleId":2223,"userId":590,"content":"[@zuohuadong](/user/zuohuadong) Nest. js的容器设计确实不够合理，不支持动态绑定，有点死板对一些设计就不太好实现","createdAt":1593266092858},{"id":10395,"originId":"5ef918cb472c7975b04b7e40","articleId":2223,"userId":688,"content":"[@jaylin1011](/user/jaylin1011) 之前玩这块的时候做了些ts中ioc相关的笔记：https://github.com/wujohns/ioc-note","createdAt":1593383115644},{"id":10396,"originId":"5efaa16e13f8b244e57cc37a","articleId":2223,"userId":36,"content":"nest确实还不错","createdAt":1593483630575},{"id":10397,"originId":"5efb2e3313f8b244e57cc5f9","articleId":2223,"userId":523,"content":"不管怎么说，对于大型应用还是比较好的","createdAt":1593519667461},{"id":10398,"originId":"5efe88e8b2a7c073cb32a4a4","articleId":2223,"userId":711,"content":"以后node应用场景会越来越少吗","createdAt":1593739496004},{"id":10399,"originId":"5f001a7fb2a7c073cb32a7e1","articleId":2223,"userId":1104,"content":"看了一圈好多人都捧一踩一。\r\n先说结论，egg+ts.\r\nnest,midway,egg都调研过，最后选了egg，用了半年多以后，上了ts。\r\n未来依然会egg+ts走起，直到serverless玩的6了。\r\n脱离业务讨论框架，没啥意义。\r\n我司就是做普通业务的，数据库增删改查，并发小，用户少，我egg一把梭香得不得了。\r\n开发快，维护方便，学习曲线平滑，代码量少。\r\n再说个缺点，今年我在的地方，人不太好招了。","createdAt":1593842303235},{"id":10400,"originId":"5f0036c5b2a7c073cb32a859","articleId":2223,"userId":545,"content":"[@wbget](/user/wbget)  不能说是捧一踩一，主要还是 前端对 后端接触少，初期学的话 觉得 egg.js 简单，不能理解 nest.js 和 midway.js 那些设计思想。\r\n等后端开发几年后，又会考虑维护问题，各种代码复用，这时候，就能理解 nest.js 和 midway.js 的设计理念了。\r\n这点上你看 egg 和 nest.js 的增速就明白了。  而 阿里对egg 的定位也是 框架的框架。\r\n所以 为什么 java 那么多年，最后火的是 spring ，并不是没有道理的。","createdAt":1593849541740},{"id":10401,"originId":"5f003f30b2a7c073cb32a89a","articleId":2223,"userId":1104,"content":"[@zuohuadong](/user/zuohuadong) 你说的这个点没错。\r\n后端开发的话，nest设计的确实很好。\r\n我这里的回答，有一个大前提，就是前端。\r\n就好比我司，后端大量的工作云服务商在做，各种控制台无脑用，sdk接就完事了。对于我们这种小企业，成本合理，最重要的是心智负担骤降。\r\n说实话，我司用node更多的是作为粘合剂，web框架。\r\n真要是某个业务需要后端做大量工作，会考虑nest,midway类的框架，不过大概率最后会用java做，吃了地域的亏。","createdAt":1593851696710},{"id":10402,"originId":"5f029228b2a7c073cb32ac5c","articleId":2223,"userId":3217,"content":"我觉得这个框架真的很好","createdAt":1594004008780},{"id":10403,"originId":"5f0564da13f8b244e57cdba3","articleId":2223,"userId":711,"content":"再来点人讨论讨论","createdAt":1594189018172},{"id":10404,"originId":"5f0fb121f0739b0e62d108a0","articleId":2223,"userId":711,"content":"起","createdAt":1594863905937},{"id":10405,"originId":"5f0ed1b34b61050e36e7aa78","articleId":2224,"userId":3328,"content":"https://www.npmjs.com/package/graphql-type-json 用这个返回一个json类型","createdAt":1594806707368},{"id":10406,"originId":"5f0faaa8f0739b0e62d10880","articleId":2224,"userId":510,"content":"[@iyangsheng](/user/iyangsheng) 谢谢大佬    这样感觉不如把原始数据传到前端让前端生成树结构了","createdAt":1594862248446},{"id":10407,"originId":"5f0c5bd4c9274551114910cb","articleId":2225,"userId":358,"content":"helper 当时的定位会接近给模板用的 helper 方法。\r\n\r\n如果要 utils 的话，可以参考这篇文章扩展下：https://zhuanlan.zhihu.com/p/153322661","createdAt":1594645460420},{"id":10408,"originId":"5f0d4dffc92745511149121d","articleId":2225,"userId":541,"content":"utils 定位的函数直接import就好了吧，helper感觉就是模板环境比较必要，就是比较依赖上下文的函数放helper","createdAt":1594707455356},{"id":10409,"originId":"5efe9a1513f8b244e57ccd6b","articleId":2226,"userId":314,"content":"这个就看你对哪个比较熟了，熟练度高的开发效率就高","createdAt":1593743893908},{"id":10410,"originId":"5eff2b9fb2a7c073cb32a6cf","articleId":2226,"userId":3,"content":"我感觉vue最简单，入手非常快。\r\n\r\n不过我没用过ng","createdAt":1593781151964},{"id":10411,"originId":"5f003729b2a7c073cb32a862","articleId":2226,"userId":545,"content":"[@darrenliuwei](/user/darrenliuwei)  vue 用 js ，开发效率最高，适合一次性项目。\r\nangular 用 ts 开发效率最低。 但后续最好维护，适合大项目。","createdAt":1593849641282},{"id":10412,"originId":"5f004da1b2a7c073cb32a8dd","articleId":2226,"userId":3,"content":"[@zuohuadong](/user/zuohuadong) vue也一样可以用ts啊","createdAt":1593855393382},{"id":10413,"originId":"5f0103bdb2a7c073cb32a97d","articleId":2226,"userId":110,"content":"开发不光看框架本身吧，还要看生态圈。毕竟很多自己想写的内容已经有别人写了。真正用熟了我觉得这几个框架开发效率差得不算太多。\r\n生态圈 react > vue > ng\r\n学习曲线 vue < react < ng\r\n不过 ng 也有一些优点，比如内部集成了很多东西都规范化了，大型企业级开发还是有点帮助的\r\n最近也有一些新的框架看着不错，比如 svelte。也类似于 vue，但是这个框架编译后会“自动消失”，也就是说只把需要的功能，直接编译成js生成到代码里。所以生成的文件非常小，执行效率比其他框架快。开发起来和 vue 有点类似也有单文件模板。不过生态圈略差。\r\n我个人现在比较倾向于基于 vue + nuxt 的开发，后端偶尔用 nestjs。感觉整体开发效率还行","createdAt":1593902013841},{"id":10414,"originId":"5f01886b13f8b244e57cd2b9","articleId":2226,"userId":107,"content":"react需要熟悉下jsx，然后你就可以自由的飞翔了，all is js，不过项目大之后还是需要搭配一些辅助框架的，比如 concent\r\nhttps://github.com/concentjs/concent\r\n一个内置依赖收集，可预测、零入侵、渐进式、高性能的react开发框架，帮助你更轻松的开发复杂的应用\r\n\r\n\r\n","createdAt":1593935979654},{"id":10415,"originId":"5f02a059b2a7c073cb32ac92","articleId":2226,"userId":525,"content":"同意楼上的观点，但是个人认为react的生态更加丰富，vue的生态则有局限性，很多方法/指令都集成好了","createdAt":1594007641516},{"id":10416,"originId":"5f02b86ab2a7c073cb32acc0","articleId":2226,"userId":545,"content":"[@darrenliuwei](/user/darrenliuwei)  跟angular 的ts 支持不能比~   angular 你只能 ts ~\r\n而且 ng 全家桶 rxjs 这些也都集成了","createdAt":1594013802213},{"id":10417,"originId":"5f08388abe4e8d091f128716","articleId":2226,"userId":182,"content":"个人建议Vue。尤其是在国内，Vue的生态好像更强（当然，Vue在国外也很流行）。","createdAt":1594374282531},{"id":10418,"originId":"5f0bccf0c927455111490d66","articleId":2226,"userId":545,"content":"[@codenode88](/user/codenode88) 国内 vue>react>angular  国外  react>angular>vue ","createdAt":1594608880316},{"id":10419,"originId":"5f0bf183e39d0e5152203493","articleId":2226,"userId":876,"content":"开始觉得react很难学，后来学会了就真香，配合parcel简直又干净又舒服","createdAt":1594618243356},{"id":10420,"originId":"5f0c0408e39d0e51522034f8","articleId":2226,"userId":22,"content":"你熟悉哪个，哪个就效率高","createdAt":1594622984606},{"id":10421,"originId":"5f0d0d15e39d0e5152203719","articleId":2226,"userId":33,"content":"vue是快，但ts集成不好可能调bug花费时间更长，，\r\nreact和 ts集成最好，但是框架提供内容较少，写起来稍慢一些\r\nangular 集成ts，bug率低，写起来没有vue快（毕竟vue是优化版),和react差不多。提供内容较全，后期会好维护些\r\n总结：项目不大字段不多凭记忆就能记清全部字段那种直接vue。。项目复杂开发人员少想稳中带皮的react。。后期迭代无数次那种angular","createdAt":1594690837444},{"id":10422,"originId":"5f0d0d7ee39d0e515220371d","articleId":2226,"userId":33,"content":"来自三种框架都在公司写过的游戏工程师。。","createdAt":1594690942438},{"id":10423,"originId":"5f07d265f9700d0938eb3f18","articleId":2227,"userId":545,"content":"后端 纯 js 真的有点虚。\r\n\r\n后端用的话 nest.js  fastify 可以考虑","createdAt":1594348133381},{"id":10424,"originId":"5f0c42a9c927455111490fbe","articleId":2227,"userId":3332,"content":"可以的,  结合 n8n, 可以玩出很多花样,甚至中台都能搞出来","createdAt":1594639017321},{"id":10425,"originId":"5e77595864259617c49a23e4","articleId":2228,"userId":1425,"content":"绑定关系的时候加一个 `as` 别名，查询的时候用上\r\n```\r\nmodel: menuModel,\r\nas 'menu',\r\nattributes: [...]\r\n```\r\n\r\n最后结果就是：\r\n```\r\n{\r\n ...\r\n \"menu\": {\r\n   \"name\": \"xxxxx\"\r\n  }\r\n  ...\r\n}\r\n```","createdAt":1584879960613},{"id":10426,"originId":"5e787f2f58ab6717beb7c3d4","articleId":2228,"userId":433,"content":"[@wiviwiv](/user/wiviwiv) [@Nickynodejs](/user/Nickynodejs) 你好 现在我也有一个问题想问一下  我这绑定关系已经弄好了 但是创建表的时候就会自动出来一个唯一索引，我是软删除 生成的这个唯一索引和我的软删除冲突该这么办？\r\n\r\n","createdAt":1584955183538},{"id":10427,"originId":"5e7a24e764259617c49a2b78","articleId":2228,"userId":1425,"content":"[@nlbydcg](/user/nlbydcg) 是不是没有定义主键或者索引是外键？我经常使用没有遇到过，外键约束可以定义关系时用这个关闭：\r\n```js\r\n{\r\n    foreignKey: 'videoId',\r\n    sourceKey: 'vid',\r\n    constraints: false,\r\n }\r\n```\r\n","createdAt":1585063143002},{"id":10428,"originId":"5f080b2dbe4e8d091f1285e7","articleId":2228,"userId":3334,"content":"请问这问题解决了吗，我也遇到了","createdAt":1594362669272},{"id":10429,"originId":"5f06fec9ab3ed802b534fbdc","articleId":2229,"userId":109,"content":"看业务。没啥（请求）压力能少个东西就少点麻烦。","createdAt":1594293961441},{"id":10430,"originId":"5f07c6edbe4e8d091f12852c","articleId":2229,"userId":21,"content":"尤其是缓存这种东西都是已经无法优化没有办法的办法了","createdAt":1594345197874},{"id":10431,"originId":"5f07d1e9f9700d0938eb3f0d","articleId":2229,"userId":545,"content":"服务体量小的话，redis 可上可不上。\r\n个人比较推荐 typeorm + postgresql  \r\ntypeorm 本身也有查询缓存。postgresql 性能要好很多，尤其是联表查询。","createdAt":1594348009530},{"id":10432,"originId":"5d144cf2cdb1f967c15763b9","articleId":2230,"userId":3336,"content":"set(this: Modal, val) {\r\n  ...\r\n}","createdAt":1561611506625},{"id":10433,"originId":"5d1457cdcdb1f967c15763e1","articleId":2230,"userId":1104,"content":"[@ekoneko](/user/ekoneko) 感谢，还真的可以，是ts的某种语法糖吗","createdAt":1561614285571},{"id":10434,"originId":"5d1459ca34bca667bc6e32fa","articleId":2230,"userId":3336,"content":"不算语法糖吧...\r\njs 函数中的 `this` 没有办法在定义处被推断\r\n因此 ts 支持显示的声明 this 类型\r\n可以参考文档： https://www.typescriptlang.org/docs/handbook/functions.html","createdAt":1561614794162},{"id":10435,"originId":"5d14602a34bca667bc6e3338","articleId":2230,"userId":628,"content":"不知道你用的是什么数据库.\r\n如果是 mysql 的话, 直接就有 `JSON` 字段类型, 不用这样转换","createdAt":1561616426811},{"id":10436,"originId":"5d14766e34bca667bc6e3443","articleId":2230,"userId":1104,"content":"[@ekoneko](/user/ekoneko) 感谢","createdAt":1561622126239},{"id":10437,"originId":"5d1476e534bca667bc6e344a","articleId":2230,"userId":1104,"content":"[@zhuweiyou](/user/zhuweiyou) 嗯嗯，这里举例说明我想做的事情，类似于这种数据处理。","createdAt":1561622245951},{"id":10438,"originId":"5f038331b2a7c073cb32ae41","articleId":2230,"userId":109,"content":"[@wbget](/user/wbget) TypeScript 方法、函数参数的签名第一个参数可以传入this的类型 \r\n\r\n```ts\r\n// 调用时需要忽略 this 参数\r\nexport function foo(this: SomeType, ) {\r\n}\r\n```\r\n\r\n","createdAt":1594065713092},{"id":10439,"originId":"5f06edbeb2a7c073cb32b74d","articleId":2230,"userId":1104,"content":"[@waitingsong](/user/waitingsong) 谢了老哥，最后在sequelize的issue里问到答案了，就是你说的这样。","createdAt":1594289598672},{"id":10440,"originId":"5f06fd74ab3ed802b534fbd3","articleId":2230,"userId":109,"content":"[@wbget](/user/wbget)  sequelize, TypeORM 对于 nodejs 的通常应用场景来说过重了，学习、编码成本比较高。 我是倾向于 QueryBuilder 类型框架： 同样查询场景足够，复杂查询场景写原生SQL。","createdAt":1594293620697},{"id":10441,"originId":"5efc1935b2a7c073cb329f3a","articleId":2231,"userId":3338,"content":"nodejs 的链路追踪可以看下美团 cat 的实践方式，其中包括 node 链路实践","createdAt":1593579829156},{"id":10442,"originId":"5efc1bab13f8b244e57cc75d","articleId":2231,"userId":3337,"content":"[@koala-coding](/user/koala-coding) 谢谢，我会关注的。","createdAt":1593580459803},{"id":10443,"originId":"5f051fe913f8b244e57cdad0","articleId":2231,"userId":150,"content":"[@koala-coding](/user/koala-coding) 请问可以在哪里看到资料呢","createdAt":1594171369402},{"id":10444,"originId":"5f05371413f8b244e57cdb1a","articleId":2231,"userId":11,"content":"链路追踪试试看 Uber 开源的 Jaeger","createdAt":1594177300695},{"id":10445,"originId":"5ee9f1b913f8b244e57ca2a5","articleId":2232,"userId":358,"content":"只能改为用 egg loader 加载","createdAt":1592390073339},{"id":10446,"originId":"5ee9fe7813f8b244e57ca2b4","articleId":2232,"userId":393,"content":"[@atian25](/user/atian25) 谢谢，我试试，以为能绕过loader的....","createdAt":1592393336612},{"id":10447,"originId":"5eea1210472c7975b04b60ad","articleId":2232,"userId":358,"content":"感觉是你想复杂了，直接举具体的例子再讨论吧","createdAt":1592398352442},{"id":10448,"originId":"5ef1edd213f8b244e57cb30e","articleId":2232,"userId":393,"content":"[@atian25](/user/atian25) \r\n我的场景是：在做导出excel功能时，需要将字段值映射为中文，这个映射的json放在了动态配置的Apollo中，所以我需要curl式获取这个json，json格式例如：\r\n![image.png](//static.cnodejs.org/Fgs6eTTDlOTWGr431OdjvMp4Wo0t)\r\n在app目录下创建了data_model目录，根据controller的层级进行划分，这里会包装数据返回给调用它的controller或service：如sevice对数据库查询的数据在data_model进行包装再返回service。\r\n\r\n所以对于映射json而言：1. 与请求上下文基本无关、2.使用场景中无app、ctx（因为所在的data_model目录未loader）\r\n\r\n回到问题本身：没有请求上下文时，如何使用egg自带的方法如curl（PS：我觉得egg-curl其实和上下文关系并不大）\r\n","createdAt":1592913362180},{"id":10449,"originId":"5ef3003013f8b244e57cb475","articleId":2232,"userId":358,"content":"老实说没太看懂 T_T","createdAt":1592983600733},{"id":10450,"originId":"5ef30a96472c7975b04b748a","articleId":2232,"userId":393,"content":"[@atian25](/user/atian25) 核心就是：想在非app、ctx上下文下，使用egg-curl怎么破/(ㄒoㄒ)/~~\r\n","createdAt":1592986262825},{"id":10451,"originId":"5ef30c3c13f8b244e57cb4a9","articleId":2232,"userId":358,"content":"我的想法是，非 app 的场景变为 app 的场景。\r\n\r\n没看懂的是你既然是 json，怎么写逻辑？ 如果是 json 上面再包一层，那这一层用 loader 来加载，就有 app 了","createdAt":1592986684549},{"id":10452,"originId":"5ef30cb013f8b244e57cb4b3","articleId":2232,"userId":358,"content":"最好是搞个最小化仓库，直接对着代码交流","createdAt":1592986800773},{"id":10453,"originId":"5ef31bab472c7975b04b7532","articleId":2232,"userId":3339,"content":"要不把 data_model 改成 service 得了\r\n\r\n嫌每个请求都会请求 Apollo 的话，可以使用 egg-schedule 定时获取并挂到 app 下面\r\n\r\n讲道理，在 egg 里面最好是把奇奇怪怪的操作都写成 service 来实现，你这真的是想复杂了，，","createdAt":1592990635529},{"id":10454,"originId":"5ef35713472c7975b04b75b3","articleId":2232,"userId":358,"content":"不一定要 service 的，完全可以自定义 loader。\r\n\r\n可以看看 https://github.com/atian25/egg-showcase/pull/13/files 这个示例，简单配下 `config.customLoader` 就可以了有 `ctx.rpc` 和  `app.enum` 等","createdAt":1593005843651},{"id":10455,"originId":"5efd955313f8b244e57ccb12","articleId":2232,"userId":358,"content":"写了篇文章：https://zhuanlan.zhihu.com/p/153322661","createdAt":1593677139432},{"id":10456,"originId":"5efda2af13f8b244e57ccb32","articleId":2232,"userId":1104,"content":"[@atian25](/user/atian25) 刚好碰见了需要loader解决的问题，这文章赞一个。","createdAt":1593680559906},{"id":10457,"originId":"5f03e09e13f8b244e57cd788","articleId":2232,"userId":393,"content":"[@atian25](/user/atian25) 太顶了","createdAt":1594089630871},{"id":10458,"originId":"5f03e4ad13f8b244e57cd796","articleId":2232,"userId":117,"content":"这样子？？\r\n> context.js\r\n```js\r\nmodule.exports = {\r\n  ok: function(data) {\r\n  //这里this就是ctx对象，记住不要使用箭头函数\r\n    return this.response.body = {\r\n      code: 0,\r\n      data: data,\r\n    };\r\n  },\r\n  error: function({\r\n    code = 500,\r\n    msg = '服务器错误',\r\n  } = {}, tip) {\r\n    return this.response.body = {\r\n      code: code,\r\n      msg: tip || msg,\r\n    };\r\n  },\r\n};\r\n```\r\n\r\n> app.js\r\n```js\r\nconst context = require('./app/extend/context');\r\nObject.assign(app.context, context);\r\n```","createdAt":1594090669577},{"id":10459,"originId":"5f03eca7b2a7c073cb32af59","articleId":2232,"userId":358,"content":"为什么要这么写呢","createdAt":1594092711283},{"id":10460,"originId":"5ed4a2d0b703280f0bcb7b43","articleId":2233,"userId":3340,"content":"暂时实在想不到还有什么原因了","createdAt":1590993616790},{"id":10461,"originId":"5ed4a51d82b588109b646ed9","articleId":2233,"userId":3341,"content":"[@Wuxy-Bleu](/user/Wuxy-Bleu) 我记得之前我的阿里云服务好像需要在阿里云上配置端口访问权限","createdAt":1590994205072},{"id":10462,"originId":"5ed4a6c182b588109b646ee4","articleId":2233,"userId":3340,"content":"[@djGithub0727](/user/djGithub0727) 好像是有个啥 安全组策略什么的  我去查查 多谢思路","createdAt":1590994625506},{"id":10463,"originId":"5f03d1d6b2a7c073cb32ae9e","articleId":2233,"userId":2414,"content":"防火墙/组策略，和node/Linux无关。。。。。。","createdAt":1594085846979},{"id":10464,"originId":"5f02ab1713f8b244e57cd4dd","articleId":2234,"userId":13,"content":"在需要对象的地方使用了 null 或 undefined，也就是 **空指针异常**","createdAt":1594010391804},{"id":10465,"originId":"5f02949a13f8b244e57cd490","articleId":2235,"userId":3338,"content":"子表可以通过sequlize控制连接，也就是说有多少子表可以随意的，你可以通过关联的外键去查，有几个外键关联出去，去查表的字段（不过感觉也不是很友好）","createdAt":1594004634431},{"id":10466,"originId":"5efcbfd713f8b244e57cc909","articleId":2237,"userId":3344,"content":"111","createdAt":1593622487576},{"id":10467,"originId":"5efe98aa13f8b244e57ccd62","articleId":2237,"userId":541,"content":"去java社区问好点，这里是js的多","createdAt":1593743530511},{"id":10468,"originId":"5ef96605472c7975b04b7f9b","articleId":2238,"userId":1071,"content":"[Koatty](https://github.com/thinkkoa/koatty) 使用了 \"cron\": \"^1.8.2\"，利用子进程执行计划任务，目前来看还是不错的","createdAt":1593402885375},{"id":10469,"originId":"5efd48f9b2a7c073cb32a1a5","articleId":2238,"userId":117,"content":"[cron](https://www.npmjs.com/package/cron)","createdAt":1593657593154},{"id":10470,"originId":"5efde39e13f8b244e57ccc9c","articleId":2238,"userId":1900,"content":"感谢感谢，我这就试一下！！","createdAt":1593697182591},{"id":10471,"originId":"5efdb38b13f8b244e57ccb85","articleId":2239,"userId":152,"content":"node转发到后端服务器的时候每次都新建一个http连接？  应该有个连接池吧？  而连接建立非常慢可能的原因有很多，建议抓包观察。 ","createdAt":1593684875008},{"id":10472,"originId":"5efdc4b713f8b244e57ccc78","articleId":2239,"userId":21,"content":"接口转发直接用http-proxy，人家都封装好了","createdAt":1593689271676},{"id":10473,"originId":"5efc74d6b2a7c073cb32a03c","articleId":2240,"userId":518,"content":"检查下选中的class 在覆盖下样式 这是前端基础","createdAt":1593603286449},{"id":10474,"originId":"5efd4cf213f8b244e57cc9d0","articleId":2240,"userId":1580,"content":"css 权重高的覆盖权重低的样式 https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity","createdAt":1593658610050},{"id":10475,"originId":"5efc07d313f8b244e57cc72e","articleId":2241,"userId":841,"content":"如果是移动端，试试 ionic-react ","createdAt":1593575379138},{"id":10476,"originId":"5efaaa6b13f8b244e57cc3d4","articleId":2242,"userId":117,"content":"已解决\r\n+ 根目录添加`.jsbeautifyrc`文件\r\n```json\r\n{\r\n    \"brace_style\": \"collapse,preserve-inline\"\r\n}\r\n```\r\n不过require解构还是有相同问题\r\n![截屏2020-06-30 上午10.58.42.png](//static.cnodejs.org/FphrPrFPylMeJ1Xdkn2gLAyjDq7y)","createdAt":1593485931999},{"id":10477,"originId":"5e40f3b0267721420912b2e8","articleId":2243,"userId":205,"content":"支持 use(path, middleware)的router +  koa2-connect + http-proxy-middleware","createdAt":1581314992767},{"id":10478,"originId":"5e411a6b1225c9423dcd9bda","articleId":2243,"userId":875,"content":"[@magicdawn](/user/magicdawn) 大佬，能否详细说说","createdAt":1581324907947},{"id":10479,"originId":"5e416470267721420912b386","articleId":2243,"userId":1093,"content":"在eggjs里面写原生node也行。原生node转发端口的话，可以参考这个 http://blog.star7th.com/2019/06/2356.html","createdAt":1581343856883},{"id":10480,"originId":"5e43a20b267721420912b5a8","articleId":2243,"userId":205,"content":"[@wushanchao](/user/wushanchao) \r\n\r\nkoa 的, egg.js 里能拿到 app 的话也是一样\r\n\r\n```js\r\nconst connect = require('koa2-connect')\r\nconst proxy = require('http-proxy-middleware')\r\nconst mount = require('koa-mount')\r\n\r\n// location /some/path {\r\n//   proxy_pass http://localhost:1337;\r\n// }\r\napp.use(mount('/some/path', connect(proxy({target: 'http://localhost:1337/some/path'}))))\r\n\r\n\r\n// location /some/path {\r\n//   proxy_pass http://localhost:1337/api;\r\n// }\r\napp.use(mount('/some/path', connect(proxy({target: 'http://localhost:1337/api'}))))\r\n```","createdAt":1581490699612},{"id":10481,"originId":"5e5e2b28b5a36940fe1cea87","articleId":2243,"userId":875,"content":"最后使用了插件egg-proxy实现批量转发。\r\n参考配置如下：\r\n```js\r\nexports.proxy = [{\r\n  host: 'http://xxx.xxx.xxx.xxx', \r\n  match: /xxx\\/upload/, \r\n  map(path) {\r\n    const finalPath = path.replace('/xxx/','/v1/api/')\r\n    return finalPath;\r\n  }\r\n}];\r\n```","createdAt":1583229736272},{"id":10482,"originId":"5e5f0ca3a72b853f100458e7","articleId":2243,"userId":117,"content":"http-proxy-middleware","createdAt":1583287459292},{"id":10483,"originId":"5efaa3b113f8b244e57cc387","articleId":2243,"userId":3349,"content":"可以看下 [egg-http-proxy-middleware](https://www.npmjs.com/package/egg-http-proxy-middleware)\r\n* middleware 而非 plugin，保障 middleware 的执行顺序\r\n* 内部处理了 bodyParser 问题\r\n* 100% typescript\r\n* 配置式，配置同 webpack-dev-server","createdAt":1593484209920},{"id":10484,"originId":"5ef89f4613f8b244e57cbe9a","articleId":2244,"userId":1104,"content":"场景是“随心而动”。","createdAt":1593352006449},{"id":10485,"originId":"5ef8b810472c7975b04b7e25","articleId":2244,"userId":3,"content":"egg-mysql只是封装了少量的方法，算是比较的轻，稍微复杂一点的就需要手写sql。（性能稍好点）\r\n\r\negg-sequelize封装的比较多，时间长了，感觉会慢慢忘掉sql。（性能稍差点）\r\n\r\n无论你用任何语言的任何ORM框架，最终都会转换成SQL语句。\r\n\r\n我更加推荐egg-mysql","createdAt":1593358352796},{"id":10486,"originId":"5ef97f3413f8b244e57cc08b","articleId":2244,"userId":3350,"content":"[@darrenliuwei](/user/darrenliuwei) 感谢解惑！","createdAt":1593409332786},{"id":10487,"originId":"5ef9960b13f8b244e57cc129","articleId":2244,"userId":152,"content":"简单的curd可以用sequelize。 稍微复杂一点的sql最好还是自己写sql会更直观一点","createdAt":1593415179328},{"id":10488,"originId":"5ef89ab3472c7975b04b7ddd","articleId":2245,"userId":1129,"content":"123","createdAt":1593350835579},{"id":10489,"originId":"5ef8583a13f8b244e57cbd22","articleId":2246,"userId":268,"content":"https://stackoverflow.com/questions/46922482/cassandra-typeerror-value-argument-is-out-of-bounds","createdAt":1593333818432},{"id":10490,"originId":"5ef1fb97472c7975b04b7289","articleId":2247,"userId":3352,"content":"![20200623205426.jpg](//static.cnodejs.org/FjF3kse12atJCoa9eAIkVlHlHI1L)","createdAt":1592916887142},{"id":10491,"originId":"5ef30a2b13f8b244e57cb49b","articleId":2247,"userId":109,"content":"mongodb 服务端的问题？","createdAt":1592986155192},{"id":10492,"originId":"5ef6e27d13f8b244e57cb9a3","articleId":2247,"userId":11,"content":"我感觉是你用的库比较老，以前的 Node.js 版本里调用 console.log 时会做一个默认的序列化，比如：\r\n\r\n```js\r\nconsole.log({inspect:function(){return 1}})\r\n```\r\n\r\n在 8.x 下会输出 1，这是给个内置的序列化钩子属性 `inspect` 来避免输出一些封装细节。\r\n\r\n但是新版本里用 Symbol 移除了原来默认判断对象 `inspect` 属性的逻辑，所以你在 12.x 下执行：\r\n\r\n```\r\nconsole.log({inspect:function(){return 1}})\r\n```\r\n\r\n输出的就是：`{ inspect: [Function: inspect] }`","createdAt":1593238141879},{"id":10493,"originId":"5ef82b3613f8b244e57cbbce","articleId":2247,"userId":3352,"content":"[@hyj1991](/user/hyj1991) 有启发，使用是从v8开始的，现在服务器node版本到12了，可能就是你说的这个现象。非常感谢，我研究下！","createdAt":1593322294545},{"id":10494,"originId":"5ed5ec5eb703280f0bcb7e95","articleId":2249,"userId":1105,"content":"https://github.com/eggjs/egg/issues/4338\r\n这个是提给天猪的issue，但是我这个好像和他们的不太一样  可能和我ubuntu20系统有关系？ ","createdAt":1591077982581},{"id":10495,"originId":"5ed5ee6382b588109b64723b","articleId":2249,"userId":1105,"content":"![深度截图_postman_20200602141346.png](//static.cnodejs.org/FsFcqQzY_Z0oRa3heKblSa4bWDtn)","createdAt":1591078499709},{"id":10496,"originId":"5ef418e413f8b244e57cb811","articleId":2249,"userId":1424,"content":"先 demsg -T 开一下系统上有什么报错\r\nstrace 启动过程","createdAt":1593055460002},{"id":10497,"originId":"5aeb13e9adea947348e76055","articleId":2250,"userId":91,"content":"0 info it worked if it ends with ok\r\n1 verbose cli [ 'C:\\\\Program Files\\\\nodejs\\\\node.exe',\r\n1 verbose cli   'C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js',\r\n1 verbose cli   'start' ]\r\n2 info using npm@5.6.0\r\n3 info using node@v10.0.0\r\n4 verbose run-script [ 'prestart', 'start', 'poststart' ]\r\n5 info lifecycle cnode@1.0.0~prestart: cnode@1.0.0\r\n6 info lifecycle cnode@1.0.0~start: cnode@1.0.0\r\n7 verbose lifecycle cnode@1.0.0~start: unsafe-perm in lifecycle true\r\n8 verbose lifecycle cnode@1.0.0~start: PATH: C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\npm-lifecycle\\node-gyp-bin;c:\\GitHub\\bbs\\node_modules\\.bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\QCloud\\Monitor\\Barad;C:\\Program Files\\Git\\cmd;C:\\Go\\bin;C:\\nssm-2.24\\win64;C:\\GitHub\\gogs;C:\\mysql;C:\\Program Files\\nodejs\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Users\\Administrator\\AppData\\Local\\GitHubDesktop\\bin;C:\\Users\\Administrator\\AppData\\Roaming\\npm\r\n9 verbose lifecycle cnode@1.0.0~start: CWD: c:\\GitHub\\bbs\r\n10 silly lifecycle cnode@1.0.0~start: Args: [ '/d /s /c',\r\n10 silly lifecycle   'egg-scripts start --daemon --title=egg-server-cnode' ]\r\n11 silly lifecycle cnode@1.0.0~start: Returned: code: 1  signal: null\r\n12 info lifecycle cnode@1.0.0~start: Failed to exec start script\r\n13 verbose stack Error: cnode@1.0.0 start: `egg-scripts start --daemon --title=egg-server-cnode`\r\n13 verbose stack Exit status 1\r\n13 verbose stack     at EventEmitter.<anonymous> (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\npm-lifecycle\\index.js:285:16)\r\n13 verbose stack     at EventEmitter.emit (events.js:182:13)\r\n13 verbose stack     at ChildProcess.<anonymous> (C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\npm-lifecycle\\lib\\spawn.js:55:14)\r\n13 verbose stack     at ChildProcess.emit (events.js:182:13)\r\n13 verbose stack     at maybeClose (internal/child_process.js:947:16)\r\n13 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:236:5)\r\n14 verbose pkgid cnode@1.0.0\r\n15 verbose cwd c:\\GitHub\\bbs\r\n16 verbose Windows_NT 6.3.9600\r\n17 verbose argv \"C:\\\\Program Files\\\\nodejs\\\\node.exe\" \"C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"start\"\r\n18 verbose node v10.0.0\r\n19 verbose npm  v5.6.0\r\n20 error code ELIFECYCLE\r\n21 error errno 1\r\n22 error cnode@1.0.0 start: `egg-scripts start --daemon --title=egg-server-cnode`\r\n22 error Exit status 1\r\n23 error Failed at the cnode@1.0.0 start script.\r\n23 error This is probably not a problem with npm. There is likely additional logging output above.\r\n24 verbose exit [ 1, true ]\r\n","createdAt":1525355497829},{"id":10498,"originId":"5b9f0a204222769e07dd92fa","articleId":2250,"userId":1598,"content":"解决没有","createdAt":1537149472442},{"id":10499,"originId":"5ba18cc037a6965f59051ac3","articleId":2250,"userId":91,"content":"没有，windows下莫名奇妙，大家也都不在windows下整","createdAt":1537313984590},{"id":10500,"originId":"5ef1ab22472c7975b04b70f4","articleId":2250,"userId":3216,"content":"这个问题解决了吗","createdAt":1592896290797},{"id":10501,"originId":"5eec8d6a13f8b244e57ca916","articleId":2251,"userId":33,"content":"where are you from","createdAt":1592561002373},{"id":10502,"originId":"5ee75a9482b588109b648c95","articleId":2253,"userId":523,"content":"可以用队列来解决吧\r\n","createdAt":1592220308582},{"id":10503,"originId":"5ee7653cb703280f0bcb9971","articleId":2253,"userId":388,"content":"从代码层面来做的话，不是不可以，本来想强答一波，但是发现有人和我解决的思路一样，还写了文章，直接祭出完事。\r\n\r\n[Node.js 中使用 Redis 来实现定时任务](https://segmentfault.com/a/1190000002890750)","createdAt":1592223036047},{"id":10504,"originId":"5ee8a5bf472c7975b04b5b15","articleId":2253,"userId":113,"content":"可以采用队列模块bull，支持可重复任务的调度","createdAt":1592305087549},{"id":10505,"originId":"5ee879ec472c7975b04b599d","articleId":2254,"userId":630,"content":"```\r\nReflect.setPrototypeOf(HTMLScriptElement, new Proxy(HTMLScriptElement.prototype, {\r\n\t...\r\n}));\r\n```\r\n重新翻了一下文档，用Reflect.setPrototypeOf解决了\r\n","createdAt":1592293868495},{"id":10506,"originId":"5ee75a4282b588109b648c91","articleId":2255,"userId":523,"content":"其实nestjs的官方文档就有很多实现了，学会这些也就差不多能满足各种需求了","createdAt":1592220226664},{"id":10507,"originId":"5b1a31b55cd02be6409012ff","articleId":2256,"userId":11,"content":"流式处理上传文件的话，可以参考下这个模块 [co-busboy](https://www.npmjs.com/package/co-busboy)","createdAt":1528443317304},{"id":10508,"originId":"5b1a33b85cd02be640901301","articleId":2256,"userId":3356,"content":"[@hyj1991](/user/hyj1991) 谢谢回答，我主要是想了解其中的原理，想自己写出来","createdAt":1528443832977},{"id":10509,"originId":"5b1a50b929e6e510415b295f","articleId":2256,"userId":635,"content":"我也挺想知道 solution 的，以下是能够重现楼主环境的程式。有兴趣的小伙伴欢迎一起来动动脑。\r\n\r\n### main.js\r\n\r\n```javascript\r\nconst http = require('http');\r\nconst fs = require('fs');\r\n\r\nconst app = http.createServer((req, res) => {\r\n    const writeStream = fs.createWriteStream('./output', { encoding: 'utf-8' });\r\n    req.pipe(writeStream);\r\n    return res.end('Write data in to output');\r\n});\r\n\r\napp.listen(3000);\r\n```\r\n\r\n### test.js\r\n\r\n```javascript\r\nconsole.log('test');\r\n```\r\n\r\n### terminal\r\n\r\n```shell\r\n# terminal A 启动 node http server\r\n> node main.js\r\n\r\n# terminal B 发送上传 test.js 的 request\r\n> curl --form \"data=@test.js;type=application/javascript\" http://localhost:3000\r\n> cat ./output\r\n--------------------------f05ad9c9cfdbd95d\r\nContent-Disposition: form-data; name=\"data\"; filename=\"test.js\"\r\nContent-Type: application/javascript\r\n\r\nconsole.log('test');\r\n--------------------------f05ad9c9cfdbd95d--\r\n```","createdAt":1528451257433},{"id":10510,"originId":"5b1a68955cd02be64090130f","articleId":2256,"userId":3356,"content":"[@grass0916](/user/grass0916) 如果监听data方法的时候，可以处理二进制，但是有内存限制，还有一种方法是自己实现pipe方法，但是我觉得都有点麻烦，所以我发帖想问下，看是不是有更简单的办法","createdAt":1528457365429},{"id":10511,"originId":"5b1a8f358a4f51e140d946ba","articleId":2256,"userId":1375,"content":"#### 工作流程及原理：\r\nClient 通过 formdata上传文件，后端从 header 中获取 boundary 就是你上面看到的 '----WebKitFormBoundaryAJSeHnZnCPWC4Avx'，request 是 readableStream，然后通过 boundary 切割流形成多个part (实战里每个formdata最多上传200多个part，多了就有问题了)，每个 part 都是从 Content-Disposition: form-data; name=\"FileData\"; filename=\"test.js\"那一行开始到下一个boundary之前。有 filename 的是文件流，没有 filename 的就是普通 filed。\r\n\r\n#### PS：\r\nformdata的格式是严格按照规范来的，如果想自己拼接 formdata 的话需要注意 boundary 的长度是固定值 52，还需要注意 /r/n 符号。可以自己打印一个标准的 formdata 看一下结构。后端校验 formdata 对不对最好在 header传上 content-length。nodejs 上传文件的库都是继承于 dicer 库(用 es5、eventEmitter 写的，遗憾的是我没把源码读完)","createdAt":1528467253830},{"id":10512,"originId":"5b1a907c5cd02be640901318","articleId":2256,"userId":1375,"content":"node 在流 这块处理用 pipe 真的很棒，文件就算很大，用 req.on('data') 不断的写入文件也不至于内存爆掉（write这块是有个内置固定内存的buffer），你是不是都写入一个变量里了。","createdAt":1528467580816},{"id":10513,"originId":"5b1de90329e6e510415b29c3","articleId":2256,"userId":3356,"content":"[@mosaic101](/user/mosaic101) 多谢回复，最开始我用的是data事件时将所有有的buffer添加到内存，这样肯定是不行的，后来采用边读取边writeableStream，这种方式当读取的速度大于写入的速度的时候一样会爆内存，所以采用了pipe的方式，但是pipe方式无法处理传过来的二进制文件，无法提取到真正文件的数据流。","createdAt":1528686851404},{"id":10514,"originId":"5b1dec365cd02be64090137c","articleId":2256,"userId":3357,"content":"同问，我从`busboy`源码找到这里[/lib/types/multipart.js](https://github.com/mscdex/busboy/blob/master/lib/types/multipart.js)，但是没看懂。\r\n\r\n-----\r\n再看的时候发现这个模块[dicer](https://github.com/mscdex/dicer)，好像有惊喜，我先去看看。","createdAt":1528687670786},{"id":10515,"originId":"5ee744dfb703280f0bcb994c","articleId":2256,"userId":3356,"content":"已经解决了我的问题，是通过转换流（Transform）解决的。\r\nreq.pipe(ts).pipe(ws);","createdAt":1592214751470},{"id":10516,"originId":"5ee7153bb703280f0bcb98d1","articleId":2257,"userId":11,"content":"试试看 https://zhuanlan.zhihu.com/p/147576798 这个","createdAt":1592202555050},{"id":10517,"originId":"5ee5c0edb703280f0bcb96fc","articleId":2258,"userId":1744,"content":"```javascript\r\nReflect.apply(target, context, [n, ...args])\r\n```\r\n问题在这一句，target 是 tailFibonacci 函数，这里让原函数自己去递归，跟代理没关系了。","createdAt":1592115437381},{"id":10518,"originId":"5ee62b3eb703280f0bcb9782","articleId":2258,"userId":1079,"content":"恩恩感谢，get 到你的思路。\r\n其实我的初衷是递归的时候原函数先尝试获取缓存，没有命中才真正执行计算，所以自以为每次递归原函数也会经过代理。\r\n但我尝试递归代理也没能真正读取到，感觉代理不适合这个场景。\r\n目前成功的方式是不用代理，将缓存和功能实现在原函数内部耦合。\r\n```js\r\nlet count = 0;\r\nconst fibonacci = (N, cache = new Map()) => {\r\n  cache.set(0, 1).set(1, 1);\r\n\r\n  if (N <= 1) {\r\n    return 1;\r\n  }\r\n\r\n  const memorize = n => {\r\n    if (cache.has(n)) {\r\n      count++;\r\n\r\n      return cache.get(n);\r\n    }\r\n\r\n    return cache.set(n, memorize(n - 1) + memorize(n - 2)).get(n);\r\n  };\r\n\r\n  return memorize(N);\r\n};\r\n\r\nconsole.log(fibonacci(1));\r\nconsole.log(fibonacci(2));\r\nconsole.log(fibonacci(3));\r\nconsole.log(fibonacci(4));\r\nconsole.log(fibonacci(5));\r\n\r\nconsole.log('缓存命中数：', count);\r\n\r\n```","createdAt":1592142654420},{"id":10519,"originId":"5ee0aa3082b588109b648364","articleId":2259,"userId":358,"content":"因为 ctx 是请求相关的。","createdAt":1591781936884},{"id":10520,"originId":"5ee1c69582b588109b64849f","articleId":2259,"userId":89,"content":"http是无状态的，每次请求都有独立的ctx的","createdAt":1591854741234},{"id":10521,"originId":"5ee623edb703280f0bcb9773","articleId":2259,"userId":851,"content":"如果你不希望A用户和B用户访问同一个路由的时候，身份信息、返回结果一样的话。","createdAt":1592140781062},{"id":10522,"originId":"5ecf816f82b588109b646740","articleId":2260,"userId":545,"content":"开发过程中一般都是文件监听，近似实现所谓的实时更改。 \r\n而且开发过程中，v8 并不容易生成缓存，JIT 也是需要时间的。\r\n基本上，大部分代码，编译后都会做优化，比如 C 有很多级别的优化，开发过程中肯定以时间为准。如果开发过程中生成代码就做了高级别的优化，编译可能得几个小时了。\r\n\r\n说白了，就是目标不一样。 \r\n\r\n开发环境像自行车，转弯灵活，跑起来慢。\r\n生产环境像飞机，（编译）起飞准备时间长，跑起来快。","createdAt":1590657391392},{"id":10523,"originId":"5ed1216bb703280f0bcb76c9","articleId":2260,"userId":3361,"content":"楼上的想当然了 electron的v8可分不出来你是开发环境还是打包后，实际上，开发时调用的electron可执行文件跟打包后的大概率是同一个\r\n\r\n回到楼主的问题，你应该是开发的时候webpack-dev-sever会频繁的刷新页面，这会导致渲染进程的node 异步api会出问题，同步api则工作正常，\r\n而打包后页面应该就很少刷新了，除非你代码中手动reload\r\n你可以试试`app.allowRendererProcessReuse = false`\r\n\r\n参考[https://github.com/electron/electron/issues/22119](https://github.com/electron/electron/issues/22119)\r\n\r\n","createdAt":1590763883455},{"id":10524,"originId":"5ee357c3b703280f0bcb94e8","articleId":2260,"userId":3360,"content":"[@pink-puppy](/user/pink-puppy) 我在createWindow中加的 app.allowRendererProcessReuse =false;实测没啥效果","createdAt":1591957443506},{"id":10525,"originId":"5ee2fb0b82b588109b64872e","articleId":2261,"userId":3320,"content":"各位大佬们有啥建议吗？是做单机的多线程，还是需要前面有个lb切流量，又或者两者不冲突","createdAt":1591933707294},{"id":10526,"originId":"59b93e72e483de1267984602","articleId":2262,"userId":363,"content":"事件循环机制不止node有，你可以看安卓的loop epoll\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1505312370021},{"id":10527,"originId":"59b94911b1a5852e67bb7f74","articleId":2262,"userId":11,"content":"io 操作没完成怎么能说 loop 中就没有事件了？io 事件不还在么，当然不会退出了。\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1505315089842},{"id":10528,"originId":"59b949683c896622428ec6e3","articleId":2262,"userId":11,"content":"想要看到更多细节建议直接翻源代码吧，你想知道的在 node.cc 和 core.cc 两个文件里写的很清楚\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1505315176206},{"id":10529,"originId":"59b9d73ecc7057e50a717e71","articleId":2262,"userId":3362,"content":"[@zswnew](/user/zswnew),[@hyj1991](/user/hyj1991) 嗯，书中说事件循环检查观察者有没有事件，事件是在IO完成后放入观察者中。\r\n另外，他说事件循环是在进程启动后就开始，循环又在javascript线程中执行，我纳闷这样不阻塞吗，所有才怀疑是在程序最后才生成循环的？\r\n我再看看代码琢磨一下，谢谢2位！","createdAt":1505351486182},{"id":10530,"originId":"59b9f805cc7057e50a717e7e","articleId":2262,"userId":1215,"content":"我只能说用现实例子来类比复杂的 eventloop 过程是有点强人所难，因为意思大概能到，但实际上的细节差别可能非常大。\r\n\r\n这个例子中。并不是说没客人来吃饭，就可以下班了。关键还要看前台妹纸，前台妹纸没下班，厨师能下班？\r\n\r\n以定时器为例，当（第一次）执行 setTimeout 的时候，会建立 timer watcher, timer watcher 持有这个 handler。 \r\neventloop 执行的过程中，会询问 timer watcher, 是否有 event，如果有，处理 event，看情况决定是否取消持有 handler(setInterval 会多次产生 event)。\r\n\r\n解除 watcher 对 handler 的持有关系有两种，一种是自然执行结束，另一种是通过 unref。\r\n\r\n当所有 watcher 都不再持有 handler 了，eventloop 就会退出。\r\n\r\n我正在写作第二版的《深浅》，将会更少从感性上去描述这个过程。\r\n\r\n主文件执行后，Node 会主动调用一次 process.nextTick() 来进入 eventloop。","createdAt":1505359877476},{"id":10531,"originId":"59b9fd1bb1a5852e67bb7f86","articleId":2262,"userId":146,"content":"[@JacksonTian](/user/JacksonTian) 期待第二版，必买","createdAt":1505361179602},{"id":10532,"originId":"59ba05123c896622428ec6fc","articleId":2262,"userId":21,"content":"你就这样想吧，非回调函数全部执行了(如果这时遇到回调函数就会塞到一个队列里面，fs的回调除外)，\r\n再用while循环执行回调函数的那个队列（期间可能回调函数会不断生成） 。\r\n这个队列没代码要执行了，while就结束了，接下来就退出进程了。\r\n虽然专业术语可能有偏差和实际运行上有些遗漏，但基本实现你可以这样理解。\r\n而且我这个大白话文版应该很好理解了 哈;)\r\n\r\n接下来，是问答环节：\r\nQ:你纳闷这样不阻塞吗？\r\nA:当然会阻塞,够快不就好了，这也是node不适合CPU密集运算的原因。\r\nQ:读写文件怎么办，这不会阻塞吗？\r\nA:所以fs的回调他是使用线程池啊。\r\nQ:会阻塞干嘛还用队列？\r\nA:这其实是保证了CPU不会在等待的时候浪费","createdAt":1505363218102},{"id":10533,"originId":"59ba0e9e8dd0118d19c45561","articleId":2262,"userId":3362,"content":"[@JacksonTian](/user/JacksonTian) 解析后大概明白了。\r\n[@zy445566](/user/zy445566) 没错，你的理解和我本身的理解是一样的。我纳闷阻塞是因为书中提到while是在node进程启动的时候生成，我就想你这么早就while，下面的代码有机会执行吗？JacksonTian 也回复了，是在主文件执行后才进入eventloop，执行event。待所有event执行完才退出。","createdAt":1505365662997},{"id":10534,"originId":"59ba0eaacc7057e50a717e8d","articleId":2262,"userId":2004,"content":"哈哈，作者本人来了","createdAt":1505365674911},{"id":10535,"originId":"59ba0eed3c896622428ec702","articleId":2262,"userId":3362,"content":"[@ianchn](/user/ianchn) 这才是一个负责任的作者。力挺啊。","createdAt":1505365741812},{"id":10536,"originId":"59ba21f1cc7057e50a717e97","articleId":2262,"userId":1835,"content":"[@JacksonTian](/user/JacksonTian) 什么时候出二呀","createdAt":1505370609902},{"id":10537,"originId":"59bd25d0e7d9a031127eac55","articleId":2262,"userId":2527,"content":"我好像觉得，你在用思考js的套路来思考node的搭建。。。但是，，单纯用js是写不出node来？（比如你考虑执行循环之后阻塞了，是否是在主文件加载完后再执行evenloop），个人觉得node的这种事件循环机制可以看作是另类的系统信号，，至于如何做到这个信号，和程序无关（nodejs代码）和系统有关（node本身），。。当然，我是彩笔，只是凑凑话题，具体以大神为准","createdAt":1505568208060},{"id":10538,"originId":"59bdc9cae7d9a031127eac60","articleId":2262,"userId":537,"content":"我之前关于Node 网络异步IO的分析（参照了社区的文章进行分析）：\r\n[http://luoxia.me/code/2017/07/27/libuv%E7%BD%91%E7%BB%9CIO%E6%9C%BA%E5%88%B6/](http://luoxia.me/code/2017/07/27/libuv%E7%BD%91%E7%BB%9CIO%E6%9C%BA%E5%88%B6/)\r\n\r\n实际上node执行的用户代码是在V8单独的线程执行，node主进程实际上在进行了一系列初始化后，进入了一个event loop，只有当没有任何handle和request的时候，循环才结束。","createdAt":1505610186709},{"id":10539,"originId":"59bdd9a28812ce51127a8f5c","articleId":2262,"userId":358,"content":"[@lianghz](/user/lianghz) 不用谢，我邀请的 😜","createdAt":1505614242342},{"id":10540,"originId":"59c37b87d7cbefc5119645af","articleId":2262,"userId":3363,"content":"[@JacksonTian](/user/JacksonTian) 好奇啥时候出第二版，真的好想买一本","createdAt":1505983367336},{"id":10541,"originId":"59c42da78812ce51127a90dd","articleId":2262,"userId":3130,"content":"[@JacksonTian](/user/JacksonTian) 同样期待，必买啊！！！","createdAt":1506028967860},{"id":10542,"originId":"59c47536e7d9a031127eadfe","articleId":2262,"userId":3364,"content":"哇，我刚看了这本书的时间循环，直接就过去了，为啥我就没有你这样的思考呢，怪不得自己这么菜（佩服lz看的挺仔细的，挺会思考的）？\r\n[@JacksonTian](/user/JacksonTian) 期待作者的第二版","createdAt":1506047286633},{"id":10543,"originId":"5d6e35c3d50f572345911321","articleId":2262,"userId":3157,"content":"[@JacksonTian](/user/JacksonTian) 2019年了，朴大的《深浅》第二版还有吗","createdAt":1567503811268},{"id":10544,"originId":"5ee1a67682b588109b648470","articleId":2262,"userId":393,"content":"[@JacksonTian](/user/JacksonTian) 2020年了，朴大的《深浅》第二版还有吗","createdAt":1591846518996},{"id":10545,"originId":"5ed5b297b703280f0bcb7d9b","articleId":2263,"userId":358,"content":"先定义下『中台』吧","createdAt":1591063191412},{"id":10546,"originId":"5ed5b3cdb703280f0bcb7da9","articleId":2263,"userId":152,"content":"中台？bff ?  ","createdAt":1591063501366},{"id":10547,"originId":"5ed5b42882b588109b64710f","articleId":2263,"userId":89,"content":"1、提供后端服务，egg是ok的.\r\n2、提供api proxy，bff层，egg也是极好的。\r\n\r\n阿里内部的一般中台后端服务都是java做的，但不能一概而论。业务逻辑层可以node做，很多bu都有这样的实践，绝大多数都是基于egg的，还有一部分是基于midway的。\r\n\r\n从你的描述来看，你更多的是希望做后端服务，操作数据库，缓存，mq这种，对于这样的场景用egg是ok的。如果要做到高可用，你还需要很多其他知识，比如数据库如何做ha，ws做ha，都很麻烦的。我以为，这才是node走后端最应该提升的。玩个十年都不过分。","createdAt":1591063592175},{"id":10548,"originId":"5ed5b47d82b588109b64711a","articleId":2263,"userId":541,"content":"我觉得你这个中台听着像后台。。。\r\n传统制造业也要中台了吗","createdAt":1591063677959},{"id":10549,"originId":"5ed5b6a482b588109b647147","articleId":2263,"userId":1636,"content":"[@AnzerWall](/user/AnzerWall) \r\n传统行业的中台有需求，毕竟是甲方，天天和客户打交道，用户变服务也要变。\r\negg刚开始看，感觉还是偏向后端，不知道能不能做中台，redis和socket写在后端项目里，拆个bff层给前台用？做好ha也许可以？","createdAt":1591064228780},{"id":10550,"originId":"5ed5b76782b588109b64714d","articleId":2263,"userId":541,"content":"[@CarlosRen](/user/CarlosRen) 话说你心目中中台的定义是什么。。      我觉得中台跟后台跟后端是啥没关系，任何语言都能搞","createdAt":1591064423786},{"id":10551,"originId":"5ed5ba5382b588109b64715f","articleId":2263,"userId":1636,"content":"[@AnzerWall](/user/AnzerWall) \r\n分三层\r\n业务中台 业务使用数据和服务\r\n数据中台 数据的集中管理，入存管出，BI，数据可视化等等\r\n技术支持中台 底层技术，身份认证，访问控制，IM，消息推送等等\r\n然后觉得后端不写业务，就写基本功能，可以作为底层的中台\r\n不知道我的认知是不是有问题","createdAt":1591065171611},{"id":10552,"originId":"5ed7234f82b588109b647466","articleId":2263,"userId":103,"content":"中台后台XX台的与语言没关系，你需要做的只是改个叫法就行了，以前叫后台，现在叫中台，你可以把service层抽出来叫中台。谁在乎呢？","createdAt":1591157583781},{"id":10553,"originId":"5ed728ca82b588109b647471","articleId":2263,"userId":89,"content":"[@CarlosRen](/user/CarlosRen) 是一定可以","createdAt":1591158986227},{"id":10554,"originId":"5ed9eb4f82b588109b6479c0","articleId":2263,"userId":1104,"content":"前端以外的东西，管他是中台，还是后台，或者是xx台。我们基本都是用eggjs+ts写的。","createdAt":1591339855304},{"id":10555,"originId":"5ee0c3c2b703280f0bcb9047","articleId":2263,"userId":2,"content":"感觉是后台的牙子","createdAt":1591788482094},{"id":10556,"originId":"5ee1a3feb703280f0bcb9137","articleId":2263,"userId":109,"content":"只要能出台，管你啥台","createdAt":1591845886424},{"id":10557,"originId":"5edf018c82b588109b647fd7","articleId":2264,"userId":510,"content":"人工置顶QAQ","createdAt":1591673228300},{"id":10558,"originId":"5edc3ba282b588109b647bf7","articleId":2265,"userId":113,"content":"可以参考Cabloy-Community\r\n演示：[https://community.cabloy.com/](https://community.cabloy.com/zh-cn/index.html)\r\n文档：[https://cabloy.com/zh-cn/articles/community-introduce.html](https://cabloy.com/zh-cn/articles/community-introduce.html)\r\n","createdAt":1591491490013},{"id":10559,"originId":"5ec229c8a87fc8583363cef7","articleId":2266,"userId":26,"content":"丑化混淆是必须的，如果愿意可以用pkg打包，但丑化混淆就差不多了，其实不管怎么样，高手还是会拿到代码的，就看能不能容易把你的license逻辑中的某个Boolean改为true了。所以类似这种需求，编译型语言优先，脚本语言就差了。实在是只有这个技术栈，就丑化混淆+docker+隐藏代码。","createdAt":1589782984642},{"id":10560,"originId":"5ec254ada87fc8583363cfa6","articleId":2266,"userId":40,"content":"[@HobaiRiku](/user/HobaiRiku) 成熟的混淆库有推荐吗？我们现在是使用docker部署的，不过这个和docker部署关系不大吧？\r\n\r\n或者有没有可以单独用编译型语言单独搞个模块来处理这块特殊逻辑，但是没想好怎么处理","createdAt":1589793965734},{"id":10561,"originId":"5ec25e03a87fc8583363cfed","articleId":2266,"userId":26,"content":"[@ZhangDianPeng](/user/ZhangDianPeng) 我这边使用gulp以及gulp-uglifyjs实现丑化，但其实丑化程度还是比较差的，像我对代码熟悉的直接可以修改丑化后的代码，但对于比较复杂的地方改起来还是有点难度，基本上可以让我自己对license部分的逻辑感到困难，也就ok了。看你的业务怎么设计的，可以单独用编译型语言做，但必须要求有限制的业务逻辑完全要使用这种语言去实现，不能和node的服务有耦合，相当于这部分业务将直接调用该服务。","createdAt":1589796355227},{"id":10562,"originId":"5ec4941667c8a45803da0abe","articleId":2266,"userId":3365,"content":"https://github.com/OsamaAbbas/bytenode","createdAt":1589941270471},{"id":10563,"originId":"5ec4f75b67c8a45803da0cc8","articleId":2266,"userId":40,"content":"[@miaowing](/user/miaowing) 这个不错呀，多谢","createdAt":1589966683643},{"id":10564,"originId":"5ec73434a87fc8583363dac4","articleId":2266,"userId":1193,"content":"准备几套代码可以吗？试用版、普通版、专业版、企业版","createdAt":1590113332765},{"id":10565,"originId":"5eca7f4f67c8a45803da15ed","articleId":2266,"userId":40,"content":"[@victoryboss](/user/victoryboss) 不太好搞，目前版本控制都是通过参数配置完成的","createdAt":1590329167879},{"id":10566,"originId":"5edb44a0b703280f0bcb87ef","articleId":2266,"userId":3366,"content":"正好也在做这一块，目前的方案\r\n1.生成配置文件，配置文件关键字段包括机器的硬件码，版本信息，有效时间等等\r\n2.对配置文件进行一定的混淆，然后签名生成 license\r\n3.使用打包工具，如 pkg、nexe等 打包\r\n4.启动项目时校验，然后定时校验一次（校验数据库中是否符合配置文件的规定 比如：用户数等），先对 lecense进行校验，然后校验 里面的硬件码等相关字段。\r\n\r\n但是，所有的手段都有点防君子不防小人，只不过尽量增加小人的门槛而已。一旦pkg等打包工具被攻破，就都是徒劳了。","createdAt":1591428256264},{"id":10567,"originId":"5edb19aab703280f0bcb87a6","articleId":2267,"userId":419,"content":"改用国内的头像服务","createdAt":1591417258313},{"id":10568,"originId":"5edb1a4882b588109b647ae8","articleId":2267,"userId":3367,"content":"[@yuu2lee4](/user/yuu2lee4) 谢谢，可以给个链接？","createdAt":1591417416859},{"id":10569,"originId":"5ed60f62b703280f0bcb7f1d","articleId":2268,"userId":3368,"content":"```\r\nfunction Chain(arg) {\r\n  this.value = arg\r\n}\r\nChain.prototype.add = function (func) {\r\n  this.value = func(this.value)\r\n  return this\r\n}\r\nChain.prototype.valueOf = function() {\r\n  return this.value\r\n}\r\n\r\nnew Chain(data).\r\n    add(dataMsg).\r\n    add(dataFormat).\r\n    add(listFormat).\r\n    valueOf()\r\n```","createdAt":1591086946969},{"id":10570,"originId":"5ed75afcb703280f0bcb81a2","articleId":2268,"userId":510,"content":"[@teenth](/user/teenth) 谢谢 受你的启发又写了一个出来 包含异步的话函数执行的顺序是会变的 ","createdAt":1591171836634},{"id":10571,"originId":"5ed85fdcb703280f0bcb832a","articleId":2268,"userId":3368,"content":"[@zhsonga](/user/zhsonga) 异步可以使用 promise 使用resolve","createdAt":1591238620138},{"id":10572,"originId":"5ed88e48b703280f0bcb8385","articleId":2268,"userId":510,"content":"[@teenth](/user/teenth) add中有异步的话Chain(data).add(dataMsg).add(dataFormat).add(listFormat).valueOf()这种链式的调用方式会出问题","createdAt":1591250504685},{"id":10573,"originId":"5ed9d9e582b588109b64796e","articleId":2268,"userId":3368,"content":"[@zhsonga](/user/zhsonga) 这个肯定得改","createdAt":1591335397663},{"id":10574,"originId":"5ed67e95b703280f0bcb7ff6","articleId":2269,"userId":1079,"content":"1. 标签：node/express/koa/egg/nestjs/midway 按框架之类，或者按功能 node 开发 webpack 打包工具、怎么做代理、云开发？【本人 node 用的熟练度着实不够好】\r\n2. 文章专栏：把帖子和文章专栏区分开，比较明确。\r\n3.  搞个文档板块，把 node 相关文档官网链接之类做成列表页那样展示，带动社区访问动力。\r\n以上之类的。","createdAt":1591115413539},{"id":10575,"originId":"5b852506fad9359e2e83128a","articleId":2270,"userId":31,"content":"https://github.com/xingyuzhe/blog/issues/1\r\n","createdAt":1535452422338},{"id":10576,"originId":"5b8526bc08d0b0fb2d8e6c85","articleId":2270,"userId":3370,"content":"egg.js 够用了。","createdAt":1535452860807},{"id":10577,"originId":"5b85f2a108d0b0fb2d8e6c96","articleId":2270,"userId":1532,"content":"新手适合egg","createdAt":1535505057825},{"id":10578,"originId":"5b85f48908d0b0fb2d8e6c99","articleId":2270,"userId":1598,"content":"选择egg","createdAt":1535505545874},{"id":10579,"originId":"5b862054632c7f422e5b8234","articleId":2270,"userId":109,"content":"egg 有阿里兜底 适合企业应用","createdAt":1535516756790},{"id":10580,"originId":"5b866222632c7f422e5b8258","articleId":2270,"userId":755,"content":"投egg一票","createdAt":1535533602668},{"id":10581,"originId":"5b873d462a585e4e2f26ffd4","articleId":2270,"userId":545,"content":"如果有 java 或者 .net 基础，或者学过 angular ，又或者是喜欢 tyoescript ，建议 nest.js 上手。 ","createdAt":1535589702497},{"id":10582,"originId":"5b87480608d0b0fb2d8e6cfe","articleId":2270,"userId":406,"content":"你们都不考虑loopback 吗","createdAt":1535592454758},{"id":10583,"originId":"5b8758a72a585e4e2f26ffdc","articleId":2270,"userId":158,"content":"建议 nestjs ，长期项目+人员流动，就选nestjs，对团队好","createdAt":1535596711189},{"id":10584,"originId":"5b87590a632c7f422e5b8283","articleId":2270,"userId":801,"content":"我用egg，如果对ts偏爱，可以试试nest。。egg对ts支持不如nest\r\nFYI [Web框架精选TOP10](https://cnodejs.org/topic/5b14cdb78a4f51e140d944fc)\r\n\r\n来自✨ [Node.js开源项目精选](https://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1535596810295},{"id":10585,"originId":"5b8c91724c469ebf3275d0c2","articleId":2270,"userId":1023,"content":"egg相对来说更容易入门。但nestjs的代码组织方式更加优雅，结合TS可以编写出可读性很高的项目代码，更利于维护。","createdAt":1535938930351},{"id":10586,"originId":"5b8ccc0a82f0728f354d7383","articleId":2270,"userId":1559,"content":"原始的express或者koa","createdAt":1535953930863},{"id":10587,"originId":"5b8fc01437b3005a0b0e6bb0","articleId":2270,"userId":3365,"content":"必然 nest","createdAt":1536147476282},{"id":10588,"originId":"5b8fcecd37b3005a0b0e6bbc","articleId":2270,"userId":797,"content":"nest+1","createdAt":1536151245980},{"id":10589,"originId":"5b90a3c637b3005a0b0e6be6","articleId":2270,"userId":545,"content":"[@cnlile](/user/cnlile) 确实没听过，最近社区 nest.js 呼声很高啊。\r\n\r\nloopback  看到  restful  JavaScript  —— 基本上可以放弃了","createdAt":1536205766766},{"id":10590,"originId":"5b912b9a82f0728f354d74d1","articleId":2270,"userId":1591,"content":"egg.js +1   入门学习成本低。\r\n\r\n公司能招到人才是王道。\r\n\r\n","createdAt":1536240538248},{"id":10591,"originId":"5b912da837b3005a0b0e6c2d","articleId":2270,"userId":3144,"content":"egg.js +1   入门学习成本低。   用起来也是非常爽的","createdAt":1536241064802},{"id":10592,"originId":"5b922b3337b3005a0b0e6c67","articleId":2270,"userId":3371,"content":"egg.js\n\r<br><br>来自<a href=\"https://lzxb.github.io/react-cnode/\" target=\"_blank\">react-cnode手机版</a>","createdAt":1536305971471},{"id":10593,"originId":"5b93d21037b3005a0b0e6cbc","articleId":2270,"userId":545,"content":"[@zlnvsheng](/user/zlnvsheng) node.js 确实不好招人。\r\n如果招java 转 node.js 比较好招，而且学习nest.js 2-3 周就可以上手了。\r\n","createdAt":1536414224367},{"id":10594,"originId":"5b93d2574cdb88f72f5a91a2","articleId":2270,"userId":545,"content":"[@gogogosns](/user/gogogosns) 招java 学nest.js 简单。 \r\nnode.js 不好招人。\r\n","createdAt":1536414295333},{"id":10595,"originId":"5b93f9f94cdb88f72f5a91b3","articleId":2270,"userId":3372,"content":"fastify","createdAt":1536424441910},{"id":10596,"originId":"5b9467ec4cdb88f72f5a91b7","articleId":2270,"userId":887,"content":"最近在用nest.js,对ts的支持更好，代码组织也会更好，公司的项目使用这个会比较好","createdAt":1536452588740},{"id":10597,"originId":"5b94883e4cdb88f72f5a91bb","articleId":2270,"userId":1761,"content":"\n        @zhhb\n        \n      @zhhb\n      确实如此\n      来自✨[react-cnode](https://github.com/MMGong/react-cnode)✨\n    \n        来自✨[react-cnode](https://github.com/MMGong/react-cnode)✨\n      ","createdAt":1536460862550},{"id":10598,"originId":"5b94bb75bf116a8c0e425951","articleId":2270,"userId":1698,"content":"不尝试一下AdonisJs么？","createdAt":1536473973931},{"id":10599,"originId":"5b95d44137b3005a0b0e6d2f","articleId":2270,"userId":545,"content":"[@wxs77577](/user/wxs77577)  adonisjs 凉凉了～    之前看这俩框架的时候  nest 3k  star   adonis  4k   现在 adonis 4k多     ,   nest 已经 8k 多了\r\n而且对 ts 不支持","createdAt":1536545857663},{"id":10600,"originId":"5b97263837b3005a0b0e6da7","articleId":2270,"userId":3140,"content":"egg才是王道","createdAt":1536632376890},{"id":10601,"originId":"5b9790cda333b7bd25441f6a","articleId":2270,"userId":545,"content":"[@entrehuihui](/user/entrehuihui) 不是趋势，所有后端框架的最终之路都是像 spring ，请看：\r\nphp 里的laravel \r\nruby 的 rails\r\n现在  node.js 的  nest.js  在走这条路。","createdAt":1536659661900},{"id":10602,"originId":"5b99c3a0a333b7bd25442006","articleId":2270,"userId":845,"content":"选择Koa哈哈","createdAt":1536803744123},{"id":10603,"originId":"5b99cae3f1e8bc7579c78551","articleId":2270,"userId":866,"content":"虽然在用egg  但是对它几乎不维护的egg插件有些反感","createdAt":1536805603567},{"id":10604,"originId":"5b9a03ccf1e8bc7579c78582","articleId":2270,"userId":545,"content":"[@konglover](/user/konglover)  项目小的话无所谓，如果项目大而复杂的话，建议了解下这个： https://cnodejs.org/topic/5b9a0164f1e8bc7579c78581","createdAt":1536820172931},{"id":10605,"originId":"5b9a0f1937b3005a0b0e6f1c","articleId":2270,"userId":10,"content":"> 之前回复过这类问题，这边复制粘贴回复一下~\r\n\r\n技术选型这件事，可以说是  `仁者见仁智者见智`，但也有一些考量在里面。我一般会考虑下面几个点：\r\n\r\n### 功能\r\n\r\n功能是什么？简单说，就是能否满足业务需求，不论 Node 框架 Express / Koa, Python 框架 Django / Tornado / Flask，又或者是 Java 框架 JFinal，都是为了满足业务需求而生。\r\n\r\n所以呢，谈选型是要考虑场景的：\r\n\r\n- 静态服务器，`http-server` 一键启动就够了不是~\r\n- 接口服务器，业务不复杂的，Flask 其实要比 Tornado / Django 更简单、方便？\r\n- 运营后台类，主操作 `CURD`，如果尝试过，会发现 Django 也很方便，定义一下 `model` 基本就完事了~\r\n- 再复杂一些，逻辑不定，关系不一，需要独立开发，且很可能后续调整频繁，这时候就需要自行实现了\r\n\r\n说了这么多，总结起来还是我常说的那句话，`脱离场景谈选型，都是耍流氓`。\r\n\r\n### 生态\r\n\r\n周边生态这件事就很好理解了，就拿常用过的一些东东来说，\r\n\r\n- aliyun oss\r\n- wechat api\r\n- elasticsearch\r\n- socket.io\r\n- redis / mysql / mongodb\r\n- 模板渲染 / 认证 / 权限管理\r\n\r\n业务相关的东西很多的，如果有已经完善的工具，开发可以做到事半功倍，越来越多的公司选择上云，对阿里云的依赖变多，有阿里系的产品支持，很多东西不用自己开发，又或者简单封装即可使用。\r\n\r\n### 社区\r\n\r\nfb 的项目和个人项目选择哪个？不用说，一定是倾向于知名团队的或者企业的，阿里在 Node 社区的贡献度，有目共睹（社区活跃的大佬也是成把抓，没事了私信一下说不定还能勾搭一下？）\r\n\r\n阿里前端业务大多是基于 Egg.js 开发（可以去问 cnode / cnpmjs 的大佬），这方面，持续的投入是看得到的，至少不用担心改天不维护了~\r\n\r\nissue 那边也经常看到 Egg 核心开发者大半夜还在讨论问题，帮忙查找问题的情况用到的同学应该比我更清楚~\r\n\r\n---\r\n\r\n> Egg.js 为企业级框架和应用而生，我们希望由 Egg.js 孕育出更多上层框架，帮助开发团队和开发人员降低开发和维护成本。\r\n\r\n综上，在需要自行开发的项目（我主导或者负责）里，从 1.x 开始，不论是个人还是公司项目，我 **全部** 使用了选择了 Egg。\r\n目前来说依然觉得用的很开心，也很庆幸，并没有因为 KPI 问题而项目暂停？（笑），后续还是看场景，第一选择仍然是 Egg。\r\n\r\n---\r\n\r\n1.插件不更新问题，建议作者转移到这个社区维护的 ORG 里由大家一起维护吧~\r\n\r\n> https://github.com/eggjs-community/README\r\n\r\n2.`小项目无所谓` 这个说法很不认同，双十一中运行的 Egg 项目很小喽？拿一个出来对比一下生产中运行的复杂度和需要应对的流量吗？\r\n\r\n答案是：**无意义。**\r\n\r\n- 讨论项目大小，Office 那种才是真的大项目，然并卵，整个前端也没几个，如果有，欢迎拿出来大家膜拜一下~\r\n- 讨论应对流量，不好意思，拿架构图出来吧，真正的瓶颈从来都是 Database / Proxy / Cache / SLB，需要在框架层面讨论这个的，怕是没法大了。","createdAt":1536823065091},{"id":10606,"originId":"5b9a11e0ce9d14c2254df9d6","articleId":2270,"userId":358,"content":"[@zuohuadong](/user/zuohuadong) 呵呵。。。 原来 egg 所支撑的双十一还有阿里绝大部分的 Web 系统，只是小项目啊","createdAt":1536823776317},{"id":10607,"originId":"5b9a15bfa333b7bd25442048","articleId":2270,"userId":1533,"content":"[@zuohuadong](/user/zuohuadong) 非也，Rails是鼻祖，Spring 是后来者，别搞混了","createdAt":1536824767724},{"id":10608,"originId":"5b9a175a37b3005a0b0e6f28","articleId":2270,"userId":545,"content":"[@atian25](/user/atian25) BAT 真的用什么都成，node.js 原生也好，甚至直接C++ 开撸也罢。 腾讯互娱事业部，还有一堆 C++98 呢。\r\n当然，社区也并不是非你即我，提个建议： egg 的 issues ..... 没 nest.js 回复及时。 另外 egg 第三方插件对 ts 支持确实不够友好。\r\n大公司是可以不管不顾，说一句: 我们xx业务就在用 egg ，能吸引很多粉丝。但生态，对小公司来说，是命～\r\n能在这里问的肯定不是  BAT 等上百亿的互联网公司，那么——小公司，请给我一打  AOP ～","createdAt":1536825178135},{"id":10609,"originId":"5b9a187aa333b7bd2544204d","articleId":2270,"userId":545,"content":"[@YUFENGWANG](/user/YUFENGWANG)  感谢更正～\r\nRails 这货是真被 Ruby 坑惨了～","createdAt":1536825466844},{"id":10610,"originId":"5b9a8314f1e8bc7579c7860d","articleId":2270,"userId":850,"content":"看你想要什么了：\r\n1. 要稳定选egg，底层的 connect、koa 由 egg 团队成员维护。几十个基于 egg 的稳定运行的上层框架，不管是几千 pv 或者 几十亿 pv 的流量都能支撑。\r\n2. 要生态选egg，几百个 egg 插件，基于覆盖所有的应用场景。不管是微服务方案、传统方案、同构方案、GraphQL 等等都覆盖了。\r\n3. 要维护选egg，由于是底层框架的缘故，一般业务上一些能力都会反哺回来，形成良性循环。有问题也会及时回复，每天都有大量更新可看。\r\n4. 要star选 egg，目前准备破万，对于国内的 node 开源项目来说非常不容易。\r\n5. 要运维选egg，完整的日志方案，完善的生命周期，完善监控方案，上 Alinode、Docker 等等都行\r\n6. 要折腾选egg，\r\n\ttypescript - https://github.com/midwayjs/midway \r\n\taop - https://github.com/eggjs/egg-aop \r\n\tswagger - https://github.com/okoala/egg-swagger-doc2 \r\n\tgraphql - https://github.com/eggjs/egg-graphql \r\n\t同构 - https://github.com/alibaba/beidou \r\n\t移动端 - https://github.com/eggjs/examples/tree/master/assets-with-umi \r\n\t中后台 - https://github.com/eggjs/egg-ant-design-pro \r\n\t等等还有许多官方插件正在开放中\r\n7. 要聊天选egg，各大钉钉、微信群，有问题在里面提问基本都能及时回复，国外的库问题基本是异步，而且有时差。\r\n\r\n当然上面都是建议~\r\n","createdAt":1536852756010},{"id":10611,"originId":"5b9b64648f5b0c1c59ea0dcf","articleId":2270,"userId":1591,"content":"[@zuohuadong](/user/zuohuadong) 现在什么学java的学php的学前端的都在学nodejs      nodejs真的要火一把了吗","createdAt":1536910436837},{"id":10612,"originId":"5b9b674937a6965f590518fe","articleId":2270,"userId":3373,"content":"node.js 有这么好嘛？？？","createdAt":1536911177962},{"id":10613,"originId":"5b9b674b37a6965f59051900","articleId":2270,"userId":545,"content":"[@zlnvsheng](/user/zlnvsheng)  在我看来，node.js 下一个强有力的竞争对手应该是 golang 。\r\nnode.js 值得吐槽的地方： express   koa 更像是前端框架，而不适合做大后端。\r\nnest.js 改变了这种局面，只可惜没普及。 \r\n现在区块链和微服务带火了 golang ，nest.js 如果能趁此机会拿下 php/swoole  和部分java 的市场份额，还是有一定机会的。\r\n当然，语言只是工具，我们喜欢的，是 js 通吃的能力。","createdAt":1536911179326},{"id":10614,"originId":"5b9b67cc37a6965f59051907","articleId":2270,"userId":545,"content":"[@author-hao](/user/author-hao) node.js 本来设计不烂， 一是 前端 js 的强势。（浏览器只认 js） 二是 node.js 的库 既有C++ 实现，又有 js 实现十分灵活。 三是 大企业强有力的支持。","createdAt":1536911308967},{"id":10615,"originId":"5b9b7e218f5b0c1c59ea0de6","articleId":2270,"userId":419,"content":"[midyjs](https://midwayjs.github.io/midway/zh/guide.html) 底层eggjs 采用typescript  了解下  也是淘宝的","createdAt":1536917025932},{"id":10616,"originId":"5bcd7f9eede204052db806b5","articleId":2270,"userId":592,"content":"推荐egg.js, \r\n1) egg奉行约定优于配置,功能强大，又十分优雅\r\n2) 有什么问题，在github issue或者官方钉钉群都可以很快得到回复\r\n3) 接入alinode性能平台也十分简单\r\n4) typescript的话，官方也提供了typescript支持，也可以用midwayjs（基于egg）","createdAt":1540194206555},{"id":10617,"originId":"5bce86dbcbff068050fcf1ad","articleId":2270,"userId":1532,"content":"萌新用egg，高手用nest\r\n","createdAt":1540261595331},{"id":10618,"originId":"5bcf36ca580fce4950e22019","articleId":2270,"userId":113,"content":"新手用egg，可以快速上手\r\n高手用egg，可以深入把玩\r\n\r\n团队用Typescript，可以规范代码，但代码没有原生Javascript优雅\r\negg+测试驱动，使用Javascript一样可以写出高质量的大型项目","createdAt":1540306634566},{"id":10619,"originId":"5bcfce9f580fce4950e22026","articleId":2270,"userId":3374,"content":"居然有人说rails学spring，有意思有意思","createdAt":1540345503925},{"id":10620,"originId":"5c429c006955112b99436c12","articleId":2270,"userId":688,"content":"用egg其实也是离不开ts，采用loader的机制如果直接使用js的话，对IDE就太不友好了，随着项目进展有些在插件或自定义的启动中加载的东西越来越多，没有类型声明的帮助写起来真的是顾前不顾后","createdAt":1547869184854},{"id":10621,"originId":"5c42c55a6955112b99436cad","articleId":2270,"userId":545,"content":"[@zhennann](/user/zhennann)  阿里新出了个类似 nest 的框架，midway ","createdAt":1547879770841},{"id":10622,"originId":"5c42c6a23b948a2b4ab6f879","articleId":2270,"userId":545,"content":"[@xpplee](/user/xpplee) \r\negg issues 问题回复不如 nest 。\r\n\r\nnest 现在发布一年就把 egg 打脸了，start 和 下载量都超越。\r\n不过也可以关注下 midway， 吸取了nest 的很多优点。","createdAt":1547880098073},{"id":10623,"originId":"5c52afde05cc322e7b136a5c","articleId":2270,"userId":220,"content":"[@cnlile](/user/cnlile) 如果是资深架构的人员,会问楼主这种问题吗,lb明显太超前,无脑了","createdAt":1548922846574},{"id":10624,"originId":"5c52e57505cc322e7b136bc0","articleId":2270,"userId":1697,"content":"我选 egg","createdAt":1548936565484},{"id":10625,"originId":"5c5427efe6aaad2ea76de8d0","articleId":2270,"userId":1980,"content":"人生苦短 \"抛硬币\"吧!","createdAt":1549019119873},{"id":10626,"originId":"5c57db8505cc322e7b137409","articleId":2270,"userId":109,"content":"[@wujohns](/user/wujohns) egg 官方对于用 TS 重写的呼声是 没有计划。看来类型检查，IDE提示这些痛点对于阿里来说不敏感 。不过我在调试 egg 时比较头疼，不知道参数哪儿会被修改。\r\nhttps://github.com/eggjs/egg-cluster/pull/75\r\n\r\n去年对 TS 呼声还不屑一顾的尤雨溪也食言了：\r\n\r\nhttps://www.zhihu.com/question/310485097/answer/588323325\r\n","createdAt":1549261701391},{"id":10627,"originId":"5c5ff4ad05cc322e7b137a69","articleId":2270,"userId":831,"content":"[@zuohuadong](/user/zuohuadong) 赞，有道理\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1549792429410},{"id":10628,"originId":"5ccba5b45a5bae6e07812861","articleId":2270,"userId":688,"content":"[@waitingsong](/user/waitingsong) 最近用eggjs做了下生产项目，同时也用nestjs做了下业余项目：\r\n1. 其实eggjs和nestjs都是为了解决同一个问题，就是依赖管理\r\n2. 但是eggjs其实更适合工程化，nestjs在路由管理（非集中式）和中间件管理（和controller以及path的书写位置分离）做的很糟糕（有点为了炫技而炫技的嫌疑，脱离了工程需求）。\r\n3. 如果是技术选型的话个人觉得还是eggjs比较合适\r\n\r\n但是也有以下吐槽：\r\n1. nestjs的ioc模式用起来真的很舒服，少了很多需要自己补类型的情况\r\n2. eggjs的cluster管理很令人吐槽，长期强势不接受单进程模式，直到被近期运维生态倒逼才做了出来\r\n3. eggjs的插件需要自己单独对社区已有的做封装（基于koa插件），而用到eggjs的地方一般是公司内部场景，写完这些插件后也会较少开源，大概这也是eggjs插件生态的问题吧（nestjs倒是直接基于express/koa/fastify做了adapter有很多中间件可以直接复用）\r\n\r\n另外是关于依赖管理的一些思考（私货，捂脸逃）：\r\n[https://github.com/wujohns/ioc-note](https://github.com/wujohns/ioc-note)","createdAt":1556850100505},{"id":10629,"originId":"5ccbb3bd776fb66e0d1718a9","articleId":2270,"userId":1734,"content":"[@wujohns](/user/wujohns) 单进程可以打开了吗? 调试的时候多进程真的是烦, 启动慢, 还会有两个core中不知道哪个文件断点会停两次, 本地应该是默认两个子进程.\r\n\"直到被近期运维生态倒逼才做了出来\", 这个真的是, 以后不管是哪个语言, 安安静静单纯写业务就好.\r\n\r\n最后, 感谢写egg的大佬们, 真香.","createdAt":1556853693124},{"id":10630,"originId":"5cce3d855a5bae6e07812c77","articleId":2270,"userId":545,"content":"[@wujohns](/user/wujohns)  egg 也有仿照 nest 的版本，阿里出了 midway 可以了解下~\r\nnest 目前npm 下载量是 egg 十倍之多了~","createdAt":1557020037926},{"id":10631,"originId":"5cd38708ce97fe69027a3a24","articleId":2270,"userId":109,"content":"[@wujohns](/user/wujohns)  多谢分享","createdAt":1557366536022},{"id":10632,"originId":"5cd38d6de333b24979ca9913","articleId":2270,"userId":688,"content":"[@waitingsong](/user/waitingsong) 啊，老哥，原来是你点的star","createdAt":1557368173147},{"id":10633,"originId":"5d0204d41fe902120f31e86c","articleId":2270,"userId":688,"content":"[@zuohuadong](/user/zuohuadong) 按照nestjs现在的特性下载量为egg的十倍之多我也不会在生产中去用，非集中的路由/中间件策略在稍微上一点规模的工程上维护起来只能用惨不忍睹来形容（明明是spring的糟粕的地方也沿用了下来），这块的💩我算是吃够了","createdAt":1560413396737},{"id":10634,"originId":"5d02185795fcc914aa268a3b","articleId":2270,"userId":513,"content":"egg.js +1   入门学习成本低。\r\n\r\n公司能招到人才是王道","createdAt":1560418391063},{"id":10635,"originId":"5d02497d1fe902120f31eaa3","articleId":2270,"userId":109,"content":"[@wujohns](/user/wujohns)  目前感觉 midway 可能更适合自己。以微服务结构，估计 egg/nestjs/midway 都差不多，看自己习惯哪个了。","createdAt":1560430973321},{"id":10636,"originId":"5d02ec891fe902120f31ebc1","articleId":2270,"userId":545,"content":"[@wujohns](/user/wujohns)  各自想法有所不同，但有一点是  nest.js 出的比 egg 晚，现在已经超过egg了。midway 一些包还是 js 写的，并且在midway 上没看到这种增速。\r\n现在框架主要区别在生态了~ nest 依赖注入这块确实不如angular ，但考虑用的人多，后续需要排坑少，就只能吃下去了~","createdAt":1560472713568},{"id":10637,"originId":"5d02ecae95fcc914aa268cc7","articleId":2270,"userId":545,"content":"[@Solomonqoo](/user/Solomonqoo) nestjs 或者  midway 直接招 java转node ，上手更快，成本更低~ ","createdAt":1560472750071},{"id":10638,"originId":"5d02fb9c95fcc914aa268da6","articleId":2270,"userId":109,"content":"[@zuohuadong](/user/zuohuadong) 我们在招 midway/egg, angular 的开发，不好招。。。","createdAt":1560476572384},{"id":10639,"originId":"5d03119195fcc914aa268eb5","articleId":2270,"userId":545,"content":"[@waitingsong](/user/waitingsong)  Angular 确实不好招，得去群里找。\r\nnest 你直接这样招  java 转 node 就行了，人太多了~\r\nhttps://www.zhipin.com/job_detail/dbc69dc9fbf0b5581HNz3di5EVU~.html?ka=search_list_2","createdAt":1560482193715},{"id":10640,"originId":"5d03126d1fe902120f31edb0","articleId":2270,"userId":50,"content":"[@zuohuadong](/user/zuohuadong) 你是nest的布道者么","createdAt":1560482413808},{"id":10641,"originId":"5d03152995fcc914aa268ee0","articleId":2270,"userId":109,"content":"[@zuohuadong](/user/zuohuadong) \r\nnestjs 个人感觉比较重。\r\nmidway+TS的全栈 这个组合不好招。。。","createdAt":1560483113445},{"id":10642,"originId":"5d032e161fe902120f31eed3","articleId":2270,"userId":513,"content":"[@zuohuadong](/user/zuohuadong) 跟您交流过，我还是用旧一点点的技术、简单技术比较稳、成本面也比较便宜。\r\n\r\n新技术对我来说，赚不到钱，简单技术、系统快速开发出来，赚到钱才是王道。\r\n\r\n客户、主管根本也不管我用什麽技术，对我来说，只要简单的框架技术，能跟 「复杂或新框架技术」  做到一样的效果，就ok了！\r\n\r\n我的心思比较放在business上面。\r\n\r\n例如我接 一个  太阳能电站的发电监控 、 逆变器组态设定互动、感测器收值分散运算、自动清扫机器人active等等的综合型管理系统，\r\n\r\n还有接一个酒店小姐上臺下臺管理系统，rfid或nfc或qr code，管理小姐上下臺，又要轻量、伺服器就是一支安卓手机，用了google drive，同一个帐，登入2部手机，资料面做到了HA，系统面做到了容错(当然不到A/A或A/S等级)active/active ，active/standby\r\n\r\n我很满意耶！新技术 相对於  创造收益  的   c/p值，性价比，实在太低了。\r\n\r\n上述讨论已经脱离技术层面了，sorry，进入到「技术变现」层面。确实不应被列入考量.......sorry again\r\n\r\n等这些技术已经成为 大宗使用  、或是王者、唯一首选的时候，我在来投入，应该还ok啦\r\n\r\n我只想用javascript，typescript我一点都不想用。java我讨厌它、php \"全世界最好的语言.....笑\"、.net我不玩............\r\n\r\n","createdAt":1560489494117},{"id":10643,"originId":"5d03430495fcc914aa269081","articleId":2270,"userId":545,"content":"[@waitingsong](/user/waitingsong)  比 springboot 轻很多了，我们也是招的 spring 让转","createdAt":1560494852296},{"id":10644,"originId":"5d0343bc1fe902120f31ef8d","articleId":2270,"userId":545,"content":"[@Solomonqoo](/user/Solomonqoo)  旧技术，简单，平稳和成本之间没必然关系。\r\n成本需要同时考虑 开发成本、维护成本、硬件成本。\r\n\r\n有些潮流不可逆，不如早点拥抱，省的后面重构。\r\n比如 ts ，现在 vue3 要拿 ts 重写了，angular 本身 ts 不用说， facebook 的 yarn 也不用自家 flow 了，转用 ts 了 。\r\n这种趋势下，还坚持js ，实在是不可理喻了。\r\n\r\n程序员搞新技术对自身是有益的，免得被时代淘汰。，","createdAt":1560495036177},{"id":10645,"originId":"5d0344301fe902120f31ef97","articleId":2270,"userId":545,"content":"[@DuJiming](/user/DuJiming) 受益者吧，把我们之前laravel 的项目全部用 nest.js 重构了，我们自己又开发了很多新的工具。\r\nnest.js 代码复用率很高，结构清晰，团队维护也简单。","createdAt":1560495152370},{"id":10646,"originId":"5d034b1495fcc914aa2690c2","articleId":2270,"userId":109,"content":"[@Solomonqoo](/user/Solomonqoo) \r\n> 新技术对我来说，赚不到钱，简单技术、系统快速开发出来，赚到钱才是王道。\r\n\r\n我的看法，就TS来说，学习成本不高，曲线不陡峭，静态类型带来的好处是可以直接 **降低成本** 这也是钱。\r\n\r\n另，好像你的业务挺广的嘛。。","createdAt":1560496916303},{"id":10647,"originId":"5d038fe31fe902120f31f144","articleId":2270,"userId":513,"content":"[@zuohuadong](/user/zuohuadong) 不不不，学习技术对我来说，是帮助我赚钱，并不是 让我烦心、伤神。\r\n\r\n\"有些潮流不可逆，不如早点拥抱，省的后面重构\"，潮流，是对是错，这还两说！\r\n\r\n坚持js不会不可理喻，您言重了，js可进可退，真没啥不好。说不定用潮流技术，有更大的机率、风险面临重构。\r\n\r\n\r\nts  3~4年内不碰的，说不定是明智之举，之後应该会出xs、ys、zs，等所有浏览器原生支援TS，\r\n\r\n确定它是取代js，而且是完全的霸主，在来学也不晚。\r\n\r\n其实呀，有些东西就像蟑螂一样，永远都不会消威，压宝我也压蟑螂，生命力超强！它生命超强，\r\n\r\n我的学羽力却是越来越不行，这两种配在一起才对！才是王道、正解！\r\n\r\n或许年纪吧，我还是比你们务实的！你们可能都太年轻了，是热情的技术追求者。\r\n","createdAt":1560514531734},{"id":10648,"originId":"5d03914395fcc914aa2691fa","articleId":2270,"userId":752,"content":"[@zuohuadong](/user/zuohuadong) 自从我向你推荐的 nest ，感觉从那一天开始你就不一样了，每次看见这种帖子必有你。哈哈","createdAt":1560514883566},{"id":10649,"originId":"5d0394521fe902120f31f16a","articleId":2270,"userId":513,"content":"[@waitingsong](/user/waitingsong) \r\n\r\n觉得自已写的有点多了，还是删一些好了。\r\n有朋友在这里说了，学了半天，不知道未来在哪？转眼就35了\r\n\r\n潮流？主流？对我而言，哪个可以像是蟑螂一样，生命力超强？\r\n所投入的精力、金钱、时间在某项专业技术上，尽量的能最大化\r\n、最长化的创造高薪资、好机会，意思是说，专精的学一整套，\r\n能让我吃的长长久久，我比较爱挑这种的。\r\n\r\n前面十年投入infra，2个字：专精！但是.....总是要有接棒的专业\r\n，所以接著也投入ERP(tiptop)/PLM(windchill)解决方案......\r\n但有点力不从心，因为还有管理工作要做，但也继续吃到现在\r\n(windchill专精，其他的不熟；tiptop半熟，sap会一些，其他的\r\n不熟)，这样一玩 ，又7年了。\r\n(windchill算是PLM第一品牌；tiptop是erp的倒数品牌)\r\n\r\n居安思危，3年前又转入纯web开发。在过去面临这麽多次的专业\r\n技能选择难题，虽没有100%，但也有95%的胜率。\r\n\r\n所以..................有鑑於此，前端、後端都可以用一种语言完成\r\n，这一点更吸引我。\r\n\r\n追求技术这个问题，相较之下我会更务实。如此这般，似乎显得\r\n我放肆了，请海涵~\r\n\r\n","createdAt":1560515666673},{"id":10650,"originId":"5d048a701fe902120f31f361","articleId":2270,"userId":109,"content":"[@Solomonqoo](/user/Solomonqoo) 你这些技能我都没听过说， 只会js和sql的说，告辞。。。。\r\n\r\nERP感觉过于复杂，并且在国内有点水土不服。在国内的成功案例不多（不是大企业也不会想着上这东西）。\r\n讨生活，没一技傍身是不行的，知识面太窄也是不行的。功夫在诗外。\r\n\r\n","createdAt":1560578672644},{"id":10651,"originId":"5d04a34695fcc914aa26940c","articleId":2270,"userId":513,"content":"不谈这些了。反正我先专精javascript准没错，前後端开发出真正可以用的东西，我在来这里胡说八道。","createdAt":1560585030771},{"id":10652,"originId":"5d04cb1995fcc914aa2694c1","articleId":2270,"userId":545,"content":"[@Solomonqoo](/user/Solomonqoo)  \r\nts 维护成本更低，更利于团队开发。 而且 我们搞一些大型项目非常适合。 烦心伤神，说句不好听的，太菜而已。 \r\n国外也有相关调查， ts 受欢迎程度仅次于 Rust 和 kotlin 。\r\n潮流对错，这个你不是大佬，但你看大佬怎么做啊， 连 node.js 官方的库都开始用ts 了，三大框架也都支持ts ，并且还有两个是ts 写的。\r\n将来再搞，重构成本不低。\r\n跟年轻没关系，我觉得你们缺一个有能力的架构师。","createdAt":1560595225121},{"id":10653,"originId":"5d04cb541fe902120f31f437","articleId":2270,"userId":545,"content":"[@MiYogurt](/user/MiYogurt) 哈哈哈，这个太爽了啊，比之前的 adonis 强太多了~~  牛\r\n一开始还挺抗拒的，结果用了以后再也回不去了，爽","createdAt":1560595284293},{"id":10654,"originId":"5d04d9581fe902120f31f44a","articleId":2270,"userId":752,"content":"[@zuohuadong](/user/zuohuadong) \r\n[@Solomonqoo](/user/Solomonqoo) \r\n\r\n我的新书 Dart 快速实践，3分钟前刚校审第一遍，Dart 其实也是啥都可以写，哈哈，这本书里面包含了前端，后端、移动端的内容。实现了一个 类似于React 的前端框架，实现了类似于 Koa 的后端框架，还有用 Dart 制作了一个手机App，使用Dart 写FFI\r\n，使用 Dart 调用 C 语言，以及Dart 与 IOS，Android平台相互调用等等。诚意满满。\r\n\r\nDart 除了用的人不多，其他的啥都好。\r\n\r\n关于 TS 的书，我还没开始写，这个写完我就回去完成 TS 那本。","createdAt":1560598872291},{"id":10655,"originId":"5d051ca595fcc914aa269584","articleId":2270,"userId":513,"content":"[@zuohuadong](/user/zuohuadong) 生态不同。太钻\"技术是否先行\"的牛角了，追新、守旧都有考量，\r\n我们还是回归到纯粹交流开发上遇到的问题即可。\r\n现在专注js，这个过程ts也会更成熟了，届时再来看ts一点也不迟。\r\n技术的改朝换代总是在上演，这个议题也就别占用版面了\r\n电子消费产品市场有一句话：早买早享受、晚买享折扣！用在IT技术上颇有异曲同工之妙\r\n\r\n","createdAt":1560616101228},{"id":10656,"originId":"5d05aba01fe902120f31f55b","articleId":2270,"userId":545,"content":"[@Solomonqoo](/user/Solomonqoo)  \r\n等到想换的时候就后悔没早点用了，我们当时也是这样。\r\nIT 技术“晚买” 迁移成本更高，这个本质问题你都没理解清楚。\r\n没啥好谈的，还是那句话：你们缺个有经验的架构师。\r\n","createdAt":1560652704208},{"id":10657,"originId":"5d07508d1fe902120f31fdbc","articleId":2270,"userId":513,"content":"[@zuohuadong](/user/zuohuadong) 请您别激动~~~我自有我的考量, 谢谢。","createdAt":1560760461102},{"id":10658,"originId":"5d08aac595fcc914aa26a4a0","articleId":2270,"userId":134,"content":"[@wujohns](/user/wujohns) 非集中的路由/中间件策略在稍微上一点规模的工程上维护起来只能用惨不忍睹来形容   大佬可以详细说下为什么吗？","createdAt":1560849093181},{"id":10659,"originId":"5d22bf5a71951f750ccb94ed","articleId":2270,"userId":688,"content":"[@zhangshichuan](/user/zhangshichuan) 当提供的接口较多时，你会发现 路径-中间件-controller 的信息时分散开来的，当前端给出一个bug需要排查时，你会较难的找到路径（别笑，这个真的可以把人逼疯，亲身经历），同时中间件也是apply到指定规则的controller上，为了找到这个contoller用到的中间件，我又得再找一遍。\r\n这块怎么说呢，nestjs 在 contoller 层也用修饰器的方式进行处理的确比较cool，比较炫技，但是对于工程管理上来说负面作用作用居多。。。也就是拿着锤子不找个钉子锤锤就不痛快，但实际这个钉子根本就不是实际开发需要的东西","createdAt":1562558298324},{"id":10660,"originId":"5d23692dad75d374b58bd4db","articleId":2270,"userId":1425,"content":"个人两个都比较过  曾经墙头草了很久 后来硬啃了 nestjs 学会了自己 ts 在 egg.js 中写装饰器\r\n\r\nnestjs 太重太复杂，有这个心啃了用起来，直接上 SpringBoot 也差不多了","createdAt":1562601773488},{"id":10661,"originId":"5d23702471951f750ccb9866","articleId":2270,"userId":109,"content":"用了下 midway 感觉比较底层的 egg 要顺手些，但又不至于 nest 那样重。可一试。","createdAt":1562603556715},{"id":10662,"originId":"5d23a3df71951f750ccb9879","articleId":2270,"userId":1980,"content":"Typescript 的话考虑 nest.js 其他的 用egg 吧","createdAt":1562616799896},{"id":10663,"originId":"5d27e7428a8bf909209cda30","articleId":2270,"userId":688,"content":"[@tmirun](/user/tmirun) egg也得用ts吧，要不然工程对ide的友好度会比直接用koa和express还要差","createdAt":1562896194663},{"id":10664,"originId":"5d2858288a8bf909209cde01","articleId":2270,"userId":3375,"content":"我喜欢nest,一个是因为我喜欢TS,再就是因为我觉得鸟巢比鸟厉害,毕竟先有鸟巢再有鸟","createdAt":1562925096801},{"id":10665,"originId":"5d286bfafa8ef0094e064781","articleId":2270,"userId":358,"content":"[@wujohns](/user/wujohns) JS 也没啥大的区别，一样支持智能提示。\r\nhttps://zhuanlan.zhihu.com/p/56780733","createdAt":1562930170652},{"id":10666,"originId":"5d2d04f151637b492bb0f013","articleId":2270,"userId":688,"content":"[@atian25](/user/atian25) 这个之前也看到过，egg-ts-helper还是挺强大的，不过工程中还是直接选型了ts，用ts的类型特性去做这个事情感觉更合适些（强迫症）","createdAt":1563231473700},{"id":10667,"originId":"5d2d2186c5fe2549619aeae5","articleId":2270,"userId":358,"content":"[@wujohns](/user/wujohns) 这个看个人喜好，我想表达的是在框架层面的体验是一致的，不管是 ts 还是 js 写 egg，剩下的是应用代码层看个人喜好。\r\n\r\n至于 egg 本身是不是 TS 写的，只跟框架的维护者有关，只需要有 d.ts 即可，对于应用开发者是无感知的（除了心理优越性外）。即使是那些用 TS 写的框架，最终发布到 npm 还是会编译为 JS。","createdAt":1563238790671},{"id":10668,"originId":"5d2eb8c7c5fe2549619af0d6","articleId":2270,"userId":688,"content":"[@atian25](/user/atian25) 是的，有这个 helper 的支持，在选用 egg 后的 ts与js 的选择上在工程意义上就没有太大的差别（按个人偏好即可）","createdAt":1563343047392},{"id":10669,"originId":"5d3ed9bfb4725a628e26975a","articleId":2270,"userId":688,"content":"[@zhangshichuan](/user/zhangshichuan) 不过在nestjs可以考虑使用专门维护一个常量文件存放路由表（然后path使用这里定义的常量），以及每条路由对应的中间件，这样可以解决上述的非集中问题","createdAt":1564400063974},{"id":10670,"originId":"5d47a6c84f472f7fee15288b","articleId":2270,"userId":134,"content":"[@wujohns](/user/wujohns) 收到","createdAt":1564976840413},{"id":10671,"originId":"5d47aa6fbf26dc7fc5337737","articleId":2270,"userId":545,"content":"[@zhangshichuan](/user/zhangshichuan)\r\n\r\n用事实结束这个争论~\r\n\r\nnpm 下载量：\r\n![image.png](//static.cnodejs.org/FuHW0OxvaIGJnqjuEA6m45_w4806)\r\n\r\nhttps://www.npmtrends.com/@nestjs/core-vs-egg\r\n\r\nstar 趋势 \r\n![image.png](//static.cnodejs.org/FjLfsZFPc0yirehmxD2wuAskuUbv)\r\n\r\n","createdAt":1564977775481},{"id":10672,"originId":"5ed6148182b588109b6472f3","articleId":2270,"userId":508,"content":"[@zuohuadong](/user/zuohuadong) 现在变化好大了","createdAt":1591088257491},{"id":10673,"originId":"5ed64f9c82b588109b64735f","articleId":2270,"userId":545,"content":"[@puzzle9](/user/puzzle9) \r\n![image.png](//static.cnodejs.org/FtEL5dpUpn2A431AgkP195qJZu24)\r\negg 这下载量都可以忽略了~\r\n\r\n![image.png](//static.cnodejs.org/FuKiXrAjnUf2Qf6JjUNLiE6gfXlC)","createdAt":1591103388581},{"id":10674,"originId":"5ecf8711b703280f0bcb738a","articleId":2271,"userId":3377,"content":"github上面去倒拾一下","createdAt":1590658833858},{"id":10675,"originId":"5ed0b8b0b703280f0bcb75ba","articleId":2271,"userId":57,"content":"https://github.com/cnscorpions/React-Nest-Admin 推荐下我自己写的react全家桶 + Nest.js的项目，已部署上线了https://react-nestjs-admin.xyz","createdAt":1590737072119},{"id":10676,"originId":"5ed60eae82b588109b6472d2","articleId":2271,"userId":3368,"content":"准备看看umi.js","createdAt":1591086766309},{"id":10677,"originId":"5ed4d500b703280f0bcb7c54","articleId":2273,"userId":358,"content":"https://node.green/","createdAt":1591006464067},{"id":10678,"originId":"5ed4d5abb703280f0bcb7c5d","articleId":2273,"userId":3379,"content":"有没有测试用例库？","createdAt":1591006635931},{"id":10679,"originId":"5ed504ddb703280f0bcb7cf5","articleId":2273,"userId":358,"content":"仔细看下 README","createdAt":1591018717862},{"id":10680,"originId":"5ebb9f6be785ec40b04fc1c0","articleId":2275,"userId":161,"content":"请问大家是先tsc编译成js，然后在pm2管理吗？","createdAt":1589354347942},{"id":10681,"originId":"5ebbb5812d0afc4087f54fc6","articleId":2275,"userId":3382,"content":"一般编译成js再启动\r\n```\r\n- script: ./dist/main.js\r\n  name: test\r\n  interpreter: node\r\n  interpreter_args: -r tsconfig-paths/register\r\n  cwd: ./\r\n  exec_mode: cluster_mode\r\n  instances: max\r\n  watch_options:\r\n    followSymlinks: false\r\n  error_file: ./log/integral-error.log\r\n  out_file: ./log/integral-out.log\r\n  pid_file: ./log/integral-piZd.log\r\n  log_date_format: YYYY-MM-DD HH:mm:ss\r\n  env:\r\n    NODE_ENV: production\r\n```\r\n\t","createdAt":1589360001277},{"id":10682,"originId":"5ebbca472d0afc4087f55038","articleId":2275,"userId":628,"content":"```\r\npm2 install typescript\r\n```","createdAt":1589365319761},{"id":10683,"originId":"5ed0a3fa82b588109b6468d2","articleId":2275,"userId":712,"content":"使用ts写的话，尽量先编译成js，这样在nodejs环境下就完美运行了","createdAt":1590731770057},{"id":10684,"originId":"5ed0b717b703280f0bcb75a7","articleId":2275,"userId":57,"content":"分情况，但是最好都编译成js吧，\r\n有的时候fork不起来，就跑cluster模式\r\nprod: `pm2 start app.js -i 1 --name \"demo\"`\r\ndev: `pm2 start npm --no-automation --name {app name} -- run {script name}`\r\n反正我是这样的\r\n\r\n","createdAt":1590736663303},{"id":10685,"originId":"5ed46ba182b588109b646e16","articleId":2275,"userId":161,"content":"写pm2.json文件，编译器用ts-node也行的。两者之间性能如何没有深入研究","createdAt":1590979489922},{"id":10686,"originId":"5ed4bc3bb703280f0bcb7bcf","articleId":2275,"userId":1157,"content":"各位老板,我之前用的也是先编译为js,然后在运行.然后引入了 typeorm 包.编译的时候就报错了;\r\n还有就是node 在 webStorm怎么打断点? 我没有找到方法;下面是我报错的信息;\r\n我用ts-node  可以跑起,新人求教\r\n\r\n\r\nE:\\app\\node\\node.exe E:\\app\\node\\node_modules\\npm\\bin\\npm-cli.js run dev --scripts-prepend-node-path=auto\r\n\r\n> nodetsserver@1.0.0 dev E:\\workFile\\nodeAndVueAndMysql\\nodeTsServer\r\n> supervisor -w  dist  dist/index.js\r\n\r\n\r\nRunning node-supervisor with\r\n  program 'dist/index.js'\r\n  --watch 'dist'\r\n  --extensions 'node,js'\r\n  --exec 'node'\r\n\r\nStarting child process with 'node dist/index.js'\r\nWatching directory 'E:\\workFile\\nodeAndVueAndMysql\\nodeTsServer\\dist' for changes.\r\nPress rs for restarting the process.\r\n创建对象\r\n监听接口\r\n(node:8376) UnhandledPromiseRejectionWarning: E:\\workFile\\nodeAndVueAndMysql\\nodeTsServer\\entity\\CaptchasEnt.ts:1\r\n(function (exports, require, module, __filename, __dirname) { import {Entity, PrimaryGeneratedColumn, Column, OneToOne, JoinColumn} from \"typeorm\";\r\n                                                                     ^\r\n\r\nSyntaxError: Unexpected token {\r\n    at new Script (vm.js:80:7)\r\n    at createScript (vm.js:274:10)\r\n    at Object.runInThisContext (vm.js:326:10)\r\n    at Module._compile (internal/modules/cjs/loader.js:664:28)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:712:10)\r\n    at Module.load (internal/modules/cjs/loader.js:600:32)\r\n    at tryModuleLoad (internal/modules/cjs/loader.js:539:12)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:531:3)\r\n    at Module.require (internal/modules/cjs/loader.js:637:17)\r\n    at require (internal/modules/cjs/helpers.js:22:18)\r\n(node:8376) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\r\n(node:8376) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\r\n\r\n","createdAt":1591000123551},{"id":10687,"originId":"5ecf825882b588109b646747","articleId":2277,"userId":545,"content":"目的是： 把文件压缩成一行？ 甚至合并文件？ \r\n也可以用 webpack  。\r\n现成的程序有 ncc  nexe","createdAt":1590657624264},{"id":10688,"originId":"5ed0b983b703280f0bcb75be","articleId":2277,"userId":57,"content":"借助打包工具，nest.js打包就是使用了webpack","createdAt":1590737283413},{"id":10689,"originId":"5e58b5fa267721420912cb46","articleId":2278,"userId":528,"content":"你的想法没有错，未来肯定都是ts，特别是后端，早学早受益。","createdAt":1582872058148},{"id":10690,"originId":"5e58ba7c267721420912cb58","articleId":2278,"userId":3383,"content":"[@Hanggi](/user/Hanggi) 谢谢","createdAt":1582873212953},{"id":10691,"originId":"5e58bc121225c9423dcdb401","articleId":2278,"userId":99,"content":"用nestjs   https://cnodejs.org/topic/5d9be327ece3813ad9ba04cc","createdAt":1582873618224},{"id":10692,"originId":"5e58c2d5267721420912cb74","articleId":2278,"userId":3383,"content":"[@phonegap100](/user/phonegap100) 谢谢,我了解了解","createdAt":1582875349638},{"id":10693,"originId":"5e5b14a6b5a36940fe1ce565","articleId":2278,"userId":545,"content":"https://docs.nestjs.cn/6/awesome  这里有文档和相关资料","createdAt":1583027366717},{"id":10694,"originId":"5e6630c523bc9e20b4e32b8e","articleId":2278,"userId":490,"content":"[@17723010593](/user/17723010593)  使用typescript、nestjs、typeorm等开发的社区系统\r\n网站: https://www.nodejs123.com\r\nGithub: https://github.com/shen100/mili\r\n","createdAt":1583755461775},{"id":10695,"originId":"5e6aea893cadb020b9160cfa","articleId":2278,"userId":99,"content":"[@17723010593](/user/17723010593) 不客气的  nestjs非常优秀的","createdAt":1584065161250},{"id":10696,"originId":"5e6afa2b3cadb020b9160d29","articleId":2278,"userId":110,"content":"后端当然是 TS，前端用用 JS 无所谓，涉及到数据的，必须严谨，用 TS","createdAt":1584069163956},{"id":10697,"originId":"5e6b285923bc9e20b4e33a58","articleId":2278,"userId":135,"content":"后端用ts爽很多啊,可以避免低级错误,开发的时候有 提示 也很爽.\r\n我用的是eggjs的ts版本 感觉够用了~","createdAt":1584080985959},{"id":10698,"originId":"5e6c220623bc9e20b4e33b55","articleId":2278,"userId":3,"content":"[@abiuDoIT](/user/abiuDoIT) 想问一下 eggjs的ts版本 坑多吗？\r\n\r\n我看egg官方文档讲这一块的好少\r\n\r\n感觉egg一点都不重视TS","createdAt":1584144902288},{"id":10699,"originId":"5e6cd4fa23bc9e20b4e33c76","articleId":2278,"userId":356,"content":"目前业界应该新项目没有人用js写了，但是用ts需要非常少量使用any，否则意义也不大","createdAt":1584190714216},{"id":10700,"originId":"5e6d88083cadb020b9161040","articleId":2278,"userId":57,"content":"用ts的话，推荐Nest.js，就像它官网说的，解决的是Node.js后端开发架构的问题，可以看下这个项目https://github.com/cnscorpions/React-Nest-Admin","createdAt":1584236552493},{"id":10701,"originId":"5e6dbbc423bc9e20b4e33d06","articleId":2278,"userId":89,"content":"[@darrenliuwei](/user/darrenliuwei) 用midway啊，基于egg之上的ts高级版本","createdAt":1584249796643},{"id":10702,"originId":"5e6e2a8b3cadb020b916110d","articleId":2278,"userId":3,"content":"[@i5ting](/user/i5ting) Midway 的文档感觉写的好少啊。。。网上相关资料教程都好少。。。","createdAt":1584278155726},{"id":10703,"originId":"5e6ef3d745fcf75ee50e49df","articleId":2278,"userId":135,"content":"[@darrenliuwei](/user/darrenliuwei) 还好,不过数据库如果多的话 可能要自己整合.  其他的ts支持没啥问题","createdAt":1584329687877},{"id":10704,"originId":"5e6f0f1545fcf75ee50e4a18","articleId":2278,"userId":3,"content":"[@abiuDoIT](/user/abiuDoIT) 想请教一下，如果用TS版的egg，并且用vs code开发的话，有没有类似 eggjs 这样的插件啊？可以快速生成 controller、service等\r\n\r\n![egg.png](//static.cnodejs.org/FoGUfbrBbrcL5R2Z5by36PHNCM9e)","createdAt":1584336661704},{"id":10705,"originId":"5e6f344189a5c35f11e32cf2","articleId":2278,"userId":135,"content":"[@darrenliuwei](/user/darrenliuwei) 那是没有,不过这个snippet 写起来也很简单啊,你直接诶拿js版本的改一下就行了,或者自己写一下","createdAt":1584346177989},{"id":10706,"originId":"5e6f508745fcf75ee50e4b0f","articleId":2278,"userId":3,"content":"[@abiuDoIT](/user/abiuDoIT) 噢哦，好的，谢谢啦~今天开始学习typescript","createdAt":1584353415151},{"id":10707,"originId":"5e6f733845fcf75ee50e4b63","articleId":2278,"userId":3,"content":"[@abiuDoIT](/user/abiuDoIT) \r\n![egg.png](//static.cnodejs.org/FhjSvYtvnWeebys7S4AYbstYuV60)\r\n\r\n想请教一下大佬，为什么上面这种写法可以运行，但是下面这种写法就报错呢？\r\n\r\n我之前写js版egg时，不太喜欢写路由的第一个参数，导致我用ts版egg时，发现一直报错，然后我灵机一动，把第一个参数加上了之后，竟然可以运行了。\r\n\r\n","createdAt":1584362296401},{"id":10708,"originId":"5e70334145fcf75ee50e4c1f","articleId":2278,"userId":135,"content":"ts都有具体报错原因的,你鼠标放上去看..这个函数ts是要求三个参数的  \r\n写函数的时候也都会有提示每个参数的类型之类的,这就是ts的优势啊 用起来","createdAt":1584411457290},{"id":10709,"originId":"5e7054fe89a5c35f11e32ed3","articleId":2278,"userId":3,"content":"[@abiuDoIT](/user/abiuDoIT) 噢哦，这样啊","createdAt":1584420094729},{"id":10710,"originId":"5e72ecea64259617c49a1d1f","articleId":2278,"userId":1434,"content":"试试 [daze.js](https://github.com/dazejs/daze) , 使用 ts 开发的","createdAt":1584590058088},{"id":10711,"originId":"5e843c2258ab6717beb7dae2","articleId":2278,"userId":1244,"content":"用了TS就回不去JS了","createdAt":1585724450546},{"id":10712,"originId":"5e8edaee64259617c49a50e6","articleId":2278,"userId":1196,"content":"学 香","createdAt":1586420462345},{"id":10713,"originId":"5e9012be58ab6717beb7efd5","articleId":2278,"userId":1900,"content":"早学早受益","createdAt":1586500286038},{"id":10714,"originId":"5ed0a52f82b588109b6468db","articleId":2278,"userId":712,"content":"ts就是使用了面向对象的方式开辟了js的一条路，使用类型约束，能使我们的代码可读性更高","createdAt":1590732079480},{"id":10715,"originId":"5ece97f0b703280f0bcb7120","articleId":2279,"userId":109,"content":"先格式化下代码吧。","createdAt":1590597616221},{"id":10716,"originId":"5ecf1e8382b588109b646593","articleId":2279,"userId":3360,"content":"[@waitingsong](/user/waitingsong) 不好意思哈，写上去看着是好的，保存后缩进符就没了，已经修正了","createdAt":1590632067227},{"id":10717,"originId":"5ecf827e82b588109b64674f","articleId":2279,"userId":26,"content":"临近下班来摸鱼，复制了你的代码在node下运行，不管是并行还是穿行还是延时调用第二次，读取同一个文件，都是没问题的。你说在electron下异常，而且还是概率性的，而且打包后竟然概率还会低。这种玄学问题建议还是提供最小复现仓库大家来分析分析。","createdAt":1590657662242},{"id":10718,"originId":"5ecf9b2782b588109b646786","articleId":2279,"userId":3360,"content":"[@HobaiRiku](/user/HobaiRiku) 大佬，快速的多执行几次？","createdAt":1590663975921},{"id":10719,"originId":"5ecfd022b703280f0bcb741f","articleId":2279,"userId":109,"content":"这样试试？\r\n```js\r\nexport function readFile(path){\r\n  return new Promise(function (resolve, reject) {\r\n    const input = fs.createReadStream(path, { autoClose: true, emitClose: true });\r\n    const  readline = require('readline');\r\n    const rl = readline.createInterface({\r\n      input: input,\r\n      crlfDelay: Infinity\r\n    });\r\n\t\r\n    console.log(\"准备读取文件了\");\r\n    input.on('open',(fd)=>{\r\n      console.log(\"打开文件\");\r\n    });\r\n    input.on('error',()=>{\r\n      console.log(\"error\");\r\n      reject();\r\n    });\r\n    input.on('close',()=>{\r\n      console.log(\"读取完毕！input\");\r\n      resolve();\r\n    });\r\n\t\r\n    rl.on(\"line\", (line) => {\r\n      console.log(line);\r\n    });\r\n    rl.on('close',function () {\r\n      console.log(\"readline关闭了\");\r\n    });\r\n  });\r\n}\r\n```","createdAt":1590677538098},{"id":10720,"originId":"5ed05f8882b588109b646818","articleId":2279,"userId":26,"content":"[@kuyu132](/user/kuyu132) 我文件有1000行，每次并发10个你的函数，然后延迟100毫秒继续运行，没见出错或者卡住。","createdAt":1590714248909},{"id":10721,"originId":"5ed071c782b588109b64686e","articleId":2279,"userId":3360,"content":"[@HobaiRiku](/user/HobaiRiku) 辛苦大佬，我这边文件很小的时候就复现了，不过是在electron上面，等我有时间弄个demo出来哈，先忽略，谢谢了！","createdAt":1590718919143},{"id":10722,"originId":"5ecdce26b703280f0bcb6f83","articleId":2280,"userId":1641,"content":"```ts\r\nlet o: {x: number} = { x: 3 }\r\no.x = 2\r\n```\r\n你应该这么写才对\r\n类型 我理解是对变量的描述\r\n","createdAt":1590545958928},{"id":10723,"originId":"5ecf14f6b703280f0bcb7165","articleId":2280,"userId":33,"content":"你给声明成Object类型了，原生Object类型肯定没有你的属性，，要不你就声明成{x: number}， 要不就不声明让ts自己推断，，你这想把二者结合自相矛盾，没法判断你赋值的是否合法了","createdAt":1590629622180},{"id":10724,"originId":"5ecf5f7682b588109b646690","articleId":2280,"userId":2210,"content":"楼上说的没错，你想声明一个属性不限的`Object`可以用：\r\n```Typescript\r\nconst o: Record<string, any> = {};\r\no.x = 2;\r\n```","createdAt":1590648694293},{"id":10725,"originId":"5ecf69beb703280f0bcb72a5","articleId":2280,"userId":510,"content":"[@ganshiqingyuan](/user/ganshiqingyuan)   明白了 object仅代表{}","createdAt":1590651326133},{"id":10726,"originId":"5ecf6a29b703280f0bcb72ab","articleId":2280,"userId":510,"content":"[@nigel](/user/nigel) Record是声明的类型嘛 ?    <string,any>又是代表什么意思 刚开始学习ts并不懂","createdAt":1590651433605},{"id":10727,"originId":"5ed06091b703280f0bcb746e","articleId":2280,"userId":2210,"content":"[@zhsonga](/user/zhsonga) Record是一个UtilityType，类似于语法糖，相当于：\r\n```Typescript\r\nconst o: {\r\n  [key: string]: any;\r\n} = {};\r\no.x = 2;\r\n```\r\n尖括号里第一个string表示对象是key是string类型，any表示值是any类型\r\n其他官方的UtilityTypes参考：\r\nhttps://www.typescriptlang.org/docs/handbook/utility-types.html#recordkt","createdAt":1590714513084},{"id":10728,"originId":"5ec9d174a87fc8583363de14","articleId":2281,"userId":113,"content":"1、app、agent均可创建实例。但是均建议采用app singleton\r\n2、mysql通过singleton提供了连接池机制\r\n3、redis通过singleton提供的实例，虽然没有采用连接池机制，但是内置了断开重连机制","createdAt":1590284660637},{"id":10729,"originId":"5ecc7443a87fc8583363e12f","articleId":2281,"userId":11,"content":"这取决于你想要在 app woker 还是 agent worker 使用 mysql/redis 连接。","createdAt":1590457411330},{"id":10730,"originId":"5ecf3b6582b588109b646612","articleId":2281,"userId":3384,"content":"好的 多谢大佬","createdAt":1590639461255},{"id":10731,"originId":"5e6b4fbd3cadb020b9160e0f","articleId":2282,"userId":3,"content":"nuxt吧，开发起来非常舒服，至于性能，加点机器吧","createdAt":1584091069370},{"id":10732,"originId":"5e6b52353cadb020b9160e1a","articleId":2282,"userId":714,"content":"我是作为后端，然后自学的react，一点个人的想法，供参考吧：\r\n\r\n首先说你说的SEO,一般他们说的SSR的seo基本上都是说的TKD，其实SSR对于SEO最大的作用还有一个就是首屏的渲染，在第一次请求出了TKD外，页面重要的内容也要一起显示，比如对于文章来说的文章内容，或着电商的的产品简介等\r\n我也找了很多文章目前的解决方案还是用了next，我觉得next最大的问题就是的js里面包含了初始化属性，相当于页面内容的下载增加了不少内容，目前还没找到解决办法\r\n\r\n我自己考虑的办法是，server端自己初始化一套页面，然后再用react从新排一遍DOM，类似同构的感念，但是这里的问题就是server端初始化的内容也要自己写代码，react又是一遍代码，并且请求也会是两次（next的属性初始化就是为了减少这个请求）。\r\n\r\n目前我只研究到这里了，抛砖引玉，看看其他大佬有什么解决方案\r\n","createdAt":1584091701775},{"id":10733,"originId":"5e6c392523bc9e20b4e33b7d","articleId":2282,"userId":193,"content":"vue 弄过ssr","createdAt":1584150821549},{"id":10734,"originId":"5e6c8d563cadb020b9160f66","articleId":2282,"userId":545,"content":"angular 自带有ssr 。\r\n如果用vue 的话，可以 nuxt 。\r\n方案一：通过DNS解析，用户访问 SPA （CDN），蜘蛛访问 SSR 。\r\n方案二： 直接使用 angular 或者 next.js （SSR）， （nuxt 的有性能问题）。","createdAt":1584172374928},{"id":10735,"originId":"5e6efb8145fcf75ee50e49f0","articleId":2282,"userId":33,"content":"vue 自带ssr 搞起了，，暂时。","createdAt":1584331649455},{"id":10736,"originId":"5e6eff4a89a5c35f11e32c48","articleId":2282,"userId":89,"content":"最简单易用的是 https://github.com/ykfe/egg-react-ssr ，真的是用法简单功能强大","createdAt":1584332618033},{"id":10737,"originId":"5e717cd589a5c35f11e330ce","articleId":2282,"userId":301,"content":"我们公司内部，也在开发一套SSR框架，不过还没有开源，可以看下这个demo https://github.com/fmfe/vue-genesis-templace\r\n\r\n应该是四月中旬左右，我们SSR框架的第一个项目上线，我个人期望的是能把他做成一个中间件的形式，可以在koa、express的框架中无缝集成使用。","createdAt":1584495829262},{"id":10738,"originId":"5e717fb845fcf75ee50e4e60","articleId":2282,"userId":1097,"content":"PC 电商前台页面 压根不适合用单页。。。。 ","createdAt":1584496568053},{"id":10739,"originId":"5e7d628458ab6717beb7ce77","articleId":2282,"userId":33,"content":"[@siyue543241338](/user/siyue543241338) 为什么呢。","createdAt":1585275524128},{"id":10740,"originId":"5e7d8fde58ab6717beb7ceec","articleId":2282,"userId":33,"content":"[@siyue543241338](/user/siyue543241338) 不用单页用jq，实在是头疼","createdAt":1585287134809},{"id":10741,"originId":"5e7f017c58ab6717beb7d1ac","articleId":2282,"userId":108,"content":"从3大框架的生态来看\r\n\r\n只有 Nuxt.js 实现的 的 SSR 是最简单，用起来最舒服的。","createdAt":1585381756421},{"id":10742,"originId":"5e81ada158ab6717beb7d5e4","articleId":2282,"userId":103,"content":"电商页面不是都走SEO竞价排名吗？有哪些内容需要SEO？\r\n电商页面主要以展现为主，会有很多逻辑需要写吗？\r\n我觉得你是没搞清楚真正需要什么，纠结是的用next还是nuxt还是react还是vue的问题","createdAt":1585556897451},{"id":10743,"originId":"5e81b35d64259617c49a38e9","articleId":2282,"userId":33,"content":"[@yuedun](/user/yuedun) 需要seo的当然是产品了。但是产品页的交互逻辑不想jq，简单展示用模板引擎还好，多一点选择性的交互，比如选择不同规格的价格展示，图片展示。用jq就太丑了，目前选择的方案是nestjs + vuessr了 nest单独一个controller负责ssr，其他负责接口，ssr能首屏更快些，客户端渲染的过程都集中到了服务端，性能出现瓶颈的话就只能加机器了，毕竟客户是上帝","createdAt":1585558365985},{"id":10744,"originId":"5e8301c858ab6717beb7d887","articleId":2282,"userId":3271,"content":"vue ssr 和nuxt,感觉还是vue 自带的ssr好一点。","createdAt":1585643976991},{"id":10745,"originId":"5e85757564259617c49a4098","articleId":2282,"userId":103,"content":"[@ganshiqingyuan](/user/ganshiqingyuan) 毕竟你已经有选择了，如果嫌jq不好用，你完全可以把vue当工具使用","createdAt":1585804661145},{"id":10746,"originId":"5e86fa7a64259617c49a44af","articleId":2282,"userId":628,"content":"先看业务场景，再决定用什么。\r\n\r\n架构好，jq也可以组织得很漂亮。\r\n技术菜，给你各种主流框架，写的也是一坨s。\r\n\r\n","createdAt":1585904250379},{"id":10747,"originId":"5ece670a82b588109b646517","articleId":2282,"userId":57,"content":"像淘宝等电商平台的robots.txt禁止了搜索引擎爬虫爬取的，一般的话，电商平台靠渠道引流吧。首屏渲染，我选react和自己diy ssr就好了。","createdAt":1590585098023},{"id":10748,"originId":"5ec72d0e67c8a45803da116d","articleId":2283,"userId":878,"content":"this 指向不同 ？","createdAt":1590111502394},{"id":10749,"originId":"5ec7402da87fc8583363daf9","articleId":2283,"userId":1079,"content":"`login() {}` 是對象方法成員的簡寫，`logout: function () {}` 可以簡寫成 `logout() {}`，但是簡寫的形式不能作為構造函數使用。`userInfo: () => {}` 是箭頭函數的寫法，不能作為構造函數，還有其他箭頭函數的「個性」。對象方法成員一般採用 `login() {}` 或者 `logout: function () {}` 這兩種寫法。","createdAt":1590116397249},{"id":10750,"originId":"5eccc43ea87fc8583363e1dd","articleId":2283,"userId":1157,"content":"第一种是es6的写法,相当于第三种写法;\r\n第二种写法也是es6的写法,目的是少些几个单词的代码.注意:  这样写的函数内,最好不要有this指向,可能达不到你预期的额效果;也就是说\r\nlet userM = {\r\n\tuserinfo :()=>{\r\n\t\tconsolo.log(this)  //这个this的指向不是  userM这个对象,指向windows对象\r\n\t}\r\n}","createdAt":1590477886541},{"id":10751,"originId":"5ece3e31b703280f0bcb7087","articleId":2283,"userId":1157,"content":"补充一下箭头函数的this指向:   箭头函数绑定了父级作用域的上下文","createdAt":1590574641819},{"id":10752,"originId":"5ecb6aec67c8a45803da1702","articleId":2284,"userId":117,"content":"大概就是每次require 的模块都是一个新实例，避免相互干扰","createdAt":1590389484442},{"id":10753,"originId":"5ece398282b588109b646485","articleId":2284,"userId":26,"content":"  ```text\r\n  Uncaught Error: Loading non-context-aware native module in renderer: '\\\\?\\xxxxxxx\\node_modules\\@serialport\\bindings\\build\\Release\\bindings.node', but app.allowRendererProcessReuse is true.\r\n  ```\r\n为了使用serialport，如今还在用electron5.0","createdAt":1590573442406},{"id":10754,"originId":"5eccc735a87fc8583363e1f3","articleId":2286,"userId":545,"content":"如果是 java 技术栈，又熟悉 spring 的话。\r\n前端可以考虑学 Angular ，后端可以 考虑 nest.js \r\n都跟 spring 非常像","createdAt":1590478645739},{"id":10755,"originId":"5ec8d70d67c8a45803da144b","articleId":2287,"userId":1880,"content":"[@atian25](/user/atian25) 大佬能解答下吗","createdAt":1590220557111},{"id":10756,"originId":"5ec8de9267c8a45803da147c","articleId":2287,"userId":1185,"content":"1.会\r\n2.如果插件是用addSingleton挂载到app上会有assert，但如果是手动this.app.xxx这样的方式那就无能为力了，不过在使用插件之前应该要看一下对应的api，确保没有冲突再引用","createdAt":1590222482639},{"id":10757,"originId":"5ec9d06e67c8a45803da151d","articleId":2287,"userId":113,"content":"1. 会。第三方插件目前没有合适的机制来规范变量的分配与命名\r\n2. 对于一个插件而言，不仅仅是可能设置app的属性，插件包含了 Service、中间件、配置、框架扩展等等。\r\n其中框架扩展又包含了application、context、request、response、helper，等等，而设置app的属性仅仅是对application的扩展。\r\n**插件的每一个可扩展点都面临着变量命名可能存在冲突的问题**。如果每引入一个第三方插件都要通过阅读源码来排查是否存在变量命名冲突，不是一个优雅的工程化实践。\r\n3. 这也是为什么CabloyJS在EggJS基础之上实现了基于模块的开发策略，以及实现模块之间变量隔离的原因之一\r\n","createdAt":1590284398898},{"id":10758,"originId":"5ec9e0d067c8a45803da1543","articleId":2287,"userId":1880,"content":"[@DerekYeung](/user/DerekYeung) 是的目前我也准备这么做了 引入之前先看看挂载的属性","createdAt":1590288592500},{"id":10759,"originId":"5ecb33fea87fc8583363df71","articleId":2287,"userId":358,"content":"插件是你自行引入的，当然要看有没有冲突啦。\r\n\r\n框架层面不会去约束这个，因为插件的一个职责是实现『差异化』，即我们允许多个插件的 package 的 eggPlugin.name 为同一个，从而实现插件替换对用户无感知。\r\n","createdAt":1590375422037},{"id":10760,"originId":"5ecbb9cf67c8a45803da17ea","articleId":2287,"userId":1880,"content":"[@atian25](/user/atian25) 学习了 谢谢","createdAt":1590409679824},{"id":10761,"originId":"5ecbd16ea87fc8583363e0e0","articleId":2287,"userId":358,"content":"这里其实对插件开发者是有约束的，插件的开发是需要有一定规范的。\r\n\r\n如果只是插件里面自己使用的，不要乱挂，一般要挂在自己的命名空间上，或者用 Symbol 搞个私有属性。","createdAt":1590415726209},{"id":10762,"originId":"5e78178a64259617c49a24d9","articleId":2291,"userId":89,"content":"不会，web框架已经过时了。egg很早就进入稳定期了，出了单进程版本其实是为了Serverless写的。至于fastify、midway、nest这些，有什么本质区别么？性能好点，语法好点，更像java，其实工程落地都差不多的。不在风口，火的可能不会很大\r\n\r\n现在都在折腾Serverless了，我们用egg，开源项目是egg-react-ssr。后面会基于Serverless做Serverless-side render。","createdAt":1584928650380},{"id":10763,"originId":"5e7819a358ab6717beb7c1c6","articleId":2291,"userId":22,"content":"不是会不会火的问题，nestjs 已经很火了，但是在国内 egg 他不香吗","createdAt":1584929187590},{"id":10764,"originId":"5e781aba64259617c49a24ea","articleId":2291,"userId":3,"content":"[@i5ting](/user/i5ting) 如果是Serverless的话，那数据是不是就掌握在别人手里了？","createdAt":1584929466987},{"id":10765,"originId":"5e7820ae58ab6717beb7c237","articleId":2291,"userId":541,"content":"[@darrenliuwei](/user/darrenliuwei) 讲道理，你不自己买服务器的话，云服务器数据不还是在别人那里","createdAt":1584930990180},{"id":10766,"originId":"5e783c5d64259617c49a25c3","articleId":2291,"userId":22,"content":"[@darrenliuwei](/user/darrenliuwei) 就算不使用 serverless，大部分情况数据还是掌握在别人手里了","createdAt":1584938077874},{"id":10767,"originId":"5e78533164259617c49a2615","articleId":2291,"userId":3,"content":"[@AnzerWall](/user/AnzerWall) [@justjavac](/user/justjavac) 但是买云服务器后期我可以将数据进行迁移到其他服务商啊","createdAt":1584943921089},{"id":10768,"originId":"5e78589158ab6717beb7c30e","articleId":2291,"userId":109,"content":"Serverless 本地调试很不方便吧？","createdAt":1584945297579},{"id":10769,"originId":"5e78b3b158ab6717beb7c461","articleId":2291,"userId":22,"content":"[@darrenliuwei](/user/darrenliuwei) serverless 也可以迁移(理论上)","createdAt":1584968625454},{"id":10770,"originId":"5e94682864259617c49a5ae9","articleId":2291,"userId":189,"content":"egg也是非常优秀的","createdAt":1586784296202},{"id":10771,"originId":"5e95117764259617c49a5b51","articleId":2291,"userId":36,"content":"我感觉还行吧，内部node项目准备都用nest，当然Egg也不错","createdAt":1586827639571},{"id":10772,"originId":"5e95450064259617c49a5c10","articleId":2291,"userId":688,"content":"当前阶段在 serverless 投产时更合适的选择是 serverless component，主要有以下优势：\r\n1. 方便现有框架的适配，以及本地调试（本地启动采用框架原有方式即可）\r\n2. 对服务商依赖可控，换到另外的服务商时，只要对应的服务商支持 serverless framework 规范，那么只需要修改适配部分，不需要对工程代码主体做改动\r\n3. 相比于纯粹的 serverless 工程结构，该方案更符合当前已有的技术栈，避免踩更多的坑\r\n\r\n关于 nestjs，这边写了一个适配腾讯云 serverless 的 component：https://github.com/wujohns/tencent-sls-nestjs","createdAt":1586840832870},{"id":10773,"originId":"5e96651364259617c49a5e6a","articleId":2291,"userId":3391,"content":"看什么角度来看，框架已经够多甚至太多复杂到令人厌倦，对现有的服务来说透过 serverles/service worker/kv 解耦，然而简单整洁是美好的，可是混乱复杂本身一向比较好卖钱，所以劳动市场仍需要热衷肥大框架的开发者。","createdAt":1586914579201},{"id":10774,"originId":"5e96ebbc49db644e3aba775d","articleId":2291,"userId":113,"content":"[@gousern](/user/gousern) Less is more, while more is less. 易简与复杂是事物的一体两面。单体框架确实肥大的居多，但如果像CabloyJS那样就不同了。CabloyJS中所有的逻辑都是基于“业务模块”开发。“业务模块”之间变量隔离，单独开发、单独编译，有利于项目的不断成长","createdAt":1586949052190},{"id":10775,"originId":"5e985aac0275394e76881c3e","articleId":2291,"userId":3392,"content":"[@i5ting](/user/i5ting) 新的框架出来，又要重新踩坑，一路趟雷，直到大体趋于稳定。","createdAt":1587042988184},{"id":10776,"originId":"5e9c1282d870946c6b6bd047","articleId":2291,"userId":3391,"content":"[@zhennann](/user/zhennann) 这么想的话，对 Less is more 有些误读了，我没你那么乐观，换其他框架仍是在公交车上，只是换了个位置，不然何须 996？今年肺癌肆虐，也许 Less is enough 会长久些。","createdAt":1587286658773},{"id":10777,"originId":"5ea148290275394e76882c62","articleId":2291,"userId":99,"content":"基础最重要  框架都差不多","createdAt":1587628073938},{"id":10778,"originId":"5ea1822f0275394e76882d6a","articleId":2291,"userId":3393,"content":"基于团队已有项目考虑，暂时不考虑更换nest.\r\n个人的小项目，很乐意尝试下nest.","createdAt":1587642927837},{"id":10779,"originId":"5ec4958867c8a45803da0ad3","articleId":2291,"userId":190,"content":"慢慢学吧","createdAt":1589941640875},{"id":10780,"originId":"5ec293da67c8a45803da06c3","articleId":2293,"userId":1079,"content":"應該把你讀文件的具體代碼貼出來。。你這是在讀數據之後自己 `JSON.parse(data)` 轉化成 JSON 對象了吧。看你自己想要什麼類型的數據，你可以 `JSON.stringify()` 變成 JSON 字符串。但是如果你想要字符串你不用 `JSON.parse(data)`，讀取數據的 data 本身就是字符串，或者 `data.toString()`。","createdAt":1589810138515},{"id":10781,"originId":"5ec33a1667c8a45803da077a","articleId":2293,"userId":3395,"content":"[@jaylin1011](/user/jaylin1011) \r\n\r\nconst fs = require('fs')\r\n    \r\nlet fileReadStream = fs.createReadStream('./data.json')\r\n\r\nlet str = ''\r\n\r\nfileReadStream.on('data', (chunk) => { \r\n    str += chunk\r\n})\r\nfileReadStream.on('end', () => { \r\n    console.log(JSON.parse(str))\r\n    console.log(`接收完毕`)\r\n})\r\n\r\nfileReadStream.on('error', (error) => { \r\n    console.log(error)\r\n})\r\n\r\n这是读取文件的代码\r\n我想要对读出来的json进行循环，取出data中的某个属性值","createdAt":1589852694531},{"id":10782,"originId":"5ec3511f67c8a45803da07f2","articleId":2293,"userId":1079,"content":"[@zhyn1001](/user/zhyn1001) \r\n給 JSON 對象進行一下處理，組織自己想要的數據。\r\nfileReadStream.on('end', () => {\r\n  const [{ data }] = JSON.parse(str);\r\n  data.forEach(({ name, sex, age }) => console.log(name, sex, age));\r\n});\r\n","createdAt":1589858591747},{"id":10783,"originId":"5ec3951567c8a45803da08da","articleId":2293,"userId":3395,"content":"[@jaylin1011](/user/jaylin1011) 感谢，问题已解决","createdAt":1589875989864},{"id":10784,"originId":"5ec34ccea87fc8583363d15c","articleId":2294,"userId":3396,"content":"没用具体的错误，只有一个日志文件。","createdAt":1589857486007},{"id":10785,"originId":"5ec38f7aa87fc8583363d220","articleId":2294,"userId":354,"content":"清楚一下 node_modules，保证只用一个工具来进行 install","createdAt":1589874554368},{"id":10786,"originId":"5ec382c0a87fc8583363d1e2","articleId":2295,"userId":3377,"content":"很清楚\r\nhttps://github.com/mysqljs/mysql","createdAt":1589871296117},{"id":10787,"originId":"5ec1f506a87fc8583363ce4b","articleId":2297,"userId":1466,"content":"kafka、rabbitmq等专业消息队列都支持订阅同一个主题。","createdAt":1589769478740},{"id":10788,"originId":"5ec1fb2fa87fc8583363ce77","articleId":2297,"userId":113,"content":"这就是socket.io已经解决的问题（通过room机制），参见：[socket.io](https://github.com/socketio/socket.io)\r\n如果使用egg框架，就使用egg插件：[egg-socket.io](https://github.com/eggjs/egg-socket.io)\r\n","createdAt":1589771055799},{"id":10789,"originId":"5ec2245da87fc8583363cedb","articleId":2297,"userId":1161,"content":"kafka或者rabbitmq吧","createdAt":1589781597834},{"id":10790,"originId":"5ec335c767c8a45803da0740","articleId":2297,"userId":59,"content":"redis 并不是用来干这个的。 数量大了肯定不行","createdAt":1589851591403},{"id":10791,"originId":"5ec0cba367c8a45803da032e","articleId":2298,"userId":358,"content":"带最小化可复现仓库提 issue。\r\n\r\n猜测是你的中间件执行时序问题，要放到 coreMiddware 前面。\r\n\r\n一般来说，直接覆盖 egg-onerror 的配置即可，不用自行写。","createdAt":1589693347375},{"id":10792,"originId":"5dd8a9128287937a65af6522","articleId":2299,"userId":21,"content":"几年前写过一个，你看看是不是你要的\r\nhttps://github.com/zy445566/alipay-request-node","createdAt":1574480146599},{"id":10793,"originId":"5e057b83ba8f6d46c4edf676","articleId":2299,"userId":3400,"content":"我也碰到这个问题，但是阿里云只有java有自带的sdk，找了半天没办法 最后使用python实现了一套生成sn的脚本 把下下来的脚本丢进去生成，最后可以正确返回了","createdAt":1577417603711},{"id":10794,"originId":"5e0750320696c446bf65091c","articleId":2299,"userId":166,"content":"前几天刚好碰到过这个问题，alipay 官方 sdk 没有公钥证书的实现，从理解概念到实现调了我几乎两天……\r\nSN 里面的 serialNumber 很容易获取，但 name 是最难搞的，其实参考 Java sdk，搜索关键字 getX500PrincipalName，就能搜到 [RFC2253](https://tools.ietf.org/html/rfc2253) 的说明，要照着规范写实现。\r\n大致是：\r\n解析证书获得的签发机构（issuer）字段, 由 Common Name（CN）/ Organizational Unit（OU）等几个字段组成, 拼成这样一个字段：`CN=${CN},OU=${OU},O=${O},C=${C}; 是要`找的 name 了\r\n其他的把 name 和 serialNumber 拼接 md5 等就简单了，参考 java 实现吧","createdAt":1577537586748},{"id":10795,"originId":"5e07513e0696c446bf650921","articleId":2299,"userId":166,"content":"有个很重要的问题是 nodejs 解析阿里云公钥证书的库有很多坑，列举几个可以慢慢去尝试\r\nhttps://www.npmjs.com/package/cert-info\r\nhttps://github.com/Southern/node-x509\r\nhttps://www.npmjs.com/package/x509\r\nhttps://www.npmjs.com/package/pkijs\r\nhttps://www.npmjs.com/package/[@fidm](/user/fidm)/x509 \r\n几乎每一种库我都试过了，有的像 pkijs 要配合 asn1js 库去使用，非常难用，最后个人是用了 [[@fidm](/user/fidm)/x509 ](https://www.npmjs.com/package/[@fidm](/user/fidm)/x509) 这个库，供参考","createdAt":1577537854237},{"id":10796,"originId":"5e0e8c704bea432607fcca4c","articleId":2299,"userId":3401,"content":"var AlipaySdk = require('alipay-sdk').default\r\nvar config = require(rootDir + '/configs')\r\nvar fs = require('fs')\r\n\r\nconst alipaySdk = new AlipaySdk({\r\n  appId: config.alipay.appid,\r\n  privateKey: fs.readFileSync(rootDir + 'alipay_private_key.pem', 'ascii')\r\n})\r\n\r\nmodule.exports = alipaySdk\r\n\r\n\r\n然后具体代码里执行：\r\nyield alipaySdk.exec('alipay.fund.trans.toaccount.transfer', params)","createdAt":1578011760025},{"id":10797,"originId":"5ebfba1ae785ec40b04fd184","articleId":2299,"userId":3402,"content":"最后有成功实现的吗，使用公钥证书加密方式","createdAt":1589623322312},{"id":10798,"originId":"5e7dc35d58ab6717beb7cfd1","articleId":2300,"userId":22,"content":"你需要再运行：\r\n\r\n```\r\nwhich node\r\nwhich nodejs\r\n```","createdAt":1585300317445},{"id":10799,"originId":"5e7de05c64259617c49a33d0","articleId":2300,"userId":26,"content":"nodejs 是Ubuntu上很很很很很很旧的版本的命名，估计你apt直接安装了。","createdAt":1585307740679},{"id":10800,"originId":"5e7ef64b64259617c49a34fd","articleId":2300,"userId":717,"content":"[@HobaiRiku](/user/HobaiRiku) 也就是说 node就是nodejs，node是nodejs的缩写？","createdAt":1585378891774},{"id":10801,"originId":"5e7ef6d258ab6717beb7d173","articleId":2300,"userId":717,"content":"[@HobaiRiku](/user/HobaiRiku) 是的，我感觉两个都装上了。可以查到版本号","createdAt":1585379026760},{"id":10802,"originId":"5e8073c758ab6717beb7d32d","articleId":2300,"userId":109,"content":"[@lupy0925](/user/lupy0925) 官方名称是 Node.js ，大家常用别名有 nodejs, node.js, node 。 最后一个（node）要看上下文环境。","createdAt":1585476551001},{"id":10803,"originId":"5ebd0b002d0afc4087f558f0","articleId":2300,"userId":1559,"content":"apt install的nodejs 版本太旧了\r\n建议用tnvm装","createdAt":1589447424399},{"id":10804,"originId":"5ebcac46e785ec40b04fc3c7","articleId":2302,"userId":3404,"content":"顶一下！","createdAt":1589423174874},{"id":10805,"originId":"5ebcb5702d0afc4087f551d1","articleId":2302,"userId":89,"content":"raw-body一般都是解析post请求体，加一些日志和trycatch看看","createdAt":1589425520787},{"id":10806,"originId":"5ebaa8802d0afc4087f54a35","articleId":2303,"userId":1079,"content":"我的理解是 data 中存放的是較為扁平化的響應式依賴，其他的非響應式數據你可以通過 `Object.freeze()` 或者 `v-once` 優化。","createdAt":1589291136949},{"id":10807,"originId":"5ebb7e9e2d0afc4087f54d95","articleId":2303,"userId":107,"content":"vue初始化你的data是有一定的消耗的（defineProperty转换data使其具有运行时依赖收集的行为），放外面的话加快初始化的速度，没毛病","createdAt":1589345950136},{"id":10808,"originId":"5ebbecfc2d0afc4087f55080","articleId":2303,"userId":113,"content":"放到外面要注意变量的作用域","createdAt":1589374204641},{"id":10809,"originId":"5ea5b385d870946c6b6be48c","articleId":2304,"userId":1259,"content":"首先page.goto(loginUrl)的方法返回了什么的，其次，如果dialog事件代表的失败，是否还有另外一个事件表示成功，后者的话，可以通过同时监听成功的事件返回。前者，是否能通过page.goto(loginUrl)返回的数据进行是否成功判断，从而不用另外监听dialog事件。","createdAt":1587917701396},{"id":10810,"originId":"5ea62f0c0275394e7688364e","articleId":2304,"userId":594,"content":"onAlert错的，需要自己用promise封装","createdAt":1587949324553},{"id":10811,"originId":"5ea9253c30176508da9b6ed9","articleId":2304,"userId":1504,"content":"[@heguangda](/user/heguangda) 谢谢回复,page.goto什么也不返回,就是跳转一个网页,跳转成功后,有肯能会捕捉到alert,监听是必须的,因为alert是随机触发的....因为监听和主程序是并行执行的,所以会导致上图错误~~~现在有一点我不太明白,既然已经有一个return已经执行了,不就代表这次路由访问结束了么?为什么监听里还会执行一次return","createdAt":1588143420186},{"id":10812,"originId":"5ea925d030176508da9b6ee6","articleId":2304,"userId":1504,"content":"[@index-js](/user/index-js) 谢谢回复,能给个思路么?page.once 我不会封装,page.once ,里面的代码已经是await形式的了啊","createdAt":1588143568800},{"id":10813,"originId":"5eaa8b8030176508da9b7169","articleId":2304,"userId":2226,"content":"```\r\nasync function main() {\r\n  const res = await gotoWrapper(page);\r\n  // ...\r\n  return res;\r\n}\r\n\r\nfunction gotoWrapper(page) {\r\n  return new Promise(async resolve => {\r\n    // 此时代表goto失败\r\n    page.on('dialog', () => {\r\n      resolve({ status: 'error', codeMsg: -101 });\r\n    });\r\n\r\n    await page.goto(loginUrl, { timeout: 8000 });\r\n    resolve({ status: 'success' });\r\n  });\r\n}\r\n```","createdAt":1588235136172},{"id":10814,"originId":"5eaa9736fd11584365d2cbb8","articleId":2304,"userId":358,"content":"建议需要复习下 Promise 和 callback 的区别","createdAt":1588238134655},{"id":10815,"originId":"5eba610ee785ec40b04fbc98","articleId":2304,"userId":1155,"content":"[@iori2882](/user/iori2882), 先回答你的一个疑问：\r\n> 既然已经有一个return已经执行了,不就代表这次路由访问结束了么?为什么监听里还会执行一次return\r\n\r\n因为那你写的代码内存泄漏了，而且是典型的内存泄漏，你新增了一个监听器，却没有取消监听（once表示执行一次回调函数才取消监听），你应该在return之前把监听器取消掉。\r\n其次你写的代码还有问题，代码看上去像是自动化测试，恰巧之前我写过自动化测试。page.goto指的是跳往新的页面，你这里应该给个超时时间，因为页面加载是需要时间的，保守估计，给个5秒，如果5秒内没有监听到alert事件，就返回success，否则返回错误","createdAt":1589272846720},{"id":10816,"originId":"5ebbe95e2d0afc4087f5506f","articleId":2304,"userId":1504,"content":"[@yuezm](/user/yuezm) 谢谢你的耐心回复,还打了一段示例代码,十分感谢,,现在的问题是,即便向您这么写,gotoWrapper方法里的page.on也是单独进程的,可发生如下情况:还没等捕捉alert的时候,resolve({ status: 'success' })已经先执行了,这样就错过捕捉alert 了,我的想法是有没有办法让page.on变成同步的,就是执行page.on的时候,其他代码不执行","createdAt":1589373278620},{"id":10817,"originId":"5ebbe9d92d0afc4087f55073","articleId":2304,"userId":1504,"content":"[@zhoushoujian](/user/zhoushoujian) 嗯 事实确实如此,我用的是谷歌的puppeteer自动化测试,这个page.on是谷歌提供的方法,我并没有找到停止这个监听的方法!在GitHub上isuse也得不到回复~~","createdAt":1589373401319},{"id":10818,"originId":"5e99c5d90275394e76881f7f","articleId":2305,"userId":3,"content":"nest.js我没用过，我目前在用TS版的egg.js，感觉还不错，至少满足我目前的需求。\r\n\r\n如果你最后选择了egg.js，我建议你一定要使用TS版的egg.js，TS是真的香！","createdAt":1587135961122},{"id":10819,"originId":"5e99d377d870946c6b6bce31","articleId":2305,"userId":1079,"content":"[@darrenliuwei](/user/darrenliuwei) 我看 egg 官网有一些 TS 的介绍，也有小伙伴建议我使用 midwayjs 的，打算尝试下看看。一起加油吧。","createdAt":1587139447826},{"id":10820,"originId":"5e9a49b5d870946c6b6bce5c","articleId":2305,"userId":513,"content":"学不动了。\r\njavascript方案：egg.js (不考虑ts)\r\n若要严仅，nest.js+ts方案  v.S  java springboot方案\r\n会选择後者。\r\n一套便捷快速\r\n一套完善严仅","createdAt":1587169717794},{"id":10821,"originId":"5e9a5b610275394e76881fbb","articleId":2305,"userId":1079,"content":"[@Solomonqoo](/user/Solomonqoo) 还没学完， vue3 也来了，java 没学过，nestjs 刚入门。我太难了。","createdAt":1587174241193},{"id":10822,"originId":"5e9aa26fd870946c6b6bcecf","articleId":2305,"userId":109,"content":"midway or nest 都试试","createdAt":1587192431409},{"id":10823,"originId":"5e9aa546d870946c6b6bcedc","articleId":2305,"userId":1079,"content":"[@waitingsong](/user/waitingsong) 其他社区伙伴也是大概这个思路给我建议，感谢。目前打算先入门和巩固 nestjs，后续有余力会关注 Midway。","createdAt":1587193158361},{"id":10824,"originId":"5e9ada77d870946c6b6bcf1f","articleId":2305,"userId":109,"content":"[@jaylin1011](/user/jaylin1011) v2的也是你吧。建议你先试试 midway。 nestjs 走的是spring的路线，我觉得太重了。","createdAt":1587206775484},{"id":10825,"originId":"5e9b49360275394e768820dc","articleId":2305,"userId":1079,"content":"[@waitingsong](/user/waitingsong) 是我是我，新手入门只能从善如流，两边都进行依赖收集。感谢大佬们，建议很有帮助。","createdAt":1587235126463},{"id":10826,"originId":"5e9bb6a9d870946c6b6bcfd9","articleId":2305,"userId":109,"content":"[@jaylin1011](/user/jaylin1011) v2一楼那种一句话结论的不用理会。\r\n\r\nmidway 相对简单上手快。可用egg插件比较丰富。\r\nnestjs 学习成本高些。\r\n自己两个都试试看哪个更合适。\r\n\r\negg是基础框架，作为后端开发应该上ts，不过它对ts支持一般，不如用 midway。","createdAt":1587263145391},{"id":10827,"originId":"5e9bdb280275394e7688215e","articleId":2305,"userId":1079,"content":"[@waitingsong](/user/waitingsong) 哈哈好的，关键还是在于我想怎么学。目前因为 midway 和 nestjs 都有 TS 的良好支持，所以会针对这两个生态来深入，不过我得先再熟练 TS。","createdAt":1587272488222},{"id":10828,"originId":"5e9c75f5d870946c6b6bd0bf","articleId":2305,"userId":1198,"content":"Midway 很强大的，如果你真的是拿来做大型crud的业务.midway可以解决  3 层过小在egg上体验的问题，如果只是和GQL交互，或者简单的BFF 用tsegg足够了","createdAt":1587312117024},{"id":10829,"originId":"5e9d3d12d870946c6b6bd1f6","articleId":2305,"userId":110,"content":"nest很不错，值得推荐","createdAt":1587363090774},{"id":10830,"originId":"5eb294e02d0afc4087f5392b","articleId":2305,"userId":2,"content":"使用TS的话，Midway是不错的选择，但是个人感觉没有Nest好用","createdAt":1588761824501},{"id":10831,"originId":"5eb2f7fb2d0afc4087f539c2","articleId":2305,"userId":1079,"content":"[@dingyuanwu](/user/dingyuanwu) 目前的話，我嘗試著使用 egg + TS，雖然他並沒有推出 TS 正式版但還我使用的時候沒發現大問題，TS 體驗還是很不錯的，nestJS 的話本人只能算入門，部分內容不熟悉。","createdAt":1588787195399},{"id":10832,"originId":"5eb37c422d0afc4087f53a73","articleId":2305,"userId":2,"content":"[@jaylin1011](/user/jaylin1011) egg + TS的话可以直接转Midway，Midway对TS的支持比Egg要好\r\n","createdAt":1588821058101},{"id":10833,"originId":"5eb4c7862d0afc4087f53cff","articleId":2305,"userId":2246,"content":"[@waitingsong](/user/waitingsong) 对 `Midway` 心动了，最怕类似 “it depends” 的答案","createdAt":1588905862345},{"id":10834,"originId":"5eb62381e785ec40b04fb324","articleId":2305,"userId":1275,"content":"最近入坑了nestjs，打算后面新项目用上","createdAt":1588994945275},{"id":10835,"originId":"5eb691f3e785ec40b04fb4b7","articleId":2305,"userId":109,"content":"[@xuxu7](/user/xuxu7) nestjs和 egg/midway 两种都不错。 如果后者建议midway（因为对ts支持比egg更好）。","createdAt":1589023219046},{"id":10836,"originId":"5eb6a5232d0afc4087f5416b","articleId":2305,"userId":1079,"content":"[@vjzning](/user/vjzning) 我之前也是在 Ioc 容器中瘋狂摸索==，我目前是在熟悉 egg+ts，後續再深入試試水哈哈。","createdAt":1589028131918},{"id":10837,"originId":"5eba5b5f2d0afc4087f54922","articleId":2305,"userId":182,"content":"NestJS和Express的区别在于--\r\n虽然它们都是NodeJS的框架，但它们处理的是不同的问题域-实际上，NestJS使用Express作为HTTP服务器。\r\nExpress用于解决路由，正文解析等问题。\r\nNestJS旨在更好地组织代码-它使我们可以编写更清晰，可重用的代码，并添加一些更高级的结构（例如拦截器，过滤器等）。不过，使用Express的中间件可以做到这一点。\r\n在一开始，NestJS会增加一些难度，对于简单的应用程序来说可能这并不需要，但是，在做大的项目时，你将感激NestJS组织代码的方式。 ","createdAt":1589271391942},{"id":10838,"originId":"5d3ac4eeb4725a628e268f28","articleId":2306,"userId":356,"content":"如果特别想去大厂，nodejs经验又比较丰富，建议做一年前端，这样不管是前端前栈都有优势，因为nodejs基础的知识都是和前端想通的 只是需要去深度学习以下某个框架的一些规定知识 比如react中的redux，数据单向流，虚拟dom渲染，组建通信，工程化等","createdAt":1564132590616},{"id":10839,"originId":"5d3acd0cb4725a628e268f82","articleId":2306,"userId":501,"content":"nodejs做游戏服务端比较多","createdAt":1564134668703},{"id":10840,"originId":"5d3aec719969a529571d77f9","articleId":2306,"userId":97,"content":"1. 深入到 Node 底层，了解 V8，event-loop，线程，协程，异步IO 等等能看到的关于 Node 的所有标签或者相关标签，这些底层实现的技术，是在后端中通用的，再随便翻看 Java 和 Go 的大厂招聘，你把那些局限于 Java 或者 Go 的要求去掉，剩下的都是后端应该了解和掌握的。\r\n2. 大厂当然招 Node 服务端开发了，毋庸置疑\r\n3. BFF (backend-for-frontend)\r\n\r\n不建议再去学习前端的技术内容，前端技术有个特点，就是实现起来比较简单，但是背后的工程思路可要花时间才能体会，大概看看官方的指南，了解下怎么用，好配合前端写接口就行了。\r\n\r\n比如现在流行的 MVVM，和函数式编程，它们实现起来非常的简单，但是要理解背后的思想，属实不是一件容易的事情。况且术业有专攻，即使要成为全栈，也最好在一门已经精通的情况下进行，否则你会发现虽然你好像看上去知道的比较多，但其实每一项拿出来就都很平凡。","createdAt":1564142705713},{"id":10841,"originId":"5d3bc47e9969a529571d7912","articleId":2306,"userId":2,"content":"感谢各位大佬，受教了 [@hsiaosiyuan0](/user/hsiaosiyuan0) 对于第二个问题，招聘网站和官网上都没有多少信息，也不明确主流的要求有哪些？","createdAt":1564198014992},{"id":10842,"originId":"5d3eba35b4725a628e2696b7","articleId":2306,"userId":89,"content":"1、大家都说Node的发展前景不错，但是看到大多招聘Node的都只是挂个Node的title，实际招聘的是前端或者全栈，招Node服务端的偏少，如果想使用Node做服务端开发，具体该怎样规划一下后续的学习路径？\r\n\r\n- 招node的并不少，但好的很少。\r\n- Node操作db的偏少，这已经是后端领域了\r\n- Node做服务端开发\r\n    - 内部系统，随便玩，骑驴找马型，补位最好\r\n    - 创新公司，中小型的，不过不是太多，国外会好非常多\r\n    - 自己搞开源或商业项目\r\n\r\n2、最近看了下大厂的招聘，基本还是c++、java，有大厂招Node服务端开发吗？\r\n\r\n有的，小到应用，大到内核，都有坑。阿里内部帮推荐：i5ting@126.com\r\n\r\n3、Node的定位到底是什么？\r\n\r\n- 前端基建（前端）\r\n- bff、api聚合（前端）\r\n- 纯后端，操作db\r\n\r\n未来serverless里，node依然是一等公民。\r\n\r\n","createdAt":1564391989089},{"id":10843,"originId":"5d3ef13b9969a529571d7ee8","articleId":2306,"userId":2,"content":"我的帖子居然惊动了狼叔[@i5ting](/user/i5ting) ,有点小激动^_^ \r\n\r\n感谢狼叔和各位大佬的回答，解决了我最近比较迷惑的地方，准备深挖一下服务端的细节，然后学习一下前端的基础知识\r\n那么问题来了，《更了不起的Node.js》卷二什么时候有？刚读完卷一，收获良多，视野也开阔了很多，感谢狼书","createdAt":1564406075018},{"id":10844,"originId":"5d3ef2079969a529571d7ef1","articleId":2306,"userId":845,"content":"我已经转Go去了","createdAt":1564406279286},{"id":10845,"originId":"5d3fc0bbb4725a628e269979","articleId":2306,"userId":2509,"content":"我们招node后端！用AWS serverless，求简历！~ hr@factchina.com","createdAt":1564459195467},{"id":10846,"originId":"5d42ba83b4725a628e26a495","articleId":2306,"userId":3406,"content":"我觉得大公司不会要纯Node的后端，现在很多公司都是用node去做些辅助前端的工作。我也是做前端的，也是打算去学一些辅助前端的node知识，让我去做后端的node我也会比较排斥。","createdAt":1564654211673},{"id":10847,"originId":"5d43893d9969a529571d8d3a","articleId":2306,"userId":2,"content":"是的，目前都是这样的比较多，我也准备学点前端的东西","createdAt":1564707133436},{"id":10848,"originId":"5d438b1eb4725a628e26a616","articleId":2306,"userId":3407,"content":"可以尝试一下前端 ，也许会对node 理解更深一些","createdAt":1564707614335},{"id":10849,"originId":"5d438d629969a529571d8d5f","articleId":2306,"userId":2132,"content":"做前端吧😂😄","createdAt":1564708194265},{"id":10850,"originId":"5d439b9c9969a529571d8dd9","articleId":2306,"userId":631,"content":"服务端的路过，真的很困惑，学前端的路，漫漫，慢慢。","createdAt":1564711836741},{"id":10851,"originId":"5eb380ad2d0afc4087f53a85","articleId":2306,"userId":2,"content":"再次激活。\r\n在大厂干了半年，这个疑惑依然存在。不过对Node的使用场景有了更多的了解，serverless路漫漫，感觉还没有看到头。\r\n最近团队的业务全部切换到java了，主要还是集团内部服务对Node的支持不如Java，很多的集团内部技术都无法很好的使用。\r\n最近在做职业的规划，目前的想法是Node继续深挖，补齐前端的知识点，向着前端的路迈进。\r\n学习前端的过程，才真正理解一入前端深似海。","createdAt":1588822189727},{"id":10852,"originId":"5eb3863e2d0afc4087f53a93","articleId":2306,"userId":90,"content":"[@dingyuanwu](/user/dingyuanwu) 说明大厂里面node还是打辅助～，转go了。后端的知识倒是相通的，归根结底是要让业务快速落地，盈利。其他的技术什么的，老板才不管。大厂这个说法总让我害怕，我是在工厂流水线干活了？","createdAt":1588823614505},{"id":10853,"originId":"5eb3f08ce785ec40b04fb002","articleId":2306,"userId":2,"content":"应该都是这样的吧，业务快速落地，试错。\r\n这边有的倒是用Node做DB层面的开发，但是总归规模不大，主要还是打杂\r\n老大是Java的，所以这边之前Node的后端服务都切换到Java了[手动狗头]","createdAt":1588850828924},{"id":10854,"originId":"5eb60d912d0afc4087f53f32","articleId":2306,"userId":1912,"content":"同样的问题去java社区问一下，估计又是完全不同的结果。\r\n个人意见：既然你的规划是后端领域，还是早点转java比较好。招聘信息是最真实能反应现状的。\r\n","createdAt":1588989329542},{"id":10855,"originId":"5eb61866e785ec40b04fb2f8","articleId":2306,"userId":89,"content":"[@gzf1234](/user/gzf1234) java工资比node不是少一点半点吧，哈哈哈哈","createdAt":1588992102394},{"id":10856,"originId":"5eb646912d0afc4087f53fcd","articleId":2306,"userId":2,"content":"所以Node专注与后端有出路吗？[@i5ting](/user/i5ting) \r\n感觉夹在前后之间，左右为难[滑稽]\r\n个人目前打算还是往全站发展，但是发现前端的水真深[狗头]","createdAt":1589003921613},{"id":10857,"originId":"5eb67465e785ec40b04fb406","articleId":2306,"userId":89,"content":"[@dingyuanwu](/user/dingyuanwu) 三条路\r\n\r\n- 纯后端，往node架构上走。能进到淘宝node架构组。\r\n- 往全栈，偏前端方向，职位是前端，这是比较难的，但就业广泛。前端强node也强的不太多，node强且前端强的优势更明显。\r\n- 往node工具层发展，比如umi作者云谦","createdAt":1589015653385},{"id":10858,"originId":"5eb67708e785ec40b04fb417","articleId":2306,"userId":518,"content":"18年年终跟你一样的疑惑 下定决心走前端了 现在已经工作一段时间了 很好转的","createdAt":1589016328891},{"id":10859,"originId":"5eb678f12d0afc4087f540b1","articleId":2306,"userId":152,"content":"node3年。现在跟着公司一起转go。 两边都写，慢慢侧重到go上。 后端的话通用的部分很多，真正语言要切换的代价不高。","createdAt":1589016817872},{"id":10860,"originId":"5eba30232d0afc4087f54689","articleId":2306,"userId":3408,"content":"好","createdAt":1589260323805},{"id":10861,"originId":"5eba1975e785ec40b04fb96f","articleId":2307,"userId":512,"content":"问题解决，本问题的根源是opencv4nodejs.node生成时存在编译问题，解决方法是先安装nan组件，npm install --save nan，之后npm install --save opencv4nodejs时node-gyp就可以正确编译。","createdAt":1589254517957},{"id":10862,"originId":"5eb6692ce785ec40b04fb3de","articleId":2309,"userId":21,"content":"12之后就Stable，可以用，之前也用过一次，虽然还要gyp但api体验比之前要好点","createdAt":1589012780415},{"id":10863,"originId":"5eb6ae4ce785ec40b04fb4ef","articleId":2309,"userId":2111,"content":"[@zy445566](/user/zy445566) 好嘞","createdAt":1589030476674},{"id":10864,"originId":"5eb7f50a2d0afc4087f54264","articleId":2309,"userId":3411,"content":"N-API 在目前各个 LTS 线（v10.x，v12.x）上都是稳定版本了，如果使用 C++ 开发 add-on 的话还可以使用 [node-addon-api](https://github.com/nodejs/node-addon-api) ，有更好的 C++ 开发体验","createdAt":1589114122909},{"id":10865,"originId":"5eb5ffb72d0afc4087f53ee4","articleId":2310,"userId":89,"content":"信息太少了，favicon可能会有请求","createdAt":1588985783567},{"id":10866,"originId":"5eb616812d0afc4087f53f48","articleId":2310,"userId":1275,"content":"最后发现我是chrome浏览器的一个插件报错导致的问题，刷新一次其实是请求了2次","createdAt":1588991617959},{"id":10867,"originId":"5eb61eae2d0afc4087f53f6e","articleId":2310,"userId":158,"content":"是不是直接响应了非常简单的一个字符串","createdAt":1588993710402},{"id":10868,"originId":"5eaa339f30176508da9b7080","articleId":2311,"userId":36,"content":"没精力折腾新框架啊","createdAt":1588212639223},{"id":10869,"originId":"5eae2a90fd11584365d2ce70","articleId":2311,"userId":3391,"content":"[@dengnan123](/user/dengnan123) 两难，折腾新框架或继续被旧框架折腾","createdAt":1588472464862},{"id":10870,"originId":"5eb0c2fc2d0afc4087f535bc","articleId":2311,"userId":1370,"content":"我在一些自己的小项目中使用","createdAt":1588642556216},{"id":10871,"originId":"5eb175c7e785ec40b04faab8","articleId":2311,"userId":1968,"content":"小项目实践过，初步感觉还行","createdAt":1588688327664},{"id":10872,"originId":"5eb2daa9e785ec40b04fadce","articleId":2311,"userId":110,"content":"感觉比react和vue都有意思一点，但是唯独生态圈不好。这年头选框架最主要的还是生态圈比较重要，其他方面大同小异","createdAt":1588779689875},{"id":10873,"originId":"5eb3bab9e785ec40b04faf55","articleId":2311,"userId":545,"content":"另外，也可以选择 Angular  ，生态也不错~","createdAt":1588837049957},{"id":10874,"originId":"5eb39e612d0afc4087f53adf","articleId":2312,"userId":268,"content":"```js\r\nimport * as bodyParser from 'body-parser';\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  app.use(bodyParser.json({limit: '50mb'}));\r\n  app.use(bodyParser.urlencoded({limit: '50mb', extended: true}));\r\n  await app.listen(3000);\r\n}\r\nbootstrap();\r\n```","createdAt":1588829793942},{"id":10875,"originId":"5eb39e882d0afc4087f53ae4","articleId":2312,"userId":261,"content":"学会看文档，学会利用搜索引擎：\r\n[搜索引擎关键字：nestjs request entity too large](https://stackoverflow.com/questions/52783959/nest-js-request-entity-too-large-payloadtoolargeerror-request-entity-too-larg)","createdAt":1588829832998},{"id":10876,"originId":"5eb3a0312d0afc4087f53b08","articleId":2312,"userId":3413,"content":"[@jiangli373](/user/jiangli373) 可以了，多谢","createdAt":1588830257579},{"id":10877,"originId":"5eb3a0372d0afc4087f53b0c","articleId":2312,"userId":33,"content":"默认是express的大小","createdAt":1588830263337},{"id":10878,"originId":"5eb3a08ee785ec40b04faf15","articleId":2312,"userId":3413,"content":"[@helloyou2012](/user/helloyou2012) 该找的都找了，只是没找到nestjs相关的，试了下直接引入bodyParser解决了","createdAt":1588830350650},{"id":10879,"originId":"5eaeb60efd11584365d2cf13","articleId":2313,"userId":1192,"content":"真难理解呀== \r\nhttps://stackoverflow.com/questions/61573233/why-node-js-inherit-implement-by-objectsetprototypeofa-prototype-b-prototype/61573281?noredirect=1#comment108917543_61573281","createdAt":1588508174931},{"id":10880,"originId":"5eaf6d98fd11584365d2cf92","articleId":2313,"userId":11,"content":"第一行是继承原型方法，就是 new 出来后能调用的，\r\n第二行是继承静态方法，相当于直接 ServerResponse.xxx\r\n这是兼容老的写法","createdAt":1588555160339},{"id":10881,"originId":"5eaeadd430176508da9b74ee","articleId":2314,"userId":1192,"content":"不知道你遇到的是不是这种情况，connection长时间没有活动，数据库服务器主动断开连接。\r\n解决方法：\r\n（一）： 使用mysql.createPool，而不是mysql.createConnection\r\n\t// 详见：https://github.com/mysqljs/mysql\r\n（二）： 监听connection close事件，\r\n```\r\n\tcon.on('error', function(err) {\r\n\t  // 在这里重新建立连接，或者修改连接的状态，在外部重新建立连接\r\n\t});\r\n```\r\n另外，还有可能是数据库没有允许远程连接.","createdAt":1588506068331},{"id":10882,"originId":"5ac4879f37f5d1510f57c8b9","articleId":2315,"userId":1741,"content":"那就来学angular 5吧\r\n\r\n更新：\r\n那就来学angular 6吧","createdAt":1522829215165},{"id":10883,"originId":"5ac48df80ab0448f0fe3f878","articleId":2315,"userId":3416,"content":"还好吧","createdAt":1522830840025},{"id":10884,"originId":"5ac48ff60ab0448f0fe3f87a","articleId":2315,"userId":752,"content":"你咋不说，我感觉活着好累😫。哈哈。西湖的水，我的累。难与不难是比较而言的。","createdAt":1522831350780},{"id":10885,"originId":"5ac494a237f5d1510f57c8bf","articleId":2315,"userId":3417,"content":"我之前有vue开发经验，感觉react上手入门没什么问题啊。","createdAt":1522832546604},{"id":10886,"originId":"5ac49a400ab0448f0fe3f87e","articleId":2315,"userId":3418,"content":"先写一个 todolist 吧，其实没那么难\r\n附上我刚学的时候写的 todolist： https://github.com/funlee/react-todo-mvc","createdAt":1522833984410},{"id":10887,"originId":"5ac4a3700ab0448f0fe3f884","articleId":2315,"userId":3419,"content":"就是干，先干，写点东西出来先","createdAt":1522836336452},{"id":10888,"originId":"5ac4b2ef96f344940fbbad49","articleId":2315,"userId":770,"content":"我一个iOS开发直接看了两三天，直接都上手写项目了，世上无难事\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1522840303553},{"id":10889,"originId":"5ac4b79b96f344940fbbad4b","articleId":2315,"userId":368,"content":"[@funlee](/user/funlee) 你有复杂点的例子么？","createdAt":1522841499789},{"id":10890,"originId":"5ac4dc85e34737560fccaa21","articleId":2315,"userId":1870,"content":"等你学了 Redux,那才爽","createdAt":1522850949385},{"id":10891,"originId":"5afc3b3cadea947348e764fc","articleId":2315,"userId":790,"content":"给你推荐个视频教程\r\n[http://www.sucaihuo.com/video/232.html](http://www.sucaihuo.com/video/232.html)","createdAt":1526479676534},{"id":10892,"originId":"5afc3f841b02288048bd1143","articleId":2315,"userId":2425,"content":"js基础好的话，很快就可以上手了，记的东西远没有vue多😀","createdAt":1526480772310},{"id":10893,"originId":"5afd33630a36e5312d6ed1f7","articleId":2315,"userId":3420,"content":"不难，多写就会了，而且React在入门阶段，你理解为html, 本来html有不同的标签比如div，p， h1等之类的东西，这些东西有属性，比如 style，对应到react，你可以理解为，除了HML标签之外，可以自己定义一些标签，他的props就是标签的属性，之后你再去理解他的component，就是一个普通的javascript函数，然后你再理解生命周期","createdAt":1526543203702},{"id":10894,"originId":"5afd35560a36e5312d6ed1fa","articleId":2315,"userId":3421,"content":"我三大框架都基本做过，其实学多了，你就会发现react才是需要记东西最少的那个。","createdAt":1526543702834},{"id":10895,"originId":"5afd40a21b02288048bd118b","articleId":2315,"userId":3420,"content":"[@JeffWong16](/user/JeffWong16) 是的，我一直用react的原因就是这个，我记不住太多的东西","createdAt":1526546594367},{"id":10896,"originId":"5afd44ddadea947348e76546","articleId":2315,"userId":3422,"content":"世上无难事只怕有心人","createdAt":1526547677161},{"id":10897,"originId":"5afd53130a36e5312d6ed234","articleId":2315,"userId":59,"content":"[@JeffWong16](/user/JeffWong16) 确实是这样，省去很多去记模版渲染的方法，但是很多人不喜欢 JSX","createdAt":1526551315959},{"id":10898,"originId":"5afe42a2adea947348e76593","articleId":2315,"userId":1835,"content":"react本身是不难的,难得是相关技术栈特别多","createdAt":1526612642451},{"id":10899,"originId":"5afe73491b02288048bd11fa","articleId":2315,"userId":3423,"content":"一个月过去了，现在觉得怎么样呢？","createdAt":1526625097251},{"id":10900,"originId":"5afe855393ee7eb406973c75","articleId":2315,"userId":3424,"content":"这说明js基础不行啊 ","createdAt":1526629715997},{"id":10901,"originId":"5b13fcdc29e6e510415b274c","articleId":2315,"userId":798,"content":"我已打算放弃。。","createdAt":1528036572471},{"id":10902,"originId":"5b1498b529e6e510415b2765","articleId":2315,"userId":77,"content":"很灵活的啊，看看阮老师等入门教程就行了。比如webpack配合写个小例子，我用redux重写了阮元风老师的计数例子应用。本人喜欢react编写灵活，vue太死板。\r\nhttps://github.com/hemingming/redux-counter","createdAt":1528076469830},{"id":10903,"originId":"5b14ad5b8a4f51e140d944e3","articleId":2315,"userId":1412,"content":"主要是React生态","createdAt":1528081755492},{"id":10904,"originId":"5b14aed457137f22415c48be","articleId":2315,"userId":3425,"content":"可以先看下基础入门的文章，比如：https://github.com/jnotnull/dva-generator/issues/4","createdAt":1528082132907},{"id":10905,"originId":"5b14b6b48a4f51e140d944ed","articleId":2315,"userId":3426,"content":"感觉还好啊，框架都是套路，在github上找个项目clone，下来照着写几遍就差不了","createdAt":1528084148839},{"id":10906,"originId":"5b17b8d557137f22415c49ba","articleId":2315,"userId":801,"content":"初学会觉得复杂，实际项目用起来就不觉得了，反而成长更快。\r\n另外，[Vue.js](https://vuejs.org)的学习曲线要平滑一些，容易入门。\r\n\r\n来自✨ [Node.js开源项目精选](http://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1528281301792},{"id":10907,"originId":"5b188ff28a4f51e140d94603","articleId":2315,"userId":2424,"content":"感觉难先学vue，建立对一些基本概念的认知，比如组件，生命周期，状态，然后再进去就简单多了，假如我学会了js的变量字符串，类，再去学java是不是简单很多。先从简单的入门\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1528336370289},{"id":10908,"originId":"5b189e3529e6e510415b28b2","articleId":2315,"userId":339,"content":"[@phpsmarter](/user/phpsmarter) 感觉 mobx 挺舒服的 用起来","createdAt":1528340021957},{"id":10909,"originId":"5b18fe9957137f22415c4a2d","articleId":2315,"userId":317,"content":"先学vue ，然后再学react 你会发现如此简单，其实框架都是相通的","createdAt":1528364697733},{"id":10910,"originId":"5b1cec1f57137f22415c4af2","articleId":2315,"userId":790,"content":"要学的太多了","createdAt":1528622111386},{"id":10911,"originId":"5b1d22e257137f22415c4afd","articleId":2315,"userId":2272,"content":"react入门其实挺简单的，jsx的语法很符合直觉。跟随getting started一步一步修改代码，一个下午就能入门了。\r\n\r\n当然这仅针对react本身，用于实际项目可能还要考虑其他东西，不如状态管理、引入UI组件、构建、SSR等，这些就属于react周边了。","createdAt":1528636130205},{"id":10912,"originId":"5b1dc3c98a4f51e140d946fa","articleId":2315,"userId":1871,"content":"你们夸react时非要黑vue一波？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1528677321818},{"id":10913,"originId":"5b1de7205cd02be640901376","articleId":2315,"userId":968,"content":"从入门的角度来讲，Vue是语法兼容性最好的，中英文文档比较齐全，原理上学习难度较低。React 相对来讲会复杂一点，不仅没有官方的中文文档而且国内已存在的React中文翻译文档也没能同步更新，查阅上有一定的难度，其次JSX语法、UI组件、组件生命周期等等概念对新手还是需要些时间理解。\r\n\r\n少说多做，按照官方文档一步一步的学习，其实MVVM的框架学习难度也不大，而且理解其一基本上就知其三了。","createdAt":1528686368794},{"id":10914,"originId":"5b1e0d7357137f22415c4b1a","articleId":2315,"userId":407,"content":"能分享下具体遇到什么问题了么？","createdAt":1528696179193},{"id":10915,"originId":"5b2336de8a4f51e140d9485d","articleId":2315,"userId":1535,"content":"我反倒觉得如果有一些js基础react其实比vue好上手多了. angular会比较难.","createdAt":1529034462546},{"id":10916,"originId":"5b28db7c5cd02be640901574","articleId":2315,"userId":803,"content":"凡事都是入门难 中间难 最后难。。。。","createdAt":1529404284629},{"id":10917,"originId":"5b3042e7ac8bc1e1241143bd","articleId":2315,"userId":804,"content":"[@qiudaoermu](/user/qiudaoermu) 哈哈，有道理","createdAt":1529889511178},{"id":10918,"originId":"5b3a371757137f22415c523f","articleId":2315,"userId":805,"content":"精通更难","createdAt":1530541847002},{"id":10919,"originId":"5b3a723c57137f22415c5250","articleId":2315,"userId":3427,"content":"我也正准备学习React.可以交流下哦~~","createdAt":1530556988986},{"id":10920,"originId":"5b3ab3d4a1308bf723aa3b29","articleId":2315,"userId":368,"content":"[@funlee](/user/funlee) 你买了几本React书籍？","createdAt":1530573780554},{"id":10921,"originId":"5b3aba6857137f22415c5253","articleId":2315,"userId":368,"content":"[@mmhaobai](/user/mmhaobai) 怎样才算精通React？","createdAt":1530575464745},{"id":10922,"originId":"5b3ad2215c8f1ea723a56b99","articleId":2315,"userId":3428,"content":"比angular简单，angular才叫犯，连双向绑定都要引入模块，语法啰嗦","createdAt":1530581537092},{"id":10923,"originId":"5b3b19acac8bc1e1241145af","articleId":2315,"userId":1412,"content":"来自[CNode.js社区](http://alexlees.github.io)","createdAt":1530599852529},{"id":10924,"originId":"5b3b501357137f22415c52d0","articleId":2315,"userId":2572,"content":"16年的时候，我们做项目，最开始的选型是vue，后来基于某些原因，我们放弃了vue而选择了react\r\n那时候react还没有发布16.0.x，所以我们买了两本书，花了一周看完书，就开始做项目\r\n现在18年了，真心觉得react好用，配合redux也很爽；可惜redux需要写的代码太多，而mobx又太灵活，没有一个规则去限制它\r\n总的来说react还是很不错的一个框架，真心不难","createdAt":1530613779101},{"id":10925,"originId":"5b3ebffafb9e84ec69cc1875","articleId":2315,"userId":805,"content":"[@chapgaga](/user/chapgaga) 精通即想得到的基本都能实现","createdAt":1530839034406},{"id":10926,"originId":"5b40dde713ca2fe569fb9195","articleId":2315,"userId":368,"content":"[@myadmin](/user/myadmin) 你用react做过多复杂的页面？","createdAt":1530977767969},{"id":10927,"originId":"5b40dea1e374eeab6929d4da","articleId":2315,"userId":368,"content":"[@DawnL6](/user/DawnL6) 你不用ES6？只用TS？","createdAt":1530977953525},{"id":10928,"originId":"5b43025d35342ab069061366","articleId":2315,"userId":2572,"content":"[@chapgaga](/user/chapgaga) 也没有特别复杂，就是一个单页实现文件的上传，然后后端转码，后端转码成功后返回给前端，前端状态改变，将文件下载到本地。\r\n之前还做过一个分类管理，不过都不是什么特别复杂的东西","createdAt":1531118173546},{"id":10929,"originId":"5b4beda113ca2fe569fb93e0","articleId":2315,"userId":798,"content":"下一步再学这个","createdAt":1531702689513},{"id":10930,"originId":"5b4c08ee35342ab069061562","articleId":2315,"userId":3429,"content":"说实话，学到能独立完成react项目的开发及上线，是需要一段时间的，凡事开头难，贵在你是否喜欢react的思想(坚持)\r\n正确里面react的生命周期函数很重要（数据注入及更新，以及销毁），\r\n数据的处理主要是函数式编程\r\n掌握了基础,还有一些常用的\r\n- 单向数据流思想[facebook/flux](https://github.com/facebook/flux) redux和这个类似\r\n- 数据不可变[facebook/immutable-js](https://github.com/facebook/immutable-js) 项目越大，体现出的价值越大\r\n- 路由的处理 [ReactTraining/react-router](https://github.com/ReactTraining/react-router) 最好自己能实现一个简单的路由处理\r\n- webpack的一些配置也需要掌握，比如预编译postcss ，项目大了分包(vendor),热加载也是需要配置的。\r\n\r\n实操 react+redux+postcss\r\n![微信截图_20180716102928.png](//static.cnodejs.org/Fr8uQlK46tC3aV1B3YkeQB4LF1KL)","createdAt":1531709678539},{"id":10931,"originId":"5b4dc62c4b9cd4200f942073","articleId":2315,"userId":368,"content":"[@dislido](/user/dislido) 这个不是比react更乱？","createdAt":1531823660692},{"id":10932,"originId":"5b4dc6b7fb9e84ec69cc1b4f","articleId":2315,"userId":368,"content":"[@phpsmarter](/user/phpsmarter) reasonml更爽：）","createdAt":1531823799663},{"id":10933,"originId":"5b4dc6dbaef62f1b0f9e03c9","articleId":2315,"userId":368,"content":"[@myadmin](/user/myadmin) 分类管理截图看下：）看下有多复杂，呵呵","createdAt":1531823835632},{"id":10934,"originId":"5b4dc71efb9e84ec69cc1b52","articleId":2315,"userId":368,"content":"[@qiudaoermu](/user/qiudaoermu) 那什么时候简单呢：（","createdAt":1531823902566},{"id":10935,"originId":"5b587e8d58db3ccf66a44f48","articleId":2315,"userId":790,"content":"还没入门已放弃","createdAt":1532526221174},{"id":10936,"originId":"5b610a63792f59ae501bf6ac","articleId":2315,"userId":809,"content":"努力吧，孩子","createdAt":1533086307660},{"id":10937,"originId":"5b610c81673571454c633d85","articleId":2315,"userId":3430,"content":"如果你觉得React比较难,说明你JS基础不够牢固，当初我学React的时候，一下子就入门了。我给你的建议是,平常没事的时候多做一些demo吧。","createdAt":1533086849551},{"id":10938,"originId":"5b612344b71aedfe4c126643","articleId":2315,"userId":1365,"content":"我现在也在学习react，单学react还行都懂，但是和router、redux一起写项目的时候就不知道如何下手了。尴尬","createdAt":1533092676653},{"id":10939,"originId":"5b61302db71aedfe4c12664a","articleId":2315,"userId":1171,"content":"就要过时了，不用学了，孩子","createdAt":1533095981312},{"id":10940,"originId":"5b6e52d958db3ccf66a453c0","articleId":2315,"userId":804,"content":"[@udbmnm](/user/udbmnm) 不会吧？","createdAt":1533956825805},{"id":10941,"originId":"5b6efca2792f59ae501bf8e6","articleId":2315,"userId":764,"content":"未来框架Vueaclar\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1534000290651},{"id":10942,"originId":"5b6f6247792f59ae501bf8e8","articleId":2315,"userId":22,"content":"4个月过去了，楼主学会了吗","createdAt":1534026311977},{"id":10943,"originId":"5b6f9e57b71aedfe4c1268ef","articleId":2315,"userId":3431,"content":"现在还觉得入门难吗？\r\n\r\n","createdAt":1534041687880},{"id":10944,"originId":"5b70f75d58db3ccf66a45400","articleId":2315,"userId":3432,"content":"少年，来试试angular，学会了就上天","createdAt":1534130013381},{"id":10945,"originId":"5b7a19efa210553a0cde2a6b","articleId":2315,"userId":790,"content":"我推荐的教程，很不错的","createdAt":1534728687049},{"id":10946,"originId":"5b82b184632c7f422e5b8150","articleId":2315,"userId":2013,"content":"先学会nodejs先，再考虑这个","createdAt":1535291780320},{"id":10947,"originId":"5b82c54cc52ad1482eb941fc","articleId":2315,"userId":406,"content":"推荐react 小书，空余看看2个礼拜，每天1-2小时，差不多入门了。","createdAt":1535296844853},{"id":10948,"originId":"5b84a47e632c7f422e5b81a0","articleId":2315,"userId":1679,"content":"可以先去学下vue.js，等你把这个学会了再去看react就会觉得它们的语法基本相似，很容易入门的。之前我也看不懂，现在看原理都是一样的","createdAt":1535419518646},{"id":10949,"originId":"5b84b72a632c7f422e5b81af","articleId":2315,"userId":501,"content":"楼主现在学得怎么样了。。。","createdAt":1535424298047},{"id":10950,"originId":"5b8d4c4337b3005a0b0e6b28","articleId":2315,"userId":2013,"content":"要开始学这个了","createdAt":1535986755901},{"id":10951,"originId":"5b968ce3a333b7bd25441ef1","articleId":2315,"userId":804,"content":"[@dccmmtop](/user/dccmmtop) 难啊，哥","createdAt":1536593123385},{"id":10952,"originId":"5b9710f2f1e8bc7579c78415","articleId":2315,"userId":3433,"content":"去学学vue吧，这个相对简单，你值得拥有","createdAt":1536626930471},{"id":10953,"originId":"5b971d96a333b7bd25441f07","articleId":2315,"userId":3434,"content":"我正在写的 react 第一个项目... 正在进行时😜...\r\n\r\nhttps://github.com/pythonxCat/react-cnode\r\n\r\n我也是刚开始学 react, 学了半个月左右了...可以关注下...会在readme 里面加解说 （：","createdAt":1536630166625},{"id":10954,"originId":"5b97228dce9d14c2254df8a6","articleId":2315,"userId":3434,"content":"如果有新手想采坑, 我推荐下我的学习路径..发现还没怎么觉得特别困难.\r\n\r\n1. 看视频课程：https://time.geekbang.org/course/intro/100 （非推广..只是个人是个很热心的妹砸）\r\n   01 ~10\r\n 2.  边看然后边刷官方的 Main Concepts 部分的文档https://reactjs.org/docs/hello-world.html\r\n 做好第一步和第二步后，对 react 有基本的概念了..\r\n 3. 看ruanyifeng 的 redux/react-redux 教程.. 看教程第一二篇的时候，会有个基本的概念呢....\r\n 4. 然后返回去看 11~ 15， 视频讲解的 redux、react 课程\r\n 5. 当然你在刷课课程中，也会不时的去看看官方文档看看些细节. flux 等概念\r\n 6. 在上述步骤（3~4） 中，你会做 Counter 的例子，了解 redux 的基本玩法.. 也会把 Counter的例子改成结合 react-redux 类型的;\r\n 如果这两个例子完成了..可以试试这个视频教程..完成一个小demo: https://www.youtube.com/watch?v=93p3LxR9xfM&t=1168s\r\n 这部分想必，对新手会绕一段时间..特别是 redux 这部分如果你没进去看过源码...有时候会被 API 绕晕..觉得 API 多","createdAt":1536631437628},{"id":10955,"originId":"5b9722c9a333b7bd25441f15","articleId":2315,"userId":3434,"content":"https://github.com/pythonxCat/learn-react/tree/master/Notes/Redux 这边是我学习 redux/react-redux 快速开始的笔记..不吝分享（个人水平有限..也欢迎拍砖）","createdAt":1536631497827},{"id":10956,"originId":"5b97243e37b3005a0b0e6da2","articleId":2315,"userId":3434,"content":"7. 上述课程（react 基础, react-redux 基础）完成后, 咱们直奔 react-router 官网边试官方 demo 和文档学习 react-router.\r\n当然如果你觉得自己看英文文档吃力..可以试试看这边人家翻译的中文档：https://www.jianshu.com/p/1781bc1dd938#24-history\r\n试着把 demo 自己一个个的手动敲下来.. 估计就能上手项目啦..\r\n\r\n8. react-router 课程搞定后...\r\n咱们试试看看如何对项目进行架构，代码拆分，这部分再次看视频课程：https://time.geekbang.org/course/detail/100-11278 22 ~25\r\n讲的真的非常棒..老司机多年的经验..代码拆分让我之前的困惑一扫而光..\r\n\r\n9. 如果这些都搞完了...觉得好像招聘要求回前端各种测试，\r\n9. 1. 咱们先学习基本的 javascript 单元测试：\r\n1. 基础的入门视频教程，快，爽（不过貌似要英语听力过的去）\r\nhttps://www.youtube.com/watch?v=MLTRHc5dk6s&t=325s\r\nhttp://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html\r\n9.2 react 测试\r\nhttps://github.com/pythonxCat/frontend-testing#chapter-2-react-testing","createdAt":1536631870367},{"id":10957,"originId":"5b972cde37b3005a0b0e6dad","articleId":2315,"userId":3435,"content":"react ，快速上手，我就是大量的做小项目，希望能帮到你","createdAt":1536634078912},{"id":10958,"originId":"5ba1a2d937a6965f59051ac5","articleId":2315,"userId":805,"content":"[@alicePan](/user/alicePan) youtube的怎么访问？","createdAt":1537319641229},{"id":10959,"originId":"5bab95248f5b0c1c59ea1198","articleId":2315,"userId":3436,"content":"还没试过呢，到时看看是不是那么难","createdAt":1537971492249},{"id":10960,"originId":"5bac47d8ede204052db80215","articleId":2315,"userId":2791,"content":"react 这么简单，有啥难的","createdAt":1538017240969},{"id":10961,"originId":"5bac7e0515e4fd1923f48add","articleId":2315,"userId":2673,"content":"+1，蛮简单的","createdAt":1538031109805},{"id":10962,"originId":"5bac80369545eaf107b9c665","articleId":2315,"userId":545,"content":"+1  ts 还是 angular 好","createdAt":1538031670793},{"id":10963,"originId":"5bad07b99545eaf107b9c68e","articleId":2315,"userId":3427,"content":"[@funlee](/user/funlee) 有个小bug 😄","createdAt":1538066361229},{"id":10964,"originId":"5bad81c79545eaf107b9c694","articleId":2315,"userId":413,"content":"前段时间刚用react开发的一个前端项目，楼主有兴趣可以看看，项目用的 create-react-app 初始化的 https://cnodejs.org/topic/5bad8135ede204052db8024a","createdAt":1538097607494},{"id":10965,"originId":"5bbf56b69545eaf107b9ca08","articleId":2315,"userId":804,"content":"学了段时间，对我来说确实不简单","createdAt":1539266230939},{"id":10966,"originId":"5bc8411515e4fd1923f4905f","articleId":2315,"userId":3437,"content":"react 本身并不难，就一个生命周期，不过还是需要好好看看。难就难道生态库太jb多了，不用就显得不专业","createdAt":1539850517465},{"id":10967,"originId":"5bd2bc46ad50495f5e2fbb87","articleId":2315,"userId":2013,"content":"真不容易啊","createdAt":1540537414678},{"id":10968,"originId":"5bd3c4ea89665c365e94432a","articleId":2315,"userId":626,"content":"我最近也在学习，加油！！！！","createdAt":1540605162312},{"id":10969,"originId":"5bd42be6b56c42645edb7d26","articleId":2315,"userId":552,"content":"我觉得redux难","createdAt":1540631526987},{"id":10970,"originId":"5bd67b2e8ca34e0b047041c3","articleId":2315,"userId":413,"content":"整理了一个简单的教程，有兴趣可以看看 \r\nhttps://17dev.club/article/5bd5ddcbc19a696b04651791","createdAt":1540782894763},{"id":10971,"originId":"5bead4c0e161dc409d761646","articleId":2315,"userId":798,"content":"[@tomoya92](/user/tomoya92) 谢谢，我看看","createdAt":1542116544093},{"id":10972,"originId":"5bff3e87be1b120abac5df34","articleId":2315,"userId":809,"content":"学了点皮毛","createdAt":1543454343712},{"id":10973,"originId":"5c125f9e7ec239239ff56a6b","articleId":2315,"userId":805,"content":"天冷了，晚上都不想学习","createdAt":1544707998208},{"id":10974,"originId":"5c1373897ec239239ff56e72","articleId":2315,"userId":3438,"content":"先干为敬~","createdAt":1544778633303},{"id":10975,"originId":"5c2cbb5c3898674067a7a56d","articleId":2315,"userId":804,"content":"这楼有点高啊","createdAt":1546435420922},{"id":10976,"originId":"5c431e383b948a2b4ab6f95b","articleId":2315,"userId":1661,"content":"react啊，等我熟练nodejs再学吧","createdAt":1547902520987},{"id":10977,"originId":"5c467a7e3b948a2b4ab704b9","articleId":2315,"userId":3439,"content":"当初学完jq没多久开始学react感觉发现的新大陆，用了一时爽，一直用一直爽，后来学起小程序跟vue感觉更快了","createdAt":1548122750372},{"id":10978,"originId":"5c714c6ae1a81129a7ad9eff","articleId":2315,"userId":805,"content":"对我来说太难了","createdAt":1550929002229},{"id":10979,"originId":"5c776873a667ed6d807b9ff9","articleId":2315,"userId":107,"content":"[@myadmin](/user/myadmin) 试试react-control-center,.或许是你要的答案","createdAt":1551329395503},{"id":10980,"originId":"5c7768ceab86b86ddf6b3ac1","articleId":2315,"userId":107,"content":"[@alicePan](/user/alicePan) 加上react-contorl-center 让你的react app如虎添翼","createdAt":1551329486748},{"id":10981,"originId":"5c77d78204a28b40c4f6aaee","articleId":2315,"userId":3440,"content":"有Vue的基础下学React其实不会太难,很多概念是相通的,\r\n如果没有类似MVVM框架基础,但有ES6基础,单纯React难度还不算太大,\r\n个人觉得学习陡峭度大的反而是Redux和Mobx这类状态管理,刚接触时够呛","createdAt":1551357826768},{"id":10982,"originId":"5c7967130d249a149624f56a","articleId":2315,"userId":110,"content":"[@dislido](/user/dislido) 现在更新到几了？我看了下 Nest.js 最近做得不错，好像听说和 Angular.js 是绝配？","createdAt":1551460115255},{"id":10983,"originId":"5c7967750d249a149624f56f","articleId":2315,"userId":110,"content":"[@liangtongzhuo](/user/liangtongzhuo) 我就不喜欢 JSX，认为是一种反模式，JS 界里的 PHP","createdAt":1551460213076},{"id":10984,"originId":"5c7a776690c14711cc8c9a09","articleId":2315,"userId":3441,"content":"哈哈哈\r\n\r\n","createdAt":1551529830317},{"id":10985,"originId":"5c97999400bcfd7eb2be5876","articleId":2315,"userId":798,"content":"学了一段时间，觉得是时候放弃了","createdAt":1553439124843},{"id":10986,"originId":"5cb49e27207b2365936ed5c9","articleId":2315,"userId":1870,"content":"React要反复的写组件, 反复的写, 边写边思考 Props和State应该怎么来安排, 大的组件怎么拆成小的组件.  不断的把State进行提升操作, 提着,提着,State就变成Reducer了. 一定要动手,一定要动手.  \r\n马上就开始着手学习Typescipt,  TS+React 简直是绝配. TS学习也需要一定的迁移时间,要给大脑一定的转化时间,所以乘早开始学习,\r\nTS里的类型约束实际是给了你一个思考的框架. 面对UI原型图的时候, 你就可以思考数据的类型应给是什么样子的,一条完整的数据应该是什么样子的, 一组数据是怎么形成的.  这些细节问题, 明确的写出来就像抽丝剥茧的,慢慢就清晰了,反之感觉就是一团乱麻.\r\n这个和跑步一样, 你不去跑,永远不会有提高. 而且提高也不是几天就能达到的.  \r\n\r\n等你有一天恍然大悟之后, 发现现在的React就是一个个的函数. 里面的数据像面粉一样从一端输入, 然后在某个地方变成了可口的面条和面包,汉堡包.    等你把TS加入之后, 你会发现只要你的配方没问题,机器没开动,就可以知道最后的面包是否可口. 那种对局面的掌控真是让人着迷.    \r\n\r\n既然花了时间的就不要放弃, 因为学习React和React-Native觉得难的,看到Flutter又想去学. 但是页面的结构,布局和数据的处理方法都是一样的, 你不在React里解决, 学Flutter也必须要解决,否则还是觉得很难,flutter里不解决问题,之后还有新技术出来还是搞不定.  实际上Flutter现在只是渲染引擎比RN的好, 那里面的的代码他妈的不是给人看的.要是RN能用Flutter的引擎,flutter直接就完蛋了. \r\n反之如果你React和Redux学的很好了, Flutter应该也是一周,两周就能够解决的问题,Redux的概念也是完全一样,因为Redux的思想也不是React独有的, 而是和React比较般配, 为什么般配, 因为Redux就适合和组件配对.  flutter完全照搬了React的很多东西.其实这照搬的也不是React一家的东西,而是通用的组件化思想,所以在flutter用Redux也是水到渠成的东西.  如果你学习React没有解决Redux的问题, 在Flutter里还是要面对这个问题, Flutter也不会替你完成这个任务.  ","createdAt":1555340839376},{"id":10987,"originId":"5eabf9acfd11584365d2cd2d","articleId":2315,"userId":57,"content":"之前用angular, 然后转到react，看了下vue的文档，还是最喜欢react","createdAt":1588328876809},{"id":10988,"originId":"5ea68935d870946c6b6be637","articleId":2316,"userId":628,"content":"gulp 自己撸几行脚本就行。\r\n\r\n或者看看 这个\r\nhttps://www.npmjs.com/package/loader\r\nhttps://www.npmjs.com/package/connect-assets","createdAt":1587972405294},{"id":10989,"originId":"5ea691fcd870946c6b6be67a","articleId":2316,"userId":3442,"content":"这两个很靠谱啊。非常感谢！","createdAt":1587974652028},{"id":10990,"originId":"5eaa57bbfd11584365d2cae0","articleId":2316,"userId":99,"content":"这个非常棒","createdAt":1588221883038},{"id":10991,"originId":"58f04682a92d341e48cfe852","articleId":2317,"userId":358,"content":"在你的 cli.js 里面第一行最后面加上 `--debug`","createdAt":1492141698179},{"id":10992,"originId":"58f0488e49056f03483478c7","articleId":2317,"userId":3091,"content":"[@atian25](/user/atian25) 多谢！~可以了","createdAt":1492142222717},{"id":10993,"originId":"58f060b9c749f63d48fe94b0","articleId":2317,"userId":358,"content":"或者直接配置下 vscode 的 launch.json 就可以了","createdAt":1492148409473},{"id":10994,"originId":"58f06ff5a92d341e48cfe868","articleId":2317,"userId":3091,"content":"[@atian25](/user/atian25) 我也想配。。然而不知道怎么弄，有demo么 入口文件写啥 用启动还是附加到","createdAt":1492152309212},{"id":10995,"originId":"58f07497e54976e847e0a071","articleId":2317,"userId":358,"content":"多看文档，https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_launch-configuration-attributes\r\n```js\r\n    {\r\n      \"type\": \"node\",\r\n      \"request\": \"launch\",\r\n      \"name\": \"Launch Program\",\r\n      \"program\": \"${workspaceRoot}/bin/cli.js\"\r\n    },\r\n```","createdAt":1492153495016},{"id":10996,"originId":"58f3bc4fbbaf2f3f569bdef2","articleId":2317,"userId":3091,"content":"感谢。\r\n```\r\n{\r\n\t\t\t\"type\": \"node\",\r\n\t\t\t\"request\": \"launch\",\r\n\t\t\t\"name\": \"启动程序\",\r\n\t\t\t\"program\": \"${workspaceRoot}/bin/mkt-cli.js\",\r\n\t\t\t\"outFiles\": [],\r\n\t\t\t\"protocol\": \"inspector\",\r\n\t\t\t\"console\":\"integratedTerminal\",\r\n\t\t\t\"args\": [\r\n\t\t\t\t\"create\", \"--page\", \"test\"\r\n\t\t\t]\r\n\t\t},\r\n```\r\n研究了一下，最终这样完美解决了。args有空再看看有没有什么好的办法可以做的更灵活一点","createdAt":1492368463280},{"id":10997,"originId":"58f3bccb9116585a56e2061b","articleId":2317,"userId":3091,"content":"[@atian25](/user/atian25) 感谢。","createdAt":1492368587417},{"id":10998,"originId":"5ea92a40fd11584365d2c91e","articleId":2317,"userId":3443,"content":"[@backlost](/user/backlost) 我都不知道我这叫不叫挖坟。。。特意登陆，前来感谢","createdAt":1588144704594},{"id":10999,"originId":"5ea2b4e2d870946c6b6be016","articleId":2318,"userId":3444,"content":"创建两个请求都成功了,但是写入文件时写到一半时就停住了,也没有报错,麻烦大佬们指导指导","createdAt":1587721442475},{"id":11000,"originId":"5ea2fc0a0275394e76883222","articleId":2318,"userId":358,"content":"不要用 callback 的方式，用 async 方式，学习 Promise：\r\n- `http.get` 换为 https://github.com/node-modules/urllib\r\n-  `mkdir` 啥的换为 mkdirp 等 promise 方式的，可以直接用 https://www.npmjs.com/package/mz","createdAt":1587739658728},{"id":11001,"originId":"5ea8eae930176508da9b6e54","articleId":2318,"userId":3279,"content":"fs.writeFile 这种方式也容易因为文件太大造成内存溢出等问题，建议看看 stream 和直接 read/write 的区别","createdAt":1588128489345},{"id":11002,"originId":"5a0ef9efceeedf8b318dc3e2","articleId":2319,"userId":108,"content":"因为你的map函数，返回的是promise。\r\n\r\n所以myInfo.groups的值为 Array<Promise>\r\n\r\n在一个，不要在原生对象的原型链上添加方法。\r\n\r\n只要一个Promise.all方法包住 Array<Promise>即可.\r\n\r\n改成这样...\r\n\r\n```javascript\r\n  myInfo.groups = await Promise.all(myInfo.groups.map(async id => {\r\n    let groupInfo = await Group.findOne({\r\n      _id: id\r\n    });\r\n    console.log(groupInfo);\r\n    return {\r\n      name: groupInfo.name,\r\n      avatar_url: groupInfo.avatar_url\r\n    };\r\n  }));\r\n```","createdAt":1510930927202},{"id":11003,"originId":"5a0efeb87def23d476d9600c","articleId":2319,"userId":3445,"content":"厉害了，亲测有效， `Promise.all`完美解决我的问题，","createdAt":1510932152801},{"id":11004,"originId":"5ea7c57330176508da9b6c76","articleId":2319,"userId":3446,"content":"[@axetroy](/user/axetroy) 这么写，不是同时执行`myInfo.groups.length`个查询吧？是串行的吧？","createdAt":1588053363281},{"id":11005,"originId":"5ea05d41d870946c6b6bda0d","articleId":2320,"userId":358,"content":"因为简单","createdAt":1587567937835},{"id":11006,"originId":"5ea062560275394e76882ae4","articleId":2320,"userId":3,"content":"并且好用","createdAt":1587569238848},{"id":11007,"originId":"5ea096de0275394e76882af9","articleId":2320,"userId":38,"content":"cnode 是个开源项目，有更好的你也可以提 PR","createdAt":1587582686986},{"id":11008,"originId":"5ea151210275394e76882c9b","articleId":2320,"userId":22,"content":"非常好用。如果自己实现一个，不一定这么好用","createdAt":1587630369832},{"id":11009,"originId":"5ea153570275394e76882ca4","articleId":2320,"userId":31,"content":"本站已经跟著名搜索引擎Google达成战略合作伙伴.","createdAt":1587630935513},{"id":11010,"originId":"5ea182540275394e76882d70","articleId":2320,"userId":18,"content":"方便好用","createdAt":1587642964504},{"id":11011,"originId":"5ea1fd700275394e76882e12","articleId":2320,"userId":1114,"content":"hahh","createdAt":1587674480991},{"id":11012,"originId":"5ea244630275394e76882e96","articleId":2320,"userId":615,"content":"[@atian25](/user/atian25) 插个楼，置顶下架Node12的特性帖子，是准备发Node14的了吗","createdAt":1587692643357},{"id":11013,"originId":"5ea25c650275394e76882f53","articleId":2320,"userId":135,"content":"话说可以跳浏览器的默认搜索吗?  相当于在浏览器地址里面输入搜索关键词","createdAt":1587698789304},{"id":11014,"originId":"5ea27f860275394e76882ff7","articleId":2320,"userId":358,"content":"[@974806047](/user/974806047) 14 感觉没啥好写的啊。。。","createdAt":1587707782859},{"id":11015,"originId":"5ea27fa2d870946c6b6bdf00","articleId":2320,"userId":358,"content":"[@abiuDoIT](/user/abiuDoIT) 显然不行，又没法获取浏览器的默认引擎啥","createdAt":1587707810356},{"id":11016,"originId":"5ea2aff8d870946c6b6bdfc4","articleId":2320,"userId":711,"content":"那我tm怎么用站内搜索！！！！！！！！！！！！！！！！！！！！！！！！！！！","createdAt":1587720184208},{"id":11017,"originId":"5ea2b0060275394e7688310c","articleId":2320,"userId":711,"content":"[@atian25](/user/atian25) 那我tm怎么用站内搜索！！！！！！！！！！！！！！！！！！！！！！！！！！！","createdAt":1587720198890},{"id":11018,"originId":"5ea2b00b0275394e76883110","articleId":2320,"userId":711,"content":"[@974806047](/user/974806047) 那我tm怎么用站内搜索！！！！！！！！！！！！！！！！！！！！！！！！！！！","createdAt":1587720203222},{"id":11019,"originId":"5ea2b0120275394e76883114","articleId":2320,"userId":711,"content":"[@darrenliuwei](/user/darrenliuwei) 那我tm怎么用站内搜索！！！！！！！！！！！！！！！！！！！！！！！！！！！","createdAt":1587720210256},{"id":11020,"originId":"5ea2b0170275394e76883118","articleId":2320,"userId":711,"content":"[@atian25](/user/atian25) 那我tm怎么用站内搜索！！！！！！！！！！！！！！！！！！！！！！！！！！！","createdAt":1587720215159},{"id":11021,"originId":"5ea2b01b0275394e7688311c","articleId":2320,"userId":711,"content":"[@atian25](/user/atian25) 那我tm怎么用站内搜索！！！！！！！！！！！！！！！！！！！！！！！！！！！","createdAt":1587720219973},{"id":11022,"originId":"5ea2b020d870946c6b6bdfc6","articleId":2320,"userId":711,"content":"[@kerpler](/user/kerpler) 那我tm怎么用站内搜索！！！！！！！！！！！！！！！！！！！！！！！！！！！","createdAt":1587720224697},{"id":11023,"originId":"5ea2b6a70275394e76883176","articleId":2320,"userId":135,"content":"[@genaller](/user/genaller) 那就麻烦点,自己在搜索引擎里面 + `site:cnodejs.org` 呗... \r\n不过这个问题cnode应该可以优化,如果用户ping不通google,那就换成百度或者必应","createdAt":1587721895953},{"id":11024,"originId":"5ea2d16a0275394e768831d3","articleId":2320,"userId":3,"content":"[@abiuDoIT](/user/abiuDoIT) 这个论坛已经自动帮大家加上了","createdAt":1587728746834},{"id":11025,"originId":"5ea2d7260275394e768831e3","articleId":2320,"userId":358,"content":"默认不是带了 site 么","createdAt":1587730214853},{"id":11026,"originId":"5ea3ccd70275394e768832e0","articleId":2320,"userId":135,"content":"[@darrenliuwei](/user/darrenliuwei) 他应该是没梯子用不了google,所以我让他在自己的搜索引擎里面加上site来搜索...","createdAt":1587793111786},{"id":11027,"originId":"5ea3e003d870946c6b6be19e","articleId":2320,"userId":3,"content":"[@abiuDoIT](/user/abiuDoIT) 好吧，但是能够来到这个网站的人，怎么会没有梯子呢。。。","createdAt":1587798019749},{"id":11028,"originId":"5ea44ad1d870946c6b6be287","articleId":2320,"userId":358,"content":"[@abiuDoIT](/user/abiuDoIT) 好主意，可以提个 PR","createdAt":1587825361051},{"id":11029,"originId":"5ea6893c30176508da9b69d2","articleId":2320,"userId":135,"content":"[@alsotang](/user/alsotang) 已提交pr, 让没梯子的同学用bing搜索\r\n\r\nhttps://github.com/cnodejs/nodeclub/pull/1106","createdAt":1587972412609},{"id":11030,"originId":"5ea10c500275394e76882b9c","articleId":2321,"userId":107,"content":"存入redis，积分榜数据是实时了的，所以2里面提到的（积分都是按天保存的，怎么统计某个用户的总积分）有点不明白，按天存？？？\r\n\r\n之前我们写游戏后台，大量用到redis做实时的排行榜，高效且简单，redis集群会保证数据不丢失，如果你担心丢失，丢消息队列，某个服务消费这个积分数据存入mysql\r\n, 可是按照你的担心，消息队列挂了怎么办呢？mysql挂了怎么办呢？这些都应该由集群服务保证，你再怎么担心也没有用（除非你用的不是云服务，而是自己搭建的，那你就需要对这些中间件服务特别熟悉怎么配置怎么保证高可用了）....","createdAt":1587612752101},{"id":11031,"originId":"5ea10cd60275394e76882ba2","articleId":2321,"userId":107,"content":"如果存mysql仅是为了存档，方便某些数据分析服务提数，那么异步存mysql也没什么不可以的。","createdAt":1587612886861},{"id":11032,"originId":"5ea284a90275394e76883015","articleId":2321,"userId":2246,"content":"[@fantasticsoul](/user/fantasticsoul) 按天保存指： 统计**每天**的积分排行榜，ZINCRBY 的 KEY 为 `rank:<当天日期>`，比如“今日排行榜（2020年04月24日）”的 KEY：rank:20200424。\r\n这样的话，通过 `ZSCORE rank:20200424 user1` 能得到用户 user1 在今天的新增积分。那怎么获取用户的**总积分**？","createdAt":1587709097021},{"id":11033,"originId":"5ea28d270275394e76883048","articleId":2321,"userId":21,"content":"以前我们就遇到一个为了解决自己缓存问题使用了FLUSHALL","createdAt":1587711271432},{"id":11034,"originId":"5ea2abd9d870946c6b6bdfb5","articleId":2321,"userId":2246,"content":"FLUSHALL 清空数据，是因为缓存太多了吗？","createdAt":1587719129786},{"id":11035,"originId":"5ea2b1b6d870946c6b6bdfd0","articleId":2321,"userId":3448,"content":"[@xuxu7](/user/xuxu7) 那就再来个 rank:all 的key 啊","createdAt":1587720630566},{"id":11036,"originId":"5ea65196d870946c6b6be541","articleId":2321,"userId":516,"content":"mq => redis\r\nmq => db\r\n\r\n别非跟我说那个环节挂了，\r\n\r\n定时任务缓存更新，从db读一次，db就是用来做统计的，基本数据全都在redis，什么积分榜，直接从db + redis   incr或者sort list 就好了","createdAt":1587958166308},{"id":11037,"originId":"5ea3c2b90275394e768832a5","articleId":2323,"userId":138,"content":"前端就是仅仅展示用户信息的,你把会员信息储存在客户端里,进入展示会员信息的页面时候去本地拿出来展示,本地没有就请求一下,一直储存着就行.进行业务操作的时候去数据库查会员信息就是了.前端的话会员到期时间依据本地储存的即可.","createdAt":1587790521564},{"id":11038,"originId":"5ea61a240275394e7688362b","articleId":2323,"userId":3450,"content":"[@hushiyun1994](/user/hushiyun1994) 谢谢","createdAt":1587943972699},{"id":11039,"originId":"5e9e6b620275394e7688257a","articleId":2324,"userId":134,"content":"灵活/高效/解耦","createdAt":1587440482305},{"id":11040,"originId":"5e9e6de90275394e76882586","articleId":2324,"userId":3451,"content":"[@zhangshichuan](/user/zhangshichuan) 不太理解，前两个没体会到，只是增加了工作量，最后一个如果跟后端约定到restful api风格就可以了吧。 个人理解node如果做中间层，目前最大的作用就是做SSR，做接口转发我觉得完全没必要","createdAt":1587441129848},{"id":11041,"originId":"5e9e6e7fd870946c6b6bd426","articleId":2324,"userId":21,"content":"这个都是看业务。但也有很多公司就是为了中间件而中间件，学其皮囊弃其灵魂，没软用还加组件","createdAt":1587441279056},{"id":11042,"originId":"5e9e80250275394e768825a8","articleId":2324,"userId":545,"content":"[@hyx0217](/user/hyx0217)  看场景，尤其是大项目，后端 C++ java 都这么写接口的话会累死。\r\n场景一： X宝，大后端是 java 为主，支持基础业务。  中间一层 node.js ，比如618 ，双11 各种形形色色的活动，后端的基础业务其实不变，这块用 node 快速开发 非常合适。 如果你是用 java  写这些玩意，估计等你写出来双11，双12 都来了，需要灵活快速的脚本语言。\r\n场景二： graphql 生态，可以自己去搜。\r\n场景三： SSR  不多说。\r\n\r\n小项目没必要！ 小项目没必要","createdAt":1587445797724},{"id":11043,"originId":"5e9e8a6fd870946c6b6bd46d","articleId":2324,"userId":3451,"content":"[@zuohuadong](/user/zuohuadong) 刚刚研究了下graphql，node做接口转发可以使用这个吗？这样如果可以把后端提供的多个接口合并起来，也是个使用中间层的优点","createdAt":1587448431796},{"id":11044,"originId":"5e9e8aecd870946c6b6bd471","articleId":2324,"userId":152,"content":"我们这边  bff 做 统一鉴权。 有些复杂的接口在bff做组装、清洗甚至缓存。  有些简单的接口确实有点多此一举的感觉。 看实际情况了。","createdAt":1587448556156},{"id":11045,"originId":"5e9e8d37d870946c6b6bd48c","articleId":2324,"userId":358,"content":"> 发现接口请求的时间比直接请求多了一倍。\r\n\r\n大概率是你的写法有问题，是不是同步了。\r\n\r\n> 在性能上没有一点提升，不知道还有什么用呢？\r\n\r\n主要在于解耦，通过服务自治来提升协作效率。如果你们后端的发布频率足够快，足够配合你们的任何需求，其实不用中间层也无所谓的。\r\n\r\n这一层叫做 聚合层，简单理解为 Java 时代的 MVC 层，只不过现在很多团队会把这一层交给前端，然后前端会更倾向于用 Node 来实现。\r\n","createdAt":1587449143949},{"id":11046,"originId":"5e9e8e10d870946c6b6bd491","articleId":2324,"userId":3451,"content":"[@Gitforxuyang](/user/Gitforxuyang) 我们公司也是，鉴权都放在node端了，那这样后端那边不就都不用做了？还有那种复杂的接口比如在node组装请求多个接口合并成一个，或者其他的操作，这样是不是大大增加前端请求接口的时间。","createdAt":1587449360980},{"id":11047,"originId":"5e9e8ec8d870946c6b6bd499","articleId":2324,"userId":3451,"content":"[@atian25](/user/atian25) 代理的请求我都是用async await来写的。每次请求打印控制台消息，这个好像也会影响，不知道有没有好的模板给我学习下写法。","createdAt":1587449544931},{"id":11048,"originId":"5e9e9178d870946c6b6bd4b1","articleId":2324,"userId":3451,"content":"[@atian25](/user/atian25) ![image.png](//static.cnodejs.org/Frd-9KChCyVhMlIHKzITOqkpgfRj)\r\n像这一块，我自己用eggjs写的，合并多个接口的请求，返回组合的数据，这样请求时间就会增加很多，但是前端如果请求多个接口因为是并行的，其实请求时间并不是很慢。只是请求了多个接口。我就很纠结到底该不该用","createdAt":1587450232734},{"id":11049,"originId":"5e9e943b0275394e76882640","articleId":2324,"userId":358,"content":"你的写法有问题，for 循环里面是串行的。\r\n看下 promise-fun","createdAt":1587450939412},{"id":11050,"originId":"5e9e9acad870946c6b6bd4de","articleId":2324,"userId":1402,"content":"[@hyx0217](/user/hyx0217) 你这写法不慢才怪呢。。串行执行，总时间是所有请求的时间合，你这必须串行执行？没必要的化用Promise.all，也可以使用async库","createdAt":1587452618390},{"id":11051,"originId":"5e9e9c610275394e76882679","articleId":2324,"userId":3451,"content":"[@atian25](/user/atian25) 大佬是说的是用promise.all()是吗，我这样写是因为promise.all返回数组是根据响应时间来排序的所以用这种写法。请问下大佬要是用eggjs做类似这样的接口转发，请求时间一般来说还是有影响的是吗？毕竟中间加了一层，不过中间层其他的优点，这样的影响是否可以忽略不计了？","createdAt":1587453025391},{"id":11052,"originId":"5e9e9cf10275394e76882685","articleId":2324,"userId":3451,"content":"[@HelTi](/user/HelTi) 我明白，我之前也是promise.all写法，只是返回的顺序不一致,尴尬，我有其他思路了可以就是用promise.all，用映射标识每个请求对应的数据就行了，","createdAt":1587453169830},{"id":11053,"originId":"5e9ea8970275394e768826c7","articleId":2324,"userId":152,"content":"[@hyx0217](/user/hyx0217) 是的。 我们原来就是各个微服务自己做鉴权。不好。 所以统一在bff层做。 至于你说的组合多个接口请求耗时会增加。我只能说在理论上只增加了一层http连接的时间。 在我们实际使用中。这一层消耗的时间不超过10ms。 可以说是可以忽略不计。","createdAt":1587456151838},{"id":11054,"originId":"5e9ea9620275394e768826d1","articleId":2324,"userId":358,"content":"[@hyx0217](/user/hyx0217) 可以看下 https://github.com/sindresorhus/promise-fun 提供了很多 Promise 的上层封装。\r\n\r\n你这种场景一般用 p-map 来搞，可以设置并发数。\r\n\r\n请求耗时是几乎可以忽略不计的，唯一的风险就是多了一个节点肯定不可避免会多了运维上的保障点","createdAt":1587456354607},{"id":11055,"originId":"5e9fb0edd870946c6b6bd719","articleId":2324,"userId":145,"content":"[@hyx0217](/user/hyx0217) \r\n\r\n> 我这样写是因为promise.all返回数组是根据响应时间来排序的所以用这种写法。\r\n\r\n`Promise.all` 的返回值, 不是应该是 根据 传入的 `Promise` 来排序的吗?","createdAt":1587523821180},{"id":11056,"originId":"5e9fb7f4d870946c6b6bd737","articleId":2324,"userId":3451,"content":"[@zhangxh1023](/user/zhangxh1023) 不好意思，刚验证了下是的，太笨了这都记错了","createdAt":1587525620816},{"id":11057,"originId":"5ea5640bd870946c6b6be421","articleId":2324,"userId":628,"content":"[@hyx0217](/user/hyx0217) 你这样是串行的，改成 Promise.all 再看","createdAt":1587897355327},{"id":11058,"originId":"5bbda83a37a6965f59052043","articleId":2325,"userId":10,"content":"> 占个楼，晚点答。","createdAt":1539156026691},{"id":11059,"originId":"5bbda866ede204052db80464","articleId":2325,"userId":358,"content":"> 占个二楼，等待楼上回答，还有楼下其他框架的同学抢答。","createdAt":1539156070712},{"id":11060,"originId":"5bbda87515e4fd1923f48dc5","articleId":2325,"userId":3452,"content":"[@thonatos](/user/thonatos) 谢谢苏依","createdAt":1539156085954},{"id":11061,"originId":"5bbda9c937a6965f59052045","articleId":2325,"userId":3453,"content":"``` html  \r\n\t前排插眼，等待学习。\r\n```  ","createdAt":1539156425459},{"id":11062,"originId":"5bbdbcf337a6965f59052054","articleId":2325,"userId":2030,"content":"可以封装成 plugin 让4个项目去依赖；\r\nhttps://cnodejs.org/topic/5895870f800323b708f7bbf4","createdAt":1539161331957},{"id":11063,"originId":"5bbdbf2037a6965f59052059","articleId":2325,"userId":545,"content":"参考我们的\r\n![image.png](//static.cnodejs.org/Fqo2gO5NLz_fYsQ5uMhQSKTENZpt)\r\n\r\n分为业务层和服务层，由k8s 管理。\r\ncaddy 可以换成 kong （基于nginx）\r\n\r\n也欢迎一起交流\r\nhttps://github.com/notadd/notadd/blob/master/README_zh.md","createdAt":1539161888444},{"id":11064,"originId":"5bbdbf629545eaf107b9c9ab","articleId":2325,"userId":152,"content":"微服务当然要将服务拆出来。 比如说用户服务，既然是自家的app，如果账号体系是共通的，就可以将用户部分拆出来成为用户中心，4个app调用用户服务时都到这一个服务上。这个服务就拆出来了。","createdAt":1539161954363},{"id":11065,"originId":"5bbdbf7d9545eaf107b9c9ad","articleId":2325,"userId":1562,"content":"如果从零开始的话 推荐接入 dubbo + nacos\r\nnode 对外提供http \r\n对内互调用dubbo rpc \r\n服务注册发现与配置中心 使用 nacos\r\n\r\nhttps://github.com/alibaba/nacos\r\nhttps://github.com/apache/incubator-dubbo\r\n\r\n如果公司基础设施好 已经上docker全家桶了 那么推荐 Docker 的ServiceMesh方案\r\n\r\n","createdAt":1539161981780},{"id":11066,"originId":"5bbdda8c37a6965f59052071","articleId":2325,"userId":3452,"content":"[@tao1991123](/user/tao1991123) 谢谢，不过我们这头现在是纯Node","createdAt":1539168908333},{"id":11067,"originId":"5bbde55b37a6965f59052073","articleId":2325,"userId":3452,"content":"[@chenzeZzz](/user/chenzeZzz) 这个当时我想了，但是版本迭代的时候没有拆成微服务方便。","createdAt":1539171675645},{"id":11068,"originId":"5bbe05c515e4fd1923f48de7","articleId":2325,"userId":545,"content":"[@deadwind4](/user/deadwind4) node 服务发现和服务治理这块相关的东西比较少。 基于 k8s 生态比较现实一些。\r\n我们现在业务层 和 服务层 基于 nest.js ，通信使用 Grpc-node，网关使用 kong ，服务发现 etcd ,  CI :Jenkins\r\n目前已经在线上跑了这么一套了","createdAt":1539179973423},{"id":11069,"originId":"5bbf0c2637a6965f590520b3","articleId":2325,"userId":3454,"content":"[@zuohuadong](/user/zuohuadong)  业务这么复杂, 权限系统该怎么设计, 指导下呢","createdAt":1539247142737},{"id":11070,"originId":"5bbf0fb39545eaf107b9c9f2","articleId":2325,"userId":850,"content":"你可以看看 egg 做微服务的例子：https://github.com/eggjs/egg-boilerplate-microservice","createdAt":1539248051339},{"id":11071,"originId":"5bbf0ff937a6965f590520b9","articleId":2325,"userId":3455,"content":"[@zuohuadong](/user/zuohuadong) 大佬说的对，真的很少，刚开始找了很久，都没有合适的","createdAt":1539248121984},{"id":11072,"originId":"5bbf171a15e4fd1923f48e11","articleId":2325,"userId":545,"content":"[@suntopo](/user/suntopo) 参考 https://github.com/notadd/nt-module-user  相关实践。","createdAt":1539249946329},{"id":11073,"originId":"5bbf17559545eaf107b9c9f4","articleId":2325,"userId":545,"content":"[@zonezoen](/user/zonezoen) 我们建议也是先用现有成熟的系统，然后再考虑用node 重写。业务优先。","createdAt":1539250005612},{"id":11074,"originId":"5bbf1ad015e4fd1923f48e16","articleId":2325,"userId":545,"content":"[@okoala](/user/okoala)  可以看看这个 https://github.com/nestjs/nest/tree/master/sample/03-microservices  ， nest 在国外现在特别受欢迎～","createdAt":1539250896305},{"id":11075,"originId":"5bc049039545eaf107b9ca44","articleId":2325,"userId":36,"content":"占楼学习","createdAt":1539328259775},{"id":11076,"originId":"5bc04ea715e4fd1923f48e55","articleId":2325,"userId":3456,"content":"为什么不试试 https://github.com/moleculerjs/moleculer","createdAt":1539329703167},{"id":11077,"originId":"5bc2211a9545eaf107b9ca9d","articleId":2325,"userId":563,"content":"强烈推荐moleculer.js https://github.com/moleculerjs/moleculer， 我们现在技术选型，后端微服务框架用的这个","createdAt":1539449114372},{"id":11078,"originId":"5bc23a669545eaf107b9caa0","articleId":2325,"userId":640,"content":"[@zuohuadong](/user/zuohuadong) 提供一下服务治理和发现的经验呗， 我现在也在用nestjs","createdAt":1539455590974},{"id":11079,"originId":"5bc28d6bede204052db80503","articleId":2325,"userId":545,"content":"[@soluty](/user/soluty)  用的人太少了，而且 js 后面也不好维护。","createdAt":1539476843308},{"id":11080,"originId":"5bc28d9137a6965f5905218f","articleId":2325,"userId":545,"content":"[@jiangzhuo](/user/jiangzhuo) 这块暂时是通过 k8s 的 etcd 管理的。","createdAt":1539476881483},{"id":11081,"originId":"5ea4e125d870946c6b6be2ce","articleId":2325,"userId":1630,"content":"[@soluty](/user/soluty) 两年后，想问一下贵司还有继续使用 moleculerjs吗？过程中有没有遇到什么重大问题？","createdAt":1587863845547},{"id":11082,"originId":"5e6210e93cadb020b915fb52","articleId":2326,"userId":1501,"content":"我也是跟你一样","createdAt":1583485161727},{"id":11083,"originId":"5e6221313cadb020b915fb99","articleId":2326,"userId":1079,"content":"右上角新手入门==","createdAt":1583489329496},{"id":11084,"originId":"5e69914a3cadb020b9160a61","articleId":2326,"userId":22,"content":"![](//static.cnodejs.org/Fpkcq4pbd6YYEyNEAUWy_z7Luydb)","createdAt":1583976778665},{"id":11085,"originId":"5e6aea5e3cadb020b9160cf3","articleId":2326,"userId":99,"content":"https://pan.baidu.com/s/1Axc_qHQ-jaAAugqhe5TpuA  视频教程看看","createdAt":1584065118458},{"id":11086,"originId":"5e7079d545fcf75ee50e4ce2","articleId":2326,"userId":717,"content":"谢谢各位大大，正在学习中。","createdAt":1584429525114},{"id":11087,"originId":"5ea429790275394e768833c9","articleId":2326,"userId":226,"content":"多看，多想，多实战。加油","createdAt":1587816825991},{"id":11088,"originId":"5ea1d4e6d870946c6b6bdd19","articleId":2327,"userId":393,"content":"最新测试，复制命令行中的SQL执行语句，在mysql命令行下执行是没有问题的...也就说在egg运行中，该SQL语句出现问题\r\n","createdAt":1587664102652},{"id":11089,"originId":"5ea23b3f0275394e76882e4c","articleId":2327,"userId":393,"content":"仔细对比排查后发现，是数据库连错了，在navicat中操作的一直是另一个mysql服务器。不过总结了几点：\r\n1. Model需要和数据库强对应吗？\r\n\t不需要，Model中定义的字段数量只能 <= 数据库对应表实际存在的字段，如果Model中字段数量小于实际存在的字段，在进行查操作时只会输出Model定义字段的行信息\r\n2. Model中字段的类型影响除写操作外的操作，如表中存在一个为Varchar的title，在Model中定义title 为 DATE，也不会影响正常的查询语句，但是会影响写入。\r\n3. 出现字段不再field list，或table name doesn't exist时，未必是程序其他报错而错误的输出了这俩错误，可能确实是没在数据库找到对应的表......","createdAt":1587690303642},{"id":11090,"originId":"5ea01017d870946c6b6bd8ec","articleId":2328,"userId":89,"content":"看安全级别吧，必要的场景或者用着麻烦的可以加。","createdAt":1587548183086},{"id":11091,"originId":"5ea011eb0275394e76882a17","articleId":2328,"userId":152,"content":"我们的bff层统一做鉴权。后面的服务就不再鉴权了。 然后因为有好几种鉴权。就写了一个不同的鉴权middleware。根据接口的需求不同使用不同的middleware就完事了。","createdAt":1587548651170},{"id":11092,"originId":"5ea014b1d870946c6b6bd903","articleId":2328,"userId":3451,"content":"[@Gitforxuyang](/user/Gitforxuyang) 具体是用什么方式的鉴权呢，是在每次请求前使用中间件验证是吗？不知道有没有类似的demo可以学习下吗？自己写不知道从哪来写起，就很纠结","createdAt":1587549361423},{"id":11093,"originId":"5ea014f6d870946c6b6bd909","articleId":2328,"userId":3451,"content":"[@i5ting](/user/i5ting) 我看eggjs文档的passport，应该不适合bff用是吧","createdAt":1587549430060},{"id":11094,"originId":"5ea026e90275394e76882a6f","articleId":2328,"userId":89,"content":"[@hyx0217](/user/hyx0217) 和egg无关的。\r\n\r\n鉴权可以做成通用服务。","createdAt":1587554025833},{"id":11095,"originId":"5ea0521ed870946c6b6bd9d1","articleId":2328,"userId":358,"content":"你指的是哪一层的鉴权？  brower -- bff -- backend ","createdAt":1587565086706},{"id":11096,"originId":"5ea056760275394e76882ac4","articleId":2328,"userId":152,"content":"[@hyx0217](/user/hyx0217) 我们是起一个sso服务。 然后所有请求先经过bff。 bff统一请求sso服务鉴权。 通过的继续往后端分发。  ","createdAt":1587566198317},{"id":11097,"originId":"5ea07d66d870946c6b6bda25","articleId":2328,"userId":109,"content":"可以写个middleware中间件做鉴权，这样后面的服务就不用做了。","createdAt":1587576166952},{"id":11098,"originId":"5ea12fa10275394e76882bf2","articleId":2328,"userId":3451,"content":"[@atian25](/user/atian25) 就是浏览器请求bff，原先接口是直接brower请求backend，通过请求头带个token，现在加了bff那还需要在bff做个权限验证吗？我是想说如果在bff层统一加一个，那么backend就都不需要了","createdAt":1587621793074},{"id":11099,"originId":"5ea13222d870946c6b6bdb2a","articleId":2328,"userId":358,"content":"[@hyx0217](/user/hyx0217) 一般都要的。","createdAt":1587622434943},{"id":11100,"originId":"5cdd3994518e0954fc40ef3e","articleId":2329,"userId":358,"content":"单文件？","createdAt":1558002068686},{"id":11101,"originId":"5cdd4bade57aac76fed2b452","articleId":2329,"userId":1247,"content":"[@atian25](/user/atian25) 可能会有很多个，业务提示比较多","createdAt":1558006701597},{"id":11102,"originId":"5cdd5485e57aac76fed2b464","articleId":2329,"userId":2272,"content":"可以弄个专门存放这类『常量』的目录，根据不同的用途归类到不同的常量文件里，类似宏定义。","createdAt":1558008965052},{"id":11103,"originId":"5cdd555a518e0954fc40efaa","articleId":2329,"userId":1247,"content":"[@chyingp](/user/chyingp) 了解，多谢回复","createdAt":1558009178941},{"id":11104,"originId":"5cdd5592e57aac76fed2b472","articleId":2329,"userId":2272,"content":"[@ikomom](/user/ikomom) bkq","createdAt":1558009234460},{"id":11105,"originId":"5cdd635d518e0954fc40f001","articleId":2329,"userId":358,"content":"[@ikomom](/user/ikomom) 自己定义个目录，然后调用 loader 的 loadToApp 挂载","createdAt":1558012765217},{"id":11106,"originId":"5cdd66f2e57aac76fed2b4be","articleId":2329,"userId":1247,"content":"[@atian25](/user/atian25) 谢谢回复","createdAt":1558013682564},{"id":11107,"originId":"5cde143f518e0954fc40f189","articleId":2329,"userId":166,"content":"我也是业务里非常多的常量.目前的做法是 error code 这类统一目录 load 到 app 对象上. 其他一些常量单独放某文件夹. 有一点费劲，不知道有没有更好的做法","createdAt":1558058047711},{"id":11108,"originId":"5cde2b2ee57aac76fed2b71a","articleId":2329,"userId":358,"content":"可以参考下：https://github.com/atian25/egg-showcase/pull/13/files","createdAt":1558063918054},{"id":11109,"originId":"5ce655024036f24194cf5d1a","articleId":2329,"userId":3154,"content":"做成插件 多个项目公用可好","createdAt":1558598914527},{"id":11110,"originId":"5ea019f30275394e76882a4c","articleId":2329,"userId":113,"content":"不同用途的常量往往使用的方式会不同，所以还是单独文件管理为好，比如CabloyJS中的两类常量：错误信息、国际化语言\r\nhttps://github.com/zhennann/egg-born-module-a-base-sync/blob/master/backend/src/config/errors.js\r\n![1.png](//static.cnodejs.org/FirEPZExnpIeKPe3oR-1P6jHkrzK)\r\nhttps://github.com/zhennann/egg-born-module-a-base-sync/blob/master/backend/src/config/locale/zh-cn.js\r\n![2.png](//static.cnodejs.org/FrwRijNNjR6j5vRcdHKOPuymO3uZ)\r\n","createdAt":1587550707267},{"id":11111,"originId":"5e9d52d3d870946c6b6bd243","articleId":2330,"userId":358,"content":"https://github.com/eggjs/egg-passport/blob/master/app/extend/application.unittest.js\r\n\r\n","createdAt":1587368659327},{"id":11112,"originId":"5e9dbe22d870946c6b6bd34b","articleId":2330,"userId":3329,"content":"[@atian25](/user/atian25) 赞👍","createdAt":1587396130751},{"id":11113,"originId":"5df8973928dce75de5436369","articleId":2333,"userId":150,"content":"![image.png](//static.cnodejs.org/FuFcjumZkJqk8FOrcFBGRnD0VoFF) 按照官方文档的执行顺序来说，我这样配置应该没得问题吧，先更新this.config，再初始化 egg-sequelize","createdAt":1576572729237},{"id":11114,"originId":"5df8a02428dce75de54363a0","articleId":2333,"userId":358,"content":" 试试 egg-apollo 在 agent 里面获取配置，写到文件。然后 app 里面读取文件塞到 config","createdAt":1576575012533},{"id":11115,"originId":"5df8b53676a67b5e0e418949","articleId":2333,"userId":150,"content":"这是我 egg-apollo 中 agent.js 中的代码\r\n```js\r\n assert(agent.config.apolloDdz, 'apolloDdz config is required');\r\n    const config = await apollo.remoteConfigServiceSikpCache(agent.config.apolloDdz);\r\n    // this.coreLogger.info(`apollo 初始化完成${new Date()}`, bundle);\r\n\r\n    const configFilePath = __dirname + '/config/config.default.js';\r\n\r\n    if (fs.existsSync(configFilePath)) {\r\n      fs.unlinkSync(configFilePath);\r\n    }\r\n\r\n    let configText = \"'use strict';\\n\";\r\n    configText = configText + 'module.exports = () => {\\n return';\r\n    configText = configText + JSON.stringify(config);\r\n    configText = configText + '};';\r\n    fs.appendFileSync(configFilePath, configText);\r\n\r\n```\r\n\r\n现在遇到的问题是，项目使用 egg-bin debug 启动，如果把配置信息写到 config.default.js 中，会检查到代码有变化然后进行重启，然后继续获取配置文件，写到 config.default.js 中进入死循环","createdAt":1576580406122},{"id":11116,"originId":"5df8d05676a67b5e0e418984","articleId":2333,"userId":358,"content":"你应该写到 xx.json，然后 config 里面 require 这个文件。\r\n\r\n然后 xx.json 这个配置到 egg-development 的 ignore 里面","createdAt":1576587350809},{"id":11117,"originId":"5df9915b0696c446bf64ee78","articleId":2333,"userId":150,"content":"感谢，已经实现","createdAt":1576636763109},{"id":11118,"originId":"5dfca3960696c446bf64f643","articleId":2333,"userId":150,"content":"[@atian25](/user/atian25) 现在我将获取配置的代码写在 agent.js 中，代码内容如下。但是在测试中，config中的 require json文件的代码运行的时间比 agent.js 中生成json文件早，导致无法加载报错，请问是我哪里操作错误了吗？\r\n```js\r\n//agent.js\r\n'use strict';\r\nconst assert = require('assert');\r\nconst fs = require('fs');\r\nconst apollo = require('./lib/apollo');\r\n\r\nmodule.exports = async agent => {\r\n  agent.beforeStart(async () => {\r\n    assert(agent.config.apolloDdz, 'apolloDdz config is required');\r\n    const config = await apollo.remoteConfigServiceSikpCache(agent.config.apolloDdz);\r\n\r\n\r\n    const configFilePath = __dirname + '/config/apollo-config.json';\r\n\r\n    if (fs.existsSync(configFilePath)) {\r\n      fs.unlinkSync(configFilePath);\r\n    }\r\n    const configStr = JSON.stringify(config);\r\n    fs.appendFileSync(configFilePath, configStr);\r\n    agent.coreLogger.info(`apollo 初始化完成${new Date()}`);\r\n  });\r\n};\r\n```\r\n```js\r\n//config.default.js\r\n'use strict';\r\nmodule.exports = () => {\r\n  const config = require('./apollo-config.json');\r\n  return config;\r\n};\r\n\r\n```\r\n","createdAt":1576838038400},{"id":11119,"originId":"5dfce0d20696c446bf64f6a2","articleId":2333,"userId":358,"content":"- mm.app 是把 agent 和 app 模拟在一个进程里面来加速测试的，可能这里的时序有问题。\r\n- 可以实现新的生命周期的写法，beforeStart 已经是不推荐的了\r\n- 如果还不行，就用 mm.cluster 的测试方式","createdAt":1576853714382},{"id":11120,"originId":"5e0050fbba8f6d46c4edea26","articleId":2333,"userId":150,"content":"[@atian25](/user/atian25) 我上面的配置加载方式，现在项目启动就会直接报错，Error: Cannot find module './apollo-config.json'。在 agent.js 先获取配置在写到json文件中去，然后在插件的 config.default.js 中进行加载，这个顺序是不是有问题呢？因为代码启动是不按照这个顺序执行的","createdAt":1577079035865},{"id":11121,"originId":"5e005f4e0696c446bf64fa4a","articleId":2333,"userId":150,"content":"现在解决办法是将读取 json 配置的方法，写到 config.prod.js 或者 config.local.js 中，不允许写在 config.default.js中","createdAt":1577082702942},{"id":11122,"originId":"5e00680f0696c446bf64fa7b","articleId":2333,"userId":358,"content":"[@ddzyan](/user/ddzyan) 可以带最小可复现仓库提交 issue 我们看看","createdAt":1577084943856},{"id":11123,"originId":"5e007f11ba8f6d46c4edeb39","articleId":2333,"userId":150,"content":"[@atian25](/user/atian25) 这是代码仓库，稍后我会添加到issue中\r\nhttps://github.com/ddzyan/apollo-loader-test","createdAt":1577090833510},{"id":11124,"originId":"5e0080b40696c446bf64faec","articleId":2333,"userId":150,"content":"[@atian25](/user/atian25) 这是我提交的问题 https://github.com/eggjs/egg/issues/4113","createdAt":1577091252207},{"id":11125,"originId":"5e0182db0696c446bf64fce4","articleId":2333,"userId":150,"content":"![image.png](//static.cnodejs.org/FuRZSmBYgXXfbCFdmFjlwmqoK25j)\r\n按照egg-loader的文档说明，config的加载是在agent.js之前，是不是说明 egg 无法进行动态获取配置，来配置数据库插件呢","createdAt":1577157339173},{"id":11126,"originId":"5e02c664ba8f6d46c4edf013","articleId":2333,"userId":150,"content":"顶顶顶，大佬们有啥解决方案吗？现在的想法是修改启动命令，类似如下：\r\n```shell\r\nnode getApollo.js && egg-bin debug\r\n```\r\nnode getApollo.js 负责第一次获取apollo配置，并且写入json文件中，再在 config.*.js 中读取json配置添加配置，解决config提早加载的问题\r\n","createdAt":1577240164779},{"id":11127,"originId":"5e040f180696c446bf6501ba","articleId":2333,"userId":541,"content":"[@ddzyan](/user/ddzyan) 实在不行你把egg-sequelize 复制一遍改成新的hook写法，推迟到更后的生命周期再加载数据库","createdAt":1577324312895},{"id":11128,"originId":"5e0437350696c446bf6502b4","articleId":2333,"userId":150,"content":"[@AnzerWall](/user/AnzerWall) \r\n这样的话我觉得我上面的改动方法会好点。\r\n只是我原本的目的是做一个 egg-apollo 插件，不应该涉及到其他插件的修改。主要想了解下egg是否支持异步获取配置，并且在插件启动前进行更新。\r\n\r\n这是我提交的issue https://github.com/eggjs/egg/issues/4113","createdAt":1577334581937},{"id":11129,"originId":"5e0561ba0696c446bf6504f8","articleId":2333,"userId":150,"content":"这个问题是不是无解了呢？或者说EGG暂时没考虑使用apollo获取动态配置（例如数据库连接配置）呢","createdAt":1577411002648},{"id":11130,"originId":"5e985277d870946c6b6bca94","articleId":2333,"userId":3392,"content":"[@ddzyan](/user/ddzyan) 我的实现方式是不用egg-script启动，使用egg-cluster自定义启动脚本，然后在启动脚本中异步获取配置，写到json文件中，config中require这个json文件，我看过源码，agent的加载顺序与app的是一样的，所以，config肯定是在你异步获取配置之前就已经加载了，egg-sequellize在agent中就会加载，所以在agent里面异步获取是不行的。脚本这种启动方式也是官方提供的方式，所以不用担心，具体查看官方文档，我用的方式，已经在生产环境应用了，完全莫得问题。看一下吧[解决方式](https://github.com/eggjs/egg/issues/4243)","createdAt":1587040887935},{"id":11131,"originId":"5e990d27d870946c6b6bcb64","articleId":2333,"userId":3339,"content":"[@ddzyan](/user/ddzyan) 如果要使用 apollo 的热更新的话，就是无解的，至少现在是\r\n\r\n因为热更新的时候可能需要重启 sequelize、redis... 这种骚操作在生产就是坟头蹦迪 233\r\n\r\n如果只是将 apollo 作为一个存配置的地方，启动之前直接跑个脚本去拉一下就行","createdAt":1587088679979},{"id":11132,"originId":"5e9921d00275394e76881d3c","articleId":2333,"userId":358,"content":"[@xiedacon](/user/xiedacon) 还是有临时解的，在 agent 里面 appollo 拉配置，然后写文件，在 worker 这边 require","createdAt":1587093968561},{"id":11133,"originId":"5e9ad9e3d870946c6b6bcf0f","articleId":2333,"userId":3339,"content":"[@atian25](/user/atian25) 写文件当然是可以的，我说的是 “热更新”，指程序跑到一半突然更新\r\n\r\n我看他那个插件里面是这么写的，，","createdAt":1587206627394},{"id":11134,"originId":"5e9c38d40275394e768821cf","articleId":2333,"userId":358,"content":"[@xiedacon](/user/xiedacon) 那需要对用到的插件都要做处理，支持重新建立连接。","createdAt":1587296468844},{"id":11135,"originId":"5e9943d2d870946c6b6bcc5e","articleId":2334,"userId":109,"content":"不是理论上，PKI 体系设计就是如此（公钥私钥是对等的）。\r\n密钥对，一个加密/签名，另外一个解密/验签。 \r\n并未规定或者设计为只能用私钥加密/签名。","createdAt":1587102674794},{"id":11136,"originId":"5e99445bd870946c6b6bcc62","articleId":2334,"userId":109,"content":"我给你发个信息，使用我的私钥加密/签名是为了证明是我操作的， 而无法证明是发给你的。\r\n如果要证明是发给你的，就必须用你的公钥来加密/签名——总不可能用你的私钥来执行这个操作吧。","createdAt":1587102811774},{"id":11137,"originId":"5e9945840275394e76881dc3","articleId":2334,"userId":615,"content":"[@waitingsong](/user/waitingsong) 你的意思是不是说公钥签名没有意义","createdAt":1587103108385},{"id":11138,"originId":"5e996a2cd870946c6b6bcd5b","articleId":2334,"userId":109,"content":"[@974806047](/user/974806047) 怎么会没意义，你再看看我二楼的回复：\r\n如果我要证明这个信息是专门发给你（而不是其它人），我该怎么办？","createdAt":1587112492758},{"id":11139,"originId":"5e99a8e3d870946c6b6bcdea","articleId":2334,"userId":615,"content":"[@waitingsong](/user/waitingsong) 我大概懂了，谢谢你！","createdAt":1587128547949},{"id":11140,"originId":"5e9aa30fd870946c6b6bced3","articleId":2334,"userId":109,"content":"[@974806047](/user/974806047) 进一步，如果我发给你的信息只能你看到(其他人都看不到)，又该如何？","createdAt":1587192591680},{"id":11141,"originId":"5e9b14970275394e768820cc","articleId":2334,"userId":615,"content":"[@waitingsong](/user/waitingsong) \r\n> 如果我要证明这个信息是专门发给你（而不是其它人），我该怎么办？\r\n\r\n我的理解是，把接收者的信息放在要发送的数据里，对他签名发送，类似于jwt的方式。\r\n> 进一步，如果我发给你的信息只能你看到(其他人都看不到)，又该如何？\r\n\r\n如果是单方向传递的话，公钥加密，私钥解密就是严格保密的。如果是双方向传递的话，应该要么是像https一样先用rsa再用aes，或者就直接用两对公密钥，不知道这个理解对不对？\r\n\r\n兄弟，可以的话可以加一下你联系吗，这里不能私聊交流太慢了，我的用户名就是我的qq号，蟹蟹！","createdAt":1587221655070},{"id":11142,"originId":"5e984dac0275394e76881c02","articleId":2335,"userId":3392,"content":"egg默认开启body-parser的","createdAt":1587039660782},{"id":11143,"originId":"5e985077d870946c6b6bca8e","articleId":2335,"userId":3286,"content":"[@KevinHades](/user/KevinHades) 是的，可是很奇怪，解析成字符串了","createdAt":1587040375666},{"id":11144,"originId":"5e98542e0275394e76881c1f","articleId":2335,"userId":3392,"content":"等一下，你是说page是字符串格式的？这个参数的值是字符串格式的？那没问题呀，query参数的值本来就是字符串类型的。","createdAt":1587041326812},{"id":11145,"originId":"5e9908b8d870946c6b6bcb43","articleId":2335,"userId":11,"content":"URL 的 query 参数本来就是字符串，你可以放在 body 里上传就是原来的类型了","createdAt":1587087544467},{"id":11146,"originId":"5e990974d870946c6b6bcb52","articleId":2335,"userId":3339,"content":"用 JoI 校验一下呗","createdAt":1587087732250},{"id":11147,"originId":"5e9aa5d1d870946c6b6bcee0","articleId":2335,"userId":109,"content":"url里面传值全部是字符串。可以后端手动根据参数名(page)转换下类型。或者post方法传json","createdAt":1587193297432},{"id":11148,"originId":"5e9ac238d870946c6b6bcefe","articleId":2335,"userId":2246,"content":"配置 `egg-validate` 插件的 **convertType** ，会改变 query 参数的类型：\r\n```\r\nconst rule = {\r\n  page: {\r\n    type: 'int?',\r\n    convertType: 'int',\r\n    min: 1,\r\n  },\r\n  pageSize: {\r\n    type: 'int?',\r\n    convertType: 'int',\r\n    min: 1,\r\n  },\r\n};\r\nthis.ctx.validate(rule, this.ctx.query);\r\n```","createdAt":1587200568672},{"id":11149,"originId":"5d8607a295464514f7ed8dc1","articleId":2336,"userId":3457,"content":"哇。神奇的网络。\r\n\r\n面试时各种大神各种吹。天昏地暗日月无光造航母， 结果连一个官网示例问题都没人搞得定。哇。 神奇网络","createdAt":1569064866655},{"id":11150,"originId":"5d9bfdf2ece3813ad9ba059e","articleId":2336,"userId":3047,"content":"会不会是User.sync()的原因？尝试注释一下看看","createdAt":1570504178785},{"id":11151,"originId":"5d9c520cece3813ad9ba0738","articleId":2336,"userId":433,"content":"[@gejigejigeji](/user/gejigejigeji) 哇个锤子哟  这个sync你生成表到数据库中的时候这个字段有子自增么","createdAt":1570525708232},{"id":11152,"originId":"5da04890ece3813ad9ba1233","articleId":2336,"userId":60,"content":"[@gejigejigeji](/user/gejigejigeji) 心态就这样崩了？","createdAt":1570785424228},{"id":11153,"originId":"5da148bb865a9844a301ac63","articleId":2336,"userId":3458,"content":"我用sync()也出过问题，不知道为什么，然后用的migration，就可以了","createdAt":1570851003299},{"id":11154,"originId":"5da7d874ece3813ad9ba2478","articleId":2336,"userId":1664,"content":"我的建议是尽量避免用sync(),因为sync真的会出问题，有时候服务都启动不起来，我之前就遇到过；","createdAt":1571281012297},{"id":11155,"originId":"5e913f5164259617c49a554c","articleId":2336,"userId":3457,"content":"mysql my.ini腾讯云centos初始化安装的时候，会自动配置不允许自增，删掉就行了。S开头的单词我忘了。\r\n\r\n哎，还是造福下社会吧。","createdAt":1586577233326},{"id":11156,"originId":"5e97b788d870946c6b6bc878","articleId":2336,"userId":615,"content":"歪个楼，修改表结构的时候感觉使用sync({alter:  true}) 比较好一点， sync({ force: true })的话取决于你的数据库原来的设置，还是可能会出问题。","createdAt":1587001224965},{"id":11157,"originId":"5e9920cd0275394e76881d34","articleId":2336,"userId":3392,"content":"我以为终于有人发现了sequelize的隐藏bug，显然不是。","createdAt":1587093709275},{"id":11158,"originId":"5e9801c50275394e76881ae7","articleId":2337,"userId":89,"content":"理解负载基本就够了。比如阿里云那套。slb做负载，其他node机器正常部署就好了。\r\n","createdAt":1587020229454},{"id":11159,"originId":"5e9801f40275394e76881aef","articleId":2337,"userId":89,"content":"高并发测试水比较，做基准性能压测还比较容易一些","createdAt":1587020276002},{"id":11160,"originId":"5e990f1a0275394e76881cd5","articleId":2337,"userId":615,"content":"[@i5ting](/user/i5ting) 大佬，有没有比较好的文章介绍的呢？","createdAt":1587089178753},{"id":11161,"originId":"5e9815660275394e76881b56","articleId":2338,"userId":268,"content":"postman发送请求的时候，会额外增加一个filename\r\n![image.png](//static.cnodejs.org/FvDcUe3Z9lXfZJLO4eVEEdlLGE5s)\r\n\r\n后端的处理请求的模块底层依赖 `https://github.com/mscdex/busboy`\r\n\r\n> https://github.com/mscdex/busboy/blob/master/lib/types/multipart.js#L152\r\n\r\n这里处理文件名\r\n打印一下`parsed`\r\n\r\n```js\r\n[ 'form-data',\r\n  [ 'name', 'file' ],\r\n  [ 'filename', 'è°ç .xlsx' ],\r\n  [ 'filename', '调研.xlsx' ] ]\r\n ```\r\n 最后使用的是filename，所以造成文件名乱码\r\n \r\n 正常的浏览器请求\r\n ![image.png](//static.cnodejs.org/FmRSoq5QBwx6CqjAAA8PNcIOOcbx)\r\n 不会额外增加filename\r\n \r\n ","createdAt":1587025254289},{"id":11162,"originId":"5e986594d870946c6b6bcade","articleId":2338,"userId":615,"content":"[@jiangli373](/user/jiangli373) 太牛逼了老哥，我也看到了这个追加的filename了，但我当时的想法是在postman中修改header的Content-Disposition参数，但是不生效。\r\n我自己后面是使用浏览器版的postman，就没有问题了。","createdAt":1587045780289},{"id":11163,"originId":"5dccfc98ece3813ad9ba8616","articleId":2339,"userId":3460,"content":"用include的写法 可以实现？","createdAt":1573715096300},{"id":11164,"originId":"5e940c1558ab6717beb7f618","articleId":2341,"userId":3463,"content":"这是动态页面（如 PHP、Koa、express···）还是静态页面（如 Vue）？\r\n第一张图，访问的是 `get('/')`，post 时访问的是 `post('/')`; 如果是动态页面的话,需要设置 `/` 这个路由同时可接收多种请求方式。","createdAt":1586760725225},{"id":11165,"originId":"5e9718790275394e768819af","articleId":2341,"userId":3462,"content":"虽然没有看懂大佬的回答，但问题还是得到解决了，就是要res.send一个东西至客户端就好了，还是要谢谢大佬","createdAt":1586960505885},{"id":11166,"originId":"5e955a7d58ab6717beb7f8fb","articleId":2342,"userId":31,"content":"全局 pipe/guards/interceptor 这些独立于模块之外, 所以注入的时候找不到 redisService.  nest 5.0 以下可以 select 模块让他找到, \r\n```ts\r\nconst authGuard = app\r\n  .select(XXXModule)\r\n  .get(XXXGuard/Pipe/Interceptor);\r\n\r\napp.useGlobalGuards(authGuard);\r\n```\r\n以上的版本, 没玩过, 官网找了找 如下, 你可以试试  [传送门](https://docs.nestjs.com/guards#binding-guards)\r\n![image.png](//static.cnodejs.org/Fms6eTzisp_Pp4gX1rgJcI0ILlrB)","createdAt":1586846333706},{"id":11167,"originId":"5e965d8964259617c49a5e45","articleId":2342,"userId":1131,"content":"[@yviscool](/user/yviscool) 感谢，这种方式可以~\r\n\r\n我理解，这时候的guard 其实是归属于app模块的，app里面注入了，所以可以使用。不知道我的理解对不对~","createdAt":1586912649072},{"id":11168,"originId":"5e95bf9d64259617c49a5dd4","articleId":2343,"userId":3,"content":"如果你根域名审核通过了，那么你所有的子域名都可以部署广告代码。","createdAt":1586872221265},{"id":11169,"originId":"5e95de4964259617c49a5e0d","articleId":2343,"userId":1545,"content":"[@darrenliuwei](/user/darrenliuwei) 啊，谢谢你。我最后一丝担心消逝了。现在该担心审核不通过了23333","createdAt":1586880073222},{"id":11170,"originId":"5e60a7553cadb020b915f862","articleId":2344,"userId":1288,"content":"我使用的axios，request类似，参考如下\r\n```javascript\r\napp.use(async ctx => {\r\n  const options = {\r\n    url: 'http://localhost:3000', // 代理的地址\r\n    method: ctx.request.method,\r\n    headers: ctx.request.headers,\r\n    responseType: 'stream',\r\n  };\r\n\r\n  if (ctx.request.body && Object.keys(ctx.request.body).length) {\r\n    options.data = ctx.request.body;\r\n  } else {\r\n    // 上传文件，直接把ctx.req原生的req流传给data\r\n    options.data = ctx.req;\r\n  }\r\n\r\n  const result = await axios(options).catch(err => {\r\n    if (!err || !err.response) {\r\n      throw err || new Error('axios unknown error');\r\n    }\r\n    return err.response;\r\n  });\r\n\r\n  ctx.res.statusCode = result.status;\r\n  ctx.status = result.status;\r\n  await new Promise((resolve, reject) => {\r\n\r\n    for (const key in result.headers) {\r\n      ctx.set(key, result.headers[key]);\r\n    }\r\n    // axios返回的response数据注入到ctx.res\r\n    result.data.pipe(ctx.res);\r\n    result.data.on('end', () => {\r\n      return resolve();\r\n    });\r\n    result.data.on('error', err => {\r\n      return reject(err);\r\n    });\r\n  });\r\n});\r\n```","createdAt":1583392597990},{"id":11171,"originId":"5e949c6558ab6717beb7f79a","articleId":2344,"userId":3466,"content":"大佬, 现在有解决方案了吗?","createdAt":1586797669962},{"id":11172,"originId":"5e9510eb64259617c49a5b3e","articleId":2344,"userId":358,"content":"楼主先搞明白 promise 和 callback 吧， koa 不支持 callback 的方式","createdAt":1586827499944},{"id":11173,"originId":"5e9510fa64259617c49a5b43","articleId":2344,"userId":358,"content":"代理不是你随便用一个 request 就可以搞定的，有很多坑需要填的，可以参考下 https://github.com/eggjs/egg-http-proxy 的源码","createdAt":1586827514611},{"id":11174,"originId":"5e9521e464259617c49a5bb0","articleId":2344,"userId":89,"content":"包一下就好了\r\n\r\n```\r\nawait new Promise(function(resolve, reject){\r\n    // 逻辑自己包\r\n\trequest({ uri,   method,  ...requestOption.headers  })\r\n.on('response', response => {\r\nObject.keys(response.headers).forEach((key) => {\r\n// if ('content-length' === key) return;\r\nif ('transfer-encoding' === key) return;\r\n\tctx.set(key, response.headers[key]);\r\n});\r\n})\r\n.on('error', (error) => {\r\n\tconsole.log(error)\r\n})\r\n .pipe(PassThrough())\r\n})\r\n\r\n```","createdAt":1586831844574},{"id":11175,"originId":"5e95287c64259617c49a5bc4","articleId":2344,"userId":358,"content":"[@i5ting](/user/i5ting) 代理没那么简单的，看我那个库里面那么多代码就知道了（即便如此，我那个库其实还有一些 edge case 没处理的）","createdAt":1586833532330},{"id":11176,"originId":"5e9528a058ab6717beb7f83f","articleId":2344,"userId":358,"content":"就楼主的需求而言，可以直接用我那个库提供的 API","createdAt":1586833568033},{"id":11177,"originId":"5e95690c64259617c49a5cca","articleId":2344,"userId":89,"content":"[@atian25](/user/atian25) 嗯，他是request透传，还好，加中间人就麻烦了。你那个库确实更合适","createdAt":1586850060505},{"id":11178,"originId":"5e93c0dd58ab6717beb7f4cd","articleId":2345,"userId":1192,"content":"不知道这个是不是你需要的\r\n![image.png](//static.cnodejs.org/FjWz1fUDLpDH5N2O6X0OenA7Uza-)","createdAt":1586741469127},{"id":11179,"originId":"5e93c16464259617c49a587b","articleId":2345,"userId":1192,"content":"控制台快捷键 ctrl shift p","createdAt":1586741604515},{"id":11180,"originId":"5e93cb0464259617c49a58ad","articleId":2345,"userId":3391,"content":"[@assmdx](/user/assmdx) 我用 chrome 81.0.4044.92，没看到 screnshot 命令，这是你安装的插件？\r\n\r\n![111.png](//static.cnodejs.org/Fvf21MVOjU4O5FRR52dMXG7mmszv)","createdAt":1586744068975},{"id":11181,"originId":"5e940a9f64259617c49a5979","articleId":2345,"userId":135,"content":"[@gousern](/user/gousern) 要再控制台 调起命令输入框, 控制台快捷键 ctrl shift p\r\n不是在console里面输入","createdAt":1586760351910},{"id":11182,"originId":"5e94243764259617c49a59ef","articleId":2345,"userId":89,"content":"https://github.com/sindresorhus/pageres","createdAt":1586766903264},{"id":11183,"originId":"5e94514e58ab6717beb7f723","articleId":2345,"userId":3391,"content":"[@abiuDoIT](/user/abiuDoIT) 找到了，谢谢说明。![11232.png](//static.cnodejs.org/FuTWnLus6M-S0HxOnQ5B_7cC66Gm)[@abiuDoIT](/user/abiuDoIT) ","createdAt":1586778446157},{"id":11184,"originId":"5e94540564259617c49a5aa3","articleId":2345,"userId":3391,"content":"[@i5ting](/user/i5ting) 刚看了，主要透過 capture-website 这模块中的 puppeteer 以 headerless chromium 来操作。","createdAt":1586779141435},{"id":11185,"originId":"5e93162258ab6717beb7f43b","articleId":2347,"userId":358,"content":"学习下基础的 Markdown 排版吧。。。","createdAt":1586697762712},{"id":11186,"originId":"5e8addab58ab6717beb7e506","articleId":2348,"userId":1192,"content":"倒腾了半天终于解决了\r\n```\r\n\tconst fs = require('fs');\r\n\t const readline = require('readline');\r\n\t async getLog(req, res) {\r\n\t  const _this = this;\r\n\t  try {\r\n\t\tconst { createReadStream } = fs;\r\n\t\tconst log = '/opt/example.log'; // log 大小：40MB\r\n\t\tconst readStream = createReadStream(log);\r\n\t\treadStream.pipe(res);\r\n        readStream.on(\"end\", () => {\r\n           console.log(\"finished\");\r\n           res.end();\r\n        });\r\n\t  } catch (e) {\r\n\t\tlogger.error(\"获取log失败\", e);\r\n\t\tres.json(_this.fail(ERROR_PARAMETER, \"获取日志失败，请稍后重试\"));\r\n\t  }\r\n\t}\r\n```\r\n\r\n\r\n```\r\n   async queryLog() {\r\n      let logs = \"\";\r\n      fetch(getLog)\r\n        .then(async response => {\r\n          const reader = response.body.getReader();\r\n          const decoder = new TextDecoder();\r\n          do {\r\n            let { done, value } = await reader.read();\r\n            if (value) {\r\n              let str = decoder.decode(value, { stream: true });\r\n              logs = logs + str;\r\n            }\r\n            if (done) {\r\n              break;\r\n            }\r\n          } while (true);\r\n        })\r\n        .catch(e => {\r\n          console.error(e);\r\n        });\r\n    } \r\n```","createdAt":1586159019753},{"id":11187,"originId":"5e8bfb0958ab6717beb7e6ce","articleId":2348,"userId":89,"content":"去理解一下异步流程控制","createdAt":1586232073174},{"id":11188,"originId":"5e8c9df858ab6717beb7e8c6","articleId":2348,"userId":1192,"content":"[@i5ting](/user/i5ting) 感谢狼叔指点. 还有更高效优雅的写法吗 0.0？把浏览器端代码优化了一下：\r\n```\r\n\tasync queryLog() {\r\n      let index = 0;\r\n\t  let logs = \"\";\r\n      let response = await fetch(getLog);\r\n      const reader = response.body.getReader();\r\n      const decoder = new TextDecoder();\r\n      do {\r\n        let { done, value } = await reader.read();\r\n        if (value) {\r\n          let str = decoder.decode(value, { stream: true });\r\n          logs = logs + str;\r\n        }\r\n        if (done) {\r\n          break;\r\n        }\r\n      } while (true);\r\n    }\r\n```","createdAt":1586273784097},{"id":11189,"originId":"5e92d09d58ab6717beb7f36d","articleId":2348,"userId":354,"content":"[@assmdx](/user/assmdx) 有，用 eventemitter 来搞","createdAt":1586679965818},{"id":11190,"originId":"5e8fe6c558ab6717beb7eef7","articleId":2351,"userId":31,"content":"难道不应该看文档吗","createdAt":1586489029853},{"id":11191,"originId":"5e8fe76264259617c49a52f6","articleId":2351,"userId":3391,"content":"[@yviscool](/user/yviscool) 想比较下怎么比较方便 ","createdAt":1586489186976},{"id":11192,"originId":"5e88420358ab6717beb7e22e","articleId":2352,"userId":358,"content":"默认 cpu 个数，node 的 api 在 docker 有问题，需要自行指定","createdAt":1585988099743},{"id":11193,"originId":"5e88723958ab6717beb7e2c6","articleId":2352,"userId":109,"content":"同上。好像是nodejs还是docker最新版有解决这个问题。不过容器化的egg最好还是直接指定 worker进程数量。","createdAt":1586000441872},{"id":11194,"originId":"5e8be73164259617c49a4a51","articleId":2352,"userId":18,"content":"[@atian25](/user/atian25) 我还奇怪这个机器怎么cpu这么多。。。","createdAt":1586226993393},{"id":11195,"originId":"5e8c9be464259617c49a4c6d","articleId":2352,"userId":358,"content":"[@waitingsong](/user/waitingsong) 好像没解决。我们是用了黑科技解决的。","createdAt":1586273252886},{"id":11196,"originId":"5e8e7af758ab6717beb7ebe5","articleId":2352,"userId":109,"content":"[@atian25](/user/atian25) 这种bug对于我们来说不用花过多精力去解决，指定worker参数即可。 总不至于云节点vCPU数量从1到32各种配置都有吧。","createdAt":1586395895233},{"id":11197,"originId":"5e8c23f864259617c49a4b4b","articleId":2353,"userId":19,"content":"你得用户表得有多少内容能超过16M啊？不要过度设计，真出现了再分表","createdAt":1586242552526},{"id":11198,"originId":"5e8c62d064259617c49a4c27","articleId":2353,"userId":1259,"content":"不推荐放在用户表，应该放另外一个表，例如建一个收藏表，必要字段是 用户id 文档id，无论查哪个用户收藏了哪些文章和哪个文章被哪些用户收藏就挺好查的","createdAt":1586258640768},{"id":11199,"originId":"5e8d287b64259617c49a4cf0","articleId":2353,"userId":3450,"content":"[@luanxuechao](/user/luanxuechao) 大概800多万的字，我是想问一下，如果出现这样的状况，不好拆分了吧？","createdAt":1586309243876},{"id":11200,"originId":"5e8d28d564259617c49a4cf4","articleId":2353,"userId":3450,"content":"[@heguangda](/user/heguangda) 对，但是我用户表下的love字段需要引用你说的收藏表中文档的id，是指这个用户表中的文档会超出16m大小限制吗？如果一直这么发展，可能会造成无限增加吧？","createdAt":1586309333504},{"id":11201,"originId":"5e8d7d8a58ab6717beb7ea3e","articleId":2353,"userId":19,"content":"如果你一个用户表里 一个document 有800多万字，本身就有问题，不单单考虑这个love字段，其他字段是否也要拆分出去，用户表存储与用户有关的基本信息就可以了，其他拆了吧","createdAt":1586331018328},{"id":11202,"originId":"5e8e1f6158ab6717beb7ebb5","articleId":2353,"userId":1079,"content":"显然需要你需要温习一下全栈的视频，然后采用多表连接的方案。","createdAt":1586372449114},{"id":11203,"originId":"5e83fb0558ab6717beb7da0f","articleId":2354,"userId":1737,"content":"apiDoc用法简单，功能少。  swagger功能齐全，用法复杂","createdAt":1585707781084},{"id":11204,"originId":"5e84569764259617c49a3ed2","articleId":2354,"userId":3470,"content":"https://github.com/Surnet/swagger-jsdoc\r\nhttps://github.com/bowencool/swagger-ui","createdAt":1585731223780},{"id":11205,"originId":"5e8468ed64259617c49a3f24","articleId":2354,"userId":3469,"content":"[@pretty-foam](/user/pretty-foam) 谢谢，之前大概了解了下swagger，不确定现在大家一般用的啥","createdAt":1585735917723},{"id":11206,"originId":"5e8468fc64259617c49a3f28","articleId":2354,"userId":3469,"content":"[@superbowen](/user/superbowen) 谢谢，我去看看~","createdAt":1585735932216},{"id":11207,"originId":"5e854ba758ab6717beb7dc92","articleId":2354,"userId":1126,"content":"apiDoc","createdAt":1585793959308},{"id":11208,"originId":"5e8bf9d558ab6717beb7e6c2","articleId":2354,"userId":1391,"content":"为什么没有jsdoc","createdAt":1586231765838},{"id":11209,"originId":"5e8d46be64259617c49a4d48","articleId":2354,"userId":545,"content":"graphql  自带，以及 swagger ","createdAt":1586316990403},{"id":11210,"originId":"5e8a857964259617c49a4874","articleId":2355,"userId":21,"content":"其实我不建议在router层做这个事情，可以新建一个controller层通过工厂生产出controller器的入口做代理，拦截proxy。否则路由不够直观后面跟着一大长条方法，第二自定义空间有限导致每个方法都要做类似的事情。\r\n\r\n#### 下面是针对问题的回答：\r\n这么和你说吧，在发生处理http请求的时候，在中间件发生错误的时候会调用 ctx的onerror方法，而不是只调用了app的on(error,...)方法\r\n```js\r\n// /lib/application.js\r\nhandleRequest(ctx, fnMiddleware) {\r\n    const res = ctx.res;\r\n    res.statusCode = 404;\r\n    const onerror = err => ctx.onerror(err);\r\n    const handleResponse = () => respond(ctx);\r\n    onFinished(res, onerror);\r\n    return fnMiddleware(ctx).then(handleResponse).catch(onerror);\r\n  }\r\n```\r\n但是ctx的onerror方法,不仅仅会调用app的on(error,...)方法，还会覆盖你的ctx.type,如下\r\n```js\r\n// /lib/context.js\r\n onerror(err) {\r\n \t// 省略代码...\r\n\t// 如果异常之前就被拦截，这里的err就是null，就不会往下走了\r\n    if (null == err) return;\r\n    if (!(err instanceof Error)) err = new Error(util.format('non-error thrown: %j', err));\r\n\t// 省略代码...\r\n\t// 在这里调用了你的on(error)\r\n    this.app.emit('error', err, this);\r\n\t// 省略代码...\r\n\t// 关键在这里强制设置了ctx.type把你的覆盖了\r\n    this.type = 'text';\r\n\t// 省略代码...\r\n\t// 发送数据请求结束\r\n    res.end(msg);\r\n  },\r\n```\r\n为什么呢？区别就是你使用了处理异常中间件相当于手动只调用了app的on(error,...)方法。而没使用在处理异常中间件的时候就抛错走了ctx的的onerror方法，这个方法不仅仅会调用app的on(error,...)方法，还会覆盖你的ctx.type","createdAt":1586136441646},{"id":11211,"originId":"5e8c9c3064259617c49a4c74","articleId":2355,"userId":358,"content":"不应该调用 ctx.onError，而是应该直接 ctx.throw","createdAt":1586273328560},{"id":11212,"originId":"5e8bfb5664259617c49a4abf","articleId":2356,"userId":1391,"content":"这个5个月前的问题怎么跑前面来了。\r\n\r\n说下我的理解吧：\r\n你说的这个问题应该是单点登录的问题，常规情况下，第三方应用会通过浏览器的302跳转发给你一个token，然后，你要通过你的服务端调用第三方的接口来获取用户ID，拿到用户ID后，你就可以知道这个用户有没有在你本地注册过了，如果没有注册，你就需要引导用户去做注册，当然了，这个时候你可以再通过第三方用户ID来获取详细的用户信息（通常情况下需要授权）来辅助用户进行快束注册。","createdAt":1586232150712},{"id":11213,"originId":"5e8151dd64259617c49a3744","articleId":2357,"userId":21,"content":"node版本问题：https://zhuanlan.zhihu.com/p/54951550","createdAt":1585533405477},{"id":11214,"originId":"5e81961c58ab6717beb7d586","articleId":2357,"userId":516,"content":"不仅仅是node版本的问题，不同版本的不同浏览器表现也不一样的哟","createdAt":1585550876283},{"id":11215,"originId":"5e8bf65258ab6717beb7e6a6","articleId":2357,"userId":1391,"content":"从你使用setTimeout 0开始，你就要遗忘掉代码执行顺序了，这会让你按顺序执行来思考问题，而不是从一个异步的过程来思考问题，这是一个很危险思考方式。\r\n不管是浏览器还是Node都没有承诺过，setTimeout 0会按顺序执行，甚至都没有承诺过，setTimeout 0 会在0s之后就开始执行。\r\n我们通常这么做只是为了暂时释放掉CPU的时间，或想将当前的栈释放掉，从而减轻内存压力。","createdAt":1586230866384},{"id":11216,"originId":"5e85b46d58ab6717beb7de01","articleId":2358,"userId":358,"content":"跟 inquirer 其实没啥关系。\r\n全局共享的思路是不好的。","createdAt":1585820781503},{"id":11217,"originId":"5e85c5e564259617c49a4228","articleId":2358,"userId":3474,"content":"[@atian25](/user/atian25) 但是假设我写了一个inquirer的脚本，那如果不能require 回调的结果就意味着我所有有关inquirer的东西都只能写在一个js文件里了。","createdAt":1585825253723},{"id":11218,"originId":"5e868f8564259617c49a42dd","articleId":2358,"userId":3474,"content":"自己顶一波","createdAt":1585876869616},{"id":11219,"originId":"5e86a64c64259617c49a434c","articleId":2358,"userId":358,"content":"你代码的组织问题，一般是需要一个 context 一路下去的，可以看下 egg-bin、common-bin 这几个库我们是怎么写的。\r\n","createdAt":1585882700943},{"id":11220,"originId":"5e8bf42864259617c49a4a9b","articleId":2358,"userId":1391,"content":"你可以exports一个`promise`，在使用的地方，用await或.then来调用，你这份数据毕竟是一个异步的数据，你是需要考虑数据有没有准备好的。\r\n```js\r\n// module\r\nmodule.exports = inquirer.prompt(questions);\r\n// require\r\nrequire(\"module\").then(answers=>{});\r\n```\r\n\r\n如果你可以确定数据能提前准备好，只要想把这一个异步调用释放掉，你还可以这样写：\r\n\r\n```js\r\nconst response = {};\r\ninquirer.prompt(questions).then(answers=>{\r\n\tresponse.answers=answers;\r\n});\r\nmodule.exports = response;\r\n```\r\n你要注意，上面的这段代码是有风险的，如果你在then回调之前访问了`response`，你得到的将会是个`undefined`","createdAt":1586230312720},{"id":11221,"originId":"5e88726658ab6717beb7e2ca","articleId":2359,"userId":109,"content":"找个可以允许cmd shell的npm 包","createdAt":1586000486860},{"id":11222,"originId":"5e899f5264259617c49a47d8","articleId":2359,"userId":1504,"content":"[@waitingsong](/user/waitingsong) 好的 谢谢你 我找个试试","createdAt":1586077522740},{"id":11223,"originId":"5e89ab2b58ab6717beb7e3c0","articleId":2359,"userId":109,"content":"[@iori2882](/user/iori2882)   https://github.com/waitingsong/bank-voucher-ocr/blob/master/src/lib/ocr-process.ts#L97 \r\n使用rxjs 流格式的: https://www.npmjs.com/package/rxrunscript \r\n或者用 eggjs 的 https://www.npmjs.com/package/runscript ","createdAt":1586080555914},{"id":11224,"originId":"5e8b367058ab6717beb7e5b0","articleId":2359,"userId":1504,"content":"[@waitingsong](/user/waitingsong) 收到 十分感谢","createdAt":1586181744807},{"id":11225,"originId":"5e7d633e58ab6717beb7ce83","articleId":2361,"userId":21,"content":"区块链？","createdAt":1585275710830},{"id":11226,"originId":"5e7d87e664259617c49a3280","articleId":2361,"userId":3476,"content":"我知道的都是Rust和Go……","createdAt":1585285094546},{"id":11227,"originId":"5e7da3a158ab6717beb7cf36","articleId":2361,"userId":22,"content":"Rust","createdAt":1585292193180},{"id":11228,"originId":"5e89897364259617c49a47a5","articleId":2361,"userId":1602,"content":"目前在区块链公司就职，nodejs 适用于做Dapp，区块链应用层开发，区块链的底层还得是go","createdAt":1586071923955},{"id":11229,"originId":"554b8fd6b68166372e60017b","articleId":2362,"userId":940,"content":"看过源码，简单的调用接口判断。调用一次，+1，简单。\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1431015382662},{"id":11230,"originId":"554bf7d8b68166372e60019d","articleId":2362,"userId":424,"content":"搞这么高浏览数，有什么好处？","createdAt":1431042008609},{"id":11231,"originId":"554c0837b68166372e6001ac","articleId":2362,"userId":3477,"content":"[@leapon](/user/leapon) 这样不真实吧，至少自己不知道有多少人确实关注了这个问题","createdAt":1431046199498},{"id":11232,"originId":"554c0848b68166372e6001ae","articleId":2362,"userId":3477,"content":"[@nqdy666](/user/nqdy666) 哦","createdAt":1431046216755},{"id":11233,"originId":"554c2568b68166372e6001f3","articleId":2362,"userId":1629,"content":"我就是被这么高的浏览数骗进来的\r\n看来我需要写一个脚本刷一下","createdAt":1431053672716},{"id":11234,"originId":"554c267fb68166372e6001f5","articleId":2362,"userId":3477,"content":"[@luicfer](/user/luicfer) 这个num可能是别人刷出来看效果的，我就F5了几次而已","createdAt":1431053951827},{"id":11235,"originId":"554c2ad0b68166372e600200","articleId":2362,"userId":1629,"content":"[@songqinghehe](/user/songqinghehe) 我也刷了几千，wrk 地址设了这个页面，命令一运行，涨了好几千2333","createdAt":1431055056317},{"id":11236,"originId":"554c3f27ba6070b06ac28ddd","articleId":2362,"userId":18,"content":"这方面确实没有做防重复","createdAt":1431060263935},{"id":11237,"originId":"554d7144ba6070b06ac28ece","articleId":2362,"userId":940,"content":"[@alsotang](/user/alsotang) 有打算改进么，嘿嘿\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1431138628051},{"id":11238,"originId":"5e870e8358ab6717beb7e110","articleId":2362,"userId":720,"content":"[@songqinghehe](/user/songqinghehe) 111","createdAt":1585909379986},{"id":11239,"originId":"5e870e9364259617c49a44fe","articleId":2362,"userId":720,"content":"[@dhrgogo](/user/dhrgogo) 111","createdAt":1585909395029},{"id":11240,"originId":"5e81cd3d58ab6717beb7d68c","articleId":2363,"userId":89,"content":"java提供的啥api，是http还是rpc？然后用node的模块对接组装就好了","createdAt":1585564989357},{"id":11241,"originId":"5e81d54458ab6717beb7d6a6","articleId":2363,"userId":1523,"content":"http","createdAt":1585567044043},{"id":11242,"originId":"5e86d4d964259617c49a43db","articleId":2363,"userId":512,"content":"[@SquabbyZ](/user/SquabbyZ) axios访问java的http接口","createdAt":1585894617402},{"id":11243,"originId":"5e859ab664259617c49a4162","articleId":2364,"userId":541,"content":"建议传给他，最好可以的话service不要摸到ctx.request方便方法复用","createdAt":1585814198612},{"id":11244,"originId":"5e85a07664259617c49a418a","articleId":2364,"userId":358,"content":"请求参数 属于 HTTP 层，跟具体的请求协议有关，在 Controller 里面消化掉。\r\nService 是单纯的业务逻辑。","createdAt":1585815670340},{"id":11245,"originId":"5e85e2bc58ab6717beb7de62","articleId":2364,"userId":3398,"content":"[@AnzerWall](/user/AnzerWall) [@atian25](/user/atian25) 感谢！","createdAt":1585832636163},{"id":11246,"originId":"5e85839464259617c49a40d3","articleId":2365,"userId":513,"content":"可能是希望你小小年纪，但是可以搞出 亿万并发量等级的  产品项目与经验吧，呵呵","createdAt":1585808276560},{"id":11247,"originId":"5e85870758ab6717beb7dd44","articleId":2365,"userId":541,"content":"BAT打杂","createdAt":1585809159510},{"id":11248,"originId":"5e85873864259617c49a40f3","articleId":2365,"userId":1175,"content":"想起我之前面试的几次经历：\r\n面试前端职位的时候，\r\n面试官：你会写后端的东西吗？\r\n我：不太会。\r\n面试官：我们需要会后端的前端，回去等通知吧！\r\n\r\n之后把后端的网络、数据库等知识复习了一下，又去面试后端职位，\r\n面试官：你对前端框架熟悉吗？\r\n我：写过几年前端。\r\n面试官：你前端经验太多了，不是我们要找的后端，回去等通知吧！","createdAt":1585809208372},{"id":11249,"originId":"5e858c1964259617c49a410d","articleId":2365,"userId":1523,"content":"[@pixcai](/user/pixcai) 大佬牛啊，技术杠杠的","createdAt":1585810457653},{"id":11250,"originId":"5e858cab58ab6717beb7dd5a","articleId":2365,"userId":1523,"content":"[@AnzerWall](/user/AnzerWall) 我现在的公司就是第一次拿到个互联网项目，临时找的人，而且说不是外包公司，但是就是干的外包的活，甲方各种干预你的技术，叫用最落后的技术开发最新的功能","createdAt":1585810603518},{"id":11251,"originId":"5e858cc564259617c49a4114","articleId":2365,"userId":1523,"content":"[@Solomonqoo](/user/Solomonqoo) 确实","createdAt":1585810629167},{"id":11252,"originId":"5e83158a58ab6717beb7d8c7","articleId":2366,"userId":19,"content":"![image.png](//static.cnodejs.org/Fqzn4yNDQE13LfKOx8Jzql1Sx_5f)\r\n在最下面小方框里写就可以了","createdAt":1585649034957},{"id":11253,"originId":"5e83224364259617c49a3c64","articleId":2366,"userId":135,"content":"[@luanxuechao](/user/luanxuechao) 可以~ 真棒😁","createdAt":1585652291158},{"id":11254,"originId":"5ab2277619b2e3db1895a000","articleId":2367,"userId":3480,"content":"你这个是不是ajax 请求的后台  我怎么看到了vue","createdAt":1521624950296},{"id":11255,"originId":"5ab22dacd298345e41ea7eae","articleId":2367,"userId":1215,"content":"ajax 请求 redirect 有什么用。","createdAt":1521626540086},{"id":11256,"originId":"5ab31c0df5dfc27d7ad98a73","articleId":2367,"userId":3479,"content":"[@JacksonTian](/user/JacksonTian)\r\n谢谢大佬\r\n1、我已经返回url给vue前端， 让前端自己跳转了\r\n2、或者让前端get方式我这个node接口来跳转","createdAt":1521687565026},{"id":11257,"originId":"5e7b132d58ab6717beb7c9cc","articleId":2368,"userId":398,"content":"![微信图片_20200325161348.png](//static.cnodejs.org/FobCkj2FM3izW_pqT620R4JrXUmT)\r\n\r\n安装依赖 `node-pre-gyp WARN Using request for node-pre-gyp https download` 卡在那的问题解决了，用cnpm安装，使用国内npm镜像。但是导出的条形码还是那个样子。另外python环境也都有","createdAt":1585124141402},{"id":11258,"originId":"5e7b25f364259617c49a2d77","articleId":2368,"userId":398,"content":"已解决。突然发现，转成buffer一切都没问题，暂时解决了我的问题。\r\n这个问题已经反馈给 [node-canvas](https://github.com/Automattic/node-canvas/issues/1546)","createdAt":1585128947880},{"id":11259,"originId":"5e82a24764259617c49a3aaa","articleId":2368,"userId":109,"content":"你看看 base64 是什么值","createdAt":1585619527574},{"id":11260,"originId":"5e81a54158ab6717beb7d5b4","articleId":2369,"userId":109,"content":"需要服务器支持","createdAt":1585554753237},{"id":11261,"originId":"5e81a88764259617c49a38b7","articleId":2369,"userId":216,"content":"[@waitingsong](/user/waitingsong) 但是在package.json中设置proxy可以直接用 不需要服务端设置啊","createdAt":1585555591940},{"id":11262,"originId":"5e81bf4164259617c49a393c","articleId":2369,"userId":358,"content":"那只是你本地测试用的，去 MDN 看下跨域的概念就懂了","createdAt":1585561409392},{"id":11263,"originId":"5c0641321c62d833493509ea","articleId":2370,"userId":446,"content":"required没这么用过。\r\n提供一个思路：在外界使用try或promise的catch来捕捉这个error，然后直接拿error.message，再写入response。\r\n不知道你的环境是什么，用的是express还是koa还是其他的。","createdAt":1543913778596},{"id":11264,"originId":"5c06419ad3b8ab334e8da966","articleId":2370,"userId":647,"content":"[@libook](/user/libook) 我用的express，我只是不想在controller里去写判断，schema里可以简单的过滤下，下面这样也可以\r\n![image.png](//static.cnodejs.org/FjvmY3OYwE5TaHI_FMoT9assKWqw)","createdAt":1543913882981},{"id":11265,"originId":"5c0793c21c62d833493511f2","articleId":2370,"userId":541,"content":"建议做前置判断，不要交给orm去做这个判断，也就是不用mongoose的校验。\r\n一来是不灵活，二来绑死了mongooes","createdAt":1544000450849},{"id":11266,"originId":"5e818ed164259617c49a384b","articleId":2370,"userId":647,"content":"err 拦截器里做处理","createdAt":1585549009266},{"id":11267,"originId":"5e81450958ab6717beb7d3d2","articleId":2371,"userId":358,"content":"写的很清楚了，你之前的写法相当于 require uuid 模块下的 v1.js，这是不推荐的，应该直接 require 主模块 export 的属性","createdAt":1585530121032},{"id":11268,"originId":"5e81661e64259617c49a37c3","articleId":2371,"userId":1424,"content":"[@atian25](/user/atian25)   明白了， 我之前是完全 require uuid 下的 v1.js,  我实际上只用到 uuid 这个函数，没必要完全 require v1.js, 浪费内存。 \r\n\r\n多谢","createdAt":1585538590054},{"id":11269,"originId":"5e79b9e464259617c49a29a4","articleId":2373,"userId":89,"content":"前景依然是一片光明。\r\n----------\r\n从2009年，到现在2020年共11年，所有云计算厂商都爱node。node从后端到前端，到大前端基础设施，现在Serverless风口，node依然是用的最多的，从bff到sff，潮流依旧。不过今天大家的关注点已经不再是语言，框架，更多的是基建，看起来热度没有想的那么高。\r\n","createdAt":1585035748470},{"id":11270,"originId":"5e79c06c58ab6717beb7c665","articleId":2373,"userId":109,"content":"从2009年，到现在11年\r\n===\r\n啥情况","createdAt":1585037420525},{"id":11271,"originId":"5e79ca8164259617c49a2a49","articleId":2373,"userId":22,"content":"## 昙花一现？这一现就是11年？！这昙花厉害了！！","createdAt":1585040001144},{"id":11272,"originId":"5e79d3cf58ab6717beb7c703","articleId":2373,"userId":3,"content":"非常看好node.js","createdAt":1585042383421},{"id":11273,"originId":"5e79e5dc64259617c49a2ad3","articleId":2373,"userId":109,"content":"[@justjavac](/user/justjavac) 被现在流行的不规范年份缩写搞成（不好）习惯了， 当成 \r\n> 从 2009年，到现在 2011年。。。\r\n\r\n如果是这样就不会看花了\r\n> 从 2009年，到现在十一年。。。\r\n ","createdAt":1585047004576},{"id":11274,"originId":"5e79e97558ab6717beb7c76a","articleId":2373,"userId":1126,"content":"# 非常牛逼！不需要怀疑 #","createdAt":1585047925477},{"id":11275,"originId":"5e79f6b358ab6717beb7c78d","articleId":2373,"userId":90,"content":"比上不足比下有余。咋说呢抢了部分人的饭碗就这么简单。补充下：有感于ice前端框架作者分享的经历，不是那个分布式ice框架作者。","createdAt":1585051315945},{"id":11276,"originId":"5e7a1a4858ab6717beb7c7d4","articleId":2373,"userId":358,"content":"作为一个技术人，当你在时时刻刻追求精致的性价比投机时，你就输了。\r\n\r\n我们当时做前端，只是因为前端那所见即所得带给我们的那份惊艳的第一次。\r\n我们当时开始玩 Node，只是因为它带给我们无限的想象空间，以及帮我们提升的效能和空间。\r\n\r\n有些领域，你不参与，就永远无法平等对话。\r\n\r\n你不参与到工程化和工具的建设中，就不要奢望后端会帮你在 ant 和 maven 上封装出 babel 和 Webpack。\r\n你不参与到云端的建设中，就不要奢望后端会帮你设计好符合前端实践的接口和服务模型。看看 Graphql 为什么发展那么慢，因为它是一个需要后端付出很多努力，但收益只在前端开发者身上的技术。\r\n\r\n当然，你也可以等，等到其他先行者玩家已经封装完一切，你只需要 Serverless 的去写你的业务代码，那也不失为一种乐趣，只要你能等到那个时候，而且找到自己 35 岁后的价值。\r\n\r\n平时少玩点游戏，多投资在一些不同的技术栈的学习上，可以先做广度上的了解，不用太深入，到某一天你会发现这一条条的线，突然连成一个面了，你就顿悟了。所有的用心的付出都是会有回报的。","createdAt":1585060424587},{"id":11277,"originId":"5e7aaebf64259617c49a2bb4","articleId":2373,"userId":11,"content":"Full Stack 我觉得是未来，Node.js 则是前端工程师走向全栈的一样利器，它不会是昙花一现，但是作为个人不要把自己局限到某一门语言某一项技术里我觉得同样重要。\r\n","createdAt":1585098431424},{"id":11278,"originId":"5e7adb2764259617c49a2c9c","articleId":2373,"userId":513,"content":"atian25  的这段话写的真棒！","createdAt":1585109799657},{"id":11279,"originId":"5e7ae15464259617c49a2cb0","articleId":2373,"userId":545,"content":"程序员也不会吊死在一棵树上~ 有些项目确实需要多个语言更合适。","createdAt":1585111380144},{"id":11280,"originId":"5e7afcb158ab6717beb7c995","articleId":2373,"userId":109,"content":"[@zuohuadong](/user/zuohuadong) 普通web应用 nodejs（或者php）足够，需要性能则加上 go/C/java。","createdAt":1585118385746},{"id":11281,"originId":"5e7b2c2e64259617c49a2d82","articleId":2373,"userId":545,"content":"[@waitingsong](/user/waitingsong)  这理解有些问题了。\r\nphp  ruby  java(spring） 其实做web 应用属于性能较差的。\r\nnode.js  go   java(vert.x)  性能好很多","createdAt":1585130542751},{"id":11282,"originId":"5e7c2a2958ab6717beb7cb95","articleId":2373,"userId":89,"content":"[@zuohuadong](/user/zuohuadong) 你确定么？\r\n\r\n用最新的php和ruby试试","createdAt":1585195561352},{"id":11283,"originId":"5e7c33df64259617c49a2f25","articleId":2373,"userId":545,"content":"[@i5ting](/user/i5ting)  确定。\r\n比如 php-fpm  （php-cli 和 swoole 不普及）  主要还是同步阻塞IO 的问题，php 最新版目前通过缓存的方式近似解决了没有常驻内存的耗时，但数据库连接池也依然没。\r\nruby 是本身太慢了，缺少优化。","createdAt":1585198047183},{"id":11284,"originId":"5e7dc06d64259617c49a3347","articleId":2373,"userId":1079,"content":"就是不知道 deno 将其拉下神坛。","createdAt":1585299565739},{"id":11285,"originId":"5e7d60c364259617c49a31eb","articleId":2374,"userId":89,"content":"狼叔也不知道，尴尬","createdAt":1585275075828},{"id":11286,"originId":"5e7977de64259617c49a285f","articleId":2375,"userId":22,"content":"手动 [@atian25](/user/atian25)","createdAt":1585018846291},{"id":11287,"originId":"5e797b3564259617c49a287d","articleId":2375,"userId":89,"content":"[@czy88840616](/user/czy88840616)  出来科普了\r\n\r\nA future-oriented web framework based on IoC and use Typescript to Improve the efficiency of full stack application development https://midwayjs.org/midway/\r\n\r\nhttps://github.com/midwayjs/midway/","createdAt":1585019701207},{"id":11288,"originId":"5e797c1a58ab6717beb7c552","articleId":2375,"userId":31,"content":"重写是不可能的，这辈子都不可能重写的。\r\n自己重写没钱没kpi，就是打打补丁才能维持的了生活这样子。\r\n用js就像回家一样，any就是一把梭，写得又漂亮，我超喜欢的！","createdAt":1585019930787},{"id":11289,"originId":"5e7980ed58ab6717beb7c57e","articleId":2375,"userId":3,"content":"[@i5ting](/user/i5ting) 简单看了下midway，感觉用midway还不如用nest，而且midway的文档看着真的好难受~","createdAt":1585021165665},{"id":11290,"originId":"5e7981a658ab6717beb7c587","articleId":2375,"userId":89,"content":"[@darrenliuwei](/user/darrenliuwei) 他是基于egg生态的，再细细看看他的依赖模块","createdAt":1585021350038},{"id":11291,"originId":"5e79925f64259617c49a28e1","articleId":2375,"userId":357,"content":"[@darrenliuwei](/user/darrenliuwei) midway 目前是基于 egg + ioc 的组合模式，目前也在探索其他方面（faas，orm) 的可能性，如果有问题，可以加我微信 (czy88840616，文档难受也可以反馈一下，我看看怎么优化）","createdAt":1585025631580},{"id":11292,"originId":"5e79aea064259617c49a2960","articleId":2375,"userId":109,"content":"midway 对ts支持很不错了","createdAt":1585032864570},{"id":11293,"originId":"5e79c1c064259617c49a29e6","articleId":2375,"userId":1402,"content":"复议，用ts重写是大势所趋。","createdAt":1585037760218},{"id":11294,"originId":"5e79c27458ab6717beb7c67e","articleId":2375,"userId":109,"content":"[@HelTi](/user/HelTi) 基本不可能啦。 egg那种框架用ts重写估计很痛苦，直接用 midway 吧","createdAt":1585037940549},{"id":11295,"originId":"5e79c61864259617c49a2a21","articleId":2375,"userId":152,"content":"egg虽然没有用ts重写。但是你可以选择ts模式开发啊。 不过实话说ts也没那么爽。日常用起来问题也挺多","createdAt":1585038872256},{"id":11296,"originId":"5e79c83c58ab6717beb7c6c9","articleId":2375,"userId":26,"content":"如果是为了ts开发，egg完全没必要重写，从egg刚有不久到现在，还真没用过原生js写过egg。egg提供的ts工具很完善啊，代码提示已经不是两年前什么都缺什么都any了。","createdAt":1585039420024},{"id":11297,"originId":"5e7a12db64259617c49a2b21","articleId":2375,"userId":358,"content":"其实我是没明白，Egg 本身内部代码用不用 TS 写，有什么问题么？收益是什么？\r\n是大家都在给 Egg 提交 PR 代码，想参与到 Egg 内部代码维护，发现维护性不行，希望 Egg 是 TS 写的？ \r\n\r\n**Egg 本身用 TS 写，和你用 TS 写 Egg 应用，是两件事来着，后面那个一直都是支持的。**\r\n\r\n当然，我猜测题主的意思是，应用开发层用 TS 来写 Egg 应用。那这块目前有什么问题么？\r\n\r\n- 如果是觉得官方插件的 tsd 不全，这块欢迎大家提下 PR。\r\n- 或者只是因为少了上层的装饰器？这块社区也有一些如 Midway 的实践，直接用不就好了？\r\n- 或者自己封装下 decorator 就好了吧？这块大家的口味都不一样，不一定要追求官方出的。有信心的同学完全可以写一个 npm 包来成为事实标准的。\r\n\r\nEgg 的定位就是框架的框架，它只是定义了一套 Loader 规范，然后附带了一些常用的插件而已。我们提供了上层框架封装机制，它本身也是为了方便团队架构师封装上层框架出出现的，所以大家完全可以类似 midway 那样定制自己的框架的。就像 nest 也不会要求它底层依赖的所有模块，包括 Koa 和 Express 重构为 TS 写的吧？\r\n\r\n实际日常 issue 咨询中，其实我遇到更多的是，不熟悉 TS 的，完全没了解 TS 装饰器也不了解 declare merging 原理的同学，来写 TS。老实说，即使不写 Egg，写其他框架，一样会遇到问题。用 TS 写 egg 的前提是，你必须掌握 TS 的基础知识。我想，TS 粉不会追求所有的肉眼可见的东西都同化为 TS 写的吧，不然就原旨主义了。","createdAt":1585058523418},{"id":11298,"originId":"5e7a171858ab6717beb7c7c9","articleId":2375,"userId":358,"content":"另外，多说两句。\r\n\r\n我们本身其实是 2 个角色的，一个是 Egg 官方维护者，一个是 Egg 社区生态插件维护者。\r\n\r\n前者主要是维护  Egg 核心部分，这块上面也说了，主要是 Loader 规范，这个其实没那么复杂，已经很稳定了。后续会在  Serverless 这种新场景下的一些进程模型等方面做一些优化。\r\n\r\n后者，我们跟大家是一个角色的，都是社区的一份子，来贡献插件。我们写的插件有好有坏，有一些经过历史验证发现不适合我们，或者我们日常工作用不上，那也会放弃维护。这就是开源社区的运行规则，我们并不比社区的同学们高贵，我们跟大家一样遵循同样的原则和约束 。\r\n\r\nPS：最近会少参与一点社区，一方面是回馈有点少牛皮癣有点多，性价比不高；另一方面是 SFF 结合 Egg 这个领域有太多要做的事，忙不过来，还是专心沉淀。就像 Egg 当年也是内部实践了几年后才放出来的最佳实践。","createdAt":1585059608618},{"id":11299,"originId":"5e7ab2df64259617c49a2bce","articleId":2375,"userId":59,"content":"不理解为啥 Egg 用 TS 重写，说了半天没说出任何理由。","createdAt":1585099487404},{"id":11300,"originId":"5e7ac40c58ab6717beb7c8c2","articleId":2375,"userId":545,"content":"[@liangtongzhuo](/user/liangtongzhuo)  准确来说是趋势吧。 前端来说，不论 angular，还是vue3 ，或者 react (那时候还没ts，所以flow)，增强了可维护性，提示也会更加丰富。\r\n后端来说，其实更需要 ts，比如 adonisjs 都开始用 ts 重写了，比如 loopback4 也用 ts 重写了，又比如最近增长非常迅猛的 nest.js ，最起码说明，大家还是需要 类似spring 这样的重型框架的，也一定程度上说明，ts 的好处显而易见。\r\n\r\n换句话说，就是 AOP 面向切面编程思想，只有在 ts 加持后，才能体现得淋漓尽致。\r\n当然，AOP 也并不一定适合小项目或小的团队，也不是所有人喜欢这套编程思想，并不是银弹。","createdAt":1585103884568},{"id":11301,"originId":"5e7ad41864259617c49a2c82","articleId":2375,"userId":135,"content":"我自己用起来是觉得eggjs的ts支持够用了. 该有的基本都有.\r\n所以楼主还是具体说说哪方面支持不够吧?可能已经有轮子了","createdAt":1585107992063},{"id":11302,"originId":"5e7c276a64259617c49a2f08","articleId":2375,"userId":59,"content":"[@zuohuadong](/user/zuohuadong) 我也在用 nest 其实 ts 用起来也不错。 Egg 虽然是 js 写的框架，但是用 ts 写应用也没有问题，提示都有。\r\n\r\n如果 Egg 要上 AOP，那大概率上 TS 重写。目前来说完全够用，就因为应用 ts 写的，框架就上 ts 理由太牵强了。","createdAt":1585194858637},{"id":11303,"originId":"5e7370e464259617c49a1ea9","articleId":2376,"userId":3,"content":"推荐typescript版的egg，midway和nest没用过，不好评价。","createdAt":1584623844569},{"id":11304,"originId":"5e73745058ab6717beb7bbb9","articleId":2376,"userId":2246,"content":"[@darrenliuwei](/user/darrenliuwei) 是指这个 npm init egg --type=ts 吗？","createdAt":1584624720027},{"id":11305,"originId":"5e7377ed58ab6717beb7bbc7","articleId":2376,"userId":89,"content":"我推荐midway，基于egg的生态，就是文档写的差点，如果你会egg，这个是最爽的。如果不会，那么学起来会有点吃力。","createdAt":1584625645446},{"id":11306,"originId":"5e737d6664259617c49a1ef2","articleId":2376,"userId":2246,"content":"[@i5ting](/user/i5ting) 嗯，谢谢推荐，之前受限于流行度就没学，这次好好学学。","createdAt":1584627046606},{"id":11307,"originId":"5e73802b58ab6717beb7bbe7","articleId":2376,"userId":152,"content":"egg如果你有一定的开发能力，基于egg自己组装公司的业务级框架非常好。 ","createdAt":1584627755893},{"id":11308,"originId":"5e73818658ab6717beb7bbef","articleId":2376,"userId":3,"content":"[@xuxu7](/user/xuxu7) 对的，就是这个","createdAt":1584628102989},{"id":11309,"originId":"5e7385ba58ab6717beb7bc0b","articleId":2376,"userId":2246,"content":"[@Gitforxuyang](/user/Gitforxuyang) 嗯，egg 用得确实顺手，我们公司的项目小，多个项目之间没有太多共用的，都是从头开始，还没体会到“基于egg自己组装公司的业务级框架非常好”","createdAt":1584629178097},{"id":11310,"originId":"5e74201c58ab6717beb7bc5c","articleId":2376,"userId":31,"content":"小孩子才做选择, 成年人全都要","createdAt":1584668700630},{"id":11311,"originId":"5e74281f58ab6717beb7bc9d","articleId":2376,"userId":109,"content":"midway, nest 自己都试试看喜欢哪个","createdAt":1584670751608},{"id":11312,"originId":"5e7436f558ab6717beb7bcf2","articleId":2376,"userId":1507,"content":"nest真的香","createdAt":1584674549828},{"id":11313,"originId":"5e747eb264259617c49a208e","articleId":2376,"userId":113,"content":"[@xuxu7](/user/xuxu7) 同意这个观点：“基于egg自己组装公司的业务级框架非常好”，可以参考一下全栈框架CabloyJS是如何在egg基础之上组装的","createdAt":1584692914925},{"id":11314,"originId":"5e77151058ab6717beb7c085","articleId":2376,"userId":1104,"content":"在egg和midway之间，最后选择了egg，上ts。","createdAt":1584862480691},{"id":11315,"originId":"5e79acaa64259617c49a294c","articleId":2376,"userId":103,"content":"选择多了也是怪难受的，如果使用过egg了，那可以试试nest，使用了nest可以试试midway，nodejs的优势就是有更多选择，而且都没有多大的学习难度，就图个新鲜。\r\n我目前是习惯于使用typescript，nest支持更好。egg对ts支持不好但更易上手，对新手友好。","createdAt":1585032362862},{"id":11316,"originId":"5e7ab5d958ab6717beb7c881","articleId":2376,"userId":513,"content":"我也选择使用egg(js版)，因为..................好用。\r\n当然面对ts + nest的冲击，就形成二手策略。\r\n\r\njavascript + egg(js版) ：应用於轻量、快速开发需求\r\njava + springboot：应用於对系统严谨以及对java生态圈成员强需求时\r\n","createdAt":1585100249141},{"id":11317,"originId":"5e7ac16f64259617c49a2c29","articleId":2376,"userId":545,"content":"[@Solomonqoo](/user/Solomonqoo)  angular + nest.js 其实更简单，前后端可以共享代码，思想也一致，就不用纠结那么多了。https://github.com/nstudio/xplat","createdAt":1585103215909},{"id":11318,"originId":"5e7ac19b58ab6717beb7c8b6","articleId":2376,"userId":545,"content":"[@wbget](/user/wbget) ![image.png](//static.cnodejs.org/FsLwFyfgzECFLLctplFPskVTEGim)\r\n","createdAt":1585103259518},{"id":11319,"originId":"5e7ac58264259617c49a2c43","articleId":2376,"userId":545,"content":"[@xuxu7](/user/xuxu7)  如果团队对面向对象思想（AOP）有所抵触的话，倒是可以试试  fastify ，性能非常好，ts 支持还不错。","createdAt":1585104258590},{"id":11320,"originId":"5e7acc3a58ab6717beb7c8f4","articleId":2376,"userId":513,"content":"[@zuohuadong](/user/zuohuadong) 感谢提醒~~\r\n\r\n虽然有点偏离主题.........\r\n\r\n现行微服务技术与架构，java的解决方案成熟也有成功案例，所以才准备二条技术线。\r\n\r\n","createdAt":1585105978065},{"id":11321,"originId":"5e72c8ae64259617c49a1c77","articleId":2377,"userId":22,"content":"什么是“衍生js”啊，我还是第一次听说这个术语","createdAt":1584580782228},{"id":11322,"originId":"5e72d02258ab6717beb7b986","articleId":2377,"userId":90,"content":"[@justjavac](/user/justjavac) 他应该说的是ts吧","createdAt":1584582690051},{"id":11323,"originId":"5e72f98964259617c49a1d6b","articleId":2377,"userId":514,"content":"是的","createdAt":1584593289039},{"id":11324,"originId":"5e785b1a58ab6717beb7c31b","articleId":2377,"userId":513,"content":"最近八个月使用egg.js + antD Pro(2.x)(只用javascript)开发3个系统项目并上线後，\r\n\r\n确实尝到甜头，开发速度很快。随著typescript越来越火，内部团队开始讨论，要\r\n\r\n不要将ts语言纳入技术工具清单里，讨论了一阵子後，反而出现另一个\r\n\r\n声音，要不要引入一个\"正规\"的後端语言，例如java、.net。\r\n\r\n这个................当初原始的决定就是，集中人员精力，只著重一种语言，\r\n\r\n选择优秀的框架，快速开发需求，之後就是不断的复用。\r\n\r\n但是......成员们看来还是想搞java，java後端吸引力大，哎~~~好吧！\r\n\r\nts+ nest.js的组合，是不是用java + springboot会更好？！猜拳吧！\r\n\r\n","createdAt":1584945946815},{"id":11325,"originId":"5e78aee464259617c49a2795","articleId":2377,"userId":514,"content":"[@Solomonqoo](/user/Solomonqoo) 随时准备应变","createdAt":1584967396922},{"id":11326,"originId":"5e7980c758ab6717beb7c579","articleId":2377,"userId":513,"content":"[@dongguangming](/user/dongguangming) 开会讨论的结果是，逐步引入java体系。\r\n\r\n如同node.js所勾勒的，\"不足的部份，用java补\"\r\n\r\n在微服务的架构里，看来只有java 跟go能够实现(观看腾讯课堂某视频得知的)\r\n\r\n，微服务架构，即使是应用在企业内部，也是相当的优秀，当然可能只使用到局\r\n\r\n部的功能。\r\n\r\n毕竟确实java 的生态圈很庞大，很成熟，语言本身也不差，成员们想到之後找工作\r\n\r\n的问题，还是想学习java！\r\n\r\n","createdAt":1585021127705},{"id":11327,"originId":"5e79ad5858ab6717beb7c613","articleId":2377,"userId":875,"content":"赞同逐步引入java体系。\r\n当前node社区的dubbo客户端实现并不完善。调用java的微服务，一些常用功能或者稳定性都有些许问题。\r\n用来做ssr层，或者官网展示性的web服务还是可以的。\r\n当然，调用其它语言写的http接口也没啥问题。\r\n关键是现在java的web端入门上手也很快。。。","createdAt":1585032536094},{"id":11328,"originId":"5e7a197864259617c49a2b42","articleId":2377,"userId":514,"content":"[@wushanchao](/user/wushanchao) 引入吧，潮流无法改变","createdAt":1585060216588},{"id":11329,"originId":"5e7462c664259617c49a202d","articleId":2378,"userId":3486,"content":"/(ㄒoㄒ)/~~崩溃了。到底怎么搞啊。@天猪  救我啊。\r\n为什么就正好egg-redis 和 egg-sequelize  没有在mock的app上啊。\r\n难道数据库操作要mock掉？","createdAt":1584685766072},{"id":11330,"originId":"5e7960a858ab6717beb7c4c5","articleId":2378,"userId":301,"content":"楼主可以看看这个，或许能解决你的问题，我们团队也遇到过类似的问题\r\nhttps://www.npmjs.com/package/e-promise","createdAt":1585012904225},{"id":11331,"originId":"5e7960d558ab6717beb7c4cd","articleId":2378,"userId":301,"content":"我们的策略是，允许程序立即调用，等待连接成功的时候，立即发送","createdAt":1585012949981},{"id":11332,"originId":"5e79c63064259617c49a2a2c","articleId":2378,"userId":26,"content":"可以 await 一下 app.ready();","createdAt":1585038896714},{"id":11333,"originId":"5e7a152a64259617c49a2b2d","articleId":2378,"userId":358,"content":"最简单的方式，看下  egg-sequelize 和 egg-redis 自身的单测怎么写的","createdAt":1585059114613},{"id":11334,"originId":"5e78d64358ab6717beb7c492","articleId":2379,"userId":1011,"content":"我改了一下你的代码，这样好理解一点。\r\n这里面考察了传共享对象调用,当修改是会对原值产生影响，而完全赋值是会开辟一个新的内存区域，在这个区间内访问的是新的内存区域，而外部访问的是另一块内存区域\r\n```js\r\n\r\nvar a={name:'hello',a:1}, b={name:'hi',b:2}\r\nfunction exchange(new_a, new_b){\r\n\tvar intermediate_area=new_b;\r\n\t new_b=new_a; \r\n\t new_a=intermediate_area;\r\n\tnew_a.name=new_a.name+'1';//此时a是指向b的空间地址{name:'hi'} \r\n\r\n\tnew_b.name=new_b.name+'2';//b指向a的空间地址{name:'hello'}\r\n\tconsole.log(new_a.name,new_b.name);//hi1 hello2,此时访问的是局部变量。这个变量只在exchange内部有效\r\n}\r\nexchange(a, b);//a和b都是以传指针的方式传入函数中\r\n\r\nconsole.log(a.name, b.name);//hello1 hi2\r\n```\r\n\r\n这种方式不是js特有的，其他的编程语言也有\r\nhttps://www.wikiwand.com/zh-hans/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5","createdAt":1584977475410},{"id":11335,"originId":"5e79c28758ab6717beb7c687","articleId":2379,"userId":3286,"content":"谢谢","createdAt":1585037959495},{"id":11336,"originId":"5e7341de58ab6717beb7bb14","articleId":2380,"userId":3487,"content":"![image.png](//static.cnodejs.org/FiPgBzPCQ_WOFja_xfmAtqRVWClo) 这是代码","createdAt":1584611806078},{"id":11337,"originId":"5e73526c58ab6717beb7bb48","articleId":2380,"userId":89,"content":"有这种经验的人，估计不太多，能用mongdb或mysql么","createdAt":1584616044871},{"id":11338,"originId":"5e7430cd58ab6717beb7bcd5","articleId":2381,"userId":109,"content":"切换过 nodejs 32/64bit ？","createdAt":1584672973790},{"id":11339,"originId":"5e70a30d45fcf75ee50e4d59","articleId":2386,"userId":3491,"content":"应用在服务端的，请大神赐教？","createdAt":1584440077031},{"id":11340,"originId":"5e6f376a45fcf75ee50e4abc","articleId":2387,"userId":358,"content":"构建工具版本不一致。\r\n\r\n一般是在构建机上统一构建，本地经常更新依赖，服务器上不构建。","createdAt":1584346986196},{"id":11341,"originId":"5e6f380389a5c35f11e32d0d","articleId":2387,"userId":3492,"content":"版本都是12的。这个都是确认过的。只是本地编译好放到服务器上可以显示，用服务器Jenkins或者是手动编译出来是白屏。本来这个以前是没有问题的。只是在解决兼容ios9的时候出现这个问题。","createdAt":1584347139366},{"id":11342,"originId":"5e6fa94e45fcf75ee50e4bb8","articleId":2387,"userId":1424,"content":"ios9 白屏， 很可能是 Safari不支持 es6语法，  建议用工具 转es5","createdAt":1584376142107},{"id":11343,"originId":"5e6eb33e45fcf75ee50e48da","articleId":2388,"userId":110,"content":"ORM 一天就可以上手吧。你不想用也没有问题，但是个人感觉带来的开发效率的降低和 SQL 注入漏洞的隐患，都挺大的","createdAt":1584313150449},{"id":11344,"originId":"5e6edd4789a5c35f11e32b87","articleId":2388,"userId":541,"content":"不想要就不用呗\r\n```js\r\nconst mysql = require('mysql2')\r\n```","createdAt":1584323911994},{"id":11345,"originId":"5e6edd5d89a5c35f11e32b8e","articleId":2388,"userId":545,"content":"学ts ，后端可以考虑 nest.js 或者 midwayjs，支持更好一些。  ORM 还是建议使用，做数据迁移的时候也方便  typeorm","createdAt":1584323933210},{"id":11346,"originId":"5e6f094f45fcf75ee50e4a06","articleId":2388,"userId":356,"content":"任何语言和框架都可以用原生的","createdAt":1584335183466},{"id":11347,"originId":"5e6cb7e53cadb020b9160fcb","articleId":2389,"userId":31,"content":"![image.png](//static.cnodejs.org/Fkz3nDVmGLKGdFDqPmWstvORkguM)\r\n\r\n你能看到的 http , stream, fs 和绝大多数模块都用到这个 b ","createdAt":1584183269567},{"id":11348,"originId":"5e6ed80d89a5c35f11e32b6f","articleId":2389,"userId":1011,"content":"深入浅出NodeJS这本书解释的很详细\r\n整个NodeJS的核心就是eventLoop\r\n","createdAt":1584322573691},{"id":11349,"originId":"5e6ee47f45fcf75ee50e494b","articleId":2389,"userId":1176,"content":"上面几位说了 events 模块在node源码中的应用，我说下在工程中的应用吧\r\n\r\nEvents 的特点是把流程打乱了，你的代码爱怎么写就怎么写。最后通过事件串起来就行。Events 适合模块(函数)之间通信用，但是不适合做流程控制。\r\n\r\n我原来写过一个 npm 库，是 redis 做消息队列的应用，里面就用到了事件，原来考虑时也想通过callback/promise 等实现，却发现这些方式实现，代码会冗余不少。\r\n考虑过后通过 events 实现。\r\n\t\t\r\n贴一下地址 [git地址](https://github.com/zhangwinning/ioredisMq)。感觉不错，欢迎 star 。。。\r\n","createdAt":1584325759507},{"id":11350,"originId":"5e5630c71225c9423dcdb081","articleId":2391,"userId":3,"content":"没用过，为什么不用egg.js呢？","createdAt":1582706887935},{"id":11351,"originId":"5e5677a5267721420912c864","articleId":2391,"userId":419,"content":"doracms","createdAt":1582725029917},{"id":11352,"originId":"5e5755951225c9423dcdb1e1","articleId":2391,"userId":3495,"content":"主要是基于 MongoDB 不一定适用所有情况，但是基本的功能都够，定义完 Model 就直接出基本界面还是比完全开发要方便一些的。","createdAt":1582781845955},{"id":11353,"originId":"5e68b2d323bc9e20b4e33558","articleId":2391,"userId":110,"content":"建议用 strapi。个人感觉优于 Keystone","createdAt":1583919827161},{"id":11354,"originId":"5e683edd3cadb020b91606af","articleId":2392,"userId":59,"content":"先转成拼音搜索","createdAt":1583890141560},{"id":11355,"originId":"5e68448323bc9e20b4e332d5","articleId":2392,"userId":1011,"content":"这个是自然语言处理的部分了\r\n\r\nhttps://ai.baidu.com/tech/nlp/text_corrector\r\nhttps://wiki.open.qq.com/wiki/%E7%BA%A0%E9%94%99API\r\nhttps://cloud.tencent.com/document/product/271/35509","createdAt":1583891587737},{"id":11356,"originId":"5e6857b723bc9e20b4e33346","articleId":2392,"userId":3064,"content":"我给百度提交过工单， 单词是不能识别的，只能识别短文体","createdAt":1583896503185},{"id":11357,"originId":"5e68890c3cadb020b916080d","articleId":2392,"userId":3064,"content":"根据\r\nhttps://github.com/breeswish/pinyinlite/blob/master/examples/fuzzy-pinyin-search/search.js\r\n转成拼音实现了同音纠错和拼音搜索，缺字少字不能实现\r\n","createdAt":1583909132027},{"id":11358,"originId":"5e63c53823bc9e20b4e328e2","articleId":2394,"userId":1424,"content":"记录过期时间  起效时间， ","createdAt":1583596856915},{"id":11359,"originId":"5e64b9ce3cadb020b915fde4","articleId":2394,"userId":109,"content":"在数据库层面，pgsql 有 range 字段类型，可能有用。","createdAt":1583659470103},{"id":11360,"originId":"5e5fc555b5a36940fe1cedd7","articleId":2395,"userId":90,"content":"在WiredTiger引擎下，3.6版本以前的是看下面两个条件哪个条件先满足触发\r\n1. 时间间隔60s\r\n2. journal data 大小达到2GB\r\n\r\n3.6版本以后只关注上述条件1满足就触发\r\n对于你说的丢失60s数据，我认为不存在，可以参考The now-durable data act as a checkpoint in the data files  然和和 durable的介绍做比对 https://docs.mongodb.com/manual/reference/glossary/#term-durable     就算此时crash or shutdown，也不影响，因为数据已经写入进服务器的journal data 也就是日志文件里面了，重启后，mongod服务器也会从服务器的journal data 恢复，不然这样的设计不是有问题不，就怕此时的写操作没有写到服务器日志，而且下面也提到了4.0版本以后不允许去设置关闭journal data 。因此journal data 就非常重要了，合理的关闭mongod服务器也就很重要了 见https://docs.mongodb.com/manual/core/journaling/#journal-process","createdAt":1583334741674},{"id":11361,"originId":"5e6090e63cadb020b915f820","articleId":2395,"userId":356,"content":"[@jxycbjhc](/user/jxycbjhc) 感谢，也就是我理解的是正确的，是每60秒会把等待执行的命令写进journal data，如果特殊情况来不及执行最多会丢失最后60秒，可以这么理解吗","createdAt":1583386854261},{"id":11362,"originId":"5e6091363cadb020b915f828","articleId":2395,"userId":356,"content":"[@jxycbjhc](/user/jxycbjhc) 还有另外一种理解是在持续的写journal data，但是是60秒把内存中完成的写的数据同步到数据库，如果journal data关闭，那最多丢失60秒的数据","createdAt":1583386934146},{"id":11363,"originId":"5e60b5d63cadb020b915f88b","articleId":2395,"userId":90,"content":"[@TimLiu1](/user/TimLiu1) 不会丢失60s, 参考 https://docs.mongodb.com/manual/core/journaling/#journal-process\r\n   WiredTiger syncs the buffered journal records to disk upon any of the following conditions 里有个 At every 100 milliseconds ，也即是100毫秒\r\n还有下面的important 提示  In between write operations, while the journal records remain in the WiredTiger buffers, updates can be lost following a hard shutdown of mongod. 也即是在两次写之间，如果非正常关闭mongod是会有数据不一致的，也就是后一个写操作没有生效，这个情况也即是单机下面会出现，其他的几种情况都会主动把在内存中的 journal records同步到硬盘里。你说的关闭journal data 不一定就是60s影响,就是数据只能恢复到上个有journal data的checkpoint，由于没有journal data 重放就不能进行了。","createdAt":1583396310132},{"id":11364,"originId":"5e6101e73cadb020b915f90a","articleId":2395,"userId":356,"content":"[@jxycbjhc](/user/jxycbjhc) 感谢你的回答，学到一些新的东西，那每个60s做一个snapshot是做了一个什么动作，我感觉你还是没有完全解决我的疑惑","createdAt":1583415783354},{"id":11365,"originId":"5e612b823cadb020b915f97e","articleId":2395,"userId":90,"content":"[@TimLiu1](/user/TimLiu1)  https://docs.mongodb.com/manual/core/backups/ 提到 了To get a correct snapshot of a running mongod process, you must have journaling enabled and the journal must reside on the same logical volume as the other MongoDB data files. Without journaling enabled, there is no guarantee that the snapshot will be consistent or valid. 快照依赖于你的操作系统,mongodb是在快照上面设置checkpoint,也即是需要有journal data ，这个解释应该就清楚了。","createdAt":1583426434367},{"id":11366,"originId":"5e63a6593cadb020b915fd3b","articleId":2395,"userId":356,"content":"[@jxycbjhc](/user/jxycbjhc) 这段话说snapshot依赖于journal data,但是并没有说snapshot到底是什么\r\n","createdAt":1583588953450},{"id":11367,"originId":"5e63b0c023bc9e20b4e328c4","articleId":2395,"userId":90,"content":"[@TimLiu1](/user/TimLiu1) Snapshots work by creating pointers between the live data and a special snapshot volume. These pointers are theoretically equivalent to “hard links.” As the working data diverges from the snapshot, the snapshot process uses a copy-on-write strategy. As a result, the snapshot only stores modified data我意思就是mongodb的快照也是类似这玩意，用的是写时复制参考   https://baijiahao.baidu.com/s?id=1636278070863441309&wfr=spider&for=pc，我倒是觉得一看这个 snapshot就是文件系统那一套。","createdAt":1583591616810},{"id":11368,"originId":"5e5b4463a72b853f100452fa","articleId":2397,"userId":545,"content":"参见：https://docs.nestjs.cn/6/controllers?id=%e8%b5%84%e6%ba%90\r\n建议先通读文档","createdAt":1583039587151},{"id":11369,"originId":"5e5b4be3b5a36940fe1ce5aa","articleId":2397,"userId":3383,"content":"[@zuohuadong](/user/zuohuadong) 谢谢,明白了","createdAt":1583041507251},{"id":11370,"originId":"5e61e87c23bc9e20b4e32681","articleId":2397,"userId":1079,"content":"我的学习记录，希望能帮到你。https://jaylin1011.gitee.io/readme/nestjs/","createdAt":1583474812535},{"id":11371,"originId":"5e5c74a7b5a36940fe1ce756","articleId":2399,"userId":1424,"content":"pm2 logs 查看了？  \r\n\r\n如果是Linux  再用 dmesg，查看系统是否有异常","createdAt":1583117479839},{"id":11372,"originId":"5e5c7d00b5a36940fe1ce766","articleId":2399,"userId":1547,"content":"[@luojiyin1987](/user/luojiyin1987) 没有error 日志 只有输出日志","createdAt":1583119616182},{"id":11373,"originId":"5e5e2263a72b853f10045798","articleId":2399,"userId":3498,"content":"看下pm2自身日志，一般在~/.pm2/pm2.log文件","createdAt":1583227491078},{"id":11374,"originId":"5e6091b63cadb020b915f835","articleId":2399,"userId":356,"content":"我觉得你提这个问题应该说明你是怎么存放日志的，然后怎么查看日志的","createdAt":1583387062914},{"id":11375,"originId":"5e5f1fcea72b853f1004592d","articleId":2400,"userId":135,"content":"如果是要停止整个程序的话,直接用 process.exit() 不行吗?","createdAt":1583292366177},{"id":11376,"originId":"5e5f67d9a72b853f100459f8","articleId":2400,"userId":1504,"content":"[@abiuDoIT](/user/abiuDoIT) 试了一下,好像不行啊!如果使用process.exit() ,整个服务就停止,只是想结束当次的请求,不能整个服务都停止了啊,那样一个人调用了监听事件,服务器停止了,其他人都用不了,还得去启动服务器!!还有别的办法么???太闹心了,就卡在这","createdAt":1583310809810},{"id":11377,"originId":"5e5f6eddb5a36940fe1cecd8","articleId":2400,"userId":135,"content":"[@iori2882](/user/iori2882) \r\n只想退出当前函数的话,那就在后续代码里面加判断呗,  设个变量,监听事件里面 改一下这个变量的值, 后续代码判断这个变量.\r\n\r\n","createdAt":1583312605060},{"id":11378,"originId":"5e5f7c0cb5a36940fe1cecef","articleId":2400,"userId":570,"content":"监听改轮询试试","createdAt":1583315980097},{"id":11379,"originId":"5e5fe79a23bc9e20b4e32344","articleId":2400,"userId":1504,"content":"[@abiuDoIT](/user/abiuDoIT) 嗯 十分感谢,我试试.......好像监听里的代码和外面的代码是并行执行的,有可能监听里的变量没改变值,外面的判断变量值的代码就过去了","createdAt":1583343514116},{"id":11380,"originId":"5e5fe7c123bc9e20b4e32348","articleId":2400,"userId":1504,"content":"感谢回复,轮询没接触过,我去查查资料","createdAt":1583343553769},{"id":11381,"originId":"5e4b9a8b267721420912bc2c","articleId":2401,"userId":3463,"content":"hosts 好使！\r\n\r\n```text\r\n# GitHub Start \r\n192.30.253.112    \tgithub.com \r\n192.30.253.119    \tgist.github.com\r\n151.101.184.133   \tassets-cdn.github.com\r\n151.101.184.133   \traw.githubusercontent.com\r\n151.101.184.133   \tgist.githubusercontent.com\r\n151.101.184.133   \tcloud.githubusercontent.com\r\n151.101.184.133    camo.githubusercontent.com\r\n151.101.184.133    avatars0.githubusercontent.com\r\n151.101.184.133    avatars1.githubusercontent.com\r\n151.101.184.133    avatars2.githubusercontent.com\r\n151.101.184.133    avatars3.githubusercontent.com\r\n151.101.184.133    avatars4.githubusercontent.com\r\n151.101.184.133    avatars5.githubusercontent.com\r\n151.101.184.133    avatars6.githubusercontent.com\r\n151.101.184.133    avatars7.githubusercontent.com\r\n151.101.184.133    avatars8.githubusercontent.com\r\n# GitHub End\r\n```","createdAt":1582013067901},{"id":11382,"originId":"5e4ba3781225c9423dcda565","articleId":2401,"userId":135,"content":"[@djyuning](/user/djyuning) 好方法哈哈哈哈 可以了 \r\n为啥dns解析出来的不是这些可用的ip啊😅","createdAt":1582015352676},{"id":11383,"originId":"5e571730267721420912c8cd","articleId":2401,"userId":545,"content":"[@abiuDoIT](/user/abiuDoIT) 去问GFW防火墙~  可以说用亚马逊s3 存储的都被封了","createdAt":1582765872914},{"id":11384,"originId":"5e5c66a5b5a36940fe1ce72a","articleId":2401,"userId":383,"content":"[@abiuDoIT](/user/abiuDoIT) DNS投毒/污染","createdAt":1583113893497},{"id":11385,"originId":"5e5a23efa72b853f100451e0","articleId":2402,"userId":751,"content":"可以看看 [protobuf.js](https://github.com/protobufjs/protobuf.js) 的 [example](https://github.com/protobufjs/protobuf.js/tree/master/examples)\r\n生成代码可以看这里 [command-line](https://github.com/protobufjs/protobuf.js#command-line)\r\n我的生成代码命令 `yarn gen:pb` 像这样(因为用到了 `tee` 命令和 `pipe`只能在类`linux`的命令行里跑):\r\n```json\r\n{\r\n  \"scripts\": {\r\n    \"gen:pb\": \"pbjs -t static-module -w commonjs $(node -pe \\\"require('glob').sync('protos/**/*.proto').join(' ')\\\") | tee core_pb.js | pbts -o core_pb.d.ts -\"\r\n  },\r\n}\r\n```\r\n","createdAt":1582965743822},{"id":11386,"originId":"5e57552b1225c9423dcdb1d9","articleId":2404,"userId":3495,"content":"~~~javascript\r\n// 原 app\r\nconst app = express();\r\n// 新 app\r\nconst server = express();\r\nserver.use('/b', app);\r\n~~~","createdAt":1582781739019},{"id":11387,"originId":"5e4a3337267721420912ba86","articleId":2407,"userId":21,"content":"这些分析对找问题基本没用。首先应该找下大方向，首先在docker记录CPU使用率，内存使用量，再看看数据库读写时间，看看是哪个环节卡住了呗","createdAt":1581921079966},{"id":11388,"originId":"5e54e8dc267721420912c61e","articleId":2407,"userId":3501,"content":"[@zy445566](/user/zy445566)  容器的CPU使用率非常高，并发测试的时候达到200%，内存使用量却很低。无论是有没有数据库读写的接口，在ab压测结果分析中，epollpwait占了最久的时间\r\n![压测结果.png](//static.cnodejs.org/Fn4vjbvC5VX-1N3oq-Yaf5Bxi-BK)，但我在接口中并没有进行任何IO操作啊","createdAt":1582622940683},{"id":11389,"originId":"5e550d9c1225c9423dcdaf1b","articleId":2407,"userId":21,"content":"如果是CPU飙，那导出火焰图看看哪个方法拖慢了，优化下那个方法的算法或看看是否有大循环呗。但是如果只是单纯压测导致CPU高，那就没什么意义了，那扩扩机子，多开或伸缩容器负载好了","createdAt":1582632348454},{"id":11390,"originId":"5e548d3c1225c9423dcdae31","articleId":2408,"userId":261,"content":"因为 `2.7.0` 之后文件名字改了呀，你看一下 `node_modules/loader-builder/bin/` 目录下不就清楚了。再说了报错不是写的很清楚：No such file or directory。","createdAt":1582599484973},{"id":11391,"originId":"5e54b6f41225c9423dcdae65","articleId":2408,"userId":3502,"content":"[@helloyou2012](/user/helloyou2012) 多谢大佬，果真如此！我把版本改回2.4.1看了下，原来的名字真的没加.js，有点小坑我一下想当然了","createdAt":1582610164832},{"id":11392,"originId":"5e53917a1225c9423dcdad28","articleId":2409,"userId":3132,"content":"babel不能import css\r\nbabel只能compile js\r\n\r\n你的代码很可能是写在webpack环境下的，因为通过css-loader，js里可以import css","createdAt":1582535034098},{"id":11393,"originId":"59c21195d7cbefc51196453d","articleId":2411,"userId":3504,"content":"最近需要一台服务器进行测试，就搜集了下服务器体验资源，分享给大家\r\n\r\n快云1元体验1个月服务器\r\n\r\nhttp://host.zzidc.com/ad.html\r\n\r\n景安1元买一年主机\r\n\r\nhttp://host.zzidc.com/tongji/vhost.html\r\n\r\n阿里云免费体验馆\r\n\r\nhttps://free.aliyun.com/\r\n\r\n尊云免费体验\r\n\r\nhttp://www.zun.com/tiyan.html\r\n\r\n金山云免费体验\r\n\r\nhttps://activity.ksyun.com/1703/index.html\r\n\r\n腾讯云免费体验\r\n\r\nhttps://www.qcloud.com/act/free\r\n\r\n华为云免费体验套餐\r\n\r\nhttp://activity.hwclouds.com/newuser_trial/index.html\r\n\r\n亚马逊免费体验：https://amazonaws-china.com/cn/events/cloud/","createdAt":1505890709678},{"id":11394,"originId":"59c387bad7cbefc5119645b9","articleId":2411,"userId":3504,"content":"本帖欢迎大家更新汇总，对大家测试有帮助","createdAt":1505986490480},{"id":11395,"originId":"59c3b7ce8812ce51127a90ce","articleId":2411,"userId":2004,"content":"https://github.com/ripienaar/free-for-dev#paas","createdAt":1505998798503},{"id":11396,"originId":"59c4d69e8812ce51127a9129","articleId":2411,"userId":3504,"content":"大家跟帖啊，有好资源要分享出来","createdAt":1506072222678},{"id":11397,"originId":"59c65dbae7d9a031127eae62","articleId":2411,"userId":363,"content":"pivotal这个免费的web服务，不用实名认证即可编写自己的网站，\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1506172346301},{"id":11398,"originId":"59c8c679c5ddc93d29364f75","articleId":2411,"userId":3504,"content":"666","createdAt":1506330233077},{"id":11399,"originId":"59c8de78e7d9a031127eaee1","articleId":2411,"userId":3505,"content":"now 部署一些小的 nodejs 应用不错。有免费的。\n\nhttps://zeit.co/now\n","createdAt":1506336376736},{"id":11400,"originId":"59cb83d8b1ce413310c496d4","articleId":2411,"userId":3504,"content":"[@Lizhooh](/user/Lizhooh) 好的  多谢分享","createdAt":1506509784200},{"id":11401,"originId":"59ccaacc0cd3ddc711156953","articleId":2411,"userId":3504,"content":"[@zswnew](/user/zswnew) 嗯，好的 多谢","createdAt":1506585292838},{"id":11402,"originId":"59e42c7e20a1a3647d72ac58","articleId":2411,"userId":3504,"content":"不错，支持一下","createdAt":1508125822090},{"id":11403,"originId":"59e5a4fdeab6a65368740218","articleId":2411,"userId":3504,"content":"[@ianchn](/user/ianchn) 不错 多谢帮顶","createdAt":1508222205503},{"id":11404,"originId":"59e5b31161932717683d2438","articleId":2411,"userId":36,"content":"厉害了","createdAt":1508225809736},{"id":11405,"originId":"59e87d2fe9a9601c41e7b359","articleId":2411,"userId":3504,"content":"[@dengnan123](/user/dengnan123) 好东西大家一块分享","createdAt":1508408623408},{"id":11406,"originId":"59ec70db70ea7fb830369ddb","articleId":2411,"userId":3504,"content":"666","createdAt":1508667611872},{"id":11407,"originId":"59edaae7b85d0ad9450a15fd","articleId":2411,"userId":3504,"content":"不错，多谢支持","createdAt":1508748007419},{"id":11408,"originId":"59f2ecc0629b1ae374eca991","articleId":2411,"userId":3504,"content":"[@xiaodu2017](/user/xiaodu2017) 666","createdAt":1509092544647},{"id":11409,"originId":"59f9750a3d0ac25902565262","articleId":2411,"userId":3504,"content":"嗯  最近双11的活动不少","createdAt":1509520650140},{"id":11410,"originId":"5a02ee405eebf62d4d86fd4e","articleId":2411,"userId":3504,"content":"[@dengnan123](/user/dengnan123) 为大家服务","createdAt":1510141504178},{"id":11411,"originId":"5a07b091a57c17282e1205f6","articleId":2411,"userId":3504,"content":"不错","createdAt":1510453393214},{"id":11412,"originId":"5a07f948a57c17282e120600","articleId":2411,"userId":1975,"content":"不错不错啊","createdAt":1510472008270},{"id":11413,"originId":"5a0ede45a6731ee928cc6b89","articleId":2411,"userId":3504,"content":"[@fruit-memory](/user/fruit-memory) 多谢支持啦啊","createdAt":1510923845686},{"id":11414,"originId":"5a13ed7d476ea1170b7339d5","articleId":2411,"userId":3504,"content":"[@fruit-memory](/user/fruit-memory) 嗯啊","createdAt":1511255421257},{"id":11415,"originId":"5a156c9a43efb10d09ef89ec","articleId":2411,"userId":3504,"content":"[@Lizhooh](/user/Lizhooh) 是的 有免费的","createdAt":1511353498438},{"id":11416,"originId":"5a1a82486190c8912ebacd77","articleId":2411,"userId":3504,"content":"多谢支持啊","createdAt":1511686728937},{"id":11417,"originId":"5a2e4034d92f2f5b185acd82","articleId":2411,"userId":3504,"content":"好的，多谢支持","createdAt":1512980532361},{"id":11418,"originId":"5a2e7be6f15b4f306d2f0246","articleId":2411,"userId":111,"content":"可以番墙吗？","createdAt":1512995814340},{"id":11419,"originId":"5e522d221225c9423dcdab71","articleId":2411,"userId":3506,"content":"国外的云计算巨头都为新注册用户提供免费实例的。[VPS推荐](https://hostmama.cc)","createdAt":1582443810602},{"id":11420,"originId":"5e522c8c1225c9423dcdab6b","articleId":2412,"userId":3506,"content":"国外的阿里云，腾讯云，国外的Azure，GCP，AWS在香港都有节点，[香港VPS推荐](https://hostmama.cc/best-hongkong-vps)，如果是拿来建站，轻量应用服务器的性价比应该是最高的。","createdAt":1582443660168},{"id":11421,"originId":"5e4e67861225c9423dcda8bb","articleId":2413,"userId":3508,"content":"自问自答：本质上是因为 MongoConn.Schema.Types 里面没有定义 Long，实际上 mongoose-long 已经完成了他的工作。\r\n\r\n下午再找原因的时候看了几篇还不错的 ts 相关的文章，也推荐下：\r\nhttps://jkchao.github.io/typescript-book-chinese/\r\nhttps://ts.xcatliu.com/basics/declaration-files","createdAt":1582196614009},{"id":11422,"originId":"5e4e416d267721420912bf0b","articleId":2414,"userId":99,"content":"cnode已经有接口了哦  用vue重构一下就可以了","createdAt":1582186861340},{"id":11423,"originId":"5e4b8f94267721420912bbf2","articleId":2415,"userId":89,"content":"知耻而后勇，未必不是好事。工作近四年还是打深度会更好一些。多做一些sideproject和开源比较好。","createdAt":1582010260630},{"id":11424,"originId":"5e4b919e267721420912bbf9","articleId":2415,"userId":31,"content":"我也咪蒙了....\r\n各位好: 20年毕业，工作近10年，拿着很多的工资，最近还涨薪了…比较迷茫，公司业务很有挑战性，事情很多，想的也超多… 知道学好node.js是不够的, 换个技术栈也是分分钟的.  看招聘需求，对比下自己，发现他们大部分本质也只是crud，目前想低调一下，是重新学习摸鱼划水技术，还是接触一些脊椎病康复指南? 大家有什么好的建议么？","createdAt":1582010782691},{"id":11425,"originId":"5e4baf53267721420912bc7d","articleId":2415,"userId":1516,"content":"自己多花时间学习+练手，尤其后者。\r\n我从来没有见到任何一个做技术的，能单纯靠工作上分配的任务达到技术很强的。","createdAt":1582018387566},{"id":11426,"originId":"5e4c0444267721420912bcda","articleId":2415,"userId":90,"content":"本来想说老铁，我太难了，最近压力有点大。。。  1.进到离钱最近的业务线去  2.做一个能给大家带来实际金钱收益的人(这个目前我只遇到一个)。","createdAt":1582040132100},{"id":11427,"originId":"5e4ca421267721420912bd16","articleId":2415,"userId":21,"content":"如果有自己时间，其实降薪不要紧。只要有自己时间就可以开发出很多有意义的项目，像我现在就在开发一套自己的区块链系统，现在核心模块(包括挖矿，钱包,纯JS的ecdsa-secp256k1算法)和存储层和P2P模块都基本写完了，现在就在写UI和web在线挖矿的功能。我就觉得很充实，一点都不迷茫，甚至写的时候还有一丝丝成就感。所以如果自己有时间就赶快找点有成就感的事情来做做吧，如果一点自己的时间都没有，那你就要好好考虑了，毕竟**工**字不出头。","createdAt":1582081057703},{"id":11428,"originId":"5e4e3cb0267721420912bef7","articleId":2415,"userId":99,"content":"多看看招聘信息 看看市场需求  搞IT就得一直学 没办法","createdAt":1582185648399},{"id":11429,"originId":"5e4d3eae1225c9423dcda787","articleId":2416,"userId":11,"content":"根据你的习惯或者团队规范要求来，这里分号加不加都有说法。实在不行写个 lint 规则适配团队规范，你自己开发的时候按照喜好来，提交前 run lint 一下就好了","createdAt":1582120622023},{"id":11430,"originId":"5e4dedad267721420912be7c","articleId":2416,"userId":117,"content":"所有代码都加分号,有时会出现莫名其妙的问题\r\n```javascript\r\n(() => {\r\n    console.log(1)\r\n})()\r\n\r\n(() => {\r\n    console.log(2)\r\n})()\r\n```","createdAt":1582165421615},{"id":11431,"originId":"5e4df4a21225c9423dcda810","articleId":2416,"userId":3,"content":"[@chenkai0520](/user/chenkai0520) 但是 egg.js 官方就推荐加上 ; 啊","createdAt":1582167202147},{"id":11432,"originId":"5e4e258f267721420912beb7","articleId":2416,"userId":3030,"content":"看接盘的项目配置的lint规则。","createdAt":1582179727070},{"id":11433,"originId":"55edb05711a6603a102a8edf","articleId":2418,"userId":1632,"content":"body的话直接返回的是utf8格式（request默认的编码）的二进制图片数据，而chunk则是流形式的二进制数据，按照编码方式的话用utf8编码后的长度自然比源二进制数据长，如果要相等则需要设置对应的编码方式。","createdAt":1441640535894},{"id":11434,"originId":"55edb4a1ff10eb35236ae751","articleId":2418,"userId":18,"content":"你这用法问题有点多\r\n\r\n1. get 然后取 body 的那个用法，取到的 body 不是二进制形式的，可能被强行转换成 utf-8 了。这时候图片面目全非。\r\n2. on('data') 的那个用法，content 是不能直接 + data 的，因为使用了 + 的话，Buffer 会被隐式转换成 utf-8 字符串。又面目全非了。看看这个：https://github.com/JacksonTian/bufferhelper\r\n3. 建议按照 1 的思路，想办法直接取到一个 buffer 的结果。\r\n\r\n你可以试试这个：https://github.com/alsotang/superagentparse ，跟 superagent 配合使用。","createdAt":1441641633555},{"id":11435,"originId":"55ee44db0adb26b756c725fb","articleId":2418,"userId":3512,"content":"[@joney-pinkman](/user/joney-pinkman) \r\n\r\n谢谢啦，你说的是对的。默认的body确实是utf-8格式\r\n\r\n我设置了一下encoding，如下\r\n```\r\nrequest.get({\r\n\turl: url,\r\n\tencoding: null\r\n})\r\n```\r\n这个时候，body就是图片数据了。\r\n按照request官方的说法是：If null, the body is returned as a Buffer。　如果设置encoding为null，那么返回的response就是buffer。\r\n\r\n再次感谢。","createdAt":1441678555963},{"id":11436,"originId":"55ee48cdb7e2763e0e00eaaf","articleId":2418,"userId":3512,"content":"[@alsotang](/user/alsotang) \r\n\r\n谢谢回复。 大家都很热心啊。:)\r\n\r\n1. 官方说到response body默认是utf-8,除非显示指定options中的encoding。\r\n2. 事实上我幸运的的没有遇到这个问题，直接用 +data没有出错。不知道是不是遇到body中包含中文才会引起这样的问题。 我看了你的文章，\r\n    [小心data事件里的chunk拼接](https://cnodejs.org/topic/4faf65852e8fb5bc65113403)。 我很同意你的观点，我们最好不要直接用 +data 这样的方式，无论任何时候。\r\n3. 我设定了encoding为null，获得到的body就是正常的图片数据了。谢谢。\r\n\r\n你提到的两个库，公司刚好正在做一个涉及到中文的项目，我会认真学习一下。 \r\n\r\n谢谢。\r\n\t","createdAt":1441679565600},{"id":11437,"originId":"5876ec1f9f92195c1bf9fe7a","articleId":2418,"userId":3513,"content":"[@dmoneh](/user/dmoneh) 太感谢了，昨天找弄了一晚，现在用你提供的方法好了，感谢大家的分享！！!","createdAt":1484188703362},{"id":11438,"originId":"5876f1062967eeb01aafe6a6","articleId":2418,"userId":89,"content":"我也补一个坑吧，https://github.com/i5ting/testchunks  专门用于测试chunk的","createdAt":1484189958564},{"id":11439,"originId":"5e4bff6e1225c9423dcda5f9","articleId":2418,"userId":3514,"content":"多谢","createdAt":1582038894860},{"id":11440,"originId":"5e2127022677214209129d71","articleId":2419,"userId":33,"content":"一直盯着内存，哎，受不起啊，，，，","createdAt":1579230978112},{"id":11441,"originId":"5e4a92911225c9423dcda43b","articleId":2419,"userId":1424,"content":"https://docs.microsoft.com/zh-cn/sysinternals/downloads/procmon  \r\n","createdAt":1581945489437},{"id":11442,"originId":"5e4bead41225c9423dcda5c3","articleId":2419,"userId":21,"content":"heapdump难道win不能用么？","createdAt":1582033620162},{"id":11443,"originId":"5e4a4f38267721420912babb","articleId":2420,"userId":21,"content":"让后台返回long数据用字符串，前台接收后用BigInt去接字符串","createdAt":1581928248240},{"id":11444,"originId":"5e4a7b8d267721420912bafc","articleId":2420,"userId":109,"content":"所有非int4类型数字（int8, numeric，long，float， double， bigint 等）在传输时都应该以string格式存储。","createdAt":1581939597389},{"id":11445,"originId":"5e4a320d1225c9423dcda38e","articleId":2421,"userId":545,"content":"nvm 安装可以淘宝加速 https://www.jianshu.com/p/bc56e70303f7","createdAt":1581920781046},{"id":11446,"originId":"5e4a7779267721420912baf5","articleId":2421,"userId":109,"content":"```sh\r\ncat >> ~/.npmrc <<EOF\r\nregistry=https://registry.npm.taobao.org/\r\ndisturl=https://npm.taobao.org/dist\r\nhome=https://npm.taobao.org\r\nstrict-ssl=true\r\nEOF\r\ncat ~/.npmrc\r\n\r\nnpm i -g nrm \r\nnrm add taobao  https://registry.npm.taobao.org/\r\nnvm use taobao\r\n```","createdAt":1581938553928},{"id":11447,"originId":"58ed9c3fa92d341e48cfe79a","articleId":2422,"userId":1507,"content":"https://github.com/Binaryify/NeteaseCloudMusicApi\r\n这个算吗","createdAt":1491967039212},{"id":11448,"originId":"58eda49ea92d341e48cfe7a3","articleId":2422,"userId":3516,"content":"[@Binaryify](/user/Binaryify)  谢谢，还没看，先star顶一个再说","createdAt":1491969182873},{"id":11449,"originId":"58eda6cb49056f03483477e5","articleId":2422,"userId":1507,"content":"[@shf-nice](/user/shf-nice) 谢谢","createdAt":1491969739003},{"id":11450,"originId":"58edb5c8c749f63d48fe93d7","articleId":2422,"userId":434,"content":"https://github.com/open-node/open-rest\r\nhttps://github.com/open-node/open-rest-helper-rest\r\n全部采用es6/es7语法，使用 eslint airbnb 规范。\r\n暂时没有用到 async/await 因为我的框架已经很好的解决了异步书写的问题。欢迎star","createdAt":1491973576285},{"id":11451,"originId":"58edbddc49056f03483477ec","articleId":2422,"userId":1499,"content":"推荐koahub.js\n\n来自 [KoaHub.js](https://github.com/koahubjs/koahub)","createdAt":1491975644140},{"id":11452,"originId":"58edcb37c749f63d48fe93e1","articleId":2422,"userId":2114,"content":" [https://github.com/linkenliu/baozoumanhua_api.git](https://github.com/linkenliu/baozoumanhua_api.git)","createdAt":1491979063540},{"id":11453,"originId":"58edcd8249056f03483477fd","articleId":2422,"userId":3517,"content":"https://github.com/jizhuofeng/redis-monitor","createdAt":1491979650413},{"id":11454,"originId":"58edd63349056f0348347804","articleId":2422,"userId":743,"content":"nodejs做的企业应用系统,实际在用的 https://github.com/sail-sail/qv","createdAt":1491981875540},{"id":11455,"originId":"58ede7a549056f034834780e","articleId":2422,"userId":139,"content":"我的东西,自己做的第一个网站，完全是摸石头过河\r\n使用了async await\r\n数据库ORM是sequelise\r\n [地址](https://github.com/hezhongfeng/Koa2-Blog)","createdAt":1491986341677},{"id":11456,"originId":"58edfad4e54976e847e09fb7","articleId":2422,"userId":3516,"content":"[@stonephp](/user/stonephp) 有eslint最好了，谢谢分享，两个项目都已star","createdAt":1491991252913},{"id":11457,"originId":"58edfbb7a92d341e48cfe7d0","articleId":2422,"userId":1126,"content":"https://github.com/kelvv/aliyun-sms-node 这个算吗","createdAt":1491991479217},{"id":11458,"originId":"58edfbd4a92d341e48cfe7d2","articleId":2422,"userId":3516,"content":"[@linkenliu](/user/linkenliu) 谢谢分享，已star","createdAt":1491991508438},{"id":11459,"originId":"58edfcf849056f034834781f","articleId":2422,"userId":3516,"content":"谢谢大家的分享，只要贴出代码的我都会star表示支持","createdAt":1491991800039},{"id":11460,"originId":"58edfe5aa92d341e48cfe7d6","articleId":2422,"userId":277,"content":"mark\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1491992154974},{"id":11461,"originId":"58eeacf8c749f63d48fe940c","articleId":2422,"userId":579,"content":"async await是啥？我这有[回调地狱终结者](https://github.com/hezedu/sas)","createdAt":1492036856527},{"id":11462,"originId":"58eef9d049056f034834786d","articleId":2422,"userId":1774,"content":"这个应该对你有帮助 https://github.com/adrianObel/koa2-api-boilerplate \r\n我搞的项目都是照这个改的\r\nhttps://github.com/dlyt/YCool_Server\r\n","createdAt":1492056528387},{"id":11463,"originId":"58ef34bee54976e847e0a00e","articleId":2422,"userId":434,"content":"[@shf-nice](/user/shf-nice) 多谢","createdAt":1492071614439},{"id":11464,"originId":"58f741dcbbaf2f3f569be044","articleId":2422,"userId":3518,"content":"https://github.com/linguowei/myblog 一个博客系统，可以看看","createdAt":1492599260687},{"id":11465,"originId":"58f801dfbbaf2f3f569be05b","articleId":2422,"userId":418,"content":"https://github.com/lemonce/svg-captcha  验证码生成","createdAt":1492648415203},{"id":11466,"originId":"58f81d099116585a56e207b6","articleId":2422,"userId":3519,"content":"[JSer News](/topic/58f70ea4bbaf2f3f569be025) 有用到 async/await， 关于 Redis 的异步 I/O 都是这种写法，有兴趣看看 ","createdAt":1492655369915},{"id":11467,"originId":"58f81f829116585a56e207b9","articleId":2422,"userId":1701,"content":"https://github.com/ericjjj/pm86","createdAt":1492656002264},{"id":11468,"originId":"594dd8b39c7ee4c245b6b2fb","articleId":2422,"userId":1071,"content":"为了团队前端和后端能够更快的形成生产力，我们开发了ThinkKoa    https://github.com/thinkkoa\r\n为了隐藏数据源差异对上层应用研发的影响，我们开发了ThinkORM  https://github.com/thinkkoa/thinkorm\r\n\r\n欢迎start，也欢迎感兴趣并有能力做开源项目的同学加入","createdAt":1498273971259},{"id":11469,"originId":"594e2d3f642874f845d9fdd3","articleId":2422,"userId":3520,"content":"[https://github.com/taobataoma/meanTorrent](https://github.com/taobataoma/meanTorrent)\r\n用了async/aswit，每天都在更新新功能的pt下载系统， Mongo, Express, Angular, Node, 你值得一看，欢迎star\r\n","createdAt":1498295615661},{"id":11470,"originId":"594e7f90984e31dd458c13b1","articleId":2422,"userId":3339,"content":"[https://github.com/xiedacon/nodeclub-koa](https://github.com/xiedacon/nodeclub-koa)\r\n使用koa2重写的nodeclub，大量运用async/await，可以看看","createdAt":1498316688964},{"id":11471,"originId":"594f0b26984e31dd458c13cb","articleId":2422,"userId":1197,"content":"https://github.com/ResJay/Vue_HSapp \r\n用expense +VUE +Mongoose scoket.io写了个炉石评分应用 和在线聊天系统 \r\n对于初学者学习很容易","createdAt":1498352422167},{"id":11472,"originId":"5e4809e7267721420912b91d","articleId":2422,"userId":490,"content":"自推下我的开源项目😛\r\n\r\nmili是一个开源的社区系统，界面优雅，功能丰富。 已在米粒网得到应用，你完全可以用它来搭建自己的社区。mili的前端使用vue、iview等技术来开发，后端使用typescript、nodejs、nestjs、typeorm等技术来开发。\r\n\r\nhttps://github.com/shen100/mili","createdAt":1581779431689},{"id":11473,"originId":"5e453cea1225c9423dcda00c","articleId":2425,"userId":701,"content":"sequelize的migrations可以添加字段.我们项目中没用,都是自己写的sql来加字段","createdAt":1581595882483},{"id":11474,"originId":"5e456ef6267721420912b720","articleId":2425,"userId":90,"content":"结合 migration  [addColumn](https://sequelize.org/master/class/lib/query-interface.js~QueryInterface.html#instance-method-addColumn)","createdAt":1581608694666},{"id":11475,"originId":"5e4574f11225c9423dcda034","articleId":2425,"userId":109,"content":"难道不应该是手动操作数据库添加字段么？","createdAt":1581610225328},{"id":11476,"originId":"5e462c011225c9423dcda08e","articleId":2425,"userId":3,"content":"[@jxycbjhc](/user/jxycbjhc) 哈哈，谢谢，看来还是要英文好啊，我找的一些中文文档都没有翻译API，这个官方API英文文档好详细啊","createdAt":1581657089501},{"id":11477,"originId":"5e462c34267721420912b77c","articleId":2425,"userId":3,"content":"[@waitingsong](/user/waitingsong) 如果手动操作数据库的话，那 sequelize 就没有意义了吧？","createdAt":1581657140443},{"id":11478,"originId":"5e464388267721420912b7a9","articleId":2425,"userId":701,"content":"[@darrenliuwei](/user/darrenliuwei) sequelize是ORM库,加字段手动,但是你还需要其他CRUD的操作","createdAt":1581663112662},{"id":11479,"originId":"5e464b8b1225c9423dcda0cd","articleId":2425,"userId":3,"content":"[@a1292717155](/user/a1292717155) 如果是手动的话，那怎样进行版本管理呢？\r\n比如在做一个开源软件，我怎样让别人也知道我每次增加了哪些字段呢？然后进行升级","createdAt":1581665163693},{"id":11480,"originId":"5e464c7b1225c9423dcda0d2","articleId":2425,"userId":109,"content":"ddl.sql\r\n```\r\nALTER TABLE tb ADD COLUMN ....\r\n```\r\n文本文件自然是可以版本管理的。别人也可以重复你的操作。","createdAt":1581665403266},{"id":11481,"originId":"5e46590f1225c9423dcda0f2","articleId":2425,"userId":701,"content":"[@darrenliuwei](/user/darrenliuwei) 项目中保存一个alert-tabl.sql的文件,每次修改都会记录sql语句和修改原因","createdAt":1581668623428},{"id":11482,"originId":"5e465992267721420912b7c6","articleId":2425,"userId":3,"content":"[@waitingsong](/user/waitingsong) 好吧，这方面不是很了解。我之所以用sequelize，也是因为它比较方便版本管理才用的。\r\n\r\n不过我也很好奇那种不用ORM库，直接操作数据库的是怎么进行版本管理的。\r\n我也挺希望能直接操作数据库写SQL，这样就不用去学sequelize的语法了。\r\n\r\n不知道有没有这方面的文章介绍","createdAt":1581668754012},{"id":11483,"originId":"5e465c961225c9423dcda0fd","articleId":2425,"userId":109,"content":"[@darrenliuwei](/user/darrenliuwei) 所有orm都是坑货。等你项目足够复杂就知道了。 如果你项目肯定不会那么复杂，还不如手写sql或者使用query builder （比如knex）。","createdAt":1581669526101},{"id":11484,"originId":"5e465f34267721420912b7d3","articleId":2425,"userId":3,"content":"[@waitingsong](/user/waitingsong) 其实我也非常希望直接写SQL，但是我没有这方面的版本管理经验，我觉得ORM最大的优点就是非常非常容易实现数据库版本管理。","createdAt":1581670196081},{"id":11485,"originId":"5e4691c61225c9423dcda137","articleId":2425,"userId":109,"content":"难道你有时常回滚、前滚数据库表结构的需求么……","createdAt":1581683142929},{"id":11486,"originId":"5e4699fc1225c9423dcda140","articleId":2425,"userId":3,"content":"[@waitingsong](/user/waitingsong) 好像越说越是这么个道理，我现在开始准备用 egg-mysql 了，准备了解一下直接操作数据库的开发模式，谢谢啦","createdAt":1581685244266},{"id":11487,"originId":"5e4779381225c9423dcda1b8","articleId":2425,"userId":90,"content":"[@darrenliuwei](/user/darrenliuwei) 中文文档质量一直就不怎么样，有些写的就是为了KPI，要恰饭的啊。。。 ","createdAt":1581742392073},{"id":11488,"originId":"5e43b3771225c9423dcd9ea4","articleId":2427,"userId":268,"content":"![image.png](//static.cnodejs.org/FkXB0DUhiq9naOSlXUZyM6_ucaLV)\r\nlimit设置很大或者分页查询","createdAt":1581495159211},{"id":11489,"originId":"5e45769a1225c9423dcda04d","articleId":2427,"userId":3523,"content":"我是想要得到当前板块所有数据 下面的分页符然后显示总页数","createdAt":1581610650904},{"id":11490,"originId":"5e423802267721420912b3f4","articleId":2428,"userId":1504,"content":"麻烦大神给点建议.实在不知道怎么办?\r\n","createdAt":1581398018889},{"id":11491,"originId":"5e424908267721420912b411","articleId":2428,"userId":145,"content":"一般是通过 cookie 请求获取验证码, 如果是有浏览器(puppeteer)之类的, 可以用 canvas 保存, 但是比较麻烦.\r\n你可以想象一下, 这是你自己的系统, 你怎么把这个客户端和这次验证码的请求联系在一起?","createdAt":1581402376592},{"id":11492,"originId":"5e425645267721420912b443","articleId":2428,"userId":1504,"content":"[@zhangxh1023](/user/zhangxh1023) 谢谢你,其实一开始也想通过cookie请求,但是下面这个获取验证码地址,每次请求cookie是不变的,但是验证码是一直变化的,为什么呢?\r\nhttps://stooq.com/q/l/s/i/?1524660719310","createdAt":1581405765094},{"id":11493,"originId":"5e43e41a267721420912b60d","articleId":2428,"userId":21,"content":"重新请求验证码，验证码肯定是要变的啊。如果是自己的系统，那么这个需求真是有问题，直接开个接口不要验证码不就好了，或改原来的接口在什么情况要验证码什么情况下不要就好了","createdAt":1581507610766},{"id":11494,"originId":"5e44ba651225c9423dcd9f44","articleId":2428,"userId":145,"content":"验证码每次请求肯定是会变的. 就像你每次刷新网页重新请求验证码一样.这个不影响.","createdAt":1581562469078},{"id":11495,"originId":"5e45045f267721420912b6c4","articleId":2428,"userId":1504,"content":"[@zy445566](/user/zy445566) 明白了 谢谢你","createdAt":1581581407203},{"id":11496,"originId":"5e45046b1225c9423dcd9fa9","articleId":2428,"userId":1504,"content":"[@zhangxh1023](/user/zhangxh1023) 谢谢","createdAt":1581581419427},{"id":11497,"originId":"5e43e26a1225c9423dcd9eda","articleId":2429,"userId":21,"content":"想要异步同时发的就不要等就好了\r\n```js\r\n\r\n+  const pList = []\r\n    for(let i = 0; i < sp; i++ ){\r\n+       const p = (async function () {\r\n            let _sT = new Date().getTime();\r\n            let _start = i*limit;\r\n            let result = await _send(_start,limit);\r\n            let _eT = new Date().getTime();\r\n            console.log(result);\r\n            console.log('本轮执行完毕,耗时:' + (_eT - _sT));\r\n+      })()\r\n+     pList.push(p)\r\n    }\r\n+   await Promise.all(pList)\r\n```\r\n这样就好了，不过你这个代码问题挺大的，比如\r\n```js\r\nif(_i === max){\r\n          resolve(sendResult);\r\n  }\r\n```\r\n上面这个_i === max，只能保证最后一个运行完，而不能保证全部运行完成，还有封装Promise方法最好到最小执行单元比如在_request方法封装Promise运行时间分片就会好很多","createdAt":1581507178679},{"id":11498,"originId":"5e43d35a1225c9423dcd9ecc","articleId":2430,"userId":117,"content":"供参考:\r\n```javascript\r\nconst Koa = require('koa');\r\nconst app = new Koa();\r\n\r\napp.use(async ctx => {\r\n    ctx.body = 'Hello World';\r\n});\r\n\r\nprocess.on('SIGINT', async () => {\r\n    console.log('我要推出了');\r\n    process.exit();\r\n});\r\napp.listen(3000);\r\n```","createdAt":1581503322496},{"id":11499,"originId":"5e40c6a51225c9423dcd9b69","articleId":2433,"userId":11,"content":"所有 Node.js 应用都不建议热更新，而应该用负载均衡切换的方式来发布","createdAt":1581303461156},{"id":11500,"originId":"5e4213241225c9423dcd9cb0","articleId":2433,"userId":32,"content":"[@hyj1991](/user/hyj1991) 能具体说下为什么吗？ 长连接服务的是不是很难做到热更新？","createdAt":1581388580552},{"id":11501,"originId":"5e421bc31225c9423dcd9cd5","articleId":2433,"userId":11,"content":"[@leiwei1991](/user/leiwei1991) 主要是热更新几乎百分百内存泄漏，可以看下这个 https://zhuanlan.zhihu.com/p/34702356\r\n\r\n长连接服务把连接层和逻辑层分开，保证连接层纯转发数据和维护长连接，这样这层就很薄可以减少绝大部分发布更新，其次做好客户端的随机延时重连策略防止长连接服务端发布造成雪崩就行了","createdAt":1581390787551},{"id":11502,"originId":"5e426d331225c9423dcd9d5f","articleId":2433,"userId":32,"content":"[@hyj1991](/user/hyj1991) 感谢 顺便在语雀上关注eggjs团队nodejs专栏","createdAt":1581411635433},{"id":11503,"originId":"5e421fd8267721420912b3df","articleId":2434,"userId":145,"content":"执行一下\r\n```js\r\nObject.defineProperties(navigator,{ webdriver:{ get: () => false } })\r\n```","createdAt":1581391832946},{"id":11504,"originId":"5e0990e50696c446bf650c3d","articleId":2435,"userId":1581,"content":"把你的value与key拼一下","createdAt":1577685221700},{"id":11505,"originId":"5e09a3bb0696c446bf650c98","articleId":2435,"userId":3528,"content":"[@nobody](/user/nobody) 这个是一种办法，但不是最好的。 还要key 进行折字","createdAt":1577690043532},{"id":11506,"originId":"5e09b9810696c446bf650ce9","articleId":2435,"userId":1011,"content":"没有在redis库里面找到ServerInterval这个方法\r\n这个是你单独封装的？","createdAt":1577695617008},{"id":11507,"originId":"5e0b5a92f628e05aa2172bec","articleId":2435,"userId":3528,"content":"[@ty4z2008](/user/ty4z2008) 不是，是var Redis = require('redis'); 内有的。","createdAt":1577802386631},{"id":11508,"originId":"5e40af21267721420912b260","articleId":2435,"userId":44,"content":"[@mrlong](/user/mrlong) 使用轻队列bull里的repeated jobs 就行了\r\n```js\r\n repeatedQueue.process((job =>){\r\n  });\r\n\r\n  repeatedQueue.add({}, {repeat: {cron: '3 * * * *'}});\r\n```","createdAt":1581297441517},{"id":11509,"originId":"5bb4179315e4fd1923f48c42","articleId":2436,"userId":359,"content":"明明说好是三年，可三年之后又三年，三年之后又三年，就快十年了老大！\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1538529171767},{"id":11510,"originId":"5bb4305237a6965f59051e8a","articleId":2436,"userId":89,"content":"![屏幕快照 2018-10-03 上午10.58.12.png](//static.cnodejs.org/Fqgs-rMYw0BfBQ9yCrmt-kw7p9xy)","createdAt":1538535506420},{"id":11511,"originId":"5bb4c40737a6965f59051e9e","articleId":2436,"userId":764,"content":"[@i5ting](/user/i5ting) 要想富，买狼书\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1538573319354},{"id":11512,"originId":"5bb5b68b37a6965f59051ebb","articleId":2436,"userId":2496,"content":"同样很期待","createdAt":1538635403421},{"id":11513,"originId":"5bb5c34915e4fd1923f48c77","articleId":2436,"userId":3529,"content":"[@i5ting](/user/i5ting) 感谢大神指出了一条暴富的捷径","createdAt":1538638665175},{"id":11514,"originId":"5bb5c361ede204052db80383","articleId":2436,"userId":3529,"content":"[@Alexerx](/user/Alexerx) 嘘~小声点，不要让那帮炒房的听见了","createdAt":1538638689091},{"id":11515,"originId":"5bb5e4fa37a6965f59051ed5","articleId":2436,"userId":792,"content":"期待中...\nvia [CNode](https://github.com/nswbmw/cnode-swift)","createdAt":1538647290511},{"id":11516,"originId":"5bb6377637a6965f59051f02","articleId":2436,"userId":1590,"content":"期待ing\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1538668406163},{"id":11517,"originId":"5bbaad4cede204052db803f3","articleId":2436,"userId":3436,"content":"这有挺多nodejs教程，大家先看着\r\n[http://www.sucaihuo.com/video/224-0-0](http://www.sucaihuo.com/video/224-0-0)","createdAt":1538960716830},{"id":11518,"originId":"5bbd76a415e4fd1923f48dac","articleId":2436,"userId":390,"content":"狼叔的《更了不起的Node.js》如果出来了一定第一时间支持，我是看着狼叔的文章成长的，感谢狼叔 为node.js的贡献，给我指明职业方向。大爱狼叔这句话，点赞![image.png](//static.cnodejs.org/FuiogljzCDKO-XDGtHZInEelvAJa)","createdAt":1539143332389},{"id":11519,"originId":"5bbdab679545eaf107b9c9a1","articleId":2436,"userId":3453,"content":"狼书不知道我这样的萌新，友好不，期待中。","createdAt":1539156839974},{"id":11520,"originId":"5bbeaed837a6965f5905208d","articleId":2436,"userId":3530,"content":"钱包已经饥渴难耐了","createdAt":1539223256212},{"id":11521,"originId":"5bc0697dede204052db804cb","articleId":2436,"userId":1679,"content":"这里有个练手的小项目，有兴趣的可以试着撸下\r\n[https://github.com/oceanMin/cms](https://github.com/oceanMin/cms)","createdAt":1539336573285},{"id":11522,"originId":"5bcd2a6c37a6965f59052433","articleId":2436,"userId":2013,"content":"赞赞赞赞赞赞赞\r\n\r\n","createdAt":1540172396720},{"id":11523,"originId":"5bda524b04de603bdb44846c","articleId":2436,"userId":805,"content":"赞赞赞赞赞赞赞","createdAt":1541034571571},{"id":11524,"originId":"5be792d621d75b74609f61b6","articleId":2436,"userId":798,"content":"咋那么多赞，还没出来啊","createdAt":1541903062226},{"id":11525,"originId":"5be953fde161dc409d760f93","articleId":2436,"userId":764,"content":"等node 18出来应该差不多就出版了\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1542018045408},{"id":11526,"originId":"5be99518e161dc409d761099","articleId":2436,"userId":3531,"content":"更了不起的Node.js","createdAt":1542034712303},{"id":11527,"originId":"5bfc085dd6104a4f803a1cb0","articleId":2436,"userId":809,"content":"什么情况，到底有没有出来","createdAt":1543243869112},{"id":11528,"originId":"5c131448f3d48d2397c11190","articleId":2436,"userId":805,"content":"期待好久了，咋还不出现","createdAt":1544754248205},{"id":11529,"originId":"5c1361bbf3d48d2397c113e8","articleId":2436,"userId":3532,"content":"日常催书~","createdAt":1544774075206},{"id":11530,"originId":"5c2a34833898674067a79e41","articleId":2436,"userId":804,"content":"[@wangerniu](/user/wangerniu) 哈哈哈哈","createdAt":1546269827035},{"id":11531,"originId":"5c2b5eaf76c4964062a1f7dd","articleId":2436,"userId":22,"content":"2019年了","createdAt":1546346159950},{"id":11532,"originId":"5c2b7a103898674067a7a006","articleId":2436,"userId":3533,"content":"[@yanlele](/user/yanlele) 期待","createdAt":1546353168166},{"id":11533,"originId":"5c2b8f023898674067a7a039","articleId":2436,"userId":1096,"content":"今年下半年，中美合印？","createdAt":1546358530251},{"id":11534,"originId":"5c2c21463898674067a7a14c","articleId":2436,"userId":863,"content":"狼书的代码会基于 Node 12 来写吗？","createdAt":1546395974468},{"id":11535,"originId":"5c2c6f7076c4964062a1fc8b","articleId":2436,"userId":3534,"content":"可能是还没写完，发现 Node.js 及相关技术又有更新了，于是不停的更新重写 23333","createdAt":1546415984878},{"id":11536,"originId":"5c2c732476c4964062a1fca8","articleId":2436,"userId":22,"content":"两开花","createdAt":1546416932821},{"id":11537,"originId":"5c41f44c3b948a2b4ab6f705","articleId":2436,"userId":1661,"content":"期待到了吗","createdAt":1547826252659},{"id":11538,"originId":"5c6c0844b8913c5110b0c846","articleId":2436,"userId":828,"content":"[@i5ting](/user/i5ting) 这个有意思","createdAt":1550583876610},{"id":11539,"originId":"5c6c0af1ed5543510be8d56c","articleId":2436,"userId":3308,"content":"催就完事了。","createdAt":1550584561085},{"id":11540,"originId":"5c8a602cacb681372d418279","articleId":2436,"userId":798,"content":"催也没用","createdAt":1552572460586},{"id":11541,"originId":"5cacac29d68ff5064921ba76","articleId":2436,"userId":805,"content":"我也催一下","createdAt":1554820137956},{"id":11542,"originId":"5cad5002d68ff5064921bbdd","articleId":2436,"userId":501,"content":"要开始攒钱买书了","createdAt":1554862082754},{"id":11543,"originId":"5cc9197da86ae80ce64b5d90","articleId":2436,"userId":804,"content":"2楼真相了","createdAt":1556683133104},{"id":11544,"originId":"5cee80da52ccb64168ba89c2","articleId":2436,"userId":798,"content":"没下文了","createdAt":1559134426766},{"id":11545,"originId":"5cee86d34036f24194cf7b63","articleId":2436,"userId":89,"content":"![IMG20190528091120.jpg](//static.cnodejs.org/Fg85DI7uZL46LBEbvaaGnMvzdTaJ)\r\n\r\n![IMG20190528091434.jpg](//static.cnodejs.org/Fq3yo-lGqVUYpypIxEYqWZX5CfzP)","createdAt":1559135955095},{"id":11546,"originId":"5cee878952ccb64168ba89d6","articleId":2436,"userId":89,"content":"样书已出，离发售应该不远了。图为广州qcon现场拍摄，5月27日","createdAt":1559136137686},{"id":11547,"originId":"5ceeb8c652ccb64168ba8a9b","articleId":2436,"userId":3535,"content":"[@i5ting](/user/i5ting) 等得花儿都谢了","createdAt":1559148742058},{"id":11548,"originId":"5cef3a8852ccb64168ba8b58","articleId":2436,"userId":33,"content":"[@i5ting](/user/i5ting) 这是卷一吗，一共几卷啊。","createdAt":1559181960160},{"id":11549,"originId":"5cef3e1a52ccb64168ba8b7a","articleId":2436,"userId":151,"content":"非常棒，异常期待","createdAt":1559182874051},{"id":11550,"originId":"5cef42554036f24194cf7cd9","articleId":2436,"userId":3536,"content":"支持支持","createdAt":1559183957412},{"id":11551,"originId":"5cef6dc14036f24194cf7dec","articleId":2436,"userId":546,"content":"> 坐等了","createdAt":1559195073026},{"id":11552,"originId":"5d21fad4ad75d374b58bcf96","articleId":2436,"userId":790,"content":"支持支持\r\n\r\n","createdAt":1562507988313},{"id":11553,"originId":"5d73cc3ba7474a231a589d69","articleId":2436,"userId":804,"content":"等了三月又三月\r\n\r\n","createdAt":1567870011864},{"id":11554,"originId":"5d73ed30a7474a231a589d91","articleId":2436,"userId":18,"content":"[@whoknowme](/user/whoknowme) 已经出了","createdAt":1567878448697},{"id":11555,"originId":"5d776d07d50f5723459135bd","articleId":2436,"userId":1671,"content":"都已经买到手了，期待第二本","createdAt":1568107783169},{"id":11556,"originId":"5e4029c41225c9423dcd9b28","articleId":2436,"userId":90,"content":"卷三什么时候能买到？卷一和卷二已买。","createdAt":1581263300124},{"id":11557,"originId":"5e37af841225c9423dcd960b","articleId":2437,"userId":3537,"content":"就是我打开打包好的vue项目时，自己启动nodejs服务，关闭了也自己停止","createdAt":1580707716727},{"id":11558,"originId":"5e37b01b267721420912ad75","articleId":2437,"userId":3537,"content":"或者说，启动nodejs，自己可以打开vue项目吗。。。本人新手，问的问题可能比较傻，请大家轻喷","createdAt":1580707867498},{"id":11559,"originId":"5e3809ce1225c9423dcd9664","articleId":2437,"userId":132,"content":"> wait-on 包是等待前面运行在运行后面的       \"concurrently \\\"wait-on http://localhost:3000 && electron .\\\" \\\"cross-env BROWSER=none yarn start\\\"\",","createdAt":1580730830141},{"id":11560,"originId":"5e380c401225c9423dcd966b","articleId":2437,"userId":2372,"content":"index.html是vue打包出来的\r\napp.get('/',function(req,res) {\r\n  fs.createReadStream(`${__dirname}/index.html`).pipe(res)\r\n});\r\n","createdAt":1580731456549},{"id":11561,"originId":"5e3902171225c9423dcd96f9","articleId":2437,"userId":26,"content":"你这问题的描述存在几个问题：\r\n1. 你的“软件”是否架构是B/S模式，那么下面假设你是\r\n2. 所谓的启动vue项目，是指dev的开发模式下，vue项目自带的http热加载静态服务？如果是，那么你可以在npm脚本后自行添加后端nodejs服务的启动脚本命令（像3楼说的）\r\n3. 注意到你后面说你单机使用，需要数据库，你的数据库是否是嵌入式的？比如SQlite。\r\n4. 对方要的话，如果是B/S模式？所谓“启动”是什么意思？因为“B/S”模式一般叫做服务器呈递浏览器客户端文件，客户只需要使用浏览器访问服务器资源即可，是否指启动服务器？\r\n\r\n这些问题基本上可以断定，你对一个“软件”是如何“部署”的还不太明确，以下就是简单说明一下如果是B/S怎么部署，如果你了解过，那请再自己思考这些问题：\r\n1. 所谓vue项目，这里指纯前端分离的项目，当中的源码都是开发用得，生产环境下不可能还会使用dev服务方式运行，也就是可能你说的“启动vue项目”，前端项一般打包为index.html及其匹配的资源文件。\r\n2. 在nodejs服务，也就是后台中提供前端项目所需要的数据API，并提供前端index.html及其资源的静态服务（像4楼说的），或使用nginx等进行API的重定向和前端静态资源的呈递。\r\n3. 至于数据库，是必须在“服务器”本机上安装的，数据库也要提前运行，正常提供服务，除非是嵌入式数据库。\r\n4. 客户直接使用浏览器访问“服务器”的服务端口即可。","createdAt":1580794391319},{"id":11562,"originId":"5e3ecd911225c9423dcd9a44","articleId":2437,"userId":117,"content":"使用 webpack-dev-middleware\r\nhttps://www.webpackjs.com/guides/development/#%E4%BD%BF%E7%94%A8-webpack-dev-server","createdAt":1581174161818},{"id":11563,"originId":"5e3d0ce11225c9423dcd9939","articleId":2438,"userId":11,"content":"测试环境配置里把需要用线上的配置地方改成线上的配置不就行了么","createdAt":1581059297832},{"id":11564,"originId":"5e3b8d59267721420912afb2","articleId":2439,"userId":690,"content":"不能写 debugger 语句吗？","createdAt":1580961113817},{"id":11565,"originId":"5e36a72a267721420912acee","articleId":2440,"userId":358,"content":"具体怎么个自定义法","createdAt":1580640042161},{"id":11566,"originId":"5e37fca11225c9423dcd9655","articleId":2440,"userId":3538,"content":"其实很简单，我想把服务端的逻辑都放到server目录下，但是默认是\"app“这个目录在项目根目录下。或者把\"app\"目录改成\"server\"目录","createdAt":1580727457163},{"id":11567,"originId":"5e382caf1225c9423dcd9695","articleId":2440,"userId":358,"content":"你就把所有服务的逻辑放到 server 下咯，如 `server/app/*.js` 和 `server/config/*.js` 就可以了，启动脚本指定下 basedir 或者加个 cd server","createdAt":1580739759913},{"id":11568,"originId":"5e38e1a0267721420912ae1e","articleId":2440,"userId":3538,"content":"cd进去固然可以，但是我希望用项目的根目录作为cwd。\r\n另外如果我想改app的名字呢？","createdAt":1580786080248},{"id":11569,"originId":"5e38e2271225c9423dcd96d7","articleId":2440,"userId":358,"content":"你可以看下 egg loader 的源码，手动调用 loader，但相当于大改了，不建议。","createdAt":1580786215446},{"id":11570,"originId":"5e390d8b267721420912ae59","articleId":2440,"userId":3538,"content":"我只是想改一下目录名称和根目录，这样就要去涉及根基确实成本太高了。\r\n感觉loader部分的文档写得也不是很明确，让人看得稀里糊涂的。\r\neggjs完全可以在config中提供修改根目录和app目录名称的配置，这样便于把eggjs融入各自的前端框架。\r\n","createdAt":1580797323069},{"id":11571,"originId":"5e3938b6267721420912ae84","articleId":2440,"userId":358,"content":"loader 的直接看 egg-core 源码就好了，没几行。\r\n","createdAt":1580808374292},{"id":11572,"originId":"5e3a72c8267721420912af0d","articleId":2440,"userId":3538,"content":"OK，感谢！","createdAt":1580888776406},{"id":11573,"originId":"5e39143c1225c9423dcd971b","articleId":2441,"userId":3539,"content":"附上自己努力的结果，这样应该是可以解决掉我自己的问题。\r\n如果有大大提供更好的解法，再麻烦赐教～\r\n\r\n```JavaScript\r\nconst puppeteer = require('puppeteer');\r\n\r\n(async () => {\r\n    const browser = await puppeteer.launch();\r\n    const page = await browser.newPage();\r\n    await page.goto('http://admin:admin@127.0.0.1:8080/manager');\r\n\r\n    await page.evaluate(() => {\r\n        let elements = document.getElementsByClassName('inline');\r\n        for (var element of elements)\r\n            if (element.action.indexOf('/IESC') != -1 && element.action.indexOf('stop') != -1) {\r\n                element.children[0].children[0].classList.add(\"IESC_Stop\");\r\n            }\r\n    });\r\n\r\n    try {\r\n        await page.click('.IESC_Stop');\r\n    } catch (e) {\r\n        console.log('No Stop Btn');\r\n    }\r\n\r\n    await page.evaluate(() => {\r\n        let elements = document.getElementsByClassName('inline');\r\n        for (var element of elements)\r\n            if (element.action.indexOf('/IESC') != -1 && element.action.indexOf('start') != -1) {\r\n                element.children[0].children[0].classList.add(\"IESC_Start\");\r\n            }\r\n    });\r\n\r\n    try {\r\n        await page.click('.IESC_Start');\r\n    } catch (e) {\r\n        console.log('No Start btn');\r\n    }\r\n\r\n    await browser.close();\r\n})();\r\n```","createdAt":1580799036420},{"id":11574,"originId":"5e37f4e51225c9423dcd9650","articleId":2442,"userId":3540,"content":"用两个ep.after解决了这个问题\r\n完整代码\r\n```\r\nvar eventproxy = require('eventproxy');\r\nvar superagent = require('superagent');\r\nvar cheerio = require('cheerio');\r\n// url 模块是 Node.js 标准库里面的\r\n// http://nodejs.org/api/url.html\r\nvar url = require('url');\r\n\r\nvar cnodeUrl = 'https://cnodejs.org/';\r\nvar goodTopicUrl = cnodeUrl+ '?tab=good'\r\n\r\nsuperagent.get(goodTopicUrl)\r\n  .end(function (err, res) {\r\n    if (err) {\r\n      return console.error(err);\r\n    }\r\n    var topicUrls = [];\r\n    var $ = cheerio.load(res.text);\r\n    var count=0;\r\n    // 获取首页所有的链接\r\n    $('#topic_list .topic_title').each(function (idx, element) {\r\n      var $element = $(element);\r\n      // $element.attr('href') 本来的样子是 /topic/542acd7d5d28233425538b04\r\n      // 我们用 url.resolve 来自动推断出完整 url，变成\r\n      // https://cnodejs.org/topic/542acd7d5d28233425538b04 的形式\r\n      // 具体请看 http://nodejs.org/api/url.html#url_url_resolve_from_to 的示例\r\n      var href = url.resolve(cnodeUrl, $element.attr('href'));\r\n      if(count<5){\r\n        topicUrls.push(href);\r\n      }\r\n      count++;\r\n    });\r\n    // 得到 topicUrls 之后\r\n\r\n    // 得到一个 eventproxy 的实例\r\n    var ep = new eventproxy();\r\n\r\n    // 命令 ep 重复监听 topicUrls.length 次（在这里也就是 5 次） `topic_html` 事件再行动\r\n    ep.after('topic_html', topicUrls.length, function (topics) {\r\n    // topics 是个数组，包含了 5 次 ep.emit('topic_html', pair) 中的那 5 个 pair\r\n      \r\n      // 接下来都是 jquery 的用法了\r\n      topics = topics.map(function (topicPair) {\r\n        var topicUrl = topicPair[0];\r\n        var topicHtml = topicPair[1];\r\n        var $ = cheerio.load(topicHtml);\r\n        var title= $('.topic_full_title').text().trim();\r\n        var comment1 = $('.reply_area').first();\r\n        var author1 = $(comment1).find('div.user_info').find('a.reply_author');\r\n        var author1Href = url.resolve(cnodeUrl, $(author1).attr('href'));\r\n        var comment1Text = $(comment1).find('div.reply_content').children().first().text().trim();\r\n        var author1Name = $(author1).text().trim();\r\n        return ([author1Href, {\r\n          title: title,\r\n          href: topicUrl,\r\n          comment1: comment1Text,\r\n          author1: author1Name,\r\n        }]);\r\n      }); \r\n\r\n      topics.forEach(function (topicPair) {\r\n        var authorHref = topicPair[0];\r\n        var topic = topicPair[1];\r\n        superagent.get(authorHref)\r\n          .end(function (err, res) {\r\n            console.log('fetch ' + authorHref + ' successful');\r\n            var $ = cheerio.load(res.text); \r\n            var userScore = $('.user_profile').find('span.big').first().text().trim();\r\n            topic['score1'] = userScore;\r\n            ep.emit('topic_final', topic);\r\n          });\r\n      });\r\n    });  \r\n      \r\n    ep.after('topic_final', topicUrls.length, function (results) {\r\n      console.log('final:');\r\n      console.log(results);\r\n    });\r\n\r\n    topicUrls.forEach(function (topicUrl) {\r\n      superagent.get(topicUrl)\r\n        .end(function (err, res) {\r\n          console.log('fetch ' + topicUrl + ' successful');\r\n          ep.emit('topic_html', [topicUrl, res.text]);\r\n        });\r\n    });\r\n});\r\n```\r\n完整输出\r\n```\r\nfetch https://cnodejs.org/topic/5533dd6e9138f09b629674fd successful\r\nfetch https://cnodejs.org/topic/5e11ea064bea432607fcced5 successful\r\nfetch https://cnodejs.org/topic/5c38830c3898674067a7e3a4 successful\r\nfetch https://cnodejs.org/topic/5e16978581adfe260207a8c1 successful\r\nfetch https://cnodejs.org/topic/56ef3edd532839c33a99d00e successful\r\nfetch https://cnodejs.org/user/yuu2lee4 successful\r\nfetch https://cnodejs.org/user/Dengshen successful\r\nfetch https://cnodejs.org/user/Hoooxz successful\r\nfetch https://cnodejs.org/user/i5ting successful\r\nfetch https://cnodejs.org/user/zhennann successful\r\nfinal:\r\n[\r\n  {\r\n    title: '精华\\n\\n\\n\\n        我也给CNode社区做了个PWA',\r\n    href: 'https://cnodejs.org/topic/5c38830c3898674067a7e3a4',\r\n    comment1: '赞',\r\n    author1: 'yuu2lee4',\r\n    score1: '2800'\r\n  },\r\n  {\r\n    title: '精华\\n\\n\\n\\n        浅谈cnode社区如何防止csrf攻击',\r\n    href: 'https://cnodejs.org/topic/5533dd6e9138f09b629674fd',\r\n    comment1: '学习了',\r\n    author1: 'Dengshen',\r\n    score1: '170'\r\n  },\r\n  {\r\n    title: '精华\\n\\n\\n\\n        前端资源教程',\r\n    href: 'https://cnodejs.org/topic/56ef3edd532839c33a99d00e',\r\n    comment1: '感谢大神分享！\\n来自酷炫的 CNodeMD',\r\n    author1: 'Hoooxz',\r\n    score1: '105'\r\n  },\r\n  {\r\n    title: '置顶\\n\\n\\n\\n        2020年1月11日Node party@北京成功举办，附照片、视频和ppt',\r\n    href: 'https://cnodejs.org/topic/5e16978581adfe260207a8c1',\r\n    comment1: '本次活动感谢talkding data支持场地',\r\n    author1: 'i5ting',\r\n    score1: '21910'\r\n  },\r\n  {\r\n    title: '精华\\n\\n\\n\\n        Babel 的工程化实现',\r\n    href: 'https://cnodejs.org/topic/5e11ea064bea432607fcced5',\r\n    comment1: '感谢分享，提供了非常好的学习指引👍',\r\n    author1: 'zhennann',\r\n    score1: '300'\r\n  }\r\n]\r\n```\r\n","createdAt":1580725477103},{"id":11575,"originId":"5e34c808267721420912ac1b","articleId":2443,"userId":358,"content":"> 为什么分别测试 Controller 和 Service ？只测试 Controller 不就能达到效果吗…\r\n\r\n`f()` 调用 `g()`，前者单测正确并不代表后者符合自身的预期。按你自己的需求来选择合适的覆盖率。\r\n\r\n> 对于涉及到 MongoDB 相关的业务如何测试？\r\n\r\n还是看你想测试啥，测试 service 逻辑时可以 mock 掉数据库等外部依赖。测试全流程的时候，用 docker 搞干净的环境。","createdAt":1580517384614},{"id":11576,"originId":"5e3687341225c9423dcd9570","articleId":2443,"userId":3283,"content":"[@atian25](/user/atian25) 多谢😄","createdAt":1580631860717},{"id":11577,"originId":"5e34d67a267721420912ac23","articleId":2444,"userId":22,"content":"很多人学会了如何远程办公","createdAt":1580521082816},{"id":11578,"originId":"5e358f54267721420912ac93","articleId":2444,"userId":18,"content":"[@justjavac](/user/justjavac) 确实，很多人离开了公司不会办公","createdAt":1580568404337},{"id":11579,"originId":"5e328adf267721420912aadd","articleId":2445,"userId":1859,"content":"且不同查询业务针对同一个集合不同条件进行查询，难道要拼接出多个md5来？似乎也不太合理，但相信又能提升效率，这算是用空间换时间？","createdAt":1580370655386},{"id":11580,"originId":"5e32bb86267721420912ab07","articleId":2445,"userId":1011,"content":"算空间换时间\r\n这样优化的前提是你的查询条件涉及的field都是进行等值判断，并且你的条件是对查询field的顺序是有要求的。你得要求所有的开发都这样写并且按照统一的条件顺序。如果量特别大，查询次数多获取可以这样优化。\r\n不过你可以试试加个缓存来应对查询","createdAt":1580383110160},{"id":11581,"originId":"5e3374da1225c9423dcd9423","articleId":2445,"userId":1859,"content":"[@ty4z2008](/user/ty4z2008) 我这边有填过一些历史的坑，在不同mongodb版本的node驱动中做了一些解析器来统一旧新接口的不同，包括抹平一些废弃的函数，也就是说，在这个解析器里，即使人为调整查询字段的顺序，也可以被解析器按正常排序进行查询，也就不存在需要人为约定字段顺序。虽然目前自己的项目并不打算弄成md5来查询（非要做也不是不行，只是需要在业务架构上再进行调整），我只是对这个念头挺感兴趣的，如果官方来处理，是否在某种技术层面上也可以进行这样的优化呢？也就是在某种程度上数据在入库之后还有一个预热的自动md5化（不一定是md5）的过程（非现在的索引）....当然这只是我的一些想像","createdAt":1580430554466},{"id":11582,"originId":"5e341cd01225c9423dcd94b5","articleId":2445,"userId":1011,"content":"带来的效果很微小，要多很多额外的空间存储。\r\n这样多个查询的条件应该结合业务进行重构。合并field","createdAt":1580473552800},{"id":11583,"originId":"5e3485681225c9423dcd94ca","articleId":2445,"userId":1933,"content":"针对具体的场景可能会有价值。。。这种场景可能是：a，b, c , d , e  ....字段多，字段的顺序也有严格要求，且等值查询而非范围/模糊查询。数据量不大。\r\n对于大部分的场景，这种可能并不实用，还不如搞一个组合索引有用。","createdAt":1580500328923},{"id":11584,"originId":"5e353308267721420912ac62","articleId":2445,"userId":1859,"content":"[@ty4z2008](/user/ty4z2008) 谢谢","createdAt":1580544776740},{"id":11585,"originId":"5e35334f267721420912ac66","articleId":2445,"userId":1859,"content":"[@wldlzt](/user/wldlzt) 了解了一下文档索引，似乎跟我提的这个有点相近....算了，也明白只是心血来潮的一个想法，没太多价值","createdAt":1580544847726},{"id":11586,"originId":"5e32b3be267721420912aaf9","articleId":2446,"userId":1641,"content":"淘宝的 flexible","createdAt":1580381118694},{"id":11587,"originId":"5523e581b50122cc0bf6d58e","articleId":2447,"userId":1568,"content":"cluster可以解决你的烦恼，多进程，某个进程死掉，自动fork出一个顶上。","createdAt":1428415873897},{"id":11588,"originId":"5523e8ebb50122cc0bf6d593","articleId":2447,"userId":3541,"content":"[@coordcn](/user/coordcn) cluster还处于实验状态，而且在nginx反向代理下有一些问题。\r\nnodejs有`forever`和`pm2`两个常用daemon模块，可以使用一下。","createdAt":1428416747198},{"id":11589,"originId":"5523eaf2b50122cc0bf6d59e","articleId":2447,"userId":940,"content":"[@coordcn](/user/coordcn) \r\n你讲的cluster是nodejs自带的多核处理模块cluster是吧.\r\n可我的服务器是单核的. 能有效么?","createdAt":1428417266452},{"id":11590,"originId":"5523ebfbb50122cc0bf6d5a3","articleId":2447,"userId":940,"content":"[@dayuoba](/user/dayuoba) \r\n恩,forever和pm2研究看看.","createdAt":1428417531713},{"id":11591,"originId":"5523f06cb50122cc0bf6d5ac","articleId":2447,"userId":18,"content":"pm2 ","createdAt":1428418668573},{"id":11592,"originId":"5523f094b50122cc0bf6d5ae","articleId":2447,"userId":18,"content":"[@nqdy666](/user/nqdy666) 服务器是单核的话，虽然无法利用多 cpu，但是还是可以用 cluster 保证自动重启。pm2 内部也是用了 cluster","createdAt":1428418708508},{"id":11593,"originId":"5523f848b50122cc0bf6d5b0","articleId":2447,"userId":1568,"content":"[@dayuoba](/user/dayuoba) 内部实现原理都是一样的，cluster也是child_porcess的封装，forever和pm2也不会例外的。\r\n\r\n子进程监控本质上SIGCHLD信号的处理，当主进程收到子进程的SIGCHLD信号，就说明子进程挂掉了，我们可以重新fork一个进程出来顶上。\r\n\r\n不知道你说的反向代理是什么问题？能详细说下么？","createdAt":1428420680451},{"id":11594,"originId":"5523f88ab50122cc0bf6d5b5","articleId":2447,"userId":940,"content":"[@alsotang](/user/alsotang) 感谢","createdAt":1428420746866},{"id":11595,"originId":"55247aa1b50122cc0bf6d5d7","articleId":2447,"userId":217,"content":"看看Makefile就知","createdAt":1428454049599},{"id":11596,"originId":"552488ecb50122cc0bf6d5ea","articleId":2447,"userId":1307,"content":"我也使用了这套框架，目前没有出现状况呢\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1428457708494},{"id":11597,"originId":"55249eeaaf0219c1596c2891","articleId":2447,"userId":3541,"content":"[@coordcn](/user/coordcn) cluster确实是对child_process的封装，但是cluster模块为了实现共享监听端口额外做了一些工作\r\ncluster重表象理解可以理解为 nginx(shared port)->processes(different ports)\r\n可控性不如拆分出来做高。\r\n\r\nnginx下用cluster的问题是我在用socket.io时候遇到的，nginx 用upstream iphash ,cluster 用sticky-socket,这两个一起用的时候连接异常的紊乱。就是websocket的链接不断的断开重连。。。\r\n","createdAt":1428463338248},{"id":11598,"originId":"5524b7beaf0219c1596c28ba","articleId":2447,"userId":940,"content":"[@luoyjx](/user/luoyjx) \r\n多谢提点，看到了。","createdAt":1428469694100},{"id":11599,"originId":"5524bb1aaf0219c1596c28c6","articleId":2447,"userId":1568,"content":"[@dayuoba](/user/dayuoba) \r\ncluster的确存在处理进程的不确定性问题，如果进程内不保持状态的话，是没有问题的，游戏，聊天服务器容易出问题。碰到这种问题，多进程监听不同的端口（做反向代理），或者将链接固定到某个进程上都是可行的。\r\n\r\ncluster和nginx都会存在这样的问题，这个是共享端口多进程最大的问题，做web没什么问题，其他的就不保险了。\r\n\r\n我跟楼主推荐cluster主要原因是简单，几句代码立竿见影，细节上没有你考虑的周到。\r\n\r\n","createdAt":1428470554512},{"id":11600,"originId":"5e2eb2c41225c9423dcd9260","articleId":2447,"userId":1545,"content":"（五年过去了）\r\n[pm2](https://github.com/Unitech/pm2)真香","createdAt":1580118724985},{"id":11601,"originId":"5c6d06f633b0b629ac843437","articleId":2448,"userId":3543,"content":"这不就是nodejs 实战 么...\r\n京东上有卖的...","createdAt":1550649078929},{"id":11602,"originId":"5c6d0859e1a81129a7ad8bcf","articleId":2448,"userId":151,"content":"不是很认同。\r\n《Nodejs in Action》是一本很不错的书，当前已经是第二版了，再版加入了很多新元素，在入门书里算是经典中的经典。\r\n但如果是单纯的学习Node本身，这本书只有第一章讲解了Node的基本原理；\r\n如果是为了学习Node在实际开发中的应用，这本书在每个知识点上都是点到为止。\r\n所以这本书适合的人群是：或多或少已经对Node有了解，想知道Node在开发中有哪些应用场景，对应使用框架是什么，不同技术间有何对比参考。\r\n我推荐的完整的学习顺序书籍：\r\n1-《新时期的Node.js入门》---让你充分了解Node本身，以及常见API的用法，意义\r\n2-《Koa与Node.js开发实战》接受项目的考验\r\n3-《深入浅出Node.js》用于深入学习Node知识\r\n其他的书都应该是在上述体系完备后，可以作为补充观看，如《Nodejs in Action》《Node.js:来一打C++扩展》 《Node.js调试指南》  ","createdAt":1550649433506},{"id":11603,"originId":"5c6d0d6133b0b629ac8434a8","articleId":2448,"userId":21,"content":"你可以先艾特或者私信问问狼叔有没有看五遍","createdAt":1550650721693},{"id":11604,"originId":"5c6d16d633b0b629ac84354c","articleId":2448,"userId":1871,"content":"[@zy445566](/user/zy445566) 就你皮","createdAt":1550653142498},{"id":11605,"originId":"5c6df32333b0b629ac8437c7","articleId":2448,"userId":3544,"content":"咯咯咯","createdAt":1550709539922},{"id":11606,"originId":"5c6dfe09e1a81129a7ad8f93","articleId":2448,"userId":636,"content":"[@i5ting](/user/i5ting) 狼叔干活了，上面这个账号刷回复。","createdAt":1550712329721},{"id":11607,"originId":"5c6dfe8ce1a81129a7ad8fa7","articleId":2448,"userId":22,"content":"[@blackmatch](/user/blackmatch) 已处理","createdAt":1550712460604},{"id":11608,"originId":"5c6dfefee1a81129a7ad8fba","articleId":2448,"userId":636,"content":"[@justjavac](/user/justjavac) 666，这响应速度太快了","createdAt":1550712574301},{"id":11609,"originId":"5c6e3793e1a81129a7ad9256","articleId":2448,"userId":446,"content":"MDN的HTTP和JS部分刷一遍，然后Node官方文档刷一遍，Express、Koa的文档刷一遍，然后有能力开始做些简单WEB服务了。\r\n其实很多关键知识这些文档里都写得很明白了，再加上权威性高和更新即时，私以为没有必要专门找些书去看。\r\n\r\n我觉得原话的意思可能是Node自己本身没多少东西，很快就能上手，多的和难得部分都在项目实践里，比如设计一套高度一致性的分布式系统，还有各种中间件的使用。","createdAt":1550727059079},{"id":11610,"originId":"5c6e428c33b0b629ac843bb2","articleId":2448,"userId":662,"content":"我希望我可以快点上班","createdAt":1550729868301},{"id":11611,"originId":"5c6e4db1e1a81129a7ad9367","articleId":2448,"userId":2402,"content":"[@ruyuejun](/user/ruyuejun) 《新时期的Node.js入门》是我写的（捂脸~，感谢推荐","createdAt":1550732721274},{"id":11612,"originId":"5c6e7bede1a81129a7ad954d","articleId":2448,"userId":151,"content":"[@Yuki-Minakami](/user/Yuki-Minakami) good 符合国人阅读习惯，讲解全面深入，很棒棒，永久保存在书架上了","createdAt":1550744557143},{"id":11613,"originId":"5c6fc31b33b0b629ac844555","articleId":2448,"userId":3545,"content":"推荐《使用Egg.js+Vue.js+Docker》，是认真的吗","createdAt":1550828315317},{"id":11614,"originId":"5c6ff69433b0b629ac844606","articleId":2448,"userId":21,"content":"[@JianShaw](/user/JianShaw) \r\n注意，这本书也是论坛的资深用户写的。况且要长期疯狂输出资料，这已经是一个很难的事情了。","createdAt":1550841492999},{"id":11615,"originId":"5c7c786490c14711cc8c9d02","articleId":2448,"userId":3546,"content":"[@shuiruohanyu](/user/shuiruohanyu) 建议删除","createdAt":1551661156209},{"id":11616,"originId":"5c7d33fd5b8cb21491ca5cad","articleId":2448,"userId":1982,"content":"看书无用，大部分计算机书籍80%是废话。\r\n建议应用问题直接百度，底层问题看源码，装逼问题看应试题\r\n拓展自己边界，否则学不好计算机。","createdAt":1551709181680},{"id":11617,"originId":"5c7db97a90c14711cc8ca402","articleId":2448,"userId":21,"content":"[@zacard-orc](/user/zacard-orc) \r\n也未必，实践类的必要倒性不是很大，除非你是特别初级，不能靠自己入门的。\r\n计算机基础，思想，设计，算法，结构看完大多对自己都会有较大收获，虽然过段时间也忘了。\r\n\r\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1551743354550},{"id":11618,"originId":"5dc3d741865a9844a30207b8","articleId":2448,"userId":3547,"content":"[@ruyuejun](/user/ruyuejun)  老哥你的个人主页看不到了啊","createdAt":1573115713351},{"id":11619,"originId":"5dc3e357ece3813ad9ba6f1e","articleId":2448,"userId":89,"content":"一本书读5遍，可以吃透，何其痛快！比看5本，每本一遍要好的多。尤其是初学者，更需要踏实下来，往深了研究","createdAt":1573118807327},{"id":11620,"originId":"5dc599bd865a9844a3020ce7","articleId":2448,"userId":701,"content":"[@ruyuejun](/user/ruyuejun) github链接失效了","createdAt":1573231037856},{"id":11621,"originId":"5dc604cfece3813ad9ba7415","articleId":2448,"userId":2084,"content":"[@i5ting](/user/i5ting) 看完五遍，再啃另一本五遍，才能熟练地加以对比学习，从两个不同的维度看同一个事物，会得到更多维度的解读。","createdAt":1573258447591},{"id":11622,"originId":"5dd635db8287937a65af5f12","articleId":2448,"userId":837,"content":"我正准备这么做，希望不会永远停留在前20页……","createdAt":1574319579607},{"id":11623,"originId":"5dee16c214ffa4125a5452ed","articleId":2448,"userId":688,"content":"可以在工作一段时间后，抽时间把整个nodejs官方文档过一下","createdAt":1575884482161},{"id":11624,"originId":"5df0ea49df1b9a40d14c61cf","articleId":2448,"userId":57,"content":"简单翻了下，我还是从nest.js直接开始的（之前写了一段时间的angular，所以比较熟悉这个），有问题的话，直接查看node.js文档吧，每个人的方法都不一样","createdAt":1576069705583},{"id":11625,"originId":"5e22cf671225c9423dcd898e","articleId":2448,"userId":114,"content":"这本书跟宣传册一样，感觉看着没什么意思","createdAt":1579339623132},{"id":11626,"originId":"5e251fe71225c9423dcd8d5c","articleId":2448,"userId":3548,"content":"浅显地看了一遍，感觉不到什么东西，太多太杂的历史介绍，没有专注于一个框架或者点去讲解，只能说拓展了知识面吧。大概实战不够详细吧。有机会准备看狼叔的","createdAt":1579491303418},{"id":11627,"originId":"5e27c2591225c9423dcd9017","articleId":2448,"userId":110,"content":"看那么多遍有什么用，不如找个公认比较好的教程粗略过一遍，然后自己写一个项目，哪里不会再查。\r\n电脑方面我还是觉得看书不是最好选择，网页或者互动式的教程比较适合。看书想复制个代码都复制不下来，除非盗版电子书","createdAt":1579663961857},{"id":11628,"originId":"5e1d3ddc1225c9423dcd7d2b","articleId":2449,"userId":358,"content":"- 进程又不是根据请求来动态 fork 的，而是启动期就启动好的，启动耗时对用户请求耗时是没有影响的。\r\n- 99% 的耗时在你的业务逻辑代码上，譬如一个 sync 之类的。\r\n","createdAt":1578974684925},{"id":11629,"originId":"5e1d4b1f2677214209129420","articleId":2449,"userId":545,"content":"别用java 的思想解决node.js 的问题~\r\n另外，`worker_threads` 对IO 密集型应用提升有限，增加了复杂度，甚至降低性能 （单线程没有线程切换的损耗） 对于8核以上，你开多实例即可","createdAt":1578978079397},{"id":11630,"originId":"5e1d75041225c9423dcd7efb","articleId":2449,"userId":21,"content":"[@zuohuadong](/user/zuohuadong) 可有根据？还是仅仅猜测。","createdAt":1578988804594},{"id":11631,"originId":"5e1d78e2267721420912958d","articleId":2449,"userId":358,"content":"重 CPU 的操作也不应该在 Web 服务器上去做，应该丢到 函数计算 这类的服务去","createdAt":1578989794811},{"id":11632,"originId":"5e1d84181225c9423dcd7f39","articleId":2449,"userId":545,"content":"[@zy445566](/user/zy445566)   你自己实际压测下就明白了， IO 密集（读数据库）的一个接口，4核心机器测试下来 单线程并发高10%左右。\r\n瓶颈压根不在这。\r\n\r\npaypal 之前也有测试数据 对比 node.js  单核 4G ，java  四核8G ，node.js 并发还比 java 高一倍。\r\n\r\n除非你是做算法或者其他CPU密集型业务，不然多线程的必要性不大","createdAt":1578992664387},{"id":11633,"originId":"5e1d86d71225c9423dcd7f48","articleId":2449,"userId":21,"content":"[@zuohuadong](/user/zuohuadong) 之前看错了，看成CUP密集型了","createdAt":1578993367147},{"id":11634,"originId":"5e1e7a1426772142091296d0","articleId":2449,"userId":109,"content":"worker_threads 对于 IO密集场景意义不大， CPU 场景有一定提升","createdAt":1579055636530},{"id":11635,"originId":"5e1fc25d26772142091299c4","articleId":2449,"userId":3549,"content":"[@atian25](/user/atian25) 这个我知道呀，有一些运算的需要放到多线程去做，我期望的是可以有个线程池可以来完成我的任务","createdAt":1579139677565},{"id":11636,"originId":"5e1fc2cd26772142091299ca","articleId":2449,"userId":3549,"content":"[@zuohuadong](/user/zuohuadong) 可就是会有运算的需求呢，而且没有 java 呢，现在 web 和系统都是一体，如果说 java 的思想，那么定时器算不算也是 java 的思想？","createdAt":1579139789075},{"id":11637,"originId":"5e1fc31b1225c9423dcd8303","articleId":2449,"userId":3549,"content":"[@atian25](/user/atian25) 作为一个强微信业务的公司来说，是没有那么多服务器的，基本都是全干，也不区分 web i/o 类需求还是函数计算需求","createdAt":1579139867976},{"id":11638,"originId":"5e1fc63826772142091299ed","articleId":2449,"userId":358,"content":"[@mzTeamMeatMan](/user/mzTeamMeatMan) 微信也有对应的函数计算啊，这种重操作就应该用函数计算，整体费用会便宜很多的。\r\n\r\n全干不等于你所有的东西都用一个东西来干。\r\n\r\n可以参考下 语雀 他们的实践：[“云”端的语雀：用 JavaScript 全栈打造商业级应用](https://zhuanlan.zhihu.com/p/101917567)","createdAt":1579140664910},{"id":11639,"originId":"5e1fdf801225c9423dcd839d","articleId":2449,"userId":545,"content":"[@mzTeamMeatMan](/user/mzTeamMeatMan)  定时器很多语言都有，node.js 也有类似的实现和包。\r\n如果运算需求是瓶颈的话，运算这块用C++ 写，封装成拓展，node.js 来调用。\r\n\r\n如果是微信业务，那就有意思了，那都不叫运算需求了。\r\n\r\n数据分析、图像处理、AI、针对特殊场景的算法.....   你看看你用到了哪一个？\r\n\r\n不要为1%的计算需求，花99% 的时间考虑。\r\n\r\n有少量的计算，就专门开个服务偶尔跑一下，跟业务隔离开。\r\n\r\n\r\n如果你的业务能用 java ，js 这些来做计算，那都不叫CPU 密集型。 别闹了\r\n建议你还是先放到实际环境里运行就明白了，而不是颅内运行。","createdAt":1579147136457},{"id":11640,"originId":"5e201bc52677214209129b5f","articleId":2449,"userId":89,"content":"[@mzTeamMeatMan](/user/mzTeamMeatMan) 还是要拆一下的。因为你不知道什么时候eventloop里有一个阻塞任务。于是所有机器可能都挂了。\r\n\r\n基于事件，在eventloop底层已有线程池实现了，不必再折腾","createdAt":1579162565487},{"id":11641,"originId":"5e27a8fe1225c9423dcd8fed","articleId":2449,"userId":26,"content":"worker_threads 本身就不是和其他语言中的“线程”相同，javaScript本身就永远不可能拥有“多线程”，因为这样所以首先用起来概念上会比较“畸形”，你看看官方的第一个demo，那和普通语言下的“线程”这种概念相差甚远，那就是轻量级的能够直接共享内存对象进行通讯的“process”，放进框架里面我会觉得头晕（因为想不到要怎么做，要做成怎么样，做好了对大部分需求是否能“通用”），接着，还不知道这“process”的消耗如何。所以碰到类似情况，是我的话，要不就自己写worker_threads服务，要不就其他服务解决。倒是对worker_threads的一些使用封装会比较感兴趣。","createdAt":1579657470356},{"id":11642,"originId":"5da7bfadece3813ad9ba2349","articleId":2450,"userId":1373,"content":"首先不是打广告，我一直在 极客时间 买付费教程看，原因之一就是课程比较系统。前2个月刚出了一个视频教程 node 的。是腾讯一个技术出的，买了，看了，就是更新有点慢，可以入手。","createdAt":1571274669284},{"id":11643,"originId":"5da7c5aaece3813ad9ba2369","articleId":2450,"userId":3550,"content":"[@WuYinMan](/user/WuYinMan) en,好的，谢谢了","createdAt":1571276202623},{"id":11644,"originId":"5da7e1b3ece3813ad9ba2507","articleId":2450,"userId":3,"content":"YouTube 和 bilibili 上面搜索，有很多学习视频","createdAt":1571283379419},{"id":11645,"originId":"5da844e0865a9844a301c172","articleId":2450,"userId":716,"content":"我个人觉得那个 itying / it营 的视频还不错，老师语速快，没废话。","createdAt":1571308768955},{"id":11646,"originId":"5dee563a14ffa4125a545377","articleId":2450,"userId":805,"content":"楼主看看这套视频教程适不适合学[https://www.sucaihuo.com/video/135.html](https://www.sucaihuo.com/video/135.html)","createdAt":1575900730005},{"id":11647,"originId":"5e2524641225c9423dcd8d6d","articleId":2450,"userId":3548,"content":"B站\r\n","createdAt":1579492452362},{"id":11648,"originId":"5e0eef174bea432607fccbe4","articleId":2451,"userId":1580,"content":"蝉知还不错","createdAt":1578037015354},{"id":11649,"originId":"5e0f394a81adfe2602079c68","articleId":2451,"userId":1377,"content":"可以去github看看eladmin和vue-element-admin","createdAt":1578056010332},{"id":11650,"originId":"5e1c80a91225c9423dcd7bf6","articleId":2451,"userId":831,"content":"[@xxLion](/user/xxLion) 不错的。。 还有吗","createdAt":1578926249929},{"id":11651,"originId":"5e1d27581225c9423dcd7cbc","articleId":2451,"userId":191,"content":"这个还可以  https://www.itying.com/goods-800.html","createdAt":1578968920806},{"id":11652,"originId":"5e23cc61267721420912a1b1","articleId":2451,"userId":1837,"content":"https://strapi.io/","createdAt":1579404385096},{"id":11653,"originId":"5e24822a1225c9423dcd8c9a","articleId":2452,"userId":358,"content":"对。因为 Node.js 特性如此","createdAt":1579450922061},{"id":11654,"originId":"5e2303941225c9423dcd89d1","articleId":2453,"userId":358,"content":"传 oss 挂 cdn 才是最佳方案","createdAt":1579352980105},{"id":11655,"originId":"5e230b041225c9423dcd89df","articleId":2453,"userId":3551,"content":"[@atian25](/user/atian25) 有简单的一点的方法吗，不用cdn，只是一个小项目","createdAt":1579354884637},{"id":11656,"originId":"5e23b6fb267721420912a127","articleId":2453,"userId":358,"content":"[@zhouzhili](/user/zhouzhili) 仔细看那个库的源码","createdAt":1579398907673},{"id":11657,"originId":"5e23bd73267721420912a14f","articleId":2453,"userId":545,"content":"[@zhouzhili](/user/zhouzhili)  CDN 就是最简单的~ 迁移也方便。\r\n\r\n自己写代码搞这个很麻烦~","createdAt":1579400563505},{"id":11658,"originId":"5e241522267721420912a2c5","articleId":2453,"userId":3551,"content":"[@atian25](/user/atian25) 好吧，学习","createdAt":1579423010210},{"id":11659,"originId":"5e1ffdde2677214209129aa9","articleId":2454,"userId":1493,"content":"alinode","createdAt":1579154910586},{"id":11660,"originId":"5e2111472677214209129cd9","articleId":2454,"userId":512,"content":"[@riichg5](/user/riichg5) 很抱歉，alinode不开源，我目前在考虑Express Status Monitor","createdAt":1579225415489},{"id":11661,"originId":"5e23aefb1225c9423dcd8a23","articleId":2454,"userId":1011,"content":"promethues+grafana\r\n搭建好之后，会有一个网关。你按照文档的数据格式推送日志到网关即可\r\n然后在grafana可视化面板添加prometheus的数据源。按照你的需要进行查询（要会他的PromQL）\r\n\r\n另外你也可以试试阿里开源的[pandora](https://github.com/midwayjs/pandora)","createdAt":1579396859524},{"id":11662,"originId":"5e23f135267721420912a232","articleId":2454,"userId":1493,"content":"[@qitaotom](/user/qitaotom) 噢","createdAt":1579413813787},{"id":11663,"originId":"5c8b0e557ce0df37324282c2","articleId":2455,"userId":3553,"content":"node是异步非阻塞，node将异步的io操作交给底层的libuv处理（线程池）\r\n而这段代码是同步阻塞的，大量的计算阻塞住了线程。\r\n","createdAt":1552617045424},{"id":11664,"originId":"5c8b0fb77ce0df37324282d7","articleId":2455,"userId":1417,"content":"[@tw234tw](/user/tw234tw) 异步非阻塞我能理解，比如从数据库取数据这是个异步过程，扔到底层线程池处理。\r\n\r\n对从数据库取回的数据做编码，比如列表数据结构给整成树形数据结构，类似的操作是同步代码吧，这些同步代码是在主线程上跑的吧，假设处理时间为 1s，即 1s 之后一个 `/a` 请求才算结束，下一个 `/a` 请求才开始。\r\n\r\n现在的问题是测试结果：接口与接口之间是顺序请求的，不是并行执行的。","createdAt":1552617399057},{"id":11665,"originId":"5c8b1128acb681372d4184c7","articleId":2455,"userId":3554,"content":"[@dkvirus](/user/dkvirus) node是单线程，本来就是顺序","createdAt":1552617768475},{"id":11666,"originId":"5c8b13027ce0df3732428311","articleId":2455,"userId":111,"content":"因为你的fib是 主线程中运行的，你把fib用c++多线程实现，用多线程运行计算，就能达到并发效果了 ","createdAt":1552618242610},{"id":11667,"originId":"5c8b13d7acb681372d4184dd","articleId":2455,"userId":1417,"content":"[@jiurihuahuo](/user/jiurihuahuo) 那何谈高并发？是我一直以来获取了假消息？还是？","createdAt":1552618455537},{"id":11668,"originId":"5c8b14107ce0df3732428321","articleId":2455,"userId":1417,"content":"[@yakczh](/user/yakczh) 现在就想知道  nodejs 自个可支持高并发，就是同时接收很多个请求，不会延迟处理。","createdAt":1552618512216},{"id":11669,"originId":"5c8b15577ce0df3732428330","articleId":2455,"userId":111,"content":"[@dkvirus](/user/dkvirus)  这种情况只有console.log('hello world') 不会延迟出现  因为console.log('hello worl')足够快 网络上的各种高并发就是这么测试出来的，你只要把 console.log('helloworld') 换成实际场景中的代码，比如读一个图片文件 ，更新数据库，从google请求一个数据 你就能测试出会不会延迟了","createdAt":1552618839913},{"id":11670,"originId":"5c8b1aabacb681372d41852e","articleId":2455,"userId":3553,"content":"[@jiurihuahuo](/user/jiurihuahuo) node单线程，所以在node主线程里一定是顺序执行的，并行执行的是那些异步i/o操作的部分，至于setTimeout 这个问题，可以看一下\r\nhttps://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\r\n了解一下node的事件循环机制对异步的处理。\r\n","createdAt":1552620203190},{"id":11671,"originId":"5c8b30e67ce0df37324283ef","articleId":2455,"userId":2031,"content":"你这个是cpu密集型 不是io密集型应用， erlang或许会更擅长处理这种","createdAt":1552625894045},{"id":11672,"originId":"5c8b31d17ce0df37324283ff","articleId":2455,"userId":1417,"content":"[@AsJoy](/user/AsJoy) 那么请问，什么是 io 密集型应用，能否举个例子，如果连 web 服务都不算的话。","createdAt":1552626129657},{"id":11673,"originId":"5c8b331bacb681372d4185db","articleId":2455,"userId":1417,"content":"[@tw234tw](/user/tw234tw) \r\n\r\n1. node 主线程按照顺序执行。      同意\r\n2. 并行执行的是那些异步i/o操作。       同意\r\n\r\n这些跟高并发什么关系？还是说接口就应该是一个处理完成后处理下一个，如果这样的话高并发怎么理解。这个帖子核心问题就是想搞明白 nodejs 的高并发到底是怎样的。\r\n\r\n中午和老大讨论了一下，老大说高并发是指：以前 web 服务器同一时间比如说最多只能接收 100 个请求，多的就无法接收了。nodejs 所谓的高并发是指可以同时接收 1000、10000 个请求，只不过以排队的方式在等待。\r\n\r\n不知道这种说法可准确。","createdAt":1552626459177},{"id":11674,"originId":"5c8b36137ce0df3732428412","articleId":2455,"userId":703,"content":"主线程执行js，是单线程的，js代码做大量计算就是cpu密集了。主线程不空闲出来也没法处理 io 的事，所以就阻塞了。","createdAt":1552627219839},{"id":11675,"originId":"5c8b3a857ce0df373242841e","articleId":2455,"userId":1417,"content":"[@myy](/user/myy) 兄弟，cpu 密集型我现在懂了。\r\n\r\n问题是高并发如何理解？\r\n\r\n请求一个接口，从数据库搂完数据，要简单组装下，这个业务很常见吧。组装数据假设需要花费  100ms，问题是：100个人同时访问这个接口，\r\n第 100 个人是不是要等前面 99 个请求处理完才能拿到响应，即 100(人) * 100ms = 10s 之后才能拿到响应。\r\n\r\n如果是这样子，处理高并发如何理解？\r\n如果不是这样子，上面那段 demo 验证的结果是一个接口处理完才开始处理下一个接口。是 demo 写的哪里不对？\r\n","createdAt":1552628357855},{"id":11676,"originId":"5c8b3c52acb681372d418609","articleId":2455,"userId":3555,"content":"js的单线程就是：同步阻塞，异步非阻塞。你这里的斐波拉契函数运行执行的是一个同步操作，只有这个函数运行结束之后才会继续执行后面的代码，因此别个的请求就只有等待了，因为是单线程，单线程，单线程（不知可否理解这里）。而异步操作不是在单线程上执行的，当遇到一个异步操作都会由底层的调用一个线程去做这件事，不影响主线程处理别的请求。\r\n以上就是我片面的理解吧。","createdAt":1552628818351},{"id":11677,"originId":"5c8b3e547ce0df373242843d","articleId":2455,"userId":3553,"content":"实际的生产中，从数据库读取数据这部 消耗的时间远比那些组装数据的时间要久，\r\n实际上是一个接口接收到请求后，处理到异步的时候，下一个请求就开始进行处理了\r\n\r\n\r\n你可以试一下把demo中的同步方法，改为异步耗时的操作，看看效果。","createdAt":1552629332672},{"id":11678,"originId":"5c8b50777ce0df37324284b7","articleId":2455,"userId":703,"content":"[@dkvirus](/user/dkvirus)  没办法，nodejs的运行原理就是这样的。\r\n\r\n高并发，我认为指的是用**少量线程、异步I/O、事件驱动方式来处理IO**，这种方式与传统的开大量线程的多线程模式相比较而言，可以以较少的资源消耗，应付很高的网络并发访问，解决的是**网络接入和IO读写**的瓶颈问题。\r\n\r\n至于后面业务处理方面，该怎样还是怎样，主线程只能干IO的活，，CPU密集的还是要想办法分离出去，起独立线程也好，起独立进程也好，就是不能放在主线程中。","createdAt":1552633975834},{"id":11679,"originId":"5c8bb0ed7ce0df373242875b","articleId":2455,"userId":3556,"content":"正常的情况下，启动服务还需要用到cluster 或者 pm2 这种东西","createdAt":1552658669749},{"id":11680,"originId":"5c8ca03f7ce0df3732428938","articleId":2455,"userId":98,"content":"你的第一映像适用于GO语言，node相对其它语言来说已经没什么并发优势了","createdAt":1552719935499},{"id":11681,"originId":"5c8cbfb07ce0df37324289f6","articleId":2455,"userId":1417,"content":"[@cheerego](/user/cheerego) cluster 跟 cpu 个数有关吧，我的云主机是 1 核的，等于没啥用。\r\n\r\n```\r\nvar http = require('http')\r\nvar cluster = require(\"cluster\");\r\nvar numCPUs = require(\"os\").cpus().length;\r\n\r\nconsole.log('numCPUs is %o', numCPUs)\r\n\r\nif (cluster.isMaster) {\r\n  // Fork workers.\r\n  for (var i = 0; i < numCPUs; i++) {\r\n    cluster.fork();\r\n  }\r\n\r\n  cluster.on(\"exit\", function(worker, code, signal) {\r\n    console.log(\"worker \" + worker.process.pid + \" died\");\r\n  });\r\n} else {\r\n    // Workers can share aclearny TCP connection\r\n    // In this case its a HTTP server\r\n    http.createServer(function(req, res) {\r\n        if (req.url === '/a') {\r\n            console.time('/a')        \r\n            function fib(n) {\r\n                if (n === 0) return 0;\r\n                else if (n === 1) return 1;\r\n                else return fib(n - 1) + fib(n - 2)\r\n            }\r\n\r\n            fib(42)\r\n            console.timeEnd('/a')\r\n\r\n            res.end('a is ' + new Date())\r\n            \r\n        } else if (req.url === '/b') {\r\n            res.end('b is ' + new Date())\r\n        }\r\n  \r\n      })\r\n      .listen(3600, function () {\r\n          console.log('服务已启动')\r\n      });\r\n}\r\n```","createdAt":1552727984075},{"id":11682,"originId":"5c8ccb037ce0df3732428a4b","articleId":2455,"userId":3557,"content":"我觉得这个老哥[@tw234tw](/user/tw234tw)说的可能比较对。你的这段同步代码的确是会卡住主线程，我试了一种情况，或许能让你明白是怎么回事。就是在这段同步代码的后面又放了一段比较耗时的异步代码，然后我发现同时去请求/a和/b，/a的响应时间为同步代码time+异步代码time，而/b的响应时间几乎等于那段同步代码的执行时间。你可以自己试一下：单独请求包含同步代码的/a，单同时请求/b；单独请求含同步代码+异步代码的/a，同时请求/b；单独请求包含异步代码的/a，同时请求/b。不知道你有没有懂我的意思。","createdAt":1552730883417},{"id":11683,"originId":"5c8ccc0bacb681372d418c2f","articleId":2455,"userId":3557,"content":"当然我放的那段异步代码耗时的部分是I/O，而不是计算，我相信，如果你把一段耗时的计算外层包一个异步的壳子，结果还是会卡住主线程的。我的理解是，快慢还是和nodejs处理的事情有关，一段计算耗时的代码，放在什么地方运行，都会卡住nodejs，让它无法处理其它的请求。个人理解。","createdAt":1552731147626},{"id":11684,"originId":"5c91f5388a587f26b426ceb8","articleId":2455,"userId":1559,"content":"cpu 1核\r\n\r\n10个请求一起来\r\n一个人10秒 第二个人20秒 第10个人100秒 好呢\r\n还是每个人都100秒好","createdAt":1553069368432},{"id":11685,"originId":"5c920cb58a587f26b426d00c","articleId":2455,"userId":21,"content":"说白了就是两点：\r\n* 避免了CPU空转\r\n* 消除了线程切换上下文成本\r\n\r\n关于CPU空转，一看代码就懂了：\r\n```js\r\nfunction jsSleep(time) {\r\n    return new Promise((resolve,reject)=>{\r\n        setTimeout(() => {\r\n            resolve(true)\r\n        }, time);\r\n    });\r\n}\r\n\r\nfunction otherSleep(time) {\r\n    let oldTime = new Date().getTime();\r\n    while(new Date().getTime()<oldTime+time) {}\r\n    return true;\r\n}\r\n\r\n(async()=>{\r\n    // Nodejs的 sleep或其他Node.js需要等待操作的实现方式\r\n    await jsSleep(3000);\r\n    // 传统语言的 sleep 或其他传统语言需要等待操作的实现方式\r\n    otherSleep(3000)\r\n})();\r\n```\r\n但成也萧何，败也萧何\r\n\r\n话外音：斐波那契通项公式秒解","createdAt":1553075381553},{"id":11686,"originId":"5c92125f96558e26e1b67ca2","articleId":2455,"userId":109,"content":"所说的“高并发”通常指的是带有后端 IO 请求的场景，比如需要到后端服务读取数据库，或者发起网络请求。\r\n在这种场景下，js 的异步非阻塞模型效率要比同步阻塞高许多。\r\n\r\n如果场景是 CPU 计算密集（比如楼上的计算斐波拉值），那么 js/Node.js 不具有优势。","createdAt":1553076831237},{"id":11687,"originId":"5c9214a996558e26e1b67cbf","articleId":2455,"userId":109,"content":"[@gyj1278](/user/gyj1278) \r\njs 的异步非阻塞模型并不是提高了计算能力（或者执行性能）而是提高了执行效率-- 在 IO 密集场景，同步阻塞代码中 CPU 处于空转等待浪费了计算能力。","createdAt":1553077417256},{"id":11688,"originId":"5c92e5088a587f26b426d29e","articleId":2455,"userId":1744,"content":"Node.js其实就是一个路由器","createdAt":1553130760487},{"id":11689,"originId":"5c92e53396558e26e1b67f1b","articleId":2455,"userId":1417,"content":"[@xcstream](/user/xcstream) 根据我最上面的 demo 显示应该是 一个人 10s，第二个人 20s(第一个人10s之后处理第二个人，第二个人请求 10s，加一起 20s) ","createdAt":1553130803610},{"id":11690,"originId":"5c92e7948a587f26b426d2cb","articleId":2455,"userId":1417,"content":"到目前为止，我比较认同的高并发观点：\r\n相对于 apache 以多线程的方式接收请求，一下子来成千上万(1000个请求)的请求，线程数(100个线程)就那么多，超过的请求(900个请求)就自动挂了；\r\nnodejs 起的web服务器，不管你来多少请求，都在事件队列里慢慢排队，`高并发` 指能接收请求的数目，而不是指同一时间内能处理多少个请求（猜的~）。\r\n\r\n- 以下面代码为例，是 express 中简单的一个处理接口\r\n- 浏览器访问 `/home`，这是个网络请求，本身应该算是异步io吧，\r\n- nodejs 接收之后将异步操作交给底层 `libio` 线程池处理，\r\n- 处理完成之后将回调函数 `function (req, res) {}` 扔到事件队列里，\r\n- js主线程同步代码执行完之后就会去事件队列中拿回调函数，回调函数最终是在主线程里执行的，\r\n- so，前面我在回调里写了个斐波拉契阻塞函数，会阻碍其它请求的返回。\r\n\r\n```\r\napp.get('/home', function (req, res) {\r\n  // ....\r\n})\r\n```\r\n\r\n感觉这个说法暂时可以解释我的疑惑。","createdAt":1553131412381},{"id":11691,"originId":"5c9316a000bcfd7eb2be46fd","articleId":2455,"userId":358,"content":"讲个故事吧，不一定确切。\r\n\r\n你开了一个 Node 餐馆：\r\n1. 客人来了，服务员（worker）会带领客人入座\r\n2. 入座过程中，因为你是高级宾馆，所以需要客人沐浴更新、走红地毯、点餐等固定流程（cpu 操作）\r\n3. 点餐完成后，服务员把订单通过对讲机（网络）丢给后堂厨师（数据库自己的 handler）\r\n4. 客人在座位上等待后堂小弟上菜。\r\n5. 然后服务员就可以回到前台，接待新的客人，重复上面的流程（只要你的座位足够）。\r\n\r\n至于你的 斐波拉契函数，你非要让服务员来做，那第二步自然要很久很久，然后他才能去接待其他客人。\r\n在 Node 里面，这一步不应该亲力亲为，应该额外叫一个小弟来做。(譬如点餐你可以自助手机点啊，摔~）\r\n\r\n而隔壁老板开的 Java 餐馆：\r\n- 财大气粗，我每一个座位，都配备一个专门的服务员。\r\n- 在第三步，服务员亲自通知后堂，然后等着上菜给客人。\r\n- 不过他们的服务员待遇好，他们随时可以召唤很多小弟（fork 线程）来帮他们做事。\r\n- 不同的是，服务员是一人一席的，他是全程服务客人的，即使很多时候是空等着。\r\n","createdAt":1553143456612},{"id":11692,"originId":"5c93201000bcfd7eb2be4727","articleId":2455,"userId":111,"content":"nodejs的高并发是hello world式的高并发，hello world的benchmark 蒙蔽了很多人的双眼 ","createdAt":1553145872052},{"id":11693,"originId":"5c935c22fd41137eb766021e","articleId":2455,"userId":1559,"content":"所以 一个一个来处理平均50秒  一起处理平均100秒","createdAt":1553161250921},{"id":11694,"originId":"5c946f8600bcfd7eb2be4ec2","articleId":2455,"userId":867,"content":"还是看你的业务需求，CPU密集型本身就不适合nodejs，但非常适合大量io操作的情况。\r\n假设一个请求流程是10ms的简单运算，生成sql语句，900ms的数据库查询并返回。90ms的数据数据并返回。完整时间是1s。\r\n如果是java处理\r\n如果是1000个请求，不在考虑数据库压力的情况下，理论上java会并发产生1000个线程来处理，理论上也就可以在1s内处理完1000个请求并全部返回数据。\r\n单位为了这1000个线程，服务器可能产生了百分之80的资源消耗。也就是说你这台服务器能支撑1000个并发已经很好了。\r\n\r\n如果是nodejs处理\r\n如果1000个请求，从第一个请求开始，10ms处理完成，然后就交给数据去处理了，这个时候就可以处理下一个10ms的请求。也就是我需要10s才可以接收完所有的请求，\r\n但是第一个请求返回时间是1s，第二个请求返回时间是1s+10ms，以此类推，但是这1000个并发nodejs会在11s左右全部处理完。\r\n\r\n你可能觉得java是1s，nodejs是11s，差距很大，但是需要注意的是服务器消耗。\r\njava是1000个进程可能已经是服务器的极限看了，但是nodejs服务器确一点事情都没有。\r\n换而言之，\r\n我一台服务器打开10个nodejs进程，我一台服务器就可以处理的并发是10s，1W的，但是java确实1s，1000\r\n我需要用10台服务器才完成。\r\n\r\n实际工作中，我们会发现。在相同的业务需求下，io密集型的需求，使用nodejs同一台服务器可以处理的并发量更大，当然，牺牲了一部分的时间。但是这个完全可以用多开进程的方式来弥补来达到一个均衡。\r\n同样的服务器，仅io密集型的需求而言，nodejs更加合适。\r\n\r\n但是如果是cpu密集型的\r\n你java开1000个线程，是并发计算的，一个计算1秒，1000的线程也1秒返回了，但是使用nodejs，你需要1000秒才可以返回。\r\n\r\n所以，还是要看你的业务场景","createdAt":1553231750564},{"id":11695,"originId":"5c949b6cfd41137eb7660889","articleId":2455,"userId":3557,"content":"[@pzzcn](/user/pzzcn) 感觉说得相当到位了，手动点赞，官方文档一开始就有说道这块。","createdAt":1553242988365},{"id":11696,"originId":"5c94c0f300bcfd7eb2be5166","articleId":2455,"userId":152,"content":"[@zengming00](/user/zengming00) go是每个请求启用一个线程？ 你说的是java吧？","createdAt":1553252595885},{"id":11697,"originId":"5c95e6c2fd41137eb7660c03","articleId":2455,"userId":109,"content":"[@pzzcn](/user/pzzcn) 赞同。\r\n\r\n补充点个人看法。\r\n大家在谈及多线程时往往忽视了其本质：减小因为 IO 延迟等待导致的 CPU 空闲时间，提高资源整体利用效能，而非提高 CPU 计算能力。\r\n假定服务器为 10 核心（不考虑HT），且忽略 CPU 与高速缓存、内存交换时间开销，需求为计算斐波拉契数列。\r\n若单进程，此时 1000 线程执行速度并不会比 10 线程快，反而因为线程切换可能会比 10 线程并发执行性能更低。\r\n这个 CPU 密集计算场景，（java）单进程 10 线程， （nodejs）10 进程，执行性能取决于语言本身设计及实现。就 java 和 nodejs 相比应该差不多。\r\n而实际工作环境不大可能是如此极端依赖 CPU 计算能力，更多的开销在 IO 上（包括外部存储本身性能高低，外部存储延迟，总线延迟等）。而 node.js 的设计模型在并没有提高计算能力的前提下可以 hold 住更多的请求而不至于耗尽系统资源，这就是我们常说的高并发能力。\r\n\r\n若以服务行业来说：\r\n- java 更像一对一的 VIP 服务模式：（线程）专属服侍，待遇高。但服务提供方不可能配备太多的服务员（供线程消耗），于是当生意火爆时需要预订情况（不接受更多客户了）； \r\n- node.js 更像师傅领进门，吃饱看大厨心情的小餐馆队列模式： 点菜（客户端发起请求）后就等着，上菜速度取决于后堂（整体资源）能力，但只要店面位置够多、食客有足够耐心，那么（队列）可以容纳更多的客户端（大家排队傻等中……） 而排队需要的资源很小，所以就会出现川渝店面门外长串板凳特色  ೭(˵¯̴͒ꇴ¯̴͒˵)౨\r\n","createdAt":1553327810223},{"id":11698,"originId":"5c971d07fd41137eb7660ecb","articleId":2455,"userId":3558,"content":"[@dkvirus](/user/dkvirus) 你把node.js的 事件队列（Event Queue）和事件循环（Event Loop）看看就明白了。因为js主线程是单线程，那为了处理耗时的操作（ajax，文件读写等），才有了异步和回调函数callbck概念。将这些耗时的操作放到另外的线程中去处理，等处理完了，就会把耗时操作指定的回调函数callback放到事件队列中去。js主线程继续往下执行，不用等待耗时操作完成后再执行下面的代码。js主线程里面的代码都执行完了后，会轮询这个事件队列，发现了耗时操作所执行的callback，就会把callback放到主线程中去执行。你那个例子中，当'/a'请求过来的时候，由于此时主线程是空的，就会立刻执行斐波函数，而这段代码是同步代码啊，当然会一直在主线程中执行，'/b'的请求过来的时候，主线程正忙着处理斐波拉契函数的计算呢，会把'/b'请求的callback会被放到事件队列中去了，当斐波拉契函数处理完了之后，主线程有空了，就过来处理'/b'请求的回调函数。\r\n看看下图吧，每次来了请求，都会触发net.server 的 request 事件\r\n![eventloop.png](//static.cnodejs.org/FlY4QF88M_t0Lrve-7dyB1kmUoT5)","createdAt":1553407239865},{"id":11699,"originId":"5c982f9a00bcfd7eb2be5988","articleId":2455,"userId":26,"content":"很赞同[@pzzcn](/user/pzzcn) [@atian25](/user/atian25) 的解释，你的斐波拉契函数是CPU密集操作，nodejs没有多线程，肯定会阻塞的，而网络应用，是不会出现这种情况的，个人认为，基本的网络无非就是网络传输以及数据库的处理，这些都可以称做io，而所有io都是通过一个线程去异步实现，这样效率会很高，从而达到接收更多的请求，单线程也决定了程序是按照顺序去运行，所以在nodejs里面没有锁，然而，碰到如同楼主困惑的密集CPU操作，因为顺序执行，就卡住了。剩余的一些程序固定的消耗是非常小的。在做网络应用有这些功能的就不适合使用nodejs去完成，而因该用支持线程或者类似GO这种去做，而且，像这种功能，个人觉得就应该实现为异步的接口，用户也需要异步使用。","createdAt":1553477530681},{"id":11700,"originId":"5c98479700bcfd7eb2be5b60","articleId":2455,"userId":1326,"content":"[@Gitforxuyang](/user/Gitforxuyang) 他想表达的应该是 Go 每个请求启用一个 Goroutine 呢。","createdAt":1553483671956},{"id":11701,"originId":"5c984e52fd41137eb76613f2","articleId":2455,"userId":1326,"content":"[@BigKongfuPanda](/user/BigKongfuPanda) 你说的都能理解，但是在很多日常业务中即便把很多耗时操作交到异步里面去处理了，但我们需要的结果恰恰也都在回调函数 Callback 里面，所以还是要等待异步耗时操作的完成才能拿到结果，所以Node只适合做一些业务的中转，并不适合处理业务本身？","createdAt":1553485394961},{"id":11702,"originId":"5c984ec2fd41137eb76613fd","articleId":2455,"userId":152,"content":"[@beyond5959](/user/beyond5959)  协程跟线程虽一字之差，但完全不一样。 可以说协程就是go的最大亮点之一。 ","createdAt":1553485506106},{"id":11703,"originId":"5c98502d00bcfd7eb2be5be0","articleId":2455,"userId":1326,"content":"[@pzzcn](/user/pzzcn) 说得透彻，赞！","createdAt":1553485869178},{"id":11704,"originId":"5c986ead00bcfd7eb2be5ccd","articleId":2455,"userId":406,"content":"[@beyond5959](/user/beyond5959) 为啥不考虑这些计算工作，用c++ addons 写呢。。。如果要同步计算。","createdAt":1553493677374},{"id":11705,"originId":"5c987024fd41137eb766150f","articleId":2455,"userId":1326,"content":"[@cnlile](/user/cnlile) 所以我说了 Node 应该拿来当业务中转用，并不适合处理业务本身。","createdAt":1553494052998},{"id":11706,"originId":"5c9876b100bcfd7eb2be5d2b","articleId":2455,"userId":1326,"content":"[@LuckyHH](/user/LuckyHH) 赞同这个说话。","createdAt":1553495729809},{"id":11707,"originId":"5c98794c00bcfd7eb2be5d47","articleId":2455,"userId":406,"content":"[@beyond5959](/user/beyond5959) 我觉得还是可以处理的，只要看应用场景啊。。。业务都是微服务化的今天，你怎么处理是综合考虑的结果，不是说一定不适合处理业务，只是拆分后，那个比较好。主要还是人员构成有关和某些特点场合，显然这些计算是属于通用场合的。。处理业务本身也很正常，我几百万用户的服务系统，照样用nodejs处理业务。。。更大场景我就不敢说了。。我也做过nodejs和硬件设备结合的处理业务场景，不要一棍子就把nodejs打死了，说不能处理业务本身。另外，c++addons 本身就是nodejs的组成部分。","createdAt":1553496396471},{"id":11708,"originId":"5c987ac500bcfd7eb2be5d70","articleId":2455,"userId":1326,"content":"[@cnlile](/user/cnlile) 微服务化其实就是把业务中转了，对 Node 来说就是把业务放在网络 I/O 里去了。","createdAt":1553496773897},{"id":11709,"originId":"5c98e71afd41137eb7661997","articleId":2455,"userId":109,"content":"[@cnlile](/user/cnlile) 如果api网关用 java 实现，对于 json 格式数据处理汇聚，面对多端场景的字段过滤， 估计会很酸爽。\r\n不知道为啥 java 一直不原生支持 json ？","createdAt":1553524506522},{"id":11710,"originId":"5c99a242fd41137eb7661c3b","articleId":2455,"userId":406,"content":"[@waitingsong](/user/waitingsong) Java 有jar包支持json的，在spring 下，简单的注释加入[@RestController](/user/RestController) 和[@RequestMapping](/user/RequestMapping) 之类的东西，也可以处理api的，也都是比较简单的。一般来说，简单的api 我倾向于用OpenResty 服务处理，其他用nodejs，实在没办法的用Java。。。。特殊的用python...\r\n多掌握一些技能没坏处的","createdAt":1553572418870},{"id":11711,"originId":"5c99a318fd41137eb7661c47","articleId":2455,"userId":36,"content":"[@beyond5959](/user/beyond5959) 那就是中间层吧","createdAt":1553572632734},{"id":11712,"originId":"5c9a2665fd41137eb7661f61","articleId":2455,"userId":109,"content":"[@cnlile](/user/cnlile) 上次因为相差了一分钱，（同事）排查了大半天，后来发现是 fastjson 包导致的 。\r\n当然，根本原因应该是浮点数序列化/反序列化丢失精度问题。\r\n\r\n我是拒绝写 java 的。以前是 js, html, php, pgsql, mysql，现在是 node.js, TS，正在搞 k8s+devOps 。实在不想把生命花费在 java （还有 mysql）上……","createdAt":1553606245246},{"id":11713,"originId":"5c9a298000bcfd7eb2be675c","articleId":2455,"userId":851,"content":"[@dkvirus](/user/dkvirus) ，楼主我十分的赞同你，你看这样也无法访问 /b ，nodejs真是个垃圾。\r\n```javascript\r\nvar http = require('http')\r\n\r\nvar app = http.createServer(function (req, res) {\r\n    if (req.url === '/a') {\r\n        // 不好意思，这个循环时间有点儿长。\r\n        while(true) {\r\n           void(0);\r\n        }\r\n        res.end('a is ' + new Date())\r\n    } else if (req.url === '/b') {\r\n        res.end('b is ' + new Date())\r\n    }\r\n})\r\n\r\napp.listen(3600, function () {\r\n    console.log('服务已启动')\r\n})\r\n```\r\n","createdAt":1553607040682},{"id":11714,"originId":"5c9a3343fd41137eb7661f7c","articleId":2455,"userId":851,"content":"[@dkvirus](/user/dkvirus) , 楼主，咱们来一波异步斐波拉契数列怎么样，虽然看上去有点丑，但是不知道有没有解决你的疑问呢，顺便说一句你用递归不如用for循环，for循环是v8专门优化过的。有时候效率真的不取决于一门语言或者框架，真正是取决于编码者的认知水平。\r\n```\r\nvar http = require('http');\r\n\r\nfunction loop(start = 1, times = 100, actuator, done) {\r\n  let timer = 0;\r\n  let loopCount = start;\r\n  let braek = function() {\r\n    clearInterval(timer);\r\n  };\r\n  timer = setInterval(() => {\r\n    if ( loopCount > times ) {\r\n      braek();\r\n      typeof done === 'function' ? done() : void(0);\r\n      return;\r\n    }\r\n    loopCount++;\r\n    typeof actuator === 'function' ? actuator(braek) : void(0);\r\n  });\r\n}\r\n\r\nfunction fibonacci(n, callback) {\r\n  let one = 1;\r\n  let two = 1;\r\n  let three = 0;\r\n  if ( n == 1 || n == 2 ) {\r\n    callback(one);\r\n  }\r\n  loop(3, n, function(braek) {\r\n    three = one + two;\r\n    one = two;\r\n    two = three;\r\n  }, function(n) {\r\n    callback(three);\r\n  });\r\n}\r\n\r\nvar app = http.createServer(function (req, res) {\r\n    if (req.url === '/a') {\r\n      fibonacci(44, function(result) {\r\n        console.log(result);\r\n        res.end('result: ' + result);\r\n      });\r\n    } else if (req.url === '/b') {\r\n      res.end('b is ' + new Date())\r\n    }\r\n})\r\n\r\napp.listen(3600, function () {\r\n    console.log('服务已启动')\r\n})\r\n```","createdAt":1553609539657},{"id":11715,"originId":"5c9ad77f00bcfd7eb2be6906","articleId":2455,"userId":406,"content":"[@waitingsong](/user/waitingsong) 浮点数的问题，各个语言都会遇到。 Java的生态圈很好，也易于上手，对新手友好。。。。有时候，你无法拒绝（比如CTO说，要么你写Java，要么我们换人。。。。）\r\nmysql 其实还是很值得学看看的。。\r\nnodejs 还在不断发展和完善。。。k8s一直想去看看的，可惜没那么多时间。。另外可以多关注一下C++, 现代的C++已经变得还不错的\r\n加个好友不？\r\n","createdAt":1553651583555},{"id":11716,"originId":"5c9b2ebbfd41137eb766268e","articleId":2455,"userId":109,"content":"[@cnlile](/user/cnlile) \r\njava 工程上的设计相当完善，适合（100人以上）大型（单体）项目开发。在开发、测试、运维各方面的生态也是很完善的。\r\nnode.js 在工程上的完善度相比 java 差许多，开发框架也比较稚嫩， js 以前各种奇葩坑（BE 10天就设计出的语言肯定有诸多考虑不周之处）。 npmjs 包数量巨大，良莠不齐。运维方面生态也不足。\r\n\r\n不过，微服务、容器化，服务网格大潮下，   java 的优势变得不那么明显，反而因为占用资源大、（搭建）开发框架环境开销较大，地位变得有些尴尬： 论速度和资源占用比不过 go, C系，rust； （在BFF场景）论开发效率比不过 node.js + TypeScript 。\r\n在前后端分离后，作为接口开发场景，我觉得 node.js(TS) 以及 go 更有优势。\r\n至于数据密集计算，那就在数据库中用存储过程实现啊（我们核心系统 ora 中一千多个存储过程，当然各种坑……）\r\n\r\nmysql 就是一超级记事本，严格说不能叫做（关系型）数据库，因为缺少 RDBMS 中那个 R。 细节上上各种魔鬼：\r\n- 奇葩的 `GROUP BY` 输出字段设计\r\n- DML 不支持事务（据说 v8.x 有支持了）\r\n- 表字段上的约束无效\r\n- 羸弱的索引功能\r\n- 高负载下坏表崩库问题\r\n\r\nk8s 我依照这个模板在实践，感觉还不错 https://github.com/gjmzj/kubeasz \r\n这个轮子来加好友吧  https://github.com/waitingsong/rxxfetch  :D\r\n其实 node.js 通过 FFI 调用 C++/C# （比如 win32api 接口）也不错的 https://github.com/waitingsong/node-win32-api  。 node.js 原生 C++ 扩展的性能、稳定性会更好。\r\n","createdAt":1553673915880},{"id":11717,"originId":"5ca575c96c1de62dce467c1f","articleId":2455,"userId":1922,"content":"首先试了一下你写的代码，确实像你说的那样，b访问要等到a访问忙完了，才会有反应。\r\n然后我又改了一下代码，用了callback的方式，本来以为可以让b访问优先有反应，结果还是一样。\r\n\r\n本来以为默认情况下，回调函数回去另一个进程，和主进程区分开，现在看来，回调函数还是在主进程里面。\r\n\r\n下一步就是要试试手动开线程了，只是现在还不会。\r\n另外手动开线程，不够node吧，本来就是要单线程的，手动开线程的话，是不是违背初衷了？\r\n\r\n下面是我改后的代码\r\n\r\n> \r\nvar http = require('http')\r\nvar i=0;\r\nvar app = http.createServer(function (req, res) {\r\n    i++;\r\n    if (req.url === '/a') {\r\n        console.log(i+'a');\r\n\r\n        myCallback(44,function () {\r\n            console.log(i+'a return');\r\n            // 执行时间要 10s 左右\r\n            res.end('a is ' + new Date())\r\n        })\r\n\r\n    } else if (req.url === '/b') {\r\n        console.log(i+'b');\r\n        res.end('b is ' + new Date())\r\n    }\r\n    else\r\n    {\r\n        console.log(i+'404');\r\n        res.end('404 ' + new Date())\r\n    }\r\n\t});\r\n\tapp.listen(3601, function () {\r\n    console.log('服务已启动')\r\n\t});\r\n\tfunction myCallback(num,callback) {\r\n    // 斐波拉契函数\r\n    function fib(n) {\r\n        if (n === 0) return 0;\r\n        else if (n === 1) return 1;\r\n        else return fib(n - 1) + fib(n - 2)\r\n    }\r\n    fib(num);\r\n\r\n    callback();\r\n\t}\r\n> ","createdAt":1554347465374},{"id":11718,"originId":"5ca70aa531010b2dfbb43714","articleId":2455,"userId":1922,"content":"想了好几天，也找了一些资料，写了点代码进行测试。现在终于明白了。\r\n首先要明确两点：\r\n1、web应用，一般都会和数据库打交道，高并发应该是针对这种情况说的，其他情况是否使用还不太清楚。\r\n2、先要弄清楚同步和异步的区别。\r\n\r\nhttp://baijiahao.baidu.com/s?id=1574062256052309&wfr=spider&for=pc\r\n\r\n感觉这里说的比较清楚。\r\n![a.JPEG](//static.cnodejs.org/Fix5rzUfRwBKeLJ0bIuZZk9SKDxD)\r\n\r\n一直以为“同步”是两个函数一起运行，其实是一个函数执行完毕之后，下一个函数才会被执行。\r\n那么为啥叫同步呢？这就涉及到进程了。\r\nnode有一个进程，数据库有一个或者多个进程，这就至少两个进程了，那么这两个进程是如何工作的呢？\r\n\r\n如果是同步的话，node进程向数据库进程提交一个数据访问请求后，node进程不能执行后续操作，要一直等到数据库返回的数据，才能进行后续代码，这样node进程就被闲置，而且不能接受其他用户的访问请求。\r\nnode是单进程的，如果等待数据库的返回数据，那么就会“卡死”状态。\r\n\r\n而node才有了异步的方法，主进程就是一个，当向数据库发出请求后，不会等待数据库的返回数据，而是会执行后续代码，或者接受其他用户的访问请求。\r\n\r\n这样node主进程可以满负荷运转，不会有任何等待状态，这就是所谓的高并发把。\r\n\r\n那么其他语言是如何处理的呢？\r\n比如c#（java不会），他是同步的，向数据库提交申请后，会等待返回结果，然后c#采用多进程的方式来处理多用户同时访问。\r\n一个用户一个进程，一个进程在等待的时候，有新用户来访问，可以再起个进程来为新用户服务。\r\n但是总体来看，每个进程都可能会有空闲状态。\r\n\r\n","createdAt":1554451109144},{"id":11719,"originId":"5cab196a7edd13064e05365b","articleId":2455,"userId":33,"content":"单核情况下，你用别的语言也是这样","createdAt":1554717034213},{"id":11720,"originId":"5cac483b7edd13064e053d10","articleId":2455,"userId":109,"content":"[@jyk0011](/user/jyk0011) 可以参考这个 https://www.zhihu.com/question/26393784\r\n\r\n[@cnlile](/user/cnlile) 怎样加你呢……","createdAt":1554794555518},{"id":11721,"originId":"5cac4ac17edd13064e053d3d","articleId":2455,"userId":1922,"content":"[@waitingsong](/user/waitingsong) 谢谢，感觉他说的，还没有我的这个图清楚。当然这个图也不是我弄得，我也发了链接。","createdAt":1554795201128},{"id":11722,"originId":"5cb28b82207b2365936ecb5a","articleId":2455,"userId":249,"content":"所以你不要去做cpu密集型的程序，这是node的弱项","createdAt":1555204994579},{"id":11723,"originId":"5cb2d33bdad66d658e408b63","articleId":2455,"userId":109,"content":"[@Choicelin](/user/Choicelin) 问题是所谓适合cpu密集型的开发语言在cpu 占满的情况下就不阻塞了么。。\r\n进一步，在这种场景下进程，线程，协成之间会有啥区别？","createdAt":1555223355448},{"id":11724,"originId":"5e200d5a1225c9423dcd8463","articleId":2455,"userId":3559,"content":"试试这个例子：\r\n/a 在请求外部资源的时候，/b 是可正常响应的\r\n\r\n```js\r\nvar http = require('http');\r\nvar request = require('request');\r\n\r\nvar app = http.createServer(function (req, res) {\r\n  if (req.url === '/a') {\r\n    request({\r\n      url: 'https://m.gsae.com/',\r\n      method: 'get'\r\n    }, function (err, res1, body) {\r\n      res.end('ok');\r\n    });\r\n  } else if (req.url === '/b') {\r\n    res.end('this is b' + new Date());\r\n  }\r\n});\r\n\r\napp.listen(3600, function() {\r\n  console.log('ok');\r\n});\r\n```","createdAt":1579158874642},{"id":11725,"originId":"5e23d55e1225c9423dcd8aee","articleId":2455,"userId":3560,"content":"这个问题本身和node无关，是http协议本身的设计问题，http协议对请求的响应是顺序进行的。","createdAt":1579406686091},{"id":11726,"originId":"5e21e7fa2677214209129fa3","articleId":2456,"userId":358,"content":"https://zhuanlan.zhihu.com/p/39226941\r\n\r\n可以看下","createdAt":1579280378190},{"id":11727,"originId":"5e20286e2677214209129bcb","articleId":2457,"userId":358,"content":"中断不在于 stream，而在于请求超时了吧。\r\n这么大的文件，应该直接 STS 方式上传 OSS，不要通过服务端中转","createdAt":1579165806742},{"id":11728,"originId":"5e214b632677214209129de3","articleId":2457,"userId":3561,"content":"[@atian25](/user/atian25) 非常感谢您的回答，你说的对，文件其实已经上传到服务器，只是请求页面无响应了。 另外你说的STS的方式，大文件的上传，是在前端用js就可以搞定了,而不需要经过后端的服务端是吗？因为在上传文件时候要记录上传文件的路径及名称，大小等属性，后期会根据文件内容在对不同的文件添加描述信息，准备把这些信息持久化记录，这种场景下，是在文件上传成功后在将文件的属性信息发送请求给服务端，将数据记录下来吗？或者有没有其他更好的方法对这些上传的文件进行管理呢？","createdAt":1579240291908},{"id":11729,"originId":"5e2159c81225c9423dcd8722","articleId":2457,"userId":358,"content":"可以看下文档：https://help.aliyun.com/document_detail/100624.html?spm=a2c4g.11186623.6.664.471c734aKpud2b\r\n\r\n上传后获取地址，然后你再拿这个地址和其他信息，post 到你自己的服务器存储即可。","createdAt":1579243976381},{"id":11730,"originId":"5e215e8a2677214209129e49","articleId":2457,"userId":3561,"content":"[@atian25](/user/atian25) 感谢回答","createdAt":1579245194407},{"id":11731,"originId":"5e13fd0c4bea432607fcd386","articleId":2458,"userId":109,"content":"rxjs ","createdAt":1578368268088},{"id":11732,"originId":"5e14025f4bea432607fcd3bf","articleId":2458,"userId":26,"content":"这种完全可以一个async函数自己封装Promise","createdAt":1578369631157},{"id":11733,"originId":"5e14173481adfe260207a34f","articleId":2458,"userId":31,"content":"[code](https://github.com/search?l=JavaScript&o=desc&q=require%28%27async-retry%27%29&s=indexed&type=Code)","createdAt":1578374964779},{"id":11734,"originId":"5e14745381adfe260207a4b1","articleId":2458,"userId":433,"content":"确实简单，本地是可以跑通，测试也可以通过，简单也确实够我用了","createdAt":1578398803316},{"id":11735,"originId":"5e1529104bea432607fcd57e","articleId":2458,"userId":358,"content":"https://github.com/sindresorhus/promise-fun\r\n\r\n你会回来感谢我的","createdAt":1578445072066},{"id":11736,"originId":"5e153cde81adfe260207a52d","articleId":2458,"userId":433,"content":"[@atian25](/user/atian25) 我试试","createdAt":1578450142283},{"id":11737,"originId":"5e15829c81adfe260207a670","articleId":2458,"userId":26,"content":"[@atian25](/user/atian25) 我的天，多好的库呀，简直是神器，后台和electron必备，真的是孤落寡闻了","createdAt":1578467996354},{"id":11738,"originId":"5e16f9ee81adfe260207acba","articleId":2458,"userId":1833,"content":"https://www.npmjs.com/package/promise-retry\r\n用这个吧","createdAt":1578564078701},{"id":11739,"originId":"5e1c2db41225c9423dcd7b2a","articleId":2458,"userId":433,"content":"[@baka397](/user/baka397) 可以 我去看看！","createdAt":1578905012051},{"id":11740,"originId":"5e1c409a1225c9423dcd7b88","articleId":2458,"userId":205,"content":"推荐一波自己写的 https://www.npmjs.com/package/promise.retry\r\nhttps://cnodejs.org/topic/573b2d64fcf698421d20359d","createdAt":1578909850116},{"id":11741,"originId":"5e1d1fb12677214209129376","articleId":2458,"userId":358,"content":"[@HobaiRiku](/user/HobaiRiku) 嘿嘿，你看下作者是谁就知道了，https://github.com/sindresorhus 可是大神级别的","createdAt":1578966961383},{"id":11742,"originId":"5e2145021225c9423dcd86e6","articleId":2458,"userId":110,"content":"用 p-retry","createdAt":1579238658832},{"id":11743,"originId":"5e2153f32677214209129e0d","articleId":2458,"userId":117,"content":"[@atian25](/user/atian25)这是 他的![屏幕快照 2020-01-17 14.26.54.png](//static.cnodejs.org/Fkf8fD9SjNwZ98rnBJEJMbzhu48n)\r\n\r\n\r\n然后我看了下我的\r\n![屏幕快照 2020-01-17 14.27.00.png](//static.cnodejs.org/FqkLQDQi-fDLzZGXcxQfbyn4JvFL)","createdAt":1579242483969},{"id":11744,"originId":"5e0404760696c446bf650187","articleId":2460,"userId":26,"content":"浏览器不会自动给你加header，所以一般要求后端用cookie","createdAt":1577321590975},{"id":11745,"originId":"5e2024872677214209129b93","articleId":2460,"userId":3561,"content":"尽管我回答不了你的问题，但是我有个问题想和你请教一下，使用Node.js（KOA框架）上传大文件GB级的文件，使用文件流上传稳定不？是否需要切片上传？","createdAt":1579164807092},{"id":11746,"originId":"5e1fc49926772142091299e0","articleId":2461,"userId":109,"content":"1. 无源代码\r\n2. 错误信息很明显","createdAt":1579140249453},{"id":11747,"originId":"5e1fc9111225c9423dcd8330","articleId":2461,"userId":3562,"content":"[@waitingsong](/user/waitingsong)  感谢!!\r\n明白是超出了, 但是不了解V8的配置, 不知道如何解决, \r\n上下文: 构建一个自定义结构的文件出来\r\n```javascript\r\nfunction buildFile(filePath, zoomArr, xyArr) {\r\n  fs.readFile(filePath, (err, data) => {\r\n    if (err) {\r\n      console.log('err :', err);\r\n    }\r\n    let count = 0;\r\n    for (let a = 0; a < zoomArr.length; a++) {\r\n      for (let b = 0; b < xyArr[a].lenXArr.length; b++) {\r\n        for (let c = 0; c < xyArr[a].lenYArr.length; c++) {\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n    let bufTempLen = count * 8;\r\n    let bufTemp = Buffer.allocUnsafe(bufTempLen);\r\n    let offset = data.length;\r\n    let buf = Buffer.concat([data, bufTemp], offset + bufTempLen);\r\n    let position = buf.length;\r\n    let pngBufferArr = [];\r\n    let pngBufferLengthSize = 0;\r\n    for (let n = 0; n < zoomArr.length; n++) {\r\n      for (let x = 0; x < xyArr[n].lenXArr.length; x++) {\r\n        for (let y = 0; y < xyArr[n].lenYArr.length; y++) {\r\n          try {\r\n            let pngPath = path.resolve(__dirname, 'download', String(zoomArr[n]), String(xyArr[n].lenXArr[x]), String(xyArr[n].lenYArr[y]) + '.png');\r\n            //console.log(pngPath);\r\n            let pngBuffer = fs.readFileSync(pngPath)\r\n            pngBufferArr.push(pngBuffer);\r\n            let pngSize = pngBuffer.length;\r\n            if (pngSize < 1) {\r\n              console.log('pngSize:',n, x, y);\r\n\t\t\t  console.log(position, pngPath);\r\n              process.exit(0);\r\n            }\r\n            pngBufferLengthSize += pngSize;\r\n            buf.writeInt32LE(position, offset);\r\n            offset += 4;\r\n            position += pngSize;\r\n            buf.writeInt32LE(pngSize, offset);\r\n            offset += 4;\r\n          } catch (err) {\r\n            if (err) {\r\n\t\t\t  console.log(err,'\\n')\r\n              console.log('err',n, x, y);\r\n              process.exit(0);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    let mapBuffer = Buffer.concat([buf, ...pngBufferArr], buf.length + pngBufferLengthSize);\r\n    fs.writeFile(DZDT_FILE_PATH ? DZDT_FILE_PATH : './newMap.dzdt', mapBuffer, err => {\r\n      if (err) {\r\n        console.log('err :', err);\r\n      }\r\n    })\r\n  })\r\n}\r\n```","createdAt":1579141393242},{"id":11748,"originId":"5e1fd24d1225c9423dcd835d","articleId":2461,"userId":3562,"content":"[@waitingsong](/user/waitingsong)  官方源码 : (做了限制)\r\n```javascript\r\nconst validateInt32 = hideStackFrames(\r\n  (value, name, min = -2147483648, max = 2147483647) => {\r\n    // The defaults for min and max correspond to the limits of 32-bit integers.\r\n    if (!isInt32(value)) {\r\n      if (typeof value !== 'number') {\r\n        throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\r\n      }\r\n      if (!NumberIsInteger(value)) {\r\n        throw new ERR_OUT_OF_RANGE(name, 'an integer', value);\r\n      }\r\n      throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\r\n    }\r\n    if (value < min || value > max) {\r\n      throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\r\n    }\r\n  }\r\n);\r\n```\r\n[Link](https://github.com/nodejs/node/blob/fc4e4135547a73bb54bf7d56ad1d478cf80c3140/lib/internal/validators.js#L81)","createdAt":1579143757131},{"id":11749,"originId":"5e1fd5362677214209129a31","articleId":2461,"userId":3562,"content":"[@waitingsong](/user/waitingsong) 再次感谢, 我知道怎么改了, 过年好好补一下计算机基础(非科班,自学)","createdAt":1579144502598},{"id":11750,"originId":"5e1fbd551225c9423dcd82d4","articleId":2463,"userId":358,"content":"只要开发工具对 d.ts 支持就可以了，我们会自动生成 typings。\r\nVSCode 等都是支持的。","createdAt":1579138389573},{"id":11751,"originId":"5e1bdfcc2677214209129149","articleId":2464,"userId":549,"content":"webpack的设置 资源根路径（可能叫publicPath）需要设置/test","createdAt":1578885068875},{"id":11752,"originId":"5e1bf0bf1225c9423dcd7a17","articleId":2464,"userId":1644,"content":" F12-network，看一下前端资源访问的链接是什么","createdAt":1578889407735},{"id":11753,"originId":"5e1bf5271225c9423dcd7a20","articleId":2464,"userId":3566,"content":"location /test/块里面需要rewrite，否则你代理之后的访问路径就相当于：http://127.0.0.1:8088/test/xxx.css，这样的话当然是404","createdAt":1578890535112},{"id":11754,"originId":"5e1bfa30267721420912917e","articleId":2464,"userId":3565,"content":"我就是想直接部署到8088端口的根目录下，然后又能通过8001/test/ 二级目录访问。 所有umi的base publicpath应该就不需要改把，默认\"/\"就行。我先去试下rewrite","createdAt":1578891824235},{"id":11755,"originId":"5e1bfd5e2677214209129186","articleId":2464,"userId":3565,"content":"[@funswe](/user/funswe) 老哥 不能用rewrite呀，现在就是外网8088端口没开放，只开放了8001端口。\r\n我现在暂时的解决办法就是改代码配置文件，只部署到8001的二级目录了","createdAt":1578892638827},{"id":11756,"originId":"5e1c03f726772142091291a4","articleId":2464,"userId":3566,"content":"那修改成下面这样可以吗？\r\n```\r\nlocation /test/(.*){\r\n            proxy_pass   http://127.0.0.1:8088/$1;\r\n\t\t   \tproxy_set_header host $host;\r\n\t\t\tproxy_set_header X-Real-IP      $remote_addr;\r\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        }\r\n```","createdAt":1578894327534},{"id":11757,"originId":"5e1c099326772142091291c2","articleId":2464,"userId":3565,"content":"[@funswe](/user/funswe)  下面这样写可以访问，但是刷新就不行了，try_files又要踩坑。我觉得本身这样配置就是不对的。还是老实改配置代码，部署了\r\n```\r\n    server {\r\n        listen       8001;\r\n\t\t#单独代理静态文件\r\n\t\tlocation ~ (.*)\\.(js|css|jpg|jpeg|gif|png|ico|pdf|txt)$ {\r\n           proxy_pass  http://127.0.0.1:8888$1.$2;\r\n        # rewrite (.*).(html|js|css|gif|jpg|png|bmp|swf)$ http://127.0.0.1:8888$1.$2 break;\r\n        }\r\n\t\tlocation /test/{\r\n            proxy_pass   http://127.0.0.1:8088/;\r\n\t\t   \tproxy_set_header host $host;\r\n\t\t\tproxy_set_header X-Real-IP      $remote_addr;\r\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        }\r\n    }\r\n\t```","createdAt":1578895763515},{"id":11758,"originId":"5e1e714d26772142091296ae","articleId":2464,"userId":3567,"content":"[@rianran1993](/user/rianran1993) 这样子可以吗？\r\n```\r\nserver {\r\n        listen       8088 default_server;\r\n        server_name  somename  alias  another.alias;\r\n        location /test/ {\r\n\t\t\talias {资源目录}\r\n         }\r\n\t\t # ....\r\n    }\r\n```","createdAt":1579053389490},{"id":11759,"originId":"5e1e77bd26772142091296c3","articleId":2464,"userId":877,"content":"要么 ant design pro 项目改下 webpack 配制, 把 publicePath 改为为相对路径 `./`  ,  改 '/test' 那么 8088就不能用了\r\n\r\n要么把 资源路径也反向代理到 8001下面","createdAt":1579055037850},{"id":11760,"originId":"5d779f11a7474a231a58acdb","articleId":2465,"userId":109,"content":"package.json 里面加上\r\n```json\r\n  \"nyc\": {\r\n    \"include\": [\r\n      \"src/**/*.ts\"\r\n    ],\r\n    \"exclude\": [\r\n      \".githooks\",\r\n      \"dist\",\r\n      \"node_modules*\",\r\n      \"src/bin\",\r\n      \"src/domain.ts\",\r\n      \"src/interface.ts\",\r\n      \"test*\",\r\n      \"**/node_modules*\",\r\n      \"**/*.d.ts\",\r\n      \"**/*.js\"\r\n    ],\r\n    \"extension\": [\r\n      \".ts\"\r\n    ],\r\n    \"reporter\": [\r\n      \"text-summary\",\r\n      \"json\",\r\n      \"html\"\r\n    ],\r\n    \"all\": true\r\n  }\r\n```\r\n执行之后会在项目目录下生成 `coverage` ， 用浏览器打开入口文件（一般是 index.html）。","createdAt":1568120593172},{"id":11761,"originId":"5d7effe7cac77d1859936e97","articleId":2465,"userId":1644,"content":"楼上已经说了 coverage 配置，我来贴下效果吧，可以看到未覆盖部分：\r\n\r\n![image.png](//static.cnodejs.org/FicZ0eF1miGjIta2renuVXbwZdKC)\r\n\r\n![image.png](//static.cnodejs.org/FjedosPw-8Oq-LoDi1nRVC1E1w6H)","createdAt":1568604135469},{"id":11762,"originId":"5da40f19ece3813ad9ba1934","articleId":2465,"userId":3448,"content":"[@waitingsong](/user/waitingsong) [@JianmingXia](/user/JianmingXia)  原来是 报告类别配置的问题  多谢大家 ","createdAt":1571032857678},{"id":11763,"originId":"5da49076865a9844a301b468","articleId":2465,"userId":358,"content":"不用加配置，`egg-bin cov` 后就有那个文件的了","createdAt":1571065974001},{"id":11764,"originId":"5e1d391c1225c9423dcd7d17","articleId":2465,"userId":3448,"content":"[@atian25](/user/atian25) 还真是。。。","createdAt":1578973468329},{"id":11765,"originId":"5e1c6d972677214209129300","articleId":2466,"userId":3132,"content":"```typescript\r\nconst call = <T extends (...args: any) => any, U>(fn: T, dv: U): ReturnType<T> | U => {\r\n  try {\r\n    return fn();\r\n  } catch (e) {\r\n    return dv;\r\n  }\r\n};\r\n\r\nconst fn1 = () => 1;\r\nconst fn2 = () => 'string';\r\n\r\nconst run = () => {\r\n  const v1 = call(fn1, true);\r\n  // const v1: number | true\r\n  const v2 = call(fn2, undefined);\r\n  // const v2: string | undefined\r\n};\r\n```","createdAt":1578921367553},{"id":11766,"originId":"5e1d22f61225c9423dcd7c94","articleId":2466,"userId":3448,"content":"哦哦 我懂了 是我前面的 defaultValue 设置成 any 了 所以后面的 typeof defaultValue | ReturnType<typeof fn> 就限制不住了 犯了个低级错误。。。\r\n多谢～ [@noe132](/user/noe132) ","createdAt":1578967798821},{"id":11767,"originId":"5e15eb304bea432607fcd8c4","articleId":2467,"userId":109,"content":"cherio  好像是这个包，用于解析页面为dom结构","createdAt":1578494768825},{"id":11768,"originId":"5e16869b81adfe260207a854","articleId":2467,"userId":264,"content":"Puppeteer 了解下","createdAt":1578534555916},{"id":11769,"originId":"5e1694884bea432607fcd980","articleId":2467,"userId":615,"content":"[@waitingsong](/user/waitingsong) cheerio吧","createdAt":1578538120189},{"id":11770,"originId":"5e1695934bea432607fcd995","articleId":2467,"userId":153,"content":"[@sbfkcel](/user/sbfkcel) 用了，会丢失样式","createdAt":1578538387289},{"id":11771,"originId":"5e1695f24bea432607fcd99e","articleId":2467,"userId":153,"content":"[@sbfkcel](/user/sbfkcel) 页面解析以后，获取dom，然后将dom的样式内联，在客户端和网页端的样式是不同的，不太清楚原因，网页端是与页面一样的，客户端会丢失一部分样式\r\n\r\n或者你可以尝试，使用上面的代码，去任何一个网站去实验，会发现字体样式会丢失","createdAt":1578538482544},{"id":11772,"originId":"5e16960f4bea432607fcd9a2","articleId":2467,"userId":153,"content":"[@waitingsong](/user/waitingsong) Puppeteer更好，截屏等功能都挺好","createdAt":1578538511694},{"id":11773,"originId":"5e16b92181adfe260207a9e5","articleId":2467,"userId":1574,"content":"邮件应该是支持style标签的，所以应该不需要把样式内联到dom上","createdAt":1578547489214},{"id":11774,"originId":"5e1d16331225c9423dcd7c5e","articleId":2467,"userId":264,"content":"[@Rabbitzzc](/user/Rabbitzzc) 如果要字体的话，你得转成图形才可以了。","createdAt":1578964531308},{"id":11775,"originId":"5e13f1b781adfe260207a258","articleId":2468,"userId":1713,"content":"定时扫描文件是否有改动？","createdAt":1578365367931},{"id":11776,"originId":"5e13f25a4bea432607fcd32e","articleId":2468,"userId":3569,"content":"[@im-here](/user/im-here) 文件改动事件可以监听到，可是回传是要在改动之后用户关闭编辑器进行的，如果编辑器没有关闭，就算文件改动了也不执行回传的，说明用户还有意向继续编辑","createdAt":1578365530149},{"id":11777,"originId":"5e15472281adfe260207a55c","articleId":2468,"userId":1713,"content":"[@liubin-webFront](/user/liubin-webFront) 那直接监听文件的修改时间试试。 如果用户用的编辑器不是自动保存的话，理论上用户在没有按下ctrl+s之前文件的修改时间应该都不会变的。只要检测到修改时间有变化就同步呗。\r\n\r\n你这种不是用的你自己的编辑器，应该不可能做到用户关闭编辑器再回传。\r\n\r\n参考百度网盘这种类似的，应该都是定时扫描+同步","createdAt":1578452770741},{"id":11778,"originId":"5e154ab281adfe260207a574","articleId":2468,"userId":1011,"content":"可以试试这种方案：\r\n使用`child_process`模块执行进程查询命令，window是`tasklist`，linux和mac是`ps`.\r\n然后列一些支持的编辑器列表，从查询的列表中找出来再监听进程状态。当发生exit事件时发起你的业务代码逻辑\r\n\r\n题外话：\r\n你这种监听编辑器退出的方案是错误的，如果是我用命令通道`>`修改这个文件呢？最好是监听文件改变的方式。","createdAt":1578453682236},{"id":11779,"originId":"5e1566e84bea432607fcd69c","articleId":2468,"userId":545,"content":"简单点的，用户点关闭，弹窗确认，同时保存~、\r\n或者直接弹个进度条，保存完自动关闭。","createdAt":1578460904871},{"id":11780,"originId":"5e157fbd4bea432607fcd745","articleId":2468,"userId":26,"content":"这个需求的方案的确是有问题的，类似于手机壁纸颜色要根据手机壳颜色变化。    \r\n调用系统的编辑器，就相当于另外的进程，和主程序就完全没有关系了，你要进行进程间通讯，而另外一个进程是不可编程的，基本上你只能让主程序做类似人类的操作，屏幕监听判断那显然不实际，那就剩监听任务管理器（进程列表），但是你以什么条件判断哪类进程的怎么样的变化作为触发“用户在结束了在这个编辑器上对该文件的编辑”界限是个问题。\r\n大致上其实你只能通过进程名称（镜像名称），id和这类名称的进程的数量来判断，但是不同编辑器启动的进程是不一样的，有的很多有的可能1两个，并且启动过程中可能是变化的，加上如果系统本身就开有此类编辑器，有的编辑器编辑过程中插件等又可能会多出一些进程或关掉一些进程，规律可能是不同的，大大增加这个事件界定的难度，也就是耦合度非常高，你可能需要对不同操作系统不同编辑器的启动进程进行预先的规律判断，才有可能去实现这个逻辑，而且这个逻辑的可靠性可能是不确定的。    \r\n对于你这个需求，我特意对vscode进行了测试，假设是vscode，win上，当前没有打开任何vscode，可以在下载前获取code.exe进程列表，这时候应该是空的，记录下来，下载完成调用打开文件（假设默认就是启动了vscode，一个窗口），这时候会有差不多14个进程，当编辑完后这14个进程会全部不见，可以界定为触发了需求中的事件。另外是当系统已经打开过vscode，一个窗口，那么再打开一个窗口，完成后差不多会增加2个code.exe进程，那么逻辑可以是下载前同样检查一次，记录当前已经存在的code.exe进程的列表，编辑开始的时候记录另外一个列表，定时检查列表是否恢复到前一个状态，如果恢复了，可以界定触发了关闭编辑的。以下是简单的代码：\r\n```js\r\nconst cp = require('child_process');\r\nconst defaults = {\r\n  cwd: __dirname,\r\n  env: process.env\r\n};\r\n// 编辑前记录一次code.exe的tasklist列表\r\nconst checkTaskListCmd = 'tasklist /FI \"IMAGENAME eq code.exe\"';\r\n// 这里处理命令行返回的应该需要更严谨一些，不过演示就这样先了\r\nconst pidReg = /\\d{4,5}/g;\r\nconst beforeOpenTaskList = cp\r\n  .execSync(checkTaskListCmd)\r\n  .toString()\r\n  .match(pidReg)\r\n  .sort((a, b) => a - b);\r\nconst open = cp.spawn('explorer.exe', ['12312.txt'], defaults);\r\n\r\nopen.on('close', () => {\r\n  console.log('已经打开了系统默认编辑器');\r\n  const checkClose = setInterval(() => {\r\n    const nowTaskList = cp\r\n      .execSync(checkTaskListCmd)\r\n      .toString()\r\n      .match(pidReg)\r\n      .sort((a, b) => a - b);\r\n    if (nowTaskList.toString() === beforeOpenTaskList.toString()) {\r\n      console.log('用户关闭了编辑');\r\n      clearInterval(checkClose);\r\n    }\r\n  }, 1000);\r\n});\r\n\r\n```\r\n然后想想，如果编辑过程中，用户又用其他vscode打开了一个新的窗口，那这个逻辑又有缺陷了，还得实际检测和标记具体是增加了哪个进程，判断要细到“哪些进程对应的就是需要触发的这个文件”","createdAt":1578467261749},{"id":11781,"originId":"5e15ec2c4bea432607fcd8c9","articleId":2468,"userId":109,"content":"用 ffi 监听系统消息(user32.dll?) 过滤出文件关闭事件。不知道是否可行。","createdAt":1578495020148},{"id":11782,"originId":"5e1c16ea267721420912920d","articleId":2468,"userId":3569,"content":"[@ty4z2008](/user/ty4z2008) 我说的监听编辑器退出应该和你说的监听进程状态是一个意思，本人是做web前端的，对window、Linus系统的一些概念不是太熟，描绘的不太专业哈。至于用什么方法去编辑，我在程序里写的是用户系统对此文件默认的编辑器，看用户电脑设置了，如果用户没有装任何编辑此文件的编辑器，就和windows上打开一个没有编辑器文件的显示一样。谢谢你的回复，我会撸一遍的。","createdAt":1578899178541},{"id":11783,"originId":"5e1c1f431225c9423dcd7aef","articleId":2468,"userId":3569,"content":"[@HobaiRiku](/user/HobaiRiku) 谢谢你的耐心解答。我们做的产品是类似于云盘，对于云盘上的文件可以有在线编辑、和离线编辑，在线编辑就是我们软件里集成的一些编辑器，离线编辑就是把这个文件下载到本地，用本地默认编辑器编辑完回传再删掉本地的，在程序里我能知道的信息就是这个文件的id、名称、格式、文件下载的位置，至于用户能不能打得开，用什么编辑器打开，我是不知道的，或者换一种思路，在windows上打开一个文件，这个文件就会被一个进程占用，比如这时候删除这个文件是删不掉的， 如果在进程改变的时候同时判断这个文件有没有被进程占用，是不是就知道这个文件有没有还被编辑器打开呢。","createdAt":1578901315871},{"id":11784,"originId":"5e1c4ef92677214209129298","articleId":2468,"userId":26,"content":"[@liubin-webFront](/user/liubin-webFront) 不同编辑器的逻辑是不一样的，比如目前大部分的编辑器一般都是缓存起来，你打开文件后源文件可以随便删除，而又比如excel这种，不管你打开多少个excel，都只有一个进程，想统一起来我感觉还是有点难。","createdAt":1578913529821},{"id":11785,"originId":"5ddf39cc6043397a546d9fbc","articleId":2469,"userId":1713,"content":"现在外面开票不都是直接扫二维码么？ 用那个现成的二维码？","createdAt":1574910412637},{"id":11786,"originId":"5de4bb676043397a546dad94","articleId":2469,"userId":390,"content":"http://fw1.shdzfp.com:28888/doc","createdAt":1575271271123},{"id":11787,"originId":"5e1ad04a1225c9423dcd78e6","articleId":2469,"userId":3497,"content":"[@18820227745](/user/18820227745)  好的 谢谢","createdAt":1578815562364},{"id":11788,"originId":"5e1194154bea432607fcce7f","articleId":2470,"userId":109,"content":"粘包的术语是生造出来不正确的。\r\n实际场景是需要你自行定义（设计）数据流解析方式（比如用 \\r\\n 作终止符）","createdAt":1578210325820},{"id":11789,"originId":"5e128f004bea432607fccf71","articleId":2470,"userId":26,"content":"楼上说得非常到位，数据流协议和处理必须自己根据需求制定，没有协议的数据流是`不科学`的。推荐看看变形流`stream.Transform 类`，比如zlib,crypto包。你需要的不是`on('data', data =>{})`，而是`on('frame',frame =>{})`。根据`\\r\\n`分割，可以了解`readline`","createdAt":1578274560605},{"id":11790,"originId":"5e13497f4bea432607fcd23d","articleId":2470,"userId":3570,"content":"[@waitingsong](/user/waitingsong) 多谢，通过自己实践，慢慢理解了","createdAt":1578322303884},{"id":11791,"originId":"5e184c2f2677214209128e5a","articleId":2470,"userId":123,"content":"可以参考这个： https://github.com/lvgithub/stick#readme","createdAt":1578650671613},{"id":11792,"originId":"5e001f57ba8f6d46c4ede936","articleId":2471,"userId":687,"content":"客户端实现websocket协议即可。","createdAt":1577066327129},{"id":11793,"originId":"5e158f4081adfe260207a6e7","articleId":2471,"userId":26,"content":"socket.io可以说是基于websocket的一种协议，服务器是运行在Nodejs上的，客户端一般也是使用js，至少官方提供的是js，客户端在浏览器或者node上都是可以用现成的客户端的，所以electron是比较方便就可以接入的，而其他语言，必须按照socket.io的逻辑去实现客户端，可以在GitHub上搜搜，应该每种语言都有很多。","createdAt":1578471232648},{"id":11794,"originId":"5e13145081adfe260207a142","articleId":2472,"userId":1673,"content":"https://eggjs.org/zh-cn/tutorials/passport.html\r\n\r\nEgg 在它之上提供了 egg-passport 插件，把初始化、鉴权成功后的回调处理等通用逻辑封装掉，使得开发者仅需调用几个 API 即可方便的使用 Passport 。","createdAt":1578308688301},{"id":11795,"originId":"5e1402a54bea432607fcd3c5","articleId":2472,"userId":1288,"content":"参考 https://www.cnblogs.com/lihuidu/p/6495247.html","createdAt":1578369701567},{"id":11796,"originId":"5dfc838f0696c446bf64f59d","articleId":2473,"userId":3571,"content":"macBook  Pro","createdAt":1576829839126},{"id":11797,"originId":"5dfc84340696c446bf64f5a3","articleId":2473,"userId":111,"content":"![asus.jpg](//static.cnodejs.org/FmX9E_CNuqX3fXQOivc_rPRAcqF4)\r\nhttps://www.asus.com.cn/store/gallery-43.html\r\n写nodejs你需要双硬盘 参考 https://cnodejs.org/topic/5df2eea1df1b9a40d14c65b1\r\n","createdAt":1576830004003},{"id":11798,"originId":"5dfc91baba8f6d46c4ede69f","articleId":2473,"userId":1011,"content":"Mac pro ","createdAt":1576833466956},{"id":11799,"originId":"5dfc96e2ba8f6d46c4ede6c9","articleId":2473,"userId":1737,"content":"Mac pro+1，window就别想了","createdAt":1576834786536},{"id":11800,"originId":"5dfcc21d0696c446bf64f670","articleId":2473,"userId":1517,"content":"兄弟，相信我用win就对了","createdAt":1576845853785},{"id":11801,"originId":"5dfd7c99ba8f6d46c4ede77b","articleId":2473,"userId":103,"content":"有钱用mac，没钱用win也行。我们公司统一配的小米笔记本也觉得不错","createdAt":1576893593300},{"id":11802,"originId":"5dff2251ba8f6d46c4ede874","articleId":2473,"userId":3562,"content":"Y7000 I7 - 9750 + 16G/32G + 1TB + GTX1650 \r\n双Boot : WIN10 1903 、MacOS Mojave 10.14.6\r\n起飞","createdAt":1577001553562},{"id":11803,"originId":"5dff3769ba8f6d46c4ede87e","articleId":2473,"userId":525,"content":"Macbook pro +1,讲道理开箱即用的开发还是别用windows,mac很少有迷之报错/蓝屏","createdAt":1577006953175},{"id":11804,"originId":"5e002abd0696c446bf64f934","articleId":2473,"userId":688,"content":"不要用小米，之前买的小米pro顶配，半年就问题不断","createdAt":1577069245535},{"id":11805,"originId":"5e007c4d0696c446bf64fad2","articleId":2473,"userId":11,"content":"联想小新 Pro 13.3，只推荐顶配 i7-10710U，性能释放比较不错，低压 U 也到六核十二线程时代了","createdAt":1577090125749},{"id":11806,"originId":"5e01704dba8f6d46c4edec7c","articleId":2473,"userId":97,"content":"[@hyj1991](/user/hyj1991) 我以为大佬得推荐 Mac Pro 四十W 那种😝","createdAt":1577152589833},{"id":11807,"originId":"5e01ab460696c446bf64fd3c","articleId":2473,"userId":11,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 现在有了子系统，其实 win 下开发体验也不错，这台性价比挺高的，当然预算充足还是 mbp 走起最舒服了","createdAt":1577167686395},{"id":11808,"originId":"5e01b9ec0696c446bf64fd69","articleId":2473,"userId":1137,"content":"上面说Mac pro的是家里多少矿。。\r\n机型看个人，预算充足就mbp，这些年开发的经验，内存建议16G往上 ","createdAt":1577171436687},{"id":11809,"originId":"5e02b6630696c446bf64fefd","articleId":2473,"userId":1523,"content":"[@DWNEWS-weiqingtao](/user/DWNEWS-weiqingtao) 目前预算不够买","createdAt":1577236067193},{"id":11810,"originId":"5e02b66f0696c446bf64ff01","articleId":2473,"userId":1523,"content":"[@yakczh](/user/yakczh) 我看看，谢谢你","createdAt":1577236079573},{"id":11811,"originId":"5e02b6740696c446bf64ff05","articleId":2473,"userId":1523,"content":"[@ty4z2008](/user/ty4z2008) 目前预算不够买","createdAt":1577236084649},{"id":11812,"originId":"5e02b6820696c446bf64ff09","articleId":2473,"userId":1523,"content":"[@pretty-foam](/user/pretty-foam) 目前预算不够买","createdAt":1577236098201},{"id":11813,"originId":"5e02b68eba8f6d46c4edef9f","articleId":2473,"userId":1523,"content":"[@bs32g1038](/user/bs32g1038) 嗯嗯","createdAt":1577236110666},{"id":11814,"originId":"5e02b699ba8f6d46c4edefa3","articleId":2473,"userId":1523,"content":"[@yuedun](/user/yuedun) 哦哦","createdAt":1577236121487},{"id":11815,"originId":"5e02b6a4ba8f6d46c4edefa7","articleId":2473,"userId":1523,"content":"[@LeavesSky](/user/LeavesSky) 小本本记下来","createdAt":1577236132903},{"id":11816,"originId":"5e02b6b1ba8f6d46c4edefab","articleId":2473,"userId":1523,"content":"[@Delete540](/user/Delete540) 确实","createdAt":1577236145204},{"id":11817,"originId":"5e02b6b90696c446bf64ff0d","articleId":2473,"userId":1523,"content":"[@wujohns](/user/wujohns) 哦哦","createdAt":1577236153593},{"id":11818,"originId":"5e02b6d60696c446bf64ff11","articleId":2473,"userId":1523,"content":"[@hyj1991](/user/hyj1991) 小新，我看了，感觉不太好，而且比较讨厌联想，太恶心了","createdAt":1577236182644},{"id":11819,"originId":"5e02b7030696c446bf64ff15","articleId":2473,"userId":1523,"content":"[@kidbai](/user/kidbai) 小本本记下来","createdAt":1577236227602},{"id":11820,"originId":"5e0319e5ba8f6d46c4edf146","articleId":2473,"userId":3572,"content":"用mac，强烈推荐，如果没有可以用windows,也可以","createdAt":1577261541979},{"id":11821,"originId":"5e031c3cba8f6d46c4edf159","articleId":2473,"userId":108,"content":"MacBook Pro 没有比这个更适合的了。\r\n\r\nWin 系的电脑拿来开发就是渣渣","createdAt":1577262140154},{"id":11822,"originId":"5e03684c0696c446bf650123","articleId":2473,"userId":259,"content":"mbp 16, 32G+ 心疼两天就行。","createdAt":1577281612192},{"id":11823,"originId":"5e056897ba8f6d46c4edf5e3","articleId":2473,"userId":1011,"content":"[@SquabbyZ](/user/SquabbyZ) 可以考虑二手的。价格也还公道","createdAt":1577412759685},{"id":11824,"originId":"5e085e59ba8f6d46c4edfb49","articleId":2473,"userId":1644,"content":"推荐 mac pro +1","createdAt":1577606745568},{"id":11825,"originId":"5e14004481adfe260207a2f1","articleId":2473,"userId":1244,"content":"程序员必备rmbp，建议15英寸屏幕","createdAt":1578369092031},{"id":11826,"originId":"5e0ccd96f628e05aa2172dc6","articleId":2474,"userId":1011,"content":"如果是后台管理系统，并发度特别低，并且是单条SQL就可以完成。你完全可以不用考虑。\r\n但当你涉及操作的表特别多，此时你可以放在一个事务里面处理，这样不需要给表加锁。毕竟给表加锁的性能比较低\r\n如果你的数据库支持行锁，假设你使用的MySQL5.5+\r\n你可以使用`SELECT … FOR UPDATE`或`SELECT ... LOCK IN SHARE MODE`\r\n这两者有一定区别。\r\n前者是排他锁。加锁之后其他人不能读取，当需要读取时遇到加锁了必须等待。吞吐量低，查询受影响\r\n后者是共享锁，锁了之后其他人可以读取，但是不能修改和删除。写吞吐量低，查询不受影响\r\n\r\n这两者都是悲观锁，还有一种是乐观锁。在db 表里面加一个版本号或者是时间戳，写之前先查。最后以版本号或者是时间戳作为条件来更新。版本号就是`update ...,set version+1 where version=xxx`.时间戳就是`update ... set time=now() where time=xxxx`\r\n- [14.10.2.4 Locking Reads](https://dev.mysql.com/doc/refman/5.5/en/innodb-locking-reads.html)","createdAt":1577897366046},{"id":11827,"originId":"5e0d67edf628e05aa2172e9c","articleId":2474,"userId":1199,"content":"可以在update语句中增加条件,只对状态为某种情况的数据进行修改.\r\n然后根据返回的effect rows 来判断是否更新成功.\r\n\r\n本来如果是普通java应用,根据主键加锁阻塞线程反而是最简单的,不过估计你是node.js,只能考虑分布式锁和数据库锁了.","createdAt":1577936877872},{"id":11828,"originId":"5e0d683301c0915a9d9bd841","articleId":2474,"userId":1199,"content":"可以在update语句中增加条件,只对状态为某种情况的数据进行修改.\r\n然后根据返回的effect rows 来判断是否更新成功.\r\n\r\n本来如果是普通java应用,根据主键加锁阻塞线程反而是最简单的,不过估计你是node.js,只能考虑分布式锁和数据库锁了.\r\n","createdAt":1577936947813},{"id":11829,"originId":"5e0f3bfb81adfe2602079c6e","articleId":2474,"userId":1377,"content":"加个字段，控制权限不就好了？\r\n例如，加个字段updatedBy, 非这个字段的用户 或 超级管理员什么的，不可对这条数据修改，删除","createdAt":1578056699177},{"id":11830,"originId":"5e0f64b681adfe2602079caf","articleId":2474,"userId":109,"content":"lz 先了解下 事物隔离 以及相关的锁。","createdAt":1578067126653},{"id":11831,"originId":"5e13fe9481adfe260207a2d1","articleId":2474,"userId":1244,"content":"需要了解的有单个事务，并发事务，事务隔离级别，排他锁(x锁)，共享锁(s锁)，不同的数据库管理系统，不同的存储引擎有所差别，比如postgresql和mysql是不一样的，mysql的不同存储引擎也是不一样的，比如支持的锁的粒度等。锁的粒度会影响到数据库处理并发事务的能力，TPS（每秒处理的事务数量）。","createdAt":1578368660511},{"id":11832,"originId":"5df34361df1b9a40d14c67b0","articleId":2475,"userId":1737,"content":" 图片的display属性默认inline,而这个属性的vertical-align的默认值是baseline\r\nvertical-align:middle;\r\n或者父盒子diaplay:flex; ","createdAt":1576223585502},{"id":11833,"originId":"5df343ddc9ab2e579c2155e5","articleId":2475,"userId":1545,"content":"[@pretty-foam](/user/pretty-foam) 不好意思，我没有表述清楚。项目里没用img标签，而是background-image。","createdAt":1576223709472},{"id":11834,"originId":"5df34bf3c9ab2e579c215608","articleId":2475,"userId":1618,"content":"background-size: 100%;","createdAt":1576225779165},{"id":11835,"originId":"5df353b4df1b9a40d14c67f5","articleId":2475,"userId":1197,"content":"font-size:0","createdAt":1576227764872},{"id":11836,"originId":"5df35a2bdf1b9a40d14c680a","articleId":2475,"userId":1517,"content":"```css\r\n// css\r\nbody {\r\n\tmargin: 0;\r\n}\r\n#DIV_4 {\r\n  height: 578px;\r\n  background: rgba(0, 0, 0, 0) url(https://i.imgur.com/P9xxsyg.png) center\r\n  no-repeat;\r\n}\r\n```\r\n```html\r\n// html\r\n<div id=\"DIV_1\">\r\n\t<div id=\"DIV_4\"></div>\r\n</div>\r\n```\r\n","createdAt":1576229419327},{"id":11837,"originId":"5df35b10c9ab2e579c21564e","articleId":2475,"userId":523,"content":"这种情况一般是因为换行符造成的","createdAt":1576229648130},{"id":11838,"originId":"5df37623df1b9a40d14c6881","articleId":2475,"userId":21,"content":"自从做了前端，才知道什么叫像素眼","createdAt":1576236579348},{"id":11839,"originId":"5e09c4ec0696c446bf650d3d","articleId":2475,"userId":3573,"content":"上面的回复全部都不在点上, 真正的原因是, 图片适应屏幕时, 高度出现了小数点\r\n\r\n比如一张图片 750x398的图片,  用rem自适应, { width: 7.5rem; height: 3.98rem; } 在6plus上浏览, 那么这张图片会被适应成 414 x 219.696\r\n\r\n![107741574929295_.pic.jpg](//static.cnodejs.org/FiLcNYpIj6Ik9l9lh2N-VwC_0NWM)\r\n\r\n所以图片的高度尽可能在适应屏幕后, 不要出现小数, 就不会出现这个","createdAt":1577698540871},{"id":11840,"originId":"5e0a0e68ba8f6d46c4edfeba","articleId":2475,"userId":1545,"content":"[@lincenying](/user/lincenying) 谢谢你的回答。但我并没有用rem或其它自适应方案，就是px，所以不应该有小数点的问题吧？ [代码](https://gist.github.com/shuiRong/f3206e73bc0e4fd9aff9eb67e362193a#file-bug)","createdAt":1577717352530},{"id":11841,"originId":"5e0d7ace01c0915a9d9bd875","articleId":2475,"userId":3573,"content":"[@shuiRong](/user/shuiRong)   一样的, 因为要等比缩小, 你把cover属性去了, 你看还不会出出现1像素的白条","createdAt":1577941710955},{"id":11842,"originId":"5e0df0dbf628e05aa21730b7","articleId":2475,"userId":1545,"content":"[@lincenying](/user/lincenying) 还是有","createdAt":1577971931671},{"id":11843,"originId":"5e0ef49a81adfe2602079bb1","articleId":2475,"userId":3573,"content":"[@shuiRong](/user/shuiRong) \r\n\r\n你图片是1080的宽度,\r\n\r\n模拟器1080宽度\r\n![WX20200103-155328@2x.png](//static.cnodejs.org/FtaU1Tq8zc7PZCtDFNtHGTIkfGwo)\r\n模拟器1079宽度\r\n![WX20200103-155412@2x.png](//static.cnodejs.org/Fm0LOd5iemALvIVaUyDnj2NChhYc)\r\n\r\n只要浏览器宽度小于1080像素, 图片等比压缩后, 就可能出现白条\r\n浏览器宽度>=1080, 图片不压缩, 就不会出现白条\r\n\r\n这白条也就是背景颜色","createdAt":1578038426282},{"id":11844,"originId":"5e0f56e54bea432607fccd00","articleId":2475,"userId":1545,"content":"[@lincenying](/user/lincenying) 明白了。谢老哥解惑。\r\n白条问题解决后，立马又遇到个问题：两个图片下方重合的部分有痕迹。（我很奇怪，你上面第一张图就完全看不到痕迹）。\r\n我更新了[demo代码](https://gist.githubusercontent.com/shuiRong/f3206e73bc0e4fd9aff9eb67e362193a/raw/6e4097bb5b87c633eac1d9980459190dbf5966a2/html)，把所有无关信息删掉了，只留下两块CSS。期待大佬提供思路。\r\n\r\n![这样](https://i.imgur.com/DAYVDLZ.jpg)\r\n","createdAt":1578063589107},{"id":11845,"originId":"5e13df2181adfe260207a1e0","articleId":2475,"userId":3573,"content":"目测是你这图片有半透明效果, 两个背景图片前面加个背景颜色","createdAt":1578360609464},{"id":11846,"originId":"5e13c2044bea432607fcd26a","articleId":2476,"userId":1424,"content":"https://mongodb.github.io/node-mongodb-native/driver-articles/mongoclient.html\r\n看看官方文档\r\nhttps://stackoverflow.com/questions/10656574/how-do-i-manage-mongodb-connections-in-a-node-js-web-application\r\n","createdAt":1578353156610},{"id":11847,"originId":"5e117daa4bea432607fcce67","articleId":2477,"userId":3574,"content":"404是没有找到资源，一般情况下为请求路径问题，看一下后台路由配置，以及是否做静态资源托管","createdAt":1578204586562},{"id":11848,"originId":"5e11c8e04bea432607fccebb","articleId":2477,"userId":3575,"content":"[@Limiandy](/user/Limiandy) 根据你的回复，重新检查了一下。原来提交了之后，是直接跳转到了roles的resources路由的show方法，但这个方法没有定义和设置，所以返回404。\r\n但这也并不是自己所期望的，所期望的是进入update方法。","createdAt":1578223840934},{"id":11849,"originId":"5e1280a681adfe2602079e9b","articleId":2477,"userId":22,"content":"`form` 的 `method` 只有 3 个值：https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fs-method\r\n\r\n- get\r\n- post\r\n- dialog\r\n\r\n> The invalid value default for these attributes is the GET state. ","createdAt":1578270886330},{"id":11850,"originId":"5e12a2454bea432607fcd012","articleId":2477,"userId":3576,"content":"看看","createdAt":1578279493340},{"id":11851,"originId":"5e12d0924bea432607fcd0a8","articleId":2477,"userId":3575,"content":"[@justjavac](/user/justjavac) 根据你的回复，又查看了下Ruby on Rails里关于form_for的文档：\r\n> :method - The method to use when submitting the form, usually either “get” or “post”. If “patch”, “put”, “delete”, or another verb is used, a hidden input with name _method is added to simulate the verb over post.\r\n\r\n原来restful api里patch方法，在form表单里是这么解决的。\r\n所以，在此也就添加了一个隐藏的input。\r\n> <form action=\"/admin/roles/<%=list._id%>\" method=\"post\">\r\n> <ul>\r\n> <input type=\"hidden\" name=\"_method\" value=\"patch\" />\r\n> <input type=\"hidden\" name=\"_csrf\" value=\"<%=csrf%>\" />\r\n> <li>角色名称: <input type=\"text\" name=\"title\" value=\"<%=list.title%>\" /></li>\r\n> <li>角色描述:<textarea name=\"description\" id=\"\" cols=\"60\" rows=\"8\"><%=list.description%></textarea></li>\r\n> <li><input type=\"submit\" value=\"提交\" class=\"btn btn-default\"></li>\r\n> </ul>\r\n> </form>\r\n\r\n问题解决。多谢各位🙏","createdAt":1578291346423},{"id":11852,"originId":"5e1291514bea432607fccf82","articleId":2478,"userId":26,"content":"agent 可以获得redis客户端的，你应该用的是egg-redis插件，需要配置agent：true，来配置将redis也挂载到agent上。","createdAt":1578275153023},{"id":11853,"originId":"5e12943581adfe2602079edb","articleId":2478,"userId":3526,"content":"[@HobaiRiku](/user/HobaiRiku) 感谢您的回复，我确实是使用的egg-redis插件，我最后的解决方案是又安装了redis 插件，然后在agent 通过require注入的。劳烦请教 agent:true 这个配置具体的配置位置。\r\n```js\r\n//config.default.js\r\nconfig.redis = {\r\n  clients: {\r\n    client: {\r\n    port: ‘’,\r\n    host: ‘’,\r\n    password: ‘’,\r\n    db: 0, // 数据库\r\n    },\r\n    // 用于发布订阅\r\n    client_pub: {\r\n    port:  ‘’,\r\n    host:  ‘’,\r\n    password:  ‘’,\r\n    db: 0,\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n\r\n","createdAt":1578275893522},{"id":11854,"originId":"5e129cfd81adfe2602079f12","articleId":2478,"userId":3526,"content":"[@HobaiRiku](/user/HobaiRiku) 感谢您的回复，我已经解决问题。贴出代码，希望可以帮到大家。\r\n```js\r\n//agent.js\r\nmodule.exports = agent => {\r\n\r\n  console.log(agent.redis.clients.get('client_pub'));\r\n  agent.redis.clients.get('client_pub').subscribe('forbidden_ip', (err, result) => {\r\n    if (err) {\r\n      throw err;\r\n    }\r\n    console.log(result, 'redis订阅事件');\r\n  });\r\n  agent.redis.clients.get('client_pub').on('message', (channel, message) => {\r\n    switch (channel) {\r\n      case 'forbidden_ip':\r\n\t\t //通知app\r\n        agent.messenger.sendToApp('forbidden_ip', 'refresh');\r\n        break;\r\n      default:\r\n        agent.ctx.logger.info('未处理的订阅事件：channel-【' + channel + '】,message-【' + message + '】');\r\n    }\r\n  });\r\n\r\n};\r\n```\r\n\r\n```js\r\n//app.js\r\n\r\n  async didReady() {\r\n    const ctx = await this.app.createAnonymousContext();\r\n    // eslint-disable-next-line no-unused-vars\r\n    //监听agent的ipc请求\r\n    this.app.messenger.on('forbidden_ip', by => {\r\n      // create an anonymous context to access service\r\n      const ctx = this.app.createAnonymousContext();\r\n      ctx.runInBackground(async () => {\r\n        // 更新ip名单\r\n        await ctx.service.catchService.update();\r\n      });\r\n    });\r\n\r\n    // 项目启动，初始化更新ip名单\r\n    await ctx.service.catchService.update();\r\n  }\r\n\r\n```\r\n\r\n```js\r\n//config.default.js\r\n  config.redis = {\r\n    clients: {\r\n      client: {\r\n        port: ****,\r\n        host: '****,',\r\n        password: '****,',\r\n        db: 0, \r\n      },\r\n      // 用于发布订阅\r\n      client_pub: {\r\n        port: ****,,\r\n        host: '****,',\r\n        password: '****,',\r\n        db: 0,\r\n      },\r\n    },\r\n    //是否挂在到agent上，默认是false不挂载\r\n    agent: true,\r\n  };\r\n```\r\n\r\n\r\n","createdAt":1578278141501},{"id":11855,"originId":"5d92c32eece3813ad9b9fc8f","articleId":2479,"userId":111,"content":"[https://www.oschina.net/news/110108/phpstudy-news](https://www.oschina.net/news/110108/phpstudy-news)","createdAt":1569899310932},{"id":11856,"originId":"5d93239bece3813ad9b9fcea","articleId":2479,"userId":3,"content":"[@yakczh](/user/yakczh) https://www.xp.cn/ad/2288.html","createdAt":1569923995298},{"id":11857,"originId":"5d93240dece3813ad9b9fcf0","articleId":2479,"userId":3,"content":"![捕获.PNG](//static.cnodejs.org/FslSwEE6kwZJQc0RavQiPvg9KgwT)","createdAt":1569924109961},{"id":11858,"originId":"5e0ee26781adfe2602079b5d","articleId":2479,"userId":831,"content":"。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。","createdAt":1578033767676},{"id":11859,"originId":"5e0f0e4081adfe2602079c2b","articleId":2479,"userId":3424,"content":"meteor算是吧","createdAt":1578044992394},{"id":11860,"originId":"5e128adb4bea432607fccf5b","articleId":2479,"userId":110,"content":"Node 不是 PHP，为什么需要集成环境？你只需要下载一个数据库软件，然后装上 node 再装个 vscode 就全部可以搞定了","createdAt":1578273499551},{"id":11861,"originId":"5e11de5e81adfe2602079e5c","articleId":2480,"userId":1673,"content":"连接池用来干嘛，你资源多浪费的起？频繁读取内存或者硬盘","createdAt":1578229342592},{"id":11862,"originId":"5e0f050b81adfe2602079bfa","articleId":2481,"userId":1713,"content":"1.前后端分离的话直接response json就好了\r\n2.非前后端分离的话直接渲染对应的template即可","createdAt":1578042635549},{"id":11863,"originId":"5e0f0a814bea432607fccc61","articleId":2481,"userId":390,"content":"sequelize了解一下，https://github.com/demopark/sequelize-docs-Zh-CN","createdAt":1578044033523},{"id":11864,"originId":"5e0f3aa64bea432607fcccd6","articleId":2481,"userId":1377,"content":"js的话，可以试下sequelize，ts的话可以直接上手typeorm 或 sequelize+TS也行\r\n都是通过model映射数据库，然后用where和order方法","createdAt":1578056358425},{"id":11865,"originId":"55272dddcde195f05a17f2f6","articleId":2482,"userId":1629,"content":"你先用 node 命令启动看看，有爆什么错误么","createdAt":1428631005683},{"id":11866,"originId":"55273486cde195f05a17f309","articleId":2482,"userId":3577,"content":"pm2 logs 看一下错误","createdAt":1428632710520},{"id":11867,"originId":"55273704cde195f05a17f315","articleId":2482,"userId":1783,"content":"node启动没有问题\r\n运行``pm2 logs``，控制台也报一句``[PM2] Spawning PM2 daemon``，继续没有然后了","createdAt":1428633348456},{"id":11868,"originId":"55273721cde195f05a17f316","articleId":2482,"userId":1783,"content":"我怀疑是pm2配置啥的有问题？我就安装好后，啥都没动，直接用来运行，就出现上面的情况了","createdAt":1428633377813},{"id":11869,"originId":"5527d1bdd628327a56b3dd95","articleId":2482,"userId":1717,"content":"别闹，这是磁盘空间不足。。。。。。我线上遇到过的。pm2运行时会产生日志，如果磁盘空间不足，会出现这个情况。","createdAt":1428672957625},{"id":11870,"originId":"552899ce831bc33a414106b4","articleId":2482,"userId":103,"content":"或许你该试试pm2 start ./bin/www","createdAt":1428724174604},{"id":11871,"originId":"55294946ac3a2b830b7082eb","articleId":2482,"userId":1783,"content":"呃，可是我当时的磁盘空间应该是远远足够的。。。","createdAt":1428769094107},{"id":11872,"originId":"5529495cac3a2b830b7082ec","articleId":2482,"userId":1783,"content":"[@hpgt](/user/hpgt) \r\n好，我试试，多谢","createdAt":1428769116852},{"id":11873,"originId":"552a9023fe19fa895765d613","articleId":2482,"userId":18,"content":"好奇怪。我印象中 PM2 装了就直接能用的。只要 node 命令可以直接启动起来，那么 PM2 就能直接启动起来。","createdAt":1428852771801},{"id":11874,"originId":"552a9c6afe19fa895765d621","articleId":2482,"userId":1783,"content":"我换成forever倒是能正常使用，pm2就不行\r\n搜了下so，貌似跟linux的不同用户有关系，有人遇到过类似的问题吗？","createdAt":1428855914805},{"id":11875,"originId":"552b1750fe19fa895765d62f","articleId":2482,"userId":3578,"content":"root 用户 kill  pm2、 node ， 然后重启一下试试 ， 之前生成遇到过 类似问题","createdAt":1428887376523},{"id":11876,"originId":"552b1e8482388cec50cf6d4c","articleId":2482,"userId":696,"content":"关注一下","createdAt":1428889220935},{"id":11877,"originId":"552bbca877becc1a26fb7f8f","articleId":2482,"userId":1783,"content":"多谢！我稍后试试！","createdAt":1428929704922},{"id":11878,"originId":"552bc7d377becc1a26fb7fa4","articleId":2482,"userId":103,"content":"pm2是全局安装，要获取root权限。再就是启动的时候要从listen(port)文件启动","createdAt":1428932563506},{"id":11879,"originId":"552bcfc177becc1a26fb7fb4","articleId":2482,"userId":3541,"content":"[@hpgt](/user/hpgt) +1,linux下全局安装用sudo ","createdAt":1428934593388},{"id":11880,"originId":"552da88ce10460475e7f7544","articleId":2482,"userId":3579,"content":"node版本如果升级过 可能要重新安装pm2,我之前升级的时候就是这个情况\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1429055628383},{"id":11881,"originId":"552e02236966089a258141d2","articleId":2482,"userId":1783,"content":"多谢大家，刚才试了下，莫名其妙地又好了。。。","createdAt":1429078563750},{"id":11882,"originId":"58257138e885ce5a3938280e","articleId":2482,"userId":501,"content":"[@hpgt](/user/hpgt) +2,正解","createdAt":1478848824179},{"id":11883,"originId":"5e0f16c281adfe2602079c43","articleId":2482,"userId":374,"content":"node版本跟pm2不匹配，换一下node版本，就好了","createdAt":1578047170985},{"id":11884,"originId":"5e02ce1a0696c446bf64ff87","articleId":2483,"userId":358,"content":"service 层是业务逻辑了，在这一层你不应该去处理 `ctx.request.body` 等跟协议层有关的事，应该在 Controller 提取后作为参数调进来","createdAt":1577242138604},{"id":11885,"originId":"5e02d55cba8f6d46c4edf05d","articleId":2483,"userId":100,"content":"请求  响应 放在控制器里面   , 业务逻辑放在service里面","createdAt":1577243996601},{"id":11886,"originId":"5e02d7da0696c446bf64ffb3","articleId":2483,"userId":3251,"content":"[@atian25](/user/atian25) 好的吧 似乎只能这样了。那我只能直接测试Controller了。不过谢谢您鸭~","createdAt":1577244634693},{"id":11887,"originId":"5e02d895ba8f6d46c4edf073","articleId":2483,"userId":3251,"content":"[@youmenglinzi](/user/youmenglinzi) 嗯嗯，理论上是这样，不过当初写的时候就可能贪方便可以写少一些传递的参数导致这样，才想着有没有办法可以在service模拟出request的。既然egg-mock没有这样的函数那我就另外找办法啦。谢谢您~","createdAt":1577244821161},{"id":11888,"originId":"5e02dabe0696c446bf64ffc3","articleId":2483,"userId":358,"content":"[@yao17](/user/yao17) 如果这样的话你都没必要写 Service 了，因为你都不分层了。","createdAt":1577245374313},{"id":11889,"originId":"5e0427ea0696c446bf650289","articleId":2483,"userId":850,"content":"[@yao17](/user/yao17)  请求入参都需要在 controller 处理掉，包括校验、安全什么的。","createdAt":1577330666168},{"id":11890,"originId":"5e0eb78281adfe2602079ad8","articleId":2483,"userId":3251,"content":"嗯嗯，把入参放到service是不符合controller\\service\\model这样的设计啦，也谢谢各位的解答~","createdAt":1578022786009},{"id":11891,"originId":"5e0e71fb4bea432607fcca44","articleId":2484,"userId":358,"content":"NODE_OPTION 这个环境变量","createdAt":1578004987259},{"id":11892,"originId":"5e02fe08ba8f6d46c4edf0cf","articleId":2485,"userId":1644,"content":"试过，可行。你也可以测一下","createdAt":1577254408657},{"id":11893,"originId":"5e02ff03ba8f6d46c4edf0d6","articleId":2485,"userId":1504,"content":"[@JianmingXia](/user/JianmingXia) 那我也试试,好慌啊 生产环境这么用总感觉哪里有点不对 ~~~~~~~~","createdAt":1577254659711},{"id":11894,"originId":"5e030d1a0696c446bf65002c","articleId":2485,"userId":3581,"content":"bull 或者 bullmq，支持定时任务用 redis。","createdAt":1577258266641},{"id":11895,"originId":"5e03700e0696c446bf65012e","articleId":2485,"userId":687,"content":"通过redis实现锁。\r\n如果pm号为0的进程，正好挂了，岂不是不执行了？\r\n我之前在Laravel5.2参考新版本实现过，你可以参考下了解概念，相信你也能很容易做出来的。\r\n[Laravel-onOneServer](https://www.vatery.com/2018/09/23/Laravel-onOneServer/)","createdAt":1577283598175},{"id":11896,"originId":"5e0410540696c446bf6501d8","articleId":2485,"userId":545,"content":"可以用这个 https://github.com/miaowing/nest-schedule\r\n\r\n更多资料： https://docs.nestjs.cn/6/awesome\r\n\r\n开启多实例的话，就得借助外部的 redis 了","createdAt":1577324628220},{"id":11897,"originId":"5e041078ba8f6d46c4edf2b9","articleId":2485,"userId":545,"content":"[@VoganWong](/user/VoganWong)  PHP-fpm 由于没有常驻内存，做定时任务很蠢~  参考laravel 方式只能是更麻烦~","createdAt":1577324664413},{"id":11898,"originId":"5e04599cba8f6d46c4edf415","articleId":2485,"userId":687,"content":"[@zuohuadong](/user/zuohuadong) 你可能没看楼主的需求？\r\n另外我让他参考的是使用redis锁，而不是Laravel 懂？","createdAt":1577343388331},{"id":11899,"originId":"5e0461af0696c446bf65032f","articleId":2485,"userId":516,"content":"可以看看egg-schedule~\r\n\r\n个人感觉蛮好用的~","createdAt":1577345455350},{"id":11900,"originId":"5e04657b0696c446bf650338","articleId":2485,"userId":545,"content":"[@nnliang](/user/nnliang) \r\n声明式\r\n```\r\nimport { Injectable, Logger } from '@nestjs/common';\r\nimport { Cron } from '@nestjs/schedule';\r\n\r\n@Injectable()\r\nexport class TasksService {\r\n  private readonly logger = new Logger(TasksService.name);\r\n\r\n  @Cron('45 * * * * *')\r\n  handleCron() {\r\n    this.logger.debug('Called when the current second is 45');\r\n  }\r\n}\r\n```\r\n\r\n动态\r\n\r\n```\r\naddCronJob(name: string, seconds: string) {\r\n  const job = new CronJob(`${seconds} * * * * *`, () => {\r\n    this.logger.warn(`time (${seconds}) for job ${name} to run!`);\r\n  });\r\n\r\n  this.scheduler.addCronJob(name, job);\r\n  job.start();\r\n\r\n  this.logger.warn(\r\n    `job ${name} added for each minute at ${seconds} seconds!`,\r\n  );\r\n}\r\n```\r\n\r\n参考： https://docs.nestjs.com/techniques/task-scheduling\r\n例子：https://github.com/nestjs/nest/tree/master/sample/27-scheduling\r\n","createdAt":1577346427392},{"id":11901,"originId":"5e047d5f0696c446bf6503b1","articleId":2485,"userId":1504,"content":"[@hxddev](/user/hxddev) 谢谢 我看看去","createdAt":1577352543307},{"id":11902,"originId":"5e047de0ba8f6d46c4edf4b6","articleId":2485,"userId":1504,"content":"[@VoganWong](/user/VoganWong) 十分感谢 我试试","createdAt":1577352672981},{"id":11903,"originId":"5e047df8ba8f6d46c4edf4ba","articleId":2485,"userId":1504,"content":"[@zuohuadong](/user/zuohuadong) 目前使用框架express 这个是不是我用不了啊","createdAt":1577352696852},{"id":11904,"originId":"5e047e150696c446bf6503bd","articleId":2485,"userId":1504,"content":"[@nnliang](/user/nnliang) 目前使用框架express 好像这个我用不了","createdAt":1577352725928},{"id":11905,"originId":"5e048faa0696c446bf6503ee","articleId":2485,"userId":1559,"content":"启动新的进程专门做定时任务就可以了，不要放在网站里面。","createdAt":1577357226410},{"id":11906,"originId":"5e096d4b0696c446bf650b96","articleId":2485,"userId":516,"content":"[@zuohuadong](/user/zuohuadong)   你推nest 有点上头了老哥~\r\n不管你用什么框架，  我只看见`new CronJob`就足矣~","createdAt":1577676107746},{"id":11907,"originId":"5e0b1b6dba8f6d46c4ee0110","articleId":2485,"userId":2503,"content":"一般，定时任务最好的单独出来一个服务，不必放新服务器，同一个服务器就好，这样用什么定时任务的库关系都不大，在小流量场景下。","createdAt":1577786221586},{"id":11908,"originId":"5e0e0bbef628e05aa21730d1","articleId":2485,"userId":170,"content":"可以用函数计算，建立一个定时器就可以，开放一个http触发接口，做好token验证就好了\r\n[函数计算](https://help.aliyun.com/document_detail/68172.html?spm=a2c4g.11174283.6.679.20685212NOMIZO)","createdAt":1577978814880},{"id":11909,"originId":"5e05e2710696c446bf65074a","articleId":2486,"userId":117,"content":"找到问题了/g的原因\r\n如果正则表达式设置了全局标志，test() 的执行会改变正则表达式   lastIndex属性。连续的执行test()方法，后续的执行将会从 lastIndex 处开始匹配字符串，(exec() 同样改变正则本身的 lastIndex属性值).\r\n\r\n下面的实例表现了这种行为： \r\n\r\nvar regex = /foo/g;\r\n\r\n// regex.lastIndex is at 0\r\nregex.test('foo'); // true\r\n\r\n// regex.lastIndex is now at 3\r\nregex.test('foo'); // false","createdAt":1577443953932},{"id":11910,"originId":"5e06ccb8ba8f6d46c4edf91c","articleId":2486,"userId":627,"content":"👍👍","createdAt":1577503928161},{"id":11911,"originId":"5e0739e80696c446bf6508e6","articleId":2486,"userId":109,"content":"使用 regexp.test() 方法一定得知道 /g 模式的坑。\r\n所以我基本禁用 test()","createdAt":1577531880322},{"id":11912,"originId":"5e0db64bf628e05aa2172ff5","articleId":2486,"userId":2685,"content":"我之前也遇到过这个问题","createdAt":1577956939127},{"id":11913,"originId":"5e032773ba8f6d46c4edf177","articleId":2487,"userId":11,"content":"调用了父类的构造函数","createdAt":1577265011963},{"id":11914,"originId":"5e0340a50696c446bf6500dc","articleId":2487,"userId":3574,"content":"[@hyj1991](/user/hyj1991) 首先感谢你的解达，这里调用了父类的构造方法，我是知道的，我主要不明白的地方是，传入的这个Usr，是什么意思","createdAt":1577271461602},{"id":11915,"originId":"5e08e0d10696c446bf650aac","articleId":2487,"userId":3582,"content":"```js\r\n\r\n  constructor (Model) {\r\n    this.Model = Model\r\n  }\r\n  \r\n  Usr 等于这块的 Model， 为了能 create 的时候能正确工作\r\n```","createdAt":1577640145616},{"id":11916,"originId":"5e094b5e0696c446bf650b02","articleId":2487,"userId":166,"content":"[@Limiandy](/user/Limiandy) super 指向父类的构造函数。如果你记得 super() 表示调用了父类的构造函数，那 super(Usr) 中的 Usr 当然就是传入构造函数的参数了","createdAt":1577667422308},{"id":11917,"originId":"5e0d7bf801c0915a9d9bd880","articleId":2487,"userId":3574,"content":"[@rrbe](/user/rrbe) 谢谢! 那么这里我不是不可以这么理解呢，Usr，就是一个用户类，当传入构造方法中时就是新建了一个用户对象，var andy = new Usr({usrname: 'andy', pwd: '123456'})，这句话就是实例化这个对象。","createdAt":1577942008449},{"id":11918,"originId":"5e0370c1ba8f6d46c4edf206","articleId":2489,"userId":687,"content":"你的意思是，取出来的某一个字段并不是完全想要的，需要再处理？\r\n例如取出来的时间戳，需要另外转换为可读时间形式？\r\n如果这样是可以的。orm支持，大多是也是拿到数据后处理，再返回输出。","createdAt":1577283777827},{"id":11919,"originId":"5e041011ba8f6d46c4edf2b2","articleId":2489,"userId":3268,"content":"[@VoganWong](/user/VoganWong)  是的，我是这个意思，请问这个该怎么处理？需要查哪些资料呢？\r\n\r\n比如通常我们查一个表，ORM 可能用 xx.find(xx)，我不希望在拿到数据后，再对数据进行处理，find 的结果，比如有个字段时间戳，就是已经格式化后的结果了","createdAt":1577324561101},{"id":11920,"originId":"5e0459fd0696c446bf650315","articleId":2489,"userId":687,"content":"[@hanzichi](/user/hanzichi) 需要看你使用的什么orm框架，看它是否实现。一般就是hook的方式。`AfterGet`/`BeforeInsert` 这类函数。","createdAt":1577343485519},{"id":11921,"originId":"5e048cb4ba8f6d46c4edf4eb","articleId":2489,"userId":3268,"content":"[@VoganWong](/user/VoganWong) 一般这个支持得在 ORM 框架层做吧？","createdAt":1577356468167},{"id":11922,"originId":"5e0aa3fcba8f6d46c4edff24","articleId":2489,"userId":687,"content":"[@hanzichi](/user/hanzichi) 是的。有些orm框架支持了。不支持就自己实现咯。","createdAt":1577755644165},{"id":11923,"originId":"5e0b199e0696c446bf651006","articleId":2489,"userId":2503,"content":"3楼说的对，一般都是这个套路","createdAt":1577785758010},{"id":11924,"originId":"5e0b564301c0915a9d9bd5a3","articleId":2489,"userId":3268,"content":"[@VoganWong](/user/VoganWong) ORM 不支持的话，自己咋实现？","createdAt":1577801283154},{"id":11925,"originId":"5e0759d8ba8f6d46c4edfa31","articleId":2490,"userId":1641,"content":"你这是连接数据库失败了啊\r\n所以先检查账号密码是否正确, 然后在服务器上直接用mysql 账户账号密码尝试连接数据库, 看看能不能连","createdAt":1577540056573},{"id":11926,"originId":"5e0762ca0696c446bf65093d","articleId":2490,"userId":89,"content":"自己先连上啊。很明显mysql权限没处理","createdAt":1577542346353},{"id":11927,"originId":"5e076829ba8f6d46c4edfa55","articleId":2490,"userId":3,"content":"[@cWatermelon](/user/cWatermelon) [@i5ting](/user/i5ting) 谢谢，在经过几小时排查，终于可以连上数据库了，但是在执行 `npm start` 时，又报错了，难受~","createdAt":1577543721600},{"id":11928,"originId":"5e0768df0696c446bf650950","articleId":2490,"userId":89,"content":"80端口，应该是访问权限问题吧","createdAt":1577543903050},{"id":11929,"originId":"5e076b89ba8f6d46c4edfa6c","articleId":2490,"userId":3,"content":"[@i5ting](/user/i5ting) 感谢，终于不报错了，可是我发现浏览器输入IP地址+端口号，还是访问不到我写的get接口","createdAt":1577544585455},{"id":11930,"originId":"5e0afc8a0696c446bf650f9e","articleId":2490,"userId":296,"content":"楼主是后端新手吗？","createdAt":1577778314153},{"id":11931,"originId":"5e0b32c2ba8f6d46c4ee0152","articleId":2490,"userId":3,"content":"[@JZLeung](/user/JZLeung) 嗯，刚接触 egg.js 不久","createdAt":1577792194771},{"id":11932,"originId":"5e09c20b0696c446bf650d1a","articleId":2491,"userId":615,"content":"是不是没创建日志目录啊","createdAt":1577697803084},{"id":11933,"originId":"5e09ef850696c446bf650dc1","articleId":2491,"userId":3583,"content":"![WX20191230-203630@2x.png](//static.cnodejs.org/FsP1tfNUBzs97x5Af5kBOBzqATDk)\r\n有目录，本地环境，可以打印日志，非常奇怪[@974806047](/user/974806047)","createdAt":1577709445414},{"id":11934,"originId":"5e0b259cba8f6d46c4ee0133","articleId":2491,"userId":358,"content":"看下文档，线上环境的日志不是在源码目录下的","createdAt":1577788828948},{"id":11935,"originId":"5e0411030696c446bf6501e5","articleId":2493,"userId":545,"content":"k8s + istio ","createdAt":1577324803097},{"id":11936,"originId":"5e0423dd0696c446bf650264","articleId":2493,"userId":109,"content":"istio?","createdAt":1577329629854},{"id":11937,"originId":"5e097c8aba8f6d46c4edfce4","articleId":2493,"userId":845,"content":"K8S+Istio，真香组合","createdAt":1577680010280},{"id":11938,"originId":"5e040c5bba8f6d46c4edf292","articleId":2494,"userId":545,"content":"按最坏的情况，O(NlogN) 肯定好。\r\n综合来说是 O(NlogN) ","createdAt":1577323611521},{"id":11939,"originId":"5e040c6b0696c446bf65019c","articleId":2494,"userId":541,"content":"NO(logN) 是什么复杂度   O(NlogN)?\r\n\r\n\r\n\r\n那当然一般是O(n)好, N稍微大一点logN就大于1了\r\n\r\n\r\nO(logN) 的话，一般比O(n)好\r\n\r\n\r\n\r\n O(NlogN) >  O(N) >  O(logN)","createdAt":1577323627125},{"id":11940,"originId":"5e04417fba8f6d46c4edf3c4","articleId":2494,"userId":1574,"content":"刚看完一篇关于bigO的文章\r\nhttps://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/","createdAt":1577337215195},{"id":11941,"originId":"5e0453d00696c446bf6502fa","articleId":2494,"userId":2247,"content":"[@AnzerWall](/user/AnzerWall) 嗯\r\n","createdAt":1577341904633},{"id":11942,"originId":"5e05b59fba8f6d46c4edf743","articleId":2494,"userId":615,"content":"[@zuohuadong](/user/zuohuadong)  \r\n为啥？\r\n当N =100\r\nO(N) = O(100)\r\nO(NlogN) = O(100 * 10) = O (1000) \r\n我计算有错吗。。","createdAt":1577432479539},{"id":11943,"originId":"5e0629670696c446bf6507e9","articleId":2494,"userId":3586,"content":"[@974806047](/user/974806047) 看一下二楼","createdAt":1577462119590},{"id":11944,"originId":"5e07f75c0696c446bf6509b7","articleId":2494,"userId":2247,"content":"[@974806047](/user/974806047) 二楼的答案是对的，O(NlogN) >  O(N) >  O(logN) ，O(NlogN) 复杂度最大","createdAt":1577580380744},{"id":11945,"originId":"5e06e3abba8f6d46c4edf942","articleId":2495,"userId":1559,"content":"直接使用hls播放","createdAt":1577509803298},{"id":11946,"originId":"5e0703ecba8f6d46c4edf982","articleId":2495,"userId":545,"content":"我们目前是  wasm 的 ffmpeg ~1080p 可以4屏软解H265视频。  \r\n16屏的话就降低分辨率480p 左右。\r\n\r\n\r\n如果你是 webm(VP9/vp8)  mp4(H264) 直接让浏览器调用GPU硬解就行了、   ","createdAt":1577518060370},{"id":11947,"originId":"5e034772ba8f6d46c4edf1d5","articleId":2498,"userId":268,"content":"看下是不是有一个`favicon.ico`这个请求","createdAt":1577273202585},{"id":11948,"originId":"5e056a5b0696c446bf65052a","articleId":2498,"userId":1011,"content":"输出下req.url","createdAt":1577413211783},{"id":11949,"originId":"5e04a97bba8f6d46c4edf52e","articleId":2500,"userId":703,"content":"```\r\nvar locationList = [\r\n  { id: 0, name : '中国' }\r\n ,{ id: 1, pid:0 , name: '广东省' }\r\n ,{ id: 2, pid:1 , name: '深圳市' }\r\n ,{ id: 3, pid:2 , name: '福田区' }\r\n ,{ id: 4, pid:1 , name: '广州市' }\r\n ,{ id: 5, pid:4 , name: '黄埔区' }\r\n];\r\n//\r\nfunction buildLocationTree(arr)\r\n{\r\n  let m = new Map(); // m 保存 id -> 项 的对应关系\r\n  for(let a of arr) m.set(a.id, a);\r\n  let r = null;\r\n  for(let a of arr) {\r\n    let pid = a.pid;\r\n    if(!m.has(pid)) {\r\n      r = a;  //找不到pid的项就是root了 \r\n      continue;\r\n    }\r\n    let p = m.get(pid); //取pid对应的项\r\n    if(!Array.isArray(p['subLocations'])) p['subLocations'] = [];\r\n    p['subLocations'].push(a);\r\n  }\r\n  return {'root': r};\r\n}\r\n//\r\nlet t = buildLocationTree(locationList);\r\nconsole.log(t);\r\n```","createdAt":1577363835180},{"id":11950,"originId":"5e04ab090696c446bf65042a","articleId":2500,"userId":703,"content":"顺便说一下，返回 {'root': xxx} 这种并不是很好，如果不止一个root就不好弄了。\r\n建议返回为数组，比如这样  [{ ..., sub:[] }, {..., sub:[] }]","createdAt":1577364233532},{"id":11951,"originId":"5e008358ba8f6d46c4edeb51","articleId":2501,"userId":1011,"content":"访问了下你的地址：http://39.97.33.178/api/\r\n\r\n这个就是404","createdAt":1577091928186},{"id":11952,"originId":"5e0084f40696c446bf64fb0d","articleId":2501,"userId":1199,"content":"/var/log/nginx/ \r\n先到这里看看","createdAt":1577092340395},{"id":11953,"originId":"5e01a835ba8f6d46c4ededa1","articleId":2501,"userId":3306,"content":"http://39.97.33.178/api/getLocation但是这个可以访问啊","createdAt":1577166901735},{"id":11954,"originId":"5e0413090696c446bf6501fc","articleId":2501,"userId":545,"content":"[@1064656851](/user/1064656851) 转发配置的有问题，是否忽略 api 这个路由？\r\nhttps://caddyserver.com/v1/docs/proxy  不会玩可以用这个","createdAt":1577325321318},{"id":11955,"originId":"5e041a9a0696c446bf650224","articleId":2501,"userId":1523,"content":"把location后面的api去掉，只留/试试，proxy_pass结尾也不用加个/","createdAt":1577327258507},{"id":11956,"originId":"5dfc685c0696c446bf64f4b5","articleId":2502,"userId":1137,"content":"搭建一个线上共同使用的数据库做开发测试环境如何","createdAt":1576822876719},{"id":11957,"originId":"5dfc6bed0696c446bf64f4d1","articleId":2502,"userId":545,"content":"1. 共同数据库，\r\n2. 环境变量。","createdAt":1576823789443},{"id":11958,"originId":"5dfc923c0696c446bf64f5fb","articleId":2502,"userId":1011,"content":"这个和项目无关。\r\n建议使用环境变量的方式处理配置。\r\n最应该是应该有同一个的开发数据库","createdAt":1576833596434},{"id":11959,"originId":"5e001fe60696c446bf64f8df","articleId":2502,"userId":687,"content":"需要忽略本地配置文件，例如 `.local.env` dev环境启动默认读取 `.local.env` 不存在再读取 `prod.env` 等等，或者进行多配置文件覆盖合并即可。","createdAt":1577066470337},{"id":11960,"originId":"5e01dc870696c446bf64fe14","articleId":2502,"userId":40,"content":"配置文件里写个共用的数据库配置，然后每个开发者可以通过两种方式修改数据库：\r\n1. 直接本地修改配置文件，但是不要提交该修改\r\n2. 每次启动时动态解析环境变量，覆盖配置文件的配置，MYSQL=mysql://user:password@127.0.0.1:3306/database node app.js\r\n\r\n建议使用第二种方式，不用每次修改完又 git checkout 掉","createdAt":1577180295997},{"id":11961,"originId":"5e041a190696c446bf65021d","articleId":2502,"userId":541,"content":"大体上可以通过区分环境，加载不同配置解决这个问题：\r\n配置可以区分通用配置以及环境依赖配置，然后通过合并配置的形式获得一份合成的配置。\r\n\r\n组织形式1 \r\n  config/{env}/db.js            config/local_manongA/db.js     config/local_manongB/db.js    \r\n  config/other.js\r\n.env   git配置忽略这个文件，然后内部写入环境变量  \r\n 组织形式2(egg)\r\n config/config.{env}.js   同上\r\n config/env   git配置忽略这个文件，然后内部写入环境变量  \r\n \r\n \r\n--------------------------------------------------------------------------------\r\n\r\n\r\n env可以不通过文件获取，可以配合本地环境变量传入(这样不用每次都得指定启动参数)，自己实现建议参考egg\r\n https://github.com/eggjs/egg-core/blob/ca04a457c8cc7a1c1cc77a4e62a6cfde29a5ef19/lib/loader/egg_loader.js#L105\r\n\r\n可以直接使用的模块:   https://www.npmjs.com/package/config\r\n \r\n \r\n \r\n","createdAt":1577327129667},{"id":11962,"originId":"5de0ee166043397a546da555","articleId":2503,"userId":109,"content":"json 反序列化时异常，看看json字符串格式是否合法","createdAt":1575022102566},{"id":11963,"originId":"5de2c5546043397a546da898","articleId":2503,"userId":3592,"content":"at position 0. 或许可以注意看下是不是文件编码问题，比如BOM？","createdAt":1575142740611},{"id":11964,"originId":"5de4827039af564604bbfd6e","articleId":2503,"userId":570,"content":"at JSON.parse、at body-parser\r\n你的参数不是JSON","createdAt":1575256688965},{"id":11965,"originId":"5de5cf6c39af564604bc03c0","articleId":2503,"userId":1161,"content":"JSON.parse()传入的参数非json字符串","createdAt":1575341932345},{"id":11966,"originId":"5e01d22bba8f6d46c4edee8e","articleId":2503,"userId":3528,"content":"没有具体的位置，怎么做问题定位？？？？","createdAt":1577177643403},{"id":11967,"originId":"5e01d3f40696c446bf64fdee","articleId":2503,"userId":358,"content":"bodyparser, post 过来的 request.body 不是合法的 JSON","createdAt":1577178100446},{"id":11968,"originId":"5e007d00ba8f6d46c4edeb2d","articleId":2504,"userId":22,"content":"你需要这篇文章 https://v8.dev/blog/array-sort","createdAt":1577090304487},{"id":11969,"originId":"5e008eb1ba8f6d46c4edeb73","articleId":2504,"userId":3593,"content":"[@justjavac](/user/justjavac) 我看看哈,非常感谢","createdAt":1577094833418},{"id":11970,"originId":"5e003a030696c446bf64f99c","articleId":2505,"userId":545,"content":"axios ","createdAt":1577073155157},{"id":11971,"originId":"5e006882ba8f6d46c4edeae9","articleId":2505,"userId":358,"content":"就用内置的 httpclient，dataType 设置为 text，然后自己 parse response 来处理","createdAt":1577085058647},{"id":11972,"originId":"5dfc2254ba8f6d46c4ede48d","articleId":2506,"userId":59,"content":"https://github.com/cnodejs/egg-cnode/blob/master/config/plugin.js \r\n看一下这几个模块","createdAt":1576804948180},{"id":11973,"originId":"5dfed0b2ba8f6d46c4ede841","articleId":2506,"userId":1192,"content":"感谢","createdAt":1576980658061},{"id":11974,"originId":"5dfc7004ba8f6d46c4ede5b0","articleId":2507,"userId":1618,"content":"需求场景如下：\r\n在新增一条数据的时候，有一个排序字段要设置为本身的自增id的倍数，以便读取的时候排序使用。（不直接用id的原因是要预留上下数据的空间，以便调整数据排序）","createdAt":1576824836496},{"id":11975,"originId":"5dfed0a1ba8f6d46c4ede83b","articleId":2507,"userId":1192,"content":"sequelize会自动生成一个creatTime，你可以根据这个排序，中间插数据的话可以考虑修改插入的新数据的creatTime，这样的话理论上可以插入无限个新数据，不用受id的限制","createdAt":1576980641227},{"id":11976,"originId":"5dfde29d0696c446bf64f768","articleId":2508,"userId":1011,"content":"中间件要调用await next()\r\n\r\nhttps://github.com/koajs/koa/blob/master/docs/guide.md\r\n\r\n如果还不清楚可以开个debug\r\n\r\nDEBUG=koa* node --harmony app.js","createdAt":1576919709311},{"id":11977,"originId":"5df9aea50696c446bf64eedc","articleId":2509,"userId":1927,"content":"```\r\nrequest.get(src)\r\n    .on('response', res => {\r\n        if (res.statusCode === 200) {\r\n            res.pipe(writeStream);\r\n        }\r\n    });\r\n```","createdAt":1576644261949},{"id":11978,"originId":"5df9c89cba8f6d46c4ede013","articleId":2509,"userId":615,"content":"[@GaleLQ](/user/GaleLQ) 谢谢你的回答！  我用superagent和request都试了一下  发现request可以，superagent不行，不知道这是为什么呢，明明两个都有on('response',..)方法","createdAt":1576650908104},{"id":11979,"originId":"5df9c8d1ba8f6d46c4ede01a","articleId":2509,"userId":615,"content":"[@GaleLQ](/user/GaleLQ) superagent 的压根没有触发 response事件","createdAt":1576650961566},{"id":11980,"originId":"5df9ebe60696c446bf64f023","articleId":2509,"userId":1927,"content":"[@974806047](/user/974806047) [看这里](https://github.com/visionmedia/superagent/blob/master/src/node/http2wrapper.js#L182-L185)   \r\n重写了**pipe等于发送请求(getFrame)加pipe行为**,对你来说不可见,不改源码比较难弄,还是用别的吧","createdAt":1576659942739},{"id":11981,"originId":"5dfb8eeaba8f6d46c4ede441","articleId":2509,"userId":3562,"content":"  ```\r\n  function download ( args ) {\r\n  \t//some code ...\r\n\treturn new Promise((resolve, reject) => {\r\n\t  try {\r\n\t\tlet rs = request({\r\n\t\t  url,\r\n\t\t}).on('error', function (err) {\r\n\t\t  fs.appendFileSync('./failLog.log', url + '\\n');\r\n\t\t  fs.writeFileSync(filePath, no_png);\r\n\t\t  reject(err);\r\n\t\t});\r\n\t\trs.pipe(fs.createWriteStream(filePath));\r\n\t\trs.on('end', () => {\r\n\t\t  COUNT++;\r\n\t\t  resolve('Success:  ' + COUNT);\r\n\t\t})\r\n\t  } catch (error) {\r\n\t\tconsole.log(error);\r\n\t\treject(error);\r\n\t  }\r\n\t})\r\n  }\r\n  ```\r\n  这个样子啦","createdAt":1576767210765},{"id":11982,"originId":"5dfc27410696c446bf64f3e4","articleId":2509,"userId":615,"content":"[@LeavesSky](/user/LeavesSky)  nice！我现在做的跟你差不多了，就是没有错误的时候fs.writeFileSync(filePath, no_png); 这一步，我都是错误了之后返回给上层，再统一替换，就不用在下载的过程中一直复制了。","createdAt":1576806209633},{"id":11983,"originId":"5dfce6550696c446bf64f6a9","articleId":2509,"userId":3562,"content":"[@974806047](/user/974806047)  在外部有个流式任务队列, 请求频率的比较凶,  所以放在里面帮我拖慢点速度(这理由好像有点牵强 `!_! `)\r\n悄悄告诉你, 我还开了一个进程递归监测`failLog.log`确保`fs.writeFileSync(filePath, no_png);`","createdAt":1576855125600},{"id":11984,"originId":"5dfaeaa7ba8f6d46c4ede21a","articleId":2511,"userId":109,"content":"1. 里面的 `executor` 是啥？\r\n\r\n就结果上说两者相同。第一种写法可以实现复杂逻辑（比如reject）。","createdAt":1576725159354},{"id":11985,"originId":"5dfaebb7ba8f6d46c4ede224","articleId":2511,"userId":615,"content":"第一种里面你是不是得return res('hello world') 啊\r\n","createdAt":1576725431800},{"id":11986,"originId":"5dfaece3ba8f6d46c4ede232","articleId":2511,"userId":3596,"content":"[@waitingsong](/user/waitingsong)  exector只是ide的一个参数提示。\r\n","createdAt":1576725731852},{"id":11987,"originId":"5dfaecf1ba8f6d46c4ede237","articleId":2511,"userId":3596,"content":"[@974806047](/user/974806047)  应该是不需要的吧","createdAt":1576725745914},{"id":11988,"originId":"5dfb54c00696c446bf64f32d","articleId":2511,"userId":755,"content":"没区别, async 方法会自动将返回值包装为 Promise","createdAt":1576752320903},{"id":11989,"originId":"5df9f8190696c446bf64f042","articleId":2512,"userId":117,"content":"some code内存泄露了或者读取了大量数据到内存","createdAt":1576663065819},{"id":11990,"originId":"5dfaec850696c446bf64f188","articleId":2512,"userId":615,"content":"some code 一定是什么不得了的东西  \r\n你是不是下了很多东西  不考虑写在流里面吗","createdAt":1576725637285},{"id":11991,"originId":"5dfb31b60696c446bf64f29a","articleId":2512,"userId":3571,"content":"[@974806047](/user/974806047)    里面有这一步             const Body: any = fs.createReadStream(file.path); 读文件流   剩下的代码就是图片流上传到s3","createdAt":1576743350816},{"id":11992,"originId":"5dfb31c40696c446bf64f29e","articleId":2512,"userId":3571,"content":"[@chenkai0520](/user/chenkai0520) const Body: any = fs.createReadStream(file.path); 读文件流   剩下的代码就是图片流上传到s3","createdAt":1576743364626},{"id":11993,"originId":"5dfb53510696c446bf64f324","articleId":2512,"userId":615,"content":"[@DWNEWS-weiqingtao](/user/DWNEWS-weiqingtao) 是不是判断结束的时间不太对？？ 你可以看看我昨天遇到的那个问题和底下的评论，和你这个还是有点像。\r\n话说你这个贴出来的代码太少了，大佬们不容易看出问题在哪","createdAt":1576751953276},{"id":11994,"originId":"5dfb40a10696c446bf64f2f9","articleId":2513,"userId":755,"content":"在 console 中展开一个对象时, 是显示当前值而不是 log 时的值\r\n\r\n你可以在 log 的地方用 `JSON.parse(JSON.stringify(showlist))` 深拷贝一下","createdAt":1576747169398},{"id":11995,"originId":"5dfb497aba8f6d46c4ede3d5","articleId":2513,"userId":1743,"content":"[@yinxin630](/user/yinxin630) 我去试一下\r\n","createdAt":1576749434246},{"id":11996,"originId":"5df96a6cba8f6d46c4edde40","articleId":2514,"userId":358,"content":"某个地方 JSON.stringify 了吧","createdAt":1576626796913},{"id":11997,"originId":"5df9841dba8f6d46c4edde9b","articleId":2514,"userId":1011,"content":"[@atian25](/user/atian25) 我看了下[#L961](https://github.com/npm/cli/blob/latest/lib/install.js#L961)\r\n这个只是简单的console出来没有写文件\r\n\r\n\r\n","createdAt":1576633373673},{"id":11998,"originId":"5df99059ba8f6d46c4eddede","articleId":2514,"userId":635,"content":"https://github.com/npm/npm/issues/4718","createdAt":1576636505986},{"id":11999,"originId":"5df9a529ba8f6d46c4eddf33","articleId":2514,"userId":1011,"content":"[@grass0916](/user/grass0916) 破案了，多谢","createdAt":1576641833554},{"id":12000,"originId":"5dfaee050696c446bf64f198","articleId":2514,"userId":1331,"content":"那么最终是什么原因导致的呢？","createdAt":1576726021109},{"id":12001,"originId":"5dfaf0dd0696c446bf64f1bb","articleId":2514,"userId":1011,"content":"[@lsqy](/user/lsqy) npm install时会对你的package.json进行JSON.stringify,把缩进改为两个空格。多余的会被移除。缺少的会补充","createdAt":1576726749711},{"id":12002,"originId":"5df88ce828dce75de5436329","articleId":2516,"userId":1859,"content":"已解决！\r\n原先代码中是这样的：\r\nconst session = client.startSession({readPreference: { mode: \"primary\" }, writeConcern: { w: \"majority\" }});\r\nsession.startTransaction({readConcern: {level: \"snapshot\"}});\r\n要调整成\r\nconst session = client.startSession();\r\nsession.startTransaction({readPreference: { mode: \"primary\" }, writeConcern: { w: \"majority\" }});\r\n，而最重要的一点是要在find里把{session}作为参数设置进去也就是这样：\r\n await coll_test.findOne({name:\"001\"},{session});\r\n \r\n 头大了两天，还是摸索出来了.....\r\n ......其实，api文档里也有的，不好好看文档是不行的....","createdAt":1576570088887},{"id":12003,"originId":"5dea13bb484806122a97dcd6","articleId":2517,"userId":38,"content":"建议自己写个中间件包装一下 bodyparser，碰到你说的情况就直接 next 下去，这样就可以拿到未解析的了。","createdAt":1575621563379},{"id":12004,"originId":"5dea146014ffa4125a544bb4","articleId":2517,"userId":3599,"content":"[@lellansin](/user/lellansin) 我记得有个方法或者参数，调用一下就行\r\n不需要自己写这么麻烦。\r\n就是找不到:(","createdAt":1575621728975},{"id":12005,"originId":"5deaa7eb484806122a97de26","articleId":2517,"userId":38,"content":"自己写简单多了..","createdAt":1575659499569},{"id":12006,"originId":"5deb29c3484806122a97dea8","articleId":2517,"userId":3600,"content":"不是有个获取raw body的方法？是要这个","createdAt":1575692739514},{"id":12007,"originId":"5dee0036484806122a97e3c0","articleId":2517,"userId":2503,"content":"http://www.mamicode.com/info-detail-969328.html 这样吗？","createdAt":1575878710935},{"id":12008,"originId":"5df84e3128dce75de5436245","articleId":2517,"userId":26,"content":"获取raw一层，放着，想要JSON，pase一下，如果是又有需要json又有需要raw的情况下，bodyparser都有配置","createdAt":1576554033184},{"id":12009,"originId":"5df851b028dce75de5436259","articleId":2517,"userId":755,"content":"有 `detectJSON` 选项, 控制只解析符合规则的请求","createdAt":1576554928538},{"id":12010,"originId":"5df87d2328dce75de54362de","articleId":2517,"userId":1666,"content":"小心 X-Y PROBLEM https://coolshell.cn/articles/10804.html\r\n还是说说为什么要这么做吧。\r\n\r\n提供一个思路，bodyparser 里设置不解析某个 url 也是可以的\r\napp.user(bodyparser().unless(/path/))\r\n配合一个 unless 的包即可","createdAt":1576566051983},{"id":12011,"originId":"5df72e3a76a67b5e0e418508","articleId":2518,"userId":357,"content":"可以试试，我们处在飞速迭代过程中，有什么问题，可以直接问我 （wx: czy88840616），或者加微信群","createdAt":1576480314477},{"id":12012,"originId":"5df8294d28dce75de543619f","articleId":2518,"userId":191,"content":"还没有 现在关注nestjs","createdAt":1576544589429},{"id":12013,"originId":"5df8451728dce75de5436214","articleId":2518,"userId":688,"content":"[@xuemeifenglin](/user/xuemeifenglin) 之前也在填坑nestjs，现在基本填完了（两个项目，一个练手，一个生产），把基建的适配也都做好了（db/cache/log/中间件等）。。。。so，开始挖新坑了","createdAt":1576551703886},{"id":12014,"originId":"5dd53a5934a8a07a2dab60b5","articleId":2519,"userId":98,"content":"如果你不增加或减少数据，只是修改的话可以用带offset参数的fs api操作","createdAt":1574255193869},{"id":12015,"originId":"5dd5413334a8a07a2dab60c6","articleId":2519,"userId":117,"content":"[@zengming00](/user/zengming00) csv第一行我不知道有多少个字节啊！我是想修改下csv第一行的特殊字符","createdAt":1574256947072},{"id":12016,"originId":"5dd5d84034a8a07a2dab6156","articleId":2519,"userId":703,"content":"同意1楼。\r\n至于怎样找“第一行”，简单做法就是试探，比如：从起始处读取1024字节，检查是否包含换行符，没找到就重新从起始读2048字节。。。找到的位置之前部分就是“第一行”；当然固定1024字节继续循环往后读取也是可以的，只是麻烦一些。","createdAt":1574295616948},{"id":12017,"originId":"5dd5ec0e8287937a65af5d5d","articleId":2519,"userId":358,"content":"不读取整个文件，就只能 Stream 流式方式咯，然后去 http://npms.io/ 用 csv + stream 能搜索好多库了，如：\r\n- https://github.com/mafintosh/csv-parser\r\n- https://github.com/mcollina/split2","createdAt":1574300686963},{"id":12018,"originId":"5def64c9078f8a4119917a6f","articleId":2519,"userId":38,"content":"文件本质上就是个很长的字符数组。这个数组的前 n - m 个元素就是你说的第一行，如果你修改之前和修改之后数组的长度没有变化的话，就可以不用读取整个文件。否则，长度有变化的话。整个数组后面的元素全都要往前或者往后挪一挪。","createdAt":1575969993491},{"id":12019,"originId":"5def7619df1b9a40d14c5e24","articleId":2519,"userId":117,"content":"[@lellansin](/user/lellansin) 发现修改第一行csv的内容挺复杂的，用sed命令解决了","createdAt":1575974425226},{"id":12020,"originId":"5def763fdf1b9a40d14c5e28","articleId":2519,"userId":117,"content":"[@lellansin](/user/lellansin) 我试试这种办法","createdAt":1575974463442},{"id":12021,"originId":"5defd806c9ab2e579c214e05","articleId":2519,"userId":38,"content":"[@chenkai0520](/user/chenkai0520) Cool, 不过我猜 sed 本质上应该算是读取了整个文件的..","createdAt":1575999494721},{"id":12022,"originId":"5df10682df1b9a40d14c622a","articleId":2519,"userId":117,"content":"[@lellansin](/user/lellansin) 测试了一下sed不会读取整个文件，不过sed出乎意料的在修改大文件时有些慢，比重新生成一份文件快不了多少","createdAt":1576076930524},{"id":12023,"originId":"5df7299576a67b5e0e4184e6","articleId":2519,"userId":38,"content":"[@chenkai0520](/user/chenkai0520) 数组中间插入一段，后面所有的元素都要重排","createdAt":1576479125602},{"id":12024,"originId":"5df66a7f76a67b5e0e418310","articleId":2521,"userId":1259,"content":"前面那种吧，但是数据库的回复数+1不建议直接更新db，推荐放队列，或者定时任务定时更新回复数到数据库。","createdAt":1576430207943},{"id":12025,"originId":"5df6d4b028dce75de5435d3e","articleId":2521,"userId":59,"content":"[@heguangda](/user/heguangda) 你放队列里吗？不应该是 redis 吗？ 即使放队列里，你留言再次刷新页面可能就不一致。 你用 replaycount 没啥问题，你量大了以后再考虑优化的问题。","createdAt":1576457392736},{"id":12026,"originId":"5df6e34e28dce75de5435d9e","articleId":2521,"userId":3583,"content":"[@heguangda](/user/heguangda) [@liangtongzhuo](/user/liangtongzhuo)感谢二位，我就暂时先用直接更新的办法了，后面在用定时任务","createdAt":1576461134538},{"id":12027,"originId":"5df6e26876a67b5e0e41836a","articleId":2522,"userId":89,"content":"如果egg抄spring你就没这个感觉了。哈哈哈，习惯而已","createdAt":1576460904576},{"id":12028,"originId":"5df2f3dac9ab2e579c215437","articleId":2523,"userId":18,"content":"太多人乱测试发帖，社区api已经把所有发帖的接口下掉了","createdAt":1576203226684},{"id":12029,"originId":"5df5aad328dce75de5435c45","articleId":2523,"userId":1097,"content":"。。其实可以抓一波回复的包哈哈","createdAt":1576381139773},{"id":12030,"originId":"5df30bd3df1b9a40d14c668b","articleId":2524,"userId":268,"content":"https://stackoverflow.com/a/12397225/1805188","createdAt":1576209363954},{"id":12031,"originId":"5df30db1c9ab2e579c21550d","articleId":2524,"userId":433,"content":"[@jiangli373](/user/jiangli373)  = = 他们好像一直在说不让我用点  现在的情况是里面已经是点了  我想写查询语句  可以么= = \r\n","createdAt":1576209841719},{"id":12032,"originId":"5df32855df1b9a40d14c6705","articleId":2524,"userId":268,"content":"[@nlbydcg](/user/nlbydcg) 这个不清楚了，如果有可能尽量还是把这个字段修复掉吧","createdAt":1576216661737},{"id":12033,"originId":"5df33338df1b9a40d14c6743","articleId":2524,"userId":433,"content":"[@jiangli373](/user/jiangli373) 已经开始着手修复了  之前的老数据还能刷么  我看着都是告诉你这么处理  没有叫你这么处理老数据的\r\n","createdAt":1576219448208},{"id":12034,"originId":"5def6569078f8a4119917a79","articleId":2525,"userId":38,"content":"![image.png](//static.cnodejs.org/Fo_8_Vbsm5DAYrQgbZwpxdsJdpBT)\r\n\r\n理解没有出错的话，貌似这个 fs.read 里的 length 就是 stream 中的 HighWaterMark。\r\n\r\n如果成立的话楼主的问题貌似可以换成，如果 read 的 length 小于实际的大小，剩下的是不是没有了？","createdAt":1575970153116},{"id":12035,"originId":"5def6761078f8a4119917a85","articleId":2525,"userId":3604,"content":"[@lellansin](/user/lellansin) 我的理解是HighWaterMark表示的是buffer的大小，如果超过这个大小，会触发一系列的反应。每次读取的length是人为指定的，可以超过HighWaterMark，也可以小于HighWaterMark，fs.read 里的 length不一定就是HighWaterMark。我没想明白的是，如果指定的length超过了HighWaterMark，超过的这部分是直接丢弃吗？","createdAt":1575970657914},{"id":12036,"originId":"5defd70edf1b9a40d14c5ee7","articleId":2525,"userId":38,"content":"[@linxiaoziruo](/user/linxiaoziruo) TCP 协议有个 ack 机制，就是确认了之后再发下一阶段的包，如果没有 ack 到了一定时间会重发。所以从这个角度来看，如果 TCP 协议发送的数据过多，有包没有在额定的时间内被接收方 ack，那么发送方就会重发。也就是说，如果这个是一个 TCP 之类的 socket stream。那么，这个没有被读取的数据可能是被缓存也可能是丢了等待重发，anyway，你可以写几个 case 验证一下。理论上来说，这些不属于应用层应该关心的。","createdAt":1575999246980},{"id":12037,"originId":"5df102b9c9ab2e579c21508f","articleId":2525,"userId":3041,"content":"HighWaterMark 跟buffer没有关系哦\r\nHighWaterMark是一次读取Buffer的大小\r\nbuffer是读取后要放置的buffer\r\nlength是你要读多少放到buffer中","createdAt":1576075961326},{"id":12038,"originId":"5df198c4df1b9a40d14c6291","articleId":2525,"userId":3339,"content":"HighWaterMark 只是一个标识位，具体怎么做还是由 stream 本身决定的\r\n像 fs 中都是当缓冲 buffer 长度达到 HighWaterMark 时就停止读取了，所以 node 可以用很少的内存读取很大的文件\r\n当然，如果非要一次性读取个几 G 的文件到内存，也没人能拦着你。。\r\nfs.read() 这个 api 跟 HighWaterMark 没啥关系","createdAt":1576114372488},{"id":12039,"originId":"5df3309cc9ab2e579c21558b","articleId":2525,"userId":541,"content":"好像回错帖子了\r\n自己写个流没处理好会丢数据，但这也是你自己丢的\r\n\r\n-----\r\n\r\n结论： 不一定会\r\n为什么： 这段时间的数据会被缓存，知道缓存的数据大于HighWaterMark就会暂停从底层读取数据，这时候数据会堆积底层\r\n底层也有接收缓存：当缓存渐渐不够用的时候，会阻止接受数据，这时候数据会堆积在发送侧\r\n发送也有发送缓存： 当缓存渐渐不够用的时候，会发送失败，如果发送方没有正确处理，可能会丢失数据","createdAt":1576218780896},{"id":12040,"originId":"5df3065fc9ab2e579c2154dd","articleId":2526,"userId":545,"content":"ARM  都能跑，node.js 没那么吃硬件","createdAt":1576207967942},{"id":12041,"originId":"5def6642df1b9a40d14c5db9","articleId":2527,"userId":38,"content":"见名知意：\r\n\r\nGET\t/posts 文章列表页\r\nGET\t/posts/new\t新建一个文章的编辑页\r\nGET\t/posts/:id\t具体 id 的文章页\r\nGET\t/posts/:id/edit 具体 id 的文章的编辑页\r\n","createdAt":1575970370434},{"id":12042,"originId":"5df2065cc9ab2e579c2152d0","articleId":2527,"userId":687,"content":"这两个api路由其实有点歧义。\r\n文档上边也写了「RESTful 风格」，但不严格按照RESTful api方式（RESTful 风格也是作为一种参照，按照实际情况可以自行修改）。\r\n在web应用中，确实需要编辑页面、新建页面功能，则需要相应路由。\r\n通常api应用中，是不会出现这两个路由的，因为api不提供页面展示功能。","createdAt":1576142428183},{"id":12043,"originId":"5def63c5078f8a4119917a67","articleId":2529,"userId":38,"content":"这个好像很容易写个例子","createdAt":1575969733008},{"id":12044,"originId":"5def67e8078f8a4119917a8b","articleId":2529,"userId":3604,"content":"[@lellansin](/user/lellansin) 官方文档里面描述的是只有没注册ondata事件，且resume这个流的时候，才会丢失数据。但是我实际写例子，如果3分钟之后再注册时间，这三分钟之内的数据就丢失了。我很疑惑!","createdAt":1575970792578},{"id":12045,"originId":"5defda12df1b9a40d14c5ef4","articleId":2529,"userId":38,"content":"不是很确定 stream 有没有啥特殊的逻辑，不过在 JavaScript 里面，是不是数据没人用的话过一段时间就被 GC 了？","createdAt":1576000018372},{"id":12046,"originId":"5df101a5c9ab2e579c215089","articleId":2529,"userId":3041,"content":"双向数据流不会有缓存的哦 参照 pipe","createdAt":1576075685887},{"id":12047,"originId":"5df19946df1b9a40d14c6298","articleId":2529,"userId":3339,"content":"socket 好像默认是 flowing 的","createdAt":1576114502512},{"id":12048,"originId":"5df0b5c8df1b9a40d14c6161","articleId":2530,"userId":3606,"content":"看看是不是端口冲突了","createdAt":1576056264799},{"id":12049,"originId":"5dce7e3d865a9844a3022458","articleId":2531,"userId":3562,"content":"大佬们给个建议,或者学习方向; \r\n最近在看nodejs设计模式和 狼叔的 卷一 ,都感觉吃力( 半路出家, 基础停留在吹牛皮的大概念上 );","createdAt":1573813821641},{"id":12050,"originId":"5dce8e87ece3813ad9ba8b20","articleId":2531,"userId":3562,"content":"新的写法, 依旧不行![image.png](//static.cnodejs.org/FkLjsIcGgBiyUKcDEYwlTIn55dNs)","createdAt":1573817991071},{"id":12051,"originId":"5dcfab5ba9f4592e749e130a","articleId":2531,"userId":109,"content":"ceshi() 这个方法是调用远程服务还是本应用（进程）的一个方法？","createdAt":1573890907942},{"id":12052,"originId":"5dcff1497651572e0955d7ef","articleId":2531,"userId":3562,"content":"[@waitingsong](/user/waitingsong) 一些数据结构化( oracle 的spitial 数据query(oracledb.connection.execute(sql)) -> DBObject -> porxy -> object(JSON) )和计算","createdAt":1573908809723},{"id":12053,"originId":"5dd121bc7651572e0955d8e0","articleId":2531,"userId":109,"content":"这样看看\r\n```js\r\nconst rel = connection.execute(sql, params, options);\r\nconst pmArr = rel.rows.map(row => ceshi(row))\r\nreturn Promise.all(pmArr)\r\n\r\n\r\nasync function ceshi(row) {\r\n  //......结构化的逻辑\r\n  return data\r\n}\r\n```\r\n\r\n`rel.rows.map` 会导致高并发。如果需要控制并发数量，可考虑使用 `rxjs` 的 `mergeMap` 操作符（第二个参数）。\r\n如果是单纯的数据计算（不涉及连接数据库等环境变量），可使用 runscript 的方式通过 fork 进程来多进程并发计算。","createdAt":1573986748606},{"id":12054,"originId":"5dd2bca2a9f4592e749e1984","articleId":2531,"userId":3562,"content":"@ waitingsong 查到关键问题了浪费时间的就是oracledb的DBObject的一个方法toJSON\r\n我空间数据是直接取出的( 存量数据有问题, 只能直接取了 ), 然后在 nodejs里面返回的空间数据是DBObject的实例, 然后我调用toJSON( ), 一个数据转换花了4-5ms; \r\n我觉得官方的这个接口有问题( 我自己也写了个, 贼垃圾 6-8ms);\r\n明天我再试试( promise好久没用了,忘了这货 ); \r\n","createdAt":1574091938153},{"id":12055,"originId":"5dd35d31a9f4592e749e1add","articleId":2531,"userId":3562,"content":"[@waitingsong](/user/waitingsong) ![image.png](//static.cnodejs.org/FoQuYfVQwTO74codLSA3-HbEU_Tc)\r\nPromise.all和我上面写的效果差不多, 依然进不了10秒;","createdAt":1574133041425},{"id":12056,"originId":"5dd363e57651572e0955defe","articleId":2531,"userId":877,"content":"有没有注意过内存?  一条记录数据量有多少, 字段多么? \r\n可以试试拼接json字符串, 数据量大 最好是用全双工的流来做\r\n还可以减少一次序列化的过程. \r\n\r\n\r\n\r\n","createdAt":1574134757807},{"id":12057,"originId":"5dd385807651572e0955df62","articleId":2531,"userId":3562,"content":"[@cnwhy](/user/cnwhy) 内存不很小, 可以忽略, 查出的3000条数据, 大概3mb不到;\r\n至于拼接JSON字符串, 我测试过, 依然需要调用, DBObject的类的方法才能获取字符串, 本质差别不大(我甚至 JSON.parse(JSON.stringify()), 但更慢)\r\n我查了下DBObject 是一个 普通的Object 的 proxy 也就是代理类, 因此, 我现在有点怀疑, ES6的proxy的性能;\r\n晚上回去, 我在查下, OracleDB 的 OCI 出来的数据到底是什么, 看能不能有所收获.\r\n","createdAt":1574143360963},{"id":12058,"originId":"5dd3a2367651572e0955dfd9","articleId":2531,"userId":877,"content":"[@LeavesSky](/user/LeavesSky)  序列化和反序列算是CPU密集型任务, 就算是异步并发也不会有多少改善.\r\n用流来处理不会降低耗时 ,  但可以加快反应时间 \r\n\r\n```js\r\nexports.getSomethingByID = params => {\r\n\tlet rel = connection.execute(sql, params, options);\r\n\tlet index = 0;\r\n\t// 如果ceshi是同步方法,就不要用 async\r\n\tasync function ceshi() {\r\n\t\t//......结构化的逻辑\r\n\t\treturn data;\r\n\t}\r\n\tasync function read(size) {\r\n\t\tlet self = this;\r\n\t\tif (index >= rel.rows.length) self.push(null); //流结束\r\n\r\n\t\t// 拼接json字符串\r\n\t\tlet str = index === 0 ? '[' : '';\r\n\t\tstr += JSON.stringify(await ceshi());\r\n\t\tstr += index < rel.rows.length ? ',' : ']';\r\n\t\tindex++;\r\n\t\tself.push(str);\r\n\t}\r\n\tvar outs = new stream.Readable({\r\n\t\tdestroy: function(err, callback) {\r\n\t\t\tcallback(err);\r\n\t\t}\r\n\t});\r\n\touts._read = read;\r\n\treturn outs;   // 到时候 outs.pipe(res); 转给浏览器\r\n};\r\n```","createdAt":1574150710954},{"id":12059,"originId":"5dd3a3057651572e0955dfe0","articleId":2531,"userId":109,"content":"为啥把 ceshi() ceshi2() 方法写在函数内部呢？ （虽然不会影响性能）","createdAt":1574150917577},{"id":12060,"originId":"5dd3a4efa9f4592e749e1bef","articleId":2531,"userId":109,"content":"序列化属于CPU密集型，你这个应该考虑用 worker 多线程来处理。","createdAt":1574151407699},{"id":12061,"originId":"5dd3a5b47651572e0955dff9","articleId":2531,"userId":109,"content":"另外 json 不大适合处理超大（行）数量的数据。这种场景下 xml 有优势。","createdAt":1574151604879},{"id":12062,"originId":"5dd4c46a2985246fab6c828d","articleId":2531,"userId":3562,"content":"[@cnwhy](/user/cnwhy) 流式处理 ;\r\n我之前也想过, 但是我前端框架<openlayers  地图 >应该不支持流式加载 ( 一堆数据瞬间展示出来的, 不是管道一点一点出来的, 我仔细想了下, 此框架未做流式加载的原因,  是要做数据缓存<地图的矢量数据>, 我打算这个项目结束, 看下他的缓存方式, 争取扩展一个流式的接口 );\r\n","createdAt":1574225002471},{"id":12063,"originId":"5dd4c47f2985246fab6c8291","articleId":2531,"userId":3562,"content":"[@waitingsong](/user/waitingsong) `为啥把 ceshi() ceshi2() 方法写在函数内部呢？ （虽然不会影响性能）`\r\n因为在最外层我初始化了一个数据, 用于在`ceshi()` 中的结果记录; \r\n多层async function 主要为了将同步的结构化和计算转入异步事件队列; \r\n最后利用finally的机制返回出整个结果集;\r\n我对多线程有阴影(以前玩易语言, 手撸多线程, 贼恐怖, nodejs 的新增的一直排斥, 晚上, 瞅瞅看其封装的怎么样;\r\nxml方向也试试","createdAt":1574225023543},{"id":12064,"originId":"5dd4c5258518b67016023138","articleId":2531,"userId":3562,"content":"序列化和反序列算是CPU密集型任务\r\n关于上述的知识, 是需要学习哪个方向(数据结构), 我是因爱好, 半路出家, 计算机基础匮乏, 最近也在想安排一下时间学习数据结构 ","createdAt":1574225189354},{"id":12065,"originId":"5dd4f85534a8a07a2dab5fc8","articleId":2531,"userId":109,"content":"lz确认下耗时主要在哪个方面。 因为最后你在输出结果（5k条数据）为 json 时也要做一次序列化（js对象到json字符串）这个也有耗时。\r\n如果耗时主要在  ceshi 这个函数调用上，那就可以用 js 的 worker (nodejs 从 v12开始默认支持) 来多线程执行此调用从而提高速度。","createdAt":1574238293403},{"id":12066,"originId":"5dd5e92a8287937a65af5d36","articleId":2531,"userId":3562,"content":"找了个线程池模块: \r\nnode-worker-threads-pool : `https://www.npmjs.com/package/node-worker-threads-pool`;\r\n干了下, 发现报错了, 单步进去调试, 发现, Oracledb 的 DBObject 对象< 数据库返回的SHAPE字段对应的实例化值, 作为参数 >, 在进去 worker后,被强转为普通的对象<object : { }> ,多线程的代码我没跟的进去, 我现在下载node源码, 看下 worker 的执行机制;\r\n还有一点; 令我诧异的是: 该线程池的任务执行, worker一直无值<isReady === false> , 可能是暂时没搞懂大牛的逻辑, 具体如下图\r\n![image.png](//static.cnodejs.org/Fn6ImubtKcPilq7LKKX9YS00jsSC)","createdAt":1574299946072},{"id":12067,"originId":"5deb1bff484806122a97de79","articleId":2531,"userId":3562,"content":"[@waitingsong](/user/waitingsong) [@cnwhy](/user/cnwhy) \r\n此问题, 最终查出是: 单例模式返回单一实例+密集计算的问题,oracledb中的oci返回的是一个挂载在单一实例connection的结果集( 此结果集, 对空间类型字段,已经进行了结构化处理<DBObject>); \r\n因此 多线程或异步队列无法解决这个问题;\r\n我目前优化的方式是, 在oci的接口处,对row数据进行一次 JSON.parse(JSON.stringify(rows));\r\n与此同时, 提交了issue; 得到的回复如下:\r\n![image.png](//static.cnodejs.org/FvJ2-LFlTAosdtEmcJMenIOWCzMz)\r\n期待下个版本能够解决 咯","createdAt":1575689215249},{"id":12068,"originId":"5debca1414ffa4125a544e5b","articleId":2531,"userId":109,"content":"不知道 SharedArrayBuffer 是否能解决在多线程场景下的资源共享。","createdAt":1575733780869},{"id":12069,"originId":"5dee67f4484806122a97e52a","articleId":2531,"userId":3562,"content":"[@waitingsong](/user/waitingsong) \r\n不理解您说的方向 ! \r\n目前想法就是多接口分流, 减少单一SQL返回的数据量","createdAt":1575905268243},{"id":12070,"originId":"5df09a9bdf1b9a40d14c60d4","articleId":2531,"userId":109,"content":"http://es6.ruanyifeng.com/#docs/arraybuffer#SharedArrayBuffer","createdAt":1576049307199},{"id":12071,"originId":"5def11ee14ffa4125a5454b7","articleId":2532,"userId":111,"content":"https://www.cnblogs.com/yejingping/p/10436522.html","createdAt":1575948782452},{"id":12072,"originId":"5defa593078f8a4119917b71","articleId":2532,"userId":113,"content":"如果允许使用框架来做毕设，那就可以试试CabloyJS。CabloyJS是NodeJS免费开源的全栈框架，有完整的权限控制，有完整的文件上传与下载功能。实现网盘会非常便捷。\r\n\r\n[CabloyJS介绍](https://cabloy.com/zh-cn/articles/introduce.html)\r\n[文件上传](https://cabloy.com/zh-cn/articles/d64b70ec375647b9b65d74fcbee9f283.html)","createdAt":1575986579290},{"id":12073,"originId":"5df04fbfdf1b9a40d14c5f7b","articleId":2532,"userId":516,"content":"`electronjs`","createdAt":1576030143556},{"id":12074,"originId":"5a95423b2580af301494a8ca","articleId":2533,"userId":3143,"content":"这是个好问题，我的思路是：\r\n1.  使用TS\r\n2.  json序列化到类\r\n3.  使用装饰器，重写属性的get/set方法，校验在get/set中做，然后把序列化好之后的body，注入到controller中，作为函数参数。\r\n\r\n伪代码如下\r\n```ts\r\nclass User{\r\n     name:string;\r\n     id:number;\r\n}\r\n\r\nclass xxx extends controller{\r\n \r\n @checkBody(User)\r\n async index(body:User){\r\n .....\r\n }\r\n\r\n}\r\n```\r\n\r\n\r\n不知道社区有没有更好的做法。","createdAt":1519731259741},{"id":12075,"originId":"5a9550438d6e16e56bb809ac","articleId":2533,"userId":358,"content":"[@215566435](/user/215566435) TS 的话应该就这样了，不一定要作为方法装饰器，也可以是参数装饰器。\r\n\r\nJS 的话，把这些规则放到 app/validate 下，然后写个 loader 自动挂载到 app.validateRule.xx 即可","createdAt":1519734851492},{"id":12076,"originId":"5a95613a653c43b9146850bb","articleId":2533,"userId":752,"content":"https://github.com/MiYogurt/egg-y-validator","createdAt":1519739194029},{"id":12077,"originId":"5a95a37071327bb413bbff21","articleId":2533,"userId":3143,"content":"[@atian25](/user/atian25) 棒","createdAt":1519756144338},{"id":12078,"originId":"5a960d96653c43b9146850cb","articleId":2533,"userId":358,"content":"[@MiYogurt](/user/MiYogurt) 赞。\r\n\r\n我之前有看过 https://github.com/ianstormtaylor/superstruct 也不错","createdAt":1519783318701},{"id":12079,"originId":"5a9630122580af301494a8f9","articleId":2533,"userId":752,"content":"[@atian25](/user/atian25) 恩，有时间我看看，写个一个这个版本的。","createdAt":1519792146577},{"id":12080,"originId":"5a9633d08d6e16e56bb809c2","articleId":2533,"userId":358,"content":"[@MiYogurt](/user/MiYogurt) 其实可以写一个通用的，类似 egg-view","createdAt":1519793104069},{"id":12081,"originId":"5a9636b5653c43b9146850e0","articleId":2533,"userId":752,"content":"[@atian25](/user/atian25) 恩，通过 config 来配置使用哪种方式。","createdAt":1519793845696},{"id":12082,"originId":"5a9660028d6e16e56bb809de","articleId":2533,"userId":358,"content":"[@chenyehong](/user/chenyehong) 看置顶公告帖","createdAt":1519804418791},{"id":12083,"originId":"5a9664cf2580af301494a919","articleId":2533,"userId":541,"content":"![image.png](//static.cnodejs.org/FivCBtRMvJKUbk362eKMHNf44y4B)\r\n\r\n觉得还好吧，并不觉得很污染","createdAt":1519805647255},{"id":12084,"originId":"5a966700653c43b914685101","articleId":2533,"userId":358,"content":"[@AnzerWall](/user/AnzerWall) rule 要 cache 下吧","createdAt":1519806208722},{"id":12085,"originId":"5aa258a2ce4a27f867526f6c","articleId":2533,"userId":1,"content":"[@AnzerWall](/user/AnzerWall) Hey，有兴趣来我厂搞基试试看吗？","createdAt":1520588962469},{"id":12086,"originId":"5ab47ffee7b166bb7b9ecd76","articleId":2533,"userId":541,"content":"[@xadillax](/user/xadillax) emmm，死月现在不在大搜车了吧？","createdAt":1521778686866},{"id":12087,"originId":"5ab48812f5dfc27d7ad98aec","articleId":2533,"userId":358,"content":"[@AnzerWall](/user/AnzerWall) 欢迎找我内推给死月\r\n\r\n![mmexport1521704231440.jpg](//static.cnodejs.org/FmPRnJzJsWgYowKRTRoHFQh3BIll)","createdAt":1521780754206},{"id":12088,"originId":"5ab662c40b13e3ad6954ce0e","articleId":2533,"userId":1,"content":"[@atian25](/user/atian25) 别跟我抢 233333","createdAt":1521902276968},{"id":12089,"originId":"5ab66901a2f3b49869cb2cde","articleId":2533,"userId":358,"content":"[@xadillax](/user/xadillax) 没抢啊，我推给你啊","createdAt":1521903873057},{"id":12090,"originId":"5ad44874464b1bfa6b4252a5","articleId":2533,"userId":866,"content":"joi欢迎你 这才是优雅","createdAt":1523861620036},{"id":12091,"originId":"5ad45205a7d228c16b986c18","articleId":2533,"userId":1381,"content":"another-json-schema了解一下","createdAt":1523864069409},{"id":12092,"originId":"5def7cb8078f8a4119917af4","articleId":2533,"userId":3609,"content":"[@MiYogurt](/user/MiYogurt) [@atian25](/user/atian25) 刚才用了一下 superstruct ，发现好像没有类型转换的方法，number类型的经过http传输就变成字符串了，所以这个只能在前端用吗？","createdAt":1575976120676},{"id":12093,"originId":"5df03747df1b9a40d14c5f0b","articleId":2533,"userId":358,"content":"[@ycvcb123](/user/ycvcb123) 这是 HTTP 本身的规范，跟什么校验库没啥关系。query 肯定是 String 的，如果你要 number 的通过 body 来","createdAt":1576023879742},{"id":12094,"originId":"5ddcbe8e6043397a546d9948","articleId":2534,"userId":3336,"content":"```\r\n➜  test git:(master) ✗ cat test.ts \r\nasync function main() {\r\n  await Promise.all([])\r\n}\r\n\r\n➜  test git:(master) ✗ npx tsc --target esnext test.ts    \r\n➜  test git:(master) ✗ cat test.js \r\nasync function main() {\r\n    await Promise.all([]);\r\n}\r\n```\r\n应该是你配置错了","createdAt":1574747790235},{"id":12095,"originId":"5ddcc0028c1ac97aa630a12c","articleId":2534,"userId":3610,"content":"我知道什么原因了.我直接tsc的时候不知道为啥读取配置文件,tsc  --build tsconfig.json 强制指定配置文件就好了,所以这是为啥..","createdAt":1574748162404},{"id":12096,"originId":"5defa2f7078f8a4119917b58","articleId":2534,"userId":22,"content":"[@qyqx233](/user/qyqx233) 默认 tsc 命令不使用配置文件的，必须显式的指定","createdAt":1575985911746},{"id":12097,"originId":"5bd1e922b56c42645edb7cd1","articleId":2536,"userId":850,"content":"可以 mock","createdAt":1540483362394},{"id":12098,"originId":"5bd26da7b56c42645edb7cd5","articleId":2536,"userId":26,"content":"在app内合适的地方运行操作，使用app.createAnonymousContext()来创建匿名ctx，从而调用service的api，是否是这样？","createdAt":1540517287183},{"id":12099,"originId":"5bd2955a89665c365e9442f9","articleId":2536,"userId":3612,"content":"查了下文档，看了下 egg-mock 的初始化源码，这样就行：\r\n```javascript\r\n'use strict';\r\n\r\nconst path = require('path');\r\nconst egg = require('egg');\r\n\r\nconst EGG_PATH = Symbol.for('egg#eggPath');\r\n\r\nclass Application extends egg.Application {\r\n  get [EGG_PATH]() {\r\n    return path.dirname(__dirname);\r\n  }\r\n}\r\n\r\nconst app = new Application();\r\n\r\napp.ready();\r\n\r\nconst ctx = app.createAnonymousContext();\r\n\r\nexports.app = app;\r\nexports.ctx = ctx;\r\n\r\n```","createdAt":1540527450190},{"id":12100,"originId":"5def4b3f14ffa4125a5455d4","articleId":2536,"userId":3613,"content":"```\r\n'use strict';\r\n\r\n(async () => {\r\n  const mm = require('egg-mock');\r\n  const app = mm.app({\r\n    baseDir: __dirname,\r\n  });\r\n  await app.ready();\r\n  console.log(app);\r\n  const ctx = app.mockContext();\r\n  console.log(await ctx.model.Address.findOne());\r\n})();\r\n\r\n\r\n```\r\n\r\neggjs 2.0 的模式，备注下，方便后人","createdAt":1575963455661},{"id":12101,"originId":"5dea46bf484806122a97ddcd","articleId":2537,"userId":22,"content":"不奇怪，本来就是这样的。因为 `Promise` 是 `interface`。\r\n\r\n定义变量并且初始化的时候，所有的属性都需要匹配，多了也不行，少了也不行。\r\n\r\n```ts\r\nconst testDto: { dd: string } = { dd: \"123\", ss: 123 };\r\n// error TS2322: Type '{ dd: string; ss: number; }' is not assignable to type '{ dd: string; }'.\r\n// Object literal may only specify known properties, and 'ss' does not exist in type '{ dd: string; }'.\r\n\r\nconst testDto: { dd: string, ss: number } = { dd: \"123\" };\r\n// error TS2741: Property 'ss' is missing in type '{ dd: string; }' but required in type '{ dd: string; ss: number; }'.\r\n```\r\n\r\n但是当赋值时，多的可以赋值给少的，反之则不行。\r\n\r\n```ts\r\nlet testDto1 = { dd: \"123\", ss: 123 };\r\nlet testDto2 = { dd: \"123\" };\r\n\r\ntestDto1 = testDto2  // 错误\r\ntestDto2 = testDto1  // 正确\r\n```\r\n\r\n错误提示：\r\n\r\n> error TS2741: Property 'ss' is missing in type '{ dd: string; }' but required in type '{ dd: string; ss: number; }'.","createdAt":1575634623583},{"id":12102,"originId":"5dea475714ffa4125a544c6f","articleId":2537,"userId":22,"content":"`const testDto:{dd:string} = {dd:'123',ss:123}` 是变量初始化\r\n`const testDto2:{dd:string} = await Promise.resolve({dd:'123',ss:123})` 是变量定义和赋值\r\n\r\n\r\n","createdAt":1575634775086},{"id":12103,"originId":"5dea47a3484806122a97ddd1","articleId":2537,"userId":22,"content":"`const testDto:{dd:string} = {dd:'123',ss:123}` 报错。你试一下：\r\n\r\n```ts\r\nconst tmp = { dd: \"123\", ss: 123 };\r\nconst testDto: { dd: string } = tmp;\r\n```","createdAt":1575634851675},{"id":12104,"originId":"5dedd70f484806122a97e309","articleId":2537,"userId":33,"content":"[@justjavac](/user/justjavac) \r\n```const testDto:{dd:string} = (function(){return {dd:'123',dd2:'456'}})()```\r\n\r\n这样也报错，","createdAt":1575868175127},{"id":12105,"originId":"5dedd73714ffa4125a545125","articleId":2537,"userId":33,"content":"[@justjavac](/user/justjavac) 跟promise 没什么关系，好像是和你说的初始化和赋值的区别有关系","createdAt":1575868215555},{"id":12106,"originId":"5de8640a484806122a97d477","articleId":2538,"userId":3614,"content":"[@atian25](/user/atian25) 静候大佬","createdAt":1575511050372},{"id":12107,"originId":"5de8736314ffa4125a544594","articleId":2538,"userId":5,"content":"使用egg-sequelize库","createdAt":1575514979404},{"id":12108,"originId":"5dece89a484806122a97e15a","articleId":2538,"userId":1559,"content":"全都对象{}  key是用户id  value是sequelize实例，   如果为空就创建一个新的","createdAt":1575807130811},{"id":12109,"originId":"5de48bf239af564604bbfdd9","articleId":2539,"userId":3590,"content":"还好","createdAt":1575259122398},{"id":12110,"originId":"5de76f9339af564604bc0b68","articleId":2539,"userId":1747,"content":"好的呢","createdAt":1575448467082},{"id":12111,"originId":"5de7700e6043397a546db962","articleId":2539,"userId":3615,"content":"还好","createdAt":1575448590096},{"id":12112,"originId":"5de78c3b484806122a97d214","articleId":2539,"userId":3616,"content":"[@xiaomenggege](/user/xiaomenggege) ok","createdAt":1575455803287},{"id":12113,"originId":"5de9da3b14ffa4125a544aa2","articleId":2539,"userId":79,"content":"湖南来广州的，嘿嘿","createdAt":1575606843676},{"id":12114,"originId":"5dea1d8f484806122a97dd22","articleId":2539,"userId":1644,"content":"市场肯定是好的","createdAt":1575624079803},{"id":12115,"originId":"5de47c196043397a546dab9c","articleId":2540,"userId":1737,"content":"其实都可以采用vue丶react的ssr架构，对于首页后端渲染加载速度快，对于ajax请求多的页面，后端渲染骨架前端再次请求数据渲染（减轻服务端渲染压力）。","createdAt":1575255065840},{"id":12116,"originId":"5de482536043397a546dabd2","articleId":2540,"userId":3617,"content":"[@pretty-foam](/user/pretty-foam) 用ssr是个提升效率不错的选择，我的纠结点是首页大部分是偏动效类的交互，依赖前端框架功能并不多。用vue、react吧感觉有点重，不用吧貌似要用回jQuery，这更奇怪了。\r\n用户量不大的情况下，vue或react一套技术栈下来是很自然的选择，如果考虑大量用户的话，技术栈改如何演进呢（只是技术栈上，不考虑cdn等加速）？","createdAt":1575256659695},{"id":12117,"originId":"5de9c81b14ffa4125a544a24","articleId":2540,"userId":3617,"content":"重新编辑了描述，关于网站首页从技术栈选型和构建的角度，大家是如何考虑的呢？","createdAt":1575602203956},{"id":12118,"originId":"5de72dba39af564604bc0a23","articleId":2541,"userId":358,"content":"看错误日志咯","createdAt":1575431610653},{"id":12119,"originId":"5de72e6f39af564604bc0a2b","articleId":2541,"userId":2438,"content":"pm2 启动，突然报错，错误日志只显示这个","createdAt":1575431791679},{"id":12120,"originId":"5de72e9b6043397a546db7d2","articleId":2541,"userId":358,"content":"egg 不需要 PM2 启动。","createdAt":1575431835064},{"id":12121,"originId":"5de730506043397a546db81e","articleId":2541,"userId":2438,"content":"老系统，一直这么启动.. 用alinode没抓取到异常，开发环境部署毫无问题，生产环境隔15min重启","createdAt":1575432272298},{"id":12122,"originId":"5de7329a6043397a546db827","articleId":2541,"userId":38,"content":"reset 是 TCP 连接重置了，等于连接断开了，重启的那会可以通过 netstat 查看一下刚刚断开的端口（知识点close wait、time wait）找到端口就好办了，看下是不是代码里面用的哪个资源（db 或者别的啥），然后检查下对应的远端是不是出现问题（例如 db 的 connection 连接数到了上线，这个时候会 db 自动 close/拒绝 客户端）。","createdAt":1575432858950},{"id":12123,"originId":"5de7a9fb14ffa4125a5442ac","articleId":2541,"userId":2438,"content":"[@lellansin](/user/lellansin) 项目中使用websocket，初步推断是websocket导致的,按您的思路试下吧","createdAt":1575463419688},{"id":12124,"originId":"5de7ae35484806122a97d2de","articleId":2541,"userId":98,"content":"观察一下内存","createdAt":1575464501325},{"id":12125,"originId":"5de7e04e484806122a97d31c","articleId":2541,"userId":2438,"content":"[@zengming00](/user/zengming00) 内存、cpu都正常","createdAt":1575477326418},{"id":12126,"originId":"5de66afc39af564604bc0854","articleId":2543,"userId":22,"content":"花了半个月的时间把 nuxt 改为了 jQuery","createdAt":1575381756045},{"id":12127,"originId":"5de712d239af564604bc0932","articleId":2543,"userId":103,"content":"[@justjavac](/user/justjavac) 为什么，有什么坑吗？","createdAt":1575424722361},{"id":12128,"originId":"5de7700d6043397a546db95e","articleId":2543,"userId":545,"content":"浏览器兼容几乎不太可能；  IE9 以下没招，只能JQ\r\nnuxt.js   next.js  angular  做SSR 渲染都可以~","createdAt":1575448589325},{"id":12129,"originId":"5de732c86043397a546db82c","articleId":2544,"userId":38,"content":"上个招聘网站搜搜你所在城市/你想去的城市的岗位，看看缺不缺","createdAt":1575432904334},{"id":12130,"originId":"5de768586043397a546db91b","articleId":2544,"userId":3590,"content":"[@lellansin](/user/lellansin) 好的","createdAt":1575446616332},{"id":12131,"originId":"5ddd3aca6043397a546d9b6a","articleId":2546,"userId":358,"content":"内存和 CPU 用 alinode，业务的看你们自己基建","createdAt":1574779594725},{"id":12132,"originId":"5ddd42ee8c1ac97aa630a33c","articleId":2546,"userId":434,"content":"https://cnodejs.org/topic/5ddcf0b78c1ac97aa630a238\r\n我这个是集监控、调试一体的，看看是不是你需要的。。非常适合项目初期排查问题。","createdAt":1574781678309},{"id":12133,"originId":"5ddde87d8c1ac97aa630a422","articleId":2546,"userId":3619,"content":"非常感谢回复[@atian25](/user/atian25) [@stonephp](/user/stonephp) ","createdAt":1574824061925},{"id":12134,"originId":"5dde363a8c1ac97aa630a57f","articleId":2546,"userId":38,"content":"通用 APM 可以看看 sentry 啥的","createdAt":1574843962739},{"id":12135,"originId":"5dde6c886043397a546d9e6e","articleId":2546,"userId":1644,"content":"基础 内存 + CPU 接入alinode(free)，业务方面使用了 Prometheus ","createdAt":1574857864826},{"id":12136,"originId":"5de5d0396043397a546db1a6","articleId":2546,"userId":1161,"content":"[@lio-mengxiang](/user/lio-mengxiang) alinode第一选择，如果是为了方便，可以使用[@hyj1991](/user/hyj1991) easy-monitor和node-clinic","createdAt":1575342137824},{"id":12137,"originId":"5de5b8066043397a546db107","articleId":2547,"userId":21,"content":"nested set model,100级父子也一条简单sql出结果","createdAt":1575335942390},{"id":12138,"originId":"5de1d03c39af564604bbf7e4","articleId":2548,"userId":1748,"content":"rushb","createdAt":1575079996931},{"id":12139,"originId":"5de1d05c6043397a546da670","articleId":2548,"userId":3621,"content":"[@Dxw05](/user/Dxw05)  ？？\r\n","createdAt":1575080028041},{"id":12140,"originId":"5de1d0896043397a546da67f","articleId":2548,"userId":3621,"content":"[@Dxw05](/user/Dxw05) dfghjkl","createdAt":1575080073350},{"id":12141,"originId":"5de1d0926043397a546da685","articleId":2548,"userId":1749,"content":"[@Dxw05](/user/Dxw05) ![c75c10385343fbf258b0f8eabe7eca8064388f5f.png](//static.cnodejs.org/FsqqBxlaO3y8_F6QKbsz1xbb2Yo-)","createdAt":1575080082019},{"id":12142,"originId":"5de1f65f6043397a546da6da","articleId":2548,"userId":98,"content":"听说会砍需求、会用自己的产品，有些所谓的产品经理自己设计的东西自己从来都不用","createdAt":1575089759186},{"id":12143,"originId":"5de2069c39af564604bbf877","articleId":2548,"userId":1749,"content":"[@zengming00](/user/zengming00) 主要是用户不习惯吧，都是拿别人的复制加一点自己的UI，不然容易用户流失。","createdAt":1575093916259},{"id":12144,"originId":"5de224ef6043397a546da7b0","articleId":2548,"userId":3616,"content":"[@Dxw05](/user/Dxw05) 操你🐎","createdAt":1575101679660},{"id":12145,"originId":"5de22b086043397a546da7d1","articleId":2548,"userId":1748,"content":"[@llowww](/user/llowww) fuckyou","createdAt":1575103240004},{"id":12146,"originId":"5de47c4739af564604bbfd37","articleId":2548,"userId":3590,"content":"* 1. * > ![无标题.png](//static.cnodejs.org/FuFPZR8qswhNyePoHvZLxwyTHTUs)","createdAt":1575255111699},{"id":12147,"originId":"5ddbba108287937a65af6ac5","articleId":2549,"userId":734,"content":"现在应该只能自己在 addon 里 malloc 搞了。","createdAt":1574681104833},{"id":12148,"originId":"5ddc6fb68c1ac97aa6309f90","articleId":2549,"userId":21,"content":"为什么Buffer不可以，是他本身长度限制吗？\r\n\r\n如果要构建对象即V8::Object在addon也不行，因为内存管理还是一致的。\r\n\r\n注意楼上说的是malloc，这个能开辟空间，自己抛出指针往里面取可以做到内存耗尽。并不是开辟V8对象，V8::Object也只是指向V8堆空间的一个指针，开辟再大都没用。由于很多人可能会误解，所以做下补充。","createdAt":1574727606055},{"id":12149,"originId":"5ddc82756043397a546d9818","articleId":2549,"userId":11,"content":"如果你真的要搞个大对象来做某些特殊场景，直接调大 `max_old_space_size` 算了","createdAt":1574732405639},{"id":12150,"originId":"5ddc9db78c1ac97aa630a099","articleId":2549,"userId":703,"content":"建议用 leveldb 等外部 kv 库实现。","createdAt":1574739383988},{"id":12151,"originId":"5de0dba539af564604bbf69b","articleId":2549,"userId":734,"content":"[@zy445566](/user/zy445566) 嗯 有限制了哦，https://github.com/nodejs/node/blob/master/src/node_buffer.h#L32","createdAt":1575017381836},{"id":12152,"originId":"5de439d539af564604bbfb63","articleId":2549,"userId":1559,"content":"那么怎么样把大象放进冰箱里呢","createdAt":1575238101329},{"id":12153,"originId":"5ddc85de8c1ac97aa6309fe9","articleId":2551,"userId":3377,"content":"我买的阿里云的，有人打电话来核实信息，就ton过来了","createdAt":1574733278799},{"id":12154,"originId":"5ddc8b966043397a546d9868","articleId":2551,"userId":3,"content":"[@zhouyicc](/user/zhouyicc) 我已经过了很久很久了，还在备案中，还在腾讯客服审核中，唉！快要疯了","createdAt":1574734742038},{"id":12155,"originId":"5ddc8bf08c1ac97aa630a00e","articleId":2551,"userId":3,"content":"腾讯的审核人员全都不上班了吗？？\r\n当初就是脑袋进水选择了腾讯云","createdAt":1574734832930},{"id":12156,"originId":"5ddc8ed06043397a546d987d","articleId":2551,"userId":516,"content":"额，当时阿里云的客服打电话跟我说让我想一句歌词啥的很容易就通过了","createdAt":1574735568849},{"id":12157,"originId":"5dde28316043397a546d9d75","articleId":2551,"userId":3365,"content":"我的是阿里云客服帮我起的，叫个人资料记录","createdAt":1574840369385},{"id":12158,"originId":"5dde6cc68c1ac97aa630a653","articleId":2551,"userId":1644,"content":"是这个样子么，之前买了腾讯云的服务器好像很简单呀","createdAt":1574857926487},{"id":12159,"originId":"5ddfea3e6043397a546da204","articleId":2551,"userId":1495,"content":"想个古诗词就行了，什么踏雪无痕，晓风残月啊","createdAt":1574955582555},{"id":12160,"originId":"5de3476e6043397a546da8e3","articleId":2551,"userId":3624,"content":"我买的腾讯云，小程序提交备案资料，然后有人回访，告知哪些内容不行，然后协助修改了下，备案还是很顺利的。\r\n但是：我刚备案通过的域名，被微信以诱导分享的理由给封了，天可怜见，我上面就几篇自己写的一点技术记录，申诉了两次都不给解封，对腾讯完全无好感了。卒","createdAt":1575176046707},{"id":12161,"originId":"5de14b216043397a546da5f4","articleId":2552,"userId":108,"content":"> 1. 读取文件夹\r\n> 2. 遍历文件名, 过滤非 .js/.json 文件\r\n> 3. require(文件路径)\r\n\r\n顺便说一句, **为什么要玩这种黑魔法?**","createdAt":1575045921017},{"id":12162,"originId":"5de1c35039af564604bbf7b7","articleId":2552,"userId":1744,"content":"```javascript\r\nfunction filesWalker(dir, done) {\r\n  let results = []\r\n  fs.readdir(dir, function (err, list) {\r\n    if (err) return done(err)\r\n    let pending = list.length\r\n    if (!pending) return done(null, results)\r\n    list.forEach(function (file) {\r\n      file = path.resolve(dir, file)\r\n      fs.stat(file, function (err, stat) {\r\n        if (stat && stat.isDirectory()) {\r\n          filesWalker(file, function (err, res) {\r\n            results = results.concat(res)\r\n            if (!--pending) done(null, results)\r\n          })\r\n        } else {\r\n          results.push(file)\r\n          if (!--pending) done(null, results)\r\n        }\r\n      })\r\n    })\r\n  })\r\n}\r\n```","createdAt":1575076688617},{"id":12163,"originId":"5de233106043397a546da7f0","articleId":2552,"userId":1377,"content":"[@axetroy](/user/axetroy) 不一定用的上，只是看到webpack可以这样做，，想着后端这样做，好像也不错","createdAt":1575105296100},{"id":12164,"originId":"5de0aa8739af564604bbf56e","articleId":2553,"userId":98,"content":"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for-await...of\r\n流行不起来，不好用，我反正老早就知道这个了，但从来没用过","createdAt":1575004807176},{"id":12165,"originId":"5de0b8b539af564604bbf5b7","articleId":2553,"userId":117,"content":"[迭代异步生成器](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for-await...of)\r\n```\r\nlet timeout = async (timeout) => new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n        console.log(`delay:${timeout}ms`)\r\n        resolve();\r\n    }, timeout);\r\n});\r\n\r\nasync function* getArray(){\r\n    for (let i=0;i<5000;i+=1000){\r\n        await timeout(i);\r\n        yield i;\r\n    }\r\n    return;\r\n}\r\n\r\n(async()=>{\r\n\r\n    for await (const time of getArray()) {\r\n        console.log(`time:${time}`);\r\n    }\r\n    // for (const time of getArray()) {\r\n    //     console.log(`time:${time}`);\r\n    // }\r\n})();\r\n```","createdAt":1575008437863},{"id":12166,"originId":"5de0ee9d39af564604bbf700","articleId":2553,"userId":109,"content":"既然下面使用了 for-await-of ，那么上面的dir赋值是否就不应该用 await 了呢？","createdAt":1575022237239},{"id":12167,"originId":"5ddf24a08c1ac97aa630a744","articleId":2554,"userId":358,"content":"起码有几千个。。。 随便去 npms.io 搜索下不就有了。\r\n\r\nmarkdown.it 或者 https://github.com/remarkjs/remark ， 推荐后者。","createdAt":1574904992814},{"id":12168,"originId":"5ddf3c348c1ac97aa630a80b","articleId":2554,"userId":434,"content":"一抓一大把，github.com 上的 readme 不是就转换成html了吗。","createdAt":1574911028135},{"id":12169,"originId":"5ddf68c06043397a546da0b3","articleId":2554,"userId":89,"content":"https://github.com/markedjs/marked 用着非常舒服","createdAt":1574922432213},{"id":12170,"originId":"5ddf77658c1ac97aa630a8f8","articleId":2554,"userId":358,"content":"[@i5ting](/user/i5ting) 可以了解下 remark，MD 届的 AST","createdAt":1574926181591},{"id":12171,"originId":"5ddf8c106043397a546da14f","articleId":2554,"userId":89,"content":"[@atian25](/user/atian25) 看着不错，学习一下","createdAt":1574931472151},{"id":12172,"originId":"5de06b756043397a546da23d","articleId":2554,"userId":26,"content":"remark, 很好用","createdAt":1574988661645},{"id":12173,"originId":"5de0e58d39af564604bbf6d5","articleId":2554,"userId":383,"content":"有些转换器并不支持一些md方言","createdAt":1575019917548},{"id":12174,"originId":"5de0e9d839af564604bbf6f6","articleId":2554,"userId":358,"content":"[@vanishcode](/user/vanishcode) 找下对应方言的插件即可","createdAt":1575021016248},{"id":12175,"originId":"5de078798c1ac97aa630ab05","articleId":2556,"userId":98,"content":"基本上啥技术也不要，拿的钱还不比你少","createdAt":1574991993541},{"id":12176,"originId":"5de07c4b6043397a546da2c9","articleId":2556,"userId":751,"content":"保证上线的产品不出问题","createdAt":1574992971822},{"id":12177,"originId":"5dcb9c02865a9844a3021a06","articleId":2557,"userId":1251,"content":"https://github.com/surmon-china/vue-video-player","createdAt":1573624834461},{"id":12178,"originId":"5dcbdb35ece3813ad9ba82c5","articleId":2557,"userId":3380,"content":"[@WindTrace](/user/WindTrace) 谢谢","createdAt":1573641013440},{"id":12179,"originId":"5dcd032a865a9844a3021f07","articleId":2557,"userId":3380,"content":"[@WindTrace](/user/WindTrace) 部分机型点击播放就会全屏播放，怎么解决呀大佬","createdAt":1573716778096},{"id":12180,"originId":"5ddf7d6c6043397a546da10c","articleId":2557,"userId":671,"content":"基于uniapp的[https://ext.dcloud.net.cn/plugin?id=785](https://ext.dcloud.net.cn/plugin?id=785)","createdAt":1574927724764},{"id":12181,"originId":"5dde25946043397a546d9d58","articleId":2558,"userId":268,"content":"为什么要这么做呢？","createdAt":1574839700214},{"id":12182,"originId":"5dde26118c1ac97aa630a51b","articleId":2558,"userId":194,"content":"这个想法本身就不太正确吧，即便正确地实现了，但做的不是正确的事情。\r\n一般框架有中间件专门提供静态资源文件服务，比如 express.static 。 在生产环境下，他内部会实现缓存的。\r\n一个项目的静态资源一般几兆，最多也不会超过几十兆。所以直接用中间件提供的服务就好了，不要再自己额外写什么缓存","createdAt":1574839825498},{"id":12183,"originId":"5dde29f48c1ac97aa630a541","articleId":2558,"userId":89,"content":"放到cdn上","createdAt":1574840820040},{"id":12184,"originId":"5dde2a6c8c1ac97aa630a548","articleId":2558,"userId":729,"content":"[@dafanzhi](/user/dafanzhi)  我主要是想着用户第一次访问站点的时候，能够尽快的返回资源。egg-static默认是开启了缓存的，但是新用户首次访问还是有些慢。不知道放到cdn上和直接放到内存中哪个更好些？","createdAt":1574840940627},{"id":12185,"originId":"5dde3b4c8c1ac97aa630a593","articleId":2558,"userId":545,"content":"[@wmui](/user/wmui)  CDN 最快，\t其次单机使用 nginx 。\r\n大部分耗时其实在网络","createdAt":1574845260366},{"id":12186,"originId":"5dde42a66043397a546d9de2","articleId":2558,"userId":358,"content":"OSS。。。 必然是 OSS + CDN。","createdAt":1574847142131},{"id":12187,"originId":"5dde590e6043397a546d9e3e","articleId":2558,"userId":729,"content":"[@atian25](/user/atian25) [@zuohuadong](/user/zuohuadong) 3Q，放阿里云了","createdAt":1574852878775},{"id":12188,"originId":"5ddea5296043397a546d9ede","articleId":2558,"userId":729,"content":"OSS + CDN真是快啊，直接从1.3s降到25ms。。。","createdAt":1574872361024},{"id":12189,"originId":"5ddf24478c1ac97aa630a73d","articleId":2558,"userId":358,"content":"[@wmui](/user/wmui) 你需要理解下 CDN 的概念和原理","createdAt":1574904903670},{"id":12190,"originId":"5ddf36d88c1ac97aa630a7f2","articleId":2558,"userId":729,"content":"[@atian25](/user/atian25) 嗯嗯，计算机基础知识没掌握好，还需要恶补。","createdAt":1574909656445},{"id":12191,"originId":"5ddf38156043397a546d9fb3","articleId":2558,"userId":729,"content":"[@atian25](/user/atian25) 请教个与本贴无关的问题，egg不推荐使用pm2进行部署，那如何才能做到无中断部署呢？","createdAt":1574909973825},{"id":12192,"originId":"5ddf3e8c8c1ac97aa630a81a","articleId":2558,"userId":358,"content":"[@wmui](/user/wmui) 去了解下 SLB 吧，这些也是云服务的基础功能了，通过负载均衡来多个实例滚动发布。","createdAt":1574911628622},{"id":12193,"originId":"5dddec4d6043397a546d9c45","articleId":2559,"userId":615,"content":"async写的话 就 try catch啊\r\n回调函数的话就if(err) dosomething \r\n不是这样么\r\n","createdAt":1574825037467},{"id":12194,"originId":"5ddca6498c1ac97aa630a0bc","articleId":2560,"userId":358,"content":"看 egg-socketio 自带的单测示例啊","createdAt":1574741577522},{"id":12195,"originId":"5ddca64d8c1ac97aa630a0c0","articleId":2560,"userId":358,"content":"https://github.com/eggjs/egg-socket.io/blob/master/test/io.test.js","createdAt":1574741581783},{"id":12196,"originId":"5ddcb8056043397a546d9928","articleId":2560,"userId":615,"content":"啊 哈哈哈哈  我怎么没有想到！","createdAt":1574746117820},{"id":12197,"originId":"5ddca3778c1ac97aa630a0ac","articleId":2561,"userId":89,"content":"是create-react-app里的概念。eject是将webpack具体配置反解出来。\r\n\r\nhttps://github.com/facebook/create-react-app\r\n\r\n```\r\nNo Lock-In: You can “eject” to a custom setup at any time. Run a single command, and all the configuration and build dependencies will be moved directly into your project, so you can pick up right where you left off.\r\n```","createdAt":1574740855713},{"id":12198,"originId":"5ddc90338c1ac97aa630a033","articleId":2562,"userId":1723,"content":"之前用 wkhtmltopdf 库是可以直接添加页码的","createdAt":1574735923592},{"id":12199,"originId":"5dd26ab6a9f4592e749e18d3","articleId":2563,"userId":516,"content":"之前写脚本导出接近100w行的数据，因为是脚本，所以我用 node --max-old-space-size=4096 xxx.js\r\n做功能的话你可以用buffer，buffer不受内存的限制","createdAt":1574070966838},{"id":12200,"originId":"5dd3b73ca9f4592e749e1c54","articleId":2563,"userId":268,"content":"试试这个库\r\n\r\nhttps://github.com/exceljs/exceljs#streaming-io","createdAt":1574156092387},{"id":12201,"originId":"5ddc88c18c1ac97aa6309ffc","articleId":2563,"userId":3631,"content":"[@nnliang](/user/nnliang)  [@jiangli373](/user/jiangli373)  3Q","createdAt":1574734017812},{"id":12202,"originId":"5dda5ca28287937a65af6781","articleId":2564,"userId":79,"content":"嘿嘿，我还在造轮子中","createdAt":1574591650186},{"id":12203,"originId":"5dda603434a8a07a2dab6c89","articleId":2564,"userId":153,"content":"[@qiutian00](/user/qiutian00) 1","createdAt":1574592564493},{"id":12204,"originId":"5ddc83d08c1ac97aa6309fd5","articleId":2564,"userId":3377,"content":"黄轶大佬说：把知识运用到项目中，摸鱼瞎看不用过段时间就忘了。","createdAt":1574732752323},{"id":12205,"originId":"5ddc85758c1ac97aa6309fe1","articleId":2564,"userId":153,"content":"[@zhouyicc](/user/zhouyicc) hh，看到了，我觉得也是的","createdAt":1574733173647},{"id":12206,"originId":"5ddb987b8287937a65af6a6e","articleId":2565,"userId":501,"content":"在线电子书: \r\n[react模式](https://www.geekjc.com/ebook/detail/5bae0c10ddb4f437ecfdc708/1538132695121/init)\r\n[nodejs基础教程](https://www.geekjc.com/ebook/detail/5b9f65ce0f510f6ae689bccd/init)\r\n[前端常见面试题汇总](https://www.geekjc.com/ebook/detail/5ba5bcae7143880b09cb4d54/init)","createdAt":1574672507947},{"id":12207,"originId":"5ddb98738287937a65af6a66","articleId":2566,"userId":501,"content":"在线电子书: \r\n[react模式](https://www.geekjc.com/ebook/detail/5bae0c10ddb4f437ecfdc708/1538132695121/init)\r\n[nodejs基础教程](https://www.geekjc.com/ebook/detail/5b9f65ce0f510f6ae689bccd/init)\r\n[前端常见面试题汇总](https://www.geekjc.com/ebook/detail/5ba5bcae7143880b09cb4d54/init)","createdAt":1574672499215},{"id":12208,"originId":"5dd519eb34a8a07a2dab6055","articleId":2567,"userId":111,"content":"当然能搞定 ，pc机都可以搞定 ，1k client常连接，每秒发10条消息，假设每条消息长度为50byte  10x50 x1k  客户端全活跃需要server每秒处理500m的带宽流量换算成套路云的bit就是4g流量 瞬间高大上，   套路云什么都便宜，就是流量贵\r\n 做了个根据带宽估算用户数的页面,可以根据实际应用场景估算一下\r\n \r\n ```P\r\n <!DOCTYPE HTML>\r\n<html lang=\"en-US\">\r\n\t<head>\r\n\t\t<meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css\" media=\"all\" />\r\n\t\t<script type=\"text/javascript\" src=\"https://cdn.bootcss.com/angular.js/1.6.0/angular.js\"></script>\r\n\t</head>\r\n\t<body ng-app ng-init=\"msg=50;cnt=10;taolu=4\">\r\n\t\t<div class=\"ui masthead vertical segment\">\r\n\t\t\t<div class=\"ui container\" style=\"background:honeydew;padding:10px;box-shadow:5px 5px 5px #585858\">\r\n\t\t\t\t<div class=\"ui segment\"> <span class='item'>     套路云带宽： </span>\r\n <span class='item'><input  ng-model=\"taolu\" />G </span>\r\n\t\t\t\t\t \r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"ui segment\">\r\n\t\t\t\t\t<div class=\"ui two column grid\">\r\n\t\t\t\t\t\t<div class=\"column\"> <span class='item'> \t用户活跃度 <br/>每秒发消息数 ：</span>\r\n <span class='item'><input   ng-model=\"cnt\" />条 </span>\r\n\t\t\t\t\t\t\t<br/> <span class='item'>  每条消息大小 ：</span>\r\n <span class='item'>  <input   ng-model=\"msg\" />byte  </span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"column\"> <span class='item'>  客户端流量 {{ cnt * msg }} byte </span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"ui segment\">\r\n\t\t\t\t\t<span class='item'>预计在线用户数 {{ 1000*1000*taolu/8/msg/cnt }}</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n \t</body>\r\n\r\n</html>\r\n````","createdAt":1574246891832},{"id":12209,"originId":"5ddb83368287937a65af69e3","articleId":2567,"userId":318,"content":"除了网络，内存需要多大，玩家数据很多的话","createdAt":1574667062373},{"id":12210,"originId":"5dd493437651572e0955e173","articleId":2568,"userId":3339,"content":"你们是自建的 mqtt 服务吗？可以试一下阿里云的 MQTT 服务，在服务端直接使用 MQ 的方式就好了，mqtt 协议不适合用在服务端","createdAt":1574212419357},{"id":12211,"originId":"5dd49ebaa9f4592e749e1dfe","articleId":2568,"userId":3631,"content":"emqtt支持共享订阅。\r\n共享订阅(Shared Subscription)\r\n共享订阅(Shared Subscription)支持在多订阅者间采用分组负载平衡方式派发消息:\r\n\r\n                            ---------\r\n                            |       | --Msg1--> Subscriber1\r\nPublisher--Msg1,Msg2,Msg3-->|  EMQ  | --Msg2--> Subscriber2\r\n                            |       | --Msg3--> Subscriber3\r\n                            ---------\r\n使用方式: 订阅者在主题(Topic)前增加’$queue’或’$share/<group>/’前缀。\r\n\r\nhttps://docs.emqx.io/broker/v3/cn/changes.html?highlight=group","createdAt":1574215354033},{"id":12212,"originId":"5dd7b33b34a8a07a2dab68da","articleId":2568,"userId":26,"content":"这不是用mqtt能处理的，这个和redis一样，都是pub/sub，而不是`消息队列`，我觉得你应该需要的是MQ类中间件","createdAt":1574417211749},{"id":12213,"originId":"5ddaaa5034a8a07a2dab6d30","articleId":2568,"userId":1425,"content":"无论自建还是公有云 消费端量大了都解决不了，共享订阅可以缓解下，如果物联网的话，楼上 EMQ 那个教程里面共享订阅大多 Broker 都支持 有个废弃项目可以参考下\r\nhttps://github.com/wivwiv/egg-iot-with-mqtt/blob/master/README.md#%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE\r\n\r\n根本办法还是先到 Kafka 等消息 流中间件，再慢慢来处理","createdAt":1574611536857},{"id":12214,"originId":"5ddb4ffe8287937a65af6939","articleId":2568,"userId":3634,"content":"[@xiedacon](/user/xiedacon) [@qqxwbtt](/user/qqxwbtt) [@HobaiRiku](/user/HobaiRiku) [@wiviwiv](/user/wiviwiv) \r\nthank you！","createdAt":1574653950298},{"id":12215,"originId":"5dd748aa8287937a65af61c4","articleId":2569,"userId":3635,"content":"按照书本敲的代码  出现错误  希望能指点一下 谢谢","createdAt":1574389930752},{"id":12216,"originId":"5dda56a234a8a07a2dab6c7d","articleId":2569,"userId":79,"content":"可能与babel的版本有关吧，可参考试一下：https://www.cnblogs.com/jiebba/p/9618930.html\r\n![image.png](//static.cnodejs.org/FpQHnpC4_GGDQRpkpzzZnU1bTl9k)","createdAt":1574590114033},{"id":12217,"originId":"5dcac6ef865a9844a302183b","articleId":2571,"userId":652,"content":"https://github.com/sunfeng90/node-spider [@iori2882](/user/iori2882) 可以看一下","createdAt":1573570287315},{"id":12218,"originId":"5dcae3ecece3813ad9ba7f4e","articleId":2571,"userId":1744,"content":"https://github.com/LuckyHH/WebSpider\r\n其实很多都是superagent加cheerio搭配，这种只能抓HTML上有的数据，原理就是下载网页进行分析。抓取ajax数据什么的，需要无头浏览器。","createdAt":1573577708040},{"id":12219,"originId":"5dcb5b87ece3813ad9ba7fa5","articleId":2571,"userId":1504,"content":"[@sunfeng90](/user/sunfeng90) 谢谢例子简单正用的上.....学习一下","createdAt":1573608327362},{"id":12220,"originId":"5dcb5ba6865a9844a30218cb","articleId":2571,"userId":1504,"content":"[@LuckyHH](/user/LuckyHH) 谢谢,功能齐全,目前先学习简单的,以后在学习这个........","createdAt":1573608358846},{"id":12221,"originId":"5dcb9d0e865a9844a3021a17","articleId":2571,"userId":636,"content":"request + cheerio，还不行就上puppeteer。。。","createdAt":1573625102747},{"id":12222,"originId":"5dcd33a1ece3813ad9ba872f","articleId":2571,"userId":3636,"content":"用 node + selenium + webdriverio 也可以实现，5.0以上支持无头浏览器","createdAt":1573729185770},{"id":12223,"originId":"5dcd39cf865a9844a30220ad","articleId":2571,"userId":146,"content":"puppeteer 完美","createdAt":1573730767820},{"id":12224,"originId":"5dcdfa02ece3813ad9ba87de","articleId":2571,"userId":726,"content":"puppeteer","createdAt":1573779970480},{"id":12225,"originId":"5dce142dece3813ad9ba88d7","articleId":2571,"userId":570,"content":"puppeteer","createdAt":1573786669157},{"id":12226,"originId":"5dd929d28287937a65af663c","articleId":2571,"userId":1504,"content":"谢谢大家,Puppeteer 很好,正适合我目前的需求!!!!!","createdAt":1574513106478},{"id":12227,"originId":"5dd3f4b17651572e0955e0e8","articleId":2572,"userId":3634,"content":"为什么要同步？","createdAt":1574171825403},{"id":12228,"originId":"5dd41775a9f4592e749e1d45","articleId":2572,"userId":358,"content":"可能是被 callback 折磨惨了又没搞懂 await 的用法吧。\r\n\r\n都同步了还谈什么性能更好。。。","createdAt":1574180725312},{"id":12229,"originId":"5dd49289a9f4592e749e1d95","articleId":2572,"userId":145,"content":"你的意思应该是  `Promise` 吧, npm找一下 有人家封装好的, 不过这种情况一般自己写个通用函数封装一下就好了.","createdAt":1574212233699},{"id":12230,"originId":"5dd7a9e134a8a07a2dab6895","articleId":2572,"userId":3158,"content":"用promise + async/await 封装一个就好了。随便找找都有","createdAt":1574414817216},{"id":12231,"originId":"54bddf85514ea9146862ac3d","articleId":2573,"userId":3639,"content":"编码的问题吧？","createdAt":1421729669832},{"id":12232,"originId":"54bde921514ea9146862ac42","articleId":2573,"userId":3640,"content":"同问，我也遇到这样的问题。最后没办法只能用text方法.","createdAt":1421732129983},{"id":12233,"originId":"54be0c10514ea9146862ac77","articleId":2573,"userId":3638,"content":"问题解决了，办法入下：\r\n引入he模块，转码\r\n```\r\nvar he = require('he');\r\nhe.decode(str);\r\n```","createdAt":1421741072818},{"id":12234,"originId":"54be0c44514ea9146862ac78","articleId":2573,"userId":3638,"content":"[@aquarius001](/user/aquarius001) 看下面回复","createdAt":1421741124035},{"id":12235,"originId":"54be12fb514ea9146862ac80","articleId":2573,"userId":3641,"content":"cheerio本身默认是转实体的\r\ncheerio.load(html,{decodeEntities: false}); 加个参数","createdAt":1421742843226},{"id":12236,"originId":"54be163c514ea9146862ac88","articleId":2573,"userId":3642,"content":"[@skipify](/user/skipify) 正解","createdAt":1421743676059},{"id":12237,"originId":"54be5e22514ea9146862acb4","articleId":2573,"userId":3638,"content":"[@skipify](/user/skipify)  THK，之前也用了这个参数，没生效，估计单词写错了，又试了下，可以了， VERY THK","createdAt":1421762082129},{"id":12238,"originId":"54bf1103c894aa2d0f9a3ee4","articleId":2573,"userId":3640,"content":"[@lcyangily](/user/lcyangily)[@skipify](/user/skipify) ok，搞定了","createdAt":1421807875902},{"id":12239,"originId":"54c995a7ef1b48510c27de5d","articleId":2573,"userId":576,"content":"[@skipify](/user/skipify) wow ! it really work!!","createdAt":1422497191768},{"id":12240,"originId":"57cd8eb98624502e4751355b","articleId":2573,"userId":3643,"content":"[@skipify](/user/skipify) 正解，文档中没看有写","createdAt":1473089209068},{"id":12241,"originId":"5dd797d434a8a07a2dab6832","articleId":2573,"userId":374,"content":"搞定了就是这个参数 `{decodeEntities: false}`","createdAt":1574410196961},{"id":12242,"originId":"5dd68ca28287937a65af6082","articleId":2574,"userId":59,"content":"https://liangtongzhuo.com/atricle.html?5b0cbc482f301e0038b2e7d7","createdAt":1574341794629},{"id":12243,"originId":"5dd74efa34a8a07a2dab6684","articleId":2574,"userId":1577,"content":"[@liangtongzhuo](/user/liangtongzhuo) 好像用法都是对的，我的理解出错了，我再好好琢磨下","createdAt":1574391546449},{"id":12244,"originId":"5d06f1841fe902120f31f964","articleId":2575,"userId":109,"content":"egg init 初始化一个基本项目看看 dev 能否启起来","createdAt":1560736132645},{"id":12245,"originId":"5d0702921fe902120f31fa8c","articleId":2575,"userId":1466,"content":"看样子跟ipv6有一点关系，试试直接用 127.0.0.1 访问呢？","createdAt":1560740498977},{"id":12246,"originId":"5d070b161fe902120f31faea","articleId":2575,"userId":358,"content":"`leader does not be active in 60000ms` 一般是有重 CPU 的操作，导致 agent 和 worker 之间连 60s 一次的心跳都发不了，可以用 alinode 看下。\r\n\r\nport undefined 那个不确定是否是 ipv6 导致的，不过可能不关事。","createdAt":1560742678049},{"id":12247,"originId":"5dd64deb34a8a07a2dab646d","articleId":2575,"userId":3646,"content":"你好，请问解决这个问题了吗？我今天也出现这个问题了，之前的时候都是没有问题的，突然就启动不了了","createdAt":1574325739613},{"id":12248,"originId":"5dc52d41865a9844a3020bb6","articleId":2576,"userId":152,"content":"实在不行搞一个java或者其它语言的程序专门做加解密操作供Node调用。 node相关的库确实少。 ","createdAt":1573203265222},{"id":12249,"originId":"5dc52e8e865a9844a3020bc7","articleId":2576,"userId":3647,"content":"可以用别的语言编译wasm给js调用, 或者C++原生拓展","createdAt":1573203598267},{"id":12250,"originId":"5dc8b1cf865a9844a3021106","articleId":2576,"userId":3158,"content":"[@Gitforxuyang](/user/Gitforxuyang) 谢谢老哥，这操作没用过得看看","createdAt":1573433807583},{"id":12251,"originId":"5dc8b1dcece3813ad9ba780c","articleId":2576,"userId":3158,"content":"[@lxzan](/user/lxzan) 感觉好高端啊...","createdAt":1573433820573},{"id":12252,"originId":"5dc8c6afece3813ad9ba78cf","articleId":2576,"userId":148,"content":"小哥，我印象中 crypto库的加密算法是由本机openssl库支持的,具体的需要看下文档，但是我也不确定。QAQ。","createdAt":1573439151311},{"id":12253,"originId":"5dc8fbceece3813ad9ba79b1","articleId":2576,"userId":3647,"content":"[@SKandAV](/user/SKandAV) 你这证书太长了吧","createdAt":1573452750031},{"id":12254,"originId":"5dc92262865a9844a3021340","articleId":2576,"userId":3158,"content":"[@lxzan](/user/lxzan) ...银行给的测试证书就是这个","createdAt":1573462626207},{"id":12255,"originId":"5dc92297ece3813ad9ba7aa5","articleId":2576,"userId":3158,"content":"[@muyoucun557](/user/muyoucun557) ，我看过了。好像没有支持crypto 好像没有支持sm2 的。心累啊","createdAt":1573462679809},{"id":12256,"originId":"5dc925a4ece3813ad9ba7ab0","articleId":2576,"userId":545,"content":"https://github.com/search?q=js+sm2\r\n\r\n这里面有十几个库，选一个能用的吧。\r\n百度搜不到啥东西的","createdAt":1573463460684},{"id":12257,"originId":"5dc93cb5ece3813ad9ba7b06","articleId":2576,"userId":3158,"content":"[@zuohuadong](/user/zuohuadong) 好的，谢谢哥\r\n","createdAt":1573469365960},{"id":12258,"originId":"5dca8732ece3813ad9ba7e96","articleId":2576,"userId":3647,"content":"[@SKandAV](/user/SKandAV) 我用sm2生成的证书比你的短多了","createdAt":1573553970013},{"id":12259,"originId":"5dccebc5ece3813ad9ba85aa","articleId":2576,"userId":3158,"content":"[@lxzan](/user/lxzan) 哥，你后面是调用的其它语言的么。现在银行有java，C#，的sdk。现在打算调用C#的dll。","createdAt":1573710789870},{"id":12260,"originId":"5dd25e5ea9f4592e749e185d","articleId":2576,"userId":3647,"content":"[@SKandAV](/user/SKandAV) 我就写demo玩玩","createdAt":1574067806323},{"id":12261,"originId":"5dd2693ba9f4592e749e18ab","articleId":2576,"userId":109,"content":"[@SKandAV](/user/SKandAV) \r\nopenssl 最新版有支持国密算法。具体是 sm2 还是 sm4 忘了。","createdAt":1574070587755},{"id":12262,"originId":"5dd269e6a9f4592e749e18bb","articleId":2576,"userId":109,"content":"```sh\r\nopenssl ecparam -list_curves  \\|  grep SM\r\n```\r\n>   SM2       : SM2 curve over a 256 bit prime field\r\n\r\n","createdAt":1574070758469},{"id":12263,"originId":"5dd63fb734a8a07a2dab63d1","articleId":2576,"userId":3158,"content":"[@waitingsong](/user/waitingsong) 谢谢老哥，我已经用node 掉用dll解决了","createdAt":1574322103409},{"id":12264,"originId":"57651682df354b2f6df1950c","articleId":2577,"userId":1860,"content":"卧槽我觉得你读死书死读书啊，字符串拼接不会了么？","createdAt":1466242690643},{"id":12265,"originId":"57653101197e9a676dff46ea","articleId":2577,"userId":3648,"content":"[@klausgao](/user/klausgao) 我是想问这个模块怎么带参数使用。如果只会拼接字符串的话，那你岂不是很渣？","createdAt":1466249473376},{"id":12266,"originId":"576547a302d0ee4b6d8a3e55","articleId":2577,"userId":3649,"content":"options = {\r\nuri: 'http://xxxx.com',\r\nmethod: 'POST'/'GET',\r\n\tqs: {\r\n\t\ta: 1,\r\n\t\tb: 2\r\n\t}\r\n}","createdAt":1466255267103},{"id":12267,"originId":"57655d7402d0ee4b6d8a3e57","articleId":2577,"userId":3650,"content":"你都发github地址出来了，居然没看到！！！！无语\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1466260852323},{"id":12268,"originId":"57656652df354b2f6df19525","articleId":2577,"userId":3648,"content":"[@Neil-UWA](/user/Neil-UWA) 谢谢！","createdAt":1466263122410},{"id":12269,"originId":"57656f63f3335b876d35caf7","articleId":2577,"userId":3648,"content":"[@Neil-UWA](/user/Neil-UWA)  请求url的时候，怎么能加上Request packet？","createdAt":1466265443898},{"id":12270,"originId":"57656fce197e9a676dff46fd","articleId":2577,"userId":3648,"content":"[@Neil-UWA](/user/Neil-UWA) ![QQ图片20160618235845.png](//static.cnodejs.org/FvZyWoXWkyxYg8bkxx835v0UdFqO)\r\n怎么能带上请求包体。。。","createdAt":1466265550216},{"id":12271,"originId":"5765de7902d0ee4b6d8a3e68","articleId":2577,"userId":3649,"content":"[@git-vital](/user/git-vital) ……看文档","createdAt":1466293881606},{"id":12272,"originId":"576600b602d0ee4b6d8a3e71","articleId":2577,"userId":1937,"content":"太水了，为什么这样的问题都来论坛？","createdAt":1466302646938},{"id":12273,"originId":"5767496b197e9a676dff4735","articleId":2577,"userId":3648,"content":"[@Neil-UWA](/user/Neil-UWA) 看不懂。。","createdAt":1466386795223},{"id":12274,"originId":"57674993197e9a676dff4737","articleId":2577,"userId":3648,"content":"[@htoooth](/user/htoooth) 我新人好么？你初学的时候，没问过你现在觉得幼稚的问题么？每个帖子你都在**哔哔**，你是少妇吧？","createdAt":1466386835132},{"id":12275,"originId":"57675e2dd4b4eb5803867d05","articleId":2577,"userId":3651,"content":"request body 附在options结构的data字段中","createdAt":1466392109371},{"id":12276,"originId":"57677b5ad4b4eb5803867d16","articleId":2577,"userId":1937,"content":"[@git-vital](/user/git-vital) 祝你好运！","createdAt":1466399578349},{"id":12277,"originId":"5767893bd4b4eb5803867d1c","articleId":2577,"userId":146,"content":"看文档，说的很清楚吧...如果不会，先把基本例子跑跑通？这只是个建议！友情PS：**别拿自己是新人来找借口**","createdAt":1466403131937},{"id":12278,"originId":"5ad5ae03ba60fcc66b7b8386","articleId":2577,"userId":1871,"content":"看这里官方文档写了\r\n[https://github.com/request/request#oauth-signing](https://github.com/request/request#oauth-signing)","createdAt":1523953155595},{"id":12279,"originId":"5dd5fc4e8287937a65af5dfa","articleId":2577,"userId":3652,"content":"楼主请问 你那个请求包体 最后怎么处理的？","createdAt":1574304846723},{"id":12280,"originId":"5dd4b85f2985246fab6c8263","articleId":2578,"userId":117,"content":"nodejs 有办法作为客户端 去发http请求吗？","createdAt":1574221919350},{"id":12281,"originId":"5dd4b8b82985246fab6c8268","articleId":2578,"userId":3653,"content":"[@chenkai0520](/user/chenkai0520) 有啊","createdAt":1574222008694},{"id":12282,"originId":"5dd5de3c34a8a07a2dab6172","articleId":2578,"userId":703,"content":"服务端和客户端都有：https://github.com/websockets/ws","createdAt":1574297148078},{"id":12283,"originId":"5dd5f33634a8a07a2dab626a","articleId":2578,"userId":3653,"content":"[@myy](/user/myy) 谢谢，之前找到过这个插件，没看详细, 确实可以","createdAt":1574302518482},{"id":12284,"originId":"5dd4d77f8518b6701602317d","articleId":2579,"userId":147,"content":"middleware的init","createdAt":1574229887473},{"id":12285,"originId":"5dd550788287937a65af5cb5","articleId":2579,"userId":1192,"content":"感谢，纠结了好久的问题终于解决了","createdAt":1574260856739},{"id":12286,"originId":"5dd1eb09a9f4592e749e1522","articleId":2580,"userId":1747,"content":"奥利给！","createdAt":1574038281665},{"id":12287,"originId":"5dd1ffe97651572e0955da82","articleId":2580,"userId":21,"content":"即使你三十五岁做上了高管，你也很难撑。\r\n三十前准备考公吧。","createdAt":1574043625339},{"id":12288,"originId":"5dd22e5ca9f4592e749e16ec","articleId":2580,"userId":1749,"content":"[@zy445566](/user/zy445566) 好多35都是去创业当老板去了","createdAt":1574055516462},{"id":12289,"originId":"5dd25a827651572e0955dcb6","articleId":2580,"userId":2003,"content":"不知道我定不顶得住啊！！！简直生动。。。差点笑出了声","createdAt":1574066818797},{"id":12290,"originId":"5dd35469a9f4592e749e1a86","articleId":2580,"userId":189,"content":"差点笑出了声 ","createdAt":1574130793941},{"id":12291,"originId":"5dd356be7651572e0955deba","articleId":2580,"userId":706,"content":"是不是25岁之前就要考虑了","createdAt":1574131390214},{"id":12292,"originId":"5dd4e4fd34a8a07a2dab5f2b","articleId":2580,"userId":1614,"content":"[@idomyway](/user/idomyway) 硕士一毕业就要考虑转行了，太真实了扒","createdAt":1574233341882},{"id":12293,"originId":"5dd417bfa9f4592e749e1d4b","articleId":2581,"userId":358,"content":"文件还是可以创建的，估计你是在系统目录下导致的吧。","createdAt":1574180799364},{"id":12294,"originId":"5dd2bc67a9f4592e749e197a","articleId":2582,"userId":1741,"content":"不知道具体需求，撸个参考实现吧(最好别直接复制过去用)\r\n```\r\nfunction uniqueId(obj) {\r\n  const arr = [1, 2, 5, 10, 35, 33, 21, 16]; // 任意数量小于36的数，数量=生成标识字符串长度\r\n  let index = 0;\r\n  Object.keys(obj).sort().forEach(it => {\r\n    let val = obj[it];\r\n\tif (typeof val === 'object') val = uniqueId(val);\r\n\tval = `${val}`;\r\n    Array.prototype.forEach.call(val, (c, i) => {\r\n      arr[index] =  (arr[index] + val.codePointAt(i)) % 36;\r\n      index++;\r\n\t  index %= arr.length;\r\n    });\r\n  });\r\n  return arr.map(c => c.toString(36)).join('');\r\n}\r\nfunction test() {\r\n  const objs = [\r\n    { aaa: 123 },\r\n    { bbb: 123, b: true, c: { cc: 'hello' }},\r\n    { aaa: 123 },\r\n    { c: { cc: 'hello' }, bbb: 123, b: true },\r\n  ];\r\n  const result = objs.map(it => uniqueId(it));\r\n  return result;\r\n}\r\nconsole.log(test());\r\n```","createdAt":1574091879181},{"id":12295,"originId":"5dd36d9d7651572e0955df24","articleId":2582,"userId":170,"content":"hash(JSON.stringify(obj))","createdAt":1574137245859},{"id":12296,"originId":"5dd20baf7651572e0955dabd","articleId":2583,"userId":358,"content":"npm link 才是 symbollink 方式吧。\r\n","createdAt":1574046639875},{"id":12297,"originId":"5dd215327651572e0955db3e","articleId":2583,"userId":568,"content":"[@atian25](/user/atian25) 先读一下题目","createdAt":1574049074968},{"id":12298,"originId":"5dd21a0da9f4592e749e16b0","articleId":2583,"userId":358,"content":"我说的就是目录，看了下，最新的确实改为 link 方式了，估计是 npm5 的变更。\r\n\r\n![image.png](//static.cnodejs.org/FlMpBpbBySnAdctO7CBG-eUIKFtu)","createdAt":1574050317443},{"id":12299,"originId":"5dcb95c4865a9844a30219d7","articleId":2584,"userId":545,"content":"2015年的时候，很多公司不仅没996 ，还有免费下午茶，各种福利。（没这个待遇你都招不到相关的人）\r\n\r\n现在这么做的基本都凉了吧。\r\n\r\n大环境导致。\r\n\r\n供需关系才是本质。 ","createdAt":1573623236780},{"id":12300,"originId":"5dcb96ddece3813ad9ba80f8","articleId":2584,"userId":21,"content":"部分工薪阶层被收买，但却忘记了自己也是工薪阶层的本质，自己也会有三十五的一天。\r\n你无法怂恿全部的人联合起来，相反还会有越来越多的工薪阶层前赴后继。\r\n另一方面对学历要求越来越高，就业门槛越来越高，人员大量涌入，供需关系改变。\r\n扭曲的新闻也越来越多，比如在大厂工作多年的大专生跑去另一个大厂被歧视了，应届生破30K秒杀老油条。\r\n年轻人总是容易被蛊惑的，在高薪的诱惑下自然为奋斗者站台，加上程序员本就naive，自然不知道这进去不是卖体，而是卖血。\r\n\r\n情况和[@zuohuadong](/user/zuohuadong)，说的差不多。\r\n我是2015年来杭州的，那个时候还是休闲之都，双休和六点下班的都挺多的，下午一般都有下午茶。\r\n现在基本没有六点下班的公司，大量大小周或六天公司出现，老板们看到其它老板这样干也没事，干嘛不剥削，美其名“奋斗者”之都。\r\n当然996ICU的拥护者给杭州重新冠名了奋斗逼之都称号，但这只会让越来越多老板知道程序员可以压榨只会嘴炮。\r\n\r\n","createdAt":1573623517254},{"id":12301,"originId":"5dcb9a40ece3813ad9ba8124","articleId":2584,"userId":36,"content":"想多了","createdAt":1573624384839},{"id":12302,"originId":"5dcbc3b7ece3813ad9ba8222","articleId":2584,"userId":111,"content":"不是供需的问题，是观念问题   猪肉涨价一斤30，你买10斤说老板再多来两斤，老板不干，但是996码农到6点了，老板说再多干两小时，码农照样干到8，9点 ，只要供给无限，供需就是永远是买方市场占优\r\n","createdAt":1573634999721},{"id":12303,"originId":"5dcbce0eece3813ad9ba825b","articleId":2584,"userId":98,"content":"主要原因是因为有太多的房奴，这些人无论如何都是不敢搞事的","createdAt":1573637646571},{"id":12304,"originId":"5dcbdbb5865a9844a3021b9e","articleId":2584,"userId":3380,"content":"[@zengming00](/user/zengming00) 心酸","createdAt":1573641141949},{"id":12305,"originId":"5dccc0a9865a9844a3021d88","articleId":2584,"userId":111,"content":"2015年任志强把3000一平的房子 以30000一平的价格卖给码农，100w首付，200w债务\r\n 总共价值300万的房子交1/3的钱就住进去了，码农美滋滋，实际上这是任志强给码农挖个坑 如果有闹事的，不光房子没了，100w首付也打水漂了 等码农入坑了，2019年马云就出来996出来收福报了 一个码农996不给加班费多干3小时，按码农时薪100计，一个码农头上就能多收300，10个码农3000，100个码农一天就多收30000，100天就能赚一套房，这也解释了为什么越是人数多，规模大的企业，象bat华为老板越是举着双脚支持996 因为赚钱赚得腿软   我猜马云跟任志强任正厞都是商量好的，同样996，同样300万的房子，同样的供需关系 顺序错了就不行了\r\n如果反过来，同样2015年996  同样2019年任志强卖房，同样的供需关系，结果就完全不一样了\r\n","createdAt":1573699753419},{"id":12306,"originId":"5dccc71d865a9844a3021dc4","articleId":2584,"userId":2063,"content":"你可以选择换一份不996的工作。","createdAt":1573701405450},{"id":12307,"originId":"5dccd4cdece3813ad9ba851d","articleId":2584,"userId":111,"content":"[@wenwangzhishang](/user/wenwangzhishang)   不996的工作 工资cover不了房贷，房子要收走，100w打水漂，码农舍不得辛苦赚的100w 什么叫套路，套路就是没有回头路，买过套路云服务器深有体会","createdAt":1573704909487},{"id":12308,"originId":"5dcd2653ece3813ad9ba86ee","articleId":2584,"userId":59,"content":"事实胜于雄辩，环境是没原来好了。\r\n\r\nps：郑州中科院计算所大数据研究院招 Node 开发，2年经验-本科学历。","createdAt":1573725779727},{"id":12309,"originId":"5dcd2980865a9844a302204e","articleId":2584,"userId":829,"content":"你想g m ?","createdAt":1573726592646},{"id":12310,"originId":"5dceffabece3813ad9ba8b83","articleId":2584,"userId":97,"content":"1. 无论如何无法联手\r\n2. 即使联手也无济于事","createdAt":1573846955302},{"id":12311,"originId":"5dcf6ba27651572e0955d704","articleId":2584,"userId":103,"content":"程序员是一类论能力不论资历的工种，你要不听话随时找个00后的做你领导。很多天天骂老板的人某一天被提拔了就画风突变，你不听话那就都换掉。为了保住饭碗还是要顶住压力听老板话","createdAt":1573874594219},{"id":12312,"originId":"5dcf8c02a9f4592e749e12ab","articleId":2584,"userId":772,"content":"![image.png](//static.cnodejs.org/Fs4Xo7k02VfSNtSEdh7_F0q6Vuxa)\r\n\r\n从公司组织架构上看，程序员依旧处于公司的最底层：\r\n有bug就找程序员，\r\nUI有问题找程序员，\r\nPM有问题找程序员，\r\n经理有问题找程序员，\r\n运营有问题找程序员......\r\n客服有问题还是找程序员","createdAt":1573882882387},{"id":12313,"originId":"5dd1ecdca9f4592e749e1530","articleId":2584,"userId":1749,"content":"都是只是工具人罢了，莫得感情","createdAt":1574038748549},{"id":12314,"originId":"5dd2016ea9f4592e749e15c0","articleId":2584,"userId":148,"content":"[@zengming00](/user/zengming00) 正解","createdAt":1574044014273},{"id":12315,"originId":"5dd01166a9f4592e749e1389","articleId":2585,"userId":358,"content":"在任务里面判断某个条件 return 就好了。\r\n或者自己扩展下 schedule 策略","createdAt":1573917030153},{"id":12316,"originId":"5dc96df4865a9844a302143b","articleId":2586,"userId":98,"content":"因为存在学习成本，所以需要一位态度强硬的领导来推动","createdAt":1573481972252},{"id":12317,"originId":"5dc97374865a9844a3021446","articleId":2586,"userId":153,"content":"[@zengming00](/user/zengming00) 确实是，初期学习成本提高的，这件事应该怎么推动呢？kpi？标准化？还是。。。","createdAt":1573483380946},{"id":12318,"originId":"5dca0180ece3813ad9ba7bb3","articleId":2586,"userId":751,"content":"可以先用 https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html#supported-jsdoc 中的 import tpye 和  .d.ts 文件配合进行使用，这种使用方法不侵入原有的代码但为原有的代码带来了编辑器提示，等成员感觉到了好处再进行全面切换，要是没有感觉到的话就这么用着吧反正代码和原来的一样只是多了几个辅助文件，缺点是需要为团队其他人写的代码编写 .d.ts 文件才能用的舒服","createdAt":1573519744054},{"id":12319,"originId":"5dca05c9865a9844a302149f","articleId":2586,"userId":545,"content":"第一阶段可以要求松一些。 \r\ntsconfig 可以配置。\r\n后面逐渐要求严格。","createdAt":1573520841056},{"id":12320,"originId":"5dca1196ece3813ad9ba7c10","articleId":2586,"userId":153,"content":"[@shynome](/user/shynome) 这种不太现实，感觉也不好推动","createdAt":1573523862680},{"id":12321,"originId":"5dca5f9cece3813ad9ba7d6a","articleId":2586,"userId":1199,"content":"[@Rabbitzzc](/user/Rabbitzzc) 这种明明就是最好的路线.\r\n而且也不要怕any,有any也比js裸奔强","createdAt":1573543836961},{"id":12322,"originId":"5dcaea73865a9844a302185c","articleId":2586,"userId":751,"content":"你有权力和精力就强推，二个月内写不了 ts 或 大部分都是  any 类型的直接辞退，新来的都必须会 ts","createdAt":1573579379418},{"id":12323,"originId":"5dcb458c865a9844a3021869","articleId":2586,"userId":358,"content":"[@shynome](/user/shynome) 然后三个月后发新帖：为啥招个靠谱的写 ts 都找不到。","createdAt":1573602700690},{"id":12324,"originId":"5dcb57fbece3813ad9ba7f9b","articleId":2586,"userId":652,"content":"搭建新项目的时候，就用TS。然后让别人接手做，逼着接手的人学习TS","createdAt":1573607419195},{"id":12325,"originId":"5dcb5cfdece3813ad9ba7fca","articleId":2586,"userId":301,"content":"我的经验是从新的项目开始，以点带面。","createdAt":1573608701109},{"id":12326,"originId":"5dcb9acbece3813ad9ba812a","articleId":2586,"userId":36,"content":"ts是香，but...","createdAt":1573624523372},{"id":12327,"originId":"5dcce940ece3813ad9ba8588","articleId":2586,"userId":751,"content":"[@atian25](/user/atian25) 所以就温和一点，自己先用好，之后团队成员觉得好就安利下","createdAt":1573710144581},{"id":12328,"originId":"5dcd0a41ece3813ad9ba864b","articleId":2586,"userId":3535,"content":"我现在是先在自己维护以及新开的小项目中使用","createdAt":1573718593662},{"id":12329,"originId":"5dcd3a92865a9844a30220b5","articleId":2586,"userId":146,"content":"可能是有过 java 经验，感觉 TS 上手很快... 但是前端程序员容易出现问题的是，继承、封装、多态理解和实践。当然，js 不会像强类型语言一样，通过函数签名就可以区分函数重载","createdAt":1573730962103},{"id":12330,"originId":"5dcdfea1ece3813ad9ba8806","articleId":2586,"userId":3339,"content":"[@DevinXian](/user/DevinXian) 感觉给只写过 js 的人来写 ts，还是不要让他们去了解多态、重载的好。只是把 ts 当成有类型校验的 js，一步步的来，先习惯再去了解","createdAt":1573781153965},{"id":12331,"originId":"5dcefe4fece3813ad9ba8b79","articleId":2586,"userId":97,"content":"TypeScript 肯定香，你有权利就直接推，不要指望能说服别人","createdAt":1573846607583},{"id":12332,"originId":"5dcf6c35a9f4592e749e1277","articleId":2586,"userId":103,"content":"新项目直接上，老项目伤筋动骨","createdAt":1573874741823},{"id":12333,"originId":"5dcfa9967651572e0955d780","articleId":2586,"userId":109,"content":"有痛点才有变革的动力。要么你（pm、领导、老板）痛，要么团队（组员）痛。","createdAt":1573890454458},{"id":12334,"originId":"5dc81af4ece3813ad9ba77ad","articleId":2587,"userId":3339,"content":"给一下错误信息，101 应该是 node-zookeeper-client 报的 NO_NODE","createdAt":1573395188591},{"id":12335,"originId":"5dc8c683ece3813ad9ba78cb","articleId":2587,"userId":433,"content":"[@xiedacon](/user/xiedacon) 现在调通了 但是一直报错 ![image.png](//static.cnodejs.org/Fu4jS2-q5yqROJys3SKb-BtQw_Dc)","createdAt":1573439107810},{"id":12336,"originId":"5dc8c696865a9844a30211b6","articleId":2587,"userId":433,"content":"这是我调通了 但是没有调到对应的方法么？？","createdAt":1573439126754},{"id":12337,"originId":"5dcdfd12865a9844a302216f","articleId":2587,"userId":3339,"content":"[@nlbydcg](/user/nlbydcg) 没有对应的方法，问下 dubbo 服务提供方","createdAt":1573780754776},{"id":12338,"originId":"5dcefe86ece3813ad9ba8b7e","articleId":2587,"userId":97,"content":"https://github.com/apache/dubbo-js 了解一下？","createdAt":1573846662343},{"id":12339,"originId":"5dce0038865a9844a3022181","articleId":2588,"userId":3339,"content":"path.relative 的第一个参数应该是一个文件夹而不是文件\r\n","createdAt":1573781560374},{"id":12340,"originId":"5dce1732865a9844a302222d","articleId":2588,"userId":3654,"content":"哦，文档写的不够明确啊","createdAt":1573787442029},{"id":12341,"originId":"5dbce61c865a9844a301f626","articleId":2589,"userId":173,"content":"没啥优势。","createdAt":1572660764997},{"id":12342,"originId":"5dbfe12f865a9844a301fc40","articleId":2589,"userId":433,"content":"没啥优势","createdAt":1572856111325},{"id":12343,"originId":"5dc0064bece3813ad9ba63ee","articleId":2589,"userId":568,"content":"没啥优势\r\n\r\n","createdAt":1572865611204},{"id":12344,"originId":"5dc0d5e5865a9844a301fe5c","articleId":2589,"userId":3655,"content":"贵","createdAt":1572918757667},{"id":12345,"originId":"5dc0ecd2865a9844a301ff04","articleId":2589,"userId":545,"content":"腾讯云续费便宜~","createdAt":1572924626365},{"id":12346,"originId":"5dc5354dece3813ad9ba72dd","articleId":2589,"userId":1483,"content":"文档好，官网和后台好用","createdAt":1573205325968},{"id":12347,"originId":"5dc6ad62865a9844a3020e92","articleId":2589,"userId":739,"content":"没啥优势","createdAt":1573301602415},{"id":12348,"originId":"5dc796e1865a9844a3020f56","articleId":2589,"userId":1241,"content":"贵","createdAt":1573361377134},{"id":12349,"originId":"5dc7ad9e865a9844a3020f8e","articleId":2589,"userId":1384,"content":"没区别","createdAt":1573367198470},{"id":12350,"originId":"5dce05e6ece3813ad9ba884b","articleId":2589,"userId":406,"content":"腾讯云还可以的，价格么，都差不多，大家都是歧视老用户。","createdAt":1573783014459},{"id":12351,"originId":"5dccb328865a9844a3021d3e","articleId":2590,"userId":111,"content":"面试造火箭，上班拧螺丝","createdAt":1573696296576},{"id":12352,"originId":"5dcd0c12865a9844a3021f49","articleId":2590,"userId":683,"content":"你怎么给招聘的证明你的能力呢，为啥招你不招别人。（排除一些瞎出题的公司）","createdAt":1573719058312},{"id":12353,"originId":"5dcd3966865a9844a302209f","articleId":2590,"userId":146,"content":"从公司角度说，肯定效率高的更有产出，招聘价值更大。从个人角度出发，感觉简单的项目都答不上来，怕是要反思了","createdAt":1573730662432},{"id":12354,"originId":"5dcdf7a1ece3813ad9ba87d6","articleId":2590,"userId":21,"content":"[@DevinXian](/user/DevinXian) 反思后得出结论，年纪大了记性不好。。。🐶","createdAt":1573779361005},{"id":12355,"originId":"5dcd1e8f865a9844a3021fcb","articleId":2591,"userId":21,"content":"这应该是ab的预请求，就是第一次判断服务是否可用","createdAt":1573723791671},{"id":12356,"originId":"5dcd2835ece3813ad9ba870d","articleId":2591,"userId":3656,"content":"[@zy445566](/user/zy445566) 谢谢回复；我去了解一下","createdAt":1573726261405},{"id":12357,"originId":"5dc8137c865a9844a302109c","articleId":2592,"userId":98,"content":"你这是哪里学的Node，还在用这么古老的.then().then()\r\n首先，你的mongodb是直接用的mongodb模块，而你保存数据的方式又像是用的mongose，看不到你new User()用的User是怎么写的\r\n然后两个不好的地方，不要在这些地方偷懒：\r\n1. 所有的require()应该放到文件顶部，这样能一眼就知道用到了些什么东西，有的人喜欢用require()来动态加载东西，那样做意味着别人看代码的时候至少得在脑子里跑一遍代码才能知道你用了什么\r\n2. request.post('/reg')，'/reg'应该写完整的路径，不能省略前面的，应该写成'/api/users/reg'，写完整路径有利于在大项目中通过全局搜索快速定位接口的位置","createdAt":1573393276742},{"id":12358,"originId":"5dc8dd03865a9844a302122d","articleId":2592,"userId":3657,"content":"额,我是个前端,想自己写点后台数据然后写自己的前端项目.....也就是说用了mongoodb模块就不需要mongoose了?我是看的网上的视频教程跟着做,弄了半天都出不来....我的models下User.js![捕获.PNG](//static.cnodejs.org/FhBLWHykYfUZ_9HYxodPBFmEP2zy)","createdAt":1573444867014},{"id":12359,"originId":"5dc8f653865a9844a3021267","articleId":2592,"userId":3658,"content":"return newUser.save()\r\ndocument的save()方法 返回的是promise, 你还没有处理这个promise,就直接返回回去了.\r\n看看是不是这里出了问题","createdAt":1573451347615},{"id":12360,"originId":"5dca34daece3813ad9ba7cb8","articleId":2592,"userId":3657,"content":"[@FullSD](/user/FullSD) 应该怎么写呢?","createdAt":1573532890672},{"id":12361,"originId":"5dca3516ece3813ad9ba7cbc","articleId":2592,"userId":3657,"content":"[@zengming00](/user/zengming00) 额,我是个前端,想自己写点后台数据然后写自己的前端项目…也就是说用了mongoodb模块就不需要mongoose了?我是看的网上的视频教程跟着做,弄了半天都出不来…我的models下User.js//  \r\n我该怎么修改呢?","createdAt":1573532950757},{"id":12362,"originId":"5dca3d38865a9844a3021597","articleId":2592,"userId":98,"content":"[@gaoxizhong](/user/gaoxizhong) mongoose是基于mongoodb模块，你可以同时使用，但是你代码中的mongoose并没有连接数据库，因此你的数据不会存入数据库","createdAt":1573535032706},{"id":12363,"originId":"5dca614dece3813ad9ba7d70","articleId":2592,"userId":3658,"content":"[@gaoxizhong](/user/gaoxizhong) 仔细的看了一下你的代码,我上面的理解有问题, save()产生的promise被后面的then执行了, 估计就是你连数据库的时候错了","createdAt":1573544269085},{"id":12364,"originId":"5dcaa857ece3813ad9ba7f01","articleId":2592,"userId":3657,"content":"[@zengming00](/user/zengming00) 我又改了改 报错:Error [ValidationError]: users validation failed: name: Path `name` is required.\r\n![1573562223(1).png](//static.cnodejs.org/FojhSR4rIB7XDJyxmHC7iDEEvXTD)\r\n![1573562250(1).png](//static.cnodejs.org/FjRf3tO_zdQ1WE4PfvL-SvQjmKqg)\r\n![1573562285(1).png](//static.cnodejs.org/Fm-wj5xvVP89s27KarDkew39_IEo)\r\n","createdAt":1573562455879},{"id":12365,"originId":"5dcaaa12865a9844a302180a","articleId":2592,"userId":3657,"content":"[@FullSD](/user/FullSD) 我改了用mongoose.connect连接远程数据库了还是报错:Error [ValidationError]: users validation failed: name: Path name is required.\r\n![1573562223(1).png](//static.cnodejs.org/FojhSR4rIB7XDJyxmHC7iDEEvXTD)\r\n![1573562250(1).png](//static.cnodejs.org/FjRf3tO_zdQ1WE4PfvL-SvQjmKqg)\r\n![1573562285(1).png](//static.cnodejs.org/Fm-wj5xvVP89s27KarDkew39_IEo)","createdAt":1573562898848},{"id":12366,"originId":"5dcb54b9ece3813ad9ba7f8e","articleId":2592,"userId":98,"content":"哥们，放弃吧，这么个问题三天你都解决不了，Node写后端不适合你\r\n你可以试试我这个，也是js写服务端：https://github.com/zengming00/go-server-js/releases\r\n下载go-server-js-windows-x86.zip，解压运行go-server-js.exe，然后打开浏览器 http://localhost:8080/ ，一个服务器就跑起来了，相信代码你一定看得懂\r\n","createdAt":1573606585194},{"id":12367,"originId":"5dcb6898ece3813ad9ba7ff5","articleId":2592,"userId":405,"content":"原因很明显了，你的postman没有传入`name`这个参数而是传了`username`，不符合user.js里面的定义，所以报错了","createdAt":1573611672599},{"id":12368,"originId":"5dcb6baeece3813ad9ba800a","articleId":2592,"userId":44,"content":"看起来像是连接的问题，你用的mongoose模块就用mongoose的connect,这种情况应该会报超时错误的。还有一个地方，用promise没啥问题，写代码还是有点要求，起码加上eslint![image.png](//static.cnodejs.org/FicrB9s74zTmettVjkMtZEY6zINv)","createdAt":1573612462282},{"id":12369,"originId":"5dcb6c02ece3813ad9ba8013","articleId":2592,"userId":44,"content":"[@youth7](/user/youth7) save不进会有错误打印的","createdAt":1573612546468},{"id":12370,"originId":"5dcb77c1865a9844a302197a","articleId":2592,"userId":3657,"content":"[@zengming00](/user/zengming00) 额 回头研究研究这个","createdAt":1573615553212},{"id":12371,"originId":"5dcb793cece3813ad9ba8075","articleId":2592,"userId":3657,"content":"[@fightAndLearn](/user/fightAndLearn) 额 好的 谢谢","createdAt":1573615932134},{"id":12372,"originId":"5dcb7969ece3813ad9ba8079","articleId":2592,"userId":3657,"content":"[@youth7](/user/youth7) 没检查postman 哈哈 成功了可以传进数据了","createdAt":1573615977933},{"id":12373,"originId":"5cf71e0395fcc914aa26633e","articleId":2593,"userId":89,"content":"我手上也没有书呢，555","createdAt":1559698947629},{"id":12374,"originId":"5cf71fc495fcc914aa266352","articleId":2593,"userId":829,"content":"[@i5ting](/user/i5ting) 刚看了JD还都是预定","createdAt":1559699396040},{"id":12375,"originId":"5cf792721fe902120f31c6be","articleId":2593,"userId":3659,"content":"那就预定咯","createdAt":1559728754149},{"id":12376,"originId":"5cf799d895fcc914aa2666ed","articleId":2593,"userId":1138,"content":"狼叔 是不是得搞个活动来赠书啊 哈哈\r\n","createdAt":1559730648106},{"id":12377,"originId":"5cf8774d95fcc914aa2668df","articleId":2593,"userId":151,"content":"关注卷2","createdAt":1559787341760},{"id":12378,"originId":"5cf8ceb295fcc914aa266bab","articleId":2593,"userId":3660,"content":"卷1就这么厚","createdAt":1559809714105},{"id":12379,"originId":"5d09860b95fcc914aa26a5e4","articleId":2593,"userId":79,"content":"哇，+1","createdAt":1560905227064},{"id":12380,"originId":"5d0f65b834bca667bc6e20f3","articleId":2593,"userId":3661,"content":"[@i5ting](/user/i5ting) 狼叔会考虑出电子版的吗？电子版感觉检索起来比较方便，随时随地可以看","createdAt":1561290168233},{"id":12381,"originId":"5d0f817334bca667bc6e2136","articleId":2593,"userId":1661,"content":"书要看，看视频教程也可以学习啊，给大家分享些\r\n[https://www.sucaihuo.com/video/135.html](https://www.sucaihuo.com/video/135.html)","createdAt":1561297267884},{"id":12382,"originId":"5d12e4b234bca667bc6e2de6","articleId":2593,"userId":2555,"content":"卷1到手，期待卷2，卷3","createdAt":1561519282358},{"id":12383,"originId":"5d146226cdb1f967c157642b","articleId":2593,"userId":89,"content":"[@AnaniZhu](/user/AnaniZhu) 看出版社吧，我没有决定权","createdAt":1561616934706},{"id":12384,"originId":"5d15713ecdb1f967c15767de","articleId":2593,"userId":151,"content":"卷1述说Node基础用法，卷2讲解web开发，卷3叙述高级技术的思路很赞，\r\n我整理的Node书籍： https://github.com/overnote/javascript ","createdAt":1561686334758},{"id":12385,"originId":"5d16fd7534bca667bc6e3d78","articleId":2593,"userId":2691,"content":"[@i5ting](/user/i5ting) [@ruyuejun](/user/ruyuejun) , 看完这些书之后，应该努力要是能写本更底层一点的书籍就更好了， 比如说类似于 [Python源码剖析](https://book.douban.com/subject/3117898/)这本书一样的， 能有本深入剖析V8引擎， 以及对于JavaScript 的编译进行深入剖析的书籍的话， 那就再好不过了。","createdAt":1561787765149},{"id":12386,"originId":"5d17764434bca667bc6e3ed9","articleId":2593,"userId":89,"content":"[@haohello](/user/haohello) 结合朴大的《深入浅出Node.js》 + 死月《来一打C++扩展》，完美","createdAt":1561818692964},{"id":12387,"originId":"5d1cd24569746a2ef81ba1a3","articleId":2593,"userId":3662,"content":"[@i5ting](/user/i5ting) 狼叔，麻烦问下，新书里面的示例代码有线上的地址吗？","createdAt":1562169925012},{"id":12388,"originId":"5d1d51612beced2efd51f497","articleId":2593,"userId":1671,"content":"狼叔卷2 卷3 什么时候出版\r\n","createdAt":1562202465285},{"id":12389,"originId":"5d1d66122beced2efd51f577","articleId":2593,"userId":89,"content":"[@pigchilde](/user/pigchilde) 没有的","createdAt":1562207762728},{"id":12390,"originId":"5d1d66212beced2efd51f583","articleId":2593,"userId":89,"content":"[@junziyangyang](/user/junziyangyang) 10月前","createdAt":1562207777809},{"id":12391,"originId":"5d1dbdd771951f750ccb8867","articleId":2593,"userId":1671,"content":"[@i5ting](/user/i5ting) 期待ing...","createdAt":1562230231605},{"id":12392,"originId":"5d40439ab4725a628e269c8a","articleId":2593,"userId":790,"content":"期待得花儿都谢了","createdAt":1564492698655},{"id":12393,"originId":"5d6a92f1dcd8e81121a62548","articleId":2593,"userId":2074,"content":"牛逼","createdAt":1567265521117},{"id":12394,"originId":"5d8e1c5eece3813ad9b9f2c5","articleId":2593,"userId":804,"content":"快了快了","createdAt":1569594462200},{"id":12395,"originId":"5d900b57ece3813ad9b9f666","articleId":2593,"userId":89,"content":"10月4号之前卷三会review完，应该可以赶上双十一","createdAt":1569721175664},{"id":12396,"originId":"5d9052f4865a9844a3018fdc","articleId":2593,"userId":1527,"content":"狼书（卷1）已读完，非常期待卷2、卷3......","createdAt":1569739508041},{"id":12397,"originId":"5d905ab7865a9844a3018ffc","articleId":2593,"userId":1981,"content":"asdfg","createdAt":1569741495635},{"id":12398,"originId":"5dc8dce9865a9844a3021229","articleId":2593,"userId":805,"content":"mark","createdAt":1573444841465},{"id":12399,"originId":"5dcb741f865a9844a3021965","articleId":2593,"userId":1647,"content":"[@i5ting](/user/i5ting) 双十一过去了，又一次骗我们🤣","createdAt":1573614623782},{"id":12400,"originId":"5dbad3c1865a9844a301f1d1","articleId":2595,"userId":1741,"content":"vscode的话是可以提交时直接展示和解决冲突的","createdAt":1572524993381},{"id":12401,"originId":"5dbb86aaece3813ad9ba59f8","articleId":2595,"userId":187,"content":"强制推送，把冲突留给队友，push -f","createdAt":1572570794432},{"id":12402,"originId":"5dbba6b6ece3813ad9ba5abd","articleId":2595,"userId":518,"content":"[@ounana](/user/ounana) 这么秀的吗 😄","createdAt":1572578998475},{"id":12403,"originId":"5dbbdf0dece3813ad9ba5b7d","articleId":2595,"userId":3664,"content":"我一般 \r\n```\r\nrm -rf *\r\ngit push -f master\r\n```","createdAt":1572593421733},{"id":12404,"originId":"5dbbf2f8865a9844a301f4aa","articleId":2595,"userId":1919,"content":"-f 的活不过3天","createdAt":1572598520154},{"id":12405,"originId":"5dbbf60fece3813ad9ba5be8","articleId":2595,"userId":523,"content":"有冲突就解决冲突呗","createdAt":1572599311013},{"id":12406,"originId":"5dbc0653865a9844a301f500","articleId":2595,"userId":3665,"content":"比如: 现在有 A 分支要向 B 分支合并会冲突,  这个时候有不能直接将 B 分支的代码合并到 A 分支来解决冲突, 那么可以从 A 分支上切出一个 bak 分支,  然后在 bak 上解决冲突合并 B 之后, 那么这个时候 A 分支是原先很干净的分支, 这个时候再将 A 分支合并到 B 分支, 就不会冲突了; 这个时候也保证了 A 分支的干净","createdAt":1572603475755},{"id":12407,"originId":"5dca9a25865a9844a30217e7","articleId":2595,"userId":3666,"content":"[@ounana](/user/ounana) 优秀, 学到了","createdAt":1573558821044},{"id":12408,"originId":"5dca7092ece3813ad9ba7df3","articleId":2596,"userId":3658,"content":"上次用的时候也注意到这个问题了 ~~我就是这么无聊~~\r\n![微信截图_20191112164014.png](//static.cnodejs.org/FoK4VboL1_hEbEt8ZdNkw0W9xgrD)\r\n然后现在用的这个[koa-router](https://github.com/koajs/router)","createdAt":1573548178640},{"id":12409,"originId":"5dca75e9ece3813ad9ba7e13","articleId":2596,"userId":117,"content":"[@FullSD](/user/FullSD) 欧原来koa看原作者维护不积极自己来维护了","createdAt":1573549545199},{"id":12410,"originId":"5dca9718ece3813ad9ba7ec4","articleId":2596,"userId":358,"content":"可以搜下知乎， koa-router 的作者做了一些不是很好的事。","createdAt":1573558040310},{"id":12411,"originId":"5db515b1ece3813ad9ba464a","articleId":2597,"userId":358,"content":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\r\n\r\n```\r\nA string value representing a date, specified in a format recognized by the Date.parse() method (these formats are IETF-compliant RFC 2822 timestamps and also strings in a version of ISO8601).\r\nNote: Parsing of date strings with the Date constructor (and Date.parse(), which works the same way) is strongly discouraged due to browser differences and inconsistencies. Support for RFC 2822 format strings is by convention only. Support for ISO 8601 formats differs in that date-only strings (e.g. \"1970-01-01\") are treated as UTC, not local.\r\n```\r\n\r\n两种格式是不一样的，最好直接用 moment 或 date.js 等类库并显式指定格式。","createdAt":1572148657564},{"id":12412,"originId":"5db5172bece3813ad9ba4654","articleId":2597,"userId":31,"content":"~~因为返回值是 undefined ， 以 50% 透明度作为区分~~ 看错题了","createdAt":1572149035471},{"id":12413,"originId":"5db5212f865a9844a301df4a","articleId":2597,"userId":3667,"content":"var a = '2019-10-08'\r\nvar aa = new Date(a)\r\nTue Oct 08 2019 08:00:00 GMT+0800 (中国标准时间)\r\n\r\nvar b = '2019-10-8'\r\nvar bb = new Date(b)\r\nTue Oct 08 2019 00:00:00 GMT+0800 (中国标准时间)\r\n\r\n时区有区别","createdAt":1572151599579},{"id":12414,"originId":"5db5886c865a9844a301e00c","articleId":2597,"userId":704,"content":"遇到过类似的，这种格式`2019-10-01`的new Date之后得到的会是世界时 不要用这种就好了，比如这种`2019/10/01`得到的就是本地时区","createdAt":1572178028785},{"id":12415,"originId":"5db64399ece3813ad9ba4834","articleId":2597,"userId":405,"content":"![图片.png](//static.cnodejs.org/FgsR8FEOHKQXcyLFNQOXaeuq8CDF)\r\n在node10上没有这个问题","createdAt":1572225945864},{"id":12416,"originId":"5db6d5d3ece3813ad9ba4cb1","articleId":2597,"userId":847,"content":"很好奇这个，我换了6.10的几个版本，没试出来。。。","createdAt":1572263379046},{"id":12417,"originId":"5dca6273865a9844a302169e","articleId":2597,"userId":3667,"content":"谢谢大家，\r\n在西五区的服务器上跑出现这个问题的\r\n国内的没这个问题","createdAt":1573544563393},{"id":12418,"originId":"5dc64d41865a9844a3020dad","articleId":2599,"userId":31,"content":"搜了几个答案\r\n1\r\n```js\r\nfs.readdir('/path/to/directory', (err, list) => {\r\n  list = list.filter(item => !(/(^|\\/)\\.[^\\/\\.]/g).test(item));\r\n\r\n  // Your code\r\n});\r\n```\r\n\r\n2\r\n```js\r\nvar isUnixHiddenPath = function (path) {\r\n    return (/(^|\\/)\\.[^\\/\\.]/g).test(path);\r\n};\r\n```","createdAt":1573276993630},{"id":12419,"originId":"5dc655e3865a9844a3020dbe","articleId":2599,"userId":3669,"content":"不行啊老哥 windows下这样判断不了 只能判断unix的","createdAt":1573279203504},{"id":12420,"originId":"5dc67e82ece3813ad9ba7536","articleId":2599,"userId":3658,"content":"有个思路 利用cmd的dir/a:h列出所有的隐藏文件, 保存下来去做对比\r\nindex.js:\r\n```javascript\r\nconst { exec, spawn } = require('child_process');\r\nexec('my.bat', (err, stdout, stderr) => {\r\n  if (err) {\r\n    console.error(err);\r\n    return;\r\n  }\r\n  console.log(stdout); // 注意编码\r\n});\r\n```\r\n\r\nmy.bat:\r\n```ba\r\ndir/a:h\r\n```\r\n","createdAt":1573289602355},{"id":12421,"originId":"5dc68121865a9844a3020e31","articleId":2599,"userId":2018,"content":"试试这个:\r\nhttps://github.com/stevenvachon/hidefile","createdAt":1573290273554},{"id":12422,"originId":"5dc537e8ece3813ad9ba72f7","articleId":2600,"userId":358,"content":"你不是用 stream 的方式？","createdAt":1573205992659},{"id":12423,"originId":"5dc53a4e865a9844a3020c28","articleId":2600,"userId":2228,"content":"[@atian25](/user/atian25) 不是哦，请教一下用stream的方式应该写","createdAt":1573206606279},{"id":12424,"originId":"5dc53d27865a9844a3020c30","articleId":2600,"userId":358,"content":"参考下 https://zhuanlan.zhihu.com/p/33783583","createdAt":1573207335390},{"id":12425,"originId":"5dc53d60ece3813ad9ba7328","articleId":2600,"userId":358,"content":"其实如果非 win 场景下的话，直接 fork 个 tar 命令","createdAt":1573207392619},{"id":12426,"originId":"5dc6037cece3813ad9ba7410","articleId":2600,"userId":2084,"content":"fork tar命令，由于解压的文件比较大注意要关闭tar命令的-v参数，标准输出将默认分配的缓冲写满后会阻塞子进程，也可以调用fork的时候使用ignore参数将stdio忽略掉。也可以调节maxBuffer参数大小，让stdio有足够的缓冲空间，但在生产环境缓冲比较宝贵。","createdAt":1573258108747},{"id":12427,"originId":"5dc61b62865a9844a3020d41","articleId":2600,"userId":264,"content":"省事儿，可以`child_process.spawn`调用外部二进制工具。例如：『unzip』...","createdAt":1573264226937},{"id":12428,"originId":"5d90809f865a9844a3019103","articleId":2601,"userId":109,"content":"在 localdonwload 里面 await getobject() 就行了\r\n\r\nps: `localdonwload` 拼写有问题","createdAt":1569751199016},{"id":12429,"originId":"5d9151b6865a9844a3019210","articleId":2601,"userId":3528,"content":"![image.png](//static.cnodejs.org/FtmCaND0_0LdwoFMAdlsWcuZ_Rgy)","createdAt":1569804726249},{"id":12430,"originId":"5d916442865a9844a301926d","articleId":2601,"userId":3528,"content":"[@waitingsong](/user/waitingsong) 不行，见图。","createdAt":1569809474038},{"id":12431,"originId":"5d91772c865a9844a30192b2","articleId":2601,"userId":358,"content":"感觉你需要先去学习下 callback 和 promise，去看下阮一峰的 http://es6.ruanyifeng.com 吧","createdAt":1569814316807},{"id":12432,"originId":"5d91e192865a9844a301942e","articleId":2601,"userId":109,"content":"[@mrlong](/user/mrlong) await 要和 async 配合使用。","createdAt":1569841554449},{"id":12433,"originId":"5dc5311b865a9844a3020bdf","articleId":2601,"userId":1168,"content":"不是这样用的","createdAt":1573204251567},{"id":12434,"originId":"5dc573e1ece3813ad9ba73d7","articleId":2601,"userId":111,"content":"async有传染性","createdAt":1573221345810},{"id":12435,"originId":"5dc4e86fece3813ad9ba70e6","articleId":2602,"userId":358,"content":"你看错了，是在 https://github.com/eggjs/egg-development 配置的。\r\n\r\n另外，你不是因为在 app/public 下有 `node_modules` 而来问的吧？","createdAt":1573185647961},{"id":12436,"originId":"5dc1425e865a9844a30200be","articleId":2603,"userId":545,"content":"如果必须使用，就使用 nginx 或者 caddy 反向代理吧。\r\ntls 1.0 已经不够安全了。","createdAt":1572946526913},{"id":12437,"originId":"5dc14332865a9844a30200ca","articleId":2603,"userId":419,"content":"记得 supervisor 之类的 可传参","createdAt":1572946738458},{"id":12438,"originId":"5dc1451a865a9844a30200d7","articleId":2603,"userId":3567,"content":"[@yuu2lee4](/user/yuu2lee4) 这个模块好几年没更新了，没有支持这个参数","createdAt":1572947226030},{"id":12439,"originId":"5dc14580ece3813ad9ba6779","articleId":2603,"userId":3567,"content":"[@zuohuadong](/user/zuohuadong) 请问有没有更简便的方案呢？","createdAt":1572947328783},{"id":12440,"originId":"5dc1717a865a9844a302016c","articleId":2603,"userId":545,"content":"[@gxsandzxl](/user/gxsandzxl)  反向代理就是最简单的~\r\n不建议用 tls 1.0 不安全。，","createdAt":1572958586091},{"id":12441,"originId":"5dc18f7cece3813ad9ba6807","articleId":2603,"userId":358,"content":"https://nodejs.org/dist/latest-v12.x/docs/api/cli.html#cli_environment_variables\r\n通过环境变量可以传参给 node。但还是强烈建议用 nginx","createdAt":1572966268631},{"id":12442,"originId":"5dc416d5ece3813ad9ba6fbc","articleId":2603,"userId":1552,"content":"require('tls').DEFAULT_MIN_VERSION = 'TLSv1';","createdAt":1573131989512},{"id":12443,"originId":"5dc3645b865a9844a30205b9","articleId":2604,"userId":358,"content":"https://github.com/eggjs/egg-logger/blob/master/lib/transports/file.js#L104","createdAt":1573086299037},{"id":12444,"originId":"5dc38165865a9844a3020671","articleId":2604,"userId":145,"content":"[@atian25](/user/atian25) 谢谢,好像明白了什么搜索关键词.","createdAt":1573093733121},{"id":12445,"originId":"5dc381c3865a9844a3020675","articleId":2604,"userId":145,"content":"https://cnodejs.org/topic/5784ba5b49e4faa95429c6d2\r\n按照11楼的回复好像就能说通了.有时间或者周末再捣鼓吧hhhh~~","createdAt":1573093827780},{"id":12446,"originId":"5dc38b49865a9844a302069c","articleId":2604,"userId":358,"content":"日志不需要考虑多进程的时序问题。","createdAt":1573096265360},{"id":12447,"originId":"5dc29a2aece3813ad9ba6be3","articleId":2605,"userId":135,"content":"因为promise.then 是 nextTick 的时候执行的,也就是插入到本轮事件轮询里面,\r\nsetTimeout 是在下次事件轮询里面执行的.\r\n3,4,5 是在同一个 事件轮询里面执行的\r\n你的问题可以简化为\r\n```\r\nvar p = new Promise(function(resolve,reject){\r\n  resolve()\r\n})\r\nvar p2 = new Promise(function(resolve,reject){\r\n  resolve()\r\n})\r\np.then(()=>{\r\n  console.log('p promise 1')\r\n}).then(()=>{\r\n  console.log('p promise 2')\r\n})\r\np2.then(()=>{\r\n  console.log('p2 promise 1')\r\n}).then(()=>{\r\n  console.log('p2 promise 2')\r\n})\r\n```\r\n因为执行完 promise 1 才会将 promise2 插入到事件轮询里.\r\n所以结果是\r\n```\r\np promise 1\r\np2 promise 1\r\np promise 2\r\np2 promise 2\r\n```","createdAt":1573034538958},{"id":12448,"originId":"5dc2b814ece3813ad9ba6c3a","articleId":2605,"userId":3672,"content":"[@abiuDoIT](/user/abiuDoIT) 噢噢，请问那么关于setTimeout、 promise、 nextTick、setImmediate 、文件读写。这些事件。假设这些事件的回调函数都已经被交到队列里面，又该如何判别这些事件的轮询的优先级呢？？？？","createdAt":1573042196007},{"id":12449,"originId":"5dc2c1ccece3813ad9ba6c7a","articleId":2605,"userId":3672,"content":"[@abiuDoIT](/user/abiuDoIT) \r\n我刚刚实验了一下，大概得出的结论是这样\r\n事件观察者队列分为多个，比如promise的队列，nextTick的队列，setTimeout的队列，setImmediate的队列。   \r\n\r\n优先级是nextTick的队列>promise的队列>setTimeout的队列>setImmediate的队列\r\n\r\n比如这四个队列，是四轮循环四轮循环的执行，但是遇到优先级比当前队列高的，就加到本轮循环末尾，。\r\n比如当前正在执行setTimeout的队列，遇到promise，就把promise的回调加到本轮循环队列尾部\r\n\r\n感觉还是有点懵逼\r\n","createdAt":1573044684132},{"id":12450,"originId":"5dba7b9c865a9844a301f031","articleId":2608,"userId":3676,"content":"GCP Azure 这种的App Services 都可以吧？","createdAt":1572502428855},{"id":12451,"originId":"5dbb2de0865a9844a301f25c","articleId":2608,"userId":1684,"content":"coding studio","createdAt":1572548064330},{"id":12452,"originId":"5dbce5c7ece3813ad9ba5d54","articleId":2608,"userId":173,"content":"[@d1y](/user/d1y) 那个不是卖编程课程的吗？","createdAt":1572660679548},{"id":12453,"originId":"5dbce5f9865a9844a301f61f","articleId":2608,"userId":173,"content":"[@fachilles](/user/fachilles) GCP不错，谢谢。","createdAt":1572660729641},{"id":12454,"originId":"5dc0bc53865a9844a301fde6","articleId":2608,"userId":545,"content":"nvm 装node.js  很简单了~\r\n或者装个 ubuntu 直接 apt install nodejs 完事","createdAt":1572912211503},{"id":12455,"originId":"5dafee50865a9844a301d377","articleId":2609,"userId":562,"content":"egg-grpc 目前是我最优选","createdAt":1571810896496},{"id":12456,"originId":"5db0f4df865a9844a301d610","articleId":2609,"userId":1161,"content":"egg-grpc只支持单proto的grpc服务，你可以试试egg-plugin-grpc-server，支持多proto文件的grpc服务","createdAt":1571878111699},{"id":12457,"originId":"5db14824ece3813ad9ba3f24","articleId":2609,"userId":562,"content":"[@JsonMa](/user/JsonMa) 好的 谢谢\r\n","createdAt":1571899428040},{"id":12458,"originId":"5db162d0865a9844a301d8da","articleId":2609,"userId":89,"content":"不禁想问，微服务到底是什么","createdAt":1571906256990},{"id":12459,"originId":"5dbfd8ce865a9844a301fc15","articleId":2609,"userId":314,"content":"不禁想问，微服务到底是什么","createdAt":1572853966952},{"id":12460,"originId":"5dbfebc1865a9844a301fc90","articleId":2609,"userId":152,"content":"我也写了个插件。 支持多grpc。 同时支持grpc+http调用的链路追踪。 基于jaeger的。  npm包名  uki-egg-grpc ","createdAt":1572858817175},{"id":12461,"originId":"5dbfebea865a9844a301fc98","articleId":2609,"userId":152,"content":"说错了 是 egg-uki-grpc","createdAt":1572858858982},{"id":12462,"originId":"5dc0b91d865a9844a301fdc2","articleId":2609,"userId":545,"content":"https://docs.nestjs.cn/6/awesome   \r\nnestcloud  也适合。\r\n不建议为了微服务而微服务。","createdAt":1572911389678},{"id":12463,"originId":"5dbfd7c7865a9844a301fc06","articleId":2611,"userId":314,"content":"![image.png](//static.cnodejs.org/FjiV9QpZuBvplk-NY9jpOPB_qrpE)","createdAt":1572853703889},{"id":12464,"originId":"5dbfdb9b865a9844a301fc2b","articleId":2611,"userId":3679,"content":"jwt ，账号和密码登陆生成token，接口请求数据带上token，可以放头部和请求参数里。后端拿到值进行token的校验","createdAt":1572854683714},{"id":12465,"originId":"5dbe805eece3813ad9ba5f75","articleId":2612,"userId":187,"content":"你这个例子完全体现不出多线程的意义。\r\n多线程解决的是并行事物，\r\n比如说，我要求 四个斐波那契数列[40, 41, 42, 43] 的结果 。\r\n这时候就可以开四个线程，每个线程做自己的运算，然后用promise.all 等待所有的线程都响应的时候，把结果一并抛出。\r\n这就节约了大量的时间。\r\ndemo：https://github.com/ounana/nicest/blob/master/src/test/thread/fibonacci.ts","createdAt":1572765790530},{"id":12466,"originId":"5dbe8873ece3813ad9ba5f8b","articleId":2612,"userId":419,"content":"因为你开了多线程 也只用到一个cpu了吧","createdAt":1572767859565},{"id":12467,"originId":"5dbede46865a9844a301f929","articleId":2612,"userId":2372,"content":"[@ounana](/user/ounana) 谢谢，说的很有道理","createdAt":1572789830140},{"id":12468,"originId":"5dbd3298865a9844a301f6f2","articleId":2613,"userId":223,"content":"工具才是解决这类问题根本的办法。","createdAt":1572680344515},{"id":12469,"originId":"5dbced4eece3813ad9ba5d7f","articleId":2614,"userId":1713,"content":"这不就是静态资源么\r\n要么自己搭个静态资源站\r\n要么直接用第三方cdn","createdAt":1572662606475},{"id":12470,"originId":"5dbcf1bd865a9844a301f65f","articleId":2614,"userId":3682,"content":"[@im-here](/user/im-here) 大佬能不能说的详细点，或者哪里有学习资料可以参考","createdAt":1572663741116},{"id":12471,"originId":"5dbcf575ece3813ad9ba5da5","articleId":2614,"userId":1713,"content":"[@wu162](/user/wu162) google关键字 静态资源站 或者 cdn","createdAt":1572664693575},{"id":12472,"originId":"5dbcfd62865a9844a301f677","articleId":2614,"userId":3682,"content":"[@im-here](/user/im-here) 好吧，谢谢大佬","createdAt":1572666722113},{"id":12473,"originId":"5db67a34ece3813ad9ba49e5","articleId":2615,"userId":19,"content":"从header头提取你要翻译成的语言，比如CN, US。。。。之类的？不知道我理解的对不对","createdAt":1572239924767},{"id":12474,"originId":"5db6809d865a9844a301e2cb","articleId":2615,"userId":223,"content":"[@luanxuechao](/user/luanxuechao) 提取语言不成问题，我只是没做过这种功能，更主要是没用过谷歌翻译和有道翻译的API，想从有经验的人那里取点经。谢谢回复。","createdAt":1572241565431},{"id":12475,"originId":"5db68e80ece3813ad9ba4abd","articleId":2615,"userId":19,"content":"如果你说的这种情况 不如去官网翻SDK文档 比这边问要高效的多。。","createdAt":1572245120648},{"id":12476,"originId":"5db6d190ece3813ad9ba4ca3","articleId":2615,"userId":3213,"content":"[@flamingtop](/user/flamingtop) 一直用的谷歌浏览器插件，划词翻译。你可以看看载下来解压看看或者看看有没有源代码。那插件本身支持有道，百度，谷歌翻译的","createdAt":1572262288553},{"id":12477,"originId":"5db7a9c9865a9844a301e717","articleId":2615,"userId":223,"content":"[@luanxuechao](/user/luanxuechao) 也对，谢了。","createdAt":1572317641624},{"id":12478,"originId":"5db7a9d4865a9844a301e71b","articleId":2615,"userId":223,"content":"[@PerfectDemo](/user/PerfectDemo) 好，谢了","createdAt":1572317652809},{"id":12479,"originId":"5dbb825a865a9844a301f2c1","articleId":2615,"userId":3683,"content":"https://github.com/tsq-translate/server/tree/master/libs\r\n\r\n谷歌，有道，百度三个都有使用。个人感觉，都挺好用的。","createdAt":1572569690365},{"id":12480,"originId":"5dbceb60ece3813ad9ba5d70","articleId":2615,"userId":223,"content":"[@tsq](/user/tsq) 网上看到的文章看，百度翻译略逊一筹。","createdAt":1572662112445},{"id":12481,"originId":"5dbce084ece3813ad9ba5d3f","articleId":2616,"userId":21,"content":"之前做过这方面的用的geohash，但也有一些问题，就比如多边形和圆形，就需要geohash是矩形，所以要很多时候要拼。还有就是geohash是根据经纬来计算的，但是不同地图APP经纬都有30m左右偏差。但对于搜索来说长度越长颗粒度越细，用大颗粒的去搜索能更快定位。","createdAt":1572659332796},{"id":12482,"originId":"5dbbfa75865a9844a301f4cf","articleId":2617,"userId":3685,"content":"同问，大佬们关注一下","createdAt":1572600437232},{"id":12483,"originId":"5dbc3349865a9844a301f55b","articleId":2617,"userId":1684,"content":"已解决, 使用 `child_process` 子进程搞定\r\nhttps://github.com/luxizhizhong/upx/blob/master/server/utils/pullChildServer.js","createdAt":1572614985600},{"id":12484,"originId":"5dbbcdd9ece3813ad9ba5b34","articleId":2618,"userId":358,"content":"> 看 alinode 的进程存活时间，有一两条线程的时间是比较短的，也就是近期有中断过。\r\n\r\n说明你们进程挂了，查错误日志看看咯","createdAt":1572589017509},{"id":12485,"originId":"5dba85b5865a9844a301f06e","articleId":2620,"userId":3688,"content":"这是因为浏览器的限制，URL.createObjectURL(new Blob([res], { type: 'text/xls' }));你使用这个把内容转下，然后放到a标签href里","createdAt":1572505013938},{"id":12486,"originId":"5db985afece3813ad9ba54aa","articleId":2621,"userId":545,"content":"新手不用考虑这个，除非你是搞算法，否则提升不大，只增加复杂度。\r\n线程切换和通信都有损耗。\r\npm2 开多实例可以利用多核","createdAt":1572439471873},{"id":12487,"originId":"5dba3a56865a9844a301ee9f","articleId":2621,"userId":358,"content":"新人看不懂就对了，也不用去看太多这个，如果只是做个 Web 开发的话，很多情况下，你应该把眼光放到 云服务，多集群的场景，而不是过多考虑单机多进程的情况。\r\n\r\n示例的话，https://github.com/eggjs/egg-watcher 这些都是。","createdAt":1572485718747},{"id":12488,"originId":"5dba3b2dece3813ad9ba55b5","articleId":2621,"userId":318,"content":"[@atian25](/user/atian25) 谢谢，集群的门槛感觉更高了，新手只能放弃了。做一个可用性强点，支撑访问量大点的网站这么难","createdAt":1572485933567},{"id":12489,"originId":"5dba4024ece3813ad9ba55f0","articleId":2621,"userId":358,"content":"[@IEfucker](/user/IEfucker) 集群的门槛比多进程简单多了。。。 云服务都提供好了，就是简单的配置下负载均衡，起几个实例而已。","createdAt":1572487204650},{"id":12490,"originId":"5db97b5c865a9844a301ed69","articleId":2622,"userId":98,"content":"http://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html","createdAt":1572436828095},{"id":12491,"originId":"5db97c6bece3813ad9ba5497","articleId":2622,"userId":1547,"content":"[@zengming00](/user/zengming00) 我是要做一次内部的分享 所以求一份","createdAt":1572437099368},{"id":12492,"originId":"5dba355cece3813ad9ba557a","articleId":2622,"userId":790,"content":"视频教程就有\r\n[https://www.sucaihuo.com/video/432.html](https://www.sucaihuo.com/video/432.html)","createdAt":1572484444975},{"id":12493,"originId":"5dad3db0865a9844a301c9a6","articleId":2623,"userId":513,"content":"[@atian25](/user/atian25)  \r\n大大，不晓得您有啥好建议，感谢","createdAt":1571634608496},{"id":12494,"originId":"5dad51d9ece3813ad9ba3190","articleId":2623,"userId":358,"content":"难道不是应该思考下设计的合理性么？为啥一个 HTTP 接口会耗时超过 2 分钟么？","createdAt":1571639769664},{"id":12495,"originId":"5dad6561ece3813ad9ba324e","articleId":2623,"userId":109,"content":"超过15秒的后台处理流程就应该是丢队列了，不应该让客户端一直处于等待状态。","createdAt":1571644769480},{"id":12496,"originId":"5dad6e26865a9844a301cb13","articleId":2623,"userId":513,"content":"但是网路上搜索，这方面的问题，许多网友也遇到，而且也不好解决，\r\n应该不是：纯「HTTP 接口会耗时超过 2 分钟」的问题！\r\n\r\n看样子是node.js的error，可能跟egg.js比较没有直接的关系~~~\r\n我在解解看，如果解不出来，就麻烦了\r\n","createdAt":1571647014316},{"id":12497,"originId":"5dad7192865a9844a301cb2e","articleId":2623,"userId":358,"content":"> graceful:worker:15220:uncaughtException\r\n\r\n这句看来你是有一个未捕获的异常导致进程挂掉，但 egg 都是有兜底的，怀疑是你业务代码的异步逻辑处理有问题，如在 callback 里面做了一些事，跳出了 Koa 的 Promise 链。\r\n\r\n> [2019-10-21 13:38:05.154] [cfork:master:12608] don’t fork new work (refork: false)\r\n\r\n从这句来看，你线上应用难道是用 `egg-bin dev` 启动 而不是 `egg-scripts` ？。。。。\r\n\r\n> 应该不是：纯「HTTP 接口会耗时超过 2 分钟」的问题！\r\n\r\n没有稳定的复现方式，谁也帮不了你。","createdAt":1571647890889},{"id":12498,"originId":"5dae6201865a9844a301ccbc","articleId":2623,"userId":513,"content":"目前状况回报：\r\n既然是TCP的问题，我list出我egg.js会有对内、对外TCP的存取与协议的 服务\r\n\r\nmysql(sequelize)\r\nldap\r\n前後端分离架构，前端使用nginx handle、後端egg handle\r\n\r\n看来就没有了，\r\n●我先把前後端分离，切换成全部 都由egg handle\r\n●检测mysql的连线都是通过sequelize ，使用pool管理\r\n最後看了ldap这个模块，看来很有可能是这个模块发生问题，\r\n每次成功登入或失败，没有ldap.close()，观察这个部份，对\r\n系统造成的影响。  比对加入ldap.close後，\r\n\"ECONNRESET\"的错误，持续一个晚上没有发生，之前大概2~3小时发生一次，\r\n虽然还不是很确定，先回报目前状况。","createdAt":1571709441610},{"id":12499,"originId":"5db0f6a7ece3813ad9ba3d13","articleId":2623,"userId":1161,"content":"在HTTP中通常情况使用keep-alive 来保持 TCP 长连接，ECONNRESET产生原因是由于服务端TCP连接关掉了的，但是客户端依然往原有通道发送数据导致的。建议参考这篇文章能给到你最完美的答案[如何解决ECONNRESET ](https://zhuanlan.zhihu.com/p/86953757)","createdAt":1571878567674},{"id":12500,"originId":"5db7fabb865a9844a301e8ab","articleId":2623,"userId":513,"content":"[@JsonMa](/user/JsonMa) \r\n\r\n超级感谢。虽然我目前已经没有再次出现(使用ldap完後将其 close)，\r\n\r\n您这一篇，我会好好的阅读的，谢谢。","createdAt":1572338363207},{"id":12501,"originId":"5db7901a865a9844a301e630","articleId":2624,"userId":545,"content":"如果是录播视频的话  弄个文件服务器就行了。\r\nstatic 找相关的。\r\n直播的话去了解  node.js 网络通信相关的，看原生","createdAt":1572311066940},{"id":12502,"originId":"5db7967bece3813ad9ba4dc7","articleId":2624,"userId":3682,"content":"[@zuohuadong](/user/zuohuadong) 是录播视频，但是我照着别的例子改没有用\r\n这是我参考的文件传输的例子[https://github.com/eggjs/examples/blob/master/download/app/controller/index.js](https://github.com/eggjs/examples/blob/master/download/app/controller/index.js)\r\n但是改完后还是放不了\r\n还找到了这个[https://blog.csdn.net/GISuuser/article/details/79140045](https://blog.csdn.net/GISuuser/article/details/79140045)\r\n但是这是express的，不知道在eggjs里怎么写","createdAt":1572312699341},{"id":12503,"originId":"5db7a34cece3813ad9ba4e3d","articleId":2624,"userId":545,"content":"[@wu162](/user/wu162)  找 koa 的吧，在egg 里可以用","createdAt":1572315980213},{"id":12504,"originId":"5db6bc71ece3813ad9ba4c4b","articleId":2625,"userId":850,"content":"https://eggjs.org/zh-cn/core/error-handling.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\r\n你可以看这篇官方文档，简单配置下就可以了~ egg 会全局中间件捕获异常","createdAt":1572256881364},{"id":12505,"originId":"5db78a67ece3813ad9ba4d66","articleId":2625,"userId":3689,"content":"[@okoala](/user/okoala) 不是这个问题，是单独的错误连传问题。我已经解决了。谢谢","createdAt":1572309607322},{"id":12506,"originId":"5db66dd3ece3813ad9ba4983","articleId":2626,"userId":545,"content":"1. 这个不是问题，linux 机制是这样，如果你不创建软链接的话，就不是全局命令了。\r\n2. 推荐使用 nvm ","createdAt":1572236755432},{"id":12507,"originId":"5db677fbece3813ad9ba49cb","articleId":2626,"userId":3691,"content":"加上 `--no-bin-links` 就行了","createdAt":1572239355662},{"id":12508,"originId":"5db68c14ece3813ad9ba4a97","articleId":2626,"userId":3664,"content":"[@zuohuadong](/user/zuohuadong) 大佬, nvm不是管理node版本用的吗, 能解决这个问题?","createdAt":1572244500741},{"id":12509,"originId":"5db68c3e865a9844a301e33b","articleId":2626,"userId":3664,"content":"[@lrz0](/user/lrz0) 不是这个问题.","createdAt":1572244542846},{"id":12510,"originId":"5db6c87e865a9844a301e4e2","articleId":2626,"userId":21,"content":"[@doterlin](/user/doterlin) nvm是可以解决的，因为nvm是通过export的方式来做全局命令的","createdAt":1572259966175},{"id":12511,"originId":"5db6c8cfece3813ad9ba4c72","articleId":2626,"userId":358,"content":"不应该装那么多全局依赖","createdAt":1572260047347},{"id":12512,"originId":"5db3a0f0865a9844a301ddb2","articleId":2627,"userId":1741,"content":"你要是觉得连await/promise都不爽就只能用回调了，异步是改不回同步的\r\n另外fn2返回的大概永远是`undefined`","createdAt":1572053232297},{"id":12513,"originId":"5db648f1865a9844a301e118","articleId":2627,"userId":26,"content":"异步就是异步，想要阻塞代码，可以使用execSync","createdAt":1572227313547},{"id":12514,"originId":"5db661cb865a9844a301e1f5","articleId":2627,"userId":187,"content":"await 出来的值是不能return的。\r\n这一点都不知道吗？","createdAt":1572233675787},{"id":12515,"originId":"5db6bc0e865a9844a301e49f","articleId":2627,"userId":1737,"content":"https://github.com/pretty-foam/proxy/blob/master/src/proxy.js  这是之前做的爬虫，看看能否解决你的问题","createdAt":1572256782115},{"id":12516,"originId":"5db68440ece3813ad9ba4a43","articleId":2629,"userId":3689,"content":"找到原因了，之前的一个关于try catch的问题一并这里回答了。\r\n正确的代码结构\r\n主要是看catch返回部分结果和事务部分，原本是直接传递对象，现在是传递一个json格式的对象\r\n![image.png](//static.cnodejs.org/FsETJcSYT_wayBtb4ixa2eN1D7AS)","createdAt":1572242496917},{"id":12517,"originId":"5db64a07865a9844a301e12c","articleId":2630,"userId":523,"content":"可以使用include查询，并且利用through来做条件选择，或者直接sql","createdAt":1572227591551},{"id":12518,"originId":"5af857e60a36e5312d6ed063","articleId":2631,"userId":2030,"content":"a1，readFileSync 会阻塞进程， await的话，只会阻塞 async 当前块的代码，外面的代码该异步还是异步。\r\n","createdAt":1526224870460},{"id":12519,"originId":"5af8d1401b02288048bd0fee","articleId":2631,"userId":1824,"content":"[@chenzeZzz](/user/chenzeZzz) 和我的想法是一样的，不过如果是这样  为什么第二个问题里http服务器会有那样的现象？我觉得如果同时并发请求可能都会有响应  就是你说的外异；但是我在主线程已经进入async函数处理（处于内同状态），到sleep定时器超时之前，再发出请求，照理说都会被阻塞呀，为什么对于不同的请求会有不同的现象呢？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1526255936013},{"id":12520,"originId":"5af8d34802591040485badf3","articleId":2631,"userId":1824,"content":"[@ProfutW](/user/ProfutW) 上面最后写错了，在进入async函数后，设置定时器，然后返回，新的连接进来应该都能被处理，可是为什么第二次对/的请求却被挂起了？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1526256456366},{"id":12521,"originId":"5af8d56dadea947348e763e4","articleId":2631,"userId":1570,"content":"针对Q2\n我认为不应该会出现这种情况，await是不会阻塞线程的，多个对'/'的请求服务端会立即打印index，至于你上述代码出现这种情况怀疑与http.createServer有关系，它支持async函数吗，或者不太兼容。建议用koa框架测试下。\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1526257005505},{"id":12522,"originId":"5af8d66902591040485badf4","articleId":2631,"userId":1824,"content":"[@lovegnep](/user/lovegnep) 好的，我待会试下koa里是什么表现；但是照理来说 async是ES7标准应该不存在http服务器不支持吧。。。\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1526257257500},{"id":12523,"originId":"5af8dd4e1b02288048bd0ff3","articleId":2631,"userId":1417,"content":"[@ProfutW](/user/ProfutW) node8.0 之后版本就自动支持 async 语法了","createdAt":1526259022543},{"id":12524,"originId":"5af8dfc102591040485badf7","articleId":2631,"userId":2030,"content":"[@ProfutW](/user/ProfutW) test立刻返回，说明/没有阻塞，你可以把sleep换成while true\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1526259649591},{"id":12525,"originId":"5af8e4c21b02288048bd0ff8","articleId":2631,"userId":3695,"content":"Q2   用你的demo测试了一下，是能够正常处理的，和你描述的问题不一致。 node -v  v9.2.0","createdAt":1526260930081},{"id":12526,"originId":"5af8f114adea947348e763f0","articleId":2631,"userId":1824,"content":"[@dkvirus](/user/dkvirus) 对呀 所以这个现象我很疑惑","createdAt":1526264084414},{"id":12527,"originId":"5af8f1441b02288048bd1000","articleId":2631,"userId":1824,"content":"[@chenzeZzz](/user/chenzeZzz) 换成while我知道肯定是阻塞的  我的意思是await应该不会阻塞线程 但是我上面的例子呈现的是阻塞了","createdAt":1526264132403},{"id":12528,"originId":"5af8f1c8adea947348e763f3","articleId":2631,"userId":1824,"content":"[@miserylee](/user/miserylee) 我刚才又试了一遍 我的描述应该没问题的  你可以把sleep时间换长一点 比如10S  然后你对'/'发出两次请求 你会发现第一次请求等待10秒 页面有响应之后，第二次请求才会进入被处理（打印index） 我的node是8.9.4的 这两个版本应该不会在这个问题上有区别吧","createdAt":1526264264421},{"id":12529,"originId":"5af8f689adea947348e763f6","articleId":2631,"userId":1570,"content":"[@ProfutW](/user/ProfutW) \r\n刚才用KOA也试了下，两次访问的确是串行的，第二个客户等到第一个客户响应了之后才开始打印index,好奇怪.\r\n\r\n\tconst koa = require('koa');\r\n\tconst sleep = ms => {\r\n\t\treturn new Promise(resolve => {\r\n\t\t\tsetTimeout(resolve, ms);\r\n\t\t});\r\n\t};\r\n\tlet app = new koa();\r\n\tlet num = 0;\r\n\tapp.use(async (ctx, next) => {\r\n\t\tnum++;\r\n\t\tconsole.log('index',num);\r\n\t\tawait sleep(10000);\r\n\t\tctx.body = 'Hello World'+num;;\r\n\t}).listen(3334);","createdAt":1526265481478},{"id":12530,"originId":"5af8fb0b1b02288048bd1007","articleId":2631,"userId":1824,"content":"[@lovegnep](/user/lovegnep) 对呀 更奇怪的是 对其他url的访问却能够及时处理。。。","createdAt":1526266635843},{"id":12531,"originId":"5af91e921b02288048bd101d","articleId":2631,"userId":2030,"content":"后台的console 显示每个请求都有 index/test， 没有被阻塞的","createdAt":1526275730494},{"id":12532,"originId":"5af92a0f0a36e5312d6ed0a1","articleId":2631,"userId":1741,"content":"[@lovegnep](/user/lovegnep) 我这里是正常的，两次请求都立刻打印index，node10.0.0，koa2.5.1\r\n\r\n又试了几次，有时候会出现串行的情况，我再找找原因","createdAt":1526278671611},{"id":12533,"originId":"5af92b7502591040485bae16","articleId":2631,"userId":3696,"content":"啊","createdAt":1526279029325},{"id":12534,"originId":"5af92c650a36e5312d6ed0a6","articleId":2631,"userId":1824,"content":"[@chenzeZzz](/user/chenzeZzz) 对不同url访问是不会阻塞 但是对同一个就会","createdAt":1526279269306},{"id":12535,"originId":"5af930060a36e5312d6ed0a9","articleId":2631,"userId":1741,"content":"[@chenzeZzz](/user/chenzeZzz) [@ProfutW](/user/ProfutW) \r\n\r\n同一个页面刷新都会立刻打印index，两个页面同时请求只会打印第一个页面的index，此时刷新第一个页面就会立刻打印下一个index\r\n\r\n奇怪的是3个页面请求时，断开第一个页面，剩下两个又会同时处理了。。。（难道是因为剩下两个在同一次事件循环内，所以可以被同时处理？\r\n\r\n不是koa或async的问题，http就是这样的\r\n```javascript\r\nconst http = require('http');\r\nlet num = 0;\r\nhttp.createServer(()=>console.log(num++)).listen(3333);\r\n```","createdAt":1526280198465},{"id":12536,"originId":"5af94f2cadea947348e76422","articleId":2631,"userId":1824,"content":"[@dislido](/user/dislido) 的确是这样。。。我试了在定时器后面输出内容  结果是不停刷新后 10S后全部一起输出  这样的话await是没有阻塞线程 可是是什么阻塞了服务器响应呢  难道从tcp连接开始一直到超时这段时间  http服务器都不能响应其他请求？ 但是为什么对另一个路径的请求却可以被处理呢？","createdAt":1526288172754},{"id":12537,"originId":"5af9628e0a36e5312d6ed0c5","articleId":2631,"userId":1570,"content":"[@dislido](/user/dislido) 你是在同一个浏览器里做实验吗？\n怀疑浏览器没有立刻发出第二个请求。我等会儿回去用手机和电脑实验下\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1526293134450},{"id":12538,"originId":"5af994b11b02288048bd1050","articleId":2631,"userId":1824,"content":"[@lovegnep](/user/lovegnep) [@dislido](/user/dislido)  应该是浏览器没有同时发出请求  我用curl同时发起两个请求  都能及时被接受并处理。至于[@dislido](/user/dislido) 说的断开第一个连接 后面两个同时处理应该也是这个问题  断开第一个以后  浏览器同时发出了后面两个请求，所以没有被阻塞。。。看来浏览器在没有收到url的响应前是不会对同一个url发起多次请求的。。。","createdAt":1526305969742},{"id":12539,"originId":"5afa26f81b02288048bd1063","articleId":2631,"userId":1570,"content":"[@ProfutW](/user/ProfutW) 嗯，浏览器优化请求。\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1526343416130},{"id":12540,"originId":"5afaa431adea947348e7646f","articleId":2631,"userId":3697,"content":"mark","createdAt":1526375473659},{"id":12541,"originId":"5db57ac8ece3813ad9ba473d","articleId":2631,"userId":3698,"content":"我也发现了这个问题了，还以为是我哪里用的不对。\r\n看到大家的讨论，自己试了一下，确实是浏览器的优化啊，终于解决了我的困惑。\r\n对于同一个地址的请求，如果前一个请求没返回，第二个也不会发起。","createdAt":1572174536437},{"id":12542,"originId":"5db568a2865a9844a301dfca","articleId":2632,"userId":358,"content":"process.env.TZ 或者看下 ali-rds 有没有配置","createdAt":1572169890469},{"id":12543,"originId":"5db57a5cece3813ad9ba4733","articleId":2632,"userId":1897,"content":"1","createdAt":1572174428159},{"id":12544,"originId":"5db4614a865a9844a301dea1","articleId":2633,"userId":358,"content":"去掉 node，只保留文件路径即可。\r\n\r\n遇事不决看文档 https://docs.npmjs.com/files/package.json#bin","createdAt":1572102474284},{"id":12545,"originId":"5db50d54ece3813ad9ba462c","articleId":2633,"userId":615,"content":"[@atian25](/user/atian25) 其实很多都试了  我想是可以把它全局安装之后调用fy xx 这样，所以也不能写我现在工程目录的绝对路径，但是相对目录一写都报错，不知道出了什么问题。\r\n第一种\r\n![image.png](//static.cnodejs.org/Fh9lw5ButEs_zjhZEqbB_5NoKAhy)\r\n\r\n第二种\r\n![image.png](//static.cnodejs.org/FsKGKazq8D8GLmVuSZs8-TysoiL1)\r\n\r\n其中我npm link之后全局npm包的位置上是有的\r\n![image.png](//static.cnodejs.org/FsmjuMcl3gKC8VlftikenUtYn3Pn)\r\n麻烦大神给看看","createdAt":1572146516216},{"id":12546,"originId":"5db5119aece3813ad9ba463d","articleId":2633,"userId":615,"content":"[@974806047](/user/974806047) 再补充个信息 node版本和npm版本  ![image.png](//static.cnodejs.org/Fn2tObPN66-D2RRrnaxtveZZgarj)","createdAt":1572147610095},{"id":12547,"originId":"5db51226865a9844a301df14","articleId":2633,"userId":615,"content":"[@974806047](/user/974806047) 码云地址 https://gitee.com/Zeeephr/zee-translate.git","createdAt":1572147750350},{"id":12548,"originId":"5db51431865a9844a301df1f","articleId":2633,"userId":358,"content":"相对路径即可，你的 index.js 代码最前面少了一句 # 的路径。其实你随便找个 egg-bin / mocha 之类的库，看看它怎么写就知道了","createdAt":1572148273522},{"id":12549,"originId":"5db528b5ece3813ad9ba469e","articleId":2633,"userId":615,"content":"[@atian25](/user/atian25) 好的 感谢！","createdAt":1572153525474},{"id":12550,"originId":"5db29320865a9844a301dbf9","articleId":2634,"userId":358,"content":"npm 随便搜下大把：\r\n- https://github.com/node-modules/ab\r\n- https://github.com/sidorares/node-wrk\r\n- https://github.com/mcollina/autocannon","createdAt":1571984160854},{"id":12551,"originId":"5db32d57ece3813ad9ba44b9","articleId":2634,"userId":150,"content":"npm模块：loadtest\r\n现成的工具：ab","createdAt":1572023639595},{"id":12552,"originId":"5db04bea865a9844a301d588","articleId":2635,"userId":419,"content":"babel、typescript","createdAt":1571834858097},{"id":12553,"originId":"5db1050cece3813ad9ba3d8f","articleId":2635,"userId":150,"content":"[@yuu2lee4](/user/yuu2lee4) 我弄好了配置文件\r\n.babelrc\r\n```\r\n\"plugins\": [\r\n  [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\r\n  [\"@babel/plugin-proposal-class-properties\", { \"loose\" : true }]\r\n]\r\n```\r\n\r\n但是要如何使用呢？","createdAt":1571882252564},{"id":12554,"originId":"5db13e76865a9844a301d7fb","articleId":2635,"userId":20,"content":"webpack 先编译下，再node执行","createdAt":1571896950659},{"id":12555,"originId":"5db1c18dece3813ad9ba4112","articleId":2635,"userId":150,"content":"[@weiketa](/user/weiketa) 感谢，我试试","createdAt":1571930509859},{"id":12556,"originId":"5db246da865a9844a301da35","articleId":2635,"userId":545,"content":"[@ddzyan](/user/ddzyan) \r\n```\r\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class RolesGuard implements CanActivate {\r\n  canActivate(\r\n    context: ExecutionContext,\r\n  ): boolean | Promise<boolean> | Observable<boolean> {\r\n    return true;\r\n  }\r\n}\r\n```\r\n\r\n```\r\nimport { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class LoggingInterceptor implements NestInterceptor {\r\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\r\n    console.log('Before...');\r\n\r\n    const now = Date.now();\r\n    return next\r\n      .handle()\r\n      .pipe(\r\n        tap(() => console.log(`After... ${Date.now() - now}ms`)),\r\n      );\r\n  }\r\n}\r\n```\r\n\r\n参见： https://docs.nestjs.cn/6/firststeps","createdAt":1571964634152},{"id":12557,"originId":"5db32d10865a9844a301dd89","articleId":2635,"userId":150,"content":"[@zuohuadong](/user/zuohuadong) nestjs 框架我已经在使用了(非常好)，现在还考虑的是如何给 koa2 实现装饰器的功能","createdAt":1572023568933},{"id":12558,"originId":"5c18d92bf3d48d2397c12a42","articleId":2636,"userId":98,"content":"<<php入门到精通>>","createdAt":1545132331399},{"id":12559,"originId":"5c18e1397ec239239ff58318","articleId":2636,"userId":3701,"content":"node.js这个东西可以先用再学~ 先确定用来做什么","createdAt":1545134393876},{"id":12560,"originId":"5c18e807f3d48d2397c12adc","articleId":2636,"userId":3702,"content":"关注","createdAt":1545136135066},{"id":12561,"originId":"5c18f233f3d48d2397c12b17","articleId":2636,"userId":790,"content":"视频教程楼主要吗\r\n[https://www.sucaihuo.com/video/224-0-0](https://www.sucaihuo.com/video/224-0-0)","createdAt":1545138739920},{"id":12562,"originId":"5c19e2cc3898674067a75e88","articleId":2636,"userId":852,"content":"推荐下刚出的《Node.js开发实战》虽然叫实战，但也适合入门看，这是译者自序：https://cnodejs.org/topic/5c0dd594f3d48d2397c0f86c","createdAt":1545200332424},{"id":12563,"originId":"5c19e9f376c4964062a1b487","articleId":2636,"userId":1695,"content":"最有深度的：《深入浅出nodejs》  朴灵   \r\n\r\n带你走进nodejs的世界，了解nodejs的生态：《node.js实战》  \r\n\r\n入门型的： 《了不起的nodejs》\r\n\r\n![image.png](//static.cnodejs.org/Fi1g0JerYfu1ELoZwZy0pwX0nJYk)","createdAt":1545202163408},{"id":12564,"originId":"5c1a17b976c4964062a1b6c8","articleId":2636,"userId":845,"content":"同Node爱好者，有空可以关注[我的博文](http://www.51linwei.top/blog/article)，不定期更新","createdAt":1545213881247},{"id":12565,"originId":"5c1a411b3898674067a76218","articleId":2636,"userId":1660,"content":"node.js实战 第二版，入门级别","createdAt":1545224475546},{"id":12566,"originId":"5c3a08b53898674067a7e7f4","articleId":2636,"userId":1661,"content":"[@ciey](/user/ciey) 这个在哪？","createdAt":1547307189319},{"id":12567,"originId":"5c4b0e65f9075c1ef71382d6","articleId":2636,"userId":828,"content":"一个字:学","createdAt":1548422757135},{"id":12568,"originId":"5c4b1527595cbd1e950888ab","articleId":2636,"userId":109,"content":"先把接口文档看一遍吧","createdAt":1548424487015},{"id":12569,"originId":"5c793feb0d249a149624f51e","articleId":2636,"userId":805,"content":"这社区的新手入门先看看","createdAt":1551450091641},{"id":12570,"originId":"5c7c0d8890c14711cc8c9cb7","articleId":2636,"userId":1768,"content":"还没入门，不要“深入”。不建议先看《深入浅出》","createdAt":1551633800768},{"id":12571,"originId":"5c9c24ee484eeb3634157c5f","articleId":2636,"userId":3558,"content":"[@waitingsong](/user/waitingsong) 你指的是node.js的官方文档吧","createdAt":1553736942221},{"id":12572,"originId":"5c9ca06099e62a362ff40da2","articleId":2636,"userId":1078,"content":"建议先找个东西做起来","createdAt":1553768544826},{"id":12573,"originId":"5c9ce5e199e62a362ff40e6d","articleId":2636,"userId":2220,"content":"如果有js背景，建议入门《深入浅出nodejs》\r\n然后express照着文档做个简单的应用，然后看express源码\r\n然后看eggjs文档照着做个简单应用提供个http接口就行，然后看eggjs源码。\r\n骨头难啃，但全是钙啊，建议不要看视频，5分钟能讲完的非得拖到50分。\r\n没js背景，没建议。。。","createdAt":1553786337749},{"id":12574,"originId":"5c9cfa41484eeb36341580f6","articleId":2636,"userId":501,"content":"是时候推荐一波我用nodejs开发的学习平台了，\r\n1. [DOM探索之基础详解篇](https://www.geekjc.com/ebook/detail/5bb9b9f3e132926e1b268ec0/init)\r\n2. [React 模式](https://www.geekjc.com/ebook/detail/5bae0c10ddb4f437ecfdc708/init)\r\n3. [前端常见面试题汇总](https://www.geekjc.com/ebook/detail/5ba5bcae7143880b09cb4d54/init)","createdAt":1553791553445},{"id":12575,"originId":"5cb9dfe437faec0ce1d03e33","articleId":2636,"userId":804,"content":"进阶中","createdAt":1555685348726},{"id":12576,"originId":"5cdc31a9e57aac76fed2afd3","articleId":2636,"userId":798,"content":"适合别人的不一定适合自己","createdAt":1557934505507},{"id":12577,"originId":"5cdce2e4e57aac76fed2b186","articleId":2636,"userId":2342,"content":"找项目撸，边做边学。","createdAt":1557979876195},{"id":12578,"originId":"5d01082a95fcc914aa2684c3","articleId":2636,"userId":1661,"content":"楼上说的有道理","createdAt":1560348714209},{"id":12579,"originId":"5d01e6b11fe902120f31e6f8","articleId":2636,"userId":151,"content":"6楼推介的书非常棒。\r\n我也进行了一些整理：https://github.com/ruyuejun/polaris/blob/master/language/javascript.md\r\n当然狼叔推出了新版书籍正在预售，看目录非常好，也可以期待下","createdAt":1560405681623},{"id":12580,"originId":"5d27db23fa8ef0094e064367","articleId":2636,"userId":40,"content":"类似的问题见过好几个。。。。","createdAt":1562893091226},{"id":12581,"originId":"5d2d378d51637b492bb0f0f8","articleId":2636,"userId":1671,"content":"狼叔的《更了不起的nodejs》","createdAt":1563244429872},{"id":12582,"originId":"5d3557c49969a529571d6320","articleId":2636,"userId":249,"content":"初学还是建议Node.js实战吧，个人看过楼上除《Node.js开发实战》的所有书，个人体会","createdAt":1563776964795},{"id":12583,"originId":"5d3587a5b2b9222961dad222","articleId":2636,"userId":356,"content":"[@zhulinwei](/user/zhulinwei) ![image.png](//static.cnodejs.org/FtSQIHPNpIn_O7g4BkXmbIZiXAL8)","createdAt":1563789221311},{"id":12584,"originId":"5d63317e421846662d984a65","articleId":2636,"userId":1373,"content":"看我签名，网站有个栏目“Node.js”。","createdAt":1566781822681},{"id":12585,"originId":"5d84e11b53c75a4136b4c36b","articleId":2636,"userId":804,"content":"百度会有很多","createdAt":1568989467225},{"id":12586,"originId":"5d857a7f95464514f7ed8b1c","articleId":2636,"userId":2,"content":"https://cnodejs.org/topic/5ab3166be7b166bb7b9eccf7\r\n狼叔经典","createdAt":1569028735489},{"id":12587,"originId":"5dad0802ece3813ad9ba3042","articleId":2636,"userId":790,"content":"实战出真知\r\n\r\n","createdAt":1571620866206},{"id":12588,"originId":"5db2d83fece3813ad9ba4448","articleId":2636,"userId":148,"content":"官方文档了解一下，https://nodejs.org/en/docs","createdAt":1572001855058},{"id":12589,"originId":"5db2a383ece3813ad9ba4385","articleId":2637,"userId":545,"content":"建议是用 CDN 来解决。","createdAt":1571988355529},{"id":12590,"originId":"5db2ae20865a9844a301dc82","articleId":2637,"userId":516,"content":"AWS  CloudFront ","createdAt":1571991072827},{"id":12591,"originId":"5db116f3ece3813ad9ba3e31","articleId":2638,"userId":187,"content":"可以啊：\r\nwindow.onerror=function(){\r\n\twindow.close()\r\n}","createdAt":1571886835285},{"id":12592,"originId":"5db26269865a9844a301db64","articleId":2638,"userId":161,"content":"在小程序打开这个网站不就行了","createdAt":1571971689042},{"id":12593,"originId":"5daeb94dece3813ad9ba3697","articleId":2639,"userId":358,"content":"为啥不是用 egg-scripts 启动的？如果你自己实现的话，要看里面对 alinode 环境变量等的处理","createdAt":1571731789074},{"id":12594,"originId":"5db181dbece3813ad9ba4052","articleId":2639,"userId":390,"content":"[@atian25](/user/atian25) 用的是egg.start单进程启动，应为是放在k8s,单进程不叫合理。\r\n\r\n```shell\r\negg-scripts start --env=prod --worker=1\r\n```\r\n这样单进程一个worker，但是还是有agent和master在跑吧。\r\n","createdAt":1571914203203},{"id":12595,"originId":"5db1a12e865a9844a301d9b9","articleId":2639,"userId":358,"content":"有问题的，这样 worker 如果死的话，pod 不会死，然后 master 在重启 worker 的过程中，服务是不可用的。\r\n\r\n单进程模式还在内测中。建议你还是开 2-4 个 worker，不需要过渡优化的，一个 pod 来几个进程没问题的。\r\n\r\n另外，如果你不用 egg-scripts 那你要自己实现里面的必要的逻辑，包括 alinode 的一些处理","createdAt":1571922222139},{"id":12596,"originId":"5db11ca3865a9844a301d76b","articleId":2640,"userId":20,"content":"https://www.cnblogs.com/both-eyes/p/10873155.html 试试这个","createdAt":1571888291638},{"id":12597,"originId":"5dafbdccece3813ad9ba39af","articleId":2642,"userId":545,"content":"node.js 12 在 centos6 下安装都有问题，动态链接库的坑。\r\n降级到 node.js10 ，或者升级centos7/8，再试下","createdAt":1571798476467},{"id":12598,"originId":"5dafc050ece3813ad9ba39c3","articleId":2642,"userId":3562,"content":"[@zuohuadong](/user/zuohuadong) 先膜拜一下大佬（nest.js）;\r\n我用的oracledb是4.0.1的，服务器不能升级，只能node8.16试试。","createdAt":1571799120995},{"id":12599,"originId":"5dafc871865a9844a301d291","articleId":2642,"userId":3562,"content":"[@zuohuadong](/user/zuohuadong) 整体降到8.16.0（node和pkg-fetch-node）依旧不行，\r\n我将oracledb的包放进红帽里直接执行一次install然后将oracledb包整体拿出来，重新打包也不行：\r\n![image.png](//static.cnodejs.org/FugI8iG3UVw5bciL457Fz7zNwVY1)","createdAt":1571801201370},{"id":12600,"originId":"5db101eeece3813ad9ba3d76","articleId":2642,"userId":545,"content":"[@LeavesSky](/user/LeavesSky)  ncc 会好一些，nexe 也可以。\r\n对于带 c++ 拓展的，这种打包很容易出问题。","createdAt":1571881454269},{"id":12601,"originId":"5db06f19ece3813ad9ba3cdc","articleId":2643,"userId":701,"content":"可以直接看网络请求,你想要的内容应该都在里面","createdAt":1571843865083},{"id":12602,"originId":"5db0305bece3813ad9ba3c46","articleId":2644,"userId":836,"content":"动态追加？\r\nstore只能dispatch去修改，动态disptch即可","createdAt":1571827803916},{"id":12603,"originId":"5db068f2865a9844a301d5c2","articleId":2644,"userId":1939,"content":"动态追加？直接在 reducer return 的东西里面加上就行","createdAt":1571842290866},{"id":12604,"originId":"5dac5a8cece3813ad9ba2f9a","articleId":2647,"userId":354,"content":"搜一下 npm 包， delay","createdAt":1571576460025},{"id":12605,"originId":"5dacbd83865a9844a301c837","articleId":2647,"userId":1744,"content":"setTimeout闭包","createdAt":1571601795162},{"id":12606,"originId":"5daea556ece3813ad9ba35d4","articleId":2647,"userId":356,"content":"sleep 包 ","createdAt":1571726678640},{"id":12607,"originId":"5daeb2ceece3813ad9ba3660","articleId":2647,"userId":390,"content":"for循环里方一个sleep\r\n\r\n```js\r\nfunction sleep(ms) {\r\n\treturn new Promise(resolve => setTimeout(resolve, ms))\r\n}\r\n\r\n\r\n```","createdAt":1571730126410},{"id":12608,"originId":"5daeb60a865a9844a301cef7","articleId":2647,"userId":753,"content":"隔一段时间重启","createdAt":1571730954965},{"id":12609,"originId":"5daee1d6865a9844a301cfe2","articleId":2647,"userId":111,"content":"[@conanskyforce](/user/conanskyforce)  这代码真拧巴","createdAt":1571742166959},{"id":12610,"originId":"5daebc42ece3813ad9ba36c5","articleId":2648,"userId":314,"content":"是的是的，难受，论坛文章质量下降了","createdAt":1571732546965},{"id":12611,"originId":"5daedd08865a9844a301cfcf","articleId":2648,"userId":18,"content":"[@lzq920](/user/lzq920) [@junxing1025](/user/junxing1025) 看到有恶意发广告的可以直接 at 我","createdAt":1571740936742},{"id":12612,"originId":"5c0ae6a915a4d545e3f4c602","articleId":2649,"userId":3710,"content":"我相信没人能回答这个问题，因为一个框架是作者已经把所有最难的东西封装好呈现出来了，它可能存在坑，但不存在难点，按步就班的跟着官网一步步在项目中实践就行了。\r\n\r\n不建议问这种问题，以及 nodejs 如何学习这种问题，如果真的想学自然能找到资源，比如 nodejs api 过个五遍基本都算三分之一个大神了，剩下的就是慢慢嚼烂已经学到的东西。\r\n\r\n如果你真的想学 vue， angular，react，首先需要思考这些问题，它到底解决了前端编程中的什么问题？它跟 jquery 到底有什么区别？（这个问题本身就是错误的）。\r\n\r\n另外国内我建议用 vue 就行了，vue 的很多设计是非常不错的（相比于 angular）。这种框架没必要学习多个，除非真的想浪费时间。","createdAt":1544218281668},{"id":12613,"originId":"5c0bba80f3d48d2397c0f427","articleId":2649,"userId":1696,"content":"看个入门视频\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1544272512104},{"id":12614,"originId":"5c0bbaccf3d48d2397c0f429","articleId":2649,"userId":1696,"content":"然后过一遍中文文档，接着找个\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1544272588581},{"id":12615,"originId":"5c0bbeed7ec239239ff54e33","articleId":2649,"userId":805,"content":"给楼主推荐些视频教程看看\r\n[http://www.sucaihuo.com/video/217-0-0](http://www.sucaihuo.com/video/217-0-0)","createdAt":1544273645240},{"id":12616,"originId":"5c0bd6947ec239239ff54e84","articleId":2649,"userId":1545,"content":"文档坚持看完**“基础”**部分！（重要）\r\n然后可以找个合适的Vue项目磨合了（自荐下：重构cnode社区项目，[VueCnodeJS](https://github.com/shuiRong/VueCnodeJS)）","createdAt":1544279700821},{"id":12617,"originId":"5c0cadeff3d48d2397c0f51d","articleId":2649,"userId":1734,"content":"vue怎么学习? 官方文档不美么? 有什么能比vue学起来更舒服的么?","createdAt":1544334831351},{"id":12618,"originId":"5c0cb79ff3d48d2397c0f543","articleId":2649,"userId":652,"content":"月经帖","createdAt":1544337311103},{"id":12619,"originId":"5c1c4e643898674067a76ad5","articleId":2649,"userId":545,"content":"[@GopherJ](/user/GopherJ)  这个帖子就是专门给4楼回答的，为了推广。\r\n\r\n过几天这又会有学习 react  学习 angular 的帖子，底下同样 是这个链接回复","createdAt":1545358948460},{"id":12620,"originId":"5c1c825f76c4964062a1c2fb","articleId":2649,"userId":819,"content":"教程一大堆，跑这里来问干嘛？\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1545372255374},{"id":12621,"originId":"5c1ddbbc76c4964062a1c827","articleId":2649,"userId":1276,"content":"这种贴就是钓鱼贴，管你评论里都说了些啥，作者自己是从来不会回复的","createdAt":1545460668201},{"id":12622,"originId":"5c1ddc3a3898674067a77175","articleId":2649,"userId":1276,"content":"[@qinyang912](/user/qinyang912)\r\n看看这个人都问了些啥\r\n ![image.png](//static.cnodejs.org/FjxcVTId40foXk1c0eSmC9jXBhfx)","createdAt":1545460794743},{"id":12623,"originId":"5c1de76b3898674067a771bb","articleId":2649,"userId":1193,"content":"如何学习 html ？","createdAt":1545463659215},{"id":12624,"originId":"5c3747bb5bf06c5e7e3f3df1","articleId":2649,"userId":1661,"content":"[@victoryboss](/user/victoryboss) w3c，菜鸟 等很多学习的网站","createdAt":1547126715927},{"id":12625,"originId":"5c51c4703819b801aa5a2f07","articleId":2649,"userId":828,"content":"mark","createdAt":1548862576416},{"id":12626,"originId":"5c51c5d33819b801aa5a2f14","articleId":2649,"userId":413,"content":"https://17dev.club/article/5bd1de48c8b14050bdc03efc","createdAt":1548862931627},{"id":12627,"originId":"5c7e80c190c14711cc8ca986","articleId":2649,"userId":805,"content":"如何学全栈？","createdAt":1551794369144},{"id":12628,"originId":"5ca22df531010b2dfbb42037","articleId":2649,"userId":111,"content":"我只想知道学完vue能涨多少工资？","createdAt":1554132469084},{"id":12629,"originId":"5ca2d95c6c1de62dce466cee","articleId":2649,"userId":1420,"content":"[@yakczh](/user/yakczh) 喜欢上这个答案了~","createdAt":1554176348858},{"id":12630,"originId":"5ca2fe7a31010b2dfbb42369","articleId":2649,"userId":2073,"content":"看文档做一遍","createdAt":1554185850573},{"id":12631,"originId":"5ca30abd6c1de62dce466f04","articleId":2649,"userId":1944,"content":"买一本[《深入浅出Vue.js》](https://item.jd.com/12573168.html)好好学学~","createdAt":1554188989322},{"id":12632,"originId":"5ca30c1031010b2dfbb42466","articleId":2649,"userId":851,"content":"https://github.com/vuejs/awesome-vue","createdAt":1554189328658},{"id":12633,"originId":"5cbdc498a86ae80ce64b20db","articleId":2649,"userId":804,"content":"nodejs和vuejs哪个好学？","createdAt":1555940504945},{"id":12634,"originId":"5ce2c32d518e0954fc40ffc3","articleId":2649,"userId":798,"content":"知道如何又如何？","createdAt":1558364973928},{"id":12635,"originId":"5d07ac931fe902120f320019","articleId":2649,"userId":1661,"content":"mark","createdAt":1560784019767},{"id":12636,"originId":"5d31daa9b2b9222961dac646","articleId":2649,"userId":1373,"content":"祝楼主早日学成，进入实战。实战选择框架可以逛逛：[极客文档](https://geekdocs.cn/)，同时此站栏目“程序员专辑”一列有多个vue学习教程和源码解读，希望对你有所帮助，谢谢！","createdAt":1563548329481},{"id":12637,"originId":"5d7e389f95464514f7ed70f4","articleId":2649,"userId":804,"content":"在这社区得学nodejs\r\n\r\n","createdAt":1568553119731},{"id":12638,"originId":"5da5dfc5865a9844a301b89e","articleId":2649,"userId":790,"content":"这问题应该到vue社区问\r\n\r\n","createdAt":1571151813904},{"id":12639,"originId":"5c09f93915a4d545e3f4c1a9","articleId":2650,"userId":1713,"content":"node资料不少了吧， 最好的方式就是直接做项目。 不知道做什么的话，就从简单的网站写起\r\n至于你说的数据库用MySQL的也挺多的啊。而且数据库和node的学习没有直接关系啊，它俩是独立的。 \r\n你应该问node如何操作MySQL数据库。 太多了…… [mysql](https://www.npmjs.com/package/mysql), [sequelize](https://www.npmjs.com/package/sequelize)","createdAt":1544157497666},{"id":12640,"originId":"5c0a0777d3b8ab334e8dbc20","articleId":2650,"userId":545,"content":"有 java 基础的话，可以从 nest.js 入手。\r\n如果没基础的话，从express 或者 koa 入手也可以","createdAt":1544161143560},{"id":12641,"originId":"5c0a0b4815a4d545e3f4c247","articleId":2650,"userId":3712,"content":"我反正是从官方api文档和express2.X开始学的哟~~现在的话，选择面就广多了，不过仍旧建议是node的官方文档+框架，比如express,egg.js，koa,thinkjs等等\r\n另外就是多练手.......","createdAt":1544162120266},{"id":12642,"originId":"5c0a8a04d3b8ab334e8dbf76","articleId":2650,"userId":805,"content":"给楼主推荐系列nodejs视频教程，看看有没有合适的\r\n[https://www.sucaihuo.com/video/224-0-0](https://www.sucaihuo.com/video/224-0-0)\r\n","createdAt":1544194564309},{"id":12643,"originId":"5c0d0d5e7ec239239ff550b2","articleId":2650,"userId":109,"content":"先看官方文档 API。\r\n任何语言都先了解关于处理 数字、字符串、数组（对象） 的相关 API。 \r\n\r\n如果官方文档都没看过还在喊资料少，那就无解了。","createdAt":1544359262271},{"id":12644,"originId":"5c20fff876c4964062a1d52b","articleId":2650,"userId":501,"content":"是时候推荐一波我用nodejs开发的学习平台了，\r\n1. [DOM探索之基础详解篇](https://www.geekjc.com/ebook/description/5bb9b9f3e132926e1b268ec0/init)\r\n2. [React 模式](https://www.geekjc.com/ebook/detail/5bae0c10ddb4f437ecfdc708/init)\r\n3. [前端常见面试题汇总](https://www.geekjc.com/ebook/detail/5ba5bcae7143880b09cb4d54/init)\r\n4. [nodejs基础教程](https://www.geekjc.com/ebook/detail/5b9f65ce0f510f6ae689bccd/init)","createdAt":1545666552302},{"id":12645,"originId":"5c216cad76c4964062a1d54e","articleId":2650,"userId":551,"content":"马\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1545694381305},{"id":12646,"originId":"5c3895e13898674067a7e415","articleId":2650,"userId":1661,"content":"百度一下会有很多","createdAt":1547212257962},{"id":12647,"originId":"5c53061be6aaad2ea76de598","articleId":2650,"userId":828,"content":"楼主学得怎么样了？","createdAt":1548944923936},{"id":12648,"originId":"5c539b13e6aaad2ea76de5fc","articleId":2650,"userId":1417,"content":"刚开始接触 Node 很多人会讲究学习体系，这对于新人很难，我连 Node 是什么都不清楚谈什么体系。\r\n\r\n那就定个目标，是做一个网站，还是做一个服务端提供接口，还是仅仅写个命令行工具，如果没有目标，那也可以打住节约宝贵的时间了。有了目标就直接怼代码。简书、知乎、谷歌、cnode 社区、github、oschina 各种社区看文章了解入门，哪里不懂查哪里。\r\n\r\n 如果你要学习 Node + Mysql，这里有个实战项目：https://github.com/dkvirus/py-novel/tree/master/server_node_express  ，希望对你有帮助。","createdAt":1548983059850},{"id":12649,"originId":"5c53b1ebe6aaad2ea76de677","articleId":2650,"userId":446,"content":"1. 不要指望中文资源，得提高英语水平，以及科学上网，否则不如去学在国内沉淀时间较长的技术，比如Java。\r\n2. 官网的Guides已经提供了非常全面的学习资料 https://nodejs.org/en/docs/guides/ ，看完Guides再刷一遍API文档，Node其实就这么点东西。\r\n3. 做服务端开发语言和引擎只是冰山一角，服务端更多的是架构思想，以及对各种[中间件](https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BB%B6)、SaaS的了解和运用。\r\n\r\n我自己带的实习生是CS专业+Python出身，我没让他看任何书，两个月从0开始：\r\n1. MDN上刷一遍HTTP教程(英文更全) https://developer.mozilla.org/zh-CN/docs/Web/HTTP\r\n2. MDN上刷一遍JS教程(英文更全) https://developer.mozilla.org/zh-CN/docs/Web/JavaScript 以及阮一峰的ES6教程\r\n3. Node.js官方文档Guides(英文)刷一遍 https://nodejs.org/en/docs/guides/\r\n4. Express\\Koa官方文档(英文)刷一遍\r\n5. MongoDB\\Mongoose官方文档(英文)刷一遍，其实也有必要把PostgreSQL和Redis都刷一遍\r\n\r\n现在他已经可以写一些简单业务了，未来就是多了解些架构思想和中间件了。","createdAt":1548988907243},{"id":12650,"originId":"5c7fd1205b8cb21491ca6a1b","articleId":2650,"userId":798,"content":"[@libook](/user/libook) 泪流满面！然而英语比node更难学","createdAt":1551880480262},{"id":12651,"originId":"5c80785290c14711cc8cb08a","articleId":2650,"userId":3713,"content":"[@libook](/user/libook)  回答很赞，值得学习","createdAt":1551923282762},{"id":12652,"originId":"5c8085775b8cb21491ca6ba7","articleId":2650,"userId":829,"content":"[@libook](/user/libook) 很赞，官方文档永远是最好的学习资料。","createdAt":1551926647606},{"id":12653,"originId":"5c80b7d65b8cb21491ca6cec","articleId":2650,"userId":446,"content":"[@Nancygirl](/user/Nancygirl) 事实就是这么残酷，要想用新技术就得下狠心学英语，否则只能去学中文沉淀很好的技术，然而现在技术都是国际化的，要想学精学深不光要有能力看英文文献，也得有能力写英文与其他人交流。\r\n\r\n作为一个大学英语4级没考过的人，这几年基本上都是逼着自己硬着头皮每周至少3篇英文技术文章的，现在总算能比较快速看懂一篇文章的大概意思了。","createdAt":1551939542810},{"id":12654,"originId":"5c877c267ce0df37324274c4","articleId":2650,"userId":3714,"content":"因为nodejs 简单啊","createdAt":1552383014258},{"id":12655,"originId":"5c89e1787ce0df3732427d28","articleId":2650,"userId":3715,"content":"https://github.com/gothinkster/node-express-realworld-example-app\r\n没人提到这个仓库吗？稍微有点 http 知识的话，看这个应该很快能上手。","createdAt":1552540024063},{"id":12656,"originId":"5c89e36eacb681372d417f54","articleId":2650,"userId":3716,"content":"其实Nodejs官方有从未曾发布的KB，具体可以到此处看：https://nodejs.org/zh-cn/knowledge/\r\n目前在审核中，纯英语版本。","createdAt":1552540526344},{"id":12657,"originId":"5cac332bd68ff5064921b6bc","articleId":2650,"userId":2250,"content":"[@libook](/user/libook) 用英文学习是正道，不过阮一峰老师，就算了吧，\r\n如果你能无障碍看英文视频学习，推荐油管上的net ninja，有很多不错的nodejs的视频教程列表","createdAt":1554789163588},{"id":12658,"originId":"5cae95f8dad66d658e407acd","articleId":2650,"userId":853,"content":"哎","createdAt":1554945528691},{"id":12659,"originId":"5caeb738dad66d658e407c65","articleId":2650,"userId":3717,"content":"给您推荐一个Node.js Web快速开发框架：doodoo.js。支持Koa.js中间件，支持模块化，插件，钩子机制，可以直接在项目里使用 ES6/7（Generator Function, Class, Async & Await）等特性。同时吸收了thinkphp，laravel等国内外众多框架的设计理念和思想，开发 Node.js 项目更简单、高效、灵活。\r\nhttps://gitee.com/doodooke/doodoo.js\r\n另外推荐一个node的优秀开源项目：多多客（微信小程序saas平台，支持可视化DIY）\r\nhttps://gitee.com/doodooke/doodoo","createdAt":1554954040130},{"id":12660,"originId":"5caeb7ab207b2365936ebd71","articleId":2650,"userId":3717,"content":"[@doodooke1688](/user/doodooke1688) 可以直接以研究开源项目的形式来学习，上手速度更快","createdAt":1554954155685},{"id":12661,"originId":"5cccffa05a5bae6e07812a8c","articleId":2650,"userId":368,"content":"楼主为啥还用mysql？","createdAt":1556938656966},{"id":12662,"originId":"5cd152d5da4b2a7fe61d93a1","articleId":2650,"userId":446,"content":"[@kenshinji](/user/kenshinji) 阮一峰我推荐的仅限于他的ES6教程。","createdAt":1557222101395},{"id":12663,"originId":"5cda542ed5fff6772a2fe82d","articleId":2650,"userId":546,"content":"[@libook](/user/libook) 有见地","createdAt":1557812270037},{"id":12664,"originId":"5cda91fc518e0954fc40e37d","articleId":2650,"userId":1218,"content":"强烈推荐狼叔的 https://github.com/i5ting/How-to-learn-node-correctly\r\n","createdAt":1557828092765},{"id":12665,"originId":"5cda957f518e0954fc40e3ba","articleId":2650,"userId":1922,"content":"书不在多，而在精，有几本实用的就行。\r\nmysql的话，如果有关系型数据库的基础的花，学习起来还是比较容易。\r\n我也刚开始学习。","createdAt":1557828991007},{"id":12666,"originId":"5cffc45395fcc914aa267db5","articleId":2650,"userId":1661,"content":"还好","createdAt":1560265811178},{"id":12667,"originId":"5d45addfbf26dc7fc5337373","articleId":2650,"userId":3718,"content":"[@im-here](/user/im-here) ","createdAt":1564847583616},{"id":12668,"originId":"5d492f2cbf26dc7fc5337d96","articleId":2650,"userId":3719,"content":"\r\n                   .-' _..`.\r\n                  /  .'_.'.'\r\n                 | .' (.)`.\r\n                 ;'   ,_   `.\r\n .--.__________.'    ;  `.;-'\r\n|  ./               /\r\n|  |               / \r\n`..'`-._  _____, ..'\r\n     / | |     | |\\ \\\r\n    / /| |     | | \\ \\\r\n   / / | |     | |  \\ \\\r\n  /_/  |_|     |_|   \\_\\\r\n |__\\  |__\\    |__\\  |__\\","createdAt":1565077292323},{"id":12669,"originId":"5d493c274f472f7fee152fb3","articleId":2650,"userId":545,"content":"https://docs.nestjs.cn/6/awesome  这里有","createdAt":1565080615733},{"id":12670,"originId":"5d4a2699697873456c6bb737","articleId":2650,"userId":3720,"content":"![1.jpg](//static.cnodejs.org/FlhehL14CvR_yqX1SwP63Cp1_ykj)","createdAt":1565140633982},{"id":12671,"originId":"5d4a34f412a0194544414cda","articleId":2650,"userId":1664,"content":"[@libook](/user/libook) 那应该学得比较扎实了，我当初实习在小公司直接喊我徒手撕代码，第一个登录页面做了一个星期，后面速度越来越快，最后一个月完成了一个项目吧。\r\n反倒是现在重新想用好比较困难。","createdAt":1565144308715},{"id":12672,"originId":"5d4bfc0d697873456c6bbfb4","articleId":2650,"userId":356,"content":"你到底是多懒，不愿意查资料","createdAt":1565260813881},{"id":12673,"originId":"5d4d338812a01945444158b2","articleId":2650,"userId":3721,"content":"m","createdAt":1565340552168},{"id":12674,"originId":"5d790cd6d50f572345913bf6","articleId":2650,"userId":804,"content":"资料很多，看你会不会找","createdAt":1568214230055},{"id":12675,"originId":"5d7f007195464514f7ed7256","articleId":2650,"userId":1644,"content":"想快点出效果就搜 \"xxx 实战\"，如果想打基础，就搜 \"深入浅出 xxx\"。或者两者结合，慢慢就行了","createdAt":1568604273629},{"id":12676,"originId":"5d7f84b0cac77d1859937134","articleId":2650,"userId":1980,"content":"我能分享下自己学习的路程，**看文档，看文档，看文档** 边看边写代码","createdAt":1568638128878},{"id":12677,"originId":"5da86d57865a9844a301c20e","articleId":2650,"userId":790,"content":"百度一下，很多的","createdAt":1571319127598},{"id":12678,"originId":"5da91132865a9844a301c28f","articleId":2650,"userId":189,"content":"资料很多 分享套不错的入门教程你  网盘地址： [https://pan.baidu.com/s/1O2C6TolDzYpMnKIfQaaqog](https://pan.baidu.com/s/1O2C6TolDzYpMnKIfQaaqog)","createdAt":1571361074741},{"id":12679,"originId":"5da8568e865a9844a301c1ce","articleId":2651,"userId":99,"content":"用Elasticsearch全文搜索引擎  https://www.itying.com/goods-1068.html","createdAt":1571313294970},{"id":12680,"originId":"5da91565865a9844a301c2b1","articleId":2653,"userId":545,"content":"vue 使用  nuxt.js ，同时支持 SPA 和 SSR ，对首屏做了优化。\r\nangular 有自带的 ssr 渲染。\r\nreact 使用  next.js， 同时支持 SPA 和 SSR ，对首屏做了优化。","createdAt":1571362149106},{"id":12681,"originId":"5da919f7ece3813ad9ba2998","articleId":2653,"userId":26,"content":"  1. 不管用什么，只要是需要展示的一般都是`服务端渲染`为好，就是浏览器得到的是渲染好的文档，而少用xhr请求并在客户端渲染\r\n  2. 后台管理一般作为`应用`概念，不应该考虑seo，可以看作是增强交互的app。\r\n  3. 首屏加载速度慢一般是SPA模式下的问题，但仅仅是为了这个东西，完全没有必要，因为这`app`经过缓存等，速度并不会差，不值得换一个SSR的开发架构，且只要是SPA，肯定就是前后端分离的，做SSR就只剩可能会提升的渲染速度，而对seo的优化，不是一回事。    \r\n\r\n所以就看需求，做**网站**还是最好往`服务端渲染`方向走（webpack、模板、和你爱的js框架以及可能会用到的服务端渲染的模式），而且不要认为SPA改为SSR认为是什么都能解决的，而做**应用**，就可以自由一些，并且推荐用js框架和SPA模式。    \r\n以上纯属个人瞎掰。","createdAt":1571363319296},{"id":12682,"originId":"5da95102865a9844a301c3cf","articleId":2653,"userId":1899,"content":"[@zuohuadong](/user/zuohuadong)  谢谢你的回复，很经典","createdAt":1571377410234},{"id":12683,"originId":"5da95574ece3813ad9ba2ab2","articleId":2653,"userId":1899,"content":"[@HobaiRiku](/user/HobaiRiku)  我现在做网站是使用node作为服务器渲染好页面，node 去请求服务端接口，然后渲染页面，","createdAt":1571378548243},{"id":12684,"originId":"5da98789ece3813ad9ba2c69","articleId":2653,"userId":1655,"content":"asp \r\njsp","createdAt":1571391369245},{"id":12685,"originId":"5dae6559ece3813ad9ba3448","articleId":2653,"userId":99,"content":"php  jsp   asp   等","createdAt":1571710297871},{"id":12686,"originId":"5dae64dc865a9844a301ccd3","articleId":2654,"userId":1547,"content":"sharp 也挺好用的","createdAt":1571710172298},{"id":12687,"originId":"5da97cae865a9844a301c4eb","articleId":2655,"userId":1713,"content":"redis","createdAt":1571388590326},{"id":12688,"originId":"5da98697865a9844a301c519","articleId":2655,"userId":1655,"content":"redis\r\n","createdAt":1571391127938},{"id":12689,"originId":"5dae563fece3813ad9ba33cb","articleId":2655,"userId":755,"content":"+1","createdAt":1571706431335},{"id":12690,"originId":"5dad8a5c865a9844a301cb93","articleId":2656,"userId":98,"content":"pkg 打包的吧","createdAt":1571654236880},{"id":12691,"originId":"5dad9594865a9844a301cbb1","articleId":2656,"userId":3562,"content":"[@zengming00](/user/zengming00) 感谢您的回复，目前选择nodec尝试一下","createdAt":1571657108841},{"id":12692,"originId":"5dad9ab8865a9844a301cbc8","articleId":2656,"userId":3562,"content":"补充：https://github.com/pmq20/node-packer","createdAt":1571658424330},{"id":12693,"originId":"5d1c4bc7cdb1f967c1577ed3","articleId":2657,"userId":1905,"content":"是html5的WebComponent的吧 \r\nyoutube也用了 \r\n\r\nhttps://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_shadow_DOM","createdAt":1562135495866},{"id":12694,"originId":"5d1dd33fad75d374b58bc61f","articleId":2657,"userId":1741,"content":"```css\r\n.play-fn .fn-panel {\r\n    display: none;\r\n}\r\n.play-fn>li:hover .fn-panel {\r\n    display: block;\r\n}\r\n```\r\n","createdAt":1562235711551},{"id":12695,"originId":"5dad393bece3813ad9ba313b","articleId":2657,"userId":630,"content":"[@dislido](/user/dislido) [@predatorL](/user/predatorL) \r\n谢谢。很长时间没来了","createdAt":1571633467681},{"id":12696,"originId":"5daa9defece3813ad9ba2dc6","articleId":2659,"userId":3399,"content":"~~~\r\n$ mongo test\r\nMongoDB shell version: 3.2.10\r\nconnecting to: test\r\n>\r\n> db.test.insertOne({ x: 0.1 })\r\n{\r\n    \"acknowledged\" : true,\r\n    \"insertedId\" : ObjectId(\"588a3f711554cc7d70642fa1\")\r\n}\r\n> db.test.updateOne({}, { $inc: { x: 0.2 } })\r\n{ \"acknowledged\" : true, \"matchedCount\" : 1, \"modifiedCount\" : 1 }\r\n> db.test.findOne()\r\n{ \"_id\" : ObjectId(\"588a3f711554cc7d70642fa1\"), \"x\" : 0.30000000000000004 }\r\n>\r\n\r\n~~~","createdAt":1571462639410},{"id":12697,"originId":"5daa9e5d865a9844a301c64d","articleId":2659,"userId":3399,"content":"~~~\r\n$ node\r\n> 0.1\r\n0.1\r\n> 0.2\r\n0.2\r\n> 0.1 * 0.2\r\n0.020000000000000004\r\n> 0.1 * 0.1\r\n0.010000000000000002\r\n>\r\n\r\n\r\n~~~","createdAt":1571462749186},{"id":12698,"originId":"5daaa13cece3813ad9ba2dd5","articleId":2659,"userId":3399,"content":"https://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-decimal.html","createdAt":1571463484029},{"id":12699,"originId":"5daaa14fece3813ad9ba2dd8","articleId":2659,"userId":3399,"content":"http://adripofjavascript.com/blog/drips/avoiding-problems-with-decimal-math-in-javascript.html","createdAt":1571463503197},{"id":12700,"originId":"5dab06c9ece3813ad9ba2ea1","articleId":2659,"userId":109,"content":"IEEE 764","createdAt":1571489481298},{"id":12701,"originId":"5dac60b3ece3813ad9ba2fb8","articleId":2659,"userId":3399,"content":"[@waitingsong](/user/waitingsong) 你们是怎么解决呢？","createdAt":1571578035098},{"id":12702,"originId":"5dac632e865a9844a301c810","articleId":2659,"userId":21,"content":"[@yhj8899](/user/yhj8899) 我这边数据库都是存的整数，用的时候除以100","createdAt":1571578670129},{"id":12703,"originId":"5dad1aecece3813ad9ba30d4","articleId":2659,"userId":133,"content":"bignumber.js","createdAt":1571625708101},{"id":12704,"originId":"5da14f60865a9844a301acad","articleId":2660,"userId":1655,"content":"1\r\n","createdAt":1570852704628},{"id":12705,"originId":"5da14f62865a9844a301acb0","articleId":2660,"userId":1655,"content":"1","createdAt":1570852706694},{"id":12706,"originId":"5da14f64ece3813ad9ba1419","articleId":2660,"userId":1655,"content":"1","createdAt":1570852708276},{"id":12707,"originId":"5da14f65865a9844a301acb4","articleId":2660,"userId":1655,"content":"1","createdAt":1570852709670},{"id":12708,"originId":"5da14f67865a9844a301acb7","articleId":2660,"userId":1655,"content":"1","createdAt":1570852711248},{"id":12709,"originId":"5da14f68865a9844a301acb9","articleId":2660,"userId":1655,"content":"1","createdAt":1570852712706},{"id":12710,"originId":"5da14f6aece3813ad9ba141c","articleId":2660,"userId":1655,"content":"1","createdAt":1570852714191},{"id":12711,"originId":"5da14f6b865a9844a301acbd","articleId":2660,"userId":1655,"content":"1","createdAt":1570852715701},{"id":12712,"originId":"5da14f6d865a9844a301acbf","articleId":2660,"userId":1655,"content":"1","createdAt":1570852717108},{"id":12713,"originId":"5da14f6e865a9844a301acc2","articleId":2660,"userId":1655,"content":"1","createdAt":1570852718509},{"id":12714,"originId":"5da14f6f865a9844a301acc5","articleId":2660,"userId":1655,"content":"1","createdAt":1570852719944},{"id":12715,"originId":"5da15585ece3813ad9ba1440","articleId":2660,"userId":98,"content":"有多次调用res.send之类的方法就会出现这种","createdAt":1570854277072},{"id":12716,"originId":"5da158f7ece3813ad9ba1447","articleId":2660,"userId":1655,"content":"[@zengming00](/user/zengming00) 那意思是报错的这个地方之前还调用了一次send之类的方法么。但是并没有额","createdAt":1570855159895},{"id":12717,"originId":"5da15d2eece3813ad9ba1456","articleId":2660,"userId":98,"content":"[@xulayen](/user/xulayen) 仔细查查，肯定有，或者不是在之前而是在之后","createdAt":1570856238018},{"id":12718,"originId":"5da167d1ece3813ad9ba146c","articleId":2660,"userId":1655,"content":"[@zengming00](/user/zengming00) \r\n\r\n[JSBIN](https://jsbin.com/xunututehi/edit?js)https://jsbin.com/xunututehi/edit?js\r\n\r\n\r\n``` js\r\nreturn res.redirect(_forword); //这句话 偶尔报错，但是之前之后也没有 res.send之类的操作\r\n\r\n```","createdAt":1570858961181},{"id":12719,"originId":"5da18e3cece3813ad9ba1588","articleId":2660,"userId":886,"content":"你的catch里面有没有返回呢？  如果有错误了，最后还会走finally","createdAt":1570868796725},{"id":12720,"originId":"5da3d074865a9844a301b09d","articleId":2660,"userId":1655,"content":"[@shadow88sky](/user/shadow88sky)  ![image.png](//static.cnodejs.org/FrocJ0hmD5SVZDMvExuGWuCmWv-B)\r\n\r\n图上是源码 705行。\r\n\r\n这个，在生产环境下有时候也会出现 这个错\r\n\r\n``` js\r\n\r\nError [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client\r\n    at ServerResponse.setHeader (_http_outgoing.js:470:11)\r\n    at ServerResponse.header (/mnt/www/pgyer/nodejs-middle/node_modules/express/lib/response.js:771:10)\r\n    at ServerResponse.append (/mnt/www/pgyer/nodejs-middle/node_modules/express/lib/response.js:732:15)\r\n    at ServerResponse.res.cookie (/mnt/www/pgyer/nodejs-middle/node_modules/express/lib/response.js:857:8)\r\n    at Request.cookie [as _callback] (/mnt/www/pgyer/nodejs-middle/server/api/admin/account/index.js:705:17)\r\n    at Request.self.callback (/mnt/www/pgyer/nodejs-middle/node_modules/request/request.js:185:22)\r\n    at Request.emit (events.js:198:13)\r\n    at Request.<anonymous> (/mnt/www/pgyer/nodejs-middle/node_modules/request/request.js:1161:10)\r\n    at Request.emit (events.js:198:13)\r\n    at IncomingMessage.<anonymous> (/mnt/www/pgyer/nodejs-middle/node_modules/request/request.js:1083:12)\r\n    at Object.onceWrapper (events.js:286:20)\r\n    at IncomingMessage.emit (events.js:203:15)\r\n    at endReadableNT (_stream_readable.js:1129:12)\r\n    at process._tickCallback (internal/process/next_tick.js:63:19)\r\n\r\n```","createdAt":1571016820982},{"id":12721,"originId":"5da3d8e5ece3813ad9ba1808","articleId":2660,"userId":158,"content":"请确保这些设置在 send之前\r\n只要发送 send执行过一次，再涉及到 set cookie、set header这种设置 http head 部分的都会报错","createdAt":1571018981805},{"id":12722,"originId":"5da3e5cb865a9844a301b122","articleId":2660,"userId":187,"content":"send只能发送一次吧，write可以多次","createdAt":1571022283765},{"id":12723,"originId":"5da4314c865a9844a301b2b8","articleId":2660,"userId":1655,"content":"[@zhhb](/user/zhhb) 是在send之前，现在又出现了一次","createdAt":1571041612199},{"id":12724,"originId":"5da43157865a9844a301b2bd","articleId":2660,"userId":1655,"content":"[@zhhb](/user/zhhb) ![image.png](//static.cnodejs.org/FuC9TIS_7jx2XXpx_scXZ2MT0wlw)\r\n","createdAt":1571041623865},{"id":12725,"originId":"5da43209ece3813ad9ba19d7","articleId":2660,"userId":1655,"content":"[@zhhb](/user/zhhb) \r\n\r\n![image.png](//static.cnodejs.org/FgEd5olaVSIOdrDh4Xzwj_H51Yfn)\r\n这句话之前没有任何 set cookie、set header 的操作了","createdAt":1571041801524},{"id":12726,"originId":"5da43414865a9844a301b2cb","articleId":2660,"userId":1655,"content":"[@zhhb](/user/zhhb) \r\n这里用了一个异步promise ，报错好像是报这个promie有问题。\r\n``` js\r\n\r\nrouter.get('/:customerid/:accode/:timestamp/:sign', async function (req, res, next) {\r\n\r\n                var reply = await client.get(`${key}`);\r\n            ...\r\n                    return res.redirect(reply);\r\n     ...\r\n\r\n});\r\n\r\n\r\n```\r\n\r\n下面是promise功能代码，看下是哪里没有捕获promise异常？\r\n\r\n\r\n``` js\r\n\r\n\r\nconst config = require('../../config/index');\r\nvar redis = require(\"redis\"),\r\n    client = redis.createClient(config.redis);\r\n\r\n\r\nclient.on(\"error\", function (err) {\r\n    console.log(\"Error \" + err);\r\n});\r\n\r\nclient.on('ready', function (res) {\r\n    console.log('redis is ready,Go!');\r\n});\r\n\r\nfunction clientCache() { }\r\n\r\nlet text = async (key) => {\r\n    let doc = await new Promise((resolve) => {\r\n        // setTimeout(() => {\r\n        //     Promise.reject(new Error('unhandledrejection'))\r\n        // }, 0);\r\n        client.get(key, function (err, res) {\r\n            return resolve(res);\r\n        });\r\n    }).catch((e) => {\r\n        console.log(e)\r\n    });\r\n    return JSON.parse(doc);\r\n\r\n};\r\n\r\nclientCache.set = function (key, value) {\r\n    value = JSON.stringify(value);\r\n    return client.set(key, value, function (err) {\r\n        if (err) {\r\n            console.error(err);\r\n        }\r\n    });\r\n};\r\n\r\nclientCache.get = async (key) => {\r\n    return await text(key);\r\n};\r\n\r\nclientCache.expire = function (key, time) {\r\n    return client.expire(key, time);\r\n};\r\n\r\n\r\nmodule.exports = exports = clientCache;\r\n\r\n```","createdAt":1571042324368},{"id":12727,"originId":"5da67355ece3813ad9ba202c","articleId":2660,"userId":1655,"content":"[@shadow88sky](/user/shadow88sky)  [@zengming00](/user/zengming00) [@zhhb](/user/zhhb) [@ounana](/user/ounana)  大神们，帮我看看什么问题么\r\n","createdAt":1571189589128},{"id":12728,"originId":"5da715caece3813ad9ba22e2","articleId":2660,"userId":21,"content":"你看一下请求的返回头是不是开启了keep-alive。因为node服务端keepalive的超时默认是5000毫秒，要不把服务端默认时间改大，要不把客户端keepalive时间改小。否则客户端超时大于服务端，服务端TCP关了，但是客户端还以为这个TCP还在，准备复用也会报这个错。","createdAt":1571231178442},{"id":12729,"originId":"5da98299865a9844a301c507","articleId":2660,"userId":1655,"content":"[@zy445566](/user/zy445566) 没有开启呢","createdAt":1571390105393},{"id":12730,"originId":"5da98391ece3813ad9ba2c48","articleId":2660,"userId":1655,"content":"[@zy445566](/user/zy445566) \r\n报错信息：\r\n``` js\r\n/mnt/www/pgyer/nodejs-middle/server/api/frontEnd/forword/index.js:163:40 代码就是下面的 return res.redirect(_forword);\r\n\r\nError [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client at ServerResponse.setHeader (_http_outgoing.js:470:11) \r\nat ServerResponse.header (/mnt/www/pgyer/nodejs-middle/node_modules/express/lib/response.js:771:10) at ServerResponse.location (/mnt/www/pgyer/nodejs-middle/node_modules/express/lib/response.js:888:15) \r\nat ServerResponse.redirect (/mnt/www/pgyer/nodejs-middle/node_modules/express/lib/response.js:926:18) \r\nat Request.redirect [as _callback] (/mnt/www/pgyer/nodejs-middle/server/api/frontEnd/forword/index.js:163:40) \r\nat Request.self.callback (/mnt/www/pgyer/nodejs-middle/node_modules/request/request.js:185:22)\r\nat Request.emit (events.js:198:13) at Request. (/mnt/www/pgyer/nodejs-middle/node_modules/request/request.js:1161:10) \r\nat Request.emit (events.js:198:13) at IncomingMessage. (/mnt/www/pgyer/nodejs-middle/node_modules/request/request.js:1083:12)\r\nat Object.onceWrapper (events.js:286:20) at IncomingMessage.emit (events.js:203:15) at endReadableNT (_stream_readable.js:1129:12)\r\nat process._tickCallback (internal/process/next_tick.js:63:19)\r\n\r\n```\r\n\r\n源码：\r\n## 这是/redis/index.js\r\n``` js\r\n\r\nconst config = require('../../config/index');\r\n\r\nvar redis = require(\"redis\"),\r\n    client = redis.createClient({\r\n        ...config.redis\r\n    });\r\n\r\n\r\nclient.on(\"error\", function (err) {\r\n    console.error(\"Errorssss \" + JSON.stringify(err));\r\n});\r\n\r\nclient.on('ready', function (res) {\r\n    console.log('redis is ready,Go!');\r\n});\r\n\r\n\r\n\r\nfunction clientCache() { }\r\n\r\n\r\n\r\n\r\nlet text = async (key) => {\r\n    let doc = await new Promise((resolve, reject) => {\r\n        client.get(key, function (err, res) {\r\n            if (err) {\r\n                console.log(err);\r\n                reject(err);\r\n                return;\r\n            }\r\n            return resolve(res);\r\n        });\r\n    }).catch((e) => {\r\n        debugger;\r\n        console.error(e);\r\n    });\r\n\r\n    return doc ? JSON.parse(doc) : null;\r\n\r\n};\r\n\r\nclientCache.set = function (key, value) {\r\n    value = JSON.stringify(value);\r\n    return client.set(key, value, function (err) {\r\n        if (err) {\r\n            console.error(err);\r\n            client = redis.createClient({\r\n                ...config.redis\r\n            });\r\n            return clientCache.set(key, value);\r\n        }\r\n    });\r\n};\r\n\r\nclientCache.get = async (key) => {\r\n    // client = redis.createClient({\r\n    //     ...config.redis\r\n    // });\r\n    return await text(key);\r\n};\r\n\r\nclientCache.expire = function (key, time) {\r\n    return client.expire(key, time);\r\n};\r\n\r\n\r\nmodule.exports = exports = clientCache;\r\n```\r\n## 这是/forword/index.js\r\n``` js\r\n\r\nconst Express = require('express');\r\nconst router = Express.Router();\r\n// const codeState = require('../../../config/codeState');\r\n// const result = require('../../../config/index').result;\r\n// const token = require('../../../common/token');\r\n\r\nconst {\r\n    config,\r\n    SelfCookie,\r\n    codeState,\r\n    result,\r\n    log,\r\n    token,\r\n    HttpApi,\r\n    Client,\r\n    DEBUGGER,\r\n    ResultFactory\r\n} = require('../../../namespaceMain');\r\n\r\nconst request = require('request');\r\n\r\nconst md5 = require('md5');\r\n\r\nconst client = require(\"../../../common/redis\");\r\n\r\n/**\r\n * @api {get} /forword/[customerid]/[accode]/[timestamp]/[sign] 前端分流管理✔\r\n * @apiDescription 前端主入口\r\n * @apiVersion 1.0.0\r\n * @apiSuccessExample {json}\r\n *      Success-Response:\r\n *      跳转至前端活动页面……\r\n * \r\n * @apiErrorExample {json} \r\n *      Error-Response:\r\n *      跳转至前端Error页面……\r\n * \r\n * @apiGroup FrontEnd\r\n * @apiParam {string} customerid  客户编号\r\n * @apiParam {string} accode 数码\r\n * @apiParam {string} timestamp 时间戳\r\n * @apiParam {string} sign 签名,加密方式`md5(customerid+accode+token+timestamp)`；token为约定的值\r\n */\r\nrouter.get('/:customerid/:accode/:timestamp/:sign', async function (req, res, next) {\r\n\r\n    try {\r\n        debugger;\r\n\r\n        const _result = '网络出了个小差……';\r\n\r\n        console.log(`/:customerid/:accode/:timestamp/:sign ${JSON.stringify(req.params)}`);\r\n\r\n        var _customerid = req.params.customerid,\r\n\r\n            _accode = req.params.accode,\r\n\r\n            __header_sign = req.params.sign,\r\n\r\n            __timestamp = req.params.timestamp,\r\n\r\n            __sign = md5(_customerid + _accode + config.ZhshToNodejsToken[_customerid] + __timestamp),\r\n\r\n            _param_notnull = (_customerid && _accode && __header_sign),\r\n\r\n            _b_tokenisok = (__sign === __header_sign),\r\n\r\n            _code_sign = `${_customerid}_${_accode}_${__timestamp}_${__sign}`;\r\n\r\n\r\n        log.logger.info(`/:customerid/:accode/:timestamp/:sign /${_customerid}/${_code_sign}/${__timestamp}/${__sign} SessionId: ${req.session.id}  GetParameter: \\n `);\r\n\r\n        console.log(`/forword/index - /${_customerid}/${_code_sign}/${__timestamp}/${__sign} SessionId: ${req.session.id}`);\r\n\r\n        if (!config.EnableZhshToNodejsToken) {\r\n\r\n            _param_notnull = (_customerid && _accode);\r\n\r\n            _b_tokenisok = true;\r\n        }\r\n\r\n        const key = `forword:${_customerid}:${_accode}`;\r\n\r\n        const key_info = `forword:${_customerid}:actinfo:${_code_sign}`;\r\n\r\n        if (!_param_notnull) {\r\n            log.logger.info('/forword/index 参数为空或值错误' + \"\\n\");\r\n            console.log('/forword/index 参数为空或值错误' + \"\\n\");\r\n            return res.send(_result);\r\n        }\r\n\r\n        if (!_b_tokenisok) {\r\n            log.logger.info('/forword/index  签名校验不成功' + \"\\n\");\r\n            console.log('/forword/index  签名校验不成功' + \"\\n\");\r\n            return res.send(_result);\r\n        }\r\n\r\n        console.time('/forword/index');\r\n\r\n        var reply = await client.get(`${key}`);\r\n\r\n        if (reply) {\r\n\r\n            console.log(`/forword/index - 已缓存 ${JSON.stringify(reply)}`);\r\n\r\n            console.timeEnd('/forword/index');\r\n\r\n            return res.redirect(reply);\r\n\r\n        } else {\r\n\r\n\r\n            var _f = {\r\n                customerid: _customerid,\r\n                accode: _code_sign\r\n            }\r\n\r\n            log.logger.info('/forword/index SessionId:' + req.session.id + ' Begin:', JSON.stringify(_f) + \"\\n\");\r\n\r\n            request({\r\n                url: HttpApi.Home.Index,\r\n                method: \"POST\",\r\n                json: true,\r\n                headers: {\r\n                    \"content-type\": \"application/json\",\r\n                    \"Authorization\": req.session.Authorization\r\n                },\r\n                form: _f\r\n            }, function (error, response, body) {\r\n\r\n                //log.logger.info(JSON.parse(body)+ \"\\n\");\r\n\r\n                var str_body = JSON.stringify(body);\r\n\r\n                log.logger.info('/forword/index SessionId:' + req.session.id + ' End:', str_body + \"\\n\");\r\n\r\n                console.timeEnd('/forword/index');\r\n\r\n                console.log(`/forword/index - Response：${str_body}`);\r\n\r\n                if (body.success) {\r\n\r\n                    if (body.result && body.result.module && body.result.module.template && body.result.module.template.url && body.result.module.id) {\r\n\r\n                        var _type = body.result.module.template.url;\r\n\r\n                        var _moduleid = body.result.module.id;\r\n\r\n                        var _forword = `${config.FrontendToDomain}${_type}${_customerid}/${_moduleid}/${_code_sign}`;\r\n                        \r\n                        client.set(`${key}`, _forword, 'EX', (60 * 1 * 30));//30 分钟失效\r\n\r\n                        client.set(`${key_info}`, str_body, 'EX', (60 * 1 * 30));//30 分钟失效\r\n\r\n                         return res.redirect(_forword);//这句话报错\r\n\r\n                    } else {\r\n\r\n                        log.logger.info('/forword/index  模块未配置成功！' + \"\\n\");\r\n                        console.log('/forword/index  模块未配置成功！' + \"\\n\");\r\n                        return res.send(_result);\r\n\r\n                    }\r\n\r\n                } else {\r\n\r\n                    log.logger.info('/forword/index 返回 false' + \"\\n\");\r\n                    console.log('/forword/index 返回 false' + \"\\n\");\r\n                    return res.send(_result);\r\n\r\n                }\r\n\r\n\r\n            });\r\n\r\n\r\n        }\r\n\r\n    } catch (e) {\r\n\r\n        console.error('00000000000000000000000000000000');\r\n        console.error(JSON.stringify(e));\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = router;\r\n\r\n```","createdAt":1571390353813},{"id":12731,"originId":"5da9875a865a9844a301c52d","articleId":2660,"userId":1259,"content":"你是不是后面还有啥中间建执行了？","createdAt":1571391322293},{"id":12732,"originId":"5dad0a67865a9844a301c89c","articleId":2660,"userId":1655,"content":"[@heguangda](/user/heguangda) 后面没有中间件执行，前面有中间件","createdAt":1571621479492},{"id":12733,"originId":"5da9b4cc865a9844a301c592","articleId":2661,"userId":1741,"content":"保持连接","createdAt":1571402956168},{"id":12734,"originId":"5daaed17865a9844a301c6cc","articleId":2661,"userId":21,"content":"在HTTP1.0和HTTP1.1协议中都有对KeepAlive的支持。其中HTTP1.0需要在request中增加“Connection： keep-alive” header才能够支持，而HTTP1.1默认支持","createdAt":1571482903862},{"id":12735,"originId":"5da6f8eaece3813ad9ba22b7","articleId":2662,"userId":109,"content":"```\r\nconst ab = new Int8Array(b)\r\n```\r\nref: http://es6.ruanyifeng.com/#docs/arraybuffer\r\n","createdAt":1571223786670},{"id":12736,"originId":"5da7cf59ece3813ad9ba23fc","articleId":2662,"userId":1378,"content":"[@waitingsong](/user/waitingsong) 非常感谢大侠帮忙 : )","createdAt":1571278681233},{"id":12737,"originId":"5da83ce2ece3813ad9ba278c","articleId":2662,"userId":109,"content":"不客气～","createdAt":1571306722756},{"id":12738,"originId":"5daa8f34ece3813ad9ba2db3","articleId":2662,"userId":610,"content":"[@waitingsong](/user/waitingsong) 数组里的元素最大值超过128呢","createdAt":1571458868273},{"id":12739,"originId":"5daac38cece3813ad9ba2e1b","articleId":2662,"userId":109,"content":"`UInt8Array`, `Int32Array`, `UInt32Array`, `Float64Array` 挑一个","createdAt":1571472268390},{"id":12740,"originId":"5c1dd4883898674067a77155","articleId":2664,"userId":3730,"content":"你可以通过puppeteer访问需要获取cookie的地址发，然后拿到cookie后，写到要设置的地址下就可以了\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1545458824172},{"id":12741,"originId":"5c1df19b3898674067a771f2","articleId":2664,"userId":3729,"content":"[@bWhirring](/user/bWhirring) 我是希望的可以直接使用chrome浏览器的本地cookies，你说的这种方法有点复杂，不过还是谢谢你的解答","createdAt":1545466267270},{"id":12742,"originId":"5c1df1da3898674067a771f6","articleId":2664,"userId":3729,"content":"已经找到方法了，解决方式[查看详情](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#Mac-OS-X) (可能需要翻墙)","createdAt":1545466330311},{"id":12743,"originId":"5c1df1da3898674067a771f8","articleId":2664,"userId":3729,"content":"已经找到方法了，解决方式[查看详情](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#Mac-OS-X) (可能需要翻墙)","createdAt":1545466330418},{"id":12744,"originId":"5da9807fece3813ad9ba2c30","articleId":2664,"userId":3731,"content":"[@NanShanJi](/user/NanShanJi)\r\n你好\r\n   我通过设置 `userDataDir` 来进行免登陆，依旧无法显示已登录。\r\n   通过在chrome地址栏输入`chrome://version/`找到的地址。\r\n   \r\n     我通过查看你上面提供的链接，也是提供如何找到地址，不知你是如何处理的","createdAt":1571389567675},{"id":12745,"originId":"5a6935f59288dc8153288164","articleId":2665,"userId":358,"content":"https://nodejs.org/api/cluster.html#cluster_how_it_works","createdAt":1516844533147},{"id":12746,"originId":"5a693ac39288dc815328816f","articleId":2665,"userId":3733,"content":"1. web 应用层的开发，几乎用不到多进程的。\r\n2. 除去功能设计上的需要，这个后面说，多进程主要作用是“运用系统资源，特别是 CPU 多核资源”。node 单个进程是无法在多个 CPU 核调度运算。这种情况下，最简单的方式就是多个进程。但是话又说回来，多个进程这种事，也完全不需要在代码中自己去做 fork ，在上层应用层面多启几个实例就好了（ node start.js --port=8000, node start.js --port=8001 这种）。\r\n3. 非 web 应用层开发领域，多进程一方面是功能设计上的需要，比如要并行计算（考虑你完全要自己做一个体系，不像 web 应用有一些上下层工具给你用）。另一方面，就是进程 daemon 化本身的实现。在操作系统中，只说 Linux 吧，其它系统我也不清楚细节，任何程序启动之后，都是在当前的“前台”的，你想把这个程序放到当前的“后台”，那么启动过程需要 fork 2次（比较常用的作法），这个部分涉及多进程，所以如果你需要做一些监控类的工具，或者并不是那么通用化的 server 端程序，可能也需要自己处理这些细节（至于为什么要 fork 2次，随便一搜都能找到了，比如 http://blog.chinaunix.net/uid-27105712-id-3356916.html  ）","createdAt":1516845763664},{"id":12747,"originId":"5a693e4a9288dc8153288179","articleId":2665,"userId":3732,"content":"[@atian25](/user/atian25) 谢谢大神回复\r\n\r\n现在用到 puppeteer 来做测试平台，场景如下: 我要每分钟查一次表 `report_list` 中 status=1 的字段来得到数据，根据得到的一串数据（比如10条），执行一次计算（跑一遍puppeteer，然后截图，并且上传到 CDN，这个过程要1分钟左右，10条就是10分钟），然后把得到的 CDN地址存入另一张表，同时把`report_list`中这条记录status置为0.\r\n\r\n我的思路卡在：在 schedule 中每分钟查库，然后执行命令，但是这个命令（可能会10分钟），这样就会每分钟开启一个10分钟的任务，这样对么？不知道这种情况应该怎么设计，是要运用到 cluster 么","createdAt":1516846666486},{"id":12748,"originId":"5a693ebd9288dc815328817b","articleId":2665,"userId":3732,"content":"[@yszou](/user/yszou) 请看看我上面补充的描述，这种场景下我该怎么设计","createdAt":1516846781572},{"id":12749,"originId":"5a69477d9d371d4a059eee02","articleId":2665,"userId":358,"content":"- `cluster` 底层就是 `child_process`\r\n- master 进程做中控，启动 1 个 agent 和 n 个 worker\r\n- agent 来做任务调度，跟数据库交互来获取任务，并分配给某个空闲的 worker 来做\r\n- worker 就是 cluster 出来的。\r\n","createdAt":1516849021059},{"id":12750,"originId":"5a695c28ce45d44045146352","articleId":2665,"userId":3733,"content":"[@riskers](/user/riskers) \r\n\r\n是我做的话，我不会自己去做 fork 的。\r\n\r\n我只写一个程序，这个程序做的事，首先，这个程序自带 timer （ nodejs 已经有了），然后，每 10 秒查一次库吧，不需要 1 分钟，因为查询成本不高，这个自己控制（因为自带 timer ，所以只要把异常处理好，这个程序可以一直运行的。有异常挂掉也没什么，外面还有专门的进程管理工具兜底）。每查一次库，只取一条 report 记录，并把它的 status 先改成 2 ，表示“正在处理之类”，这个 update 操作注意加锁，别让其它程序也查到同样的记录了（关系数据库基本功能）。同时可以在记录中加个属性，表示“开始处理的时间”，还可以加个属性，表示“处理程序的进程ID”。\r\n\r\n然后，这个程序开始做需要做的事，比如需要 1 分钟才能完成。正常结束之后，再 update 把 status 改成 0 。\r\n\r\n接着，找一个专门的进程管理工具，nodejs 的 PM2 （没用过，看介绍应该做进程管理用的）， Python 的 supervisor 等，根据机器的配置， CPU 核数，在不同机器上启动 N 个这个程序就好了。剩下的事进程管理工具会解决，记得做成随机器启动。\r\n\r\n再完善一点，可以再作一个专门的额外监控程序，每 1 分钟检查一下 report 记录的状态，通过“开始处理时间”判断一下，如果这个时间超过了 2 分钟，明显不正常了，那么通过 supervisor （我不知道 PM2 有没有） 的 RPC 接口，把对应的进程干掉，重启，对应 status 改成 1 。（这个额外的程序也可以加到进程管理工具的启动当中，即使没台机器都重复跑了一个这样的东西，也没有关系）\r\n\r\n简简单单的，这个小的程序你部署到几十台机器都没有问题。（当然，如何部署分发，是另一个话题了）","createdAt":1516854312302},{"id":12751,"originId":"5a696ac39d371d4a059eee0e","articleId":2665,"userId":89,"content":"你们说的已经很全了。我再补充个实践例子，比如webpack打包的时候，文件越多越慢，其实也可以利用这个机制来实现多进程打包的。ykit就是这样做的。","createdAt":1516858051068},{"id":12752,"originId":"5a696b159d371d4a059eee11","articleId":2665,"userId":3732,"content":"[@yszou](/user/yszou) 谢谢，因为是基于 eggjs 搞得，所以你说的这些操作我理解是不是能放在 agent.js 里去做。https://eggjs.org/zh-cn/core/cluster-and-ipc.html","createdAt":1516858133846},{"id":12753,"originId":"5a696f729d371d4a059eee15","articleId":2665,"userId":3733,"content":"[@riskers](/user/riskers) \r\n\r\n怎么写看你自己了吧。\r\n跟 web 没关系，跟 eggjs 也没有直接关系的。你写一个 worker.js 放到项目的任何一个地方就可以了，反正运行只是 ``node worker.js`` 就好了啊。","createdAt":1516859250835},{"id":12754,"originId":"5a69737c9288dc81532881b1","articleId":2665,"userId":861,"content":"[@riskers](/user/riskers) 三楼的就等于需要跑10个子进程，直接child\\_process.exec不好吗。。","createdAt":1516860284693},{"id":12755,"originId":"5da96eba865a9844a301c49b","articleId":2665,"userId":318,"content":"楼主的问题怎么解决的，多线程的问题先不说，\r\n\r\n如果每分钟开始一个新任务，任务周期都是10分钟，产生速率比消耗速率大，这样任务数量会越来越多吧，资源会被撑爆了对吗？","createdAt":1571385018274},{"id":12756,"originId":"5da807f6ece3813ad9ba25cc","articleId":2666,"userId":1737,"content":"js对象 key只能是String 丶symbol类型，其他类型，默认转string类型。 \r\n这种可以考虑Map","createdAt":1571293174700},{"id":12757,"originId":"5da809ad865a9844a301bf78","articleId":2666,"userId":2400,"content":"1楼正解","createdAt":1571293613477},{"id":12758,"originId":"5da80af7ece3813ad9ba2604","articleId":2666,"userId":1927,"content":"[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E6%A0%87%E5%87%86%E7%9A%84_%E5%AF%B9%E8%B1%A1_%E5%92%8C%E5%87%BD%E6%95%B0](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E6%A0%87%E5%87%86%E7%9A%84_%E5%AF%B9%E8%B1%A1_%E5%92%8C%E5%87%BD%E6%95%B0)","createdAt":1571293943734},{"id":12759,"originId":"5da80b65ece3813ad9ba261d","articleId":2666,"userId":3242,"content":"[@hyper-god](/user/hyper-god) 一楼丢了。。。不过我看到他说的了，确实正解，b的key实际上是一直是输出结果中的'[object Object]'，所以这个表现没错，同一个key，这里就变成：为什么对象不支持toString()方法，object.toString  = '[object Object]'，js提供JSON.stringify(object)将对象转换成字符串。。。","createdAt":1571294053922},{"id":12760,"originId":"5da80bd3865a9844a301bf9a","articleId":2666,"userId":3242,"content":"[@GaleLQ](/user/GaleLQ) 真一楼hah","createdAt":1571294163010},{"id":12761,"originId":"5da80c23ece3813ad9ba2624","articleId":2666,"userId":1927,"content":"我去找mdn去了哈哈","createdAt":1571294243489},{"id":12762,"originId":"5da80c39865a9844a301bfa5","articleId":2666,"userId":3242,"content":"[@pretty-foam](/user/pretty-foam) 嗯知道会默认转成字符串类型，但是不知道这里js默认的方法是toString()，而对象使用toString()只会等于‘[object Object]’","createdAt":1571294265173},{"id":12763,"originId":"5da83d6fece3813ad9ba279b","articleId":2666,"userId":109,"content":"用 Map 或者 Symbol ","createdAt":1571306863384},{"id":12764,"originId":"5da84445ece3813ad9ba27f5","articleId":2666,"userId":3242,"content":"[@waitingsong](/user/waitingsong) 现在是在对象里加了个uuid属性，然后以这个uuid做key，symbol今天看你们说我才查了下才知道原来ES6还有这个。。","createdAt":1571308613037},{"id":12765,"originId":"5da96974ece3813ad9ba2b7f","articleId":2666,"userId":109,"content":"[@SHocker-Yu](/user/SHocker-Yu) 你可以把 symbol 当成 uuid 来用。 前者设计的目的之一就是实现后者的功能。","createdAt":1571383668805},{"id":12766,"originId":"5da7b3d2ece3813ad9ba2332","articleId":2667,"userId":2003,"content":"你的redis服务启动了嘛？","createdAt":1571271634588},{"id":12767,"originId":"5da7d8c4865a9844a301be19","articleId":2667,"userId":3735,"content":"[@quanpf2481](/user/quanpf2481) 启动了呀，创建redis连接时可以成功执行命令。","createdAt":1571281092835},{"id":12768,"originId":"5da81558865a9844a301c00a","articleId":2667,"userId":3735,"content":"已解决。\r\nvar server = require('http').createServer(app);\r\nserver.setTimeout(0);","createdAt":1571296600409},{"id":12769,"originId":"5d78a418d50f572345913a77","articleId":2668,"userId":1664,"content":"找到方法了\r\n在hooks定义了之后，应当使model定义的属性timstamp为true。\r\n因为timestamp有两个作用：\r\n1.维护时间的两个字段created_at,updaed_at\r\n2.使用timestamp这个字段进行维护\r\n所以需要在hooks里面将timstamp的字段用bigint替换掉\r\n另外，所有存入毫秒时间的都应该使用bigint字段进行存储。","createdAt":1568187416260},{"id":12770,"originId":"5d85e35053c75a4136b4c5a4","articleId":2668,"userId":3457,"content":"[@oneWalker](/user/oneWalker)  大哥我需要请教个问题，sequelize按照egg官网引入后，定义model的时候也指定了autoIncrement，使用sequelize.model.sync()方法自动生成表， 但是seqelize.model.create()的时候却报错Duplicate entry '0' for key 'PRIMARY'，这是因为sequelize插入数据时主键并没有自增导致的，填充的一直都是0，请问你们是怎么解决的啊","createdAt":1569055568853},{"id":12771,"originId":"5da7d817865a9844a301bde9","articleId":2668,"userId":1664,"content":"[@gejigejigeji](/user/gejigejigeji) 可能现在回复的有点晚；主键定义了autoIncrement:true就会自增，还有就是你在插入的时候插入了主键值为0","createdAt":1571280919319},{"id":12772,"originId":"5da7def8865a9844a301be7c","articleId":2668,"userId":1664,"content":"[@gejigejigeji](/user/gejigejigeji) 对了。sync的时候你是不是没加参数，sequelize.model.sync()的时候要添加参数：force:true","createdAt":1571282680944},{"id":12773,"originId":"5d83501753c75a4136b4bcfb","articleId":2669,"userId":1936,"content":"beforeBulkCreate 的第一个参数 是个数组","createdAt":1568886807178},{"id":12774,"originId":"5d85e32b95464514f7ed8d12","articleId":2669,"userId":3457,"content":"[@MUHM](/user/MUHM) 大哥我需要请教个问题，sequelize按照egg官网引入后，定义model的时候也指定了autoIncrement，使用sequelize.model.sync()方法自动生成表， 但是seqelize.model.create()的时候却报错Duplicate entry '0' for key 'PRIMARY'，这是因为sequelize插入数据时主键并没有自增导致的，填充的一直都是0，请问你们是怎么解决的啊","createdAt":1569055531718},{"id":12775,"originId":"5da7d94cece3813ad9ba2487","articleId":2669,"userId":1664,"content":"[@MUHM](/user/MUHM) 嗯嗯 在github上面有人给出了解答，那如果需要维护时间挫的话，要把每个User作为数组里面的时间赋值一次","createdAt":1571281228074},{"id":12776,"originId":"5d9562ddece3813ad9b9fe92","articleId":2670,"userId":3,"content":"1、首先 SSR 是开源免费软件！\r\n2、别人辛辛苦苦开发了这些开源免费软件：ss、ssr、v2ray、vpn等等等等，你不但没有一点感谢，反而还去诋毁。一边享受开源软件，一边又去诋毁，站长快来把这帖子删了吧！！","createdAt":1570071261179},{"id":12777,"originId":"5da7d6c4865a9844a301bdd4","articleId":2670,"userId":230,"content":"### [express](https://bit.ly/2VJq7h1)可以的","createdAt":1571280580981},{"id":12778,"originId":"5da56783ece3813ad9ba1e04","articleId":2671,"userId":704,"content":"要看someAsyncOperation这个函数执行的时候吧 第二个输出才98ms比100ms少 就先执行了","createdAt":1571121027942},{"id":12779,"originId":"5da59654ece3813ad9ba1f0e","articleId":2671,"userId":1927,"content":"这个其实和你readFile时间有关,读的快了定时器callback还没放到事件循环里,建议多看看event loop相关的资料","createdAt":1571133012860},{"id":12780,"originId":"5da5e16a865a9844a301b8ac","articleId":2671,"userId":150,"content":"[@GaleLQ](/user/GaleLQ) \r\n我的这段代码采取于官方文档(https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/)，按照官方文档的说法，到达每个阶段将执行这个阶段的所有代码，并且将回调函数添加到回调函数队列中，再执行回调函数队列，直到队列用尽或者最大回调函数(函数队列有上限)执行，才进入下一个阶段。\r\n\r\n这里我不明白的是，在 time 阶段定时器还未达到阈值，则进入 poll 阶段执行代码和回调函数队列。此时我的理解是需要将 文件读取完毕，回调函数执行完成，再进入 time 阶段，触发 time 的定时器回调函数。\r\n\r\n不论文件读取的速度快慢，输出结果应该固定才对，我是否有那部分理解错误了呢...\r\n\r\n","createdAt":1571152234567},{"id":12781,"originId":"5da67783ece3813ad9ba204a","articleId":2671,"userId":1927,"content":"读取文件和计时功能和事件循环其实没什么关系,是有单独的模块的,你可以看看libuv相关,这两个动作完成之后才会将相应的callback放到事件循环,然后才是你看的事件循环如何执行他们,这是两个过程.","createdAt":1571190659986},{"id":12782,"originId":"5da6cbd9ece3813ad9ba21fa","articleId":2671,"userId":150,"content":"[@GaleLQ](/user/GaleLQ) \r\n我现在的理解是：在同步代码执行完后，会将属于每个阶段的代码分配给对应的模块(每个阶段都有一个处理模块)去处理，模块处理完成后添加回调到对应模块的回调队列中，然后事件循环是在一遍一遍按照顺序检查和执行每个阶段的回调队列。\r\n\r\n这样理解是否正确呢？","createdAt":1571212249148},{"id":12783,"originId":"5da6cdabece3813ad9ba2207","articleId":2671,"userId":1927,"content":"[@ddzyan](/user/ddzyan) 可以理解成,同步代码在执行的时候就调用线程执行,不是执行完再调用","createdAt":1571212715542},{"id":12784,"originId":"5da6ceecece3813ad9ba220f","articleId":2671,"userId":150,"content":"[@GaleLQ](/user/GaleLQ) \r\n网上的文章基本没有讲到这一块内容，感谢你的指导，我对 event-loop有了更深入的理解","createdAt":1571213036447},{"id":12785,"originId":"5da4925aece3813ad9ba1b80","articleId":2672,"userId":716,"content":"不就是取属性？","createdAt":1571066458079},{"id":12786,"originId":"5da49f07ece3813ad9ba1b98","articleId":2672,"userId":3738,"content":"[@maxyou](/user/maxyou) proxy是个文件夹，下面还有几个js文件，常规的要导入的话应该这写require(“./proxy/message”)","createdAt":1571069703060},{"id":12787,"originId":"5da4afbc865a9844a301b4ae","articleId":2672,"userId":716,"content":"[@zhengyuanhong](/user/zhengyuanhong) 里面有没有一个index.js？缺省会导入这个文件","createdAt":1571073980910},{"id":12788,"originId":"5da510d6ece3813ad9ba1be3","articleId":2672,"userId":3738,"content":"[@maxyou](/user/maxyou) 有的，请问这是什么语法特性","createdAt":1571098838742},{"id":12789,"originId":"5da52352865a9844a301b542","articleId":2672,"userId":26,"content":"你应该补习一下js的模块是什么意思","createdAt":1571103570362},{"id":12790,"originId":"5da52852865a9844a301b57e","articleId":2672,"userId":716,"content":"[@zhengyuanhong](/user/zhengyuanhong) \r\n\r\n我也忘记了，总之缺省导入index.js\r\n\r\n我的文件目录结构一般是：\r\n  目录名aaa\r\n  \tindex.js\r\n\tfile1.js\r\n\tfile2.js\r\n在index.js中导入file1和2并统一输出，外界只导入目录名aaa","createdAt":1571104850361},{"id":12791,"originId":"5da529dfece3813ad9ba1c8a","articleId":2672,"userId":716,"content":"![require.PNG](//static.cnodejs.org/FtsGNZx5gtB4OBCqq-C05_bocYjy)\r\n[@zhengyuanhong](/user/zhengyuanhong) 比如我的service目录。不一定对，不一定好，仅供参考。","createdAt":1571105247789},{"id":12792,"originId":"5da52ed8865a9844a301b5b0","articleId":2672,"userId":3738,"content":"[@HobaiRiku](/user/HobaiRiku) 必须要，现在基础还不扎实","createdAt":1571106520185},{"id":12793,"originId":"5da52f68865a9844a301b5b6","articleId":2672,"userId":3738,"content":"[@maxyou](/user/maxyou) 好的，明白了一些，谢谢","createdAt":1571106664540},{"id":12794,"originId":"5da57cc8ece3813ad9ba1e89","articleId":2672,"userId":701,"content":"你可以先 `var module = require('…/proxy')` 然后打印`module`看看你就知道了","createdAt":1571126472332},{"id":12795,"originId":"5da59a0a865a9844a301b802","articleId":2672,"userId":3738,"content":"[@a1292717155](/user/a1292717155) 好的，这是一个不错的建议","createdAt":1571133962732},{"id":12796,"originId":"5da53fa6865a9844a301b63a","articleId":2673,"userId":1655,"content":"改成这样不抱错，但是`grep -i `没有效果\r\n``` js\r\nvar tail3 = spawn(\"pm2\", [\"logs\", \"pgyer-node-middle\", \"--raw\"], { \"lines\": \" | grep -i '\" + _q + \"'\" });\r\n```","createdAt":1571110822572},{"id":12797,"originId":"5da56d66ece3813ad9ba1e29","articleId":2673,"userId":1655,"content":"```\r\n\r\nvar grep = spawn('grep', ['-i', `${_q}`]);\r\nvar tail3 = spawn(\"pm2\", [\"logs\", \"pgyer-node-middle\", \"--raw\"]);\r\ntail3.stdout.pipe(grep.stdin);\r\ntail3.stdout.on(\"data\", function (data) {\r\n        try {\r\n            var content = data.toString(\"utf-8\");\r\n            io.emit('chat message find', content);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    });\r\n\r\n```","createdAt":1571122534123},{"id":12798,"originId":"5ce7691f4036f24194cf61a9","articleId":2674,"userId":3154,"content":"像这种 生产者低于消费者的情况，我是用中间件 bull 封装的redis 管理任务队列，还有可视化界面控制任务 和 定时处理 比较适合你这种情况！个人建议～","createdAt":1558669599620},{"id":12799,"originId":"5ce76c0752ccb64168ba71f4","articleId":2674,"userId":44,"content":"[@chenjiyong](/user/chenjiyong) 我的思路是有一个负载均衡算法服务，负责推举可用服务，轮询检测服务是否可用，但push 和pull实现的方式不一样，我想的是算法服务可以主动来拉任务执行\r\n- 目前的思路\r\n ![WeChata57eb797184dfdca493eb2a73711df70.png](//static.cnodejs.org/FtrERJh8loKeG41N9_QIOHVognkW)","createdAt":1558670343022},{"id":12800,"originId":"5ce771a752ccb64168ba7210","articleId":2674,"userId":3154,"content":"任务队列 在 bull 里面，哪个算法空闲就自己取；","createdAt":1558671783264},{"id":12801,"originId":"5ce7b1db4036f24194cf6464","articleId":2674,"userId":44,"content":"[@chenjiyong](/user/chenjiyong) 思路如下:\r\n- 由一个资源监控程序监控算法服务器占用的资源情况，如gpu或cpu，当可用资源达到一定层级（这里需要测试各个算法最低占用资源，提供config）可以跑算法时，向服务配置中心更新活跃状态\r\n- 服务配置中心发现推举可用算法服务器来消费队列里的任务\r\n##### 现在在研究k8s，看能否实现","createdAt":1558688219476},{"id":12802,"originId":"5d9ea2c8865a9844a301a543","articleId":2674,"userId":1991,"content":"哥，能介绍推荐node.js的人吗？","createdAt":1570677448996},{"id":12803,"originId":"5da4202c865a9844a301b26b","articleId":2674,"userId":148,"content":"[@Aimsen-Jeffrey](/user/Aimsen-Jeffrey) 你招人？","createdAt":1571037228288},{"id":12804,"originId":"5da525bcece3813ad9ba1c65","articleId":2674,"userId":1991,"content":"[@muyoucun557](/user/muyoucun557) 是呀","createdAt":1571104188746},{"id":12805,"originId":"5da1a8c9ece3813ad9ba15e7","articleId":2675,"userId":3740,"content":"![image.png](//static.cnodejs.org/FhAulY9e5HFqxIDmySnFZRsJDW-O)\r\n**十分感谢各位，我自己已经解决了这个问题。有需要的人，可以使用我这个方法。**\r\n\r\n思路就是把**递归换成队列**的方式。\r\n\r\n例如：\r\nvar arr = [[1, 2, 3],[[[[[[11]]]]]], [4, [5]], [6, [7, 8, 9,[10]]]];\r\n得到 brr： [1, 2, 3, 4, 6,5, 7, 8, 9, 10,11]\r\n\r\n把数组当成是一个文件夹，这样去不断遍历。\r\n\r\n文字太多了，我把它写成博客了。有这个问题的朋友，可以参考；[](https://blog.csdn.net/lemisi/article/details/102551610)[](https://blog.csdn.net/lemisi/article/details/102551610)https://blog.csdn.net/lemisi/article/details/102551610\r\n\r\n我原来的问题就是：\r\n\r\n递归的方法**不知道什么时候递归会结束**；收集好我想要的文件放入列表中，用来执行下一行代码；\r\n\r\n**使用队列就可以知道什么时候结束了**；收集好我想要的文件放入列表中，结束以后就可以用来执行下一行代码了。\r\n","createdAt":1570875593576},{"id":12806,"originId":"5da1b6d3865a9844a301ae9f","articleId":2675,"userId":109,"content":"**最终的值**  是什么？","createdAt":1570879187723},{"id":12807,"originId":"5da1b74fece3813ad9ba15fd","articleId":2675,"userId":109,"content":"如果“最终的值”定义为所有过滤出的 md 文件，那么用这个轮子试试  https://www.npmjs.com/package/rxwalker\r\npipe() 最后用 reduce 操作符搜集所有输出值。","createdAt":1570879311489},{"id":12808,"originId":"5da28492865a9844a301af50","articleId":2675,"userId":1377,"content":"不大确定我这个是否能帮到你，但功能类似\r\n![Screen Shot 2019-10-13 at 9.54.55 AM.png](//static.cnodejs.org/Fo97JRw8M6eThwkqtg4kjZ81OG3U)\r\n","createdAt":1570931858990},{"id":12809,"originId":"5da2f0fdece3813ad9ba16da","articleId":2675,"userId":358,"content":"globby","createdAt":1570959613816},{"id":12810,"originId":"5da3cafc865a9844a301b080","articleId":2675,"userId":3740,"content":"[@waitingsong](/user/waitingsong) 最终的值就是我收集的所有md文件信息；","createdAt":1571015420694},{"id":12811,"originId":"5da3cd46ece3813ad9ba17b6","articleId":2675,"userId":109,"content":"[@Chenyating](/user/Chenyating) 我上面说的那个包可以遍历目录，文件和链接，然后逐个发射出来。你可以用 rxjs 的 reduce 操作符搜集所有的值然后一次性发射。\r\n如果需要的是 `Promise<file[]>` 的返回类型，那么结果转换下 `files$.toPromsie()` 就行了。","createdAt":1571016006571},{"id":12812,"originId":"5da3cd6aece3813ad9ba17bb","articleId":2675,"userId":109,"content":"另外，一楼图片中路径的`径`写错了。五笔？","createdAt":1571016042108},{"id":12813,"originId":"5da448afece3813ad9ba1a9f","articleId":2675,"userId":1737,"content":"删除目录以及全部文件\r\n![image.png](//static.cnodejs.org/FtJAnRYBukKEnYXsMdmYzg1BcQMZ)","createdAt":1571047599203},{"id":12814,"originId":"5da49000ece3813ad9ba1b69","articleId":2675,"userId":358,"content":"那么复杂干嘛\r\n```js\r\nawait globby('**/*.md')\r\n```","createdAt":1571065856958},{"id":12815,"originId":"5da51ed2ece3813ad9ba1c16","articleId":2675,"userId":3740,"content":"[@atian25](/user/atian25) 哈哈，主要是想自己写。","createdAt":1571102418315},{"id":12816,"originId":"5da4941d865a9844a301b483","articleId":2676,"userId":716,"content":"我的理解是，dart是一种完备的面向对象语言，ts是JavaScript的类型补丁。\r\n感觉dart很不错，但目前似乎只能开发flutter。","createdAt":1571066909105},{"id":12817,"originId":"5d71b8baa7474a231a5896e7","articleId":2677,"userId":191,"content":"https://pan.baidu.com/s/1KNaA97kGwNhavch5rP_G7w   nodejs koa入门教程40来讲学一下       这个会了可以学学egg.js 或者nest.js","createdAt":1567733946145},{"id":12818,"originId":"5da098b7865a9844a301ab50","articleId":2677,"userId":790,"content":"这有一些不错的node视频教程\r\nhttps://www.sucaihuo.com/video/224-0-0","createdAt":1570805943045},{"id":12819,"originId":"5da280f0865a9844a301af31","articleId":2677,"userId":1830,"content":"写项目","createdAt":1570930928618},{"id":12820,"originId":"5da31b84865a9844a301afe9","articleId":2677,"userId":109,"content":"机器人吧","createdAt":1570970500228},{"id":12821,"originId":"5da42f54865a9844a301b2a7","articleId":2677,"userId":3741,"content":"HOW TO START A NODE.JS PROJECT\r\nhttps://philna.sh/blog/2019/01/10/how-to-start-a-node-js-project/","createdAt":1571041108611},{"id":12822,"originId":"5da1879d865a9844a301add4","articleId":2678,"userId":150,"content":"顶一下，别沉了","createdAt":1570867101989},{"id":12823,"originId":"5da199e7865a9844a301ae47","articleId":2678,"userId":109,"content":"worker 才取消 experience 标记，估计尚不稳定。","createdAt":1570871783731},{"id":12824,"originId":"5da1854b865a9844a301adc6","articleId":2679,"userId":187,"content":"请问 你压缩了吗","createdAt":1570866507977},{"id":12825,"originId":"5da023ba865a9844a301a9c9","articleId":2680,"userId":3744,"content":"我的理解是洋葱模型针对的是一次请求，也就是一次请求贯穿所有的中间件，express中可以通过res.end()返回一次请求，但是koa中即使ctx.body，也会等到所有中间件执行完毕后返回请求。可以看一下koa的处理代码，\r\n  handleRequest(ctx, fnMiddleware) {\r\n    const res = ctx.res;\r\n    res.statusCode = 404;\r\n    const onerror = err => ctx.onerror(err);      //错误处理\r\n    const handleResponse = () => respond(ctx);   //请求响应函数\r\n    onFinished(res, onerror);                    //监听response响应完成后，做资源清理工作\r\n    return fnMiddleware(ctx).then(handleResponse).catch(onerror);   //  fnMiddleware 返回Promise Promise.catch 捕获错误\r\n  }","createdAt":1570775994039},{"id":12826,"originId":"5da02541865a9844a301a9e7","articleId":2680,"userId":111,"content":"都是回调写法，只是express写死了router里面加一层  而 koa2可以通过middleware无限串起来 这样导致同样的业务 koa2在middleware膨胀得情况下，性能要比express低","createdAt":1570776385114},{"id":12827,"originId":"5da16923865a9844a301ad26","articleId":2680,"userId":1737,"content":"koa运行原理\r\n\r\n```javascript\r\n/**\r\n*middleware   数组\r\n*/\r\nconst compose = async (middleware)=>{\r\n    if(!Array.isArray(middleware)){\r\n        throw new TypeError('Middleware stack must be an Array!')\r\n    }\r\n   return async (ctx,next)=>{\r\n    let index = 0\r\n    await dispatch(0)\r\n    async function dispatch(i){\r\n         if(index > i){\r\n           throw new Error('next() called multiple times')\r\n         }\r\n         index  = i \r\n         let fn = middleware[i]\r\n         if(i === middleware.length){\r\n             fn = next \r\n         }\r\n         if(fn){\r\n              try{\r\n                await fn(ctx,async ()=>dispatch(i+1))\r\n              }catch(err){\r\n                  console .error(err)\r\n                  ctx.throw(500,'server error')\r\n              }\r\n         }\r\n     }\r\n   }\r\n}\r\n\r\nmodule.exports =compose\r\n\r\n```","createdAt":1570859299761},{"id":12828,"originId":"5d9d448cece3813ad9ba0932","articleId":2681,"userId":523,"content":"ci 工具吧","createdAt":1570587788399},{"id":12829,"originId":"5d9d485bece3813ad9ba0948","articleId":2681,"userId":109,"content":"github actions","createdAt":1570588763306},{"id":12830,"originId":"5d9d5117ece3813ad9ba0973","articleId":2681,"userId":1737,"content":"感谢。目前只是通过监听webhook,服务端收到请求再git clone代码。。。","createdAt":1570590999463},{"id":12831,"originId":"5d9d76caece3813ad9ba0a03","articleId":2681,"userId":716,"content":"pm2 ecosystom ?\r\n弄过一下，好麻烦的。","createdAt":1570600650344},{"id":12832,"originId":"5d9efb4aece3813ad9ba0eaf","articleId":2681,"userId":1737,"content":"[@maxyou](/user/maxyou) 花了点时间重新做了一个自动部署的包只有三步，1.安装，2.填写请求与配置，3.启动，https://github.com/pretty-foam/depolyer-auto","createdAt":1570700106565},{"id":12833,"originId":"5da06efa865a9844a301ab13","articleId":2681,"userId":2685,"content":"可以看下jenkins","createdAt":1570795258829},{"id":12834,"originId":"5da136ccece3813ad9ba136b","articleId":2681,"userId":1737,"content":"[@dadaa1](/user/dadaa1) 好的，之前没用过，早知道不写了","createdAt":1570846412321},{"id":12835,"originId":"5d9d7ff3ece3813ad9ba0a2b","articleId":2682,"userId":1132,"content":"一个是redis存过期时间\r\n一个是把过期时间加密成token,验证的时候一起发上来解密查看信息是否有效","createdAt":1570602995543},{"id":12836,"originId":"5da04c29865a9844a301aac6","articleId":2682,"userId":3745,"content":"[@pchook](/user/pchook) 谢谢","createdAt":1570786345172},{"id":12837,"originId":"5b68fa767271129a2f32a7f0","articleId":2683,"userId":258,"content":"静态直接扔到nginx就好了- -虽然理论直接设置static好像也行","createdAt":1533606518852},{"id":12838,"originId":"5b693d8bb71aedfe4c1267e9","articleId":2683,"userId":3746,"content":"[@koroshi](/user/koroshi) 不止是静态资源，还有渲染出来的页面也打包出来，好像nuxt有这个功能，egg我没找到相关方法","createdAt":1533623691380},{"id":12839,"originId":"5b6942e8b71aedfe4c1267ee","articleId":2683,"userId":258,"content":"[@xuj2017](/user/xuj2017) 服务端渲染应该都可以用呀- -我egg还用的很少，不过感觉这种库应该不需要封装吧就是服务端渲染逻辑呀什么框架都一样吧，做vue的话就把nuxt引入egg项目不就好了？\r\n","createdAt":1533625064956},{"id":12840,"originId":"5b695fc5b71aedfe4c1267fc","articleId":2683,"userId":3746,"content":"[@koroshi](/user/koroshi) 项目没用到nuxt，就是用的egg做的服务端渲染，现在想能够生成静态站点，我自己没找到相应的方法，不知道哪个库支持","createdAt":1533632453620},{"id":12841,"originId":"5b69606558db3ccf66a452e1","articleId":2683,"userId":318,"content":"我理解你的问题了，同样想知道答案\r\n搜到了一个的实现，没找到库。。\r\nhttps://www.imooc.com/article/4158","createdAt":1533632613809},{"id":12842,"originId":"5d9ffd5f865a9844a301a951","articleId":2683,"userId":3747,"content":"[@xuj2017](/user/xuj2017) 你有找到方法实现了吗？","createdAt":1570766175565},{"id":12843,"originId":"5d62937a421846662d9849ea","articleId":2684,"userId":3748,"content":"[@zijin-m](/user/zijin-m) \r\n![捕获.PNG](//static.cnodejs.org/Fnia3Bp0Ar1_hX1RbphE4A17uNoe)\r\n用window.open(“http://localhost:8080/”+ i, “blank”)测试时，发现是我之前的理解错了，并不是要把异步代码执行完毕，才会处理下一个请求，感谢解答。\r\n再追问一下，如果node主线程正在执行和上一个http请求有关的同步代码，如果这时又来了一个新的http请求，这时node主线程是继续执行之前的同步代码还是先去处理新的http请求呢？","createdAt":1566741370777},{"id":12844,"originId":"5d634827421846662d984b45","articleId":2684,"userId":545,"content":"[@lichaosuper](/user/lichaosuper) 你用不同浏览器请求，或者 用postman 就能看到真实情况了","createdAt":1566787623363},{"id":12845,"originId":"5d634839dcd8e81121a60ea0","articleId":2684,"userId":545,"content":"[@zijin-m](/user/zijin-m)   两码事","createdAt":1566787641414},{"id":12846,"originId":"5d63500c421846662d984b9f","articleId":2684,"userId":356,"content":"你这个测试工具有问题，用ab","createdAt":1566789644002},{"id":12847,"originId":"5d637d71dcd8e81121a610a3","articleId":2684,"userId":545,"content":"同一浏览器发起多次请求，还是会被当做同一个用户，阻塞在那。\r\n你用不同浏览器，或者不同电脑，就能看到这块非阻塞了。","createdAt":1566801265372},{"id":12848,"originId":"5d637f60421846662d984db2","articleId":2684,"userId":2035,"content":"**关于测试**\r\n模拟并发请求可以使用postman等工具，for循环中依旧是顺序请求\r\n\r\n**关于服务端代码如何运行**\r\n涉及知识点：nodejs的event loop如何工作\r\n程序员对于同步执行的代码会比较容易理解，因为这符合人的思维习惯，可是像nodejs这种异步的代码，就有点看不懂它具体是怎么执行的了。但咱们会遇到这样的问题，别人也会遇到，其中一个人就做了一个“模拟器”，很直观的展示nodejs异步代码执行的整个过程。为了让问题中的代码能在模拟器中执行，我稍微修改了一下代码（本质不变，不影响理解）：\r\n> //每次请求到达8080端口，就会开始执行httpRequest这个function（也就是问题中createServer中的callback）\r\nfunction httpRequest(req, res){\r\n    \tconsole.log('start to process request.');\r\n    \tsetTimeout(function(){\r\n        \t\tconsole.log('finish callback');\r\n        \t\t//res.end('ok');\r\n    \t}, 7000); //为了更加直观，适当调整一下时间\r\n    \tconsole.log('ready to accept another request.');\r\n}\r\n//模拟并发请求（其实不是并发，但是不影响理解，真正的并发也是同样的道理）\r\nhttpRequest({},{});\r\nhttpRequest({},{});\r\nhttpRequest({},{});\r\n\r\n**来，我们先感性的看下这段代码的执行过程**\r\n因为压缩的比较严重，如果看不清，可以访问最后参考资料中的模拟工具链接，自行运行。如果觉得程序运行过快，可以点击左上角的图标，然后调整'Detlay time'来控制程序执行的速度。\r\n![nodejs_event_loop (1).gif](//static.cnodejs.org/FlAXpev3Ut6T354ihND7x6GVlHPz)\r\n\r\n**介绍一下该工具**\r\n![Screen Shot 2019-08-26 at 3.11.57 PM.png](//static.cnodejs.org/FrgODt8aBlsM38uv5ag9f52qoOrp)\r\n* 左上角点击图标显示额外的设置界面。'delay time'用来调整代码执行的速度，'Simulate renders'用来模拟浏览器中的event loop和页面render的关系（nodejs的event loop和浏览器中的会有一些差异）\r\n* 中间是代码部分。\r\n* 右边'Call Stack'是栈，也就是楼主理解的运行同步代码的地方。\r\n'Web Apis'表示所有异步的请求，比如http请求，IO等等，它们完成需要一些时间。\r\n'Callback Queue'是一个存放各种callback的队列，比如web api中的某一个http请求完成了，那么对应的callback方法就会进到该队列。\r\n\r\n相信到现在为止，大家应该对该代码的执行过程有所了解，其中有几个需要注意的点：\r\n1.stack中的代码没执行完，Callback queue是不会出栈的。\r\n2.截图中的'Callback queue'看起来就一个队列，其实真正的实现是多个队列，每个队列存放不同类型的callback，event loop基于某种顺序以及规则轮询这些队列，如果了解清楚这个，那么对于某些程序执行的结果就不会感到吃惊。\r\n\r\n**扩展思考**\r\n1.如果代码中出现CPU密集的任务，比如编码解码或者大循环，对程序会有什么影响？Nodejs如何处理CPU密集型的计算（提示：分片或partition，C++ addon，child process，cluster）？\r\n2.如果一段代码中同时包含setTimeout,setInternal,Setimmediat,Process.nextTick，那么他们对应的Callback执行顺序是怎样的？其中Process.nextTick的使用需要注意什么？\r\n\r\n**参考资料**\r\n[菲利普·罗伯茨：到底什么是Event Loop呢？](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\r\n[nodejs event loop运行模拟工具](http://latentflip.com/loupe/?code=ZnVuY3Rpb24gaHR0cFJlcXVlc3QocmVxLCByZXMpewogICAgY29uc29sZS5sb2coJ3N0YXJ0IHRvIHByb2Nlc3MgcmVxdWVzdC4nKTsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICBjb25zb2xlLmxvZygnZmluaXNoIGNhbGxiYWNrJyk7CiAgICAgICAgLy9yZXMuZW5kKCdvaycpOwogICAgfSwgNzAwMCk7CiAgICBjb25zb2xlLmxvZygncmVhZHkgdG8gYWNjZXB0IGFub3RoZXIgcmVxdWVzdC4nKTsKfQoKaHR0cFJlcXVlc3Qoe30se30pOwpodHRwUmVxdWVzdCh7fSx7fSk7Cmh0dHBSZXF1ZXN0KHt9LHt9KTs%3D!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)\r\n[nodejs event loop 文档](https://nodejs.org/uk/docs/guides/event-loop-timers-and-nexttick/)\r\n","createdAt":1566801760517},{"id":12849,"originId":"5d63a233dcd8e81121a611dc","articleId":2684,"userId":3748,"content":"[@wxlfight](/user/wxlfight) 学习了，谢谢","createdAt":1566810675631},{"id":12850,"originId":"5d63ab6fdcd8e81121a61243","articleId":2684,"userId":3748,"content":"[@wxlfight](/user/wxlfight) \r\n我使用nodejs event loop运行模拟工具执行了您的代码，发现node主线程在处理并发请求时，是逐个处理请求，执行和请求有关的同步代码，遇到异步事件就挂起，继续往后执行同步代码，异步事件有了结果就放到事件循环队列中去，node主线程如果处理完一个请求的同步代码，发现还有请求没处理，就继续去处理请求，先不去处理事件循环队列中的任务，等到所有请求都处理完，主线程空闲了，才会去执行事件循环队列中的任务，这也是node擅长I/O密集型，不擅长CPU密集型的原因，因为cpu密集型任务的话导致node主线程花费长时间在处理CPP密集型任务上，导致前一个请求（假设请求的返回是在异步任务里面）在事件循环的任务队列中没返回，而后一个请求又没空处理。不知这样理解正确不？","createdAt":1566813039066},{"id":12851,"originId":"5d63abc7421846662d984f3f","articleId":2684,"userId":3748,"content":"[@zuohuadong](/user/zuohuadong) 嗯嗯","createdAt":1566813127959},{"id":12852,"originId":"5d667035421846662d98582d","articleId":2684,"userId":2996,"content":"[@zijin-m](/user/zijin-m) dsfasfsadf","createdAt":1566994485706},{"id":12853,"originId":"5d9ca9da865a9844a301a0b7","articleId":2684,"userId":3749,"content":"[@lichaosuper](/user/lichaosuper) 请教下 按照您的说法 那如果我在路由处理时使用async await将异步操作（例如数据库操作等）同步的执行下去，框架的路由处理都可以携程async函数嘛，那么是否前后两个请求是串行处理的呢？还是说因为路由处理函数时async了，两个请求就不会串行处理，是异步处理的？学习node一直很疑惑的一个点，大致明白像数据库查询等操作都是异步的，不会阻塞后面代码的执行，但是我们一般写代码时都用await等待查询结果了，不清楚请求处理函数到底是一个个执行，还是异步执行的。。。","createdAt":1570548186826},{"id":12854,"originId":"5d9fe074865a9844a301a88d","articleId":2684,"userId":97,"content":"https://cnodejs.org/topic/5d47cc6a4f472f7fee15294d","createdAt":1570758772503},{"id":12855,"originId":"5d80c05695464514f7ed78dd","articleId":2685,"userId":1673,"content":"E_user--E_User_group--E_system_user---E_company ","createdAt":1568718934711},{"id":12856,"originId":"5d80c06c53c75a4136b4b1da","articleId":2685,"userId":1673,"content":"[@nwljy](/user/nwljy) 不麻烦","createdAt":1568718956702},{"id":12857,"originId":"5d8180da95464514f7ed79a6","articleId":2685,"userId":2246,"content":"> E_user–E_User_group–E_system_user—E_company\r\n\r\n这是表示的啥关系？","createdAt":1568768218335},{"id":12858,"originId":"5d818b6b95464514f7ed79ee","articleId":2685,"userId":1968,"content":"我的理解是用户相关的都应该放在user表里，即你的person表。那么 usertype 字段也应该在该表？article表只存储文章相关内容以及一个与用户绑定的唯一标识，需要用户信息拿标识去用户表查询。","createdAt":1568770923127},{"id":12859,"originId":"5d82d76c95464514f7ed7f60","articleId":2685,"userId":2246,"content":"[@hejiaoshou](/user/hejiaoshou) `person`表的`person_id`和`company`表的`company_id`都是自增长，他们有可能相同。那么`article`表的`user_id`如果为 1，就不确定这个1是 person 还是 company","createdAt":1568855916751},{"id":12860,"originId":"5d82de0795464514f7ed7fc7","articleId":2685,"userId":1968,"content":"[@xuxu7](/user/xuxu7) 这个问题就要看你的业务逻辑是什么来具体分析了。我目前主业是前端，只是偶偶写写node，但我认为这个问题并不复杂。","createdAt":1568857607325},{"id":12861,"originId":"5d83369853c75a4136b4bc18","articleId":2685,"userId":1199,"content":"感觉挺简单的啊\r\n文章永远关联个人,查询文章时候,join一下个人\r\n如果个人在企业上,文章就显示企业,否则显示个人\r\n","createdAt":1568880280194},{"id":12862,"originId":"5d83378895464514f7ed82f3","articleId":2685,"userId":1199,"content":"CREATE TABLE `article` (\r\n  `article_id` int unsigned NOT NULL AUTO_INCREMENT,\r\n  `person_id` int unsigned NOT NULL AUTO_INCREMENT COMMENT 'person_id ',\r\n  `user_type` varchar(20) NOT NULL COMMENT 'person 或者 company'\r\n  PRIMARY KEY (`article_id`),\r\n)  \r\n\r\n```sql\r\nselect a.*,p.id,p.companyId from article left jon persion p on a.person_id = p.id \r\n```","createdAt":1568880520021},{"id":12863,"originId":"5d8337dd53c75a4136b4bc27","articleId":2685,"userId":1199,"content":"文章不应该保存公司的任何信息,因为文章和公司没有直接关系\r\n你画个er图或者domain模型就能分析出来.\r\n所有的变化都在个人-公司上,和文章无关","createdAt":1568880605812},{"id":12864,"originId":"5d83a45453c75a4136b4be07","articleId":2685,"userId":2246,"content":"[@JsonSong89](/user/JsonSong89) 谢谢！需求要求：**个人和企业解绑后，以企业身份发布的文章依然属于企业**，所以若文章只和 person 关联的话，解绑后就无法保证文章和企业的关系了。","createdAt":1568908372990},{"id":12865,"originId":"5d885ee053c75a4136b4cb76","articleId":2685,"userId":562,"content":"为什么不考虑在文章表建立一个字段 isPerson 来标明是个人用户还是企业用户 如果isPerson为true就关联person_id 如果为false就关联 company_id","createdAt":1569218272796},{"id":12866,"originId":"5d88800595464514f7ed94e7","articleId":2685,"userId":2246,"content":"[@hewentaowx](/user/hewentaowx) 目前的做法是在文章表里通过 `user_type ENUM('person', 'company')` 枚举类型字段来区分，和**isPerson** 的作用一样。\r\n\r\n就是感觉麻烦：其他表需要关联`user_id`的地方也必须添加`user_type`字段。","createdAt":1569226757956},{"id":12867,"originId":"5d8974425cbcc579bb9ea597","articleId":2685,"userId":562,"content":"[@xuxu7](/user/xuxu7) 那你觉得麻烦 可以person表用自增主键关联  company加一个uuid来关联文章表  这样person表的id和company就不会存在一致的情况了","createdAt":1569289282705},{"id":12868,"originId":"5d8ad281e86cfb0d2a64592d","articleId":2685,"userId":194,"content":"如果你会写 SQL，现在可以直接写 SQL 完成你的 SaaS 供多个企业使用：[https://wuyuan.io](https://wuyuan.io)","createdAt":1569378945542},{"id":12869,"originId":"5d8b0876e86cfb0d2a6459ff","articleId":2685,"userId":2246,"content":"[@hewentaowx](/user/hewentaowx) 不太理解具体怎样的，能在数据库表结构上给具体的提示吗？","createdAt":1569392758452},{"id":12870,"originId":"5d9efb1d865a9844a301a706","articleId":2685,"userId":1904,"content":"设计一个文章版本表，每次发布文章时，如果是个人用户发布，就插入一条个人用户关联上的版本数据，如果是企业用户就插入一条企业和个人都关联的版本数据，当用户和企业解绑时，更新这条数据，把个人用户关联去掉就行了；展示的时候查一下这张表，以企业关联优先就行了；一般表设计思路不是这个表自身的信息一概不存，用中间表来表示。","createdAt":1570700061126},{"id":12871,"originId":"5d9d4e9c865a9844a301a1bc","articleId":2686,"userId":89,"content":"node已经10年了，虽然很优秀，但还是有很多历史包袱的。\r\n\r\n有一个说走就走的旅行，未尝不好，","createdAt":1570590364267},{"id":12872,"originId":"5d9d5094865a9844a301a1cd","articleId":2686,"userId":187,"content":"程序员还是喜欢用一种语言去构建世界，不是说他们只会一种语言。","createdAt":1570590868237},{"id":12873,"originId":"5d9d5a83ece3813ad9ba0996","articleId":2686,"userId":568,"content":"我觉得deno现在毫无存在的必要，没有任何一个领域需要这样做","createdAt":1570593411916},{"id":12874,"originId":"5d9d5db8865a9844a301a203","articleId":2686,"userId":108,"content":"![image.png](//static.cnodejs.org/FirwYUJvx93yecjHzzk0FOT6Ci0X)\r\n\r\nnodejs 的坑已经填不了了\r\n干脆不填了，另开一个小号。\r\n\r\n- 更好的开发体验\r\n- 更安全的运行时\r\n- 兼容 Web 标准\r\n\r\n往后甚至可能支持交叉编译，运行时跟项目打包进一个可执行文件，部署就这么简单。让 `node_modules`/`package.json` 去见鬼\r\n\r\n等着真香吧","createdAt":1570594232091},{"id":12875,"originId":"5d9d622dece3813ad9ba09b2","articleId":2686,"userId":545,"content":"[@captainblue2013](/user/captainblue2013) [@i5ting](/user/i5ting) \r\n\r\n1. node.js 有些坑是不好填的。\r\n比如 node-gyp 这个大坑~ \r\n比如 package.json\r\n又比如你现在想打包二进制文件，虽然有插件能实现，但很不好用\r\n.....\r\n2.  typescript 一直以来缺乏一个 runtime 。\r\n\r\n说几点自己的看法：\r\n1. 从性能和 runtime 角度来说，未来 v8 引擎直接执行 ast 更有前途（目前只是个提案）。\r\n2. deno 正式版发布后 甚至3-5年都很难有生态。\r\n3. 会有些 ts 框架同时支持 node 和 deno ，这是很好的过渡方式。","createdAt":1570595373008},{"id":12876,"originId":"5d9d896eece3813ad9ba0a67","articleId":2686,"userId":418,"content":"ry 演讲时都说了，就是安全啊，gyp 啊，那些大坑已经没有办法修复了","createdAt":1570605422265},{"id":12877,"originId":"5d9d95daece3813ad9ba0a96","articleId":2686,"userId":152,"content":"用deno不如直接去学go。 不伦不类的一个东西","createdAt":1570608602392},{"id":12878,"originId":"5d9d9f35ece3813ad9ba0ad6","articleId":2686,"userId":545,"content":"[@Gitforxuyang](/user/Gitforxuyang)  不同的东西，也不是替代品。\r\nts 前端开发很普遍，而且泛型，装饰器都有支持，完全面向对象的语言。\r\ngo 面向对象方面弱很多了。\r\n目前go 做虚拟化和云计算的多一些","createdAt":1570610997751},{"id":12879,"originId":"5d9da4acece3813ad9ba0af3","articleId":2686,"userId":1199,"content":"[@Gitforxuyang](/user/Gitforxuyang) \r\n刚刚又去瞻仰了下tj,然后看到他最新的代码...\r\n![image.png](//static.cnodejs.org/FtbqNGR1zdyZCMyGSM6tW7qbSGGg)\r\n实在是接受不能啊","createdAt":1570612396088},{"id":12880,"originId":"5d9da79cece3813ad9ba0b15","articleId":2686,"userId":187,"content":"[@JsonSong89](/user/JsonSong89) \r\nreturn err ? err : ...\r\n这样多好","createdAt":1570613148670},{"id":12881,"originId":"5d9daaa8ece3813ad9ba0b24","articleId":2686,"userId":1199,"content":"[@ounana](/user/ounana) 三元肯定不行,这里是可以有流程控制的,几段逻辑嵌套在几个三元运算里?那还不如写成这样呢.","createdAt":1570613928559},{"id":12882,"originId":"5d9dadc4ece3813ad9ba0b3b","articleId":2686,"userId":187,"content":"[@JsonSong89](/user/JsonSong89) \r\n除了第二个不可以吧，其他都可以","createdAt":1570614724180},{"id":12883,"originId":"5d9dbe54865a9844a301a3c6","articleId":2686,"userId":21,"content":"怎么说呢？deno我觉得不算是下一代，但是也确实解决了很多node遗留问题。\r\n我认为有以下几点：\r\n\r\n对于普通开发者来说：\r\n\r\n* node有很多独有的全局变量，这对移植到浏览器或者js的沙盒环境增加了一些障碍，而deno都是从deno导入进来的，更有利于移植\r\n* deno同时有更多的安全选项，虽然我觉得没多大用，但至少能提醒开发者什么应用使用了什么权限\r\n* 其次就是所谓的非中心化的包使用，像go一样可以直接用http的包，这样能让使用者潜移默化的减少些包嵌包所导致的黑洞问题的可能\r\n* 使用ts同时不强制使用强类型ts，但这却有助于使使用者在语法上更接近于新的js草案\r\n\r\n其次对于deno开发者来说：\r\n\r\n* 使用gn比node-gyp编译要快很多，给开发者省不少时间\r\n* deno使用rpc调用，不像node和v8代码杂合的那么多，这样v8的升级改动对deno的影响就会小很多\r\n\r\n不过半年多没看node和deno了，且node每个版本都有很大变化，这个理解可能还停留在半年多前，但偏差也应该不会太大。","createdAt":1570618964645},{"id":12884,"originId":"5d9ee9ef865a9844a301a681","articleId":2686,"userId":22,"content":"大号废了，开个小号重练","createdAt":1570695663881},{"id":12885,"originId":"5c0cfc877ec239239ff5502c","articleId":2687,"userId":1595,"content":"Angular7教程：https://pan.baidu.com/s/1dTItz3tEnP0GxPcExfH68g\r\n\r\n\r\n\r\n","createdAt":1544354951676},{"id":12886,"originId":"5c0d0cb77ec239239ff550ab","articleId":2687,"userId":109,"content":"先学会 TS","createdAt":1544359095109},{"id":12887,"originId":"5c0d10abf3d48d2397c0f69c","articleId":2687,"userId":652,"content":"你是猴子派来的逗比吗？问：如何学习VUE，问如何学习angular","createdAt":1544360107119},{"id":12888,"originId":"5c0dc505f3d48d2397c0f7b5","articleId":2687,"userId":545,"content":"[@sunfeng90](/user/sunfeng90) 广告帖，估计让1楼回复的   ","createdAt":1544406277377},{"id":12889,"originId":"5c0f5d847ec239239ff55ada","articleId":2687,"userId":652,"content":"[@zuohuadong](/user/zuohuadong) 如何学习VUE，问如何学习angular...都是他问的","createdAt":1544510852695},{"id":12890,"originId":"5c0f9ad67ec239239ff55d6b","articleId":2687,"userId":1980,"content":"感觉不管学什么技术 看文档是最基本的 😂😂","createdAt":1544526550511},{"id":12891,"originId":"5c10727cf3d48d2397c1043c","articleId":2687,"userId":685,"content":"学会vue再学angular","createdAt":1544581756004},{"id":12892,"originId":"5c20334f3898674067a776cc","articleId":2687,"userId":790,"content":"这有系列angular视频教程[https://www.sucaihuo.com/search?keyword=angular&mtype=30](https://www.sucaihuo.com/search?keyword=angular&mtype=30)","createdAt":1545614159558},{"id":12893,"originId":"5c2085d53898674067a77ab6","articleId":2687,"userId":1193,"content":"如何学习  html ","createdAt":1545635285257},{"id":12894,"originId":"5c3b349fa4d44449266b050d","articleId":2687,"userId":1661,"content":"这是nodejs社区，angular的问题在这问合适吗","createdAt":1547383967234},{"id":12895,"originId":"5c59b47205cc322e7b1375ab","articleId":2687,"userId":828,"content":"祝大家新年快乐","createdAt":1549382770320},{"id":12896,"originId":"5c5ed19fe6aaad2ea76df283","articleId":2687,"userId":3750,"content":"我猜应该是用脑壳学","createdAt":1549717919940},{"id":12897,"originId":"5c623dba05cc322e7b137f78","articleId":2687,"userId":3375,"content":"[@sunfeng90](/user/sunfeng90) 应该是想换一个坑了","createdAt":1549942202710},{"id":12898,"originId":"5c852275acb681372d416bc0","articleId":2687,"userId":798,"content":"暂时不学这个","createdAt":1552228981353},{"id":12899,"originId":"5c8723517ce0df373242720d","articleId":2687,"userId":545,"content":"[@PotentialSteffan](/user/PotentialSteffan)  就是个营销号，让一楼回答的～","createdAt":1552360273584},{"id":12900,"originId":"5c89e8487ce0df3732427d49","articleId":2687,"userId":3715,"content":"我倒是想认真回答一下这个问题。我的理解是：Angular 这东西不好学——概念非常多。\r\n\r\n我从去年 6 月份下旬开始自学 Angular。此时的我对于前端的认识只停留在本科 HTML JS 的基础水平，没有任何前端建站经验。当时在三大框架中选择 Angular 只是因为它的文档看起来有那么回事，可以做出东西来。\r\n\r\n于是我断断续续用了一个月的时间，照着官方文档把 heros 的代码敲了一遍。但是敲完了仍然不理解 Angular 中的一些概念依赖注入，Module , Componet, service 的关系。期间，我又找了《揭秘Angular 2》 看了前几章，仍然不是很明白。\r\n\r\n这样时间来到了 7 月，我感觉书本学得太慢，就去淘宝上买源码来看。当时十几块买了个 fuse 源码（ themeforest 上售价 30 美金含税，目前我买了一个license，也算不欠他了）。看源代码的2个月，是我收获最大的阶段，虽然有很多时候想要放弃，但断断续续也坚持了下来。我就结合google 和 官方文档反复琢磨理解。这个阶段非常痛苦，但是收获真的很大。从源码里，我学到了目前流行的 typescript rxjs , [@angular](/user/angular)/animation,[@angular](/user/angular)/http 还有 组件化模块化，响应式的思想。也是在这个时候我才明白了3个月前没想通的大部分问题。\r\n\r\n接下来的时间，我一直把 fuse 作为我的学习源泉。我没有看任何的视频，只影印了一本 18 年出版的 angular in action。这本书当时看来的确帮助我打了基础，但是和从 fuse 源码中学到的知识相比，这本书对我的帮助是很小的。今年2月开始，我用 mean stack 给单位做了一个工单管理系统。\r\n\r\n现在想来，Angular 的确不好学，但是这个学习的过程帮助我重新理解了软件设计的一些思想，重新认识了写代码这门手艺。","createdAt":1552541768387},{"id":12901,"originId":"5c8b0a397ce0df373242824c","articleId":2687,"userId":191,"content":"[@zlyuanteng](/user/zlyuanteng) 你这个不全哦  这个市全的\r\nhttps://www.itying.com/goods-1047.html","createdAt":1552615993011},{"id":12902,"originId":"5c8b88c07ce0df37324286dd","articleId":2687,"userId":100,"content":"[@xuemeifenglin](/user/xuemeifenglin) 谢谢","createdAt":1552648384520},{"id":12903,"originId":"5cb00208dad66d658e408398","articleId":2687,"userId":805,"content":"瞎学","createdAt":1555038728757},{"id":12904,"originId":"5cce3883776fb66e0d171c89","articleId":2687,"userId":804,"content":"mark","createdAt":1557018755648},{"id":12905,"originId":"5cce60d1776fb66e0d171e57","articleId":2687,"userId":189,"content":"[@qiurenbo](/user/qiurenbo)  其实也不难  会ts angular很简单的\r\n\r\nts基础入门19讲\r\nhttps://pan.baidu.com/s/17jllW0igIOWjM3YCvWS-bg","createdAt":1557029073045},{"id":12906,"originId":"5ccee8f8776fb66e0d1722f8","articleId":2687,"userId":1217,"content":"mark","createdAt":1557063928223},{"id":12907,"originId":"5ccf4e65776fb66e0d17238c","articleId":2687,"userId":1980,"content":"参考下  [Angular 修仙之路](http://https://segmentfault.com/a/1190000008754631) 的教程 (不要在意这个名字), 最初学 angular 2+ 的时候是看 文档的, 但后面发现这个教程很有意思, 压缩了很多文档里的长篇大论, 值得推荐.\r\n","createdAt":1557089893381},{"id":12908,"originId":"5cefe8774036f24194cf81ec","articleId":2687,"userId":798,"content":"楼主来谈一下学习进度啊","createdAt":1559226487627},{"id":12909,"originId":"5ceff6ac52ccb64168ba907e","articleId":2687,"userId":513,"content":"前端还处於春秋战国时期，我是少碰，若真需要，我会选择已经很成熟的框架，例如extjs","createdAt":1559230124208},{"id":12910,"originId":"5cf488f695fcc914aa265716","articleId":2687,"userId":685,"content":"[@Solomonqoo](/user/Solomonqoo) extjs 文档痛苦哦","createdAt":1559529718790},{"id":12911,"originId":"5cf4c0de95fcc914aa265978","articleId":2687,"userId":513,"content":"[@eggper](/user/eggper) 您是专家？太棒了！我可以跟您请教！\r\n其实还好，开发到现在(Extjs5.1.1)，大概如何操作，也越来越熟悉，只是在权限(casbin / egg-auths)跟工作流(workflow-es)，这部份，找不到好的教学文件。","createdAt":1559544030755},{"id":12912,"originId":"5d18d24a34bca667bc6e40e5","articleId":2687,"userId":1661,"content":"angular暂时不学","createdAt":1561907786659},{"id":12913,"originId":"5d41a8739969a529571d893b","articleId":2687,"userId":790,"content":"这是nodejs社区吧","createdAt":1564584051810},{"id":12914,"originId":"5d6fd340d50f5723459117e6","articleId":2687,"userId":804,"content":"我还是学好node吧","createdAt":1567609664580},{"id":12915,"originId":"5d75d9caa7474a231a58a2c1","articleId":2687,"userId":3751,"content":"node基本功--->ts(不需要太深入,看到某一个种写法要知道是什么意思)--->官方文档(https://angular.cn/docs),官方给的文档真的很好,很清楚","createdAt":1568004554392},{"id":12916,"originId":"5d9ea407ece3813ad9ba0d07","articleId":2687,"userId":99,"content":"vue3 出来了","createdAt":1570677767041},{"id":12917,"originId":"5d9da002865a9844a301a350","articleId":2688,"userId":3753,"content":"sequelize \r\ntypeorm","createdAt":1570611202549},{"id":12918,"originId":"5d9da025865a9844a301a359","articleId":2688,"userId":545,"content":"typeorm 推荐","createdAt":1570611237368},{"id":12919,"originId":"5d9d8499ece3813ad9ba0a47","articleId":2689,"userId":1741,"content":"https://developer.mozilla.org/zh-CN/docs/Web/API/BeforeUnloadEvent","createdAt":1570604185226},{"id":12920,"originId":"5d9c20f9865a9844a3019eae","articleId":2690,"userId":18,"content":"static2.cnode.org 这个域名是放在七牛的。只有html的返回是需要走日本的服务器","createdAt":1570513145890},{"id":12921,"originId":"5d9c4d0fece3813ad9ba06f6","articleId":2690,"userId":641,"content":"用日本的服务器搭shadowsocks可以不，香港的被封了。","createdAt":1570524431708},{"id":12922,"originId":"5d9c5d36865a9844a301a010","articleId":2690,"userId":3,"content":"[@chunjiu](/user/chunjiu) 当然可以呀","createdAt":1570528566110},{"id":12923,"originId":"5d9d3f37865a9844a301a15d","articleId":2690,"userId":3755,"content":"[@alsotang](/user/alsotang) 谢谢站长","createdAt":1570586423297},{"id":12924,"originId":"5d906de8865a9844a301907a","articleId":2691,"userId":545,"content":"用 apollo ，  前端支持 状态管理。","createdAt":1569746408173},{"id":12925,"originId":"5d957b42ece3813ad9b9fed2","articleId":2691,"userId":716,"content":"[@zuohuadong](/user/zuohuadong) 感谢！正在看状态管理这一块。","createdAt":1570077506622},{"id":12926,"originId":"5d95c286ece3813ad9b9fefb","articleId":2691,"userId":716,"content":"apollo-client-react 等于顶替了 redux+saga 那繁琐重复的一大套，省了太多，实在惊喜。\r\n反过来说 apollo-server 相比 graphql-js 没啥惊喜。","createdAt":1570095750668},{"id":12927,"originId":"5d999364ece3813ad9ba0215","articleId":2691,"userId":545,"content":"后端  prisma    \r\n如果你是 nest.js ＋ Angular 技术栈，还有更多惊喜","createdAt":1570345828402},{"id":12928,"originId":"5d9b03b2ece3813ad9ba03e0","articleId":2691,"userId":716,"content":"谢楼上！后端准备springboot了。","createdAt":1570440114427},{"id":12929,"originId":"5d99e82b865a9844a3019b92","articleId":2692,"userId":751,"content":"加密的话可以使用 crypto 模块","createdAt":1570367531331},{"id":12930,"originId":"5d99f16aece3813ad9ba0309","articleId":2692,"userId":3756,"content":"[@shynome](/user/shynome) 但是没有这种类型的加密方法","createdAt":1570369898095},{"id":12931,"originId":"5d9a90e7ece3813ad9ba0366","articleId":2692,"userId":751,"content":"这就超出我的知识范围了, 等待其他大佬回答","createdAt":1570410727534},{"id":12932,"originId":"5d9ad340ece3813ad9ba03ac","articleId":2692,"userId":109,"content":"crypto 。\r\n如果无签名需求可以考虑用 AES 加密算法。","createdAt":1570427712164},{"id":12933,"originId":"5d9aea92865a9844a3019c6b","articleId":2692,"userId":3339,"content":"用 nodejs 官方的 crypto 库的话，直接用下面的几个方法就可以了，只需要公私钥 https://nodejs.org/dist/latest-v10.x/docs/api/crypto.html\r\ncrypto.privateDecrypt(privateKey, buffer)\r\ncrypto.privateEncrypt(privateKey, buffer)\r\ncrypto.publicDecrypt(key, buffer)\r\ncrypto.publicEncrypt(key, buffer)\r\n\r\n你的这种可以参考一下这个包 https://github.com/rzcoder/node-rsa\r\n\r\n","createdAt":1570433682046},{"id":12934,"originId":"5d956540ece3813ad9b9fe9d","articleId":2695,"userId":3,"content":"应该要给 aaa　bbb 添加新的标签吧？","createdAt":1570071872615},{"id":12935,"originId":"5d9565b4ece3813ad9b9fea1","articleId":2695,"userId":3,"content":"或者你可以给所有的文字添加红色，然后再去掉 job 的颜色，这样就改变了  aaa　bbb 的颜色了","createdAt":1570071988167},{"id":12936,"originId":"5d9569b3ece3813ad9b9feaf","articleId":2695,"userId":111,"content":"[@darrenliuwei](/user/darrenliuwei) 没有标签","createdAt":1570073011128},{"id":12937,"originId":"5d9569f6ece3813ad9b9feb5","articleId":2695,"userId":111,"content":"[@darrenliuwei](/user/darrenliuwei) 是用在爬虫，爬取文本内容　，上面的例子只是为了演示方便","createdAt":1570073078220},{"id":12938,"originId":"5d97186f865a9844a30198a9","articleId":2695,"userId":1741,"content":"css取不到，只能先选父节点，然后取childNodes\r\n或者试试能不能用xpath选择器\r\n```html\r\n<html>\r\n  <head></head>\r\n  <body>\r\n    <div id=\"test\">\r\n      <span class=\"node\">job</span> aaa \r\n      <span class=\"node\">job</span> bbb \r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n```javascript\r\nconst x = document.evaluate(`//span[@class='node']/following-sibling::text()[1]`, document.getElementById('test'));\r\nwhile(true) {\r\n  const it = x.iterateNext();\r\n  if (!it) break;\r\n  console.log(it);\r\n}\r\n\r\n```","createdAt":1570183279695},{"id":12939,"originId":"5d91c5ebece3813ad9b9fb54","articleId":2697,"userId":867,"content":"认命","createdAt":1569834475634},{"id":12940,"originId":"5d91c890865a9844a30193c8","articleId":2697,"userId":168,"content":"[@pzzcn](/user/pzzcn) 真的只能这样？ 个人开发限制太多了，哎， 好不容易搞了个，不甘心啊","createdAt":1569835152542},{"id":12941,"originId":"5d8983324f109e79ef5ff15c","articleId":2698,"userId":109,"content":"请求结束了清理数据？\r\n描述不够仔细，无法判断情况。","createdAt":1569293106630},{"id":12942,"originId":"5d8985435cbcc579bb9ea602","articleId":2698,"userId":3158,"content":"[@waitingsong](/user/waitingsong) 对，这个请求需要到客户端取获取数据回来操作，和客户端socket通讯的时候我吧req和res存起来，等数据回来在触发一个函数再从数组中获取req和res处理数据返回给前端。","createdAt":1569293635358},{"id":12943,"originId":"5d898ac04f109e79ef5ff183","articleId":2698,"userId":109,"content":"> 等获取到数据后传到主程序后在冲数组中获取req，和res对象\r\n\r\n为啥不清理这个数组呢？","createdAt":1569295040698},{"id":12944,"originId":"5d89b4b84f109e79ef5ff28a","articleId":2698,"userId":649,"content":"从你描述来看是不是需要把req, res写到文件或者数据库?  看上去好像没说到需要放内存里的原因...","createdAt":1569305784590},{"id":12945,"originId":"5d89bdbc4f109e79ef5ff2bf","articleId":2698,"userId":3158,"content":"[@waitingsong](/user/waitingsong) 因为一直会有用户在使用啊，就是不断的存，然后再取。老哥，你的意思是每次取之后然后就把数组里面的那一项再删掉吗。我吧问题有编辑了一下","createdAt":1569308092938},{"id":12946,"originId":"5d89beb15cbcc579bb9ea750","articleId":2698,"userId":3158,"content":"[@lzszone](/user/lzszone) 老哥，我又编辑了一下问题，你看一下应该可以看懂我问的什么了","createdAt":1569308337539},{"id":12947,"originId":"5d89cac35cbcc579bb9ea779","articleId":2698,"userId":3758,"content":"个人拙见：首先这个key也就是order_no使用当前时间不严谨,可以拼接上定长的随机字符串，保证其唯一性;\r\n每个请求对应一个client对象,client对象存在map里，请求完成，返回给前端后，删除该client对象。\r\n```js\r\nconst clients = new Map();\r\n// set client\r\nclients.set(order_no, client);\r\n// get client\r\nclients.get(order_no);\r\n// delete client\r\nclients.delete(order_no);\r\n```","createdAt":1569311427870},{"id":12948,"originId":"5d89d13a4f109e79ef5ff327","articleId":2698,"userId":3158,"content":"[@maiime](/user/maiime) 嗯谢谢老哥，我现在也打算这样做","createdAt":1569313082415},{"id":12949,"originId":"5d8b2cbb8b9e1c0d6dc5e02e","articleId":2698,"userId":44,"content":"很好奇这样的流程: \r\n- 第一接口访问调用主程序端 \r\n- 主程序端需要学校客户端的信息向客户端申请，获得信息。\r\n- 主程序端执行后续操作\r\n- 第二个接口访问主程序端 \r\n- 主程序端直接获取缓存的客户端信息\r\n- 主程序端执行后续操作\r\n- ...\r\n问题在于, 第一个接口访问的时候应该提供访问客户端的凭证，单次充值的交易id，主程序端接收凭证访问客户端获取信息，记录在类似于redis里设置超时时间，生成访问token，后续接口需带上对应token和交易id。 交易完成后清除redis缓存","createdAt":1569402043924},{"id":12950,"originId":"5d8c7963e86cfb0d2a645f13","articleId":2698,"userId":2389,"content":"[@SKandAV](/user/SKandAV) 厉害了","createdAt":1569487203583},{"id":12951,"originId":"5d8d5f85e86cfb0d2a6460de","articleId":2698,"userId":3158,"content":"[@fightAndLearn](/user/fightAndLearn) 缓存所有好像不太合适老哥，如果学生更换绑定宿舍之类的，不可能将所有信息都能存到redis，一些固定的参数信息我是一开始就存redis的。","createdAt":1569546117533},{"id":12952,"originId":"5d8d954588dc043ab1b68bcc","articleId":2698,"userId":1259,"content":"老哥，看了你的描述，不知道理解的大概流程对不对，请求进来->访问别的服务获取数据->向前端返回获取到的结果。如果是这样的话，感觉好像没有必要把req,res存起来呀。","createdAt":1569559877045},{"id":12953,"originId":"5d8daed2ece3813ad9b9f14a","articleId":2698,"userId":44,"content":"[@SKandAV](/user/SKandAV) 就没想缓存所有，用什么存什么，看你直接把req和res直接存进去我都懒得写进来，原来你还知道这回事。","createdAt":1569566418845},{"id":12954,"originId":"5d8dd5fc865a9844a3018a16","articleId":2698,"userId":433,"content":"不懂为什么要把req和res都存进去 到一个代码中的数组中去，是有什么数据需要一直保存么，学生公寓交水费不应该是一个不是使用特别频繁的操作项目么，只要进来的时候获取到学校记录然后完成充值操作就可以删除掉这个记录信息了吧， 你缓存学校信息可以 况且如果你项目可以重启且保证用户使用正常的话 这不是证明这个数组里的数据可以二次获取到么,那么不保存有又什么问题呢\r\n","createdAt":1569576444413},{"id":12955,"originId":"5d8dd6d9865a9844a3018a1e","articleId":2698,"userId":433,"content":"况且你找个键值对的数据集如果感觉不行就直接都扔到redis中不就行了么  redis还有各种清除策略，实在不行还可以加大redis的内存 你都用了redis 为啥不吧clients都用redis存取呢","createdAt":1569576665394},{"id":12956,"originId":"5d8ef145865a9844a3018ba1","articleId":2698,"userId":1673,"content":"redis保存登录信息 token，除非你是做mysql的二级缓存，扯到一个同步问题就呵呵","createdAt":1569648965121},{"id":12957,"originId":"5d8ef1b3865a9844a3018ba5","articleId":2698,"userId":1673,"content":"还有客户端与服务端是通过resetful还是socket","createdAt":1569649075581},{"id":12958,"originId":"5d900158ece3813ad9b9f636","articleId":2698,"userId":3158,"content":"[@nwljy](/user/nwljy) 用的socket\r\n","createdAt":1569718616454},{"id":12959,"originId":"5d9066e3ece3813ad9b9f7d6","articleId":2698,"userId":1676,"content":"判断socket是否关闭，如果关闭了就把它从数组里面删掉，定时清理数组","createdAt":1569744611686},{"id":12960,"originId":"5d906407ece3813ad9b9f7c2","articleId":2699,"userId":523,"content":"建议去直接看下源码","createdAt":1569743879602},{"id":12961,"originId":"5d9050de865a9844a3018fc5","articleId":2700,"userId":1713,"content":"网上随便一搜很多啊，虽然可能都不太专业……\r\n\r\nhttps://github.com/demopark/koa-docs-Zh-CN","createdAt":1569738974581},{"id":12962,"originId":"5d8f1a05ece3813ad9b9f526","articleId":2701,"userId":109,"content":"开发阶段还是部署阶段？","createdAt":1569659397786},{"id":12963,"originId":"5d8f2207ece3813ad9b9f548","articleId":2701,"userId":1741,"content":"[@waitingsong](/user/waitingsong) 是一个electron程序，我想实现一个插件功能，能够添加用户提供的模块，但是像react这样的模块要求全局只能使用同一个react，所以不能让用户模块自己安装react，只能想办法让用户模块使用主程序的react","createdAt":1569661447121},{"id":12964,"originId":"5d8f83ecece3813ad9b9f5fd","articleId":2701,"userId":109,"content":"软连接方式？","createdAt":1569686508358},{"id":12965,"originId":"5d90297b865a9844a3018f30","articleId":2701,"userId":1741,"content":"[@waitingsong](/user/waitingsong) 看了node源码后找到了一个合适的解决方案，在Module上做手脚把自己的`node_modules`文件夹添加到了`nodeModulePaths`列表中\r\n\r\nindex.js\r\n```javascript\r\nconst Module = require('module');\r\nconst path = require('path')\r\n\r\nconst _nodeModulePaths = Module._nodeModulePaths\r\nModule._nodeModulePaths = function (from) {\r\n  const paths = _nodeModulePaths(from)\r\n  paths.push(path.resolve(__dirname, 'node_modules'));\r\n  return paths;\r\n}\r\n\r\nconst lodash = require('lodash');\r\nconst outLodash = require('../out');\r\n\r\nconsole.log(lodash === outLodash); // true\r\n```\r\nout.js\r\n```javascript\r\nmodule.exports = require('lodash');\r\n```\r\n或者修改`Module._resolveLookupPaths`可以做到让自己的`node_modules`搜索优先级高于用户模块的`node_modules`","createdAt":1569728891128},{"id":12966,"originId":"5d8dbd1fece3813ad9b9f1ad","articleId":2702,"userId":109,"content":"个人建议，不要使用智障mysql","createdAt":1569570079399},{"id":12967,"originId":"5d8dc92aece3813ad9b9f1ee","articleId":2702,"userId":2023,"content":"[@waitingsong](/user/waitingsong) 那用 excel ?","createdAt":1569573162032},{"id":12968,"originId":"5d8dcb5a865a9844a30189db","articleId":2702,"userId":2023,"content":"debug 找到问题了，解决办法，createTime 查询条件改成 create_time。\r\nsequelize 在最后生成 sql 之前，会对传入的 where 条件和跟数据库的 column 进行比对，比如 `filed: createTime, column: create_time` 这种情况，sequelize 会在 model.js 调用 util.js 的 mapOptionFieldNames 方法进行替换，导致了 where 条件的混乱。\r\n\r\n简单说一下出现问题的关键地方：\r\n1. 原 where 条件 {id, createTime, state} \r\n2. 添加替换后条件 {id, createTime, state, create_time} \r\n3. 删除原有条件 {id, state, create_time} \r\n\r\n![排序 1.png](//static.cnodejs.org/FuDtoPe19IbS52R0fmJ6wCJJoof_)\r\n![排序 3.png](//static.cnodejs.org/Fu1Kc61v4bFR36LT4uNnwXLq3KYh)\r\n\r\n完美打乱，真坑。\r\n","createdAt":1569573722706},{"id":12969,"originId":"5d8de494865a9844a3018a57","articleId":2702,"userId":109,"content":"[@Sirormy](/user/Sirormy) 商业的 mssql, oracle，免费的 pgsql 。 皆由查询规划器根据查询条件以及库表统计信息来分析并决定采用相关索引。 \r\n即 SQL 查询条件位置顺序并不会影响查询计划。\r\n\r\n绝大多数所谓 mysql 优化技术或者优化经验本质上是源于mysql天生弱智，后期发育不良所产生的补救措施。","createdAt":1569580180345},{"id":12970,"originId":"5d8f014cece3813ad9b9f405","articleId":2702,"userId":2023,"content":"[@waitingsong](/user/waitingsong) 确实有些场景下优化方案解决了其他厂商并不存在的问题，MongoDB 的索引机制也得这样写，其他的没用过，不多评论。","createdAt":1569653068446},{"id":12971,"originId":"5d8f0ad3ece3813ad9b9f487","articleId":2702,"userId":109,"content":"[@Sirormy](/user/Sirormy) 多数（数据）不值钱项目用啥技术（数据库）倒是无所谓的。 BATJ 除外，他们用啥都行，因为它们有能力把任何玩具改装成利器。","createdAt":1569655507913},{"id":12972,"originId":"5d708141a7474a231a58909b","articleId":2703,"userId":109,"content":"IEEE 754. 楼主没用过其它开发语言么","createdAt":1567654209116},{"id":12973,"originId":"5d70b216d50f572345911dd4","articleId":2703,"userId":2,"content":"原因我知道，只是在js下，9.9 * 100 的结果是990，大部分类似的计算结果都是对的，但是上面的几个是在js下是例外，关键是还不知道怎样处理，有多一点的，也有少了一点的，有统一的处理方式吗？","createdAt":1567666710583},{"id":12974,"originId":"5d70b291d50f572345911ddb","articleId":2703,"userId":109,"content":"[@dingyuanwu](/user/dingyuanwu) 所有语言都是一样的。要么就用处理浮点数的专用方法/包。 \r\njs 可以考虑这个 https://github.com/josdejong/mathjs\r\n或者在数据库进行处理。","createdAt":1567666833038},{"id":12975,"originId":"5d70b2a2d50f572345911de1","articleId":2703,"userId":2,"content":"![屏幕快照 2019-09-05 下午3.00.19.png](//static.cnodejs.org/FupnFeOWu8C3mw4ucZoCe_qhId8L)\r\n","createdAt":1567666850397},{"id":12976,"originId":"5d71b454a7474a231a58969e","articleId":2703,"userId":187,"content":"![TIM图片20190906091850.png](//static.cnodejs.org/FvJh4KRyfgDcDciPb4Uoi_g849B7)\r\n请你们再也不要攻击js计算不准确了，哎，又给你们普及知识了。惭愧！","createdAt":1567732820565},{"id":12977,"originId":"5d71b7fda7474a231a5896ca","articleId":2703,"userId":1161,"content":"js采用的是双精度浮点数，对于浮点数的计算，结果就是这样子呀","createdAt":1567733757490},{"id":12978,"originId":"5d71c5f2a7474a231a589779","articleId":2703,"userId":1644,"content":"精度问题就从精度角度解决，比如你要求小数点后两位，每次计算完后将数据处理成小数点后两位就行","createdAt":1567737330009},{"id":12979,"originId":"5d71d9baa7474a231a589829","articleId":2703,"userId":2,"content":"但是JS自己实际是做了一些处理的，上面给的例子就是\r\n有的结果和预期的一致，有的不一致\r\n没有办法，我们只能自己解决了\r\n但是还是想知道这种部分对，部分错的现象是怎样产生的\r\n在C、C++或者Java中，精度缺失是都会缺失，但是JS做了部分处理，导致了下面的情况：\r\n![屏幕快照 2019-09-05 下午3.00.19.png](//static.cnodejs.org/FupnFeOWu8C3mw4ucZoCe_qhId8L)","createdAt":1567742394468},{"id":12980,"originId":"5d71e3e4a7474a231a589844","articleId":2703,"userId":2023,"content":"众所周知，精度问题无论哪个语言都需要 Decimal 去处理的，float 精度有问题，Decimal 处理方式是按字符串处理，可以保证绝对的精度。","createdAt":1567744996382},{"id":12981,"originId":"5d71f22ca7474a231a58986c","articleId":2703,"userId":712,"content":"bignumber.js 使用这个库可以处理精度问题","createdAt":1567748652289},{"id":12982,"originId":"5d72a68ed50f5723459124fc","articleId":2703,"userId":1673,"content":"[@Sirormy](/user/Sirormy) Decimal 照样有 入参或者数据库取数 稍微有问题 就呵呵 银行利息啊","createdAt":1567794830602},{"id":12983,"originId":"5d72a782a7474a231a589af9","articleId":2703,"userId":1673,"content":"[@dingyuanwu](/user/dingyuanwu) 测试一下toFixed","createdAt":1567795074190},{"id":12984,"originId":"5d72a81ba7474a231a589afd","articleId":2703,"userId":1673,"content":"// toFixed兼容方法\r\nNumber.prototype.toFixed = function (n) {\r\n    if (n > 20 || n < 0) {\r\n        throw new RangeError('toFixed() digits argument must be between 0 and 20');\r\n    }\r\n    const number = this;\r\n    if (isNaN(number) || number >= Math.pow(10, 21)) {\r\n        return number.toString();\r\n    }\r\n    if (typeof (n) == 'undefined' || n == 0) {\r\n        return (Math.round(number)).toString();\r\n    }\r\n\r\n    let result = number.toString();\r\n    const arr = result.split('.');\r\n\r\n    // 整数的情况\r\n    if (arr.length < 2) {\r\n        result += '.';\r\n        for (let i = 0; i < n; i += 1) {\r\n            result += '0';\r\n        }\r\n        return result;\r\n    }\r\n\r\n    const integer = arr[0];\r\n    const decimal = arr[1];\r\n    if (decimal.length == n) {\r\n        return result;\r\n    }\r\n    if (decimal.length < n) {\r\n        for (let i = 0; i < n - decimal.length; i += 1) {\r\n            result += '0';\r\n        }\r\n        return result;\r\n    }\r\n    result = integer + '.' + decimal.substr(0, n);\r\n    const last = decimal.substr(n, 1);\r\n\r\n    // 四舍五入，转换为整数再处理，避免浮点数精度的损失\r\n    if (parseInt(last, 10) >= 5) {\r\n        const x = Math.pow(10, n);\r\n        result = (Math.round((parseFloat(result) * x)) + 1) / x;\r\n        result = result.toFixed(n);\r\n    }\r\n\r\n    return result;\r\n};","createdAt":1567795227126},{"id":12985,"originId":"5d75a3edd50f57234591298c","articleId":2703,"userId":2,"content":"看来是得自己处理一下，不完后续可能会有问题","createdAt":1567990765111},{"id":12986,"originId":"5d78a78ad50f572345913a97","articleId":2703,"userId":3109,"content":"Number.prototype.toPrecision","createdAt":1568188298523},{"id":12987,"originId":"5d8db2a3ece3813ad9b9f16b","articleId":2703,"userId":2023,"content":"[@nwljy](/user/nwljy) 银行别用 nodejs","createdAt":1569567395161},{"id":12988,"originId":"5d8dbd8088dc043ab1b68c88","articleId":2703,"userId":109,"content":"[@Sirormy](/user/Sirormy) 精度问题和 nodejs 有啥关系？ 难道 js 没有处理 numberic 的库，或者不能在数据库计算结果？ 难道 java 就没这问题？","createdAt":1569570176971},{"id":12989,"originId":"5d88409b53c75a4136b4cac3","articleId":2705,"userId":89,"content":"没有啥意义，你的目的是为了代码保护么？","createdAt":1569210523079},{"id":12990,"originId":"5d88434453c75a4136b4caf3","articleId":2705,"userId":545,"content":"用 ncc","createdAt":1569211204199},{"id":12991,"originId":"5d884b5b95464514f7ed92a2","articleId":2705,"userId":3763,"content":"``` javascript\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst _ = require('lodash');\r\n\r\nvar nodeExternals = require('webpack-node-externals');\r\nmodule.exports =config = {\r\n    target: 'node',\r\n    entry: './dist/main.js',\r\n    externals: [nodeExternals()],\r\n    output: {\r\n        filename: 'main.js',\r\n        path: path.resolve(__dirname, 'dist')\r\n    },\r\n    resolve: {\r\n        extensions: [\".js\"],\r\n    },\r\n    module: {\r\n        rules: [\r\n        ]\r\n    },\r\n    optimization:{\r\n        minimize: false, // <---- disables uglify.\r\n        // minimizer: [new UglifyJsPlugin({\r\n        //     mangle: true\r\n        // })] // if you want to customize it.\r\n    }\r\n};\r\n```\r\n产生一个打包好的main.js文件和node_modules在同一个目录，注意配置中的_externals_字段。","createdAt":1569213275306},{"id":12992,"originId":"5d884c7153c75a4136b4cb06","articleId":2705,"userId":113,"content":"可以参考CabloyJS的模块后端编译机制：[https://cabloy.com/zh-cn/articles/beef7cd0ab0a495284797a5af933a155.html](https://cabloy.com/zh-cn/articles/beef7cd0ab0a495284797a5af933a155.html)","createdAt":1569213553469},{"id":12993,"originId":"5d885bd953c75a4136b4cb50","articleId":2705,"userId":3762,"content":"[@i5ting](/user/i5ting) 算是吧","createdAt":1569217497084},{"id":12994,"originId":"5d885be953c75a4136b4cb54","articleId":2705,"userId":3762,"content":"[@zuohuadong](/user/zuohuadong) 好的  我看看，谢谢了","createdAt":1569217513216},{"id":12995,"originId":"5d885bf853c75a4136b4cb58","articleId":2705,"userId":3762,"content":"[@FreePoi](/user/FreePoi) 好的 谢谢","createdAt":1569217528162},{"id":12996,"originId":"5d885c0253c75a4136b4cb5c","articleId":2705,"userId":3762,"content":"[@zhennann](/user/zhennann) 好的谢谢，我看看","createdAt":1569217538762},{"id":12997,"originId":"5d88604853c75a4136b4cb93","articleId":2705,"userId":89,"content":"[@zhennann](/user/zhennann) 你这介绍也是怪怪的。KoaJS + EggJS + VueJS + Framework7？不清楚它们之间的关系么？\r\n","createdAt":1569218632068},{"id":12998,"originId":"5d88652c95464514f7ed9353","articleId":2705,"userId":113,"content":"[@i5ting](/user/i5ting)  因为CabloyJS是全栈，所以就把前端和后端用到的技术连着一块儿写了。望大佬多赐教🙏","createdAt":1569219884460},{"id":12999,"originId":"5d887e8e53c75a4136b4cd9f","articleId":2705,"userId":89,"content":"[@zhennann](/user/zhennann) EggJS的依赖是KoaJS，写着干嘛呢？ 意义不大。\r\n\r\nVueJS和Framework7感觉也不是很搭啊","createdAt":1569226382438},{"id":13000,"originId":"5d88864395464514f7ed952c","articleId":2705,"userId":113,"content":"[@i5ting](/user/i5ting)  您提到的这两个问题，我是这样考虑的：\r\n1. 主要是考虑到某些初次访问者知道KoaJS而不知道EggJS，所以写上KoaJS，就知道CabloyJS后端与KoaJS的继承关系，然后再建立起对EggJS的认知\r\n2. 原始的Framework7是专门为移动端优化的UI组件库。但是Framework7内置的路由库对多个页面的堆叠支持的非常好（相对vue-router而言）。CabloyJS继承了Framework7的优点，同时进行了改造，从而迁移到PC端，实现了pc=mobile+pad的页面布局。达到的效果就是前端只需开发一套页面就可以通用于mobile和pc。\r\n可以参考一下这张动图效果：[https://github.com/zhennann/cabloy#亮点与痛点](https://github.com/zhennann/cabloy#亮点与痛点)\r\n","createdAt":1569228355100},{"id":13001,"originId":"5d888f5c53c75a4136b4ce25","articleId":2705,"userId":649,"content":"能, 不知道, \r\n看webpack文档吧...\r\n我觉得后端与前端区别是模块规范不同...甚至你如果用libraryTarget: 'umd'的话啥都不用改....","createdAt":1569230684011},{"id":13002,"originId":"5d8c56898b9e1c0d6dc5e26b","articleId":2705,"userId":109,"content":"不如后端用 ts 写，然后 tsconfig 里设置 target 为 es3 ...","createdAt":1569478281822},{"id":13003,"originId":"5d8894a895464514f7ed9585","articleId":2706,"userId":3047,"content":"谢谢大神解答🙏","createdAt":1569232040534},{"id":13004,"originId":"5d8896eb53c75a4136b4ce4f","articleId":2706,"userId":259,"content":"[@472647301](/user/472647301) \r\n```js\r\nimport {Entity, PrimaryGeneratedColumn} from 'typeorm';\r\n\r\n@Entity()\r\nexport class User {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n}\r\n```","createdAt":1569232619074},{"id":13005,"originId":"5d889dae95464514f7ed95bd","articleId":2706,"userId":3047,"content":"[@xjh22222228](/user/xjh22222228) 这个配置默认生成的第一条数据主键id是1，我想要的是生成第一条数据的主键id是我自定义的初始值，比如1000，然后生成第2条数据时是1001","createdAt":1569234350949},{"id":13006,"originId":"5d889f2353c75a4136b4ce91","articleId":2706,"userId":883,"content":"我知道sql方式可以实现：ALTER TABLE Users AUTO_INCREMENT=9000;","createdAt":1569234723337},{"id":13007,"originId":"5d8b6fb68b9e1c0d6dc5e0cd","articleId":2706,"userId":3047,"content":"[@zhongjixiuxing](/user/zhongjixiuxing)  多谢","createdAt":1569419190481},{"id":13008,"originId":"5d8b123c8b9e1c0d6dc5df5c","articleId":2707,"userId":559,"content":"[@atian25](/user/atian25)  求解","createdAt":1569395260401},{"id":13009,"originId":"5d8b1396e86cfb0d2a645a5b","articleId":2707,"userId":559,"content":"[@atian25](/user/atian25) \r\n确认消息需要这样\r\n```js\r\nawait channel.ack(msg);\r\n```","createdAt":1569395606041},{"id":13010,"originId":"5d8b16e9e86cfb0d2a645a7d","articleId":2707,"userId":358,"content":"为什么要在 worker 里面确认？如何确认？ worker 是服务用户请求的。","createdAt":1569396457515},{"id":13011,"originId":"5d8b19b8e86cfb0d2a645aa0","articleId":2707,"userId":559,"content":"[@atian25](/user/atian25) 当消息收到以后，确认被正确处理之后就告诉rabbitmq，这样就不会再次收到这条数据了。我在Subscription的subscribe中确认，因为在这里处理消息\r\n\r\n```js\r\nconst Subscription = require('egg').Subscription;\r\n\r\nclass Tasks extends Subscription {\r\n  static get schedule() {\r\n    return {\r\n      type: 'amqp',\r\n      queue: 'asdfg',\r\n      // env: ['prod'],\r\n      // disable: true,\r\n    };\r\n  }\r\n\r\n  async subscribe(msg) {\r\n  // 这里确认\r\n    await this.app.amqp.channel.ack(msg);\r\n    console.log(msg);\r\n  }\r\n}\r\n\r\nmodule.exports = Tasks;\r\n```","createdAt":1569397176119},{"id":13012,"originId":"5d8b1b938b9e1c0d6dc5dfaa","articleId":2707,"userId":358,"content":"schedule 这边做完后，再发一条消息给 agent 那边去确认？","createdAt":1569397651406},{"id":13013,"originId":"5d8b44c68b9e1c0d6dc5e085","articleId":2707,"userId":559,"content":"[@atian25](/user/atian25) 这个办法可以，通过sendToAgent通知agent来做消息确认操作。","createdAt":1569408198973},{"id":13014,"originId":"5b03c420f3c2e9b5066afe07","articleId":2708,"userId":3683,"content":"passport.js 在 `google oauth`时，会使用nodejs发送一个http请求给google的服务器 （`ps: shadowsocks应该没能代理这个请求`），这个请求国内会被墙，所以会导致每次都登录失败，并不是自己代码的问题。\r\n\r\n如果确定自己写得没有问题，可以租一台国外的主机做次实验就知道了。\r\n\r\n在国内使用google登录是很难行得通的。\r\n\r\n如果非要使用google登录，记得好像域名必须要走https，所以需要事先准备个证书，做实验的话，可以通过 https://certbot.eff.org/lets-encrypt/ubuntuxenial-nginx 快速弄一个","createdAt":1526973472209},{"id":13015,"originId":"5b03d1c2000332b81cf821a7","articleId":2708,"userId":3765,"content":"[@tsq](/user/tsq) 好的，我试试","createdAt":1526976962391},{"id":13016,"originId":"5c8645177ce0df3732426f61","articleId":2708,"userId":3715,"content":"Hi,ZiNai,这个问题你后来怎么解决的~","createdAt":1552303383860},{"id":13017,"originId":"5d8b0fdf8b9e1c0d6dc5df3b","articleId":2708,"userId":3765,"content":"[@qiurenbo](/user/qiurenbo) 后来这个需求不做了😭\r\n不过情况基本就是一楼说的那样。。。\r\n国内网络的问题，还有这些平台需要https，调试的话最好用ngrok做个内网穿透，但是网络确实是根本原因，尤其开发Facebook相关的，动不动就给你把ID锁了。。。","createdAt":1569394655111},{"id":13018,"originId":"5d89f1a08b9e1c0d6dc5dcf4","articleId":2709,"userId":268,"content":"你如果用的是\r\n`http://localhost:4000/api/v2/music/search?q=周杰伦` => `https://api.douban.com/api/v2/music/search?q=周杰伦`\r\n\r\n![image.png](//static.cnodejs.org/FjtqHCqHherkjNZsJuQ6TK1l_plH)","createdAt":1569321376872},{"id":13019,"originId":"5d8a0565e86cfb0d2a6457b9","articleId":2709,"userId":3766,"content":"[@jiangli373](/user/jiangli373) 我好像有点明白了! 我使用的是localhost:3000/api,那么我代理的请求的地址应该也是xxx/api/这种格式 对吗?","createdAt":1569326437088},{"id":13020,"originId":"5d885eb395464514f7ed92ea","articleId":2710,"userId":1673,"content":"[nodej os api](https://nodejs.org/api/os.html) os.cpus()","createdAt":1569218227682},{"id":13021,"originId":"5d886fd453c75a4136b4cce6","articleId":2710,"userId":3767,"content":"[@nwljy](/user/nwljy) 这个获取到的是逻辑处理器数目","createdAt":1569222612405},{"id":13022,"originId":"5d88707753c75a4136b4ccef","articleId":2710,"userId":358,"content":"拿不到，只能是容器那边约定一个环境变量来注入。\r\n\r\n不过都容器化了，一般一个容器里面就只启一个进程了。","createdAt":1569222775878},{"id":13023,"originId":"5d88730495464514f7ed9438","articleId":2710,"userId":545,"content":"[@atian25](/user/atian25)  判断处理器型号，然后   /2   ~\r\n只能最笨的办法了~","createdAt":1569223428410},{"id":13024,"originId":"5d88796553c75a4136b4cd4d","articleId":2710,"userId":1199,"content":"这个不是os的事情吗?它自己会做好os内核的调度.\r\n它告诉你6还是12,你就听它的就得了.","createdAt":1569225061116},{"id":13025,"originId":"5d89c69d4f109e79ef5ff2f3","articleId":2710,"userId":3767,"content":"[@JsonSong89](/user/JsonSong89) 写多进程程序的时候根据cpu核心数开启不同数目的进程，此时如果开启的是两倍于物理内核数的进程，且这些进程是满载的，那么最终处理速度还变慢了（相对于物理内核数目的进程）。","createdAt":1569310365881},{"id":13026,"originId":"5d83501953c75a4136b4bcff","articleId":2712,"userId":187,"content":"这个就要看数据库的竞争实现了，\r\n如果是多线程，node的共享内存是提供原子操作的 Atomics api","createdAt":1568886809029},{"id":13027,"originId":"5d83535c53c75a4136b4bd0e","articleId":2712,"userId":3770,"content":"特地注册了账号来回答这个问题，题主所描述的并不是多线程，只是异步逻辑的执行顺序，题中的代码是直接用了es7新特性async/await写的，不知道题主是否了解其原理，async/await其实只是promise的语法糖，在函数中其实是一个接一个then下去的，而promise的嵌套执行顺序就涉及到了js的事件循环机制（宏事件，微事件，面试常考）（注意node和浏览器环境有细微差别）。上面这些代码始终输出1是必然的，因为所有的get必然先于set，所以这里根本不需要lock（终于回到正题了），而由于线程竞争导致的结果应该是不确定的，这也反证了并不需要题主所说的lock机制. 留个邮箱求职，杭州滨江前端/node岗 2.5年 291106637@qq.com","createdAt":1568887644676},{"id":13028,"originId":"5d83871a95464514f7ed8505","articleId":2712,"userId":3562,"content":"async function main() {\r\n  \tfor(let i=0;i<1000;i++){\r\n  \t\tawait send_req();\r\n  \t}\r\n}\r\n少了个await！循环中没有await，导致所有循环一次性进入异步队列；await是顺序执行，遇到await就丢队列（其向下的代码一并丢），所以`await service_fake_database.get_hit()` 一次全部进队列，获取的全是0，之后的同理。\r\n题外话：您这么做的想法是不是：类似后端实现session认证；如果是这样子的话，可以参照一下express的session中间件的做法","createdAt":1568900890175},{"id":13029,"originId":"5d83a4b053c75a4136b4be0d","articleId":2712,"userId":358,"content":"只提一句：分布式锁 是唯一解法，因为你不可能单机单进程吧？ 然后这个就跟语言没啥关系了。","createdAt":1568908464619},{"id":13030,"originId":"5d83bb8353c75a4136b4be37","articleId":2712,"userId":3769,"content":"[@LeavesSky](/user/LeavesSky) 我特意没有加await，因为main函数是在模拟有很多client（1000个）几乎同时向server发请求，就是说main 是client的行为，handler1应该可以处理这种情况才行（没有await的情况）","createdAt":1568914307069},{"id":13031,"originId":"5d83dc8195464514f7ed858b","articleId":2712,"userId":3769,"content":"[@atian25](/user/atian25) 如果我只是想在自己的进程里，在代码里限制一下执行顺序，如果涉及到分布式锁，还需要进程之间通信，甚至多个机器通信，overhead有点大，而且感觉稍微有点杀鸡用牛刀。还有，能在语言层面实现互斥肯定是最好的，不用引入过多的依赖。","createdAt":1568922753358},{"id":13032,"originId":"5d83deca53c75a4136b4be4e","articleId":2712,"userId":3769,"content":"[@Dodd2013](/user/Dodd2013) 我知道这段代码去掉async await语法糖之后，用promise的写法，也知道这段代码输出结果必然都是1。（我问题描述里有点没说清楚，可能会让人理解成我在问这段代码为什么能达到串行自增的目的）\r\n我希望找到一种handler1的写法，能正确处理同时很多client的hit++。\r\n\r\n这段代码里所有的set在eventloop都排在任何一个get后边（就是说 执行顺序是 client1 get, client2 get, client3 get, …, client1 set, client2 set, client3 set …）\r\n但我想做的事情就是重拍 get和set的顺序，变成 client1 get set, client2 get set, client3 get set这样的串行。","createdAt":1568923338385},{"id":13033,"originId":"5d84680953c75a4136b4c073","articleId":2712,"userId":3770,"content":"单机单线程的话，我有个思路就是自己维护一个事件队列，将一次req的get，set打包，要不然就是锁了，因为第二次的get必须在第一次的set后，而第二次get时如果需要知道第一次req完成了没有，这就必须做一些额外的事情了","createdAt":1568958473902},{"id":13034,"originId":"5d84760553c75a4136b4c10e","articleId":2712,"userId":3769,"content":"[@Dodd2013](/user/Dodd2013) 将get和set打包，这就有点广义的“锁”的意思了，理论上get和set是两次io操作。比如下边这个做法就是用AsyncLock把一次req的get和set打包了。\r\n\r\n```javascript\r\nconst AsyncLock = require('async-lock');\r\nconst lock = new AsyncLock();\r\n\r\n\r\n// Fake_Database is a fake database (or some other I/O)\r\nclass Fake_Database {\r\n  constructor() {\r\n    this._hit = 0;\r\n  }\r\n\r\n  // async get hit count of website\r\n  async get_hit() {\r\n    return this._hit;\r\n  }\r\n\r\n  // async set hit\r\n  async set_hit(hit) {\r\n    this._hit = hit;\r\n  }\r\n}\r\n\r\nconst service_fake_database = new Fake_Database();\r\n\r\n// fake http handler\r\nasync function handler1(req, res) {\r\n  await lock.acquire('hit', async function (done) {\r\n    const hit_old = await service_fake_database.get_hit();\r\n    const hit_new = hit_old + 1;\r\n    await service_fake_database.set_hit(hit_new);\r\n    res.success = true;\r\n    res.hit = hit_new;\r\n    done();\r\n  })\r\n}\r\n\r\n// client A and client B call `handler1` concurrently, and overlaps each other\r\n// A[get hit] -> B[get hit] -> A[set hit] -> B[set hit]\r\n// only one hit is counted while 2 clients visited handler\r\n// There is no race condition in memory, but race in logic.\r\n\r\n// I know that we can increment hit atomically inside database.\r\n// What if we face some case that we must separate it to 2 I/Os?\r\n// First read and then write, or some more complicated actions.\r\n\r\n\r\nlet count = 0;\r\n\r\nasync function send_req() {\r\n  const req = {}, res = {};\r\n  await handler1(req, res);\r\n  // const hit = await service_fake_database.get_hit();\r\n  console.log(`req${count++} -- ${res.hit}`);\r\n}\r\n\r\nasync function main() {\r\n  console.time(\"hit_time\");\r\n  await Promise.all(Array.from(new Array(1000)).map(x => send_req()))\r\n  console.timeEnd(\"hit_time\");\r\n}\r\n\r\nmain();\r\n\r\n```","createdAt":1568962053707},{"id":13035,"originId":"5d84782d53c75a4136b4c11d","articleId":2712,"userId":3769,"content":"[@Dodd2013](/user/Dodd2013) “要不然就是锁了” 这句话是指node里面最好不出现锁吗？但感觉这种情况避免不了广义的“锁”的存在。广义的“锁”是指在代码块里有互斥、保护critial area的作用，但不一定是多线程模型里面由kernel提供的开销比较大的锁（比如锁内存，和上古单核时代关闭时钟中断之类的）。","createdAt":1568962605317},{"id":13036,"originId":"5d84787e95464514f7ed889e","articleId":2712,"userId":135,"content":"**我这个做法和楼主的 asynclock 一个道理...**\r\n这种情况避免不了 \"锁\" 吧\r\n```\r\nfunction getHandler(){\r\n  let waitLock = Promise.resolve();\r\n  return async function handler1(req, res) {\r\n    let lastLock = waitLock;\r\n    let next;\r\n    waitLock = new Promise(r=>(next = r));\r\n    await lastLock;\r\n    try{\r\n      const hit_old = await service_fake_database.get_hit();\r\n      const hit_new = hit_old + 1;\r\n      await service_fake_database.set_hit(hit_new);\r\n      res.success = true;\r\n      res.hit = hit_new;\r\n    }catch(e){\r\n      console.error(e);\r\n    }finally{\r\n      next();\r\n    }\r\n  }\r\n}\r\nconst handler1 = getHandler()\r\n```\r\n上面的代码就能实现锁了.\r\n(然而我觉得我上面的代码有内存泄露问题...)\r\n","createdAt":1568962686510},{"id":13037,"originId":"5d847c4d95464514f7ed88c0","articleId":2712,"userId":3769,"content":"[@abiuDoIT](/user/abiuDoIT) 试了，你的代码确实能原子自增，我还没完全看懂2333","createdAt":1568963661365},{"id":13038,"originId":"5d8483f453c75a4136b4c175","articleId":2712,"userId":3769,"content":"[@abiuDoIT](/user/abiuDoIT) 我对于异步编程仅仅算个票友，比较好奇，nodejs写server的时候，会遇到我说的这种需要“锁”的情况吗？遇到了会通过什么办法绕过吗？","createdAt":1568965620508},{"id":13039,"originId":"5d84878053c75a4136b4c1cc","articleId":2712,"userId":3770,"content":"既然这个问题存在需要保护的critial area，所以广义的锁是避免不了的，锁=阻止后来者先于前者操作完之前进行操作, 后者如果想要成立，那么这就是所谓的锁。","createdAt":1568966528863},{"id":13040,"originId":"5d84892095464514f7ed894e","articleId":2712,"userId":3769,"content":"[@Dodd2013](/user/Dodd2013) 但为什么相关的轮子这么少，AsyncLock也只有两位数的star。","createdAt":1568966944115},{"id":13041,"originId":"5d84893795464514f7ed8952","articleId":2712,"userId":3770,"content":"这种get又set的操作，实际中应该交给数据库做吧（没有经验，瞎猜的），逃了逃了","createdAt":1568966967722},{"id":13042,"originId":"5d8489fa95464514f7ed895a","articleId":2712,"userId":3770,"content":"这个题很有趣，我尝试将send req用settimeout包起来，结果竟然出现了不同的答案，可以深究一下","createdAt":1568967162249},{"id":13043,"originId":"5d848a5495464514f7ed895e","articleId":2712,"userId":3770,"content":"感觉实际情况中的http请求，可能还是和这个会有差异，可以试着用jmeter然后搞一个真实的server试试","createdAt":1568967252661},{"id":13044,"originId":"5d84915d53c75a4136b4c22a","articleId":2712,"userId":135,"content":"[@albert-ch-q](/user/albert-ch-q) 一般不需要,数据库之类的io都有自带锁, 程序里的变量因为是单线程同步操作 也不需要.","createdAt":1568969053150},{"id":13045,"originId":"5d84944953c75a4136b4c24f","articleId":2712,"userId":3770,"content":"我用服务器试过了，情况是一样的，问题确实存在，仔细想了一下，为什么这个库用的人少的原因可能是解决这个问题还不至于用到库吧，几行代码就能实现一个简单的等待机制。","createdAt":1568969801440},{"id":13046,"originId":"5d857cf853c75a4136b4c3c4","articleId":2712,"userId":3562,"content":"![批注 2019-09-21 092820.jpg](//static.cnodejs.org/FqEY1ZLA1AZuKFPoeFQzKsMTyGCq)\r\n这个周下载量，很棒了。","createdAt":1569029368596},{"id":13047,"originId":"5d8582c095464514f7ed8b57","articleId":2712,"userId":21,"content":"有点意思的问题，关注了","createdAt":1569030848169},{"id":13048,"originId":"5d858fa095464514f7ed8b96","articleId":2712,"userId":3769,"content":"[@LeavesSky](/user/LeavesSky) 不太了解npm的download数量多少算多，只是看到github上star的数量是挺少的。","createdAt":1569034144254},{"id":13049,"originId":"5d8726ad53c75a4136b4c7f4","articleId":2712,"userId":3308,"content":"借助redis也可以解决部分场景下的问题。","createdAt":1569138349747},{"id":13050,"originId":"5d887de053c75a4136b4cd8d","articleId":2712,"userId":649,"content":"不管是不是自己实现...我觉得思路就 锁 或者 队列","createdAt":1569226208853},{"id":13051,"originId":"5d84259b53c75a4136b4bebe","articleId":2713,"userId":545,"content":"1.  方便做多站，nginx 根据域名的不同，做不同端口的反向代理。\r\n2. 安全，nginx 的用户是 nobody ，权限低。\r\n3. https 快，C 的优势。\r\n4. 方便做负载均衡或者其他的一些操作。","createdAt":1568941467479},{"id":13052,"originId":"5d84274195464514f7ed8614","articleId":2713,"userId":2246,"content":"好，谢谢，看来 Nginx 的场景很多","createdAt":1568941889455},{"id":13053,"originId":"5d842bbc53c75a4136b4beef","articleId":2713,"userId":2246,"content":"> 2 安全，nginx 的用户是 nobody ，权限低\r\n\r\n通过 `apt install nginx`  安装后，默认用户变成了 `www-data`：\r\n```nginx\r\nuser www-data;\r\nworker_processes auto;\r\npid /run/nginx.pid;\r\n```\r\n\r\n可能原因是：\r\n> on earlier Unixes and Linux distributions daemon (for example a webserver) were called under the nobody user. If a malicious user gained control over such a daemon, the damage he can perform is limited to what the daemon can. But the problem is, when there are multiple daemons running with the nobody user, this has no sense anymore. **That's why today such daemons have their own user**.\r\n\r\n引用来自 https://unix.stackexchange.com/a/186581/232345","createdAt":1568943036319},{"id":13054,"originId":"5d886add53c75a4136b4cc77","articleId":2713,"userId":99,"content":"用","createdAt":1569221341130},{"id":13055,"originId":"5d848d1e53c75a4136b4c1fd","articleId":2714,"userId":516,"content":"```\r\nif(mongodb)\r\n // $unwind 了解一下\r\n ```","createdAt":1568967966545},{"id":13056,"originId":"5d84a60d53c75a4136b4c2ae","articleId":2714,"userId":3771,"content":"[@nnliang](/user/nnliang)  可惜，我用的mysql","createdAt":1568974349627},{"id":13057,"originId":"5d857f1b95464514f7ed8b39","articleId":2714,"userId":1644,"content":"个人不建议这种数据使用内联的方式，效率会比较低；取对应的数据在应用层做就行。不过还是留下一个解决方案：\r\n\r\n```\r\nselect * from comment as A left join comment as B on A.id = B.parent_id where A.parent_id is null\r\n```\r\n\r\n源数据：\r\n![image.png](//static.cnodejs.org/FjhdASXxcyG0Dp7MW_KYn6wey4Gf)\r\n\r\n结果数据：\r\n![image.png](//static.cnodejs.org/FqM6iyZeIpdqEdfwSrE4tGPMzozU)\r\n\r\n","createdAt":1569029915107},{"id":13058,"originId":"5d8817b053c75a4136b4c945","articleId":2714,"userId":726,"content":"获取到所有数据后，自己可以用js处理下啊","createdAt":1569200048577},{"id":13059,"originId":"5d883f5995464514f7ed9278","articleId":2714,"userId":3771,"content":"[@JianmingXia](/user/JianmingXia)  感谢","createdAt":1569210201980},{"id":13060,"originId":"5d883fa095464514f7ed927e","articleId":2714,"userId":3771,"content":"[@cnvp](/user/cnvp) 目前就是js处理的，但还是想找找sql的实现","createdAt":1569210272987},{"id":13061,"originId":"5d885f3f53c75a4136b4cb80","articleId":2714,"userId":1673,"content":"[@xiaoyao316](/user/xiaoyao316) https://blog.csdn.net/acmain_chm/article/details/4142971 musql递归tree","createdAt":1569218367948},{"id":13062,"originId":"5d708798d50f572345911b91","articleId":2715,"userId":3772,"content":"目前公司薪资水平多少？","createdAt":1567655832063},{"id":13063,"originId":"5d70959ea7474a231a58914b","articleId":2715,"userId":73,"content":"目前的薪资是15","createdAt":1567659422024},{"id":13064,"originId":"5d71af64d50f5723459120d3","articleId":2715,"userId":59,"content":"沉淀一下，多看看面试题。有时间补个专升本","createdAt":1567731556986},{"id":13065,"originId":"5d71b266d50f5723459120e9","articleId":2715,"userId":1161,"content":"我最近也在重看计算机网络。。。","createdAt":1567732326625},{"id":13066,"originId":"5d71c7f1a7474a231a58977f","articleId":2715,"userId":1644,"content":"前端技术栈没有深入了解；从后端技术栈（以 Node 为例）看，除了 Node 之外，还需要 MySQL、Redis 等后端常用技术栈有深入研究，Node 的基础原理也是如此。\r\n前端我想也是如此，除了正在使用框架的原理（至少撸过源码，了解实现），Html CSS JS  的基础也需要补足；如果能了解到其它框架，也理解为什么要采用当前框架就更好了。\r\n珍惜每次面试机会，面试不过也要让自己有所收获~\r\n","createdAt":1567737841912},{"id":13067,"originId":"5d7242a6d50f572345912483","articleId":2715,"userId":3773,"content":"test","createdAt":1567769254407},{"id":13068,"originId":"5d72430fa7474a231a589a62","articleId":2715,"userId":3773,"content":"好像回复之后通过reload实现的数据更新","createdAt":1567769359107},{"id":13069,"originId":"5d74f2f8a7474a231a589eb5","articleId":2715,"userId":2030,"content":"1. 工作 3 年, 你的路线中没有展现出 3年的深度;\r\n2. 只看了你的 tcp 那一章分享, 为什么 tcp 握手需要 3次, 挥手却需要 4次, 为什么需要等待 2MSL;\r\n3. 缺乏程序员目空一切的傲娇;","createdAt":1567945464405},{"id":13070,"originId":"5d8758a695464514f7ed9027","articleId":2715,"userId":73,"content":"[@chenzeZzz](/user/chenzeZzz) 嗯嗯，是的，要有深度，目前确实不足，2MSL也没有深究。 目空一切还傲娇？这个。。。😂😂","createdAt":1569151142742},{"id":13071,"originId":"5d8758e595464514f7ed902b","articleId":2715,"userId":73,"content":"[@JianmingXia](/user/JianmingXia) 嗯嗯，原理的学习不能放弃，同时也要扩展广度","createdAt":1569151205838},{"id":13072,"originId":"5d84f18695464514f7ed8ac3","articleId":2716,"userId":109,"content":"提交么成功？","createdAt":1568993670894},{"id":13073,"originId":"5d85822c95464514f7ed8b50","articleId":2716,"userId":3458,"content":"[@waitingsong](/user/waitingsong) 应该没成功，但是并没有提示错误，接口正常返回了postID。我试了下不用事务，可以正常插入数据","createdAt":1569030700897},{"id":13074,"originId":"5d85e23195464514f7ed8d08","articleId":2716,"userId":3457,"content":"[@wuyugege](/user/wuyugege) 我需要问你个问题，我按照EGG官方引入了sequelize后，创建模型时也指定了主键autoIncrement，插入数据的时候却不会自动增长。报错Duplicate entry '0' for key 'PRIMARY'， 你有遇到吗","createdAt":1569055281537},{"id":13075,"originId":"5d85e44e53c75a4136b4c5b1","articleId":2716,"userId":3458,"content":"[@gejigejigeji](/user/gejigejigeji) 这个没有遇到过，你最好上点代码","createdAt":1569055822448},{"id":13076,"originId":"5d85e62e53c75a4136b4c5d4","articleId":2716,"userId":3457,"content":"model/User.js\r\n![1.png](//static.cnodejs.org/FuFn_UMFLhLgopC6bbODNfoof7_h)\r\n\r\ncontroller/home.js\r\n![2.png](//static.cnodejs.org/FvMukxK1MldStuEiHp8EXA3QK57Z)\r\n\r\n\r\n基本上和官网一样没有改动，创建数据库表是使用sequelize.model.sync()方法来创建的，用navicate for mysql查看表也是能看到主键ID自动增长的。\r\n但是使用sequelize.model.create()方法插入数据的时候就会报错Duplicate entry ‘0’ for key ‘PRIMARY’，原因是主键id一直都是0，主键重复导致的。","createdAt":1569056302340},{"id":13077,"originId":"5d847e4153c75a4136b4c147","articleId":2717,"userId":1713,"content":"1.一台一台分别拷贝上去，在分别运行起来\r\n2.做个中间仓库（例如github等），在对应的服务器上拉取，运行\r\n3.docker\r\n\r\n等等等....","createdAt":1568964161962},{"id":13078,"originId":"5d848c1f95464514f7ed897a","articleId":2717,"userId":516,"content":"pm2 deploy\r\nJenkins\r\n....","createdAt":1568967711724},{"id":13079,"originId":"5d85805895464514f7ed8b46","articleId":2717,"userId":1644,"content":"再补几个；\r\n- Shell 脚本 ssh + scp\r\n- K8S + Docker\r\n\r\n多提供一些信息才能给你更有方向性的解决方案","createdAt":1569030232937},{"id":13080,"originId":"5d83351653c75a4136b4bc05","articleId":2718,"userId":358,"content":"被门夹过的问题能提问吗？在线求解答。。。。","createdAt":1568879894729},{"id":13081,"originId":"5d83379595464514f7ed82f8","articleId":2718,"userId":3776,"content":"被门夹过的问题能提问吗？在线求解答。。。。","createdAt":1568880533064},{"id":13082,"originId":"5d8338f295464514f7ed8317","articleId":2718,"userId":3777,"content":"可以 但是不能空腹吃","createdAt":1568880882508},{"id":13083,"originId":"5d83432453c75a4136b4bc92","articleId":2718,"userId":36,"content":"....","createdAt":1568883492738},{"id":13084,"originId":"5d834f4495464514f7ed8414","articleId":2718,"userId":1936,"content":"门可以吃，核桃不行","createdAt":1568886596148},{"id":13085,"originId":"5d84170853c75a4136b4be6a","articleId":2718,"userId":79,"content":"额额","createdAt":1568937736714},{"id":13086,"originId":"5d8428fd53c75a4136b4bed3","articleId":2718,"userId":3778,"content":"不能，核桃补脑+核桃被门夹 = 脑子被门夹。 所以不能吃，可以给隔壁小孩吃","createdAt":1568942333766},{"id":13087,"originId":"5d84686b95464514f7ed87d7","articleId":2718,"userId":2062,"content":"这要看夹的怎么样了，如果夹烂了，那肯定不能吃了。","createdAt":1568958571216},{"id":13088,"originId":"5d846c1853c75a4136b4c0bd","articleId":2718,"userId":22,"content":"被门夹过的答案能回答吗？在线求解答。。。。","createdAt":1568959512821},{"id":13089,"originId":"5d84880a53c75a4136b4c1d8","articleId":2718,"userId":3779,"content":"这要看被夹了多久 超过三秒应该就不能吃了吧","createdAt":1568966666565},{"id":13090,"originId":"5d84924695464514f7ed8993","articleId":2718,"userId":516,"content":"被门夹过的答案能回答吗？在线求解答。。。。","createdAt":1568969286868},{"id":13091,"originId":"5d82c16c95464514f7ed7ee9","articleId":2719,"userId":3222,"content":"求大佬解答......","createdAt":1568850284869},{"id":13092,"originId":"5d82d6f595464514f7ed7f56","articleId":2719,"userId":1574,"content":"![Snipaste_2019-09-19_09-12-55.png](//static.cnodejs.org/FgvrOO3LlWGVCbf5LT7BvB2wAdrq)\r\n看Content-Type,这个url返回的其实是一张图片，你保存的时候直接把文件名后缀改成 .gif 就能看到验证码了。 ","createdAt":1568855797537},{"id":13093,"originId":"5d82e91d95464514f7ed8035","articleId":2719,"userId":3222,"content":"[@yuanliwei](/user/yuanliwei) 我试了 但是还是裂图 大佬 能发下你代码我看看吗","createdAt":1568860445264},{"id":13094,"originId":"5d842c9295464514f7ed864f","articleId":2719,"userId":1574,"content":"```javascript\r\nconst superagent = require('superagent')\r\nconst fs = require('fs')\r\nsuperagent\r\n  .get('http://61.142.33.204/CheckCode.aspx')\r\n  .pipe(fs.createWriteStream('abc.gif'))\r\n\r\n```","createdAt":1568943250046},{"id":13095,"originId":"5d82d96253c75a4136b4b8db","articleId":2721,"userId":358,"content":"https://github.com/oliver-moran/jimp","createdAt":1568856418168},{"id":13096,"originId":"5d83148d95464514f7ed81b3","articleId":2721,"userId":187,"content":"前端分分钟搞定的事情，非要用后端做","createdAt":1568871565560},{"id":13097,"originId":"5d83497b53c75a4136b4bcbe","articleId":2721,"userId":867,"content":"[@atian25](/user/atian25) 神器啊，我之前还不知道这个","createdAt":1568885115297},{"id":13098,"originId":"5d83530295464514f7ed8435","articleId":2721,"userId":358,"content":"[@ounana](/user/ounana) 前端根据后端返回的字符串来生成验证码么 [手动狗头]","createdAt":1568887554683},{"id":13099,"originId":"5d7b79e7d50f5723459140c2","articleId":2723,"userId":3781,"content":"alsotang大佬，您应该最有经验了，哈哈","createdAt":1568373223888},{"id":13100,"originId":"5d7efb0695464514f7ed7216","articleId":2723,"userId":3781,"content":"大佬呢","createdAt":1568602886454},{"id":13101,"originId":"5d7f21f7cac77d1859936f36","articleId":2723,"userId":545,"content":"linode 或者 vultr\r\n不过日本和新加坡IP 封的比较多。\r\n搬瓦工的 美国GIA 也可以考虑","createdAt":1568612855612},{"id":13102,"originId":"5d8213c453c75a4136b4b73c","articleId":2723,"userId":18,"content":"用阿里云或者腾讯云。国外的普遍访问速度慢","createdAt":1568805828715},{"id":13103,"originId":"5d81df9295464514f7ed7c0e","articleId":2724,"userId":545,"content":"node.js 处理，然后正则匹配","createdAt":1568792466759},{"id":13104,"originId":"5d81e06195464514f7ed7c1c","articleId":2724,"userId":3782,"content":"[@zuohuadong](/user/zuohuadong) 太复杂。这个excel数据太多，还得把数据导入数据库。excel有查询命令吗","createdAt":1568792673427},{"id":13105,"originId":"5d81ef8195464514f7ed7cc4","articleId":2724,"userId":545,"content":"导入数据库干啥？  xlsx 或者 csv 直接操作，都有库","createdAt":1568796545210},{"id":13106,"originId":"5af4025a02591040485bad0c","articleId":2726,"userId":1570,"content":"有人遇到过这种问题没？","createdAt":1525940826657},{"id":13107,"originId":"5af430a90a36e5312d6ecf76","articleId":2726,"userId":1570,"content":"来人关注下呀\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1525952681015},{"id":13108,"originId":"5d81971053c75a4136b4b33e","articleId":2726,"userId":3785,"content":"[@lovegnep](/user/lovegnep)  嗨，哥们最终你的这个问题是如何解决的呢？劳烦赐教，我们现在也碰到跟你一样的问题。\r\n我们参考[这个链接](https://jira.mongodb.org/browse/SERVER-32034)    所讲这个应该是v3.6.0的bug，在v3.6.4,v3.7.1版本分别已修复。\r\n但我们目前线上版本是：MongoDB shell version v3.6.6   MongoDB server version: 3.6.4，依旧会复现该问题。","createdAt":1568773904565},{"id":13109,"originId":"5d81c46053c75a4136b4b433","articleId":2726,"userId":1570,"content":"[@luochenxi](/user/luochenxi) 忘了有没有解决了。","createdAt":1568785504696},{"id":13110,"originId":"5d725455a7474a231a589a95","articleId":2727,"userId":1644,"content":"这个问题可能去对应的社区询问更加快捷，顺便 google 了下，找到一个可能匹配的答案参考：https://developers.weixin.qq.com/community/develop/doc/0008ccc36400c829c558f6f395bc00?_at=1560044592467","createdAt":1567773781786},{"id":13111,"originId":"5d818f8e95464514f7ed7a17","articleId":2727,"userId":3473,"content":"3q  ","createdAt":1568771982424},{"id":13112,"originId":"5d7e24b495464514f7ed70d5","articleId":2728,"userId":98,"content":"每个分支的开发者在向其它分支合并时都要先合并其它分支的代码，解决完全冲突才能合并到其它分支\r\ndev分支本身就不是稳定的版本，当然可以包含未测试的代码","createdAt":1568548020527},{"id":13113,"originId":"5d7e259ea500d514da655784","articleId":2728,"userId":652,"content":"[@zengming00](/user/zengming00) 也就是说有冲突都是很正常的了？合并的时候，发生冲突是很正常的啊？有没有一种一劳永逸的方法？","createdAt":1568548254517},{"id":13114,"originId":"5d7e4f1295464514f7ed7112","articleId":2728,"userId":98,"content":"[@sunfeng90](/user/sunfeng90) 有冲突当然正常了，除非只有你一个人开发，所以冲突应该由提pr的人来解决，一劳永逸的方法就是不管三七二十一 git push -f 哈哈","createdAt":1568558866047},{"id":13115,"originId":"5d7e5d58a500d514da6557ce","articleId":2728,"userId":109,"content":"楼上的 -f 当心被砍哟。。","createdAt":1568562520658},{"id":13116,"originId":"5d7e5dd3a500d514da6557d2","articleId":2728,"userId":109,"content":"[@sunfeng90](/user/sunfeng90) 冲突是很正常的。不管你用啥版本管理软件，甚至用 ftp ，都是存在冲突的。","createdAt":1568562643249},{"id":13117,"originId":"5d7eecc295464514f7ed71b7","articleId":2728,"userId":652,"content":"[@zengming00](/user/zengming00) [@waitingsong](/user/waitingsong) 好的，谢谢各位。大家觉得我们团队git流程规范怎么样？有没有需要改进的地方？我觉得我们缺少打Tag这一环节","createdAt":1568599234944},{"id":13118,"originId":"5d7ef99695464514f7ed7207","articleId":2728,"userId":158,"content":"git flow 创建 feature可以指定base呀，默认才是develop分支","createdAt":1568602518493},{"id":13119,"originId":"5d7efc85cac77d1859936e6e","articleId":2728,"userId":23,"content":"我们开发feature分支是从develop切出来的，hotfix分支才是从release分支切。","createdAt":1568603269569},{"id":13120,"originId":"5d7efe44cac77d1859936e7d","articleId":2728,"userId":1644,"content":"[@sunfeng90](/user/sunfeng90) tag 只是一个小点，我觉得你们现在的 tag 在每次 merge 到 release 中已经体现了一些。\r\n另外，我有个问题，你们 develop 分支的意义是什么，如果只是为了测试使用，为什么不直接把 feature 分支发到测试环境测试。","createdAt":1568603716412},{"id":13121,"originId":"5d7f12df95464514f7ed72d1","articleId":2728,"userId":103,"content":"每个团队都有适合自己的git flow，强行使用别人的方式就会出现问题。冲突不可避免，你们的问题是任务分配不合理，比如下单，支付本来就是一条线上的，肯定会修改同一份代码，分为多个人来做怎么可能不冲突","createdAt":1568608991252},{"id":13122,"originId":"5d7f984395464514f7ed7555","articleId":2728,"userId":652,"content":"[@JianmingXia](/user/JianmingXia)  develop分支就是测试分支，跑测试环境上的。如果多人同时开发多个feature，只有一台测试服务器，那么如何做到多个测试同时测试呢？所有我们就有了develop。大家将feature同时合并到develop上，然后将develop部署到测试环境。","createdAt":1568643139745},{"id":13123,"originId":"5d7f988095464514f7ed7559","articleId":2728,"userId":652,"content":"[@yuedun](/user/yuedun) 貌似你说的有道理。有时候任务紧急，谁闲了就谁做。确实存在分配任务不合理的情况。","createdAt":1568643200410},{"id":13124,"originId":"5d7f98c8cac77d1859937169","articleId":2728,"userId":652,"content":"[@zhhb](/user/zhhb) 这个base是基于哪个呢？我理解的是我们现在的relase，也就是线上跑的测试没有问题的代码分支。","createdAt":1568643272484},{"id":13125,"originId":"5d7faa14cac77d1859937190","articleId":2728,"userId":109,"content":"[@sunfeng90](/user/sunfeng90) 大家都往develop合，有冲突是正常的，只要 develop 也跑测试怎么会有问题呢？","createdAt":1568647700911},{"id":13126,"originId":"5d808dc295464514f7ed77f9","articleId":2728,"userId":262,"content":"可以新增一个staging分支, 用于部署待测试的功能, 该分支也是QA接触的分支; 这样可以将QA与development隔离, 因为development是develop-oriented的, 可以容忍bug.","createdAt":1568705986399},{"id":13127,"originId":"5d80eb7f53c75a4136b4b246","articleId":2728,"userId":652,"content":"[@keith666666](/user/keith666666) 那此时的development的分支是完全测试完的分支，没有任何Bug的？","createdAt":1568729983236},{"id":13128,"originId":"5d81061195464514f7ed7984","articleId":2728,"userId":262,"content":"[@sunfeng90](/user/sunfeng90) 此时development分支是开发分支, 可以容忍bug; staging是测试分支, 是开发觉得ok了给测试来测的, 测试ok就可以推生产了","createdAt":1568736785645},{"id":13129,"originId":"5d81119553c75a4136b4b27e","articleId":2728,"userId":1673,"content":"话说nodejs 开发很少用maven么\r\n","createdAt":1568739733885},{"id":13130,"originId":"5d81877e53c75a4136b4b2d0","articleId":2728,"userId":652,"content":"[@nwljy](/user/nwljy) 对的，反正我经历的公司没有用这个的。","createdAt":1568769918209},{"id":13131,"originId":"5d80464e53c75a4136b4afa0","articleId":2729,"userId":21,"content":"完整flow:\r\n```yaml\r\nname: my-i18n build&publish\r\n\r\non:\r\n  pull_request:\r\n    branches:\r\n      - master\r\n  push:\r\n    branches:\r\n      - master\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v1\r\n      - uses: actions/setup-node@v1\r\n        with:\r\n          node-version: 12\r\n      - run: npm ci\r\n      - run: npm test\r\n\r\n  publish-npm:\r\n    needs: build\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v1\r\n      - uses: actions/setup-node@v1\r\n        with:\r\n          node-version: 12\r\n          registry-url: https://registry.npmjs.org/\r\n      - run: npm publish\r\n        env:\r\n          NODE_AUTH_TOKEN: ${{secrets.npm_token}}\r\n\r\n  publish-gpr:\r\n    needs: build\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v1\r\n      - uses: actions/setup-node@v1\r\n        with:\r\n          node-version: 12\r\n          registry-url: https://npm.pkg.github.com/\r\n          scope: '@zy445566'\r\n      - run: npm publish\r\n        env:\r\n          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}\r\n\r\n```","createdAt":1568687694895},{"id":13132,"originId":"5d805fc895464514f7ed7719","articleId":2729,"userId":109,"content":"把 url 写到packages.json 中应该没问题","createdAt":1568694216933},{"id":13133,"originId":"5d806c7253c75a4136b4b037","articleId":2729,"userId":21,"content":"[@waitingsong](/user/waitingsong) \r\n我不是只要推送npm仓库或gpr仓库，我是想两个一起推送。但始终只能推送成功一个，所以我觉得可能是flows写的有问题。\r\n如果我修改package. json相当于强制指定了其中一个仓库，就不能同时推送到两个仓库上了","createdAt":1568697458236},{"id":13134,"originId":"5d80b27853c75a4136b4b1bc","articleId":2729,"userId":109,"content":"应该还是 beta 版缘故。","createdAt":1568715384814},{"id":13135,"originId":"5d775a04d50f572345913539","articleId":2730,"userId":362,"content":"这个好像不能把，你可以再创建一个，把新的开了，然后配置一下反向代理，再把旧的关了","createdAt":1568102916640},{"id":13136,"originId":"5d78541da7474a231a58adcf","articleId":2730,"userId":150,"content":"做不到，要么就把配置文件做到 数据库 里面，通过更新 数据库 从而做到热更新配置文件。","createdAt":1568166941428},{"id":13137,"originId":"5d785c7ed50f572345913807","articleId":2730,"userId":725,"content":"egg现在必须重启后才能生效","createdAt":1568169086833},{"id":13138,"originId":"5d788444d50f572345913939","articleId":2730,"userId":3458,"content":"要是有一个类似NGINX的reload命令就好了","createdAt":1568179268294},{"id":13139,"originId":"5d788ce5d50f572345913970","articleId":2730,"userId":2030,"content":"配置放外部存储, 定时去读","createdAt":1568181477600},{"id":13140,"originId":"5d7cb21ad50f5723459141e0","articleId":2730,"userId":1104,"content":"docker了解一下","createdAt":1568453146313},{"id":13141,"originId":"5d80236753c75a4136b4aeca","articleId":2730,"userId":3193,"content":"配合 nginx reload，修改 upstream 就行了，我写过一个 egg-deploy","createdAt":1568678759600},{"id":13142,"originId":"5d8061a853c75a4136b4b02b","articleId":2730,"userId":89,"content":"使用etcd这种来存放配置。","createdAt":1568694696220},{"id":13143,"originId":"5d789910a7474a231a58af97","articleId":2731,"userId":3786,"content":"好的建议也可以，麻烦大家了。\r\n这个问题，可能更应该通过后端解决，但是因为自己前端经验不足，想借着这个问题锻炼一下自己，所以想问问大家，看大家有没有什么思路","createdAt":1568184592861},{"id":13144,"originId":"5d78ec75a7474a231a58b161","articleId":2731,"userId":3262,"content":"你都知道原因了还问啥，限制set次数就好了，函数节流了解一下","createdAt":1568205941929},{"id":13145,"originId":"5d79e877a7474a231a58b378","articleId":2731,"userId":1507,"content":"上函数节流,然后 v-for 的元素加 key,key 不要用 index,用 id","createdAt":1568270455091},{"id":13146,"originId":"5d7f3b2695464514f7ed7396","articleId":2731,"userId":59,"content":"写一个定时器，定时 set 页面。socket 不直接 set 值","createdAt":1568619302111},{"id":13147,"originId":"5d7a2a84a7474a231a58b513","articleId":2732,"userId":195,"content":"实战中 分布式事务很少用，更别说第三方了，比如你接入第三方支付宝支付，支付宝不可能配合你弄一个两阶段提交的。\r\n而且系统之间做事务也不是单单一方支持就能实现的。\r\n最简单实用的方法就是标记法，一件事情发生了，在字段做个标记。最后写个对账程序跟三方系统配合，定时核对每一笔业务。\r\n支付宝内部很多系统每天都要跑对账程序的，而且是双方都要配合。\r\n所以不论你的问法，还是你的提法，都是有问题的，不要把一个简单的业务处理想复杂了。\r\n另外如果做企业级业务系统的话，或者网站后台，推荐使用平台开发工具：https://wuyuan.io","createdAt":1568287364522},{"id":13148,"originId":"5d7f351ccac77d1859936fbe","articleId":2732,"userId":3692,"content":"[@jquery](/user/jquery) 了解了,谢谢.","createdAt":1568617756846},{"id":13149,"originId":"5d771ae6d50f5723459132cc","articleId":2733,"userId":428,"content":"[@alsotang](/user/alsotang)","createdAt":1568086758712},{"id":13150,"originId":"5d771b12a7474a231a58a903","articleId":2733,"userId":428,"content":"[@mariodu](/user/mariodu) [@atian25](/user/atian25)","createdAt":1568086802017},{"id":13151,"originId":"5d771b59a7474a231a58a90f","articleId":2733,"userId":428,"content":"ejs不熟悉，以前用handbar，直接layout： ‘’ 写一下就可以换layout了","createdAt":1568086873066},{"id":13152,"originId":"5d771d6ed50f5723459132ee","articleId":2733,"userId":428,"content":"我用得 cnodejs开源代码","createdAt":1568087406930},{"id":13153,"originId":"5d773dbca7474a231a58aa56","articleId":2733,"userId":358,"content":"ejs 源码也就那么几行，自己看下不就得了。我印象中 ejs 这种残废品是不支持 layout 的。","createdAt":1568095676182},{"id":13154,"originId":"5d7b3f66a7474a231a58b5f8","articleId":2733,"userId":428,"content":"[@atian25](/user/atian25) 好吧，那cnodejs怎么选择ejs了呢，我以前用得handlejs,如果全换掉，要很多时间。。。","createdAt":1568358246812},{"id":13155,"originId":"5d7b4df8d50f5723459140a0","articleId":2733,"userId":358,"content":"[@html5col](/user/html5col) 因为 cnode 那一版的源码是 7，8 年前写的。","createdAt":1568361976107},{"id":13156,"originId":"5d7f038395464514f7ed7271","articleId":2733,"userId":428,"content":"好吧，可以更新了，lol","createdAt":1568605059461},{"id":13157,"originId":"5d7f075395464514f7ed729c","articleId":2733,"userId":358,"content":"[@html5col](/user/html5col) 最新的 egg-cnode 源码，可以去提 PR 把 ejs 升级为 nunjucks","createdAt":1568606035524},{"id":13158,"originId":"5d7a119da7474a231a58b49d","articleId":2734,"userId":314,"content":"如果不让用户知道，你就内部把这个异常给消化掉，抛个500给前端就好啦","createdAt":1568280989115},{"id":13159,"originId":"5d7a596fd50f572345913fda","articleId":2734,"userId":109,"content":"可以考虑把捕获的异常写入日志，然后把日志号丢给前端。","createdAt":1568299375650},{"id":13160,"originId":"5d7eff23cac77d1859936e84","articleId":2734,"userId":1644,"content":"比如有个 service 层，这里会有个异常捕获，比如注册用户，然后用户名重复时数据库抛出异常，此时捕获到提示：“注册用户失败”。当然，在全局也会有个异常捕获，提示是：“服务端开小差去了。。。（类似这种）”。总之至少有两个异常捕获，一个与业务相关，另外一个是兜底，防止出现其他意外情况，返回给用户一些奇怪的信息。\r\n另外，如果要把数据库异常过滤，可以看下 mongoose 抛出的错误类型，基于错误类型做不同的异常处理。","createdAt":1568603939069},{"id":13161,"originId":"5d2553b5ad75d374b58bdb4d","articleId":2735,"userId":354,"content":"举个例子？哪些大公司用 go  / node，比例多少？小公司里面 go / node 的比例多少？","createdAt":1562727349714},{"id":13162,"originId":"5d25591aad75d374b58bdb83","articleId":2735,"userId":3604,"content":"[@cctv1005s](/user/cctv1005s) 我自己的经验，工作 6 年，在两家创业公司待过，都是 node。现在鹅厂突然要大面积铺开 go。再加上论坛一些反馈得出来的感观印象。","createdAt":1562728730343},{"id":13163,"originId":"5d255a26ad75d374b58bdb9d","articleId":2735,"userId":98,"content":"别听他们瞎说，php才是最好的语言，php才是主流","createdAt":1562728998529},{"id":13164,"originId":"5d257ce28a8bf909209cd10a","articleId":2735,"userId":3166,"content":"别听他们瞎说，php才是最好的语言，php才是主流","createdAt":1562737890032},{"id":13165,"originId":"5d2582738a8bf909209cd141","articleId":2735,"userId":89,"content":"纯后端，java转go的是有，但比例不会很高。纯前端，肯定用node。\r\n\r\n所以你的问题根本站不住\r\n\r\n阿里目前java和js（node）为主，go的比例极小，可能还不如scala。。。\r\n","createdAt":1562739315198},{"id":13166,"originId":"5d25dc658a8bf909209cd38f","articleId":2735,"userId":356,"content":"那换个思维来想，go是传说还是真的适合大小型后端开发。适合需要开发和维护成本","createdAt":1562762341996},{"id":13167,"originId":"5d25dcf48a8bf909209cd3a2","articleId":2735,"userId":1161,"content":"用不用node跟公司的大小应该是没什么关系吧，主要还是看自己的应用场景","createdAt":1562762484353},{"id":13168,"originId":"5d26a0d3fa8ef0094e063ff2","articleId":2735,"userId":3370,"content":"无疑，go肯定是越来越多了。","createdAt":1562812627558},{"id":13169,"originId":"5d26f9d48a8bf909209cd87e","articleId":2735,"userId":513,"content":"[ 别听他们瞎说，php才是最好的语言，php才是主流  ]   <<<哈哈哈，现在这个口号好经典啊！","createdAt":1562835412276},{"id":13170,"originId":"5d27d654fa8ef0094e06434a","articleId":2735,"userId":3788,"content":"别听他们瞎说，php才是最好的语言，php才是主流","createdAt":1562891860614},{"id":13171,"originId":"5d2a4cc0fa8ef0094e064a34","articleId":2735,"userId":110,"content":"go 比较稳定一点，执行效率也比 node 好，方便部署。node的优点是比 go 灵活得多，各种平台都可以执行 js 有不少创新的东西，但太灵活了出错的机会也多。所以大公司以稳求胜代码健壮度第一可能会更倾向于选 go，小公司需要不断创新革新灵活一点还是 node 方便。不过我个人觉得可以折中下用 typescript","createdAt":1563053248785},{"id":13172,"originId":"5d2b5439fa8ef0094e064c2c","articleId":2735,"userId":108,"content":"也不过是招人的问题。\r\n\r\n小公司招不到写 Go 的人，薪资水平摆在那里，但是可以招到 PHP 或者 node 的人","createdAt":1563120697713},{"id":13173,"originId":"5d397bc19969a529571d72ad","articleId":2735,"userId":3155,"content":"Node出活快啊，js各种语法糖。Go就比较简洁了，就那么点基础api，写起来不如node方便，但是胜在强类型，够稳！","createdAt":1564048321889},{"id":13174,"originId":"5d71f4eba7474a231a58988b","articleId":2735,"userId":712,"content":"[@zhixuanziben](/user/zhixuanziben) node也可以使用typescript进行类型约束的","createdAt":1567749355590},{"id":13175,"originId":"5d720cc5a7474a231a58992b","articleId":2735,"userId":1097,"content":"go 语法简单，自带工具类强制一致性格式，没有那么多花里胡哨语法，强类型，可以直接编译平台相关二进制格式，高性能，稳定性安全性好。来看 go完胜。","createdAt":1567755461790},{"id":13176,"originId":"5d720e21a7474a231a589939","articleId":2735,"userId":1644,"content":"很好奇从哪里得出这个结论的？","createdAt":1567755809983},{"id":13177,"originId":"5d7249cfd50f572345912495","articleId":2735,"userId":89,"content":"[@JianmingXia](/user/JianmingXia) yy的呗，哈哈哈","createdAt":1567771087347},{"id":13178,"originId":"5d7281d9d50f5723459124e3","articleId":2735,"userId":18,"content":"[@i5ting](/user/i5ting) 腾讯现在c++背景的人，普遍对golang非常有兴趣尝试。java在腾讯基本没有，除非安卓。\r\n\r\n而node应该在各个地方都是前端带起来的，对于小公司预算有限人员有限的情况下，出活快+省钱是很重要的，但很多前端转node的人，写出来的代码，很让人操心。太缺少unix知识了。","createdAt":1567785433818},{"id":13179,"originId":"5d732491a7474a231a589b61","articleId":2735,"userId":652,"content":"别听他们瞎说，php才是最好的语言，php才是主流","createdAt":1567827089408},{"id":13180,"originId":"5d7379f9d50f57234591261e","articleId":2735,"userId":2485,"content":"C&C++换到go性能没什么损耗, 开发效率提升, 写出来的代码Bug应该要少不少.\r\nNodejs写一些非核心, 性能要求不高的,  效率会更高, 但是如果是对于大流量, 生产环境, 稳定性要求高的系统, 相对来说可能不那么胜任.","createdAt":1567848953253},{"id":13181,"originId":"5d7391dad50f572345912653","articleId":2735,"userId":89,"content":"[@alsotang](/user/alsotang) \r\n\r\n- 1）java依然是主流方案，使用最多，最好，最稳定的后端方案\r\n- 2）go的占比有多少，是跟c++占比来比较的话，那么，真的没多少，是不是？","createdAt":1567855066038},{"id":13182,"originId":"5d73c457a7474a231a589d44","articleId":2735,"userId":18,"content":"[@i5ting](/user/i5ting) \r\n1）java只能说在阿里是主流方案吧？在腾讯对应的是c++\r\n2）go占比从存量来说不如c++，但是在接口层开发来说，我这边对接的系统基本是php和golang的，c++写的接口我对接得不多。","createdAt":1567867991263},{"id":13183,"originId":"5d770de3a7474a231a58a880","articleId":2735,"userId":36,"content":"node上手快白，go还是很稳的","createdAt":1568083427380},{"id":13184,"originId":"5d79dd64a7474a231a58b338","articleId":2735,"userId":89,"content":"[@alsotang](/user/alsotang) java是业界主流方案。\r\n\r\njava ee占比国内还是第一的。\r\n\r\n不只是阿里的。","createdAt":1568267620252},{"id":13185,"originId":"5d7bb287d50f572345914124","articleId":2735,"userId":18,"content":"[@i5ting](/user/i5ting) 业界的话，应该确实是java第一，占有率和工具链都是。","createdAt":1568387719962},{"id":13186,"originId":"5d7a057ad50f572345913ec3","articleId":2736,"userId":570,"content":"你的sql太长了，超过mysql的设定","createdAt":1568277882196},{"id":13187,"originId":"5d7a0b87d50f572345913f17","articleId":2736,"userId":161,"content":"找到了，获取数据的时候有条写入sql，这条sql超出了限制，重新设定了msql的超出值就好了","createdAt":1568279431871},{"id":13188,"originId":"5d79e47fa7474a231a58b35e","articleId":2737,"userId":3789,"content":"需要看下你的  app.js 和 demo 文件夹的位置关系，文件结构可以贴出来吗？","createdAt":1568269439142},{"id":13189,"originId":"5d779fc1d50f572345913684","articleId":2738,"userId":109,"content":"受信证书还是自签发？","createdAt":1568120769974},{"id":13190,"originId":"5d77a172a7474a231a58ace1","articleId":2738,"userId":3790,"content":"[@waitingsong](/user/waitingsong) node服务器没有证书，主站www证书是买的","createdAt":1568121202780},{"id":13191,"originId":"5d77c7eba7474a231a58ad2e","articleId":2738,"userId":109,"content":"[@s7smile](/user/s7smile) 证书不会是我痛签发的吧。。\r\n可以试试把证书的 intermediate 中间证书和顶级ca的证书安装到node所在服务器中。","createdAt":1568131051439},{"id":13192,"originId":"5d78485ea7474a231a58ad6c","articleId":2738,"userId":97,"content":"php 肯定会跑在 nginx 后面的吧，在 nginx 这边做个反向代理呢","createdAt":1568163934973},{"id":13193,"originId":"5d7856e9d50f5723459137a9","articleId":2738,"userId":3790,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 这个操作起来简单，今天我试一下，结果告诉大家","createdAt":1568167657149},{"id":13194,"originId":"5d785732d50f5723459137ae","articleId":2738,"userId":3790,"content":"[@waitingsong](/user/waitingsong) 我曾试过把node也做成https  牵扯到证书比较繁琐，没有去尝试","createdAt":1568167730262},{"id":13195,"originId":"5d789ff0d50f572345913a46","articleId":2738,"userId":3790,"content":"[@waitingsong](/user/waitingsong) [@hsiaosiyuan0](/user/hsiaosiyuan0)  感谢两位同行提供的思路方法，现在把解决后的代码贴出来供遇到同样问题的朋友参考。\r\n在nginx  443下增加\r\n\t\t  location /socket{\r\n\t\t\t# switch off logging\r\n\t\t\taccess_log off;\r\n\t\t\t\r\n\t\t\t# redirect all HTTP traffic to localhost:3000\r\n\t\t\tproxy_pass http://localhost:8080;\r\n\t\t\tproxy_set_header X-Real-IP $remote_addr;\r\n\t\t\tproxy_set_header Host $host;\r\n\t\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n\t\t\t\r\n\t\t\t# WebSocket support (nginx 1.4)\r\n\t\t\tproxy_http_version 1.1;\r\n\t\t\tproxy_set_header Upgrade $http_upgrade;\r\n\t\t\tproxy_set_header Connection \"upgrade\";\r\n\r\n\t\t\t# Path rewriting\r\n\t\t\trewrite /socket/(.*) /$1 break;\r\n\t\t\tproxy_redirect off;\r\n\t\t}\r\n\t\t\r\n客户端页面文件更改为\r\n    <script>\r\n\r\n\t\tvar socket = io(\"wss://www.domain.com\",{path:'/socket/socket.io'});\r\n\t\t$('form').submit(function(){\r\n注意是  ws://    改为  wss://\r\n\t\t","createdAt":1568186352119},{"id":13196,"originId":"5d78b367a7474a231a58b0d5","articleId":2738,"userId":3790,"content":"![QQ图片20190911163933.png](//static.cnodejs.org/FoLuovQzyQ0yjIrsyx2TE2rKPi3-)\r\n不过问题来了， 通过nginx后   外面还有CDN     请求走了GET POST   有点耗费系统资源","createdAt":1568191335387},{"id":13197,"originId":"5d7745bad50f5723459134a0","articleId":2739,"userId":187,"content":"私钥加密，公钥解密的这个过程就叫数字签名，因为只有公钥能打开私钥加密过的数据","createdAt":1568097722700},{"id":13198,"originId":"5d7849d0d50f572345913727","articleId":2739,"userId":97,"content":"文中 md5 的最好叫做“摘要”而不是“签名”，“摘要”指的是消息的指纹信息，而“签名”除了需要消息的指纹信息以外，还需要“身份信息”，这部分是通过非对称加密实现的","createdAt":1568164304191},{"id":13199,"originId":"5d78644bd50f57234591387c","articleId":2739,"userId":146,"content":"如楼上所说，“摘要”只是个指纹信息，主要用作匹配；数字签名则可以携带更多信息；典型场景，就是验证 CA：电脑一般都是内置许多 CA 证书（公钥），打开 Https 显示为加密绿色（chrome），则说明数字签名正确识别，实际上是本地用 CA 公钥解密了数字签名（CA私钥加密）","createdAt":1568171083051},{"id":13200,"originId":"5d789cbdd50f5723459139ec","articleId":2739,"userId":109,"content":"> 实际上是本地用 CA 公钥解密了数字签名（CA私钥加密）\r\n\r\n不只是用本地 CA 公钥。 是用证书链上所有公钥，首先是网站（域名对应）证书的公钥，然后是上级（中间）公钥。","createdAt":1568185533404},{"id":13201,"originId":"5d7879aad50f572345913904","articleId":2740,"userId":3793,"content":"请问楼主解决了吗  可否分享一下","createdAt":1568176554840},{"id":13202,"originId":"5d784ba6d50f572345913735","articleId":2741,"userId":523,"content":"一般技术面都不是最终面试，我做面试官的时候，都是说让他再等一下","createdAt":1568164774415},{"id":13203,"originId":"5d78504dd50f572345913762","articleId":2741,"userId":1644,"content":"一般不会这么直白说，跟他说等 HR 通知吧","createdAt":1568165965750},{"id":13204,"originId":"5d777407a7474a231a58ac39","articleId":2742,"userId":545,"content":"对比文档就知道了，得看 API 是否一样。","createdAt":1568109575500},{"id":13205,"originId":"5d7774daa7474a231a58ac3f","articleId":2742,"userId":545,"content":"不过，为什么不直接用 ioredis ？","createdAt":1568109786939},{"id":13206,"originId":"5d74c100a7474a231a589e68","articleId":2744,"userId":109,"content":"我们项目中使用的这个 http://sheetjs.com ","createdAt":1567932672006},{"id":13207,"originId":"5d75a3c2d50f57234591297d","articleId":2744,"userId":2,"content":"https://www.npmjs.com/package/xlsx\r\n可以试试","createdAt":1567990722989},{"id":13208,"originId":"5d75a672a7474a231a589fd8","articleId":2744,"userId":2092,"content":"https://github.com/mgcrea/node-xlsx","createdAt":1567991410415},{"id":13209,"originId":"5d75ef9ba7474a231a58a3c4","articleId":2744,"userId":1644,"content":"https://github.com/SheetJS/js-xlsx 就挺好","createdAt":1568010139303},{"id":13210,"originId":"5d75ff5ca7474a231a58a498","articleId":2744,"userId":1504,"content":"谢谢楼上推荐,1楼2楼4楼的马上就能用到,好像是在JS里调用Excel的,目前采用3楼的,直接在服务端调用的,,谢谢大家","createdAt":1568014172696},{"id":13211,"originId":"5d770233d50f5723459131fb","articleId":2744,"userId":829,"content":"https://github.com/exceljs/exceljs 前后都可以","createdAt":1568080435472},{"id":13212,"originId":"5d6fd817a7474a231a588dc6","articleId":2745,"userId":109,"content":"自造轮子初级拼字符串模式，有注入风险。\r\n不如用query builder.","createdAt":1567610903315},{"id":13213,"originId":"5d703fd9a7474a231a588dea","articleId":2745,"userId":3797,"content":"自己用没什么问题，给别人用会存在注入的风险;\r\n\r\n比如 `Fields` 是 ： ` 1 from dual; delete from Customer; select * `; \r\n那么生成出来之后会变成: `SELECT 1 from dual; TRUNCATE Order User; select * FROM Customer where CustNo ='${custNo}'`;\r\n\r\n**这就被sql注入了，你的 `Order`， `User` 表中的数据就没了。**\r\n\r\n--- \r\n\r\n这就是一中非常简单的注入方式，可有很多办法来解决，比如：\r\n- 通过字符串的匹配把 `TRUNCATE`， `DELETE` 等关键字做过滤，出现这些关键字就 throw 异常，反馈给业务层即可。\r\n\r\n---\r\n\r\n自己造轮子挺好的，思考和实现过程中会遇到问题，带着问题去看看别人的轮子还能学到更多。\r\n","createdAt":1567637465778},{"id":13214,"originId":"5d708c57a7474a231a589136","articleId":2745,"userId":628,"content":"有 sql 注入风险。\r\n要么用 orm 要么 query builder。\r\n","createdAt":1567657047970},{"id":13215,"originId":"5d71b947d50f572345912110","articleId":2745,"userId":1161,"content":"直接orm框架啊，不推荐直接操作数据库","createdAt":1567734087670},{"id":13216,"originId":"5d71c510d50f572345912198","articleId":2745,"userId":1644,"content":"除了 SQL 注入之外，复杂 SQL 场景的应用也是一个潜在问题，建议先用一些 ORM 试试","createdAt":1567737104953},{"id":13217,"originId":"5d71f254a7474a231a589871","articleId":2745,"userId":187,"content":"你应该判定 fields 必须为CustNo, CustName, CustAddr, CustPhone 中的一个，这样就没有注入风险了","createdAt":1567748692148},{"id":13218,"originId":"5d71f272d50f572345912292","articleId":2745,"userId":187,"content":"字符串字面量联合类型，了解一哈","createdAt":1567748722015},{"id":13219,"originId":"5d7202f0a7474a231a5898e3","articleId":2745,"userId":400,"content":"还是推荐你用Sequelize框架吧","createdAt":1567752944708},{"id":13220,"originId":"5d7220cad50f5723459123c1","articleId":2745,"userId":107,"content":"确实很骚...... 占位符了解下？","createdAt":1567760586775},{"id":13221,"originId":"5d723918d50f572345912472","articleId":2745,"userId":22,"content":"![](//static.cnodejs.org/FmdcUygz4EBr9dORUJls4EB_fX-s)","createdAt":1567766808260},{"id":13222,"originId":"5d737ab5d50f572345912624","articleId":2745,"userId":2485,"content":"lz你说的这个想法是和什么对比,  然后你觉得你这种做法的好处在什么地方?\t\r\n","createdAt":1567849141998},{"id":13223,"originId":"5d73ccead50f572345912743","articleId":2745,"userId":1673,"content":"mysql format","createdAt":1567870186633},{"id":13224,"originId":"5d74ff83a7474a231a589ed7","articleId":2745,"userId":36,"content":"typeorm","createdAt":1567948675800},{"id":13225,"originId":"5d76fa8fd50f5723459131c6","articleId":2745,"userId":1002,"content":"楼主看一下我这个[typeorm-query](https://github.com/qiushijie/typeorm-query)，这样来拿字段Customer: {CustNo, CustName, CustAddr, CustPhone}，不止单表多表也可以，站在typeorm巨人的肩膀上做的查询dsl","createdAt":1568078479250},{"id":13226,"originId":"5d6ce11ea7474a231a5883a2","articleId":2746,"userId":1713,"content":"如果用[这个](https://www.npmjs.com/package/mysql)包的话，这样写\r\n````\r\n conn.query(sql, args, (error, result) => {})\r\n args 是个数组\r\n````\r\n存储过程一样","createdAt":1567416606087},{"id":13227,"originId":"5d6ce7f3a7474a231a5883e5","articleId":2746,"userId":3158,"content":"[@im-here](/user/im-here) 老哥，我在稍微问细一点啊，args这个数组是不是包括输入参数和输出参数呢，比如我要调用的存储过程名字是AAABBB，他需要3个输入参数，一个int型的 1，然后一个是字符串类型的 ’abc‘,还有一个是时间，然后输出的内容是int型的。我之所以怎么问是因为我用mssql的时候是需要怎么构造输入参数和输出参数的。还是说mysql模块里面不用呢\r\n![22222.png](//static.cnodejs.org/FvKEp4JRpmbLL3qFNXwV9eMg3SPz)","createdAt":1567418355591},{"id":13228,"originId":"5d6cfee3a7474a231a588454","articleId":2746,"userId":1713,"content":"[@SKandAV](/user/SKandAV) 输出参数不清楚，之前用的存储过程都没有输出参数。 你测试一下不就知道了，我猜应该含输出参数的吧？","createdAt":1567424227552},{"id":13229,"originId":"5d6e0e6aa7474a231a5887d9","articleId":2746,"userId":2503,"content":"await conn.query(sql, args）  第一个参数的sql , 应该可以拼成 'call generate_xxxxNo(\"' + prev + '\");'括号里面传几个参数，你来定。","createdAt":1567493738695},{"id":13230,"originId":"5d70ca02a7474a231a5894d8","articleId":2746,"userId":3158,"content":"[@zurmokeeper](/user/zurmokeeper) 谢谢大佬，已经解决了","createdAt":1567672834327},{"id":13231,"originId":"5d71cb74a7474a231a5897a2","articleId":2746,"userId":2503,"content":"[@SKandAV](/user/SKandAV) OK","createdAt":1567738740890},{"id":13232,"originId":"5d722985d50f57234591242b","articleId":2746,"userId":3158,"content":"[@zurmokeeper](/user/zurmokeeper) 老哥，问个事。就是我调用之后现在没有吧输出参数输出出来。是这样的\r\n![147.png](//static.cnodejs.org/FmSpLpxTn2FiSXZspXz_s0XLxm8D)\r\n![258.jpg](//static.cnodejs.org/FqBaES14AHjuQpigos7ZlIDWvJ6m)","createdAt":1567762821446},{"id":13233,"originId":"5d7233d2d50f57234591245e","articleId":2746,"userId":2503,"content":"[@SKandAV](/user/SKandAV) 有什么问题吗？你的node版本是很低吗？怎么还不用await或者promise化，还用回调函数的形式呢？","createdAt":1567765458157},{"id":13234,"originId":"5d72a52ad50f5723459124ef","articleId":2746,"userId":1673,"content":"不熟就得问 你很牛逼[@zurmokeeper](/user/zurmokeeper)  回调除了地狱 有啥不好 执行效率？ 异步？","createdAt":1567794474015},{"id":13235,"originId":"5d72a58dd50f5723459124f3","articleId":2746,"userId":1673,"content":"[@SKandAV](/user/SKandAV) \r\nvar resultSet_=(JSON.stringify(results));//'[{\"count\":\"1\",\"type\":\"RangeError\"},{\"count\":\"3\",\"type\":\"ReferenceError\"}]'\r\n  resultSet = JSON.parse(resultSet_);//把results字符串转为json对象\r\n如果返回值没有格式化， 记得格式化一下返回值\r\n","createdAt":1567794573933},{"id":13236,"originId":"5d737adaa7474a231a589c49","articleId":2746,"userId":2485,"content":"最好不要用存储过程..\r\n互联网公司基本上没有用存储过程的..","createdAt":1567849178357},{"id":13237,"originId":"5d760f81d50f572345912fb1","articleId":2746,"userId":2503,"content":"[@nwljy](/user/nwljy) 我就是问一下为什么不用而已，你又何必呢","createdAt":1568018305092},{"id":13238,"originId":"5d76fa50d50f5723459131bc","articleId":2746,"userId":3158,"content":"[@nwljy](/user/nwljy) 已经解决了，谢谢。存储过程是遗留问题了。一直在用。我也没法改。刚刚接手的项目","createdAt":1568078416000},{"id":13239,"originId":"5d64884e421846662d9850d2","articleId":2747,"userId":3458,"content":"从来没写过单元测试，我们团队也是，都是直接在开发环境跑一下，没啥问题直接发测试环境，让测试测，有bug再改。至今没有理解单元测试的意义。","createdAt":1566869582379},{"id":13240,"originId":"5d648a3c421846662d9850e5","articleId":2747,"userId":1088,"content":"2个方案并没有冲突，涉及到DB你可以使用方案1，在setup中建立测试库，填充必要数据，在teardown中拆除测试库。每次运行用例都应该保证测试库是全新的。\r\n涉及三方服务的，你可以以mock为主","createdAt":1566870076281},{"id":13241,"originId":"5d6ddc07a7474a231a58867e","articleId":2747,"userId":26,"content":"1. 数据库，如果数据库是私有的自己开发的，那你没办法单独测试，如果是市面上能安装的，那你单元测试环境装一个并不是难的事情，不管是shell环境还是docker，都可以很顺滑的完成，另外数据库mock数据是要单元测试统一准备的，运行的时候插入数据库，你所需要的就是提供一个可访问的数据库dsn。 \r\n2. 网络io，建议用eggjs写的话网络请求就用自带的，因为自带的egg会有钩子，这个请求可以mock，这样你就可以测试更底层的代码逻辑。\r\n单元测试在一个复杂逻辑的系统下我觉得的确很难去做，不管是分层还是对各种类型的io，但是如果一个系统分层做得不错，又比如微服务模式的开发，单元测试是不错的提升效率的办法，因为以联调起来，debug非常难受，如果单个服务或者某个层面的服务已经对一些关键的接口进行了边缘条件的测试，那么一般错误都会只是服务和服务间的约定，而出现逻辑性概率就低了很多。","createdAt":1567480839432},{"id":13242,"originId":"5d6dffd1a7474a231a588739","articleId":2747,"userId":36,"content":"[@wuyugege](/user/wuyugege) 你这有点猛啊，重构的时候怎么办，改动一点的时候，怎么保证其他的都是OK的，测试在全测一遍吗","createdAt":1567490001934},{"id":13243,"originId":"5d6e0820a7474a231a5887bf","articleId":2747,"userId":3458,"content":"[@dengnan123](/user/dengnan123) 重构是不可能重构的。有改动的话，全回归，人工测。这应该是小团队的现状吧，外包没见过写单元测试的，虽然我们不是外包，但只有几个人。","createdAt":1567492128560},{"id":13244,"originId":"5d71d7f1d50f57234591223d","articleId":2747,"userId":1644,"content":"在我的实际运用中，只有一个方案：\r\n- 不会 Mock 部分：本服务的数据库及缓存不会 Mock，这部分如果 Mock 了整个测试就是一个空壳子。比如我测试一个注册用户的场景，直接 Mock 注册用户的结果是 useId: 1，然后断言 userId = 1。这种测试用例不明白它的用处是什么，流程没有完全覆盖，如果就是 插入数据表这个操作有问题呢？\r\n- Mock 部分：一般来说，调用其它服务（比如你跟另外一个项目组合作，他们用的 C++，可能他们服务都没有开发完，或者你本地部署不了）、第三方服务的部分会 Mock。\r\n","createdAt":1567741937009},{"id":13245,"originId":"5d71d8b0d50f57234591224b","articleId":2747,"userId":2,"content":"没有会搞单元测试的人带，新人搞的话，覆盖率和测试用例都是一个问题\r\n我们之前也搞，但是现在业务压力上来了，感觉搞不动了\r\n写功能的时间都不够了，写测试的精力相对就少了很多","createdAt":1567742128871},{"id":13246,"originId":"5d7223c8d50f5723459123db","articleId":2747,"userId":850,"content":"不写用例，这个项目只会越做越痛苦。然后就会出现各种 bug，有些是新写的，有些是改动导致的。最后没人敢接盘。\r\n大型项目只所以稳定就是有比较完备测试用例，保证有问题代码第一时间发现并改掉。说单元测试没用的，可能并不关注代码质量和项目的稳定性。\r\n\r\n[@hopperhuang](/user/hopperhuang) 数据库的测试，你可以在 ci 机器上起测试数据库。推荐使用 sequelize 这类 orm 吧，已经把 mock 什么的方法都做好了～","createdAt":1567761352878},{"id":13247,"originId":"5d76220ea7474a231a58a66d","articleId":2747,"userId":1840,"content":"[@okoala](/user/okoala)  确实，看到orm 的文档了，可以用egg-sequelize 来跑单元测试。","createdAt":1568023054191},{"id":13248,"originId":"5d764ccdd50f5723459130ee","articleId":2747,"userId":2030,"content":"首先还是推荐用 fake date 测一下数据库 sql 部分的, 如果你想 mock, 可以重写 mode 里的方法\r\n\r\n![image.png](//static.cnodejs.org/FjC9ckpt0duoWLNJuVJHDR9_SNuo)","createdAt":1568033997784},{"id":13249,"originId":"5d637d27dcd8e81121a6109c","articleId":2748,"userId":545,"content":"可以，如果要稳定的话，还是建议linux ，ubuntu 或者 centos 。\r\n\r\nwin 尽量用最新。 node  老项目用10，新项目用12","createdAt":1566801191841},{"id":13250,"originId":"5d638318dcd8e81121a610c9","articleId":2748,"userId":1504,"content":"[@zuohuadong](/user/zuohuadong) 谢谢,node8.9.2 我大概是2017年写的项目 应该算新项目?","createdAt":1566802712696},{"id":13251,"originId":"5d638c41421846662d984e2b","articleId":2748,"userId":1933,"content":"```\r\n主要是Linux排查问题我有恐慌感\r\n```\r\n\r\n既然写node，Linux是绕不过去的。","createdAt":1566805057632},{"id":13252,"originId":"5d638e8adcd8e81121a6114a","articleId":2748,"userId":98,"content":"好像性能会严重下降","createdAt":1566805642311},{"id":13253,"originId":"5d63bbeedcd8e81121a61296","articleId":2748,"userId":545,"content":"[@Yangk030208](/user/Yangk030208)  事实上，linux 各种报错都有详细的日志。反而更安全\r\nwin .... emmm 蓝屏一个？","createdAt":1566817262677},{"id":13254,"originId":"5d66380fdcd8e81121a61a56","articleId":2748,"userId":1199,"content":"[@zuohuadong](/user/zuohuadong) win server几乎不存在蓝屏的","createdAt":1566980111933},{"id":13255,"originId":"5d67cc51421846662d985c64","articleId":2748,"userId":545,"content":"[@JsonSong89](/user/JsonSong89)  如果不间断运行 3-5年，你还敢保证么？   所以 linux 稳定。","createdAt":1567083601259},{"id":13256,"originId":"5d691bcfdcd8e81121a622df","articleId":2748,"userId":1460,"content":"[@zuohuadong](/user/zuohuadong) 新项目用12？这么勇？","createdAt":1567169487288},{"id":13257,"originId":"5d69c13a421846662d986020","articleId":2748,"userId":545,"content":"[@ontheroad1992](/user/ontheroad1992)  12 支持很好了，而且马上 LTS ","createdAt":1567211834218},{"id":13258,"originId":"5d69f7a9421846662d9860c7","articleId":2748,"userId":26,"content":"pm2 在windows上除了开机运行需要额外弄弄，其他的都差不多","createdAt":1567225769409},{"id":13259,"originId":"5d6ccd91a7474a231a588313","articleId":2748,"userId":158,"content":"node的话还是linux上跑安心点","createdAt":1567411601169},{"id":13260,"originId":"5d755d02d50f572345912934","articleId":2748,"userId":3799,"content":"我认为windows server 毫无问题. 稳定性非常高.\r\n","createdAt":1567972610557},{"id":13261,"originId":"5d75a9aea7474a231a589ff2","articleId":2748,"userId":406,"content":"我认为存在很多问题，很的package 只有Linux上才能工作，还有很多隐藏的问题。。。希望你不要遇到。。。不然，你就只有重新自己造轮子了。。。","createdAt":1567992238470},{"id":13262,"originId":"5d737fe3d50f572345912640","articleId":2749,"userId":545,"content":"直接 nanoid   https://github.com/ai/nanoid\r\n或者根据文件的md5 或者 sha256","createdAt":1567850467783},{"id":13263,"originId":"5d73bb15d50f5723459126f4","articleId":2749,"userId":2246,"content":"[@zuohuadong](/user/zuohuadong) 需要浏览器端 js 生成安全的、不可猜测的唯一编码，nanoid 依赖 crypto/msCrypto，IE11 前的浏览器不支持。","createdAt":1567865621994},{"id":13264,"originId":"5d7505b3a7474a231a589efd","articleId":2749,"userId":703,"content":"其实可以自己生成一个合适大小的随机integer，然后用 toString(36) ，长度不够可以搞多次，拼接起来就行了。","createdAt":1567950259112},{"id":13265,"originId":"5d75a026d50f572345912961","articleId":2749,"userId":2246,"content":"[@my](/user/my)\t谢谢提供思路：\r\n```js\r\nlet array = new Uint32Array(1);\r\nwindow.crypto.getRandomValues(array);\r\nconst filename = array[0].toString(36);\r\n```\r\n上面是简易方法，生成的长度是不一样的。","createdAt":1567989798114},{"id":13266,"originId":"5d737bfdd50f57234591262e","articleId":2750,"userId":2485,"content":"没写过,  lz考虑一下在linux上面去写看看..","createdAt":1567849469094},{"id":13267,"originId":"5d71c472d50f572345912189","articleId":2751,"userId":1644,"content":"websocket 了解一下","createdAt":1567736946791},{"id":13268,"originId":"5d737bd3a7474a231a589c51","articleId":2751,"userId":2485,"content":"APP原生还是Web?\r\n一般要做服务端推有几个方案:\r\n1.  客户端轮训, 服务端立马返回, 但是在手机上太耗电\r\n2.  comet, 客户端发http请求, 服务端如果没有就不返回, 等到直接超时客户端重新发起请求,  问题是服务端这样实现起来稍微麻烦一点\r\n2.  长连接(自定义socket, websocket),  这个可能是最好实现的方式.","createdAt":1567849427021},{"id":13269,"originId":"5d6fdccbd50f57234591181e","articleId":2752,"userId":109,"content":"返回图片url时难道不同时带上附件 aid ？","createdAt":1567612107868},{"id":13270,"originId":"5d70454ed50f572345911836","articleId":2752,"userId":3797,"content":"- 你的产品中的文章ID是自增的序列或者mongo中的ObjectID，所以需要插入数据才能获取到；\r\n-  不需要关联的场景：\r\n    - 文章编辑是html的话，可以直接把图片的URL插入到文章中，并不需要和文章ID关联;\r\n    - 如果是md的编辑器也是同理;\r\n- 需要关联的场景：\r\n    - 假设你的图片是产品图，不是文章的 html 内容，那么就需要你修改创建/修改文章的接口，接收 图片url 的数据做为参数，在后端进行关联。  \r\n---\r\n\r\n建议的做法是，新建文章的时候就需要创建一个`post`的数据了，而不是保存的时候去创建；这样你可以很早的得到一个文章ID，就能解决你的问题；而且通常都是这么做的。\r\n再思考一下**如何实现定时保存文章到草稿箱**的个需求？","createdAt":1567638862159},{"id":13271,"originId":"5d706954a7474a231a588ea3","articleId":2752,"userId":3458,"content":"[@waitingsong](/user/waitingsong) 可以带上，把返回的ID再创建文章时再提交一次，是一种方法\r\n[@yfsoftcom](/user/yfsoftcom) 因为要把文章里的第一张图作为文章封面图，所以必须图片和文章必须关联。你的回复非常棒，如果要实现草稿箱的需求，看来必须先生成ID了","createdAt":1567648084969},{"id":13272,"originId":"5d720f51a7474a231a589942","articleId":2752,"userId":1644,"content":"图片是作为文章内容存在的么？\r\n如果是的话，为什么要做关联呢，直接将图片链接作为内容的一部分存储就行；\r\n至于要把文章的第一张图作为文章封面图，可以在客户端保存文档时，加一个封面字段、或者后端在存储文档时，自己从内容中解析出来，此时解析所有的图片链接也可以的。","createdAt":1567756113503},{"id":13273,"originId":"5d70be12a7474a231a58947d","articleId":2753,"userId":2003,"content":"try...catch,可以试试","createdAt":1567669778040},{"id":13274,"originId":"5d71b87ed50f57234591210b","articleId":2753,"userId":1161,"content":"在中间件的最外层捕获就可以了哦","createdAt":1567733886690},{"id":13275,"originId":"5d71c399d50f57234591217c","articleId":2753,"userId":1644,"content":"加一个中间件，类似这种在最外围捕获：\r\n\r\n``` \r\n    try {\r\n      await next();\r\n      ctx.body = {\r\n        code: ErrorCode.OK,\r\n        data: ctx.body,\r\n        message: null,\r\n      };\r\n    } catch (err) {\r\n      ctx.status = err.status || StatusCode.OK;\r\n\r\n      ctx.body = parseErrorResult(ctx, err);\r\n    }\r\n```\r\n  ","createdAt":1567736729316},{"id":13276,"originId":"5d71da36a7474a231a58982d","articleId":2753,"userId":2,"content":"process.on()\r\n进程级别的错误捕获","createdAt":1567742518344},{"id":13277,"originId":"5d6dcbbfa7474a231a5885d5","articleId":2754,"userId":11,"content":"mini-logger","createdAt":1567476671749},{"id":13278,"originId":"5d6dcccea7474a231a5885e2","articleId":2754,"userId":545,"content":"https://github.com/pinojs/pino \r\n高性能日志记录","createdAt":1567476942880},{"id":13279,"originId":"5d6dd978d50f572345911125","articleId":2754,"userId":89,"content":"pino会好一些","createdAt":1567480184043},{"id":13280,"originId":"5d6dddb2d50f572345911150","articleId":2754,"userId":2119,"content":"winston","createdAt":1567481266959},{"id":13281,"originId":"5d6f0f54d50f572345911456","articleId":2754,"userId":887,"content":"log4js 比较不错，一直在用","createdAt":1567559508220},{"id":13282,"originId":"5d6f292dd50f572345911563","articleId":2754,"userId":1868,"content":"感谢各位，我都去了解下","createdAt":1567566125802},{"id":13283,"originId":"5d70474ea7474a231a588df6","articleId":2754,"userId":3797,"content":"[@i5ting](/user/i5ting) 狼叔，我用pino打日志遇到一个问题不知如何解决：**如何按照日期滚动生成日志文件**？\r\n我现在的日志都是一个文件里面，时间长了体积好大，文档翻了好几遍，没有找到相应的说明，求狼叔指点。","createdAt":1567639374078},{"id":13284,"originId":"5d7050ecd50f57234591184b","articleId":2754,"userId":3177,"content":"[@yfsoftcom](/user/yfsoftcom) 你可以试试 logrotate，pino是支持的","createdAt":1567641836277},{"id":13285,"originId":"5d718e80d50f572345912083","articleId":2754,"userId":3797,"content":"[@itshizhan](/user/itshizhan) 谢谢推荐，这是个 linux 的系统命令，之前都没有关注过，看了之后觉得是可以解决我的问题的。","createdAt":1567723136122},{"id":13286,"originId":"5d70aeead50f572345911d7f","articleId":2755,"userId":98,"content":"https://docs.mongodb.com/manual/reference/operator/update/setOnInsert/","createdAt":1567665898036},{"id":13287,"originId":"5d70efa0a7474a231a58957a","articleId":2755,"userId":136,"content":"[@zengming00](/user/zengming00) 感谢大佬","createdAt":1567682464541},{"id":13288,"originId":"5ce6ae484036f24194cf5f30","articleId":2756,"userId":513,"content":"自问自答：我找到几个跟各位分享\r\nbpmn\r\nhttps://www.npmjs.com/package/bpmn\r\nworkflow-4-node\r\nhttps://www.npmjs.com/package/workflow-4-node\r\nturbine.js\r\nhttps://www.npmjs.com/package/turbine.js\r\n bpmn-engine\r\n https://github.com/paed01/bpmn-engine\r\n \r\n 不晓得各位前辈，有用过上面这些哪一个，或是还有更好的，谢谢各位前辈分享。\r\n \r\n 我的环境是egg.js/node.js  + ExtJS 5.1.0 ","createdAt":1558621768579},{"id":13289,"originId":"5ce73f7f52ccb64168ba6fb6","articleId":2756,"userId":195,"content":"直接用 SQL 驱动的思维实现工作流吧，快速灵活，参考：[https://forum.enhancer.io/topic/5ad714f8ce69735af635fcd4](https://forum.enhancer.io/topic/5ad714f8ce69735af635fcd4)","createdAt":1558658943392},{"id":13290,"originId":"5ce7424752ccb64168ba6fc0","articleId":2756,"userId":545,"content":"https://github.com/danielgerlag/workflow-es\r\n最好用的","createdAt":1558659655274},{"id":13291,"originId":"5ce7454052ccb64168ba6fda","articleId":2756,"userId":513,"content":"[@jquery](/user/jquery) 好的，我来参考看看前辈们的推荐。\r\n\r\n我去看了，个人还是比较喜欢大牛们发展出来，又成熟好用，并且考虑许多应用场景的框架和模块，\r\n\r\n个人并不倾向自己造轮子。\r\n\r\n\r\n其实sql这种方式，原理设计都能了解，也可以实作，如果我是练功夫，我会去尝试，但是在公司或\r\n\r\n自已创业，还是偏向产生效率导向，以及少坑的问题，若要自己投入发展，会将心力放在 自己开发\r\n\r\n的主产品中的商业卖点与应用。\r\n\r\n当然若是只用上流程一点点的功能，就不会把整个流程引擎引入，这个时候我就会考虑自己动手写个流程的小\r\n\r\n逻辑，谢谢您的分享。","createdAt":1558660416394},{"id":13292,"originId":"5ce7456b52ccb64168ba6fe2","articleId":2756,"userId":513,"content":"[@zuohuadong](/user/zuohuadong) 哈哈，您总能让我问个不停，又给我您使 用过的经验推荐，谢谢啦","createdAt":1558660459763},{"id":13293,"originId":"5ce745ae4036f24194cf5fd6","articleId":2756,"userId":513,"content":"[@zuohuadong](/user/zuohuadong) 请问有一范例或example吗？感谢您","createdAt":1558660526594},{"id":13294,"originId":"5ce787cc4036f24194cf629b","articleId":2756,"userId":545,"content":"[@Solomonqoo](/user/Solomonqoo)  之前项目有，但是没办法开源，抱歉~","createdAt":1558677452203},{"id":13295,"originId":"5ce7a9fa52ccb64168ba73b5","articleId":2756,"userId":513,"content":"[@zuohuadong](/user/zuohuadong) 好的，没关系，自己来玩玩看","createdAt":1558686202848},{"id":13296,"originId":"5ce80e544036f24194cf663c","articleId":2756,"userId":513,"content":"[@zuohuadong](/user/zuohuadong) 请问workflow -es 它有流程编辑器吗？还是纯文字编辑呢？jBPM、Activiti有流程设计编辑工具。\r\n谢谢您","createdAt":1558711892518},{"id":13297,"originId":"5cf4dc8095fcc914aa265aa4","articleId":2756,"userId":2142,"content":"一年多以前用过一段时间的bpmn-engine，感觉不太好用，不喜欢的主要原因是bpmn-engine是基于event的，而我们项目是基于Promise，一开始用Promise把event包了一层，后来发现不行（具体为啥不行忘了，依稀记得是因为想在wait事件触法的时候callback 里面 resolve 多层 Promise而导致的执行顺序混乱）\r\n作者似乎已经重构了一次了，说不定现在好很多了","createdAt":1559551104502},{"id":13298,"originId":"5cf5bdcc95fcc914aa265d53","articleId":2756,"userId":513,"content":"[@zhaochy1990](/user/zhaochy1990) 感谢感谢。目前Egg-Authz/Node-Casbin跟工作流(workflow-ez、其他)是我的重点学习项目，一直在找相关完整的范例，\r\n如果网友们在github上有找到，帮忙给个消息，先谢了！","createdAt":1559608780011},{"id":13299,"originId":"5d54c23812a0194544416b85","articleId":2756,"userId":3802,"content":"请问，楼主有比较成熟的使用经验可以分享下吗？","createdAt":1565835832962},{"id":13300,"originId":"5d5b7a6b12a0194544417ec2","articleId":2756,"userId":513,"content":"[@abell123456](/user/abell123456) 现在转向使用camunda\r\n还没开始研究，腾讯学堂有整套收费的视频，我的项目预计在2个月开始导入！\r\n\r\n主要是它自已web flow designer.\r\n\r\n它是java base，但是支持node.js\r\n","createdAt":1566276203325},{"id":13301,"originId":"5d5b96ba12a0194544417fa2","articleId":2756,"userId":1199,"content":"不要让语言限制自己,\r\n用java比如activity5做一个作为中台服务来使用,\r\nnode.js做个facade去调用即可","createdAt":1566283450038},{"id":13302,"originId":"5d5e2879e79eaa6628beb7c1","articleId":2756,"userId":513,"content":"camunda比activity做了更多的改善，跟語言無關","createdAt":1566451833471},{"id":13303,"originId":"5d6ced47d50f572345910ec7","articleId":2756,"userId":1914,"content":"目前也在 使用nodejs做工作流的业务\r\n\r\n期待与楼主交流","createdAt":1567419719002},{"id":13304,"originId":"5d6eb16bd50f572345911407","articleId":2756,"userId":513,"content":"[@yeplive](/user/yeplive) 预计下个月启动工作流整合项目，我也希望可以顺利。\r\n","createdAt":1567535467689},{"id":13305,"originId":"5d6d3030d50f572345910fcb","articleId":2757,"userId":109,"content":"服务端的为啥要用babel ？","createdAt":1567436848643},{"id":13306,"originId":"5d6dcd41a7474a231a5885ef","articleId":2757,"userId":1664,"content":"[@waitingsong](/user/waitingsong) 用的egg自带的init项目进行扩展的，但是好像是babel转译es6的问题","createdAt":1567477057849},{"id":13307,"originId":"5d6de711d50f57234591116d","articleId":2757,"userId":109,"content":"[@oneWalker](/user/oneWalker) 服务端没必要转换。难道源码是esm的格式。","createdAt":1567483665575},{"id":13308,"originId":"5d6dedd7d50f57234591117f","articleId":2757,"userId":1664,"content":"[@waitingsong](/user/waitingsong) 并没有用esm的模式 但是我也不知道为什么，而且我在本地pc进行连接调试的时候并没有什么问题","createdAt":1567485399968},{"id":13309,"originId":"5d6e35e4a7474a231a588907","articleId":2757,"userId":1664,"content":"问题已经解决，是因为淘宝镜像的NPM包问题，导致docker生成的image有问题","createdAt":1567503844292},{"id":13310,"originId":"5d6e52fbd50f57234591137c","articleId":2757,"userId":109,"content":"还有这种问题……  打包npm i 的时候不报错么","createdAt":1567511291069},{"id":13311,"originId":"5d6e56eda7474a231a588964","articleId":2757,"userId":1664,"content":"[@waitingsong](/user/waitingsong) 打包的时候没有出错，但是生成的image运行的时候就会出现问题。\r\n清掉了image后用官方包就没有问题。","createdAt":1567512301638},{"id":13312,"originId":"5bd67cd68ca34e0b047041c6","articleId":2759,"userId":205,"content":"Promise.resolve","createdAt":1540783318566},{"id":13313,"originId":"5bd681f28ca34e0b047041cc","articleId":2759,"userId":22,"content":"```js\r\nfunction isAsync(fn) {\r\n   return fn.constructor.name === 'AsyncFunction';\r\n}\r\n```","createdAt":1540784626030},{"id":13314,"originId":"5bd691cfd00aac1004de51df","articleId":2759,"userId":630,"content":"[@justjavac](/user/justjavac) 感谢大大的回复！\r\n但这方法没办法判断返回promise的函数啊，如:\r\n```javascript\r\nconst sleep = ms => new Promise(resolve => {\r\n\tsetTimeout(resolve, ms);\r\n});\r\n```","createdAt":1540788687098},{"id":13315,"originId":"5bd694d4d00aac1004de51e2","articleId":2759,"userId":630,"content":"[@magicdawn](/user/magicdawn) 感谢回复\r\n我看了一遍文档，并试了一下，Promise.resolve直接处理函数没用啊！！\r\n你是怎么做的？","createdAt":1540789460881},{"id":13316,"originId":"5bd69554d00aac1004de51e4","articleId":2759,"userId":22,"content":"[@xinggsf](/user/xinggsf) 这个是普通函数，不是异步函数。是返回 Promise 的普通函数。","createdAt":1540789588375},{"id":13317,"originId":"5bd6958fd00aac1004de51e6","articleId":2759,"userId":22,"content":"你想实现的是：如何判断一个函数的返回值是不是 Promise？","createdAt":1540789647376},{"id":13318,"originId":"5bd6997fd00aac1004de51eb","articleId":2759,"userId":630,"content":"[@justjavac](/user/justjavac) 是啊\r\n异步函数不过是语法糖，返回的也是promise","createdAt":1540790655413},{"id":13319,"originId":"5bd69b09d00aac1004de51ed","articleId":2759,"userId":22,"content":"[@xinggsf](/user/xinggsf) 如果是这样呢？\r\n\r\n```js\r\nfunction fn(p) {\r\n\tif (p > 0) {\r\n\t\treturn p;\r\n\t} else {\r\n\t\treturn new Promise .....\r\n\t}\r\n}\r\n```","createdAt":1540791049813},{"id":13320,"originId":"5bd6ae5d8ca34e0b047041e4","articleId":2759,"userId":541,"content":"看源码","createdAt":1540795997415},{"id":13321,"originId":"5bd6af408ca34e0b047041e6","articleId":2759,"userId":22,"content":"[@AnzerWall](/user/AnzerWall) 像我上面的例子，看源码也分析不出来，只有执行时才知道。","createdAt":1540796224120},{"id":13322,"originId":"5bd6b258d00aac1004de51f4","articleId":2759,"userId":358,"content":"JS 是弱类型的，返回值你是没法判断出来的。\r\n\r\n这个问题属于 X-Y 问题了，还是提出你最原始的需求吧","createdAt":1540797016228},{"id":13323,"originId":"5bd6bab6d00aac1004de5202","articleId":2759,"userId":22,"content":"[@atian25](/user/atian25) 万一最初需求是“我想普通函数直接调用，异步函数用 await 调用”，那就尴尬了","createdAt":1540799158860},{"id":13324,"originId":"5bd6bb0a8ca34e0b047041ea","articleId":2759,"userId":358,"content":"[@justjavac](/user/justjavac) 所以咯，需求不清晰的情况下，讨论没啥意义","createdAt":1540799242976},{"id":13325,"originId":"5bd6c6e4d00aac1004de520a","articleId":2759,"userId":18,"content":"[@atian25](/user/atian25) [@justjavac](/user/justjavac) 运行之后返回 promise 的函数怎么可能在不运行的情况下判断出来。。。不可能的。","createdAt":1540802276446},{"id":13326,"originId":"5bd6d5c08ca34e0b047041fc","articleId":2759,"userId":630,"content":"> JS 是弱类型的，返回值你是没法判断出来的。\r\n\r\n[@atian25](/user/atian25) 同意这说法\r\n\r\n最近GO看多了","createdAt":1540806080295},{"id":13327,"originId":"5bd72a2e8ca34e0b0470421d","articleId":2759,"userId":3803,"content":"```javascript\r\nfunction isAsyncFunction(fn) {\r\n\treturn fn[Symbol.toStringTag] === 'AsyncFunction';\r\n}\r\n```\r\n你想要的应该是这个吧","createdAt":1540827694895},{"id":13328,"originId":"5bd79ded8ca34e0b04704223","articleId":2759,"userId":21,"content":"co里面的代码，我用过效果挺好，async你可以用上面方法判断，但其实最终也是转换成promise\n\n```js\n\nfunction isPromise(obj) {\n  return 'function' == typeof obj.then;\n}\n\nfunction isGenerator(obj) {\n  return 'function' == typeof obj.next && 'function' == typeof obj.throw;\n}\n\nfunction isGeneratorFunction(obj) {\n  var constructor = obj.constructor;\n  if (!constructor) return false;\n  if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) return true;\n  return isGenerator(constructor.prototype);\n}\n```\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1540857325367},{"id":13329,"originId":"5bd7a9db8ca34e0b04704227","articleId":2759,"userId":630,"content":"[@zy445566](/user/zy445566) [@ta7sudan](/user/ta7sudan) \r\n谢谢帮忙！\r\nta7sudan， 前提是不执行函数哦","createdAt":1540860379879},{"id":13330,"originId":"5bd96858aba5b439efd9902e","articleId":2759,"userId":1975,"content":"toString然后分析函数代码","createdAt":1540974680462},{"id":13331,"originId":"5d6cb103d50f572345910cf8","articleId":2759,"userId":3804,"content":"请问楼主解决了吗 我也遇到这个问题了 就是判断函数是return 个promise 还是一个普通函数","createdAt":1567404291032},{"id":13332,"originId":"5d6ce260a7474a231a5883c1","articleId":2759,"userId":109,"content":"对于调用方来说，你不告诉我结果类型，也不写（ts）返回类型签名，更不写备注，我管你是什么类型，直接打回去。\r\n面向靠猜接口开发？","createdAt":1567416928502},{"id":13333,"originId":"5d6e00c1d50f5723459111d0","articleId":2759,"userId":36,"content":"不跑起来怎么知道呢","createdAt":1567490241624},{"id":13334,"originId":"5d6e1018a7474a231a5887f6","articleId":2759,"userId":3804,"content":"onClick = () => {\r\n    // 模拟一个接口\r\n    return new Promise(resolve => { \r\n\r\n      setTimeout(() => {\r\n        resolve(4);\r\n      }, 4000);\r\n    }).then((res) => {\r\n       console.log(res, '业务代码');\r\n    });\r\n  }\r\n  \r\n  在其他组件判断这个onClick方法是否return个promise \r\n  \r\n 用typeof  this.props.onClick().then  这种方法会执行onclick 这个方法 但是不执行的前提如何判断这个onclick返回个promise还是一个一般的函数\r\n  \r\n","createdAt":1567494168969},{"id":13335,"originId":"5d6e1027d50f57234591122a","articleId":2759,"userId":3804,"content":"[@dengnan123](/user/dengnan123) \r\n```onClick = () => {\r\n    // 模拟一个接口\r\n    return new Promise(resolve => { \r\n\r\n      setTimeout(() => {\r\n        resolve(4);\r\n      }, 4000);\r\n    }).then((res) => {\r\n       console.log(res, '业务代码');\r\n    });\r\n  }\r\n\r\n   在其他组件判断这个onClick方法是否return个promise \r\n  \r\n 用typeof  this.props.onClick().then  这种方法会执行onclick 这个方法 但是不执行的前提如何判断这个onclick返回个promise还是一个一般的函数","createdAt":1567494183096},{"id":13336,"originId":"5d6e1158d50f57234591123f","articleId":2759,"userId":3805,"content":"[@justjavac](/user/justjavac) 我也想知道","createdAt":1567494488643},{"id":13337,"originId":"5d6e12e3d50f572345911257","articleId":2759,"userId":3804,"content":"[@1400330227](/user/1400330227) 您也遇到这个问题了？","createdAt":1567494883821},{"id":13338,"originId":"5aca36872c4e775a29952a33","articleId":2760,"userId":3807,"content":"https://github.com/eggjs/egg-cluster\r\n![image.png](//static.cnodejs.org/FnbgoEWxFjZ1YzASgMUrAzgSnq9Q)","createdAt":1523201671551},{"id":13339,"originId":"5aca3a55729b245529cb58e4","articleId":2760,"userId":3806,"content":"[@fwgood](/user/fwgood)  是这样吗？\r\n\r\negg-scripts start --port=7001 --daemon --title=egg-server-showcase  --https.key=key全路径  --https.cert=cert全路径   \r\n\r\n关键是https object 参数怎么传？","createdAt":1523202645972},{"id":13340,"originId":"5acacb532c4e775a29952a46","articleId":2760,"userId":3808,"content":"egg-scripts start --port=443 --https.key=XXXX.key --https.cert=XXXXX.crt --daemon\r\n","createdAt":1523239763730},{"id":13341,"originId":"5d6defe7d50f572345911186","articleId":2760,"userId":1664,"content":"[@poorEnMe](/user/poorEnMe) 这个key和crt是怎么生成的呢？","createdAt":1567485927838},{"id":13342,"originId":"5d687734dcd8e81121a6200c","articleId":2761,"userId":2246,"content":"用过 Aliyun OSS 分片，没用过 S3","createdAt":1567127348414},{"id":13343,"originId":"5d6de29da7474a231a5886ae","articleId":2761,"userId":2073,"content":"```js\r\nvar params = {Bucket: 'bucket', Key: 'key', Body: stream};\r\nvar options = {partSize: 10 * 1024 * 1024, queueSize: 1};\r\ns3.upload(params, options, function(err, data) {\r\n  console.log(err, data);\r\n});\r\n```\r\n\r\nhttps://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#upload-property","createdAt":1567482525852},{"id":13344,"originId":"5d6cb2c8d50f572345910d05","articleId":2762,"userId":3753,"content":"弱类型语言, JS的class是基于原型的, 和Java的class不太一样","createdAt":1567404744877},{"id":13345,"originId":"5d6ce206a7474a231a5883bc","articleId":2762,"userId":109,"content":"是ECMA类型的语言。","createdAt":1567416838173},{"id":13346,"originId":"5d6dc0cbd50f572345911027","articleId":2762,"userId":1199,"content":"js还真不好归类,除了动态类型是妥妥的,\r\n至于弱类型,按照有些分法,还真不算,比如他是有typeof运算符的\r\n其他方面嘛:\r\nclass有,但半残,多态性很差\r\n支持高阶函数,但对lambda支持很差\r\n有一定元编程能力,半残\r\n不支持宏\r\n纯回调\r\njs比较偏实用,糅合了很多好的设计","createdAt":1567473867603},{"id":13347,"originId":"5d6dc174a7474a231a588586","articleId":2762,"userId":194,"content":"理论上，所有计算语言的可计算基石要么基于**图灵机（声明式、编译型）** 要么基于 **lambda演算（函数式、解释型）**\r\n由于图灵机的计算能力和 lambda 演算的可计算能力是等价的，二者可以相互构造，所以现代编程语言同时支持声明式和函数式，经常是二者的混合。\r\n基于可计算理论基石之上，为了编程理解的方便，才有了所谓的面向对象、原型、类这些概念，说到底他们只是为了你方便组织和记忆代码。\r\n你提到的强调并行比如 map reduce 这一类都是函数式计算的概念，不应单独作为语言特征类别来说。\r\n所以个人建议学一门声明式语言比如 Java、学一门函数式语言比如 Clojure 或者 JavaScript（有点大杂烩、但更好上手）即可涵盖所有编程计算习惯或方式。\r\n不过在一些成熟的领域，基本上都不需要写代码，直接写 SQL 就可以完成开发工作了，比如：[https://wuyuan.io](https://wuyuan.io)\r\nSQL 的本质也是函数式的。","createdAt":1567474036799},{"id":13348,"originId":"5a7c34755321b5396004ecba","articleId":2763,"userId":752,"content":"为什么不自己找答案呢？\r\n\r\n```\r\nvar DataLoader = require('dataloader');\r\nvar nano = require('nano');\r\n\r\nvar couch = nano('http://localhost:5984');\r\n\r\nvar userDB = couch.use('users');\r\nvar userLoader = new DataLoader(keys => new Promise((resolve, reject) => {\r\n  userDB.fetch({ keys: keys }, (error, docs) => {\r\n    if (error) {\r\n      return reject(error);\r\n    }\r\n    resolve(docs.rows.map(row => row.error ? new Error(row.error) : row.doc));\r\n  });\r\n}));\r\n\r\n// Usage\r\n\r\nvar promise1 = userLoader.load('8fce1902834ac6458e9886fa7f89c0ef');\r\nvar promise2 = userLoader.load('00a271787f89c0ef2e10e88a0c00048b');\r\n\r\nPromise.all([ promise1, promise2 ]).then(([ user1, user2]) => {\r\n  console.log(user1, user2);\r\n});\r\n```\r\n\r\nkey 只是缓存的对象的一个唯一 ID 而已，dataloader 就是一个缓存队列而已，跟函数式编程的缓存比较类似，只要参数是一直的，那么结果就是一直的。 Promse<SequelizeInstance> 和 Promise<Object> 能一样么，一个是返回 sequelize model 实例，一个是放回原生对象。\r\n\r\ndataloader 其实全是存在 js 内的。\r\n\r\n```\r\n if (shouldCache) {\r\n      this._promiseCache.set(cacheKey, promise);\r\n    }\r\n```\r\n\r\n`_promiseCache` 是一个 map。数据量太大，还是建议使用 redis。","createdAt":1518089333096},{"id":13349,"originId":"5a7c351699ef9fac6b2e686a","articleId":2763,"userId":752,"content":"因为它这个是多个的 key ，为了支持 loadMany ，所以，在 sequelize 中用 $in ，即 where in SQL","createdAt":1518089494183},{"id":13350,"originId":"5a7c372999ef9fac6b2e686c","articleId":2763,"userId":752,"content":"子查询不建议3层以上吧，特殊需求，再次通过 GraphQL 请求就是了。","createdAt":1518090025254},{"id":13351,"originId":"5a7c375a497a08f571384f25","articleId":2763,"userId":752,"content":"GraphQL 服务，好像 github 上面有更好的。","createdAt":1518090074297},{"id":13352,"originId":"5a7c38db497a08f571384f27","articleId":2763,"userId":1740,"content":"楼主这个问题我也遇到了","createdAt":1518090459007},{"id":13353,"originId":"5a7c3f6e8d6e16e56bb80686","articleId":2763,"userId":3810,"content":"[@MiYogurt](/user/MiYogurt) 谢谢您的回答，toJSON懂了，但是dataloader 我和您的看法不一样，我的理解是key并不是为了loadMany；\r\n因为loadMany的实现也是调用load；而在本次的事件循环，是为了把所有的load查询合并归到$in中，再下一次事件循环直接就调用一次数据库查询就能查出所有结果，而key是为了区分各个查询的不同，区分应该返回数据的那一条；而且即便不是三层以上的，也有可能调用同一个load多次，其中只要一个是没查到数据的，整个查询就变成null了","createdAt":1518092142581},{"id":13354,"originId":"5a7c403d8d6e16e56bb80688","articleId":2763,"userId":3810,"content":"[@MiYogurt](/user/MiYogurt) 本来想用apollo来的，但是比较喜欢egg；感觉省心。。","createdAt":1518092349706},{"id":13355,"originId":"5a7c4bd3497a08f571384f37","articleId":2763,"userId":3810,"content":"[@MiYogurt](/user/MiYogurt) \r\n```\r\n\t  var userLoader = new DataLoader(keys => new Promise((resolve, reject) => {\r\n\t\tuserDB.fetch({ keys: keys }, (error, docs) => {\r\n\t\t  if (error) {\r\n\t\t\treturn reject(error);\r\n\t\t  }\r\n\t\t  resolve(docs.rows.map(row => row.error ? new Error(row.error) : row.doc));\r\n\t\t});\r\n\t  }));\r\n```\t  \r\n问题出在keys是五个，但是其中有一个查不出数据，返回的docs结果集是4个\r\n```\r\n\t\t var batchPromise = batchLoadFn(keys);\r\n\t\t  if (!batchPromise || typeof batchPromise.then !== ‘function’) {\r\n\t  return failedDispatch(loader, queue, new TypeError(\r\n\t\t'DataLoader must be constructed with a function which accepts ’ +\r\n\t\t'Array<key> and returns Promise<Array<value>>, but the function did ’ +\r\n\t\tnot return a Promise: ${String(batchPromise)}.\r\n\t  ));\r\n\t}\r\n```\t\r\n其中就有一个key对应的结果不存在，导致错误，但是查询得到的结果集并不受我控制，我也不能给查不到的加个站位的\r\npromise。。。","createdAt":1518095315176},{"id":13356,"originId":"5a7c61e28d6e16e56bb80696","articleId":2763,"userId":752,"content":"没有，本来就是空，你自己要加一个 Error 在里面。 我说的是 Prisma。https://www.prismagraphql.com/","createdAt":1518100962905},{"id":13357,"originId":"5a7c798899ef9fac6b2e6877","articleId":2763,"userId":3810,"content":"[@MiYogurt](/user/MiYogurt) 感谢安利。我去研究研究","createdAt":1518107016396},{"id":13358,"originId":"5d6ceaa5a7474a231a588400","articleId":2763,"userId":3811,"content":"“子查询有可能查不出数据”，为了保证 keys 数组和返回数组长度一直，需要子查询返回 null。所以需要这样写：\r\n\r\n```js\r\nfunction fetch(ids) {\r\n   const list = await this.ctx.model.User.findAll({ id: ids });\r\n   return ids.map(id => _.find(list, { id }));\r\n}\r\n```","createdAt":1567419045180},{"id":13359,"originId":"5d6cd040d50f572345910ddd","articleId":2764,"userId":152,"content":"docker的优势并不是多开。 而是配合k8s等容器编排技术实现自动伸缩。 ","createdAt":1567412288452},{"id":13360,"originId":"5d6cd65cd50f572345910e06","articleId":2764,"userId":109,"content":"自动伸缩主要是为了 公有云上降低成本。","createdAt":1567413852363},{"id":13361,"originId":"5d6cd7c4d50f572345910e1b","articleId":2764,"userId":831,"content":"[@Gitforxuyang](/user/Gitforxuyang) 多谢。去了解下","createdAt":1567414212820},{"id":13362,"originId":"5d6cd7cdd50f572345910e1f","articleId":2764,"userId":831,"content":"[@waitingsong](/user/waitingsong) 多谢。、","createdAt":1567414221707},{"id":13363,"originId":"5d673f9ddcd8e81121a61cc2","articleId":2765,"userId":148,"content":"TIMESTAMP ","createdAt":1567047581933},{"id":13364,"originId":"5d675248dcd8e81121a61d57","articleId":2765,"userId":109,"content":"mysql 无处不是坑。 timestamp 也有。","createdAt":1567052360958},{"id":13365,"originId":"5d677437421846662d985ad2","articleId":2765,"userId":98,"content":"时间戳是没有时区的，你上面的代码并没有给出你这个created_time用的是什么类型，由于我已经有两年没用过sql了，但我猜测如果是TIMESTAMP类型，那么你插入数据库时无论用的什么方式，得到的最终都应该是一致的，也就是UTC时间戳\r\n通常对时间的处理如果你用的是标准的date对象，是不需要关心时区的问题的，因为date对象最终会转换成时间戳去处理，而时间戳是没有时区的概念的，\r\n所以为了避免混乱后端接口通常都是返回标准时间，最终显示给用户看的时间都由前端去处理","createdAt":1567061047770},{"id":13366,"originId":"5d678d27dcd8e81121a61e8a","articleId":2765,"userId":2246,"content":"[@zengming00](/user/zengming00) 是 `TIMESTAMP` 类型\r\n\r\n谢谢您关于时区和 date 对象的解释。\r\n> 那么你插入数据库时无论用的什么方式，得到的最终都应该是一致的，也就是UTC时间戳\r\n\r\n按我的理解，假如 App 当前时间是 **2019-08-29 15:00:00 GMT+0800**\r\n* 使用 js new Date() 方式，会插入 2019-08-29 15:00:00，mysql 转化为时间戳 1567062000 存储\r\n* 使用 sql now() 函数方式，会插入 2019-08-29 07:00:00，mysql 转化为时间戳 1567033200 存储\r\n\r\n所以会混乱，不知我的理解是否正确。","createdAt":1567067431184},{"id":13367,"originId":"5d67ab27dcd8e81121a61f10","articleId":2765,"userId":98,"content":"[@xuxu7](/user/xuxu7) \r\n如果时间字符串不带时区，那就会有问题\r\n> 使用 js new Date() 方式，会插入 2019-08-29 15:00:00，mysql 转化为时间戳 1567062000 存储\r\n> 使用 sql now() 函数方式，会插入 2019-08-29 07:00:00，mysql 转化为时间戳 1567033200 存储\r\n\r\n像这样的才是带时区的字符串\r\n\"2019-08-29T10:35:04.137Z\"\r\n\"2019-06-25T15:00:00.000+08:00\"","createdAt":1567075111889},{"id":13368,"originId":"5d6876e0421846662d985cfb","articleId":2765,"userId":2246,"content":"嗯，如果能带时区问题就解决了。\r\n目前 MySQL TIMESTAMP/DATETIME 不接受时区，可接受的格式是 **YYYY-MM-DD hh:mm:ss**、**YYYYMMDDhhmmss**","createdAt":1567127264229},{"id":13369,"originId":"5d6936b9dcd8e81121a62308","articleId":2765,"userId":1088,"content":"别怀疑，INT是唯一跨越语言、数据库、操作系统的","createdAt":1567176377224},{"id":13370,"originId":"5d6cc282d50f572345910d7b","articleId":2765,"userId":158,"content":"首先时间戳是一个差值，无关时区，一般设置mysql默认时区或者设置连接参数，还有你可以convert\\_tz转化到目标时区\r\n","createdAt":1567408770794},{"id":13371,"originId":"5d6cc2d5a7474a231a5882b9","articleId":2765,"userId":158,"content":"你可以先试下设置连接参数能不能解决你的问题","createdAt":1567408853999},{"id":13372,"originId":"5d6cc370a7474a231a5882c0","articleId":2765,"userId":158,"content":"另外不建议用now(), 建议使用CURRENT_TIMESTAMP()","createdAt":1567409008394},{"id":13373,"originId":"5d6cabfad50f572345910ccf","articleId":2766,"userId":21,"content":"https://nodejs.org/dist/latest-v10.x/docs/api/child_process.html#child_process_child_process","createdAt":1567403002210},{"id":13374,"originId":"5d6cafcca7474a231a588211","articleId":2766,"userId":3812,"content":"[@zy445566](/user/zy445566) 居然用子进程来观察.","createdAt":1567403980764},{"id":13375,"originId":"5d688808dcd8e81121a620a8","articleId":2767,"userId":3336,"content":"多看看文档...\r\nhttps://reactjs.org/docs/react-component.html#componentdidmount\r\n> If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\r\n\r\ncomponentWillReceiveProps 已经被弃用了","createdAt":1567131656107},{"id":13376,"originId":"5d68a4f7421846662d985e1a","articleId":2767,"userId":3814,"content":"componentDidMount","createdAt":1567139063037},{"id":13377,"originId":"5d67d3ed421846662d985c78","articleId":2768,"userId":419,"content":"还是换个新点儿的教程吧\r\n1、应该是的，现在的版本安装完自己就设置了环境变量吧\r\n","createdAt":1567085549079},{"id":13378,"originId":"5d67e2d4dcd8e81121a61f9a","articleId":2768,"userId":98,"content":"看这个教程你得七十天才能学会Node.js","createdAt":1567089364440},{"id":13379,"originId":"5d686739dcd8e81121a61fc9","articleId":2768,"userId":3815,"content":"[@yuu2lee4](/user/yuu2lee4) 谢谢你了，请问这个教程很老了吗？有什么新教程推荐呢？","createdAt":1567123257309},{"id":13380,"originId":"5d68674e421846662d985ccc","articleId":2768,"userId":3815,"content":"[@zengming00](/user/zengming00) 哈哈， 谢谢你了，有什么新教程推荐呢？","createdAt":1567123278007},{"id":13381,"originId":"5b8ce83b71b88cc417ed084a","articleId":2769,"userId":755,"content":"推荐先看官网文档, 然后看看<深入react技术栈这本>\r\n多实践","createdAt":1535961147986},{"id":13382,"originId":"5b8ddeb837b3005a0b0e6b35","articleId":2769,"userId":2013,"content":"昨天看到的一套视频教程\r\n[http://www.sucaihuo.com/video/232.html](http://www.sucaihuo.com/video/232.html)","createdAt":1536024248917},{"id":13383,"originId":"5b8ddf7e82f0728f354d73c3","articleId":2769,"userId":3435,"content":"[@yinxin630](/user/yinxin630) 谢谢","createdAt":1536024446177},{"id":13384,"originId":"5b8ddf89bf116a8c0e425794","articleId":2769,"userId":3435,"content":"[@abochi](/user/abochi) 收到","createdAt":1536024457152},{"id":13385,"originId":"5b8f2b9e4cdb88f72f5a907c","articleId":2769,"userId":726,"content":"先把官方文档看了，再考虑别的视频或者教程","createdAt":1536109470775},{"id":13386,"originId":"5b908e7682f0728f354d749b","articleId":2769,"userId":1465,"content":"做相关项目入门最快","createdAt":1536200310509},{"id":13387,"originId":"5b9093d137b3005a0b0e6be0","articleId":2769,"userId":146,"content":"1. 把官方文档看看，做几个简单的例子，熟悉下jsx语法和react组件结构\r\n2. 看一下官方blog，有一些深入概念未必能搞明白，但是要坚持看完，内容并不算多\r\n3. 做项目，边做边思考，理解 react 哲学；不时回看第2步\r\n4. 在做项目过程中，学习react生态重要组成部分，比如 redux、mobx、react-router等\r\n\r\nPS：拿到一个module，可以把 examples 跑一跑，有时候 test 代码也能帮忙你理解基本用法","createdAt":1536201681495},{"id":13388,"originId":"5b90ac9137b3005a0b0e6bee","articleId":2769,"userId":1679,"content":"React.js 小书推荐给你，我也是刚看完，分阶段配合demo学习效率高\r\nhttp://huziketang.mangojuice.top/books/react/","createdAt":1536208017747},{"id":13389,"originId":"5b94b333f1e8bc7579c78385","articleId":2769,"userId":3435,"content":"[@cnvp](/user/cnvp) 收到","createdAt":1536471859657},{"id":13390,"originId":"5b94b33a37b3005a0b0e6ced","articleId":2769,"userId":3435,"content":"[@qinkangwu](/user/qinkangwu) 收到","createdAt":1536471866444},{"id":13391,"originId":"5b94b350f1e8bc7579c78387","articleId":2769,"userId":3435,"content":"[@DevinXian](/user/DevinXian) 感谢，大佬","createdAt":1536471888927},{"id":13392,"originId":"5b94b35c4cdb88f72f5a91d0","articleId":2769,"userId":3435,"content":"[@minjihao](/user/minjihao) 恩恩，谢谢\r\n","createdAt":1536471900560},{"id":13393,"originId":"5b94c86a37b3005a0b0e6cf6","articleId":2769,"userId":3817,"content":"你大概看一下文档，然后拿个高Star的项目直接看源码，尝试做些修改，改着改着就会了😄\n\n 来自拉风的 [Taro-cnode](https://github.com/icai/taro-cnode)","createdAt":1536477290763},{"id":13394,"originId":"5b95c62abf116a8c0e42597e","articleId":2769,"userId":3435,"content":"[@icai](/user/icai) 收到","createdAt":1536542250555},{"id":13395,"originId":"5b9728b9f1e8bc7579c78434","articleId":2769,"userId":3434,"content":"https://cnodejs.org/topic/5b972808ce9d14c2254df8b0 哈哈，看看我的个人分享","createdAt":1536633017938},{"id":13396,"originId":"5b972b8ef1e8bc7579c7843a","articleId":2769,"userId":3435,"content":"[@alicePan](/user/alicePan) 不错，get到了","createdAt":1536633742467},{"id":13397,"originId":"5b9947b6ce9d14c2254df98d","articleId":2769,"userId":3818,"content":"多多练习，熟能生巧。\n\n","createdAt":1536772022252},{"id":13398,"originId":"5b994abdf1e8bc7579c78523","articleId":2769,"userId":3818,"content":"补充一句，多多的找找经典练习的题目，练习\n\n","createdAt":1536772797059},{"id":13399,"originId":"5b9e066737a6965f590519b9","articleId":2769,"userId":3529,"content":"刚好也在找，顺便手动 mark 支持一下","createdAt":1537082983340},{"id":13400,"originId":"5b9e13cd37a6965f590519c8","articleId":2769,"userId":3435,"content":"[@tufifth](/user/tufifth) 顶","createdAt":1537086413501},{"id":13401,"originId":"5ba8de348f5b0c1c59ea1116","articleId":2769,"userId":3436,"content":"react是我下一步要学的","createdAt":1537793588739},{"id":13402,"originId":"5ba8f11315e4fd1923f48a05","articleId":2769,"userId":2779,"content":"[@icai](/user/icai) 那都看到你的广告。这个taro","createdAt":1537798419834},{"id":13403,"originId":"5ba977849545eaf107b9c5bc","articleId":2769,"userId":413,"content":"1. 上官网\r\n2. 了解一下基础语法\r\n3. 了解一下生命周期\r\n4. 上Github找一些简单的react demo\r\n5. 使用 create-react-app 创建一个项目，然后按照自己的想法来改改\r\n\r\n然后基本上就入门了，后面碰到的问题 通过 搜索来找","createdAt":1537832836877},{"id":13404,"originId":"5ba98ac39545eaf107b9c5bf","articleId":2769,"userId":2633,"content":"基础好的话看下文档就可以了","createdAt":1537837763815},{"id":13405,"originId":"5ba98adc9545eaf107b9c5c1","articleId":2769,"userId":2633,"content":"[@tomoya92](/user/tomoya92) 确实，看看文档谢谢demo就差不多了，不超过一周","createdAt":1537837788074},{"id":13406,"originId":"5bab956c8f5b0c1c59ea119a","articleId":2769,"userId":3435,"content":"[@myhuier](/user/myhuier) 有问题可以一起探讨下，基本的我学的差不多了\r\n","createdAt":1537971564111},{"id":13407,"originId":"5bab957815e4fd1923f48aab","articleId":2769,"userId":3435,"content":"[@tomoya92](/user/tomoya92) 恩，是的，谢谢","createdAt":1537971576738},{"id":13408,"originId":"5bab957f9545eaf107b9c647","articleId":2769,"userId":3435,"content":"[@leeseean](/user/leeseean) 恩","createdAt":1537971583586},{"id":13409,"originId":"5bbeaf2837a6965f59052091","articleId":2769,"userId":3436,"content":"我也要开始学习了","createdAt":1539223336028},{"id":13410,"originId":"5bbed3a915e4fd1923f48e05","articleId":2769,"userId":501,"content":"在线电子书: \r\n[react模式](https://www.geekjc.com/ebook/detail/5bae0c10ddb4f437ecfdc708/1538132695121)\r\n[nodejs基础教程](https://www.geekjc.com/ebook/detail/5b9f65ce0f510f6ae689bccd)\r\n[前端常见面试题汇总](https://www.geekjc.com/ebook/detail/5ba5bcae7143880b09cb4d54)\r\n\r\n微信小程序在线阅读，扫码阅读：![gh_39561cafdf5e_258.jpg](//static.cnodejs.org/FhiPh2TQpV-CksMebvkM7kC7FUVW)","createdAt":1539232681035},{"id":13411,"originId":"5bbef24d37a6965f590520a0","articleId":2769,"userId":686,"content":"18年9月刚出的这套React视频教程你可以看看，官方是免费的 [https://www.itying.com/goods-1005.html](https://www.itying.com/goods-1005.html)","createdAt":1539240525444},{"id":13412,"originId":"5bc74c299545eaf107b9cbfc","articleId":2769,"userId":790,"content":"学得我想改行","createdAt":1539787817765},{"id":13413,"originId":"5bd5d0bca66f05ec3b4fec0c","articleId":2769,"userId":805,"content":"百度找教程","createdAt":1540739260982},{"id":13414,"originId":"5be23c1f21d75b74609f4aff","articleId":2769,"userId":798,"content":"努力是最好的方法","createdAt":1541553183602},{"id":13415,"originId":"5bf4b33abe1b120abac5b4ce","articleId":2769,"userId":809,"content":"看书学容易还是看视频教程？","createdAt":1542763322147},{"id":13416,"originId":"5bf7e6106718ed3ca074c3ad","articleId":2769,"userId":753,"content":"兄弟走错片场了","createdAt":1542972944366},{"id":13417,"originId":"5bf8a26ed6104a4f803a110f","articleId":2769,"userId":3819,"content":"实践","createdAt":1543021166034},{"id":13418,"originId":"5c0b2d8dd3b8ab334e8dbff4","articleId":2769,"userId":805,"content":"楼上兄弟，基础都不好学啊，实践不动","createdAt":1544236429422},{"id":13419,"originId":"5c1f94c576c4964062a1cc8a","articleId":2769,"userId":790,"content":"靠天赋和努力","createdAt":1545573573711},{"id":13420,"originId":"5c3ab165a4d44449266b039d","articleId":2769,"userId":1661,"content":"楼主还看书啊，我都是看视频学","createdAt":1547350373235},{"id":13421,"originId":"5c545b3ae6aaad2ea76de92a","articleId":2769,"userId":828,"content":"放假有空也要学学这个","createdAt":1549032250210},{"id":13422,"originId":"5c555a3ae6aaad2ea76dea7a","articleId":2769,"userId":686,"content":"学习中，给楼主推荐下这套不错的入门教程，是目前找的最新的的了，官网是免费的，可以直接下载学习[https://www.itying.com/goods-1005.html](https://www.itying.com/goods-1005.html)","createdAt":1549097530305},{"id":13423,"originId":"5c81257a5b8cb21491ca6fc5","articleId":2769,"userId":798,"content":"node就学得我够呛","createdAt":1551967610203},{"id":13424,"originId":"5c81446490c14711cc8cb5b7","articleId":2769,"userId":771,"content":"写项目。\r\n否则文档、书、教程 都是纸上谈兵。","createdAt":1551975524600},{"id":13425,"originId":"5ca4c9d431010b2dfbb42eea","articleId":2769,"userId":790,"content":"[@yuanzhhh](/user/yuanzhhh) 那些学学基础应该还行","createdAt":1554303444801},{"id":13426,"originId":"5ca85b027edd13064e052cd9","articleId":2769,"userId":3820,"content":"21","createdAt":1554537218450},{"id":13427,"originId":"5cc1c2cea86ae80ce64b4151","articleId":2769,"userId":804,"content":"如何发财啊","createdAt":1556202190204},{"id":13428,"originId":"5cc1c3e037faec0ce1d06bb9","articleId":2769,"userId":1217,"content":"先基础再实战，分享套入门教程你看看，很不错[百度网盘下载地址](https://pan.baidu.com/s/1pOsj7I3hmkG3BWtEYID6ww)","createdAt":1556202464970},{"id":13429,"originId":"5ce81acc52ccb64168ba7600","articleId":2769,"userId":798,"content":"mark","createdAt":1558715084857},{"id":13430,"originId":"5d0cf1e434bca667bc6e1cfd","articleId":2769,"userId":1661,"content":"我已放弃","createdAt":1561129444593},{"id":13431,"originId":"5d0d90e134bca667bc6e1d99","articleId":2769,"userId":79,"content":"还是看官网的教程的，讲的由浅入深，便于理解 https://zh-hans.reactjs.org/docs/getting-started.html","createdAt":1561170145542},{"id":13432,"originId":"5d10989334bca667bc6e259d","articleId":2769,"userId":3821,"content":"https://www.bilibili.com/video/av55269268","createdAt":1561368723172},{"id":13433,"originId":"5d3b1aa2b4725a628e26901b","articleId":2769,"userId":790,"content":"[@qiutian00](/user/qiutian00) 这个可以有","createdAt":1564154530917},{"id":13434,"originId":"5d668a54dcd8e81121a61b8b","articleId":2769,"userId":804,"content":"走错片场了吧","createdAt":1567001172103},{"id":13435,"originId":"5d67aee8421846662d985c17","articleId":2769,"userId":1915,"content":"https://www.imooc.com/learn/1045\r\nhttps://www.imooc.com/learn/1023\r\nhttps://www.imooc.com/learn/944\r\n免费入门","createdAt":1567076072150},{"id":13436,"originId":"5d664b5d421846662d985790","articleId":2770,"userId":357,"content":"由于egg插件目录的特殊性，构建后的代码不需要放在dist目录，跟源码平级。比如 [https://github.com/midwayjs/midway/tree/master/packages/midway-schedule](https://github.com/midwayjs/midway/tree/master/packages/midway-schedule)，tsconfig.json里不写 \"outDir\": \"dist\" 就行 ","createdAt":1566985053811},{"id":13437,"originId":"5d665095dcd8e81121a61aef","articleId":2770,"userId":109,"content":"新鲜轮子供参考 https://github.com/waitingsong/egg-jwt","createdAt":1566986389823},{"id":13438,"originId":"5d678731421846662d985b3a","articleId":2770,"userId":1163,"content":"[@waitingsong](/user/waitingsong) 多谢","createdAt":1567065905272},{"id":13439,"originId":"5d678744dcd8e81121a61e50","articleId":2770,"userId":1163,"content":"[@czy88840616](/user/czy88840616) 还可以这样，试试，多谢了","createdAt":1567065924363},{"id":13440,"originId":"5d66263b421846662d985668","articleId":2771,"userId":109,"content":"语法错误。看看你自己的 router.js。 该不会是服务器环境不支持箭头函数吧……","createdAt":1566975547618},{"id":13441,"originId":"5d6628ab421846662d985677","articleId":2771,"userId":3822,"content":"[@waitingsong](/user/waitingsong) 检查了，支持箭头函数\r\n![image.png](//static.cnodejs.org/FtJVfHrXlCbOSirUvZc3ptZzXSjC)\r\n\r\nrouter.js 是这样的\r\n![image.png](//static.cnodejs.org/Flamz_GmLadL41S-1fo1olRbZVHZ)\r\n在本地一点问题都没有","createdAt":1566976171440},{"id":13442,"originId":"5d6628efdcd8e81121a619b8","articleId":2771,"userId":3822,"content":"[@waitingsong](/user/waitingsong) 关键是自己电脑上没有问题，我把代码拷到服务器上去，安装的node版本一样 都是6.9.0 很奇怪","createdAt":1566976239065},{"id":13443,"originId":"5d66433fdcd8e81121a61a9f","articleId":2771,"userId":146,"content":"检查下是不是用了什么 es6 es7 的特性，跟 cjs 相关的，或者babel配置有差异","createdAt":1566982975857},{"id":13444,"originId":"5d66503fdcd8e81121a61ae8","articleId":2771,"userId":109,"content":"你看看  controller/user.js 有啥问题没。比如是 esm 格式","createdAt":1566986303132},{"id":13445,"originId":"5c3366385bf06c5e7e3f2529","articleId":2772,"userId":22,"content":"`ref.NULL_POINTER`","createdAt":1546872376835},{"id":13446,"originId":"5c33efba5bf06c5e7e3f2575","articleId":2772,"userId":3823,"content":"[@justjavac](/user/justjavac)  我也试了传递NULL_POINTER，依然提示相同的问题","createdAt":1546907578060},{"id":13447,"originId":"5c34dafa3898674067a7cc8c","articleId":2772,"userId":109,"content":"也许有参考信息 https://github.com/waitingsong/node-win32-api","createdAt":1546967802191},{"id":13448,"originId":"5c3540de3898674067a7ccbf","articleId":2772,"userId":21,"content":"实在不行就用wine运行你的C#程序去调用，wine不是虚拟机，比真win系统慢也是因为要实时解释。\r\n\r\n没用过ffi，你看下能不能初始化个int类型的空指针或者void类型的指针。还有Null和empty有一定区别，这点要注意。","createdAt":1546993886692},{"id":13449,"originId":"5d651931dcd8e81121a61721","articleId":2772,"userId":3824,"content":"想问一下最后有结果了吗? 我也被这个卡了好久 ","createdAt":1566906673891},{"id":13450,"originId":"5d651bc4dcd8e81121a61733","articleId":2772,"userId":1231,"content":"[@H246802](/user/H246802) 同问","createdAt":1566907332069},{"id":13451,"originId":"5d651bd9dcd8e81121a61738","articleId":2772,"userId":1231,"content":"[@justjavac](/user/justjavac) 没有解决","createdAt":1566907353006},{"id":13452,"originId":"5d651be0dcd8e81121a6173d","articleId":2772,"userId":1231,"content":"[@misland](/user/misland) 是的\r\n","createdAt":1566907360277},{"id":13453,"originId":"5d65d347dcd8e81121a617bd","articleId":2772,"userId":3824,"content":"[@remenwang](/user/remenwang) 大兄弟你是怎么翻出来的,我们该不会是同一个问题吧.","createdAt":1566954311946},{"id":13454,"originId":"5d65f5acdcd8e81121a618cb","articleId":2772,"userId":109,"content":"传个空 Buffer 过去试试","createdAt":1566963116639},{"id":13455,"originId":"5d6649c7421846662d985788","articleId":2772,"userId":3824,"content":"```\r\n let initResult = QCAP.QCAP_CREATE('CY3014 USB', 0, new Buffer([]), ppdevice, true, false);\r\n```\r\n\r\n是这样吗？","createdAt":1566984647378},{"id":13456,"originId":"5d64e669421846662d985322","articleId":2773,"userId":150,"content":"顶顶顶","createdAt":1566893673015},{"id":13457,"originId":"5d64ede0dcd8e81121a61675","articleId":2773,"userId":109,"content":"对于项目代码，写 d.ts 声明文件的成本还不如直接全 ts 了（哪怕是用很多 any）。","createdAt":1566895584352},{"id":13458,"originId":"5d654ad9421846662d985444","articleId":2773,"userId":150,"content":"[@waitingsong](/user/waitingsong) 现在的想法是老项目逐步过度到ts，先使用.d.ts 给老项目的js代码增加声明。等效果明显确实能起到减少开发过程中的BUG，再在新项目中启用ts代码。","createdAt":1566919385846},{"id":13459,"originId":"5d65db13dcd8e81121a61807","articleId":2773,"userId":97,"content":"是不是需要在 package.json 里面注一下 types，见 https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html","createdAt":1566956307857},{"id":13460,"originId":"5d65e698421846662d985532","articleId":2773,"userId":150,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 感谢回复，这个是配置模块包让第三方使用的方法，在项目内的代码使用应该不行","createdAt":1566959256454},{"id":13461,"originId":"5d65e850dcd8e81121a61862","articleId":2773,"userId":150,"content":"代码参考已经上传，有用过的大佬吗？https://github.com/ddzyan/d-ts-js","createdAt":1566959696675},{"id":13462,"originId":"5d660083dcd8e81121a618f2","articleId":2773,"userId":1741,"content":"```javascript\r\ndeclare const add: (a: number, b: number) => number;\r\nexport = add;\r\n```","createdAt":1566965891323},{"id":13463,"originId":"5d66376c421846662d985706","articleId":2773,"userId":150,"content":"[@dislido](/user/dislido) 感谢，使用已经实现功能","createdAt":1566979948170},{"id":13464,"originId":"5d662f4ddcd8e81121a61a0d","articleId":2774,"userId":1704,"content":"而且 最多 只能启动两个 启动第三个任务 会报错\r\n```\r\n[root@VM_134_103_redhat nuxt-api]# pm2 start deploy.js --name admin --max-memory-restart 300M\r\n[PM2] Starting /home/nuxt-api/deploy.js in fork_mode (1 instance)\r\n[PM2][ERROR] Error while launching application Error: spawn ENOMEM\r\n    at ChildProcess.spawn (internal/child_process.js:355:11)\r\n    at spawn (child_process.js:521:9)\r\n    at /usr/local/lib/node_modules/pm2/lib/God/ForkMode.js:112:20\r\n    at /usr/local/lib/node_modules/pm2/node_modules/async/internal/once.js:12:16\r\n    at next (/usr/local/lib/node_modules/pm2/node_modules/async/waterfall.js:21:29)\r\n    at /usr/local/lib/node_modules/pm2/node_modules/async/internal/onlyOnce.js:12:16\r\n    at WriteStream.<anonymous> (/usr/local/lib/node_modules/pm2/lib/Utility.js:186:13)\r\n    at WriteStream.emit (events.js:182:13)\r\n    at WriteStream.EventEmitter.emit (domain.js:460:23)\r\n    at fs.open (fs.js:2238:10)\r\n\r\n```","createdAt":1566977869268},{"id":13465,"originId":"5d6633cb421846662d9856d6","articleId":2774,"userId":98,"content":"root身份，人才","createdAt":1566979019432},{"id":13466,"originId":"5d64e8aa421846662d985329","articleId":2776,"userId":400,"content":"打印ctx就知道了，就在里面","createdAt":1566894250340},{"id":13467,"originId":"5d614c3b421846662d98484e","articleId":2777,"userId":109,"content":"git fetch --all\r\ngit br -a\r\n应该能看到你远程库有 pr 对应的分支。\r\n","createdAt":1566657595386},{"id":13468,"originId":"5d614c9adcd8e81121a60bac","articleId":2777,"userId":109,"content":"然后就知道咋办了吧。","createdAt":1566657690669},{"id":13469,"originId":"5d633b7adcd8e81121a60e04","articleId":2777,"userId":22,"content":"这个 PR 并没有合并到 master，如果你想用，只能自己拉源码，自己合并分支，然后自己编译。\r\n\r\n```\r\ngit clone https://github.com/liyuqian/flutter.git\r\ngit checkout input_events\r\n```\r\n","createdAt":1566784378613},{"id":13470,"originId":"5d6343df421846662d984b14","articleId":2777,"userId":3458,"content":"我怎么不能@，感谢二位，我已经放弃了，这个问题等官方解决吧。flutter这个问题不解决，flutter开发的APP在iOS上根本没法用。","createdAt":1566786527859},{"id":13471,"originId":"5d6350f2dcd8e81121a60f28","articleId":2777,"userId":109,"content":"flutter 目前坑很多，应该观望先。","createdAt":1566789874636},{"id":13472,"originId":"5d635981dcd8e81121a60fe6","articleId":2777,"userId":2035,"content":"咱们可以在github上为每一个开源项目通过'pull request'的方式贡献我们自己的代码，但作为项目的管理人员，会对贡献者提交的代码进行审核。如果通过审核，就会把该'pull request'的分支上的代码合并到项目内。你可以把所有大家贡献的代码拉到本地，怎么合并都行，但是不要用在生产环境，因为任何没有被项目管理员认可的代码都是有风险的。\r\ngit文档：https://git-scm.com/","createdAt":1566792065310},{"id":13473,"originId":"5d64dfe0dcd8e81121a6163a","articleId":2777,"userId":19,"content":"可以 使用git rebase  把他的代码合并到你的本地分支","createdAt":1566892000405},{"id":13474,"originId":"5d634efb421846662d984b8a","articleId":2778,"userId":1713,"content":"callback吧\r\n你想用return那就用Promise封装一下吧","createdAt":1566789371486},{"id":13475,"originId":"5d634f6cdcd8e81121a60f0c","articleId":2778,"userId":109,"content":"外层包个 Promise(resolve => {....}) 然后 resolve(partHtml)","createdAt":1566789484075},{"id":13476,"originId":"5d634fc0421846662d984b99","articleId":2778,"userId":356,"content":"fs.readFileSync 全部可以写成同步的啊，nodejs api操作文件都有同步api，这个代码简直太难看了","createdAt":1566789568015},{"id":13477,"originId":"5d637c04421846662d984d9d","articleId":2778,"userId":187,"content":"异步不能返回","createdAt":1566800900765},{"id":13478,"originId":"5d637d86dcd8e81121a610a9","articleId":2778,"userId":1558,"content":"![2019-08-26 14_33_19-启动.png](//static.cnodejs.org/FjaMBGiyVOW7CxFZ5WXwu6i1Rn3O)\r\n\r\n这样加了 还是报错.","createdAt":1566801286313},{"id":13479,"originId":"5d64ce1f421846662d985270","articleId":2778,"userId":570,"content":"const html = fs.readFileSync('index.html','utf8')","createdAt":1566887455235},{"id":13480,"originId":"5d58ba0712a0194544417785","articleId":2779,"userId":98,"content":"新项目坚决上go","createdAt":1566095879282},{"id":13481,"originId":"5d58c1d0697873456c6be3a7","articleId":2779,"userId":354,"content":"[@zengming00](/user/zengming00) 求教，为啥，有理由吗","createdAt":1566097872044},{"id":13482,"originId":"5d58eb46697873456c6be3fc","articleId":2779,"userId":1097,"content":"go 不用说了。nodejs 作用就是拿来做转发或者服务端渲染的真正写后端还是go强势而且go本身可以利用多核 node还要开多进程。 ","createdAt":1566108486167},{"id":13483,"originId":"5d59059712a019454441780f","articleId":2779,"userId":109,"content":"[@zengming00](/user/zengming00) 坚决与否还要看团队技术栈。不能主管一拍脑壳就上马。 前两天 cnblog 博客园不就翻车 .net core 了么。","createdAt":1566115223273},{"id":13484,"originId":"5d590641697873456c6be428","articleId":2779,"userId":109,"content":"高速开车换底盘记：Windows 与 Linux 部署都抗住了，但修车任务艰巨\r\nhttps://www.cnblogs.com/cmt/p/11362531.html","createdAt":1566115393150},{"id":13485,"originId":"5d591484697873456c6be445","articleId":2779,"userId":98,"content":"[@waitingsong](/user/waitingsong) 看什么团队技术栈，我一手遮天，之前有过成功的高速路上换发动机经验，一点也不怕","createdAt":1566119044889},{"id":13486,"originId":"5d591f29697873456c6be45f","articleId":2779,"userId":109,"content":"[@zengming00](/user/zengming00) 你狠。不过天塌下来就只有你背锅了哟～～","createdAt":1566121769843},{"id":13487,"originId":"5d5920de697873456c6be46b","articleId":2779,"userId":98,"content":"[@waitingsong](/user/waitingsong) 我这么牛逼的驾驶技术怎么会翻车","createdAt":1566122206786},{"id":13488,"originId":"5d59f26512a0194544417920","articleId":2779,"userId":545,"content":"[@zengming00](/user/zengming00)  [@hldgaoshuo](/user/hldgaoshuo) \r\n不看项目需求和当地人力情况都是耍流氓。\r\n\r\n如果你是做云计算，虚拟化，或者一些算法之类的，优先考虑go ，这个node 并不适合。\r\n如果是web 或者业务系统，优先考虑node.js (纯 ts) ，开发，维护成本都低于 go ，性能也不差。\r\n如果是嵌入式 ，两者都可以，看技术选型。\r\n\r\n我们目前架构是 k8s+istio 用什么语言都可以，主 node.sj 副 C++/Rust ，基本满足大部分需求了。\r\n最后强调一点，用node.js 一定用 typescript 。\r\n","createdAt":1566175845758},{"id":13489,"originId":"5d59f590697873456c6be564","articleId":2779,"userId":98,"content":"[@zuohuadong](/user/zuohuadong) 看什么成本，技术这东西会的人越多越不值钱，随便找个人就把你替换了，既然有一手遮天的机会干嘛不把握好，起码我在这里成本就没有增加，反而还是减少的\r\n现在为什么说程序猿越来越难找工作，因为大家都知道程序猿赚钱厉害，各行各业都转行干程序猿，一些培训班两三个月就出来一批人，我有幸帮公司招了次人，拿到拉勾的企业账号，那些人要的薪水低得你都不敢想象，所以现在程序猿不值钱了，刚入行的程序猿薪水甚至可能比不过餐厅服务员","createdAt":1566176656207},{"id":13490,"originId":"5d59f9a412a019454441795c","articleId":2779,"userId":886,"content":"[@zuohuadong](/user/zuohuadong) 已经用上istio啦，性能如何。有没有遇到啥坑","createdAt":1566177700534},{"id":13491,"originId":"5d59fb2012a019454441796f","articleId":2779,"userId":545,"content":"[@zengming00](/user/zengming00)  开发成本、维护成本、硬件成本 三者之间权衡了。\r\n技术债务也是额外成本。","createdAt":1566178080901},{"id":13492,"originId":"5d59fb3112a0194544417974","articleId":2779,"userId":545,"content":"[@shadow88sky](/user/shadow88sky)  可以接受，我们系统大，负载小一些","createdAt":1566178097449},{"id":13493,"originId":"5d6160a5421846662d984868","articleId":2779,"userId":613,"content":"技术的选型需要兼顾很多因素，很重要的一点就是要从团队的实际情况出发，没有完美的开发团队，也没有万能的语言，选择适合于当下团队的，就是最好的。至于golang和nodejs，个人建议，如果是想走后端路线，还是以golang为主，至于nodejs，能做的事情确实很多，用来写大型后端应用也不是不可以，但是相比较于golang，其动态类型和单线程模型决定其性能还是稍逊一筹","createdAt":1566662821160},{"id":13494,"originId":"5d637db3dcd8e81121a610ac","articleId":2779,"userId":545,"content":"[@dfsq1311](/user/dfsq1311)  \r\n1. typescript\r\n2. node 性能问题主要不在单线程。多线程的java 同步阻塞一样被吊打。","createdAt":1566801331563},{"id":13495,"originId":"5d64748fdcd8e81121a613ba","articleId":2779,"userId":1664,"content":"[@zuohuadong](/user/zuohuadong) 不用typescrpt是不是容易翻车？\r\n","createdAt":1566864527961},{"id":13496,"originId":"5d648551dcd8e81121a613f2","articleId":2779,"userId":109,"content":"[@oneWalker](/user/oneWalker) 哪怕我写了快十年的js，不小心都会写错（比如变量名）。团队协作项目不上 ts 肯定会翻车（bug 以及后期维护，增加需求，重构）。\r\n个人觉得  ts 最重要一点是避免给自己以及接手的人挖坑，同时也避免踩别人的坑（函数签名写在那儿，出了问题就不是我的锅了...)","createdAt":1566868817226},{"id":13497,"originId":"5d6486b3dcd8e81121a61405","articleId":2779,"userId":1664,"content":"[@waitingsong](/user/waitingsong) 那看来我这个项目还得转换一下。就看给不给时间了，时间太紧张的话我也就只好这样了。","createdAt":1566869171654},{"id":13498,"originId":"5d649735421846662d985137","articleId":2779,"userId":109,"content":"[@oneWalker](/user/oneWalker) 项目时间紧张就先解决上线问题。技术路线问题放后面。","createdAt":1566873397099},{"id":13499,"originId":"5d64cae9421846662d985262","articleId":2779,"userId":73,"content":"Ts+Node","createdAt":1566886633114},{"id":13500,"originId":"5b18e50857137f22415c4a0a","articleId":2780,"userId":358,"content":"看下源码区别\r\n- https://github.com/koajs/response-time\r\n- https://github.com/expressjs/response-time\r\n\r\n","createdAt":1528358152375},{"id":13501,"originId":"5b18fb3629e6e510415b28e6","articleId":2780,"userId":545,"content":"express 全   fastify 快    nest.js 稳\r\n只推荐这三个～  ","createdAt":1528363830080},{"id":13502,"originId":"5b18fb3e29e6e510415b28e8","articleId":2780,"userId":1213,"content":"express 回调地狱，也不存在了。\r\nkoa 的洋葱模型还是要好的，比如说做一些日志拦截的时候要方便；性能上有点差别，但一般的应用要求也还没到计较这个差别的时候。","createdAt":1528363838502},{"id":13503,"originId":"5b18fb5d8a4f51e140d94634","articleId":2780,"userId":545,"content":"[@vellengs](/user/vellengs) fastify 性能比 koa 和 express 高的不是一星半点～～","createdAt":1528363869520},{"id":13504,"originId":"5b18fc5257137f22415c4a22","articleId":2780,"userId":1213,"content":"[@zuohuadong](/user/zuohuadong) 一般应用系统慢都不是底层框架慢的, 当然性能是越高越好，但生态、上手容易否，这些都是需要平衡考虑的。","createdAt":1528364114882},{"id":13505,"originId":"5b190bd229e6e510415b290a","articleId":2780,"userId":98,"content":"放弃吧骚年，PHP才是最好语言","createdAt":1528368082207},{"id":13506,"originId":"5b1925da5cd02be6409012a9","articleId":2780,"userId":801,"content":"当初从express转koa，只是受不了无穷的回调，当然如果都用promise，其实差别就不那么大了，express和egg更有可比性，koa周边太少开发起来要造不少轮子。FYI. npm上[express和koa的下载曲线对比](https://awehunt.com/npmdownloads?ids=koa,express)，[Web框架Top10](https://cnodejs.org/topic/5b14cdb78a4f51e140d944fc)\r\n\r\n来自✨ [Node.js开源项目精选](http://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1528374746672},{"id":13507,"originId":"5b1926cf5cd02be6409012ab","articleId":2780,"userId":801,"content":"[@zuohuadong](/user/zuohuadong) 没用过fastify，很多时候选框架除了速度，周边配套和代码质量也很重要。这些方面fastify跟express和egg.js比怎么样？\r\n\r\n来自✨ [Node.js开源项目精选](https://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1528374991192},{"id":13508,"originId":"5b1932165cd02be6409012b7","articleId":2780,"userId":3830,"content":"[@vendar](/user/vendar) 已经有很多插件了，看这个列表，这个核心团队开发的：https://github.com/fastify/fastify/blob/master/docs/Ecosystem.md#core\r\n这些是社区开发的：https://github.com/fastify/fastify/blob/master/docs/Ecosystem.md#community","createdAt":1528377878140},{"id":13509,"originId":"5b19449257137f22415c4a56","articleId":2780,"userId":801,"content":"[@vincent178](/user/vincent178) 赞！很丰富很整洁。就是看到 < 100star的repo，有点手软，因为对于一个企业级或成熟的方案来说，或许有很多雷要扫。\r\n\r\n来自✨ [Node.js开源项目精选](https://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1528382610820},{"id":13510,"originId":"5b1951d95cd02be6409012c4","articleId":2780,"userId":1213,"content":"fastify 比较新，还是值得关注的。\r\n看了个模块 https://github.com/fastify/fastify-swagger\r\n不是注解的方式生产API 文档的，简直不忍直视。","createdAt":1528386009730},{"id":13511,"originId":"5b1960d35cd02be6409012c8","articleId":2780,"userId":2272,"content":"[@vendar](/user/vendar) 其实express跟egg.js两者也没什么可比性。\r\nexpress是web应用开发框架，本身非常薄（koa更薄），egg.js是比较完整的解决方案。[express + 一堆中间件] vs egg.js才有可比性。","createdAt":1528389843876},{"id":13512,"originId":"5b19e87829e6e510415b293a","articleId":2780,"userId":801,"content":"[@chyingp](/user/chyingp) 对，理论上是这样。只不过express的中间件和周边相对于koa已经非常完备了，甚至比egg.js都要强。\r\n\r\n来自✨ [Node.js开源项目精选](https://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1528424568228},{"id":13513,"originId":"5b1ab15b57137f22415c4ac2","articleId":2780,"userId":2302,"content":"koa2 性能比express 好不少， 内置async await 中间件。 用起来太方便了。 express 除了资源多点，对于有经验的nodejs开发者可以忽略不记。改一下用不了半天。","createdAt":1528475995888},{"id":13514,"originId":"5bc6d8909545eaf107b9cbc5","articleId":2780,"userId":545,"content":"[@jinwyp](/user/jinwyp) express 和 koa 差别不是很大，https://github.com/fastify/fastify","createdAt":1539758224158},{"id":13515,"originId":"5bc704e215e4fd1923f49004","articleId":2780,"userId":358,"content":"[@vendar](/user/vendar) 老实说，很多中间件，都是对某个 node 模块简单的二次封装，代码量都是很少的。\r\n\r\n所以我觉得 `express 中间件 比 koa 完备` 这是一个伪命题，无非是看下前者里面引入的模块是什么，然后简单封装为 koa 的语法。","createdAt":1539769570690},{"id":13516,"originId":"5bc82c90ede204052db80613","articleId":2780,"userId":368,"content":"[@vendar](/user/vendar) 为什么express的曲线有几天会急跌呢？","createdAt":1539845264139},{"id":13517,"originId":"5d649d1edcd8e81121a6149d","articleId":2780,"userId":3265,"content":"![image.png](//static.cnodejs.org/Fv0IwVAi3jtp6uSkdOK8waRTPcqb)\r\n\r\nexpress 提供了next模式，可以在中间件做异步操作，但是仅限于异步完成后通知下一个中间件。而该中间件本身是无法执行异步完成之后的逻辑，next仅仅是一个同步函数，，执行完就结束了。koa用到了async  await  ,所有中间件本身的异步逻辑完成之后还可以完成后该中间件的后置逻辑，一次请求会往返该中间件两次，很多逻辑就会只变得异常简单，代码易于维护。、  异常处理在express 中其实挺坑爹的，但是koa中异常处理非常简单。不管是同步还是异步，用promise包装之后都能被捕获。","createdAt":1566874910586},{"id":13518,"originId":"5d649d3a421846662d985164","articleId":2780,"userId":3265,"content":"![image.png](//static.cnodejs.org/FiX-ZcScvvwaL_tzEAQGyln4LnZs)\r\n\r\n上述代码用express的执行结果，期望two的异步执行完成后，再回过头来执行one，很明显做不到","createdAt":1566874938004},{"id":13519,"originId":"5d5e880edcd8e81121a605a2","articleId":2781,"userId":259,"content":"可以参考下这个项目 [tomato-work](https://github.com/xjh22222228/tomato-work-server)","createdAt":1566476302243},{"id":13520,"originId":"5d5ea395dcd8e81121a605e5","articleId":2781,"userId":109,"content":"折腾半天还不如直接 sql","createdAt":1566483349973},{"id":13521,"originId":"5d5ed1f9dcd8e81121a6062a","articleId":2781,"userId":1664,"content":"[@waitingsong](/user/waitingsong) 确实 已经被逼疯了 有没有其他好用的orm，再不行的话只能徒手上SQL了","createdAt":1566495225997},{"id":13522,"originId":"5d5ed23a421846662d9842f2","articleId":2781,"userId":1664,"content":"随便帮回答一下，A通过C关联B后好像不能修改C了。","createdAt":1566495290233},{"id":13523,"originId":"5d5ed5ba421846662d9842f6","articleId":2781,"userId":1664,"content":"[@xjh22222228](/user/xjh22222228) 十分谢谢","createdAt":1566496186174},{"id":13524,"originId":"5d5ed6a3421846662d9842f9","articleId":2781,"userId":1664,"content":"[@xjh22222228](/user/xjh22222228) 可以问一下，A和C通过B查询后不能够进行修改了，怎么处理的吗？","createdAt":1566496419119},{"id":13525,"originId":"5d5f4ac8dcd8e81121a606d6","articleId":2781,"userId":3458,"content":"如果要问sequelize的使用可以看官方文档，如果对某一个具体的查询不知如何写，可以举例，大家可以给你看看。你这样问，大家没法回答","createdAt":1566526152736},{"id":13526,"originId":"5d5f4d55421846662d9843a0","articleId":2781,"userId":1664,"content":"[@wuyugege](/user/wuyugege) 官方文档和在egg中的部分加载和函数是不一样的；\r\n楼上第一个回复已经给了正确的答案。\r\n通过模块const op=app.Sequelize.Op引入就可以使用了\r\n不过还是十分谢谢你。","createdAt":1566526805950},{"id":13527,"originId":"5d5f6d2d421846662d984422","articleId":2781,"userId":109,"content":"[@oneWalker](/user/oneWalker)\r\n简单场景，手写sql, query builder, orm 都行。\r\n复杂场景，query builder 比较合适。\r\n如果还能折腾，可以试试 knex 或者我基于前者的扩展轮子 kmore。","createdAt":1566534957582},{"id":13528,"originId":"5d64740cdcd8e81121a613b3","articleId":2781,"userId":1664,"content":"[@waitingsong](/user/waitingsong) 感觉这个坑爬了很久了，感觉快要爬出来了","createdAt":1566864396831},{"id":13529,"originId":"5d648504dcd8e81121a613ee","articleId":2781,"userId":109,"content":"[@oneWalker](/user/oneWalker)  只要业务增长，需求增加，orm 这个坑是爬不出来的。 我们当时也这样。","createdAt":1566868740844},{"id":13530,"originId":"5d63aa93dcd8e81121a6122b","articleId":2782,"userId":109,"content":"rsync","createdAt":1566812819754},{"id":13531,"originId":"5d63abfedcd8e81121a61250","articleId":2782,"userId":36,"content":"使用Mondo Rescue进行Linux系统备份\r\n","createdAt":1566813182549},{"id":13532,"originId":"5d63eb38421846662d985010","articleId":2782,"userId":3831,"content":"好的，多谢多谢，明天研究一下\r\n","createdAt":1566829368166},{"id":13533,"originId":"5d5ec6ac421846662d9842e9","articleId":2783,"userId":3132,"content":"electron?","createdAt":1566492332306},{"id":13534,"originId":"5d5f3f4f421846662d984336","articleId":2783,"userId":545,"content":"一般都是用 electron 多一些。\r\nnw.js 用的人少了。","createdAt":1566523215574},{"id":13535,"originId":"5d5f664adcd8e81121a6076e","articleId":2783,"userId":354,"content":"[@zuohuadong](/user/zuohuadong) nw 就是 electron 的前身~","createdAt":1566533194668},{"id":13536,"originId":"5d5fb718421846662d98459a","articleId":2783,"userId":545,"content":"[@cctv1005s](/user/cctv1005s)  两个不同的项目。\r\nnwjs 的地址，目前依然在更新：\r\nhttps://github.com/nwjs/nw.js\r\n\r\nnw.js 原来叫 node-webkit","createdAt":1566553880403},{"id":13537,"originId":"5d60ceb9421846662d9846c4","articleId":2783,"userId":108,"content":"当前主流的就是 browser base 的 GUI. 是比较成熟的方案，也有成功的案例。但都有受限于浏览器的通病，启动慢，性能差，内存占用不理想。\r\n\r\n可以试试这个，基于 Qt 的 GUI，值得关注\r\n\r\nhttps://github.com/nodegui/nodegui","createdAt":1566625465112},{"id":13538,"originId":"5d61db74dcd8e81121a60bfb","articleId":2783,"userId":3832,"content":"[@axetroy](/user/axetroy) 看起来非常不错，有项目例子吗？目前看到是空，非常值得关注","createdAt":1566694260807},{"id":13539,"originId":"5d63707e421846662d984d1e","articleId":2783,"userId":1199,"content":"其实客户端,如果是交互类,对这点内存占用也不是很敏感吧.\r\n上qt没啥必要","createdAt":1566797950406},{"id":13540,"originId":"5d5fb6d8421846662d984596","articleId":2784,"userId":545,"content":"看这个 https://cnodejs.org/topic/5d54b48112a0194544416afe","createdAt":1566553816588},{"id":13541,"originId":"5d6149d7421846662d984838","articleId":2784,"userId":640,"content":"https://discord.gg/P3uT8BG\r\n人很多的，平时不适合在GitHub的issue里交流的，这里不错","createdAt":1566656983195},{"id":13542,"originId":"5d5d2ebd421846662d983c4f","articleId":2785,"userId":1104,"content":"我想干的事是，打tag自动编译，然后把包直接丢到挂载目录里，自动把项目就发布了。","createdAt":1566387901209},{"id":13543,"originId":"5d5df95ae79eaa6628beb61e","articleId":2785,"userId":545,"content":"一般做法都是直接 copy 进来....\r\n 打好镜像，想用哪个版本就用哪个版本","createdAt":1566439770657},{"id":13544,"originId":"5d5f95d5dcd8e81121a60838","articleId":2785,"userId":682,"content":"有有我就是 前段大神","createdAt":1566545365351},{"id":13545,"originId":"5d5f9a29421846662d984511","articleId":2785,"userId":1373,"content":"[@wbget](/user/wbget) Jenkins 了解下~","createdAt":1566546473281},{"id":13546,"originId":"5d5fa886dcd8e81121a6088e","articleId":2785,"userId":713,"content":"没跑过 gitlab-runner, 但可能是你挂载的目录的权限问题? 你容器里面的用户有没有访问外部目录的权限? 比如外部目录是 root 的, 容器里面的用户并不是.","createdAt":1566550150257},{"id":13547,"originId":"5d5fffcbdcd8e81121a60986","articleId":2785,"userId":21,"content":"我上次也遇到了类似的问题，然后突然想起我本地docker客户端设置了连接开发机的docker服务端，我当时还是自己IP加端口怎么不生效。docker ps仔细一看才发现，有一些我本地没部署过的服务，才想起我客户端上次设置链接了开发机的docker Server。\r\n也是因为一直登开发机搞，很久没切回本地搞，一时间还给忘记了。","createdAt":1566572491107},{"id":13548,"originId":"5d60f4aedcd8e81121a60a96","articleId":2785,"userId":49,"content":"你好，大概半年前做过，仔细看了一下你的配置，感觉和官方的说明不太一样。这是笔记\r\n\r\n## Gitlab CI/CD\r\n### Config gitlab-runner\r\n> /etc/gitlab-runner/config.toml\r\n```bash\r\nconcurrent = 1\r\ncheck_interval = 0\r\n\r\n[[runners]]\r\n  name = \"haha-srv-media\"\r\n  url = \"https://gitlab.haha.us/\"\r\n  token = \"df1b4510632cf11e427eaf09a98205\"\r\n  executor = \"docker\"\r\n  [runners.docker]\r\n    tls_verify = false\r\n    image = \"node:10.6.0-jessie\"\r\n    privileged = false\r\n    disable_cache = false\r\n    volumes = [\"/cache\",\"/root/.ssh/:/root/.ssh/\"]\r\n    shm_size = 0\r\n    dns_search = [\"gitlab.haha.us\", \"registry.npm.taobao.org\"]\r\n    extra_hosts = [\"gitlab.haha.us:192.168.170.54\",\"registry.npm.taobao.org:114.55.80.225\"]\r\n  [runners.cache]\r\n```\r\n### Use Docker Execter\r\n```\r\ncheck_interval = 0\r\n\r\n[[runners]]\r\n  name = \"haha-srv-media\"\r\n  url = \"https://gitlab.haha.us/\"\r\n  token = \"df1b4510632cf11e427eaf09a98205\"\r\n  executor = \"docker\"\r\n  [runners.docker]\r\n    tls_verify = false\r\n    image = \"node:10.6.0-jessie\"\r\n    privileged = false\r\n    disable_cache = false\r\n    volumes = [\"/cache\",\"/root/.ssh:/root/.ssh\"]\r\n    shm_size = 0\r\n  [runners.cache]\r\n```\r\n\r\n```\r\nstages:\r\n  - test\r\n  - build\r\n\r\nbefore_script:\r\n  - echo \"config dns\"\r\n  - echo \"192.168.170.54 gitlab.haha.us\" >> /etc/hosts\r\n  - echo \"install ssh\"\r\n  - ls /etc/ssh\r\n  - eval `ssh-agent -s`\r\n  - ssh-add $HOME/.ssh/id_rsa\r\n  - ssh-add -l\r\n  - ssh -T git@gitlab.haha.us\r\n  - export NODE_PATH=/builds/haha/haha-srv-media/node_modules/\r\n  - echo \"registry=https://registry.npm.taobao.org\" >> $HOME/.npmrc\r\n  - npx cnpm i\r\n  - npx yarn list\r\n  \r\ntest:\r\n  stage: test\r\n  script: \r\n    - echo \"Running tests\"\r\n    - npm run lint\r\n\r\nbuild:\r\n  stage: build\r\n  script: \r\n    - echo \"Building the app\"\r\n    - npm run upload\r\n  only:\r\n  - staging\r\n```\r\n\r\n\r\n### Config .gitlab-ci.yml\r\n```\r\nstages:\r\n  - test\r\n  - build\r\n\r\ntest:\r\n  stage: test\r\n  script: echo \"Running tests\"\r\n\r\nbuild:\r\n  stage: build\r\n  script: echo \"Building the app\"\r\n  only:\r\n  - staging\r\n```\r\n\r\n## 参考\r\n[【gitlab-runner】](https://docs.gitlab.com/runner/commands/#configuration-file)","createdAt":1566635182675},{"id":13549,"originId":"5d5f4e34dcd8e81121a6070e","articleId":2786,"userId":89,"content":"yapi类似的很多啊，如果是swagger也很多","createdAt":1566527028703},{"id":13550,"originId":"5d5f557adcd8e81121a60731","articleId":2786,"userId":545,"content":"graphql 有自带的 playground 可以试试~","createdAt":1566528890525},{"id":13551,"originId":"5d5cd98ce79eaa6628beb320","articleId":2787,"userId":545,"content":"真想解决的话看看 midwayjs 和 nest.js 的实现~\r\n\r\n可以通过 constructor 注入依赖关系","createdAt":1566366092612},{"id":13552,"originId":"5d5d1121e79eaa6628beb454","articleId":2787,"userId":358,"content":"0. 楼上那位看不懂可以不用强答的。\r\n1. 简单的话可以直接在 helper.js 里面 require\r\n2. 终极方案是配置下 customLoader，譬如自动加载 `app/utils/** `到 `app.utils`，可以看下 https://github.com/atian25/egg-showcase/pull/13","createdAt":1566380321703},{"id":13553,"originId":"5d5d6f96421846662d983d40","articleId":2787,"userId":1664,"content":"[@atian25](/user/atian25) Thanks a lot ！感觉你对这个好熟悉，可以加个可以发私信的社交好友吗，😁😁嘻嘻","createdAt":1566404502992},{"id":13554,"originId":"5d5ddcfce79eaa6628beb575","articleId":2787,"userId":358,"content":"egg 有微信群，你可以找下苏依","createdAt":1566432508915},{"id":13555,"originId":"5d5de290e79eaa6628beb58c","articleId":2787,"userId":545,"content":"不用强答，但顺便上一张图，egg 未来有多少人用？\r\n\r\nnpm 下载量：\r\n![image.png](//static.cnodejs.org/FuHW0OxvaIGJnqjuEA6m45_w4806)\r\n\r\n建议能换就尽量换吧~ 没有增长趋势","createdAt":1566433936799},{"id":13556,"originId":"5d5dfb6ce79eaa6628beb63b","articleId":2787,"userId":215,"content":"最烦这种节奏狗,人家问egg问题关你什么事情,硬是进来插一脚找存在感,真是搞笑","createdAt":1566440300101},{"id":13557,"originId":"5d5dfbb4e79eaa6628beb653","articleId":2787,"userId":3458,"content":"其实我觉得吧，npm下载或star多不能说明啥，swift的后台框架vapor和nestjs的star差不多，有人用吗？不管怎样，node做纯后台，还是小众的，我就用来写个API，egg够用了。若要用重框架，我会选择Java那一套，还有我不想学ts哈哈","createdAt":1566440372395},{"id":13558,"originId":"5d5dfd08e79eaa6628beb676","articleId":2787,"userId":1664,"content":"[@holyselina](/user/holyselina) 用这个肯定是参考了学习成本，任务进度，项目扩展等多方面因素。","createdAt":1566440712937},{"id":13559,"originId":"5d5dfd63e79eaa6628beb680","articleId":2787,"userId":1664,"content":"[@atian25](/user/atian25) 不认识这个人，可以推一下吗？","createdAt":1566440803208},{"id":13560,"originId":"5d5dfe7ee79eaa6628beb69a","articleId":2787,"userId":36,"content":"[@zuohuadong](/user/zuohuadong) 老哥 上来就撕逼啊","createdAt":1566441086258},{"id":13561,"originId":"5d5e097ae79eaa6628beb6ef","articleId":2787,"userId":545,"content":"[@dengnan123](/user/dengnan123) \r\n没撕。\r\n通过 constructor 注入依赖关系确实是更优雅的方式。\r\n 不过阿里自己都出 midwayjs 来打脸了~ ","createdAt":1566443898450},{"id":13562,"originId":"5d5e09aee79eaa6628beb6f9","articleId":2787,"userId":545,"content":"[@holyselina](/user/holyselina)  烦就烦吧~ midway 本来就是基于 egg 的，更优雅的方式。\r\n阿里自己为你指明了方向","createdAt":1566443950302},{"id":13563,"originId":"5d5e09ec421846662d983e98","articleId":2787,"userId":545,"content":"[@wuyugege](/user/wuyugege)  主要还是得看增长趋势吧~   vapor 出来挺早了，star 高倒是正常。","createdAt":1566444012824},{"id":13564,"originId":"5d5e679edcd8e81121a604e0","articleId":2787,"userId":3834,"content":"[@zuohuadong](/user/zuohuadong)  别人问 egg 的问题，而且还是 js 项目 ... 你就跳出来说用 nest 吧，你这么努力推广，nest 是会给你钱么？要点碧莲吧。","createdAt":1566467998250},{"id":13565,"originId":"5d5f3f16dcd8e81121a60677","articleId":2787,"userId":545,"content":"[@whxaxes](/user/whxaxes)  \"在这个过程中helper.js的单个文件会越来越大，且不同类别的方法放在同一个file里面会使得框架越来越大\" ，从这个角度来看，最直接最优雅的方案确实是用 AOP 类的框架，可选的有 loopback4  、midwayjs、 nestjs 。\r\n都是 node.js 框架，没别的意思。\r\n\r\n个人角度来说， node.js 最近两年没有2015  年那会火，主要还是 框架的问题，一直没有 类似spring  、ruby on rails 、 laravel 这样更加“后端” 的框架出现。\r\n现在好不容易有了，能助node 在后端领域有一席之地，不应该推吗？","createdAt":1566523158287},{"id":13566,"originId":"5d5f38d7dcd8e81121a60653","articleId":2788,"userId":358,"content":"server got error: bind EADDRINUSE null:7002, ","createdAt":1566521559537},{"id":13567,"originId":"59118093ba8670562a40ee61","articleId":2789,"userId":1777,"content":"查两次，ref 的是另一个表的 _id","createdAt":1494319251726},{"id":13568,"originId":"5911811c3504ce1c2ac459f3","articleId":2789,"userId":413,"content":"[@klamtlne](/user/klamtlne) 不是太明白，可以举个例子吗？谢谢","createdAt":1494319388922},{"id":13569,"originId":"5911a61e9e32cc84569a6ce4","articleId":2789,"userId":59,"content":"[@liygheart](/user/liygheart) 我刚刚看了文档，你说的这个需求是应该是支持的， http://mongoosejs.com/docs/api.html，我晚上会看，再看看有没有  \r\n\r\n另外你也可以自己写查询方法， 用关联表。\r\n\r\n```\r\nnew Schema({\r\n\tblog: {\r\n\t\ttype: Schema.Types.ObjectId,\r\n\t\tref: 'blog'\r\n\t}\r\n\tdelete: Bool,\r\n\tuser: {\r\n\t\ttype: Schema.Types.ObjectId,\r\n\t\tref: 'user'\r\n\t}\r\n});\r\n```","createdAt":1494328862827},{"id":13570,"originId":"5911a9de9e32cc84569a6ced","articleId":2789,"userId":413,"content":"[@hi363138911](/user/hi363138911) 用一个中间表吗？这种做法我不太喜欢。。api我也翻了，没找到可用的方法","createdAt":1494329822174},{"id":13571,"originId":"591c340c9e32cc84569a70a1","articleId":2789,"userId":3836,"content":"mark","createdAt":1495020556009},{"id":13572,"originId":"591c59f69e32cc84569a70a4","articleId":2789,"userId":1326,"content":"可以加个middleware，在 blogSchema.post('find') 中过滤一下。","createdAt":1495030262355},{"id":13573,"originId":"591e5e019e32cc84569a7112","articleId":2789,"userId":413,"content":"[@beyond5959](/user/beyond5959) 那样的话分页就不好弄了","createdAt":1495162369247},{"id":13574,"originId":"59255242855efbac2cf7a29d","articleId":2789,"userId":1153,"content":"先把user里面被删除的用户id都找出来放在数组里。\r\n然后在Blog的find条件里面加上一个user不在之前查询出来的这个列表里的条件","createdAt":1495618114365},{"id":13575,"originId":"592559cf9e32cc84569a72e9","articleId":2789,"userId":413,"content":"[@backcj](/user/backcj) 这是个下策，不过也没啥好办法了","createdAt":1495620047997},{"id":13576,"originId":"59255df1855efbac2cf7a2a1","articleId":2789,"userId":1153,"content":"[@liygheart](/user/liygheart) 是的，我今天也遇到了类似问题，找了半天没能找到什么有用的东西，然后就只能这么分两步来了","createdAt":1495621105293},{"id":13577,"originId":"592640f4855efbac2cf7a2eb","articleId":2789,"userId":562,"content":"其实我觉得你的数据库有点问题，你的需求是 一个博客绑定的有user那么user isDelete: true 的时候，user已经删除那么对应user下的blog也应该查不出来 那么这样的话为什么在blog表不加入一个isDelete字段呢？当user删除的时候同样将user对应下的blog 也isDelete：true ","createdAt":1495679220271},{"id":13578,"originId":"59266d22d371b6372a8afd7d","articleId":2789,"userId":413,"content":"[@hewentaowx](/user/hewentaowx) 对于这个问题，我也试过，但跟用户关联的表多了的话，标记一个用户的状态就要处理好多的表数据 ，这样会很麻烦呀","createdAt":1495690530342},{"id":13579,"originId":"59268fae855efbac2cf7a319","articleId":2789,"userId":562,"content":"[@liygheart](/user/liygheart)  哈哈  有些地方麻烦一点其他地方就好做一点  不过你找到好办法没呀 分享一下\r\n","createdAt":1495699374649},{"id":13580,"originId":"5926a413855efbac2cf7a34a","articleId":2789,"userId":533,"content":"那我觉得逻辑应该是 \r\n```\r\nUser.find({isDelete:false},(err,users)=>{\r\n \t//.... users.ids  将user的id 搞成数组\r\n \tBolg.find({user:{$in:users.ids}}).populate({\r\n \t\tpath: 'user'\r\n\t}).exec()\r\n})\r\n```\r\n或者直接在最后 对结果处理下，将没user的去掉","createdAt":1495704595941},{"id":13581,"originId":"5926ba0b9e32cc84569a7364","articleId":2789,"userId":413,"content":"[@hewentaowx](/user/hewentaowx) 我没找到什么好办法，8楼说的是个法子，我觉得也是比较能接受的办法了","createdAt":1495710219481},{"id":13582,"originId":"5926ba45d371b6372a8afdbd","articleId":2789,"userId":413,"content":"[@yuk320](/user/yuk320) 你这方法跟8楼说的一样","createdAt":1495710277750},{"id":13583,"originId":"5a7921a8cb27e8121481a394","articleId":2789,"userId":3837,"content":"先populate,再用where筛选this.user符合条件的\r\n不要造populate中筛选，否则只会筛选user\r\n","createdAt":1517887912797},{"id":13584,"originId":"5a7927465e20f00d1427ff48","articleId":2789,"userId":3838,"content":"从查询效率来说，我更愿意在删除user时就把关联的表也都标记状态了，毕竟查询是频繁的，应该尽量优化和简单","createdAt":1517889350678},{"id":13585,"originId":"5d5e6a41dcd8e81121a60503","articleId":2789,"userId":273,"content":"[@tomoya92](/user/tomoya92) 我想知道楼主最后用的神马方案?","createdAt":1566468673162},{"id":13586,"originId":"5d59f4f0697873456c6be556","articleId":2790,"userId":545,"content":"有具体说明么","createdAt":1566176496914},{"id":13587,"originId":"5d59f74c12a019454441794c","articleId":2790,"userId":98,"content":"ivideo?","createdAt":1566177100431},{"id":13588,"originId":"5d5e238c421846662d983f7c","articleId":2790,"userId":831,"content":"[@zuohuadong](/user/zuohuadong) 最好是可以有API的那种。 可以用别人API的那种","createdAt":1566450572264},{"id":13589,"originId":"5d5e23f9421846662d983f80","articleId":2790,"userId":831,"content":"[@zengming00](/user/zengming00) 那个ivide","createdAt":1566450681276},{"id":13590,"originId":"5ba7abca15e4fd1923f489d9","articleId":2791,"userId":639,"content":"through: app.model.ris_to_brand","createdAt":1537715146141},{"id":13591,"originId":"5bd08fb389665c365e944275","articleId":2791,"userId":3839,"content":"解决了，是 sequelize 默认会把表名转为复数，所以，如果想自己定义，可以 model 定义时加 `freezeTableName: true` 即可","createdAt":1540394931439},{"id":13592,"originId":"5d5e0483421846662d983e5f","articleId":2791,"userId":1664,"content":"想问下那个association建立是\r\nA，C通过B对应多对多\r\nA,C,B三个表之间的连接字段是必须要一致吗？如果不一致的话怎么办呢？","createdAt":1566442627310},{"id":13593,"originId":"5d5e05aa421846662d983e6f","articleId":2791,"userId":3458,"content":"我不用关联查询，都是挨个查表，然后再组合，有没有大佬说一下，这种性能会差一些吗","createdAt":1566442922509},{"id":13594,"originId":"5d5e07ab421846662d983e88","articleId":2791,"userId":390,"content":"直接上例子\r\nCustomer和label是多对多的。\r\n\r\n```js\r\n// model/customer.ts\r\napp.model.Customer.belongsToMany(app.model.Label, {through: 'customer_label'});\r\n// model/label.ts\r\napp.model.Label.belongsToMany(app.model.Customer, {through: 'customer_label'});\r\n// 多对多会自动生成customer_label表（包含：customer_id，label_id字段），你再建一个customer_labelmodel去操作这个表就可以了\r\n// service/customer.ts\r\nawait app.model.Customer.findAndCountAll({\r\n            where: condition, offset, limit,\r\n            order: orders, attributes: { exclude: ['desc'] },\r\n            include: [{\r\n                model: app.model.Label,\r\n                through: {\r\n                    attributes: ['CustomerId', 'LabelId'],\r\n                }\r\n            }],\r\n        });\r\n```\r\n\r\n","createdAt":1566443435505},{"id":13595,"originId":"5d5e07ebe79eaa6628beb6d1","articleId":2791,"userId":390,"content":"brand 和 ris中不用包含外键，做不做不到多对多。","createdAt":1566443499274},{"id":13596,"originId":"5d54bdde12a0194544416b58","articleId":2792,"userId":3789,"content":"请问代码托管在什么上面呢？","createdAt":1565834718463},{"id":13597,"originId":"5d54c1ef697873456c6bd75b","articleId":2792,"userId":153,"content":"[@sunNode](/user/sunNode) 内部仓库","createdAt":1565835759296},{"id":13598,"originId":"5d54c1f912a0194544416b7e","articleId":2792,"userId":153,"content":"[@sunNode](/user/sunNode) 算作gitlab吧","createdAt":1565835769756},{"id":13599,"originId":"5d54c54a12a0194544416bc5","articleId":2792,"userId":3789,"content":"gitlab 里面不是可以提 PR 的啊，不过不可以设置多个 Reviewer，指给指定 Reviewer，在提交 PR 的模板里面关联 case 编号，介绍这个 PR，还有就是 code commit message规范就可以了。","createdAt":1565836618975},{"id":13600,"originId":"5d54c624697873456c6bd79f","articleId":2792,"userId":3701,"content":"同求code review 最佳实践~","createdAt":1565836836523},{"id":13601,"originId":"5d54f911697873456c6bd8cc","articleId":2792,"userId":755,"content":"我现在的团队没有 review, 但是我想说下理想中的场景:\r\n1. review 应该是异步的, 不需要强制把大家叫到一起, 盯着大屏幕 review\r\n2. review 不能光看逻辑, 代码风格, 实现是否优雅也应该是重点 review 范围\r\n3. 明确一点, review 不是给别人挑错, 而是一场技术交流, 差的指出来使人进步, 好的赞美一下向人学习\r\n4. 不一定非要熟悉该业务、模块的人 review, 每个人各有所长, 别人站在不同的视角可能有意想不到的收获\r\n个人想法, 欢迎探讨指点\r\n如果贵公司是这样的, 并且有前端 / node岗位的话, 欢迎联系我","createdAt":1565849873755},{"id":13602,"originId":"5d55190a697873456c6bda04","articleId":2792,"userId":153,"content":"[@sunNode](/user/sunNode) 这个应该算PR。Code Review会议还是要有的，这样大家可以一起学习学习，一起讨论。","createdAt":1565858058509},{"id":13603,"originId":"5d551ac0697873456c6bda0b","articleId":2792,"userId":153,"content":"[@yinxin630](/user/yinxin630) https://juejin.im/post/5d550f776fb9a06ae439ee81。这是我今天写的，也是问了很多人&查了很多资料，可以看一下。code review会议是需要有的，大家一起讨论会更加注重代码的最佳实践。还有一点就是code smell，一起讨论的时候有经验的同事会很快发现代码中的code smell。\r\n\r\n简历发给我，我给你内推1798448128@qq.com🤝","createdAt":1565858496200},{"id":13604,"originId":"5d551bb712a0194544416e68","articleId":2792,"userId":1705,"content":"目前团队 Code Review 已经跑了一年多了，效果不错，可能不算最佳实践，但是目前也没有不爽的体验。基于企业微信 & GitLab，截取部分内容供参考~  ![image.png](//static.cnodejs.org/Fokkx4b4ZExOxgGBCr8DCuWUCB2G)![image.png](//static.cnodejs.org/Fr_Gt7jooITd4mfNESdKCZEWpVco)![image.png](//static.cnodejs.org/FtXlZi6XV_ZVIBLNxkGAYphVcGjy)","createdAt":1565858743979},{"id":13605,"originId":"5d551c00697873456c6bda25","articleId":2792,"userId":153,"content":"[@guchongxi](/user/guchongxi) 感谢分享","createdAt":1565858816776},{"id":13606,"originId":"5d551c49697873456c6bda33","articleId":2792,"userId":153,"content":"[@yinxin630](/user/yinxin630) 目前在美团住宿，团队在内推呢，不知道你感兴趣不","createdAt":1565858889720},{"id":13607,"originId":"5d551ea612a0194544416eaa","articleId":2792,"userId":153,"content":"[@guchongxi](/user/guchongxi) 这个应该就是PR吧","createdAt":1565859494255},{"id":13608,"originId":"5d551f47697873456c6bda60","articleId":2792,"userId":1705,"content":"[@Rabbitzzc](/user/Rabbitzzc) 感谢，目前还没有这方面考虑哈","createdAt":1565859655673},{"id":13609,"originId":"5d551f7112a0194544416eb8","articleId":2792,"userId":1705,"content":"[@Rabbitzzc](/user/Rabbitzzc) 是的，GitHub - PR; GitLab - MR 一个东西","createdAt":1565859697103},{"id":13610,"originId":"5d55202912a0194544416ec7","articleId":2792,"userId":1705,"content":"当然目前我们是约定优先，也可以使用 GitHub 的 Require pull request reviews before merging 或者 GitLab 的 Merge request approvals 来限制必须经过指定成员 Review 后才能合并分支","createdAt":1565859881223},{"id":13611,"originId":"5d552530697873456c6bda8a","articleId":2792,"userId":755,"content":"[@Rabbitzzc](/user/Rabbitzzc) 初期可以搞一些集体会议, 团队养成习惯后尽量减少, 不然总有种逼人的感觉, 达不到什么好的效果. 更主要还是费时间..","createdAt":1565861168042},{"id":13612,"originId":"5d552656697873456c6bda95","articleId":2792,"userId":153,"content":"[@yinxin630](/user/yinxin630) 所以review目标很重要，把握方向是review的难题","createdAt":1565861462141},{"id":13613,"originId":"5d57b8eb12a0194544417620","articleId":2792,"userId":36,"content":"[@guchongxi](/user/guchongxi) 不错","createdAt":1566030059124},{"id":13614,"originId":"5d5a4150697873456c6be701","articleId":2792,"userId":3789,"content":"[@Rabbitzzc](/user/Rabbitzzc) 嗯嗯，我同意你的说法。但是实际开发过程中，不太可能有这样的会议，第一点是项目大了之后每个模块细致的方面不是每个成员都清楚，一般是小组 Leader 比较清晰；第二点这种 Review 会议比较耗时，如果改动点较大的话无法从 Review 会议中找出问题。所以我的建议还是从源头把控，从功能需求开始做的时候需要有 Design 会议，同时可以请组内小伙伴来听，最后从了解需求的小伙伴里面挑选 Reviewer。这样 Reviewer 可以根据的 PR 里面的描述，以及对需求的了解作出判断。我们之前的做法一般会将 PR Code 拉取到本地，结合未改动的 Code 给出建议，这样 Review Code 不会成为 Reviewer 的负担，也可以很快的给出回应。","createdAt":1566196048874},{"id":13615,"originId":"5d5cbe58421846662d983a3f","articleId":2792,"userId":153,"content":"[@sunNode](/user/sunNode) 感谢建议","createdAt":1566359128589},{"id":13616,"originId":"5d5cffc9e79eaa6628beb408","articleId":2792,"userId":3789,"content":"[@Rabbitzzc](/user/Rabbitzzc) 分享一篇文章，讲的还可以。https://mp.weixin.qq.com/s/jL7IPDUxPtWOx1d9nLC5TA","createdAt":1566375881733},{"id":13617,"originId":"5d5d509f421846662d983ce5","articleId":2792,"userId":79,"content":"嘿嘿，学习了","createdAt":1566396575183},{"id":13618,"originId":"5d54bbad697873456c6bd702","articleId":2794,"userId":19,"content":"你房间内所有信息应该存在表里，还不是存在redis 所谓的频道里，前端拿信息的时候应该把角色信息缓存下来，或者每次发信息的时候都带上角色信息","createdAt":1565834157547},{"id":13619,"originId":"5d575c0c697873456c6be19e","articleId":2794,"userId":1673,"content":"建议用ws框架写","createdAt":1566006284044},{"id":13620,"originId":"5d59fbb812a0194544417982","articleId":2794,"userId":318,"content":"[@nwljy](/user/nwljy) ws框架是指？","createdAt":1566178232929},{"id":13621,"originId":"5d5b0d1512a0194544417d70","articleId":2794,"userId":1673,"content":"nodejs [ws](https://www.npmjs.com/package/ws  )https://www.npmjs.com/package/ws \r\n\r\na--进入房间  ws服务器获取具体信息，就具体信息进行处理，返回房间信息\r\n我的qq 605214875\r\n","createdAt":1566248213249},{"id":13622,"originId":"5d5cf59de79eaa6628beb3c8","articleId":2794,"userId":187,"content":"1.定义房间列表，房间属性，就是一个集合\r\n2.监听用户加入房间，加入后，为房间对象增加一个用户，\r\n3.用户id在一连接socket的时候，动态生成一个，挂在socket对象上","createdAt":1566373277936},{"id":13623,"originId":"59dacedf61932717683d216d","articleId":2795,"userId":3374,"content":"虽然有点打击人，用微信聊技术的群大多最后不了了之","createdAt":1507512031106},{"id":13624,"originId":"59dad8832543cb3368b16270","articleId":2795,"userId":3842,"content":"同求","createdAt":1507514499365},{"id":13625,"originId":"59dad94e61932717683d2176","articleId":2795,"userId":831,"content":"[@nullcc](/user/nullcc) 哈哈 确实是  不如QQ","createdAt":1507514702929},{"id":13626,"originId":"59db63f6f7cc61fb67daaee2","articleId":2795,"userId":3130,"content":"[@nullcc](/user/nullcc) 这点定力没有也就没有什么前途可言了，我只想找些一同在学习路上的人，交流问题，交流项目。因为很早就不再用QQ了，所以只能寄希望于微信群，有意者随时欢迎。加 jc13125335","createdAt":1507550198436},{"id":13627,"originId":"59db6e54f7cc61fb67daaee7","articleId":2795,"userId":3130,"content":"![1379763943.jpg](//static.cnodejs.org/FpQur-GbYPWfh0ML5-r2dAabCqcm)\r\n期待大神入股","createdAt":1507552852092},{"id":13628,"originId":"59dc248620a1a3647d72aa83","articleId":2795,"userId":3374,"content":"[@leavesdrift](/user/leavesdrift) 并不是定力不行，而是这种沟通方式不适合交流技术，文档不能归档查询，附件会过期，讲真还是邮件列表靠谱","createdAt":1507599494866},{"id":13629,"originId":"59dc2ba361932717683d21c8","articleId":2795,"userId":358,"content":"[@nullcc](/user/nullcc) 或者基于 GitHub Issue 的异步交流方式","createdAt":1507601315443},{"id":13630,"originId":"59df001b20a1a3647d72ab4b","articleId":2795,"userId":3374,"content":"[@atian25](/user/atian25) 是的","createdAt":1507786779188},{"id":13631,"originId":"5d5cf46b421846662d983b3c","articleId":2795,"userId":3843,"content":"还有没有群主\r\n\r\nwx 1352983234","createdAt":1566372971087},{"id":13632,"originId":"5d538d2f697873456c6bd390","articleId":2796,"userId":1377,"content":"你去mongodb那建立你的part10了吗？？","createdAt":1565756719136},{"id":13633,"originId":"5d53c862697873456c6bd4b6","articleId":2796,"userId":3172,"content":"你本地开启mongodb服务没有 ","createdAt":1565771874386},{"id":13634,"originId":"5d53eebb697873456c6bd570","articleId":2796,"userId":356,"content":"mongo 命令在terminal测试一下啊","createdAt":1565781691324},{"id":13635,"originId":"5d53eec9697873456c6bd574","articleId":2796,"userId":356,"content":"[@Josh119891](/user/Josh119891) 。。。。不需要建立的","createdAt":1565781705146},{"id":13636,"originId":"5d54b3c4697873456c6bd6a7","articleId":2796,"userId":3844,"content":"[@WUSO01](/user/WUSO01) 肯定开启了啊，不然就不是这个报错了","createdAt":1565832132971},{"id":13637,"originId":"5d54b40f697873456c6bd6ac","articleId":2796,"userId":3844,"content":"[@TimLiu1](/user/TimLiu1) 我直接在用cmd看效果的","createdAt":1565832207154},{"id":13638,"originId":"5d54b9f112a0194544416b38","articleId":2796,"userId":755,"content":"`lsof -i:27017` 看看啥输出","createdAt":1565833713348},{"id":13639,"originId":"5d5a35f212a0194544417ae8","articleId":2796,"userId":3845,"content":"楼主问题解决了吗？","createdAt":1566193138276},{"id":13640,"originId":"5d5cc012e79eaa6628beb2cd","articleId":2796,"userId":3844,"content":"[@yuanyazhen](/user/yuanyazhen) 解决了","createdAt":1566359570767},{"id":13641,"originId":"5d5c9a6fe79eaa6628beb1c0","articleId":2797,"userId":98,"content":"你个已经是非常古老的版本了吧？\r\nhttps://www.npmjs.com/package/log4js/v/1.1.1","createdAt":1566349935557},{"id":13642,"originId":"5d5651e112a01945444172d3","articleId":2798,"userId":268,"content":"你的80服务启动了吗？","createdAt":1565938145695},{"id":13643,"originId":"5d5652f7697873456c6bdecc","articleId":2798,"userId":3847,"content":"[@jiangli373](/user/jiangli373) 没有启动80端口，服务端监听的是3000端口，不知道为什么报错信息里面会有80端口，不知道怎么去改。btw从前端使用axios发起请求的话是不包错的，服务端使用axios发请求就会报错。","createdAt":1565938423033},{"id":13644,"originId":"5d566b2a12a01945444173bb","articleId":2798,"userId":268,"content":"![image.png](//static.cnodejs.org/Fr9jfFG1nJDU_kdfxEeEh5PxpM-1)\r\n你这里定义下具体的地址呢？你这里是写的是`/users/signin`，axios估计是默认去请求 `127.0.0.1/users/signin`了","createdAt":1565944618437},{"id":13645,"originId":"5d5b6532d53e9171e98a94a6","articleId":2798,"userId":3847,"content":"[@jiangli373](/user/jiangli373)   \r\n![微信截图_20190820110831.png](//static.cnodejs.org/FjVk9E3YmWqJL4l1RZv-LadJNdiH)\r\n![微信截图_20190820110956.png](//static.cnodejs.org/FkPDdHgoGJCSc5n43vbzvYSebwTz)\r\n\r\n此处的axios是创建的一个axios实例，定义的baseUrl是localhost:3000,不明白这个80是如何出现的，改如何自定义这个端口？\r\n请指教。","createdAt":1566270770889},{"id":13646,"originId":"5d5a10db697873456c6be62e","articleId":2799,"userId":3848,"content":"！！！！！！有大神吗？","createdAt":1566183643633},{"id":13647,"originId":"5cb339ec207b2365936ecdbc","articleId":2800,"userId":3849,"content":"Ghost","createdAt":1555249644694},{"id":13648,"originId":"5cb3ce2f207b2365936ece55","articleId":2800,"userId":22,"content":"Ghost +1","createdAt":1555287599675},{"id":13649,"originId":"5cb3d64c207b2365936ece8b","articleId":2800,"userId":1417,"content":"hexo 算吗","createdAt":1555289676265},{"id":13650,"originId":"5cb3db82dad66d658e408def","articleId":2800,"userId":1696,"content":"https://firekylin.org/  ","createdAt":1555291010743},{"id":13651,"originId":"5ceaaab152ccb64168ba7afe","articleId":2800,"userId":831,"content":"多谢几位。我去看看","createdAt":1558882993601},{"id":13652,"originId":"5cecdafe52ccb64168ba8283","articleId":2800,"userId":113,"content":"Cabloy-CMS：动静结合，可轻松实现博客、文档、社区论坛等功能，内置多语言支持、评论系统等\r\n[https://cms.cabloy.com/](https://cms.cabloy.com/)\r\n\r\n博客Demo：[https://zhennann.com](https://zhennann.com)\r\n文档Demo：[https://cabloy.com/zh-cn/articles/introduce.html](https://cabloy.com/zh-cn/articles/introduce.html)\r\n社区Demo：[https://community.cabloy.com/zh-cn/index.html](https://community.cabloy.com/zh-cn/index.html)\r\n\r\n\r\n\r\n","createdAt":1559026430674},{"id":13653,"originId":"5cefafc452ccb64168ba8fac","articleId":2800,"userId":54,"content":"使用Express+mongoDB搭建的多人blog系统\r\n因为做前端所以经常接触到Node，出于兴趣动手边学边做了一个简单的blog网站，纯属学习使用。代码已开源，欢迎star。\r\n\r\nGitHub项目地址：https://github.com/AnsonZnl/jsnav\r\n大家帮着点个star 谢谢谢谢~","createdAt":1559211972258},{"id":13654,"originId":"5d59f50e12a0194544417936","articleId":2800,"userId":545,"content":"https://docs.nestjs.cn/6/awesome\r\n有很多高质量的，都是 typescript 写的","createdAt":1566176526354},{"id":13655,"originId":"5d54ca46697873456c6bd7b9","articleId":2801,"userId":358,"content":"本地开发需要半分钟？为啥？","createdAt":1565837894684},{"id":13656,"originId":"5d54d537697873456c6bd81b","articleId":2801,"userId":98,"content":"解决办法就是换其它框架","createdAt":1565840695995},{"id":13657,"originId":"5d54f74012a0194544416d06","articleId":2801,"userId":549,"content":"是不是windows上webstorm的设置没改 ","createdAt":1565849408691},{"id":13658,"originId":"5d561123697873456c6bdd4a","articleId":2801,"userId":1664,"content":"[@CaanDoll](/user/CaanDoll) 用的vscode，没用webstorm了，webstorm那个要重启才能刷新太恶心了","createdAt":1565921571652},{"id":13659,"originId":"5d56115012a019454441717f","articleId":2801,"userId":1664,"content":"[@atian25](/user/atian25) 就是eggjs自带的热更新有点慢，不知道是不是只有我出现了这个问题","createdAt":1565921616881},{"id":13660,"originId":"5d567573697873456c6bdfd6","articleId":2801,"userId":358,"content":"egg 没做啥热更新，就是监控到文件变化直接重启。有问题就带可复现方式提 issue","createdAt":1565947251196},{"id":13661,"originId":"5d56814a697873456c6be064","articleId":2801,"userId":1664,"content":"[@atian25](/user/atian25) ThX ","createdAt":1565950282624},{"id":13662,"originId":"5d5685db697873456c6be06f","articleId":2801,"userId":1664,"content":"[@atian25](/user/atian25) 那可以再问一下egg的插件怎么添加忽略路径的，插件本身是不自带这个功能的，可以通过中间件实现吗？","createdAt":1565951451174},{"id":13663,"originId":"5d580d1f697873456c6be31a","articleId":2801,"userId":358,"content":"啥叫 egg 插件忽略路径？","createdAt":1566051615665},{"id":13664,"originId":"5d58f00112a01945444177d6","articleId":2801,"userId":1664,"content":"[@atian25](/user/atian25) 比如egg里面post请求需要从csrf token去进行相关的验证。\r\n如果使用自带的机制的话，首次请求就需要传入crsfToken,插件的机制能否忽略首次登录。\r\n现在是使用自己生成的token，在中间件中对指定的首次路由请求进行忽略。\r\n就是想问egg的插件能否有方法做到这一点？","createdAt":1566109697768},{"id":13665,"originId":"5d59032312a0194544417800","articleId":2801,"userId":358,"content":"[@oneWalker](/user/oneWalker) 你不用自带的就把自带的开关关掉咯","createdAt":1566114595530},{"id":13666,"originId":"5d57c325697873456c6be25d","articleId":2803,"userId":3852,"content":"js-file-download包，很简单的代码，copy下来试下\r\n\r\nhttps://github.com/kennethjiang/js-file-download/blob/master/file-download.js","createdAt":1566032677070},{"id":13667,"originId":"5d57d3ea12a0194544417691","articleId":2803,"userId":879,"content":"[@betgar](/user/betgar) 感谢👍","createdAt":1566036970553},{"id":13668,"originId":"5d563d28697873456c6bde0b","articleId":2804,"userId":31,"content":"能动态获取函数类型的？应该没有这么智能把\r\n\r\n```js\r\nfunction callFun<T extends keyof Funs>(name: T, ...params: Parameters<Funs[T]>) {\r\n    return funs[name].apply(funs, params);\r\n}\r\n```\r\n这个就跟 any 一样了，或者把参数全部可选了，不过感觉怪怪的","createdAt":1565932840388},{"id":13669,"originId":"5d566134697873456c6bdf36","articleId":2804,"userId":109,"content":"[@yviscool](/user/yviscool) 这个不错。也有类型检查的。","createdAt":1565942068633},{"id":13670,"originId":"5d56640d12a019454441738a","articleId":2804,"userId":31,"content":"[@waitingsong](/user/waitingsong) 这是里面有问题，外面肯定是好的啊，感觉他是想在里面获得对应的类型，进行下一步操作","createdAt":1565942797470},{"id":13671,"originId":"5d566977697873456c6bdf81","articleId":2804,"userId":109,"content":"[@yviscool](/user/yviscool) 我觉得应该方便动态调用类实例的方法，只要外面类型检查能通过就行，不在乎内部具体（类型）细节。","createdAt":1565944183198},{"id":13672,"originId":"5d566ede12a01945444173e5","articleId":2804,"userId":1741,"content":"[@yviscool](/user/yviscool) 感谢解答，我现在直接用`params[0] as any`了","createdAt":1565945566491},{"id":13673,"originId":"5d5678de12a0194544417430","articleId":2804,"userId":31,"content":"```js\r\nfunction callFun<O, M extends keyof O>(object: O, method: M, ...params: Parameters<O[M]>) {\r\n}\r\n\r\ncallFun(funs, 'foo', { n: 1, s: 'sss' })\r\ncallFun(funs, 'bar', { s: 'zjl', b: true})\r\n```\r\n你那样就行，我这样他就推断不出来， ","createdAt":1565948126805},{"id":13674,"originId":"5d5548fd697873456c6bdb76","articleId":2805,"userId":109,"content":"http://sheetjs.com","createdAt":1565870333400},{"id":13675,"originId":"5d5564d8697873456c6bdbf0","articleId":2805,"userId":79,"content":"exceljs: https://github.com/exceljs/exceljs (PS:  可以解析excel文件和保存excel文件； 也可方便调整excel表格中 sheet,column, row, cell 的样式)\r\n![image.png](//static.cnodejs.org/Flqn_ecy69OnGNBrJpzmn3Vyh_20)","createdAt":1565877464455},{"id":13676,"originId":"5d556f7e12a019454441709f","articleId":2805,"userId":3853,"content":"[@qiutian00](/user/qiutian00) exceljs 可以读取 xlsx 不能读取 xls","createdAt":1565880190934},{"id":13677,"originId":"5d559961697873456c6bdc89","articleId":2805,"userId":743,"content":"[ejsExcel](https://github.com/sail-sail/ejsExcel)","createdAt":1565890913579},{"id":13678,"originId":"5d55f0c5697873456c6bdca1","articleId":2805,"userId":79,"content":"[@HuangChen1989](/user/HuangChen1989), 是的","createdAt":1565913285322},{"id":13679,"originId":"5d549fed12a0194544416aa5","articleId":2806,"userId":3753,"content":"`fs`是后端模块,如果是前端环境当然不能使用","createdAt":1565827053686},{"id":13680,"originId":"5d54a918697873456c6bd64d","articleId":2806,"userId":1922,"content":"是不是以前可以用fs，安装vue element-ui 后，好用的fs突然不能用了呢？\r\n如果是这样的话，看看加载的模块是不是有冲突。或者是什么配置的地方被修改了。看看使用fs报的什么错误信息。\r\nvue element-ui  是在前端浏览器运行。\r\nfs是在后端服务器运行的。\r\n开发的时候建议建立两个项目，前端一个项目，后端一个项目，这样不容易冲突。","createdAt":1565829400033},{"id":13681,"originId":"5d54be6112a0194544416b63","articleId":2806,"userId":3854,"content":"fs是后端，vue是前端，这两个装一个项目里，你到底想干嘛?","createdAt":1565834849928},{"id":13682,"originId":"5d54d4da12a0194544416c62","articleId":2806,"userId":3853,"content":"[@galikeoy](/user/galikeoy) 我用 shadow-cljs 写vue template 中的html 只能写在字符串里 字符串内的html没有高亮和自动缩进 我想把html写在文件中 用fs读取 ","createdAt":1565840602714},{"id":13683,"originId":"5d54f65512a0194544416cfa","articleId":2806,"userId":3855,"content":"fs模块只能运行在node环境下，浏览器是不行的","createdAt":1565849173098},{"id":13684,"originId":"5d53e62e12a01945444169b0","articleId":2807,"userId":419,"content":"在git上问赛","createdAt":1565779502664},{"id":13685,"originId":"5d53f4f1697873456c6bd591","articleId":2807,"userId":150,"content":"已经提问啦：https://github.com/midwayjs/pandora/issues/304","createdAt":1565783281110},{"id":13686,"originId":"5d54c3ed12a0194544416b9f","articleId":2807,"userId":150,"content":"egg项目大家都是用什么做进程管理和资源监控的呢？ alinode,pm2还是其他呢?","createdAt":1565836269051},{"id":13687,"originId":"5d54c534697873456c6bd796","articleId":2807,"userId":358,"content":"你这问题描述文不对题啊：\r\n- 上面那个不是 Koa 代码么？不是 Egg\r\n- 看报错信息是 pandora 自己的 CLI 报错，都还没到框架那层。\r\n\r\nEgg 进程管理自带了，监控和**分析**除了 AliNode 没有一个能打的。 PM2 这种只能单机看看几个小数据，跟 AliNode 根本不是一个层面的概念。","createdAt":1565836596932},{"id":13688,"originId":"5d54ca74697873456c6bd7c1","articleId":2807,"userId":150,"content":"[@atian25](/user/atian25) \r\n1. 好的，EGG代码量较多，不好上传，所以写了koa的代码\r\n2. alinode可以做资源监控，如果一台机器上部署了多个egg项目，egg的进程管理要如何实现呢，","createdAt":1565837940555},{"id":13689,"originId":"5d54ce2f697873456c6bd7e3","articleId":2807,"userId":358,"content":"1. 所以问题很清晰，并不是 pandora + egg 启动不了 ，而是 pandora 自身有问题，可能是什么插件或依赖没装好吧。\r\n2. docker 化。 就算你没 docker 化，进程管理没什么需要搞的啊，egg 本身就帮你搞定了进程守护，你无非就需要 npm start 和 npm stop 来启动和关闭就够了。","createdAt":1565838895004},{"id":13690,"originId":"5d54cf1012a0194544416c41","articleId":2807,"userId":150,"content":"[@atian25](/user/atian25) 好的，感谢","createdAt":1565839120693},{"id":13691,"originId":"5d499578697873456c6bb66d","articleId":2808,"userId":109,"content":"目前nodejs(团队)的话语权还不够硬","createdAt":1565103480308},{"id":13692,"originId":"5d4995af12a0194544414b78","articleId":2808,"userId":1664,"content":"社招也少；\r\n就业市场一般是在前端加分点里面；\r\n应用场景优势不明显，又不像Java一样路径依赖，新兴的还有golang这种优势明显的来替代。python在机器人之类的有天然优势，国企传统软件在C#/Java，C/C++在信息安全，服务器游戏开发有优势。\r\n以上纯是个人见解，仅供参考。","createdAt":1565103535488},{"id":13693,"originId":"5d4a857b12a0194544414eb7","articleId":2808,"userId":3123,"content":"Node后端开发确实很少，看招聘网站相关的岗位基本上和Ruby或者Go差不多","createdAt":1565164923898},{"id":13694,"originId":"5d4a8e0c12a0194544414ee2","articleId":2808,"userId":358,"content":"说明你没关注蚂蚁和阿里的校招","createdAt":1565167116839},{"id":13695,"originId":"5d4aa2bc12a0194544414f8f","articleId":2808,"userId":354,"content":"简历到 cctv1005s#outlook.com ","createdAt":1565172412809},{"id":13696,"originId":"5d4aa34412a0194544414f97","articleId":2808,"userId":1868,"content":"Node 能做的事情基本上 Java 也能做，而且可以做的更稳。\r\nNode 比 Java 更强的一点是便捷开发。但是一个企业更注重的是稳定性。\r\nJava 的兼容性更好。\r\n\r\n以上纯属个人 YY，不接受任何喷。","createdAt":1565172548494},{"id":13697,"originId":"5d4b807212a019454441514a","articleId":2808,"userId":18,"content":"腾讯这边也很少专门的 node 后端岗位，都是招前端而已。","createdAt":1565229170664},{"id":13698,"originId":"5d4b857412a019454441519a","articleId":2808,"userId":545,"content":"郑州、珠海在招 。 要求熟悉 nest.js 框架~","createdAt":1565230452012},{"id":13699,"originId":"5d4bd231697873456c6bbe3d","articleId":2808,"userId":688,"content":"可以考虑下帆软，简道云团队不错的","createdAt":1565250097487},{"id":13700,"originId":"5d4bdda3697873456c6bbe8b","articleId":2808,"userId":59,"content":"[@zuohuadong](/user/zuohuadong) 竟然也在郑州？","createdAt":1565253027444},{"id":13701,"originId":"5d4be352697873456c6bbebe","articleId":2808,"userId":545,"content":"[@liangtongzhuo](/user/liangtongzhuo) 招聘： https://www.zhipin.com/job_detail/2904bdc99242e67d0nR839u7GFc~.html","createdAt":1565254482014},{"id":13702,"originId":"5d4beb8512a0194544415403","articleId":2808,"userId":446,"content":"国内新媒体爆发，国人忧患意识太强，受Hype Cycle顶点影响非常大，所以现在要么是坚守Java阵地，要么是破釜沉舟转Golang，Web后端领域像Node.js、Python、PHP、Ruby、.net都越来越少了。\r\n\r\nNode.js招纯后端的少，但是全栈或大前端的还是很多的，可以去拉勾上看看。\r\n\r\n我自己的深切感受是Node.js本身相比于2014年的时候的成长幅度还是非常巨大的。\r\n比如性能方面，开发V8的大神们通过TurboFan、Timsort、Orinoco GC等技术大幅度拉升了虚拟机的执行效率，看了这个压测结果 https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/javascript.html 你会完全不相信这是个脚本语言的性能水平；\r\n我近几年一直在关注原生异步执行性能，Bluebird一开始的宣传点是性能远高于原生Promise，通过每一个Node.js版本的压测数据来看，原生Promise的执行效率一直在被优化，目前已经基本吊打Bluebird（他们官网也撤掉了这个宣传点）；\r\n想要多进程有多进程，想要多线程也有Worker Threads；\r\n微软一直在力推TS，甚至通过各种手段拉拢.net技术栈的工程师用TS，缓解了很多以前令人诟病的Node.js在大型项目方面的问题（当然单项目做得规模特别大的是少数，大多还是微服务）。","createdAt":1565256581134},{"id":13703,"originId":"5d4bf92012a0194544415443","articleId":2808,"userId":545,"content":"[@libook](/user/libook)  java 跟 golang 的替代关系倒不是很大~ \r\n注重架构和维护，肯定是 java /kotlin  .net core 这些了。\r\n注重性能，会走向 go   rust \r\n\r\n\r\n甚至通过各种手段拉拢.net技术栈的工程师用TS  这是真的？","createdAt":1565260064839},{"id":13704,"originId":"5d50269612a0194544415cb5","articleId":2808,"userId":194,"content":"### Enhancer 云开发平台长期招 Node.js 开发，欢迎投递简历：[https://enhancer.io/jobs](https://enhancer.io/jobs)","createdAt":1565533846076},{"id":13705,"originId":"5d502846697873456c6bc855","articleId":2808,"userId":109,"content":"[@libook](/user/libook) nodejs 和 php 一样是披着羊皮的狼，核心都是C系。   ","createdAt":1565534278504},{"id":13706,"originId":"5d50d57f12a0194544415d8c","articleId":2808,"userId":40,"content":"楼主在网易那个部门实习？","createdAt":1565578623213},{"id":13707,"originId":"5d50e26f697873456c6bca03","articleId":2808,"userId":3856,"content":"[@ZhangDianPeng](/user/ZhangDianPeng) 在雷火实习","createdAt":1565581935019},{"id":13708,"originId":"5d51306812a019454441604f","articleId":2808,"userId":1988,"content":"京东这边找node，我们部门有个业务线全是node 开发，大约十来个人","createdAt":1565601896026},{"id":13709,"originId":"5d515ed0697873456c6bcd29","articleId":2808,"userId":2485,"content":"https://cnodejs.org/topic/5d12f5f0cdb1f967c1575f27\r\n客路这边招聘Nodejs, 可以投递看看.","createdAt":1565613776430},{"id":13710,"originId":"5d54ca9612a0194544416c13","articleId":2808,"userId":829,"content":"也就大厂在用","createdAt":1565837974915},{"id":13711,"originId":"5d4bd71e12a0194544415357","articleId":2809,"userId":438,"content":"我之前一直是手写的sql，考虑到注入问题被大家一直诟病，所以在找新的解决方案，最近在了解sequelieze","createdAt":1565251358539},{"id":13712,"originId":"5d4be380697873456c6bbec5","articleId":2809,"userId":545,"content":"[@xwadh](/user/xwadh) 去了解下 typeorm ，比 seq 好用100倍~","createdAt":1565254528058},{"id":13713,"originId":"5d4bfb48697873456c6bbf99","articleId":2809,"userId":356,"content":"sequelieze不错","createdAt":1565260616010},{"id":13714,"originId":"5d4c01bc12a019454441548a","articleId":2809,"userId":545,"content":"[@TimLiu1](/user/TimLiu1)  你这也是没看过 typeorm 吧\r\n\r\nhttps://typeorm.io/#/  右上角切换语言~\r\n\r\n还有个比较牛皮的 ： \r\n\r\nhttps://www.prisma.io/","createdAt":1565262268601},{"id":13715,"originId":"5d4c0d62697873456c6bc015","articleId":2809,"userId":549,"content":"js就sequelize ts就typeorm","createdAt":1565265250770},{"id":13716,"originId":"5d4c2d4d12a019454441551a","articleId":2809,"userId":109,"content":"[@xwadh](/user/xwadh) 如果你不喜欢 orm 可以考虑 query builder 。比如 knex。\r\n正在扩展一个 基于 knex 的轮子。","createdAt":1565273421866},{"id":13717,"originId":"5d4ccb48697873456c6bc161","articleId":2809,"userId":21,"content":"[@xwadh](/user/xwadh) \r\n手写sql也没问题啊，预编译不就好了。\r\n就是有些场景手写也不是很方便，比如批量插入啥的。\r\n本人现在就是简单的查询，更新，删除以及插入和批量插入用ORM，其他情况手写SQL。","createdAt":1565313864849},{"id":13718,"originId":"5d4ccc1512a0194544415604","articleId":2809,"userId":356,"content":"[@zuohuadong](/user/zuohuadong) 你简单的说一下优点，解决的痛点问题，然后我认真去看一下。","createdAt":1565314069523},{"id":13719,"originId":"5d4ccff8697873456c6bc195","articleId":2809,"userId":545,"content":"[@TimLiu1](/user/TimLiu1) 链接都发给你了，咋能懒到这地步？ 你用不用跟我有关系么？","createdAt":1565315064188},{"id":13720,"originId":"5d4d152e12a01945444157d5","articleId":2809,"userId":1868,"content":"轮子月的 Toshihiko 考虑下，虽然没 Sequelieze 功能多，却功能简化很多。","createdAt":1565332782417},{"id":13721,"originId":"5d4d153112a01945444157d9","articleId":2809,"userId":1868,"content":"轮子月的 Toshihiko 考虑下，虽然没 Sequelieze 功能多，却功能简化很多。\r\n\r\nhttp://docs.toshihikojs.com/en/latest/","createdAt":1565332785473},{"id":13722,"originId":"5d4d18e612a01945444157f0","articleId":2809,"userId":356,"content":"[@zuohuadong](/user/zuohuadong) 最主要是对你没信任度啊，周围的人都没接触过，你推荐的你要解释啊，这是一个互相成长的圈子","createdAt":1565333734279},{"id":13723,"originId":"5d4d24f4697873456c6bc3b1","articleId":2809,"userId":545,"content":"[@TimLiu1](/user/TimLiu1)  别人说再多也没用，自己对比就知道了。 另外，typeorm 是 ts 写的~","createdAt":1565336820532},{"id":13724,"originId":"5d4d4000697873456c6bc4a0","articleId":2809,"userId":438,"content":"[@zy445566](/user/zy445566) 怎么防注入的呢，简单的说下解决方法呢","createdAt":1565343744209},{"id":13725,"originId":"5d4d4029697873456c6bc4a4","articleId":2809,"userId":438,"content":"[@zuohuadong](/user/zuohuadong) typeorm的话需要去搞ts那套了吧","createdAt":1565343785791},{"id":13726,"originId":"5d4d404c12a0194544415930","articleId":2809,"userId":438,"content":"[@waitingsong](/user/waitingsong) 期待，我还是比较喜欢手写","createdAt":1565343820655},{"id":13727,"originId":"5d4d407112a0194544415935","articleId":2809,"userId":438,"content":"[@mapleincode](/user/mapleincode) 好的，谢谢，我去了解下","createdAt":1565343857324},{"id":13728,"originId":"5d4d4b8c12a0194544415960","articleId":2809,"userId":545,"content":"[@xwadh](/user/xwadh)  也支持 js ，但 ts 装饰器非常好用。\r\n![image.png](//static.cnodejs.org/Ft34m_e8z1-krpR8WMHy-VDDV9kI)\r\n\r\n相关试用： https://ruiming.me/typeorm-worth-a-try/","createdAt":1565346700336},{"id":13729,"originId":"5d4d71e4697873456c6bc534","articleId":2809,"userId":109,"content":"[@xwadh](/user/xwadh)  [@zuohuadong](/user/zuohuadong) \r\n新鲜出炉的轮子来了了欢迎食用：\r\nhttps://www.npmjs.com/package/kmore\r\n基于 Knex 扩展了一点功能： 从 DB 表类型中提取表名创建表名对象，用于快速访问表。当然也支持手写 raw sql （db.dbh == knex）。\r\n[文档](https://waitingsong.github.io/kmore/)\r\n\r\n","createdAt":1565356516298},{"id":13730,"originId":"5d4d7573697873456c6bc55d","articleId":2809,"userId":545,"content":"[@waitingsong](/user/waitingsong)  用 ts ，又不用装饰器，真的很别扭。~\r\n\r\n顺便推荐个 ： prisma ，以及我们在做的 magnus  自动生成....\r\n\r\nhttps://github.com/notadd/magnus","createdAt":1565357427211},{"id":13731,"originId":"5d4e78b312a0194544415ad7","articleId":2809,"userId":109,"content":"[@zuohuadong](/user/zuohuadong) 看了下 prisma  ， 很强大。\r\n\r\n至于装饰器，不同业务场景有不同需求。\r\n我们的核心项目一百多库表，需求是：\r\n- 单表可快速访问\r\n- （数十）多表连接可能需要手写 sql\r\n- 不允许自动化 DDL，任何表结构变化必须手动执行。\r\n\r\n对于单表访问用不上装饰器，多表复杂关联手写sql更是连orm都不可能用（被 mybits 的实体类坑过）。\r\n目前觉得 query builder 应该更适合些。\r\n","createdAt":1565423795297},{"id":13732,"originId":"5d54ae4a697873456c6bd668","articleId":2809,"userId":1922,"content":"其实ORM和防止注入没啥关系，\r\n不管用啥ORM，都要面对如何写sql的问题。\r\n只不过使用ORM后，把这个锅甩给了ORM。\r\nMySQL的驱动不是自带防止注入的功能吗？","createdAt":1565830730623},{"id":13733,"originId":"5d54be35697873456c6bd720","articleId":2809,"userId":3789,"content":"sequelieze 这个 ORM 不好，很多报错莫名奇怪","createdAt":1565834805837},{"id":13734,"originId":"5d4943d812a0194544414a5f","articleId":2810,"userId":636,"content":"根据前端传的一维数组拆成二维数组并发查询，然后拼接结果。\r\n\r\n例如：前端传['id1', 'id2', 'id3', 'id4', 'id5']， 拆成 [['id1', 'id2'], ['id3', 'id4'], ['id5']]\r\n\r\n然后分3个查询，并发进行，使用$in，最后合并结果返回给前端。","createdAt":1565082584124},{"id":13735,"originId":"5d4aadef697873456c6bbad3","articleId":2810,"userId":356,"content":"[@blackmatch](/user/blackmatch) 这样会容易让连接数爆满吧，存在风险","createdAt":1565175279605},{"id":13736,"originId":"5d4ada2e697873456c6bbb50","articleId":2810,"userId":636,"content":"[@TimLiu1](/user/TimLiu1) 是的，这是一个拆的思路，代价是连接变多，查询次数变多。如果说$in 匹配的数量没有限制又不存在性能问题，直接就一次查询就好了。","createdAt":1565186606807},{"id":13737,"originId":"5d4bfa68697873456c6bbf92","articleId":2810,"userId":356,"content":"[@blackmatch](/user/blackmatch)  确实可以作为考虑之一，那其实我想问 [@WUSO01](/user/WUSO01) 你遇到的问题是什么，我感觉你是不会用$in查询，否则任何情况都不该循环的","createdAt":1565260392101},{"id":13738,"originId":"5d4d1bdf697873456c6bc36b","articleId":2810,"userId":59,"content":"直接 in 被，都是 id 时间复杂度很低的。 id 是有索引","createdAt":1565334495791},{"id":13739,"originId":"5d5262f0697873456c6bcfb0","articleId":2810,"userId":3172,"content":"[@TimLiu1](/user/TimLiu1) 场景：前端把全国的三级城市(区/县)的城市id通过数组传递给我，约莫三千的样子，然后我要去表里面把这三千个城市的数据全部返回前端。 当时确实不会用`$in`查询符。 那请问这样的情况，用`$in`操作符没有什么问题吗？","createdAt":1565680368972},{"id":13740,"originId":"5d53d225697873456c6bd501","articleId":2810,"userId":356,"content":"[@WUSO01](/user/WUSO01) 数量级太低了，不需要考虑性能，先把语法熟悉","createdAt":1565774373829},{"id":13741,"originId":"5d54aa5f697873456c6bd659","articleId":2810,"userId":1922,"content":"[@WUSO01](/user/WUSO01) 3000多个城市呀，不用查了，把城市一级的都返给前端好了。基本不会多几个。","createdAt":1565829727833},{"id":13742,"originId":"5d53a781697873456c6bd3ef","articleId":2811,"userId":31,"content":" ![image.png](//static.cnodejs.org/FtB6hXrgWx1Da5W_rhr4Cqc2RiNc)","createdAt":1565763457862},{"id":13743,"originId":"5d53aa41697873456c6bd411","articleId":2811,"userId":2182,"content":"你基础不行啊，`await is only valid in async function` 让你在stop 前面加上 async 关键字","createdAt":1565764161790},{"id":13744,"originId":"5d53aa7e697873456c6bd415","articleId":2811,"userId":2182,"content":"而且你分不清编译时错误还是运行时错误吗","createdAt":1565764222926},{"id":13745,"originId":"5d53ae7a697873456c6bd435","articleId":2811,"userId":3860,"content":"await 只能用在 async 修饰的函数里","createdAt":1565765242026},{"id":13746,"originId":"5d53ef1c697873456c6bd57a","articleId":2811,"userId":356,"content":"好好补补课再来问题\r\n\r\nasync function buke(){\r\nawait ing.....\r\n}","createdAt":1565781788118},{"id":13747,"originId":"5d5272b9697873456c6bd033","articleId":2812,"userId":109,"content":"单步插入读出貌似意义不大，长业务链的读写应该有用处吧。","createdAt":1565684409001},{"id":13748,"originId":"5d52bf2f697873456c6bd15e","articleId":2812,"userId":2246,"content":"开发过程中有些过程是在调试读写数据库，因为要确保列名、列的类型对应，满足长度限制、唯一性约束等。如果这都 mock 掉了，问题就不能在测试阶段发现了，所以我想应该用真实的数据库测。想更多的了解下大家的做法和原因。","createdAt":1565703983853},{"id":13749,"originId":"5d52f152697873456c6bd1ca","articleId":2812,"userId":358,"content":"> 连接真实数据库的话，需要每次填充数据和清空数据\r\n\r\ndocker or  travis mysql service","createdAt":1565716818566},{"id":13750,"originId":"5d536305697873456c6bd228","articleId":2812,"userId":2246,"content":"[@atian25](/user/atian25) 谢谢，能多解释下“docker or  travis mysql service” 吗？公司没人指导，能提供更确切的搜索方向吗？","createdAt":1565745925724},{"id":13751,"originId":"5d536c5512a01945444166dc","articleId":2812,"userId":358,"content":"[@xuxu7](/user/xuxu7) 就是你说的 `连接真实数据库的话，需要每次填充数据和清空数据`\r\n\r\n不过这个数据库是 CI 提供的 service，或者你自己在 docker 里面启动一个，然后执行初始化数据库的脚本。","createdAt":1565748309673},{"id":13752,"originId":"5d537d2f697873456c6bd32d","articleId":2812,"userId":2246,"content":"谢谢大神，我好好研究下","createdAt":1565752623622},{"id":13753,"originId":"5d51599e12a0194544416138","articleId":2813,"userId":2485,"content":"你理解的意思理解错了, 看代码应该是需要超过10M才会rotate, 不然不会rotate. 所以你把那个上限设置低一点应该就可以了.\r\n\r\nhttps://github.com/keymetrics/pm2-logrotate/blob/master/app.js\r\n\r\n","createdAt":1565612446645},{"id":13754,"originId":"5d520bae12a019454441624e","articleId":2813,"userId":98,"content":"哪个先满足条件就按哪个分隔，或者试试log4js好像也有这种功能，但是在pm2中使用log4js需要安装额外的pm2模块，否则得每个进程分开记录日志","createdAt":1565658030855},{"id":13755,"originId":"5d521ae4697873456c6bce74","articleId":2813,"userId":97,"content":"我看有个 rotateInterval 应该是在固定时间强制写入 log ","createdAt":1565661924420},{"id":13756,"originId":"5d52068112a019454441622c","articleId":2814,"userId":2485,"content":"你的需求是什么, 官方文档知道在哪里看吗?\r\nhttps://www.tiny.cloud/docs/api/tinymce/tinymce.editor/#getcontent\r\n这个接口可以符合你要求吗?","createdAt":1565656705902},{"id":13757,"originId":"5d5157ea697873456c6bcd0e","articleId":2815,"userId":2485,"content":"![image.png](//static.cnodejs.org/Fi6OU5EdIxe1k1gtYIy7-10fcERk)","createdAt":1565612010734},{"id":13758,"originId":"5d515839697873456c6bcd12","articleId":2815,"userId":2485,"content":"貌似是一个特殊字符集里面订单a, 但是显示的时候显示成一样的了.","createdAt":1565612089400},{"id":13759,"originId":"5d5159ca12a0194544416140","articleId":2815,"userId":1733,"content":"[@junfan](/user/junfan) 嗯，好像第一个a 是gb2312 或者 cyrillic 字符。问题是如何转换呢？","createdAt":1565612490042},{"id":13760,"originId":"5d515daf12a019454441614d","articleId":2815,"userId":2485,"content":"[@yanqi321](/user/yanqi321) 你们转换为了什么,  我感觉可以不转换,  如果非要转换的话,  你们只能做一个映射表, 它这个不是gb2312, 是unicode 1072","createdAt":1565613487854},{"id":13761,"originId":"5d51614912a0194544416156","articleId":2815,"userId":109,"content":" 第一个看起来 'a' 的编码是 `<Buffer d0 b0>`\r\n","createdAt":1565614409350},{"id":13762,"originId":"5d516f55697873456c6bcd52","articleId":2815,"userId":1733,"content":"[@junfan](/user/junfan) , unicode包含多个字符集(97 是Basic Latin。 1072是cyrillic ) 我想做一个单词拼写检查。 词库里面 有 'and' 这个词。 但是 cyrillic 的 and 被识别为拼写错误(nd 都是正常的latin字符)。所以想能不能转换一下","createdAt":1565618005017},{"id":13763,"originId":"5d5204e4697873456c6bcdd0","articleId":2815,"userId":2485,"content":"https://zh.wikipedia.org/wiki/%E8%A5%BF%E9%87%8C%E5%B0%94%E5%AD%97%E6%AF%8D\r\n\r\n这个里面有cyrillic字母表,  感觉如果你们要这么做的话,  需要按照这个字母表里面和ascci的字母表重合的部分对你们的数据和搜索词都进行转换","createdAt":1565656292808},{"id":13764,"originId":"5b8e24d837b3005a0b0e6b52","articleId":2816,"userId":390,"content":"你要学会用主流的包（lodash，joi等），主流的框架（koa）熟悉后就好了\r\n","createdAt":1536042200026},{"id":13765,"originId":"5b8e2cf2bf116a8c0e4257bb","articleId":2816,"userId":3864,"content":"狼叔的，如何正确学习nodejs https://cnodejs.org/topic/5ab3166be7b166bb7b9eccf7","createdAt":1536044274430},{"id":13766,"originId":"5b8e2cfb3224281a3eeb2966","articleId":2816,"userId":1212,"content":"熟悉JavaScript语法，再学一下主流的框架，很快就可以上手","createdAt":1536044283153},{"id":13767,"originId":"5b8e73c0bf116a8c0e4257d8","articleId":2816,"userId":354,"content":"月经贴了...","createdAt":1536062400267},{"id":13768,"originId":"5b8e981e82f0728f354d73fd","articleId":2816,"userId":2013,"content":"给楼主推荐一波视频教程\r\n[http://www.sucaihuo.com/video/224-0-0](http://www.sucaihuo.com/video/224-0-0)","createdAt":1536071710922},{"id":13769,"originId":"5b8f2ec54cdb88f72f5a907e","articleId":2816,"userId":1679,"content":"这里有一本入门级的书可以看下\r\nhttps://www.nodebeginner.org/index-zh-cn.html","createdAt":1536110277521},{"id":13770,"originId":"5b8f96f44cdb88f72f5a90ae","articleId":2816,"userId":1499,"content":"推荐框架 Doodoo.js -- 中文最佳实践Node.js Web快速开发框架，支持Koa.js中间件","createdAt":1536136948269},{"id":13771,"originId":"5b9932b137b3005a0b0e6eb9","articleId":2816,"userId":804,"content":"楼主你这种情况得先提高记忆力","createdAt":1536766641418},{"id":13772,"originId":"5b99a885f1e8bc7579c78525","articleId":2816,"userId":1696,"content":"可能是只学没做项目\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1536796805742},{"id":13773,"originId":"5b99bedef1e8bc7579c78540","articleId":2816,"userId":634,"content":"首要要去学，动手动起来","createdAt":1536802526382},{"id":13774,"originId":"5ba4fc129545eaf107b9c53c","articleId":2816,"userId":805,"content":"努力就行了","createdAt":1537539090650},{"id":13775,"originId":"5ba50eab9545eaf107b9c541","articleId":2816,"userId":358,"content":"想得太多做得太少","createdAt":1537543851385},{"id":13776,"originId":"5bb39c8b9545eaf107b9c7d3","articleId":2816,"userId":3436,"content":"我记性也不好。。","createdAt":1538497675731},{"id":13777,"originId":"5bb4a01915e4fd1923f48c55","articleId":2816,"userId":413,"content":"我记得我好像是从express开始学起的","createdAt":1538564121963},{"id":13778,"originId":"5bb5d89dede204052db80389","articleId":2816,"userId":3865,"content":"做项目","createdAt":1538644125099},{"id":13779,"originId":"5bc2b04337a6965f59052196","articleId":2816,"userId":790,"content":"精华都在回复里","createdAt":1539485763666},{"id":13780,"originId":"5bcdcc4d9545eaf107b9cd65","articleId":2816,"userId":2013,"content":"楼主也不回来互动一下","createdAt":1540213837696},{"id":13781,"originId":"5bdb0692646a05745b7b71b0","articleId":2816,"userId":805,"content":"我也想知道","createdAt":1541080722023},{"id":13782,"originId":"5bdb1719646a05745b7b7224","articleId":2816,"userId":3533,"content":"多操作，多练习","createdAt":1541084953071},{"id":13783,"originId":"5beb7d8bbe1b120abac5909a","articleId":2816,"userId":798,"content":"楼主这情况需要对症下药，先提高记忆力为主","createdAt":1542159755104},{"id":13784,"originId":"5bfd4ba4d6104a4f803a22d9","articleId":2816,"userId":809,"content":"提高记忆力是关键","createdAt":1543326628815},{"id":13785,"originId":"5bfdf08fbe1b120abac5d922","articleId":2816,"userId":3866,"content":"[@abochi](/user/abochi) 素材不错","createdAt":1543368847287},{"id":13786,"originId":"5c0c803c7ec239239ff54ee0","articleId":2816,"userId":805,"content":"道理懂了，学起来没天份，纳闷","createdAt":1544323132308},{"id":13787,"originId":"5c0f4eb1f3d48d2397c0ff7a","articleId":2816,"userId":368,"content":"[@codeofking](/user/codeofking) 背API么：（","createdAt":1544507057134},{"id":13788,"originId":"5c0f7dd87ec239239ff55c6a","articleId":2816,"userId":446,"content":"其实Node.js本身的东西真的没多少，加上WEB框架和ODM、ORM很快就能学完，比前端需要学的少太多了；但是后端基础设施和架构思想特别多，比如Microservices、REST、MQ、Load balancing|Reverse Proxy……\r\n\r\n老忘可能是因为用得少，或者学的时候就没有完全理解，如果一个东西你只是背概念的话，总会有忘的时候，但如果你真正理解了，知道关键点和思路是什么了，过一段时间哪怕你把其中的专业名词都忘光了，你也能拿生活中的例子给人家讲明白这个东西是怎么回事，自己稍微查一查也就能很容易知道那些名词叫什么。","createdAt":1544519128076},{"id":13789,"originId":"5c24499576c4964062a1e4d9","articleId":2816,"userId":790,"content":"[@libook](/user/libook) 有道理，要运用起来","createdAt":1545882005833},{"id":13790,"originId":"5c3dd66a3898674067a7f8b8","articleId":2816,"userId":1661,"content":"知易行难啊","createdAt":1547556458712},{"id":13791,"originId":"5c402a93a4d44449266b203e","articleId":2816,"userId":3867,"content":"就我自己的一点点感悟来看，计算机领域的东西很少有需要背的，记住某个东西最好的方法就是让它派上用场","createdAt":1547709075601},{"id":13792,"originId":"5c4061c0a4d44449266b21ba","articleId":2816,"userId":1193,"content":"怎样才能学号 html","createdAt":1547723200529},{"id":13793,"originId":"5c40881c3898674067a804a7","articleId":2816,"userId":743,"content":"学nestjs, 直接上手做项目","createdAt":1547733020183},{"id":13794,"originId":"5c68ddb00752e020af94454d","articleId":2816,"userId":828,"content":"怎样才能发财","createdAt":1550376368954},{"id":13795,"originId":"5c6d0c4433b0b629ac84347c","articleId":2816,"userId":3868,"content":"好记性不如烂笔头","createdAt":1550650436097},{"id":13796,"originId":"5c6d0d0b33b0b629ac84349e","articleId":2816,"userId":661,"content":"同上","createdAt":1550650635717},{"id":13797,"originId":"5c6fda07e1a81129a7ad9c2e","articleId":2816,"userId":1689,"content":"努力","createdAt":1550834183520},{"id":13798,"originId":"5c74ae02ab86b86ddf6b2da9","articleId":2816,"userId":568,"content":"无可奉告","createdAt":1551150594815},{"id":13799,"originId":"5c8e5bce7ce0df3732428f06","articleId":2816,"userId":798,"content":"提高记忆力才是关键","createdAt":1552833486376},{"id":13800,"originId":"5c988cbc00bcfd7eb2be5e85","articleId":2816,"userId":1559,"content":"写项目","createdAt":1553501372058},{"id":13801,"originId":"5cb5ec97a86ae80ce64afd08","articleId":2816,"userId":805,"content":"楼上兄弟牛了，我还不到这水平","createdAt":1555426455601},{"id":13802,"originId":"5cd43816e333b24979ca9dfe","articleId":2816,"userId":804,"content":"路过","createdAt":1557411862048},{"id":13803,"originId":"5cde316de57aac76fed2b74c","articleId":2816,"userId":501,"content":"在线电子书: \r\n[react模式](https://www.geekjc.com/ebook/detail/5bae0c10ddb4f437ecfdc708/1538132695121/init)\r\n[nodejs基础教程](https://www.geekjc.com/ebook/detail/5b9f65ce0f510f6ae689bccd/init)\r\n[前端常见面试题汇总](https://www.geekjc.com/ebook/detail/5ba5bcae7143880b09cb4d54/init)\r\n\r\n微信小程序在线阅读，扫码阅读：\r\n![gh_39561cafdf5e_344](https://user-images.githubusercontent.com/15187909/48037621-181b5580-e1a8-11e8-91c1-dba00ab07de8.jpg)","createdAt":1558065517479},{"id":13804,"originId":"5d02653c1fe902120f31eb2b","articleId":2816,"userId":1661,"content":"实践出真知","createdAt":1560438076526},{"id":13805,"originId":"5d25f7aa8a8bf909209cd43f","articleId":2816,"userId":790,"content":"mark一下","createdAt":1562769322234},{"id":13806,"originId":"5d25fef9fa8ef0094e063ea9","articleId":2816,"userId":151,"content":"无他，唯手熟尔","createdAt":1562771193989},{"id":13807,"originId":"5d5029c612a0194544415cbe","articleId":2816,"userId":804,"content":"对 唯手熟尔","createdAt":1565534662605},{"id":13808,"originId":"5d5010ae12a0194544415c73","articleId":2817,"userId":2485,"content":"我看官方的编辑器里面可以加粗和斜体,  所以感觉贴个详细代码才行,  这么干描述不利于别人帮你. \r\n搭车招聘 https://cnodejs.org/topic/5d12f5f0cdb1f967c1575f27#5d1c138834bca667bc6e4e24","createdAt":1565528238587},{"id":13809,"originId":"5d4d73fc697873456c6bc54a","articleId":2818,"userId":109,"content":"如果是 win 系统，应该有客户端服务，通过 websocket 连接去调用 api。\r\n我 bjca 就是这么干的的（可以在我 github 里面找），cfca 应该也有吧。","createdAt":1565357052516},{"id":13810,"originId":"5d4d761212a01945444159bc","articleId":2818,"userId":545,"content":"[@waitingsong](/user/waitingsong)  他这个是服务端吧\r\n","createdAt":1565357586873},{"id":13811,"originId":"5d4d367812a01945444158ce","articleId":2819,"userId":3155,"content":"这跟pwa有什么关系？","createdAt":1565341304407},{"id":13812,"originId":"5d4d04d3697873456c6bc2b6","articleId":2820,"userId":3336,"content":"我没试，看文档 `app.setAsDefaultProtocolClient` 支持 linux","createdAt":1565328595388},{"id":13813,"originId":"5d4d2f2a12a019454441588c","articleId":2820,"userId":1254,"content":"[@ekoneko](/user/ekoneko) 多谢，我试试","createdAt":1565339434435},{"id":13814,"originId":"5d4d259e697873456c6bc3b6","articleId":2821,"userId":545,"content":"这时候已经正常了。\r\n至于为什么多会多一次请求，看这个: https://zhuanlan.zhihu.com/p/70032617","createdAt":1565336990059},{"id":13815,"originId":"5d4d25f9697873456c6bc3c0","articleId":2821,"userId":36,"content":"[@zuohuadong](/user/zuohuadong) 但是少了一个请求，紧跟着这个请求后面，应该再发一个请求的","createdAt":1565337081190},{"id":13816,"originId":"5d4d264e697873456c6bc3c7","articleId":2821,"userId":545,"content":"https://segmentfault.com/a/1190000012550346\r\n参考这个","createdAt":1565337166815},{"id":13817,"originId":"5d4d276c12a0194544415855","articleId":2821,"userId":36,"content":"[@zuohuadong](/user/zuohuadong) 好的 我看下","createdAt":1565337452375},{"id":13818,"originId":"5d4b993a12a0194544415231","articleId":2822,"userId":109,"content":"现在一般没用 cnpm，而是设置 npm源为淘宝的地址。","createdAt":1565235514816},{"id":13819,"originId":"5d4bb41612a01945444152a0","articleId":2822,"userId":549,"content":"是不是lock文件提交了 lock文件会记录第一次下载地址的","createdAt":1565242390729},{"id":13820,"originId":"5d4bb9fd697873456c6bbdc6","articleId":2822,"userId":829,"content":"你需要 nrm","createdAt":1565243901521},{"id":13821,"originId":"5d4bc1a0697873456c6bbde8","articleId":2822,"userId":358,"content":"> 不知道为什么cnpm 是以node [@6](/user/6).2的\r\n\r\ncnpm 不依赖 node 版本。先确认你的问题吧。","createdAt":1565245856553},{"id":13822,"originId":"5d4bfbae697873456c6bbfac","articleId":2822,"userId":356,"content":"实践下来遇到好几次cnpm产生的未知问题，建议 npm config set registry https://registry.npm.taobao.org，放弃cnpm\r\n","createdAt":1565260718606},{"id":13823,"originId":"5d4c0b56697873456c6bc00e","articleId":2822,"userId":346,"content":"试试用yarn?","createdAt":1565264726686},{"id":13824,"originId":"5d4c2edd697873456c6bc0ab","articleId":2822,"userId":358,"content":"[@TimLiu1](/user/TimLiu1) 有未知问题就反馈呗，不反馈怎么知道是你的用法问题，还是 cnpm bug，有 bug 会及时修复。阿里每个月几万次构建，稳定运行这么多年了。","createdAt":1565273821029},{"id":13825,"originId":"5d4ccc37697873456c6bc16c","articleId":2822,"userId":356,"content":"[@atian25](/user/atian25) 确实好几次了，下次我记一下反馈一下","createdAt":1565314103676},{"id":13826,"originId":"5d4cd49b697873456c6bc1be","articleId":2822,"userId":358,"content":"之前遇到的大部分情况是一些模块里面对 link 的处理有 bug 导致的。","createdAt":1565316251328},{"id":13827,"originId":"5d4cddf812a01945444156b4","articleId":2822,"userId":1547,"content":"[@atian25](/user/atian25) 已经发现问题了 确实跟cnpm 没关系 是以前服务器上存在太多node版本了","createdAt":1565318648818},{"id":13828,"originId":"5d4cebbb697873456c6bc23c","articleId":2822,"userId":358,"content":"[@shenjianzch](/user/shenjianzch) 所以，看，一个锅没了。","createdAt":1565322171404},{"id":13829,"originId":"5d4cec0c12a019454441570d","articleId":2822,"userId":358,"content":"服务器上我们一般不搞全局的 Node 版本的。可以看下：\r\n\r\n- [科普文：运维不给升级 Node 版本怎么办？](https://zhuanlan.zhihu.com/p/39226941)\r\n- [科普文：使用 nvs 管理本地 Node.js 版本](https://zhuanlan.zhihu.com/p/63403762)","createdAt":1565322252218},{"id":13830,"originId":"5d4d1487697873456c6bc30d","articleId":2822,"userId":1868,"content":"哈哈哈 cnpm 其实已经很努力","createdAt":1565332615370},{"id":13831,"originId":"5d4bd78912a019454441535f","articleId":2824,"userId":545,"content":"PHP 出现 XAMMP 主要原因还是 php 确实太难安装了。\r\n\r\nnode.js 你配置啥？ 版本？ 有nvm 。拓展？不需要， npm i 全搞定了。 数据库 用 apt 或者yum  也直接装好了。2分钟的事情。\r\n\r\n如果你是简单打包成各平台的文件，看看 nexe 和 pkg 。直接打包成二进制文件，数据库如果不想单独安装，可以使用sqlite3。\r\n\r\n如果你对这些都有要求， 也可以考虑 electron 。","createdAt":1565251465526},{"id":13832,"originId":"5d4be2ee12a01945444153bb","articleId":2824,"userId":3752,"content":"[@zuohuadong](/user/zuohuadong) 谢谢您，推荐的思路看起来都挺符合我的需求的！","createdAt":1565254382412},{"id":13833,"originId":"5d47fdbd4f472f7fee152afb","articleId":2825,"userId":109,"content":"你自己解密看看正确不。","createdAt":1564999101242},{"id":13834,"originId":"5d480c6abf26dc7fc53379bb","articleId":2825,"userId":3158,"content":"[@waitingsong](/user/waitingsong) 我自己解密时可以的\r\n","createdAt":1565002858951},{"id":13835,"originId":"5d485c3b4f472f7fee152c88","articleId":2825,"userId":1868,"content":"试试 aes-128-cbc 呢？一般 Java 代码过来都是 128.更建议的办法是把 Java 代码拿过来自己本地测试 。","createdAt":1565023291516},{"id":13836,"originId":"5d485cae4f472f7fee152c8c","articleId":2825,"userId":1868,"content":"实在不行就 require('java')  我这边项目需求最后实在解决不了就直接引入 jar 包","createdAt":1565023406784},{"id":13837,"originId":"5d48d4bf4f472f7fee152d1f","articleId":2825,"userId":3158,"content":"[@mapleincode](/user/mapleincode) 老哥我也觉得奇怪，在代码里面用aes-128-cbc会报key长度不对。因为这个的确是192位的，我在网上找在线的用aes-192-cbc就不行。用aes-128-cbc才行。","createdAt":1565054143662},{"id":13838,"originId":"5d48d5b4bf26dc7fc5337b90","articleId":2825,"userId":3158,"content":"[@mapleincode](/user/mapleincode) 比较尴尬的就是，我不懂java。不太了解，之前都是做前端的。","createdAt":1565054388213},{"id":13839,"originId":"5d4947c1697873456c6bb561","articleId":2825,"userId":1868,"content":"[@SKandAV](/user/SKandAV) 我仔细看了下你的代码。你的 aesKey 的确是 16 位的。你出错的原因是你没有对 aesKey 转换成 Buffer。以至于以 “hex” 的方式传入。所以变成了 aes-192 。实际上用 aes-128-cbc 可以正常测试通过。","createdAt":1565083585876},{"id":13840,"originId":"5d4a386212a0194544414cfc","articleId":2825,"userId":3158,"content":"[@mapleincode](/user/mapleincode) ![1.png](//static.cnodejs.org/FrXAvPdFWRa6cdGXKIGfTDz_MXtV)\r\n感觉一样啊老哥，我现在转成了Buffer，还是报的这个问题用aes-128-cbc的话。目前我感觉是我的初始化向量的问题，java端的初始化向量是这样构造的![2.png](//static.cnodejs.org/FkyM2kl4yMXH6H7ZAVZzB6CVZjmV)用node的话没有byte类型。目前在查怎么构造。因为我之前的向量是16个0 的字符串。应该是不太对的。","createdAt":1565145186969},{"id":13841,"originId":"5d4aa14f697873456c6bba89","articleId":2825,"userId":1868,"content":"[@SKandAV](/user/SKandAV) aesKey = Buffer.from(aesKey, 'base64');\r\n\r\n你这个 key 的编码是 base64，你得加上类型","createdAt":1565172047808},{"id":13842,"originId":"5d4aa182697873456c6bba8d","articleId":2825,"userId":1868,"content":"[@SKandAV](/user/SKandAV) 顺便说下  new Buffer() 和 Buffer.from 其实效果一样。只是 new Buffer() 现在认为这个操作不安全，推荐 Buffer.from","createdAt":1565172098303},{"id":13843,"originId":"5d4aa4a2697873456c6bbab5","articleId":2825,"userId":1868,"content":"const crypto = require('crypto');\r\n\r\nfunction aesCipher(data) {\r\n    let aeskey = Buffer.from('LjKqH69sLlqGe+pPSqgWUQ==', 'base64');\r\n    const iv = Buffer.from('0000000000000000');\r\n    var clearEncoding = 'utf8';\r\n    var cipherEncoding = 'base64';\r\n    var cipherChunks = [];\r\n    var cipher = crypto.createCipheriv('aes-128-cbc', aeskey, iv);\r\n    cipher.setAutoPadding(true);\r\n    cipherChunks.push(cipher.update(data, clearEncoding, cipherEncoding));\r\n    cipherChunks.push(cipher.final(cipherEncoding));\r\n    return cipherChunks.join('');\r\n}\r\n\r\naesCipher('Hello node');","createdAt":1565172898954},{"id":13844,"originId":"5d4aa5d6697873456c6bbac0","articleId":2825,"userId":109,"content":"const iv = Buffer.from(‘0000000000000000’)\r\n结果是30哟\r\n> <Buffer 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30>\r\n","createdAt":1565173206112},{"id":13845,"originId":"5d4b815e697873456c6bbc52","articleId":2825,"userId":3158,"content":"[@mapleincode](/user/mapleincode) 太谢谢老哥，终于通过了。谢谢老哥，我根本没想到这个，老哥怎么一下就看出来是key的问题，谢谢老哥","createdAt":1565229406299},{"id":13846,"originId":"5d4b818d12a0194544415172","articleId":2825,"userId":3158,"content":"[@waitingsong](/user/waitingsong) 嗯，用的Buffer.alloc(16)了，已经成功了。谢谢老哥","createdAt":1565229453946},{"id":13847,"originId":"5d4b98ad12a019454441522c","articleId":2825,"userId":109,"content":"[@mapleincode](/user/mapleincode) 目前 new Buffer() 已废弃状态。应该用 Buffer 的静态方法来初始化。","createdAt":1565235373928},{"id":13848,"originId":"5d4a48a5697873456c6bb867","articleId":2826,"userId":97,"content":"不就是 Buffer.alloc(2) 么","createdAt":1565149349198},{"id":13849,"originId":"5d4a5301697873456c6bb888","articleId":2826,"userId":109,"content":"es6 的 arrayBuffer 了解下。","createdAt":1565152001206},{"id":13850,"originId":"5d4a5b04697873456c6bb8a0","articleId":2826,"userId":109,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 128 位， alloc() 参数应该是 16 吧。","createdAt":1565154052557},{"id":13851,"originId":"5d4a626a697873456c6bb8be","articleId":2826,"userId":97,"content":"[@waitingsong](/user/waitingsong) \r\n\r\n> 16位都是0\r\n\r\n不就是 2 么","createdAt":1565155946097},{"id":13852,"originId":"5d4a65fc697873456c6bb8db","articleId":2826,"userId":3158,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 2不行会报iv长度不对，16的话可以。但是这个是和java里面的那个byte数组一样么，老哥","createdAt":1565156860851},{"id":13853,"originId":"5d4a74f012a0194544414e4f","articleId":2826,"userId":97,"content":"怪不得 [@waitingsong](/user/waitingsong) 大佬说 16，原来你要 128 位的。[@SKandAV](/user/SKandAV) 和 java 里面的 byte 数组在实现细节上不一样，因为我记得 java 里面 byte 其实也是 integer 型的，不过它们存放 raw data 的话是一样的","createdAt":1565160688034},{"id":13854,"originId":"5d4a242812a0194544414bff","articleId":2827,"userId":356,"content":"我觉得大量计算需要满足三点\r\n\r\n1. 不影响正常业务\r\n\r\n2.充分利用cpu\r\n\r\n3.考虑开发和维护成本\r\n\r\n基于这几点考虑，集群是必须的，这样可以充分的利用cpu. 至于是否开队列，那在集群短时间完不成的情况下可以考虑，队列的生产消费模型也在某种程度上方便程序扩展，也是可以并行考虑的\r\n","createdAt":1565140008782},{"id":13855,"originId":"5d4a344312a0194544414cce","articleId":2827,"userId":3831,"content":"非常感谢","createdAt":1565144131433},{"id":13856,"originId":"5d4a5d8e697873456c6bb8ac","articleId":2827,"userId":545,"content":"http://nodejs.cn/api/worker_threads.html   工作线程了解下","createdAt":1565154702559},{"id":13857,"originId":"5d48699e4f472f7fee152cac","articleId":2828,"userId":97,"content":"1. 根据 response header 里面的 content-type，看看有无 charset 信息\r\n2. 根据页面 meta 标签，看看有无 charset 信息\r\n3. 当然页面要是带 BOM 也可以一试\r\n4. 最后的方法就是尝试将内容按 utf8 来解，即验证 utf8 数据的完整性。如果可以整个解开，则当做 utf8 来保存，否则当做 Gbk 进而执行转码。\r\n\r\n验证 utf8 数据完整性，如果是爱自己动手的同学，可以参考 [UTF-8 编码及检查其完整性.md](https://github.com/hsiaosiyuan0/blog/blob/master/%2Fposts%2Fos%2FUTF-8%20%E7%BC%96%E7%A0%81%E5%8F%8A%E6%A3%80%E6%9F%A5%E5%85%B6%E5%AE%8C%E6%95%B4%E6%80%A7.md) ，不爱自己动手也可以搜一搜现成的包","createdAt":1565026718840},{"id":13858,"originId":"5d48e4084f472f7fee152d88","articleId":2828,"userId":1574,"content":"https://github.com/aadsm/jschardet/blob/master/README.md\r\n\r\n另一个简单的版本\r\n```javascript\r\nlet data = buffer.toString('utf8',0,buffer.length)\r\nif (data.indexOf('�') >= 0 || data.indexOf('') >= 0) {\r\n    data = iconv.decode(buffer, 'GBK')\r\n}\r\nif (data.indexOf('�') >= 0 || data.indexOf('') >= 0) {\r\n    data = iconv.decode(buffer, 'utf16')\r\n}\r\n```","createdAt":1565058056802},{"id":13859,"originId":"5d4948b7697873456c6bb565","articleId":2828,"userId":1868,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 感谢回答。不过我这个是 txt 文件不是 html","createdAt":1565083831438},{"id":13860,"originId":"5d49494012a0194544414a8d","articleId":2828,"userId":1868,"content":"[@yuanliwei](/user/yuanliwei)  感谢。下班回家去试试。应该可以解决这个问题。","createdAt":1565083968643},{"id":13861,"originId":"5d3ec5789969a529571d7e7b","articleId":2829,"userId":358,"content":"看起来是时区","createdAt":1564394872328},{"id":13862,"originId":"5d3ec7f4b4725a628e26972a","articleId":2829,"userId":3872,"content":"[@atian25](/user/atian25) 不太明白，是浏览器本身的时区差异造成的么？\r\n![image.png](//static.cnodejs.org/FoSED6nGIVnDCw09itoCffZkuV_d)","createdAt":1564395508435},{"id":13863,"originId":"5d3f3a91b4725a628e2697fc","articleId":2829,"userId":3279,"content":"如果是默认的话，应该是和你当前系统的时间以及时区相关","createdAt":1564424849124},{"id":13864,"originId":"5d3fa6d39969a529571d8027","articleId":2829,"userId":268,"content":"可能是和中国夏令时间有关系\r\nchrome\r\n```\r\nnew Date(526748400000)\r\nThu Sep 11 1986 00:00:00 GMT+0900 (中国夏令时间)\r\n```\r\nsafari\r\n```\r\n> new Date(526748400000)\r\n< Wed Sep 10 1986 23:00:00 GMT+0800 (CST)\r\n```","createdAt":1564452563973},{"id":13865,"originId":"5d3fef3f9969a529571d820f","articleId":2829,"userId":3872,"content":"[@jiangli373](/user/jiangli373) 谢谢，我确认下","createdAt":1564471103790},{"id":13866,"originId":"5d400601b4725a628e269b58","articleId":2829,"userId":356,"content":"这个谷歌浏览器按照中国的夏令时计算了，safari按照标准时间计算了，夏令时在1992年就取消了，所以两个不一样\r\n","createdAt":1564476929848},{"id":13867,"originId":"5d491ce4bf26dc7fc5337d34","articleId":2829,"userId":3872,"content":"是夏令时造成的，https://div.io/topic/1775\r\n避免这种问题，后端直接传 YYYY-MM-DD HH:mm:ss 格式","createdAt":1565072612679},{"id":13868,"originId":"5d4829614f472f7fee152b9a","articleId":2830,"userId":354,"content":"superagent.post('').attach(filepath)\r\n\r\n","createdAt":1565010273677},{"id":13869,"originId":"5d477f224f472f7fee1526de","articleId":2831,"userId":144,"content":"找一下日租公寓或者青年旅社那种，比较便宜。先租房子其实也没事，每个城市都有程序员比较集中的区域，所以只要在那个区先租好，公司也不会太远。","createdAt":1564966690077},{"id":13870,"originId":"5d478059bf26dc7fc5337596","articleId":2831,"userId":3782,"content":"怕找工作时间太长，住青旅就不划算了。","createdAt":1564967001029},{"id":13871,"originId":"5d4780c14f472f7fee15270b","articleId":2831,"userId":1254,"content":"蛋壳公寓，短租30天","createdAt":1564967105842},{"id":13872,"originId":"5d47813b4f472f7fee152717","articleId":2831,"userId":98,"content":"城市边缘的工业区附近有很便宜的房子，我17年去深圳找工作的时候住过光明区的房子，才两百多一个月，绝对不是南山那边那种城中村，南山区的城中村脏乱差连窗户都没有的房子都要一千，只是路程太远，需要1个多小时公交才能到南山，一天只能面试一家\r\n在深圳租到好房子是件很难的事情，基本上都是二手房东或者中介\r\n来了就养深圳人","createdAt":1564967227619},{"id":13873,"originId":"5d478208bf26dc7fc53375a6","articleId":2831,"userId":3782,"content":"看了下蛋壳，在武汉便宜的要1030一个月，有点贵。感觉跟长期租房子没区别","createdAt":1564967432873},{"id":13874,"originId":"5d47829cbf26dc7fc53375bb","articleId":2831,"userId":3782,"content":"有没有便宜点房子，我先租着，工作稳定后在重新租房子","createdAt":1564967580729},{"id":13875,"originId":"5d47aeacbf26dc7fc5337754","articleId":2831,"userId":49,"content":"[@Arthur-lt](/user/Arthur-lt) 宿舍类可能是最便宜的了（只有一张床）","createdAt":1564978860508},{"id":13876,"originId":"5d47d604bf26dc7fc5337888","articleId":2831,"userId":628,"content":"有些朋友是短租房。要么青旅啥的。\r\n不过我本人是先（跨省）找到工作，再租的房","createdAt":1564988932846},{"id":13877,"originId":"5d47f8534f472f7fee152ad7","articleId":2831,"userId":3873,"content":"自如其实还好","createdAt":1564997715846},{"id":13878,"originId":"5d480379bf26dc7fc53379aa","articleId":2831,"userId":3,"content":"[@Arthur-lt](/user/Arthur-lt) 你要在武汉租房吗？可以去租那些民房，要便宜很多，反正你也只是临时住住而已。\r\n\r\n武汉的话，可以考虑在光谷软件园附近租房。","createdAt":1565000569647},{"id":13879,"originId":"5d47c5704f472f7fee152909","articleId":2832,"userId":1676,"content":"mongoose 定义一个空的 Schema就行了，查出来的数据转json操作。\r\nmongoose.model('xxx', new mongoose.Schema({}))","createdAt":1564984688470},{"id":13880,"originId":"5d479d534f472f7fee152816","articleId":2835,"userId":97,"content":"同问，方便大佬回答时查看出处 https://github.com/eggjs/egg/blob/master/docs/source/zh-cn/advanced/plugin.md#%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86","createdAt":1564974419051},{"id":13881,"originId":"5d442bdf4f472f7fee15225f","articleId":2836,"userId":501,"content":"现在单页面(SPA)应用基本这样，都是虚拟dom，js渲染生成dom，主要在引入<script>标签里","createdAt":1564748767581},{"id":13882,"originId":"5d44f0074f472f7fee15235c","articleId":2836,"userId":3875,"content":"嗯嗯，请问这种一般是不是用JSX来描述其中的组件的","createdAt":1564798983675},{"id":13883,"originId":"5d453a5e4f472f7fee152425","articleId":2836,"userId":545,"content":"[@bobbyfined](/user/bobbyfined)  去找个看看 angular  vue  react 吧","createdAt":1564818014239},{"id":13884,"originId":"5d479987bf26dc7fc533767c","articleId":2836,"userId":755,"content":"[@bobbyfined](/user/bobbyfined) 取决于框架, react是jsx, vue是<template>","createdAt":1564973447312},{"id":13885,"originId":"5d4645da4f472f7fee152552","articleId":2837,"userId":97,"content":"> The correct use of 'uncaughtException' is to perform synchronous cleanup of allocated resources (e.g. file descriptors, handles, etc) before shutting down the process. It is not safe to resume normal operation after 'uncaughtException'.\r\n\r\n> To restart a crashed application in a more reliable way, whether 'uncaughtException' is emitted or not, an external monitor should be employed in a separate process to detect application failures and recover or restart as needed.\r\n\r\n文档里面也描述了，使用 uncaughtException 的正确方式就是在它的回调里面做一些同步的资源释放和错误记录工作，但是不能在里面进行程序的错误恢复，因为此时的程序运行状态是不可预测的，如果有恢复程序的需求，应该在守护进程中完成，类似常用的 pm2","createdAt":1564886490807},{"id":13886,"originId":"5d46e2da4f472f7fee15265a","articleId":2837,"userId":98,"content":"确实是为了防止进程退出的，我一般uncaughtException和unhandledRejection都只是收集错误，因为这相当于是保证程序继续运行最后的手段，所以必需让这两个事件极少发生，甚至是绝不发生\r\nuncaughtException最常见的就是 TypeError: Cannot read property 'prop' of null ，就是访问对象的属性前没检查对象是否为null或undefined\r\nunhandledRejection就是promise对象没有catch\r\n```js\r\nprocess.on('uncaughtException', (err) => {\r\n    console.error('my uncaughtException:', err);\r\n});\r\n\r\nprocess.on('unhandledRejection', (err) => {\r\n    console.error('my unhandledRejection:', err);\r\n});\r\n\r\nsetInterval(() => {\r\n    console.log(obj.abc)  // 访问对象前未检查，导致uncaughtException，如果没有监听这个事件，程序必定挂掉\r\n    Promise.reject(11)  // 没有对promise对象进行catch，导致unhandledRejection，但如果没有监听这个事件，程序也还能继续运行\r\n}, 1000);\r\n\r\nsetInterval(() => {\r\n    console.log(new Date())\r\n}, 3000);\r\n```\r\n并不是说这两个事件发生了就一定要关闭资源退出，曾经公司的另一个项目（其它同事负责）出现过一次生产事故，因为某开源模块也监听了这两个事件并且居然强行process.exit()，导致服务进程无限重启，实际上并没有什么影响（欢迎大佬提供典型案例指正）","createdAt":1564926682606},{"id":13887,"originId":"5d476edcbf26dc7fc533753f","articleId":2837,"userId":97,"content":"> Attempting to resume normally after an uncaught exception can be similar to pulling out of the power cord when upgrading a computer — nine out of ten times nothing happens - but the 10th time, the system becomes corrupted.","createdAt":1564962524738},{"id":13888,"originId":"5d09d49295fcc914aa26a7d3","articleId":2838,"userId":831,"content":"有机器学习和大数据开源项目没啊","createdAt":1560925330839},{"id":13889,"originId":"5d09ddd41fe902120f3208b9","articleId":2838,"userId":545,"content":"https://www.tensorflow.org/js   深度学习","createdAt":1560927700333},{"id":13890,"originId":"5d0a141795fcc914aa26a99b","articleId":2838,"userId":548,"content":"试试这个：http://vip.52tech.tech/play/v_19rrkqj66k.html","createdAt":1560941591613},{"id":13891,"originId":"5d4704ebbf26dc7fc5337521","articleId":2838,"userId":831,"content":"[@xiugangzhang](/user/xiugangzhang) 好像访问不了了","createdAt":1564935403704},{"id":13892,"originId":"5d40114cb4725a628e269bb6","articleId":2839,"userId":109,"content":"写 node 扩展调用指纹设备 dll，或者用 node-ffi 来调用。","createdAt":1564479820548},{"id":13893,"originId":"5d401669b4725a628e269be7","articleId":2839,"userId":545,"content":"node-napi-ffi 更合适一些","createdAt":1564481129201},{"id":13894,"originId":"5d403485b4725a628e269c66","articleId":2839,"userId":867,"content":"淘宝搜 “串口 指纹”，可以找到很多相关的模块。\r\n然后使用baidu搜“nodejs 串口”找例子\r\n另外还有一个方法，买串口服务器，让后使用网络的方式姐姐访问串口\r\n做这种东西我有经验。","createdAt":1564488837484},{"id":13895,"originId":"5d4035269969a529571d83fa","articleId":2839,"userId":867,"content":"比如\r\nhttps://item.taobao.com/item.htm?spm=a230r.1.14.27.24aa3374RvaQfI&id=36819061833&ns=1&abbucket=17#detail\r\nRS232的\r\n然后\r\nhttps://item.taobao.com/item.htm?id=36819061833\r\n有人的串口服务器\r\n然后根据协议，使用socket操作即可。","createdAt":1564488998065},{"id":13896,"originId":"5d40f1b99969a529571d8588","articleId":2839,"userId":3142,"content":"之前写的一个串口工具，可以拿去用，直接跟指纹模块串口通讯就行了\r\nhttps://github.com/PowerDos/electron-serialport","createdAt":1564537273462},{"id":13897,"originId":"5d463f264f472f7fee152538","articleId":2839,"userId":377,"content":"我觉得一楼的做法是正确的，要考虑系统赚容性，直扫调用dll最可靠。","createdAt":1564884774166},{"id":13898,"originId":"5d441009bf26dc7fc53370b4","articleId":2840,"userId":259,"content":"一般编辑器会自带样式文件的，或者用现成样式库， [参考](https://github.com/xjh22222228/vue-cnode)","createdAt":1564741641466},{"id":13899,"originId":"5d4507784f472f7fee1523a8","articleId":2840,"userId":3879,"content":"api里有个参数mdrender，数据会把标签都带出来，渲染数据到页面上就可以了","createdAt":1564804984877},{"id":13900,"originId":"5d450aa94f472f7fee1523b3","articleId":2840,"userId":97,"content":"要搞一个 CNode 出来吗，期待有比它好的 md editor，现在的有点捞","createdAt":1564805801578},{"id":13901,"originId":"5d4503474f472f7fee152399","articleId":2841,"userId":109,"content":"锁竞争问题。和数据库的锁机制没啥区别。等待至超时，或者直接返回异常。","createdAt":1564803911397},{"id":13902,"originId":"5d440df6bf26dc7fc53370ad","articleId":2842,"userId":3066,"content":"找到一个办法：\r\nWhile the same element can't be repeated in a sorted set since every element is unique, it is possible to add multiple different elements having the same score. When multiple elements have the same score, they are ordered lexicographically (they are still ordered by score as a first key, however, locally, all the elements with the same score are relatively ordered lexicographically).\r\n根据Redis文档，由于score相同时，将默认按照字典排序（即score对应的member值排序），所以讲时间戳拼接在member原有值之前即可。 ","createdAt":1564741110790},{"id":13903,"originId":"5d4134239969a529571d8726","articleId":2844,"userId":153,"content":"是不是问题太弱智了🙃","createdAt":1564554275745},{"id":13904,"originId":"5d413837b4725a628e269f8d","articleId":2844,"userId":97,"content":"每个模块有包名和版本号，有个配置管理系统来维护包名和版本号，然后前端使用 [dynamic import](https://v8.dev/features/dynamic-import)\r\n\r\n比如 `import('http://example.com/pkgName@latest')` 这样，这个请求会发往包管理系统，这样包管理系统可以选择性的将 latest 映射到配置中的版本","createdAt":1564555319944},{"id":13905,"originId":"5d4249999969a529571d8a1a","articleId":2844,"userId":89,"content":"目前看起来只有https://github.com/umijs/qiankun还算有个样子，其他的都太概念化了","createdAt":1564625305704},{"id":13906,"originId":"5d42e292b4725a628e26a548","articleId":2844,"userId":549,"content":"不知道是不是LZ想要的，[single-spa](https://github.com/CanopyTax/single-spa)，微前端框架（加载器）","createdAt":1564664466397},{"id":13907,"originId":"5d42f1049969a529571d8cb6","articleId":2844,"userId":354,"content":"看这个，完美符合你的需求：https://github.com/node-honeycomb/honeycomb-server","createdAt":1564668164957},{"id":13908,"originId":"5d42f1829969a529571d8cbc","articleId":2844,"userId":354,"content":"对了，可以的话给我发一个邮件吧，cctv1005s@gmail.com，我可以和你具体的聊聊技术细节和部署方案","createdAt":1564668290926},{"id":13909,"originId":"5d4397c79969a529571d8dab","articleId":2844,"userId":153,"content":"[@cctv1005s](/user/cctv1005s) 谢谢","createdAt":1564710855764},{"id":13910,"originId":"5d4399d6b4725a628e26a693","articleId":2844,"userId":153,"content":"1798448128@qq.com，已发","createdAt":1564711382766},{"id":13911,"originId":"5d439a0f9969a529571d8dc3","articleId":2844,"userId":153,"content":"[@i5ting](/user/i5ting) 看了p大的微前端的书，有的人评价太虚了，没有实际操作。不过我还没看，还得好好学习呀","createdAt":1564711439788},{"id":13912,"originId":"5d43cf629969a529571d8eca","articleId":2844,"userId":153,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 没看懂😂","createdAt":1564725090778},{"id":13913,"originId":"5d43e902b4725a628e26a840","articleId":2844,"userId":97,"content":"[@Rabbitzzc](/user/Rabbitzzc) 我这个是渔","createdAt":1564731650786},{"id":13914,"originId":"5d43e30cb4725a628e26a806","articleId":2845,"userId":545,"content":"一般前面加一层 nginx，然后 lua 做waf 防护。\r\n或者参考 这个，用 node 写\r\nhttps://hexadix.com/slowloris-dos-attack-mitigation-nginx-web-server/","createdAt":1564730124647},{"id":13915,"originId":"5d4002b29969a529571d82a7","articleId":2846,"userId":356,"content":"你是定时执行某个任务 setInterval，好好看看js再来提问","createdAt":1564476082202},{"id":13916,"originId":"5d400acdb4725a628e269b7d","articleId":2846,"userId":3883,"content":"[@TimLiu1](/user/TimLiu1) 可以的，新手，只记得setTimeout了，js定时器部分确实有介绍","createdAt":1564478157829},{"id":13917,"originId":"5d4016129969a529571d8349","articleId":2846,"userId":571,"content":"while(true){}","createdAt":1564481042844},{"id":13918,"originId":"5d401e43b4725a628e269c20","articleId":2846,"userId":3883,"content":"[@spnt](/user/spnt) 额，这个不好吧，其他异步事件的回调还咋执行，还有我是想1s一次的","createdAt":1564483139271},{"id":13919,"originId":"5d402a7c9969a529571d83bf","articleId":2846,"userId":1251,"content":"node-schedule 定时任务","createdAt":1564486268295},{"id":13920,"originId":"5d42d38f9969a529571d8c7d","articleId":2846,"userId":59,"content":"监听一个端口","createdAt":1564660623613},{"id":13921,"originId":"5d429dd59969a529571d8b8f","articleId":2847,"userId":49,"content":"![屏幕快照 2019-08-01 下午4.08.57.png](//static.cnodejs.org/FkoKK_tk1NdzPVNO3zVUucA_KGTP)wireshark 查一下","createdAt":1564646869061},{"id":13922,"originId":"5d429ec6b4725a628e26a403","articleId":2847,"userId":545,"content":"GB28181  相关的包有么~","createdAt":1564647110324},{"id":13923,"originId":"5d42a588b4725a628e26a42c","articleId":2847,"userId":49,"content":"[@zuohuadong](/user/zuohuadong) 可以看看几个github上有几个(大多是C#\\C++)，我写了个[测试 ](https://github.com/orangebook/FlyLab/tree/master/src/demo-GB28181)","createdAt":1564648840964},{"id":13924,"originId":"5d42bb549969a529571d8c3c","articleId":2847,"userId":545,"content":"[@orangebook](/user/orangebook)  最近找工作不？坐标郑州\r\n技术栈非常吻合","createdAt":1564654420739},{"id":13925,"originId":"5d42bd4cb4725a628e26a4b2","articleId":2847,"userId":49,"content":"[@zuohuadong](/user/zuohuadong) 算了吧，在上海。天天泡在SIP世界里，找不到北了","createdAt":1564654924521},{"id":13926,"originId":"5d42be11b4725a628e26a4c0","articleId":2847,"userId":545,"content":"[@orangebook](/user/orangebook)  大佬方便加个微信么。有技术问题可以探讨。\r\nz2858258","createdAt":1564655121856},{"id":13927,"originId":"5c162f5df3d48d2397c11bb7","articleId":2848,"userId":121,"content":"同求解决方案\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1544957789871},{"id":13928,"originId":"5c16ef167ec239239ff57619","articleId":2848,"userId":358,"content":"自己写个 index.js 调用 egg-scripts start","createdAt":1545006870610},{"id":13929,"originId":"5c170553f3d48d2397c11d51","articleId":2848,"userId":1598,"content":"具体如何操作呢","createdAt":1545012563093},{"id":13930,"originId":"5c170afc7ec239239ff576e4","articleId":2848,"userId":358,"content":"```js\r\n#!/usr/bin/env node\r\n'use strict';\r\nconst Command = require('egg-scripts');\r\nnew Command([ 'start' ]).start();\r\n```\r\n\r\n或者直接调用 egg.startCluster 也行。\r\n\r\n但你要去研究下 pkg 本身的配置，需要把文件也配置进去。\r\n\r\nPS：想通过 pkg 来隐藏源码没啥意义","createdAt":1545014012913},{"id":13931,"originId":"5d4123319969a529571d86d8","articleId":2848,"userId":3885,"content":"https://blog.csdn.net/qq_35241223/article/details/97306900 我用pkg实现的egg.js打包流程","createdAt":1564549937032},{"id":13932,"originId":"5d4128709969a529571d86f0","articleId":2848,"userId":545,"content":"[@MrSmallLiu](/user/MrSmallLiu)  ncc 可以把拓展编译成 node 二进制文件。 \r\nnexe  你可以试试","createdAt":1564551280913},{"id":13933,"originId":"5d427a0bb4725a628e26a364","articleId":2848,"userId":3885,"content":"[@zuohuadong](/user/zuohuadong)  这个库我试过 也可能我没有深入研究 觉得不符合我的预期。至于.node文件不打包进去也是合理的，因为每一个平台的二进制文件是有依赖的。","createdAt":1564637707429},{"id":13934,"originId":"5d3ff16d9969a529571d823c","articleId":2849,"userId":470,"content":"很多定制化的东西根本就不能一套代码","createdAt":1564471661321},{"id":13935,"originId":"5d40e2589969a529571d84da","articleId":2849,"userId":22,"content":"我觉得还是别拿 mpvue 讨论了","createdAt":1564533336739},{"id":13936,"originId":"5d40eb69b4725a628e269d45","articleId":2849,"userId":1199,"content":"mpvue主打的小程序坑都多得不行,看看那些issue,解决程度很低.\r\n2.0搞什么多端?先把bug修了不行?\r\n","createdAt":1564535657934},{"id":13937,"originId":"5d40ef32b4725a628e269d94","articleId":2849,"userId":628,"content":"mpvue 就别说了，BUG一堆没人管","createdAt":1564536626104},{"id":13938,"originId":"5d4118909969a529571d86c1","articleId":2849,"userId":97,"content":"那哪来的这么多 stars 好奇","createdAt":1564547216297},{"id":13939,"originId":"5d413949b4725a628e269f99","articleId":2849,"userId":470,"content":"我也是看star挺多的就入坑了，没想到坑这么深，深不见底啊，准备放弃了，还是直接上原生小程序和H5分开，弄俩项目。","createdAt":1564555593768},{"id":13940,"originId":"5d414909b4725a628e269ffb","articleId":2849,"userId":97,"content":"[@blackjack](/user/blackjack) 有哪些坑啊","createdAt":1564559625851},{"id":13941,"originId":"5d423bd2b4725a628e26a1f6","articleId":2849,"userId":1413,"content":"taro 就非常好啊","createdAt":1564621778560},{"id":13942,"originId":"5d3fb58cb4725a628e269934","articleId":2850,"userId":418,"content":"你这个结果不是完全一样么，只需要把node的结果 slice 一下","createdAt":1564456332103},{"id":13943,"originId":"5d41323fb4725a628e269f68","articleId":2850,"userId":3887,"content":"[@steambap](/user/steambap) 意思是后面的是没有用的数据吗？当然如果用这个截取后的长度在解密是不行的，报错！必须要原来的那个才能解密！不太清楚，请教下\r\n//解密程序\r\nfunction des_decrypt(param){\r\n    var key = Buffer.from(param.key);\r\n    if (param.iv) {\r\n        var iv =Buffer.from( param.iv );\r\n    }else{\r\n        var iv =Buffer.alloc(0);\r\n    }\r\n    var plaintext = param.plaintext;\r\n    var alg = param.alg;\r\n    var autoPad = param.autoPad;\r\n    //decrypt 解密\r\n    var decipher = crypto.createDecipheriv(alg, key, iv);\r\n    decipher.setAutoPadding(autoPad)\r\n    var txt = decipher.update(plaintext, 'hex', 'utf8');\r\n    txt += decipher.final('utf8');\r\n    console.log(alg, txt)\r\n    return txt;\r\n}\r\n\r\nconsole.log('------------');\r\nvar des_de=des_decrypt({\r\n    alg: 'des-ecb',\r\n    autoPad: true,\r\n    key: 'test1234',\r\n    plaintext: des_en1,\r\n    iv: null\r\n})\r\nconsole.log('解密后的：'+des_de);\r\n\r\nplaintext‘ 这个地方如果是截取后的长度的话会保错，但是原来的就能解密出来’\r\n----------------------------------------------------------------\r\n报错内容：\r\ninternal/crypto/cipher.js:164\r\n  const ret = this._handle.final();\r\n                           ^\r\n\r\nError: error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt\r\n    at Decipheriv.final (internal/crypto/cipher.js:164:28)\r\n    at des_decrypt (D:\\ProNodejs\\2018ITying\\TCP\\model\\des01.js:97:21)\r\n    at Object.<anonymous> (D:\\ProNodejs\\2018ITying\\TCP\\model\\des01.js:113:12)\r\n    at Module._compile (internal/modules/cjs/loader.js:776:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)\r\n    at Module.load (internal/modules/cjs/loader.js:653:32)\r\n    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:585:3)\r\n    at Function.Module.runMain (internal/modules/cjs/loader.js:829:12)\r\n    at startup (internal/bootstrap/node.js:283:19)\r\n![{056F5090-FA0A-4A6D-ADA1-5C40EE9F764F}_20190731143104.jpg](//static.cnodejs.org/FrmEXpwseMqtEzP0bhgtMdPp7I6X)    \r\n进程已结束，退出代码 1","createdAt":1564553791400},{"id":13944,"originId":"5bc7191a9545eaf107b9cbea","articleId":2851,"userId":358,"content":"http://enclose.io","createdAt":1539774746297},{"id":13945,"originId":"5bc71f57ede204052db805ef","articleId":2851,"userId":545,"content":"https://github.com/zeit/pkg   更好用的","createdAt":1539776343587},{"id":13946,"originId":"5bc71fc115e4fd1923f4900b","articleId":2851,"userId":26,"content":"[@atian25](/user/atian25) enclose.io 就是 node-packer吧？，没看到有什么其他的，感觉就是打包了node和egg-bin， 如果没有源码文件，运行起来还是没效果。[https://github.com/pmq20/node-packer](https://github.com/pmq20/node-packer)","createdAt":1539776449161},{"id":13947,"originId":"5bc723c315e4fd1923f4900d","articleId":2851,"userId":26,"content":"[@zuohuadong](/user/zuohuadong) 我了解了一下pkg，是可以打包一些普通的“有明确入口的”项目，但是egg这样的框架应用如何进行，有试过或者哪里有demo吗，或者分享一下思路？","createdAt":1539777475832},{"id":13948,"originId":"5bc7252d9545eaf107b9cbed","articleId":2851,"userId":545,"content":"[@HobaiRiku](/user/HobaiRiku)  没用过，我们一直用的 nest  https://github.com/nestjs/nest  \r\n操作方式是  tsc 编译成js ，再把入口文件打包 service.js  ","createdAt":1539777837231},{"id":13949,"originId":"5bc7286615e4fd1923f4900f","articleId":2851,"userId":26,"content":"[@zuohuadong](/user/zuohuadong) 不考虑这个","createdAt":1539778662695},{"id":13950,"originId":"5bc7322a37a6965f59052307","articleId":2851,"userId":358,"content":"[@HobaiRiku](/user/HobaiRiku) 会打源码的，配置问题？明天有空我试试","createdAt":1539781162911},{"id":13951,"originId":"5bc891cd37a6965f5905238d","articleId":2851,"userId":121,"content":"👍","createdAt":1539871181539},{"id":13952,"originId":"5bc92a3515e4fd1923f4909f","articleId":2851,"userId":26,"content":"昨天花时间测试了一下，自己用原生koa写的项目是可以用pka或者enclose.io来打包的，运行起来没问题，感觉pkg要方便很多速度也更快而且支持assets这些设置，由项目呈递的文档页面静态文件夹也会被直接打包进入可执行文件，enclose.io的node-packer，macbookpro i5的要打包10-20分钟，且目前还没找到如何能够打包静态文件这些。\r\n而eggjs的项目，感觉普通情况下（用egg-bin和egg-script来管理项目启动），用pkg和node-packer打包的东西都只是打包了启动脚本，而这个脚本运行，还是需要根目录有package.json和egg源码文件。\r\n附图（不管是pkg还是node-packer，对egg-bin或者script打包都是一样的结果）：\r\n![Snipaste_2018-10-18_09-17-20.png](//static.cnodejs.org/FjL6V-1PVEmx5VuSL6y3G_XH7jXU)\r\n或者是egg能有其他方式来编写，自定义一个入口？[@atian25](/user/atian25) ","createdAt":1539910197151},{"id":13953,"originId":"5bc93b1915e4fd1923f490b1","articleId":2851,"userId":358,"content":"你可以写一个 index.js 来自定义，有 2 个方式：\r\n\r\n- 自己调用 startCluster ，具体看下 egg-scripts 的源码\r\n\r\nhttps://github.com/eggjs/egg-scripts/blob/master/lib/cmd/start.js\r\n\r\n-  或者干脆直接调用 egg-scripts\r\n\r\n```js\r\n// index.js\r\nconst Command = require('egg-scripts');\r\nnew Command([ 'start', '--daemon' ]).start();\r\n```","createdAt":1539914521056},{"id":13954,"originId":"5bcd200337a6965f5905242d","articleId":2851,"userId":26,"content":"[@atian25](/user/atian25) 结合几篇关于egg源码的文章，从scripts看到egg-cluster最后到egg-core，感觉关键的：\r\n```\r\nconst Application = require(options.framework).Application;\r\n```\r\n以及egg核心framework也就是node_modules里的egg或者某框架，用的是loader之类读取源码文件来加载，而且源码里面有文件是否存在的断言，比如要package.json和node_modules,egg这些。\r\n源码还是稍微有点奇妙的，从egg-core的创建app开始，就包含loader的操作，我也不太清楚打包的工具像pkg和enclose.io是否把项目打包后，对代码中文件操作的影响，所以不管怎么打包（即使可能已经把所有东西都打包了），运行起来，它还是需要package.json，egg这些文件，当我都复制到同一个目录下，可以运行，但是是个空的egg应用。","createdAt":1540169731677},{"id":13955,"originId":"5bcd236837a6965f5905242f","articleId":2851,"userId":358,"content":"[@HobaiRiku](/user/HobaiRiku) 跟 egg 本身没太大关系的，我记得之前听 enclose 作者分享过，他是把所有文件包括依赖都打包了，然后做了 fs 等的 patch 来映射，所以理论上 Node 应用都可以，egg 没有什么特殊的。\r\n\r\n可以直接提 issue 找作者聊聊","createdAt":1540170600607},{"id":13956,"originId":"5bcd24bbede204052db8069c","articleId":2851,"userId":26,"content":"[@atian25](/user/atian25) ok","createdAt":1540170939471},{"id":13957,"originId":"5bcd26f0ede204052db8069f","articleId":2851,"userId":3142,"content":"我也遇到了这个问题，发现node-packer只打包egg-scripts的依赖文件，没有把app目录下的文件打包进去","createdAt":1540171504953},{"id":13958,"originId":"5bcd271d9545eaf107b9cd35","articleId":2851,"userId":3142,"content":"看到大家在issue上提问题，作者基本上都没回复","createdAt":1540171549435},{"id":13959,"originId":"5bcd281615e4fd1923f49145","articleId":2851,"userId":358,"content":"回到问题本身，打包后其实破解也不难","createdAt":1540171798181},{"id":13960,"originId":"5bcd990f9545eaf107b9cd56","articleId":2851,"userId":26,"content":"[@atian25](/user/atian25) [@PowerDos](/user/PowerDos) 放弃了，做到这一层面的服务还需要这样那样限制，也是很费心很反感.....但是所谓的商业化，没办法。","createdAt":1540200719357},{"id":13961,"originId":"5bcda78b15e4fd1923f49175","articleId":2851,"userId":1598,"content":"这个牛","createdAt":1540204427201},{"id":13962,"originId":"5bcdd00137a6965f59052465","articleId":2851,"userId":358,"content":"[@HobaiRiku](/user/HobaiRiku) 你们一定要私有化部署么？先混淆凑合下吧。。。","createdAt":1540214785690},{"id":13963,"originId":"5bcdd45d9545eaf107b9cd6b","articleId":2851,"userId":26,"content":"[@atian25](/user/atian25) 反正eggjs是不改了，积累了很多基础功能，另外那些需要保密的就用go之类的去弄吧，这样反而也更好开发一些。","createdAt":1540215901750},{"id":13964,"originId":"5bcdd83cede204052db806c0","articleId":2851,"userId":358,"content":"[@HobaiRiku](/user/HobaiRiku) 没办法，JS 天然在这一块就不好搞","createdAt":1540216892164},{"id":13965,"originId":"5bcdf195cbff068050fcf1a9","articleId":2851,"userId":752,"content":"动态载入，在打包后就会有问题。","createdAt":1540223381677},{"id":13966,"originId":"5bd0217ab56c42645edb7c40","articleId":2851,"userId":628,"content":"用过 pkg，可以指定 assets 规则来打包的。速度也很快\r\n","createdAt":1540366714620},{"id":13967,"originId":"5bd12d55af3d3a315eab02c1","articleId":2851,"userId":113,"content":"[@HobaiRiku](/user/HobaiRiku) 可以试试CabloyJS\r\n1、基于EggJS高扩展性和灵活性（感谢EggJS），CabloyJS在EggJS基础上提供了一个“业务模块”的概念\r\n2、每个“业务模块”可以单独编译打包，如果再把\"async await\"也丑化一下，打包后的文件就真的惨不忍睹了\r\n3、现有的EggJS项目代码可能会稍微调整一下，但整体而言变动不是很大\r\n4、CabloyJS是前后端分离的全栈框架，如果想使用自己的前端风格，直接把CabloyJS当作API服务就可以了\r\n","createdAt":1540435285575},{"id":13968,"originId":"5bd26be9ad50495f5e2fbb4f","articleId":2851,"userId":26,"content":"[@zhennann](/user/zhennann) ,看了一下文档，看起来是不错的东西啊，好厉害，但是我好像找不到源码，是不开源的吗？想学习一下，因为光看文档好像没那么清晰，不过，这个框个人感觉比较侵入，可能对于我这边的项目类型来说不是很适合，还有ts写法改造会不会麻烦？主要是对“模块”和“编译”这个感兴趣，想问问作者大神是用什么原理或方式，是否分享一下思路？","createdAt":1540516841720},{"id":13969,"originId":"5bd27e42ad50495f5e2fbb5a","articleId":2851,"userId":113,"content":"[@HobaiRiku](/user/HobaiRiku) \r\n1、CabloyJS是完全开源的框架，安装之后源码在node-modules中可以看到\r\n2、侵入问题：CabloyJS提供了一整套`用户管理`、`角色管理`、`权限管理`等系统模块，便于快速的进行业务开发。如果想使用这套模块，可以理解为“比较侵入”。如果想实现自己的业务模式，完全可以忽略这些系统模块。此外，前后端分离的设计，也可以完全忽略系统默认的前端渲染模块。\r\n3、关于ts：从个人观点而言，不建议使用ts。javascript有其固有的简洁和优雅风格。ts经常会破坏这种编程体验。由于CabloyJS基于EggJS，所以，编写测试用例，测试驱动开发，是推荐的企业化开发模式。\r\n4、模块编译原理：EggJS是配置式，比如service文件放置到指定目录，就会被识别自动加载。CabloyJS中的模块是声明式，service文件必须通过代码require，才会被识别加载。因此，CabloyJS中的模块很容易编译，而且也提供了现成的build文件，只需要调配编译的参数（如对哪些语法特性进行babel）即可。\r\n5、CabloyJS中的模块也有一套config、routes、controllers、services、middlewares等等特性。这些代码文件都通过require进行声明，因此都可以编译到一起。CabloyJS在系统初始化时，会自动识别，然后注入到EggJS相应的系统架构中。\r\n","createdAt":1540521538732},{"id":13970,"originId":"5bd2839789665c365e9442ee","articleId":2851,"userId":26,"content":"[@zhennann](/user/zhennann) 了解，有空研究学习一下，但是不用ts肯定不行的，开发不便捷，现在公司的项目除了用于测试的，其余都是ts开发的，egg如果不用ts，很多骚操作的写法就没办法弄了，而且代码提示也是一个，typeorm也不好一起用了。但是你的“require”这个操作，似乎给了一条思路。","createdAt":1540522903669},{"id":13971,"originId":"5bd2c8ce89665c365e94430d","articleId":2851,"userId":113,"content":"[@HobaiRiku](/user/HobaiRiku) 👌","createdAt":1540540622012},{"id":13972,"originId":"5d4123aab4725a628e269f24","articleId":2851,"userId":3885,"content":"https://blog.csdn.net/qq_35241223/article/details/97306900 我写的egg.js打包流程","createdAt":1564550058174},{"id":13973,"originId":"5d4128159969a529571d86ea","articleId":2851,"userId":545,"content":"[@HobaiRiku](/user/HobaiRiku)   egg 也有 midwayjs ，借鉴了 nest.js ，都是纯 ts 框架","createdAt":1564551189986},{"id":13974,"originId":"5d411f00b4725a628e269f11","articleId":2852,"userId":1377,"content":"同需求，想面试入职，却无从下手啊","createdAt":1564548864724},{"id":13975,"originId":"5d313d4db2b9222961dac2c5","articleId":2854,"userId":3890,"content":"Controller控制路由，去调用对应的service来执行业务逻辑","createdAt":1563508045320},{"id":13976,"originId":"5d313d7c9969a529571d5697","articleId":2854,"userId":156,"content":"我是Controller只管输入和输出。逻辑在service里写","createdAt":1563508092699},{"id":13977,"originId":"5d3142e49969a529571d56c1","articleId":2854,"userId":259,"content":"Controller = 逻辑， Service = 复用","createdAt":1563509476061},{"id":13978,"originId":"5d31683cb2b9222961dac40d","articleId":2854,"userId":109,"content":"[@xjh22222228](/user/xjh22222228) 我认为  Controller = 控制， Service = 逻辑","createdAt":1563519036359},{"id":13979,"originId":"5d31d726b2b9222961dac636","articleId":2854,"userId":98,"content":"少就是多，分层是有必要，但是这种模糊的分层非常没有必要，以我的经验来看，相当多的数据库操作都是每个接口特别定制的，几乎无法复用的，那为什么不和router写在一起呢？\r\n我使用java/php/node/golang开发过web服务程序，现在主要是做node然后偶尔玩一下golang，各种框架都有自己的一套规范和约定，每个公司使用的框架都不一样，这带来了严重的学习成本和使用限制，当你换工作后你马上就会发现上一个项目学到的东西在这个项目上完全用不上，求不更学不动啊，总结发现最容易维护的恰恰是那些只有最少约定的代码\r\n一个典型的例子就是路由的挂载方式，有的人喜欢把路径拆分，比如/user/reg、/user/login，因为/user可以抽出来，像这样app.use('/user' usersRouter);，这带来了一个严重的问题，当你要定位一个api接口时，你不得不从头去看一遍代码，但是如果不做拆分，直接就可以通过全局搜索快速定位到代码\r\n另一个典型的例子是某项目是由之前写java的人转过来写的node，然后照搬java那一套，原本一个接口十几二十行代码就可以完成的功能非要拆成几个文件，甚至各文件之间的引入是运行时动态读文件夹下的文件自动引入的，完全无法用IDE静态跟踪代码\r\n或许真如quickjs作者选择c语言一样，返璞归真，简单的就是最好的，也许你觉得这样写很不时尚很low，但你放下这段代码一年后再回来，你会发现这段很low的代码居然如此清晰易懂","createdAt":1563547430006},{"id":13980,"originId":"5d32943b9969a529571d5b1f","articleId":2854,"userId":1312,"content":"[@zengming00](/user/zengming00) 基本赞同，分层是必要的，但不能为了分层而分层，考虑项目但可维护性，至于做到一个什么程度，代码是否解偶，这个要具体去定","createdAt":1563595835384},{"id":13981,"originId":"5d33cc1eb2b9222961daca76","articleId":2854,"userId":3891,"content":"service 是负责和db 交互的 你这样理解就ok了","createdAt":1563675678138},{"id":13982,"originId":"5d33ce589969a529571d5d84","articleId":2854,"userId":358,"content":"具体情况具体分析：\r\n- Controller 一般的职责是：`校验用户输入（query，body） + 处理业务逻辑 + 渲染模板并响应`。\r\n- 其中，`处理业务逻辑` 这一步，一些共用的逻辑，是可以抽象为 Service 的。\r\n- 但不是一定要抽取，如果只需要直接调用 BaaS 服务，如调用 oss 之类的，那完全可以直接在 Controller 里面做完，因为 BaaS 就是一个简单的远程 Service 了。\r\n- 抽离 Service 的一个好处是，方便单测，因为 Controller 的测试是跟 HTTP 绑定的，你需要用 supertest 之类的测试。\r\n- 如果你的一段业务逻辑是多发的，可以是 HTTP 触发，也可以是定时任务触发的，这时候你放在 Controller 里面自然不好。\r\n\r\n**代码也不是一成不变的，只要把单测都写了，跟着业务变化，按需重构就好了。**","createdAt":1563676248946},{"id":13983,"originId":"5d3515d79969a529571d5fe2","articleId":2854,"userId":40,"content":"我是一般在 Controller 层控制一些规则，比如 url，method，输入输出参数校验规则，接口权限校验规则，类似如下：\r\n```javascript\r\nconst adminDeleteType = {          //输入输出校验，参数不合法，直接非200返回，告知接口缺少什么参数，或者某个位置的参数类型不合法等\r\n    description: '管理员删除表单',  //接口描述\r\n    input: c.Obj({                //输入参数校验函数\r\n        surveyId: t.Num\r\n    }),\r\n    output: t.Str                 //输出参数校验函数\r\n};\r\n\r\nconst adminDeletePerm = {         //权限校验，表示对某种资源有某种权限（预览，编辑，删除，管理员等权限），没有权限直接非200返回，告知权限不足\r\n    resourceName: 'DOMAIN',\r\n    resourceId: 'surveyId',\r\n    permType: 'SURVEY_ADMIN'\r\n};\r\n\r\nconst deleteByAdmin = api.delete('/survey/deleteByAdmin', adminDeleteType, adminDeletePerm, function* (){\r\n    return yield surveyService.deleteByAdmin(this.input);  //输入绑定在 this.input 对象上，直接调用 service 层函数\r\n});\r\n```\r\nController 有点承上启下的作用，只定义规则，具体的规则处理在 router 中间件处理，具体的业务逻辑处理在 service 层处理\r\n\r\n有些情况下 service 层中的函数会出现相互调用，但是依赖关系是单向的，一般不建议两个 service 循环依赖，这个时候可以考虑给 service 层抽象一些公共的 util 文件出来。\r\n","createdAt":1563760087632},{"id":13984,"originId":"5d3517199969a529571d5ffe","articleId":2854,"userId":103,"content":"我们纠结于这些大多是受到了设计模式的影响，分层的目的每个人的理解也不尽相同，比如可以做易变层->稳定层，逻辑层->复用层。如果你的代码本身就很简单，分那么多层又有何意义?","createdAt":1563760409193},{"id":13985,"originId":"5d352815b2b9222961dacead","articleId":2854,"userId":3892,"content":"习惯了Service写逻辑，以前写Java的时候Service层才有事务管控","createdAt":1563764757061},{"id":13986,"originId":"5d3577999969a529571d6478","articleId":2854,"userId":1926,"content":"感觉就是谁都有谁的想法和实践，还是得结合现实情况啊。","createdAt":1563785113690},{"id":13987,"originId":"5d358414b2b9222961dad1ec","articleId":2854,"userId":356,"content":"这个我是严格准守的，可以用现在比较流行的管道思想来解释\r\ncontroller 负责管道的调用，不负责具体logic\r\nservice 负责比较完整的原子性事务\r\n比如一个注册功能\r\n1.发送邮件\r\n2.存储数据\r\n这两个步骤分别可以写入service，然后controller来调用。\r\n如果形成良好的习惯，到项目后期会有大量可复用的service","createdAt":1563788308576},{"id":13988,"originId":"5d3701319969a529571d6b5c","articleId":2854,"userId":562,"content":"[@TimLiu1](/user/TimLiu1) 我也是 哈哈","createdAt":1563885873762},{"id":13989,"originId":"5d3955229969a529571d71cb","articleId":2854,"userId":1932,"content":"之前写过一点 rails，同事让我不要把太多逻辑放在 controller，要写在 model 里。\r\n我想，传统 mvc 的话，应该就不需要 service 了吧","createdAt":1564038434436},{"id":13990,"originId":"5d3e67f5b4725a628e269518","articleId":2854,"userId":258,"content":"[@TimLiu1](/user/TimLiu1) 基本赞同，我的controller是带res和req的，不过有时候需要多个service的组合的太多了比如10个service的流程控制，但是它又会被controller调用也会被消息队列比如，或者其他协议调用，假设需要这样一个复用的时候一般怎么放呀。我一直没好的方案所以一直会选择重复调用这一流程，毕竟这种情况不多小项目，不过不知道如果多了怎么复用某一些流程。（新开一个层？controller又可以调用新的层也可以调用原来的service？，新的层可以调用service）","createdAt":1564370933953},{"id":13991,"originId":"5d3eababb4725a628e269644","articleId":2854,"userId":356,"content":"[@koroshi](/user/koroshi) 我理解你想表达的点是：多个controller其实调用的是固定顺序的几个service，然后可不可以封装的问题，对于这个问题，其实我们需要找到一个平衡点，平衡点该怎么找呢，其实你确实可以尝试在加一层，把你总结的那些常用的固定组合的service在封装一层，如何重用性确实非常不错，其实可以抽象出一个基础服务来，这样其实也就是在向架构慢慢转变的一个过程","createdAt":1564388267748},{"id":13992,"originId":"5d3ec5cdb4725a628e26971f","articleId":2854,"userId":358,"content":"在我们的实践中，会把跟后端服务相关的那块，抽出一个概念，可以叫 proxy 或 rpc 。 不过我们抽出的主要原因是，这部分代码是自动生成的，直接分析后端发布的 jar 包，然后生成对应的 Proxy 类。","createdAt":1564394957489},{"id":13993,"originId":"5d3fa03cb4725a628e269887","articleId":2854,"userId":885,"content":"[@jamieYou](/user/jamieYou) 经历类似，观点一样~","createdAt":1564450876827},{"id":13994,"originId":"5d39b3b39969a529571d7371","articleId":2855,"userId":3894,"content":"把require语句放在exports后面试试…","createdAt":1564062643825},{"id":13995,"originId":"5d3a35e19969a529571d73f0","articleId":2855,"userId":354,"content":"放一起啊...","createdAt":1564095969941},{"id":13996,"originId":"5d3a5740b4725a628e268c17","articleId":2855,"userId":887,"content":"const Comment;\r\nprocess.nextTick(()=>Comment = require('./comment'));\r\n两个文件都这样处理下试试","createdAt":1564104512224},{"id":13997,"originId":"5d3bb7c69969a529571d78d4","articleId":2855,"userId":36,"content":"```\r\n想要解决这个问题有一个很简明的方法，那就是在循环依赖的每个模块中先导出自身，然后再导入其他模块\r\n```","createdAt":1564194758079},{"id":13998,"originId":"5d3bdeef9969a529571d7942","articleId":2855,"userId":109,"content":"我的思路是消除循环而不是解决导入。","createdAt":1564204783610},{"id":13999,"originId":"5d352f99b2b9222961dacf2a","articleId":2856,"userId":545,"content":"https://docs.nestjs.cn/   中文文档\r\nhttps://docs.nestjs.cn/6/awesome  相关资料\r\n里面有些 脚手架可以用~\r\n我们用 nest.js 有两年了","createdAt":1563766681394},{"id":14000,"originId":"5d353146b2b9222961dacf4e","articleId":2856,"userId":1373,"content":"[@zuohuadong](/user/zuohuadong) 你们数据库用的 MySQL 还是 MongoDB。","createdAt":1563767110138},{"id":14001,"originId":"5d3534d9b2b9222961dacf83","articleId":2856,"userId":1312,"content":"数据库用 postgresql 挺好的个人项目","createdAt":1563768025449},{"id":14002,"originId":"5d354d799969a529571d629b","articleId":2856,"userId":501,"content":"推荐看一个线上项目: https://www.xyly6.com  nest+mysql 写的","createdAt":1563774329004},{"id":14003,"originId":"5d3550b09969a529571d62ca","articleId":2856,"userId":545,"content":"[@WuYinMan](/user/WuYinMan)  用的 postgresql \r\n关系型支持 比 mysql 好，事务更完整。    Nosql 也支持，有 jsonb 格式，性能比 MongoDB 好。","createdAt":1563775152308},{"id":14004,"originId":"5d356d7c9969a529571d63d1","articleId":2856,"userId":1373,"content":"[@zuohuadong](/user/zuohuadong) 先去了解下~","createdAt":1563782524656},{"id":14005,"originId":"5d357ae6b2b9222961dad17c","articleId":2856,"userId":1373,"content":"[@sk-blog](/user/sk-blog) https://node-postgres.com/ 连接用这个还是别的呢？","createdAt":1563785958792},{"id":14006,"originId":"5d357ddb9969a529571d64b1","articleId":2856,"userId":545,"content":"[@WuYinMan](/user/WuYinMan)  用的  typeorm  ， typeorm 用的 pg ","createdAt":1563786715782},{"id":14007,"originId":"5d3584a69969a529571d6514","articleId":2856,"userId":356,"content":"建议使用比较流行的框架koa，文档少意味采坑比较多","createdAt":1563788454336},{"id":14008,"originId":"5d3590c5b2b9222961dad27d","articleId":2856,"userId":545,"content":"[@TimLiu1](/user/TimLiu1)  koa 算个工具包吧。\r\n楼主考虑到项目需求和维护了，肯定是在 nest.js 和 midway 、loopback4 中间选了，","createdAt":1563791557893},{"id":14009,"originId":"5d36564cffed7316864619eb","articleId":2856,"userId":1312,"content":"[@WuYinMan](/user/WuYinMan) 用pg链有什么问题吗？需要找替代品？\r\n","createdAt":1563842124877},{"id":14010,"originId":"5d3685e4ffed731686461b34","articleId":2856,"userId":1373,"content":"[@sk-blog](/user/sk-blog) 没用过，所以咨询","createdAt":1563854308168},{"id":14011,"originId":"5d36b0c8ffed731686461bf8","articleId":2856,"userId":545,"content":"[@WuYinMan](/user/WuYinMan)  我们一直在用 pg ，一般主要用的也是这个。","createdAt":1563865288041},{"id":14012,"originId":"5d36b4fbffed731686461c1f","articleId":2856,"userId":1373,"content":"[@zuohuadong](/user/zuohuadong) 你不是说你们用的是基于 pg 的 typeorm 吗？","createdAt":1563866363423},{"id":14013,"originId":"5d387403b4725a628e2687a6","articleId":2856,"userId":43,"content":"还是用egg吧，越来越普及了！","createdAt":1563980803549},{"id":14014,"originId":"5d390142b4725a628e268827","articleId":2856,"userId":545,"content":"[@WuYinMan](/user/WuYinMan)  嗯 typeorm  pg ","createdAt":1564016962692},{"id":14015,"originId":"5d3901ba9969a529571d702f","articleId":2856,"userId":545,"content":"[@CodeofGame](/user/CodeofGame) \r\n\r\n你再说一遍？\r\nnpm 下载量：\r\n![image.png](//static.cnodejs.org/FuHW0OxvaIGJnqjuEA6m45_w4806)\r\n\r\nhttps://www.npmtrends.com/@nestjs/core-vs-egg\r\n\r\nstar 趋势 \r\n![image.png](//static.cnodejs.org/FjLfsZFPc0yirehmxD2wuAskuUbv)\r\n\r\n","createdAt":1564017082501},{"id":14016,"originId":"5d3bb22fb4725a628e26907a","articleId":2856,"userId":545,"content":"现在 nest-graphql 也支持 fastify 了~  快很多","createdAt":1564193327491},{"id":14017,"originId":"5d304ef1b2b9222961dabf00","articleId":2857,"userId":97,"content":"如果没有空闲 worker 的话，那么接下来的请求都会进 pending 队列，等待出现空闲 worker 来消化 pending 队列。不好直接从 node 和 Java 的角度来对比，而是对比 node 的框架和 Java 框架。不过应该都是一样的。\r\n","createdAt":1563447025763},{"id":14018,"originId":"5d305199b2b9222961dabf12","articleId":2857,"userId":97,"content":"如果非要在这个问题上对比 node 和 Java 的话，我感觉如果这个耗时操作放到 Java 上能变成 2 秒会比较有意义","createdAt":1563447705610},{"id":14019,"originId":"5d3059399969a529571d5365","articleId":2857,"userId":3895,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 我是这样理解的，由于nodejs的高并发与异步非阻塞特点，nodejs在创建的单进程服务器能接受4000到5000并发量的请求连接处理，把多进程（8个）部署下，在1000多的并发量下，不会导致请求排队，使用第一种方式应该可以的没问题。","createdAt":1563449657251},{"id":14020,"originId":"5d305c5ab2b9222961dabf4a","articleId":2857,"userId":97,"content":"[@FantasyGao](/user/FantasyGao) 为什么不会排队呢？如果并发 1000 个请求，而 workers 数量为 8，处理一个请求需要占用一个 worker 大概 20s，那么队列里面至少也得有 992 个请求 pending","createdAt":1563450458330},{"id":14021,"originId":"5d305db19969a529571d5380","articleId":2857,"userId":97,"content":"[@FantasyGao](/user/FantasyGao) node 是异步非阻塞的，但是你的业务按方式 1 来处理是阻塞的，按方式 2 来是异步非阻塞的","createdAt":1563450801898},{"id":14022,"originId":"5d30619f9969a529571d5386","articleId":2857,"userId":3895,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 1000 个请求不是同步阻塞的计算任务，也是一些异步调用的逻辑，请求进来之后调用其他系统了，主线程立即释放的那种情况，这种怎么考虑下。","createdAt":1563451807986},{"id":14023,"originId":"5d3067a1b2b9222961dabf7c","articleId":2857,"userId":97,"content":"[@FantasyGao](/user/FantasyGao) 虽然是调用的外部计算资源，但是方式 1 的设计，不就是等待外部计算结束了才返回给客户端状态吗，这个时间内，连接不是一直打开的状态，客户端一直等待吗","createdAt":1563453345990},{"id":14024,"originId":"5d308434b2b9222961dabff8","articleId":2857,"userId":3896,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 假设只有一个worker，同一时间也可以不止接收一个请求，虽然前面的请求（需要20s）还没返回，依旧可以接收新的请求，因为http请求是异步的。\r\nworkers数量为8，并发1000个请求，不代表会有992个pending。","createdAt":1563460660765},{"id":14025,"originId":"5d3085899969a529571d5403","articleId":2857,"userId":3896,"content":"方案1，看场景，如果是CPU密集型，那么20s的请求复杂处理对于node来说是不适合的。而如果这20s是交给了其他进程或者其他服务器之类的异步处理，那么理论上能达到的连接数与系统内存有关。并不会造成http请求被hold住，这个你简单起一个http server便能测试：\r\n\r\n```\r\nconst util = require('util');\r\nconst Koa = require('koa');\r\nconst app = new Koa();\r\n\r\napp.use(async ctx => {\r\n  console.log(new Date() + ' 处理请求');\r\n  await util.promisify(setTimeout)(20000);\r\n  console.log('处理请求处理完成');\r\n  ctx.body = { 'hello': 'world' };\r\n});\r\napp.listen(3000);\r\nconsole.log('listen at 3000');\r\n```\r\n\r\n启动后，同时发送多个请求，你可以只起一个进程，观察请求的处理过程。","createdAt":1563461001912},{"id":14026,"originId":"5d309b959969a529571d5444","articleId":2857,"userId":97,"content":"[@iceyang](/user/iceyang) \r\n\r\n> 假设只有一个worker，同一时间也可以不止接收一个请求\r\n\r\n我也没说不能接受到请求啊\r\n\r\n> 质疑点：当大量用户进来后，http的连接数限制，会不会被hold住，后面的服务器请求一直等待排队\r\n\r\n如果 20s 的操作，不是 CPU 密集型的，那对客户端的请求来说就不需要等待 20s 了嘛？如果还要继续等待 20s，这个业务不就是阻塞的嘛？","createdAt":1563466645516},{"id":14027,"originId":"5d30ff7db2b9222961dac0a5","articleId":2857,"userId":3896,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) \r\n\r\n我大概明白我们的差异源头在哪里了。\r\n\r\n> 质疑点：当大量用户进来后，http的连接数限制，会不会被hold住，后面的服务器请求一直等待排队\r\n\r\n对于「会不会被hold住」这一点，我是根据楼主说的「当大量用户进来后」，推测他想知道的是不是指 服务端无法再响应新的请求。所以我会说如果是IO密集型，只是简单逻辑的话，理论上来讲，能建立的连接数与内存有关。\r\n\r\n你说到的20s的业务阻塞，是针对客户端的这一请求来讲，我认可，这是必然的，不管服务器如何处理，这20s就是请求的总时间，这是针对客户端的这一请求而言。\r\n针对并发量，一般来说并发请求应该都是不同的http请求，所以某一客户端的请求发生业务阻塞 跟 服务端的无法响应 没有必然关系。\r\n\r\n结论还是前面的原因，既然有歧义，那么楼主明确下就可以解决问题了。","createdAt":1563492221382},{"id":14028,"originId":"5d311d49b2b9222961dac155","articleId":2857,"userId":97,"content":"[@iceyang](/user/iceyang) \r\n\r\n> 对于「会不会被hold住」这一点，我是根据楼主说的「当大量用户进来后」，推测他想知道的是不是指 服务端无法再响应新的请求。所以我会说如果是IO密集型，只是简单逻辑的话，理论上来讲，能建立的连接数与内存有关。\r\n\r\n就算是 CPU 密集型，连接数的约束条件也是系统 fd limit 或者内存量。master 进程接收客户端连接 dispatch 给空闲 worker 进程，能做到这样 master 进程里面肯定用的是 NIO，worker 里面是不是 CPU 密集型的，并不会导致 master 不能接收新的连接。我之前的 worker 例子不是说 node 就是这样实现的，因为楼主说对比 Java 和 node，我随便举个通用简单的例子 。我的意思是即使换了 Java，如果 20s 还是要等待，没有啥可以对比的，结果都一样。20s 的耗时操作不管操作本身是不是 CPU 密集型的，都会导致该连接 20s 内无法被释放，而本身问题又带有高并发的属性，也就是说 20s 所有建立的请求都无法被释放，很快就达到 fd limit 或者 OOM","createdAt":1563499849075},{"id":14029,"originId":"5d312d27b2b9222961dac20e","articleId":2857,"userId":3895,"content":"[@iceyang](/user/iceyang) [@hsiaosiyuan0](/user/hsiaosiyuan0)  首先感谢两位大佬的回答，我再描述一下问题。\r\n目前有一个操作大概耗时20s左右，后台接口由JAVA的spring框架提供，后端的同学指出如果前端发起这个操作请求后，前端一直loading20s左右等待这个接口返回，那意味着后端要将这个请求handle住。在这个请求从后端接到直到处理完成后reponse前端这个时间段内，由于http连接数的限制，会导致其他的请求排队不能得到处理。\r\n\r\n我不太理解java的这个handle，但是我觉得如果使用nodejs的这种高并发的异步模型，并发下的请求都会得到处理，在一定量的前提下（不是大的超过机器限制），并不会有请求排队的情况。","createdAt":1563503911710},{"id":14030,"originId":"5d3130499969a529571d55f3","articleId":2857,"userId":3896,"content":"[@FantasyGao](/user/FantasyGao) \r\n这个场景下，你后端同学的意思估计是这样：\r\n\r\n假设：\r\n\r\n1. 当前环境下（服务器也好，语言也好）http连接数只能达到1000\r\n2. 接收的请求都能正常处理，也就是20s返回\r\n\r\n那么：\r\n在并发超过1000的情况下，超过1000的请求肯定需要等到前面1000个请求的某一个处理完成后，才能处理第1001个。\r\n\r\n所以 [@hsiaosiyuan0](/user/hsiaosiyuan0) 才说，这跟语言是无关的。\r\n不管多线程也好，事件异步也好，逃不出请求数的限制。\r\n\r\n这里还有另外一个前提，就是并发就算达到1000，服务器都能以正常的速度处理请求。","createdAt":1563504713619},{"id":14031,"originId":"5d315da9b2b9222961dac39a","articleId":2857,"userId":3895,"content":"[@iceyang](/user/iceyang) 我可以理解为这个请求最大连接数不是语言层面的事，是服务器自身设置控制的吗？那我觉得nodejs本身是能承载接收的，服务器做这个控制的意义在哪里，大佬解惑","createdAt":1563516329533},{"id":14032,"originId":"5d315f72b2b9222961dac3ac","articleId":2857,"userId":3896,"content":"[@FantasyGao](/user/FantasyGao) 根据你http的场景，可以这样搜索下：\r\n\r\n关键字：tcp、最大连接数\r\n\r\n你会得到你要的答案的。\r\n\r\n> 服务器做这个控制的意义在哪里\r\n\r\n建立连接是需要占用资源的，资源并不是无限的","createdAt":1563516786997},{"id":14033,"originId":"5d346200b2b9222961dacbc5","articleId":2857,"userId":113,"content":"转自全栈框架CabloyJS中的`Kitchen-sink`\r\n![progressbar.2019-07-21 20_57_06.gif](//static.cnodejs.org/FgiQOTiUrURIDJHCmbeJ9LPovYZT)\r\n![1.png](//static.cnodejs.org/FhAvWAwD8IAceJba520_wcJ2bxIi)\r\n![2.png](//static.cnodejs.org/FmaurYkx1KHg8ucduh0bqLkfgPDK)\r\n","createdAt":1563714048088},{"id":14034,"originId":"5d3bb0699969a529571d78b4","articleId":2857,"userId":545,"content":"(1)、client最大tcp连接数\r\nclient每次发起tcp连接请求时，除非绑定端口，通常会让系统选取一个空闲的本地端口（local port），该端口是独占的，不能和其他tcp连接共享。\r\ntcp端口的数据类型是unsigned short，因此本地端口个数最大只有65536，端口0有特殊含义，不能使用，这样可用端口最多只有65535，所以在全部作为client端的情况下，最大tcp连接数为65535，这些连接可以连到不同的server ip。\r\n\r\n\r\n(2)、server最大tcp连接数\r\nserver通常固定在某个本地端口上监听，等待client的连接请求。不考虑地址重用（unix的SO_REUSEADDR选项）的情况下，即使server端有多个ip，本地监听端口也是独占的，\r\n因此server端tcp连接4元组中只有remote ip（也就是client ip）和remote port（客户端port）是可变的，因此最大tcp连接为客户端ip数×客户端port数，对IPV4，不考虑ip地址分类等因素，\r\n最大tcp连接数约为2的32次方（ip数）×2的16次方（port数），也就是server端单机最大tcp连接数约为2的48次方。\r\n\r\n\r\n而tcp连接受到文件句柄和端口限制，这直接限制tcp的连接数量\r\n","createdAt":1564192873765},{"id":14035,"originId":"5d3a9666b4725a628e268d9b","articleId":2858,"userId":109,"content":"并未提高并发性能，而是提高对于并发请求连接的管理能力。","createdAt":1564120678646},{"id":14036,"originId":"5d3a971ab4725a628e268da5","articleId":2858,"userId":3897,"content":"[@waitingsong](/user/waitingsong) 您好，可以稍微具体描述下吗","createdAt":1564120858014},{"id":14037,"originId":"5d3ab2b0b4725a628e268e82","articleId":2858,"userId":109,"content":"异步非阻塞模式并非能提高处理性能，而是因为能接收并保持更多的请求连接，减小在网络磁盘IO等待上的消耗从而提高系统整体的响应能力。","createdAt":1564127920710},{"id":14038,"originId":"5d3ac047b4725a628e268eeb","articleId":2858,"userId":356,"content":"nodejs 在中间层主要是做了两件事\r\n**1.转发**\r\n转发的话性能和nginx比还是有差距的，当初我们测试代理一个静态文件，并发数和nginx是有差距的，所以这一点不是核心竞争力\r\n**2.业务logic处理**\r\n现在在创业公司野蛮生长阶段都是nodejs直接做后端，在公司扩张稳定之后便会引用go或则java做基础服务，nodejs做业务层处理，这样做主要是解决以下几个痛点\r\n1. 很多基础服务，比如用户模块，组织模块的一些基础方法在多个项目中用到，并且变动小，所以需要沉淀出基础层，提高复用性\r\n2. 尽量避免很多node服务和数据库直连，保证数据库的安全性，安全性包括数据安全和性能安全。\r\n3. 部分公司用node做数据渲染，缓存，这样可以很大程度的前端体验\r\n3.1. 比如后端返回的是json, 然后node把渲染好的页面直接返回给前端，这样能很大程度提高前端的体验\r\n3.2. node 结合redis可以进行某些api数据的缓存，这样提高了api响应速度\r\n4. 在复杂的单页面运用中实现路由模块管理\r\n4.1 比如我一个项目有订单模块和产品模块，其实是两个单页，通过访问不同的nodejs路由得到，这样不用一次性全部加载到前端，提高了用户体验","createdAt":1564131399081},{"id":14039,"originId":"5d358b5a9969a529571d6584","articleId":2859,"userId":98,"content":"优点用起来方便，很多功能都有\r\n缺点，没有移植性，学习成本高，有些复杂的功能还是得直接写sql","createdAt":1563790170218},{"id":14040,"originId":"5d358de79969a529571d659e","articleId":2859,"userId":545,"content":"优点： 方便迁移\r\n\r\n稍微大点的项目，肯定是得有 orm ","createdAt":1563790823446},{"id":14041,"originId":"5d3593759969a529571d65c8","articleId":2859,"userId":36,"content":"优点：对sql语句不太会的人友好\r\n缺点：各种语法","createdAt":1563792245538},{"id":14042,"originId":"5d35a39db2b9222961dad2f3","articleId":2859,"userId":703,"content":"优点：对sql语句不太会的人友好\r\n缺点：对sql语句太会的人不友好","createdAt":1563796381033},{"id":14043,"originId":"5d35a9a9b2b9222961dad312","articleId":2859,"userId":1693,"content":"额。。。orm感觉还不错。。。","createdAt":1563797929604},{"id":14044,"originId":"5d35da13ffed731686461989","articleId":2859,"userId":109,"content":"球用莫得 就是个坑。","createdAt":1563810323199},{"id":14045,"originId":"5d397a8d9969a529571d728d","articleId":2859,"userId":3155,"content":"优点：自动转译SQL，防止注入。可读性比较高。\r\n缺点：有一定的学习成本，要花大量的精力去看文档。复制的查询还是要写SQL。","createdAt":1564048013064},{"id":14046,"originId":"5d3a57a09969a529571d7451","articleId":2859,"userId":887,"content":"简单的操作方便，复杂操作吐血字符串拼sql","createdAt":1564104608689},{"id":14047,"originId":"5d3abc9f9969a529571d76fd","articleId":2859,"userId":356,"content":"[@brucecodezone](/user/brucecodezone) 赞👍\r\n","createdAt":1564130463145},{"id":14048,"originId":"5d3963939969a529571d7216","articleId":2860,"userId":22,"content":"一直用 jest，检测 DOM 可以使用 [Jest Snapshot](https://jestjs.io/docs/en/snapshot-testing) ，这个适合测试组件","createdAt":1564042131914},{"id":14049,"originId":"5d3965749969a529571d7221","articleId":2860,"userId":3898,"content":"[@justjavac](/user/justjavac) 感谢，我去看看","createdAt":1564042612950},{"id":14050,"originId":"5d3a955bb4725a628e268d8f","articleId":2860,"userId":3899,"content":"一般前端框架都有对应的测试方法，比如React的jest，Vue的Test Util，Angular的Test Bed，可以做个参照。\r\n但是我经常要在各种项目中来回地切换，所以很不喜欢测试方法跟框架产生较强的依赖，所以一般都是sinon+断言库+karma搞定。\r\n\r\n比如，我有一个按钮和一个图片列表，我点击这个按钮，列表隐藏，再次点击，列表出现。那么前端一般会有一个状态（假设叫visible），测试的时候，我就会先用sinon stub出一个component对象，再调用对象上按钮绑定的事件处理函数，再对visible做断言。如果不能用sinon stub出这个component对象，那就用它推荐的方式来stub，这一步不难，后边儿的都一样。\r\n\r\n再比如，这个列表为空时不渲染，也是通过控制这个列表状态的空/不空，再对visible变量做断言，总之就是，第一步stub组件对象，第二步控制变量，第三部做断言。这样一来是不是就和后端的纯逻辑测试很像了？","createdAt":1564120411667},{"id":14051,"originId":"588469915d4612c33919e940","articleId":2861,"userId":41,"content":"在 X 里运行：\r\n\r\n```shell\r\nnpm install ../C\r\n```","createdAt":1485072785061},{"id":14052,"originId":"58846b235d4612c33919e943","articleId":2861,"userId":516,"content":"本地导入\r\n```\r\nrequire('../xx/c');\r\n```","createdAt":1485073187047},{"id":14053,"originId":"58847490171f3bc843f60126","articleId":2861,"userId":1454,"content":"[@xcatliu](/user/xcatliu) 这个目录在开发机上面！","createdAt":1485075600491},{"id":14054,"originId":"588477691dc8ff8739cbc58e","articleId":2861,"userId":41,"content":"[@yuexing0921](/user/yuexing0921) 把 C 模块 rsync 到 X 项目的机器上，然后 `npm install ../C`","createdAt":1485076329079},{"id":14055,"originId":"588477c25d4612c33919e94c","articleId":2861,"userId":41,"content":"[@yuexing0921](/user/yuexing0921) 非要建立私人 npm 的话，可以部署这个： https://github.com/cnpm/cnpmjs.org","createdAt":1485076418477},{"id":14056,"originId":"5884785a1dc8ff8739cbc591","articleId":2861,"userId":146,"content":"直接目录安装就行了，和已发布没什么不同","createdAt":1485076570592},{"id":14057,"originId":"58847cfd171f3bc843f6012a","articleId":2861,"userId":1454,"content":"谢谢各位，方案都很好","createdAt":1485077757587},{"id":14058,"originId":"5886a4c2171f3bc843f6018c","articleId":2861,"userId":358,"content":"楼上的所有方案都不太好....\r\n\r\n官方推荐的方案是 `npm link`, 参见: https://docs.npmjs.com/cli/link\r\n```bash\r\n$ cd path/to/submodule\r\n$ npm link\r\n$ cd path/to/project\r\n$ npm link submodule_pkg_name\r\n```\r\n\r\n- `npm link` 的方式, 可以直接同步两边的修改, 实时.\r\n- `npm install ../path/to/module` 的方案, 每次你更新那边的代码, 都需要重新安装一次\r\n- 发布到 npm 或私有 npm 这个, 那就不叫未发布模块了.","createdAt":1485219010720},{"id":14059,"originId":"5886a7561dc8ff8739cbc605","articleId":2861,"userId":89,"content":"[@atian25](/user/atian25) 非global也可以这样安装么？涨知识","createdAt":1485219670860},{"id":14060,"originId":"5887002d1dc8ff8739cbc621","articleId":2861,"userId":358,"content":"[@i5ting](/user/i5ting) 嗯，这指令对写模块比较多的同学非常有帮助。\r\n\r\nhttps://github.com/atian25/blog/issues/17","createdAt":1485242413897},{"id":14061,"originId":"588709b8171f3bc843f601a5","articleId":2861,"userId":568,"content":"[@atian25](/user/atian25) 如果这样，npm设计不够好啊，npm link 这个命令居然肩负了两个作用","createdAt":1485244856637},{"id":14062,"originId":"588804fd1dc8ff8739cbc64c","articleId":2861,"userId":2705,"content":"npm link 啊 https://blog.risingstack.com/nodejs-at-scale-npm-best-practices/","createdAt":1485309181567},{"id":14063,"originId":"58b545e0e418a986315f39dd","articleId":2861,"userId":1454,"content":"谢谢各位了","createdAt":1488274912735},{"id":14064,"originId":"58b546a1ea21217a4486ce2a","articleId":2861,"userId":301,"content":"涨知识了，这招很受用\n\n\nsource [vue-cnode mobile 2.0](http://lzxb.name/vue-cnode/)","createdAt":1488275105938},{"id":14065,"originId":"5d39d4d79969a529571d73d3","articleId":2861,"userId":3901,"content":"[@atian25](/user/atian25) 好玩，省的每次修改去install了","createdAt":1564071127629},{"id":14066,"originId":"5d398e64b4725a628e268aea","articleId":2862,"userId":1193,"content":"查了一下：\r\npupeteer，是无头浏览器chrome-headless封装的一层；\r\nkarma是测试用的环境，用来运行单元测试的环境，比如在chrome下，也可以用pupeteer；\r\nnightwatch，是进行e2e集成测试的工具，基于selenium的nodejs版本；\r\nkarma和nightwatch都可以进行e2e测试，","createdAt":1564053092882},{"id":14067,"originId":"5d398fc2b4725a628e268af0","articleId":2862,"userId":1193,"content":"单元测试工具，如mocha，jest，\r\nmocha，单元测试框架，一般要配置 chai 进行单元测试，在 karma 下运行，再配合pupeteer做e2e测试；\r\njest是一个集成环境，一般用jest+pupeteer，做单元测试和e2e测试；","createdAt":1564053442253},{"id":14068,"originId":"5d390c75b4725a628e268891","articleId":2863,"userId":545,"content":"https://docs.nestjs.cn/6/awesome  没贴出配置文件 不知道。 \r\n案例你可以看看","createdAt":1564019829238},{"id":14069,"originId":"5d3914599969a529571d70c7","articleId":2863,"userId":3903,"content":"[@zuohuadong](/user/zuohuadong) {\r\n  \"compilerOptions\": {\r\n    \"module\": \"commonjs\",\r\n    \"declaration\": true,\r\n    \"removeComments\": true,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"target\": \"es6\",\r\n    \"sourceMap\": true,\r\n    \"outDir\": \"./dist\",\r\n    \"baseUrl\": \"./\",\r\n    \"incremental\": true\r\n  },\r\n  \"exclude\": [\"node_modules\"]\r\n}\r\n这是我的配置，大佬帮忙看下","createdAt":1564021849554},{"id":14070,"originId":"5d391c729969a529571d70ea","articleId":2863,"userId":886,"content":"是不是提交git或者npm的时候，ignore文件里面写的config，而不是/config。 \r\n如果没有加/的话，提交上去的代码/src/config也会忽略。 自然就找不到啦。","createdAt":1564023922766},{"id":14071,"originId":"5d3922b49969a529571d7115","articleId":2863,"userId":3903,"content":"[@shadow88sky](/user/shadow88sky) 不是的，是在引用模块的时候vs code提示的模块路径是src/*这样的绝对路径，但是运行后会报模块找不到，将路径改成相对路径之后就不报错了。不过我就是想问问有没有什么办法可以配置之后可以让node的文件加载可以找到vs code提示路径的模块。","createdAt":1564025524672},{"id":14072,"originId":"5d3954f3b4725a628e2689c5","articleId":2863,"userId":166,"content":"去 dist 看看 路径被编译成啥样了呀","createdAt":1564038387765},{"id":14073,"originId":"5d36b31fffed731686461c09","articleId":2864,"userId":545,"content":"看访问量了，如果量特别大的话，先缓存在 redis ，再定期同步到数据库。\r\n量小的话，就写入到数据库，自增。","createdAt":1563865887786},{"id":14074,"originId":"5d36b53d9969a529571d69af","articleId":2864,"userId":1373,"content":"[@zuohuadong](/user/zuohuadong) 如何防止重复，一个人一篇id只拥有一个阅读量？","createdAt":1563866429685},{"id":14075,"originId":"5d39012e9969a529571d7028","articleId":2864,"userId":545,"content":"[@WuYinMan](/user/WuYinMan)   简单点的就前端做判断~ \r\n不是前后端分离的话，根据cookies  加个判断","createdAt":1564016942503},{"id":14076,"originId":"5d3922e09969a529571d711d","articleId":2864,"userId":1373,"content":"[@zuohuadong](/user/zuohuadong) 要做分离，我的想法是存ip","createdAt":1564025568689},{"id":14077,"originId":"5d39046eb4725a628e26884f","articleId":2865,"userId":354,"content":"nodej 是什么？","createdAt":1564017774147},{"id":14078,"originId":"5d3908bbb4725a628e268878","articleId":2865,"userId":545,"content":"先把需求场景说清楚吧~","createdAt":1564018875173},{"id":14079,"originId":"5d348d8bb2b9222961dacc0d","articleId":2866,"userId":109,"content":"1. vsc 的 setting.json 配置 有个参数可以让 vsc 开始调试后自动停留在第一行。\r\n2. 同上文件配置参数可以设定调试跳过的目录或者文件 这样在 f10 单步就不会进入这些文件。\r\n3. 我这儿 egg 调试准备大概 十秒左右。 你可以参考我 github 中 egg-base 库中 .vscode 目录下的配置文件。\r\n4. 目前用基于 eggjs 的 midway 感觉更顺手。","createdAt":1563725195718},{"id":14080,"originId":"5d3503d0b2b9222961dacc4c","articleId":2866,"userId":1734,"content":"[@waitingsong](/user/waitingsong) 感谢回答。但。。。\r\n1.你说的我知道，我截图的文件是不知道从哪冒出来的，无法操作，不知道别人有没有碰到过。\r\n2.说的是多进程，我需要单进程。egg很早开始做单进程了，但还没有正式做好吧。\r\n3.我用的官方ts教程里的配置。\r\n4.开源项目维护不容易，但egg确实有的东西有些难定制，要去用上层的框架，心虚啊。\r\n\r\n昨天开始实验nest了，有惊喜，比如: 文档友好(日志那个看了几分钟就知道怎么写自己的logger了)，比想象中简约，参数验证方式和我之前自己捣鼓的一样，用了我喜欢的jest做测试，用typescript写起来很顺畅。","createdAt":1563755472281},{"id":14081,"originId":"5d350aad9969a529571d5f6d","articleId":2866,"userId":545,"content":"[@xiaozhongliu](/user/xiaozhongliu) https://docs.nestjs.cn/  中文文档，希望有帮助","createdAt":1563757229081},{"id":14082,"originId":"5d3532c89969a529571d6213","articleId":2866,"userId":1734,"content":"[@zuohuadong](/user/zuohuadong) 昨天下午开始读文档搭了一下架子, 有个问题请教一下:\r\n已经写好了自己的Logger, 请问在Interceptor里面怎么注入Logger依赖, 或者有文档可以直达最好:\r\nhttps://github.com/xiaozhongliu/nest-api-seed/blob/master/src/framework/logger.module.ts\r\n文档还没怎么读, 毕竟后面平时搬砖忙.","createdAt":1563767496514},{"id":14083,"originId":"5d3551c99969a529571d62db","articleId":2866,"userId":545,"content":"[@xiaozhongliu](/user/xiaozhongliu) https://github.com/notadd/next  我们以前的项目有参考","createdAt":1563775433557},{"id":14084,"originId":"5d355217b2b9222961dad011","articleId":2866,"userId":545,"content":"[@xiaozhongliu](/user/xiaozhongliu) https://github.com/nest-cloud/nestcloud/tree/master/packages/logger  新项目看这个","createdAt":1563775511305},{"id":14085,"originId":"5d35662fb2b9222961dad0bc","articleId":2866,"userId":358,"content":"> egg确实有的东西有些难定制，要去用上层的框架，心虚啊。\r\n\r\nEgg 的定位本来就是 `框架的框架`，你有自定义需求的时候，要不就 PR ，要不就写插件，要不就用现成的上层框架。\r\n\r\n单进程应该在 10 月左右吧，我们内部现在正在做 Serverless 化，等验证通过后就会放出来。其实现在就算是多进程，也没大关系吧，我们内部 docker 化的用 4 个 workers 也很久了，不会有什么资源浪费的问题。\r\n\r\n本地断点启动慢的问题，可以二分排查下，不一定是 egg 这一层慢，前面的 TS 转译，vscode 的 inspect 都有可能的，要具体分析才知道。","createdAt":1563780655765},{"id":14086,"originId":"5d35cb99ffed731686461953","articleId":2866,"userId":1734,"content":"[@zuohuadong](/user/zuohuadong) Logger不能被注入到GlobalInterceptor, Interceptor挂在Controller上就ok了.\r\nhttps://github.com/nestjs/nest/issues/1916","createdAt":1563806617998},{"id":14087,"originId":"5d35cd0affed731686461963","articleId":2866,"userId":1734,"content":"[@atian25](/user/atian25) 单进程这个可以这么想: 相同的服务能力, 一个pod内4个worker和4个单进程的pod对比, 应该是更多pod更优, 可以分摊到更多机器中去. 比如如果集群的机器在同城多区, 那么就很可能分散到更多的区.\r\n像本地调试, 直接起单进程更高效吧.\r\n\r\n断点调试: 刚开始断点会在那个奇怪的文件停两次, 这个貌似没办法...\r\n","createdAt":1563806986524},{"id":14088,"originId":"5d35d9cb9969a529571d66d3","articleId":2866,"userId":109,"content":"[@xiaozhongliu](/user/xiaozhongliu) 我倾向于一个pod 适量多个 worker。 pod 实例过多带来的不稳定因素也是增加的。","createdAt":1563810251316},{"id":14089,"originId":"5d3626079969a529571d66fd","articleId":2866,"userId":1734,"content":"[@waitingsong](/user/waitingsong) 不稳定因素比如？可以举一些egg多worker比k8s管理pod/container更靠谱的场景.\r\n容器内应用职责应该简单化，最理想的状态就是只关注业务逻辑，其他的东西交给基础设施，这也是云原生所追求的并且已经走了很远。\r\n我相信也是众多需要单进程的呼声促进了egg社区推出单进程。","createdAt":1563829767767},{"id":14090,"originId":"5d364efa9969a529571d6723","articleId":2866,"userId":358,"content":"[@xiaozhongliu](/user/xiaozhongliu) 断点那个，你可以去掉 inspect-brk","createdAt":1563840250845},{"id":14091,"originId":"5d364f5f9969a529571d6727","articleId":2866,"userId":358,"content":"云原生化和单进程我们是有在搞了，但要随着蚂蚁的云原生进程，快了。其实现在单进程已经支持了，只是周边的工具还没。","createdAt":1563840351190},{"id":14092,"originId":"5d365539ffed7316864619e3","articleId":2866,"userId":1734,"content":"[@atian25](/user/atian25) ok调试那个我试试，感谢。\r\n单进程只在issue里找到些蛛丝马迹，按里面的方法是能启动，但记得是请求接口没有反应。","createdAt":1563841849311},{"id":14093,"originId":"5d3657739969a529571d674a","articleId":2866,"userId":1734,"content":"[@atian25](/user/atian25) 从前天下午开始接触nest，利用下班时间，一边看文档一边已经把自己的logger和请求日志切面做出来了，真的是好用。\r\nhttps://github.com/xiaozhongliu/nest-api-seed/blob/master/src/_interceptor/logging.interceptor.ts\r\n\r\n没用过midway，不知道midway是否也能一样顺手？另外虽然egg是基础框架，但应该要一样方便定制，如果有这个目标应该是合理的吧。如果egg这方便好用的话我应该会继续去用midway。后面打算我们的devops系统用rest。业务项目还是继续egg，不然技术栈太多，开发哥哥要哭。","createdAt":1563842419516},{"id":14094,"originId":"5d365d98ffed731686461a24","articleId":2866,"userId":358,"content":"[@xiaozhongliu](/user/xiaozhongliu) 灵活扩展性本来就是 egg 的特性之一，个人认为 egg 的扩展性还是不错的，具体是什么方面的你可以提 issue 讨论。","createdAt":1563843992229},{"id":14095,"originId":"5d36b8d49969a529571d69d8","articleId":2866,"userId":109,"content":"[@xiaozhongliu](/user/xiaozhongliu) 这是我的 `.vscode/launch.json` 文件，你看看能用否\r\n\r\n```json\r\n{\r\n  // 使用 IntelliSense 了解相关属性。\r\n  // 悬停以查看现有属性的描述。\r\n  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\r\n  \"version\": \"0.2.0\",\r\n  \"configurations\": [\r\n      {\r\n      \"name\": \"Midway Debug\",\r\n      \"type\": \"node\",\r\n      \"autoAttachChildProcesses\": true,\r\n      \"console\": \"integratedTerminal\",\r\n      \"env\": {\r\n        \"NODE_ENV\": \"local\"\r\n      },\r\n      \"port\": 9229,\r\n      \"preLaunchTask\": \"TypeScript compile\",\r\n      \"protocol\": \"auto\",\r\n      \"request\": \"launch\",\r\n      \"restart\": true,\r\n      \"runtimeArgs\": [\r\n        \"run\",\r\n        \"debug\",\r\n        \"--\",\r\n        \"--inspect-brk\"\r\n      ],\r\n      \"runtimeExecutable\": \"npm\",\r\n      \"skipFiles\": [\r\n        // \"${workspaceFolder}/node_modules/**/*.js\",\r\n        \"${workspaceFolder}/node_modules/rxjs/**/*.js\",\r\n        \"<node_internals>/**/*.js\"\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"Chrome Debug with Karma\",\r\n      \"type\": \"chrome\",\r\n      \"address\": \"localhost\",\r\n      \"pathMapping\": {\r\n        \"/\": \"${workspaceRoot}/\",\r\n        \"/base/\": \"${workspaceRoot}/\"\r\n      },\r\n      \"port\": 9333,\r\n      \"request\": \"attach\"\r\n    },\r\n\t    {\r\n      \"name\": \"Egg Debug\",\r\n      \"type\": \"node\",\r\n      \"autoAttachChildProcesses\": true,\r\n      \"console\": \"integratedTerminal\",\r\n      \"env\": {\r\n        \"NODE_ENV\": \"local\"\r\n      },\r\n      \"port\": 9229,\r\n      \"preLaunchTask\": \"watch\",\r\n      \"protocol\": \"auto\",\r\n      \"request\": \"launch\",\r\n      \"restart\": true,\r\n      \"runtimeArgs\": [\r\n        \"run\",\r\n        \"debug\",\r\n        \"--\",\r\n        \"--inspect-brk\"\r\n      ],\r\n      \"runtimeExecutable\": \"npm\",\r\n      \"skipFiles\": [\r\n        // \"${workspaceFolder}/node_modules/**/*.js\",\r\n        \"${workspaceFolder}/node_modules/rxjs/**/*.js\",\r\n        \"<node_internals>/**/*.js\"\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"Mocha Tests\",\r\n      \"type\": \"node\",\r\n      \"args\": [\r\n        \"-u\",\r\n        \"tdd\",\r\n        \"--timeout\",\r\n        \"999999\",\r\n        \"--colors\",\r\n        \"${workspaceFolder}/test\"\r\n      ],\r\n      \"internalConsoleOptions\": \"openOnSessionStart\",\r\n      \"program\": \"${workspaceFolder}/node_modules/mocha/bin/_mocha\",\r\n      \"request\": \"launch\"\r\n    },\r\n\t\r\n    {\r\n      // Need stop (Shift+F5) manually after end of test for Midway\r\n      \"name\": \"Midway Mocha Tests\",\r\n      \"type\": \"node\",\r\n      \"args\": [\r\n        \"-u\",\r\n        \"bdd\",\r\n        \"--timeout\",\r\n        \"999999\",\r\n        \"--colors\",\r\n        \"--full-trace\",\r\n        \"--bail\",\r\n        \"-r\", \"ts-node/register\",\r\n        \"-r\", \"source-map-support/register\",\r\n        \"-r\", \"intelli-espower-loader\",\r\n        \"${workspaceFolder}/test/**/**.test.ts\"\r\n      ],\r\n      \"env\": {\r\n        \"NODE_ENV\": \"local\",\r\n        \"TS_NODE_PROJECT\": \"test/tsconfig.json\",\r\n        \"PGHOST\": \"\",\r\n        \"PGUSER\": \"\",\r\n        \"PGPASSWORD\": \"\",\r\n      },\r\n      \"internalConsoleOptions\": \"openOnSessionStart\",\r\n      \"program\": \"${workspaceFolder}/node_modules/mocha/bin/_mocha\",\r\n      \"request\": \"launch\",\r\n    }\r\n  ]\r\n}\r\n\r\n```","createdAt":1563867348766},{"id":14096,"originId":"5d36c0a4ffed731686461c7a","articleId":2866,"userId":358,"content":"[@waitingsong](/user/waitingsong) 为啥要 preLaunchTask？内置有 ts-node 开发期提速的。","createdAt":1563869348168},{"id":14097,"originId":"5d36c73dffed731686461cb2","articleId":2866,"userId":109,"content":"[@atian25](/user/atian25) 启动 tsc --watch 模式 。 当时eggjs不支持修改ts文件后自动更新功能。现在应该是有了吧。\r\n这个配置我用起来比较顺手，贴主可以试试看是配置的问题还是其它的。\r\n\r\n```json\r\n{\r\n  // 有关 tasks.json 格式的文档，请参见\r\n  // https://go.microsoft.com/fwlink/?LinkId=733558\r\n  \"version\": \"2.0.0\",\r\n  \"tasks\": [\r\n    {\r\n      \"label\": \"TypeScript compile\",\r\n      \"command\": \"tsc\",\r\n      \"args\": [\r\n        \"-p\",\r\n        \".\"\r\n      ],\r\n      \"problemMatcher\": [\r\n        \"$tsc\"\r\n      ],\r\n      \"type\": \"shell\"\r\n    },\r\n    {\r\n      \"label\": \"watch\",\r\n      \"command\": \"tsc\",\r\n      \"args\": [\r\n        \"-w\",\r\n        \"-p\",\r\n        \".\"\r\n      ],\r\n      \"isBackground\": true,\r\n      \"problemMatcher\": [\r\n        \"$tsc-watch\"\r\n      ],\r\n      \"type\": \"shell\"\r\n    },\r\n    {\r\n      // Ctrl+Shift+B\r\n      \"type\": \"npm\",\r\n      \"group\": {\r\n        \"kind\": \"build\",\r\n        \"isDefault\": true\r\n      },\r\n      \"presentation\": {\r\n        \"reveal\": \"silent\"\r\n      },\r\n      \"problemMatcher\": [\r\n        \"$eslint-stylish\",\r\n        \"$tsc\",\r\n        \"$tslint5\"\r\n      ],\r\n      \"script\": \"build\"\r\n    }\r\n  ]\r\n}\r\n```\r\n","createdAt":1563871037924},{"id":14098,"originId":"5d382add9969a529571d6eed","articleId":2866,"userId":3905,"content":"！","createdAt":1563962077997},{"id":14099,"originId":"5d37c15d9969a529571d6cb3","articleId":2867,"userId":867,"content":"const json=[{a:1,b:2},{a:2,b:1}…,{a:10001,b:1}];\r\nconst map={};\r\nfor(let i=0;i<json.length;i++){\r\n\tmap[json[i].a]=json[i];\r\n}\r\nconsole.log(map[\"10001\"]);\r\n\r\nfor循环比较耗时，但只要耗时一次。之后使用map对象。极速\r\n\r\n","createdAt":1563935069446},{"id":14100,"originId":"5d37c1799969a529571d6cb6","articleId":2867,"userId":867,"content":"console.log(map[“10001”].b);","createdAt":1563935097147},{"id":14101,"originId":"5d37d2ecb4725a628e2684f0","articleId":2867,"userId":97,"content":"```\r\nfor(var i = 0, len = a.length; i < len; i++)\r\n```\r\n老的最佳实践果然还没过时\r\n\r\n测试代码\r\n\r\n```\r\nvar a = new Array(1<<20)\r\n\r\nvar noop = function () {}\r\n\r\nvar f1 = function () {\r\n  for(var i = 0; i < a.length; i++) noop();\r\n}\r\n\r\nvar f2 = function () {\r\n  for(var i = 0, len = a.length; i < len; i++) noop();\r\n}\r\n\r\nfor(var i = 0; i < 1000; i++) {\r\n  f1();\r\n  f2();\r\n}\r\n\r\nconsole.time(\"f1\");\r\nf1();\r\nconsole.timeEnd(\"f1\");\r\n\r\nconsole.time(\"f2\");\r\nf2();\r\nconsole.timeEnd(\"f2\");\r\n```\r\n\r\n结果 \r\n\r\n```\r\nf1: 1.149ms\r\nf2: 0.952ms\r\n```\r\n\r\nnode -v\r\n\r\n```\r\nv11.5.0\r\n```","createdAt":1563939564418},{"id":14102,"originId":"5d37dac7b4725a628e268522","articleId":2867,"userId":166,"content":"除非只用一次，就用 `arr.find(item => item.a === 1)` , 再取 b 的值。\r\n否则通常可以转成一个 map 再查：\r\n```javascript\r\nconst aMap = _.keyBy(arr, 'a'); // {'1': {a: 1, b:2}, '2':{a:'2',b:2} }\r\nconst target = aMap['b'];\r\n```\r\n_.keyBy 可以用原生的 reduce 实现，很简单","createdAt":1563941575826},{"id":14103,"originId":"5d37ffc09969a529571d6de6","articleId":2867,"userId":109,"content":"如果是高频使用场景，还是用数据库来实现吧。","createdAt":1563951040664},{"id":14104,"originId":"5d3717d2b4725a628e268352","articleId":2868,"userId":98,"content":"技术太牛的：不行，这个人不能要，比我还厉害\r\n技术太菜的：不行，这个人不能要，招来给自己挖坑呢？\r\n要钱太多的：不行，这个人不能要，居然比我要的还多\r\n要钱太少的：不行，这个人不能要，要这么点钱技术肯定不行\r\n穿着打扮精致的： 不行，这个人不能要，一看就不是搞技术的\r\n\r\n面试其实就是一个给面试你的人信心的过程，他觉得你可以你就可以","createdAt":1563891666431},{"id":14105,"originId":"5d3722ce9969a529571d6bf0","articleId":2868,"userId":636,"content":"mark一下，我最近也在找工作。","createdAt":1563894478139},{"id":14106,"originId":"5d37b98ab4725a628e26841a","articleId":2868,"userId":152,"content":"我一般是直接问原理。。。 ","createdAt":1563933066923},{"id":14107,"originId":"5b63040f7271129a2f32a6f8","articleId":2869,"userId":3906,"content":"有没有什么关于初学者的一些demo，项目呀","createdAt":1533215759669},{"id":14108,"originId":"5b630d3d58db3ccf66a45171","articleId":2869,"userId":419,"content":"https://cnodejs.org/topic/581b0c4ebb9452c9052e7acb","createdAt":1533218109583},{"id":14109,"originId":"5b63aeec792f59ae501bf71a","articleId":2869,"userId":3906,"content":"[@yuu2lee4](/user/yuu2lee4) 嗯嗯，这个写的挺好的，感觉现在视频以及大多数经典案例中数据库都是MongoDB，我们学的mysql，哈哈","createdAt":1533259500786},{"id":14110,"originId":"5b63bace58db3ccf66a45181","articleId":2869,"userId":809,"content":"这有一系列的视频教程，希望能帮到你\r\n[http://www.sucaihuo.com/video/224-0-0](http://www.sucaihuo.com/video/224-0-0)","createdAt":1533262542991},{"id":14111,"originId":"5b63d14158db3ccf66a451aa","articleId":2869,"userId":3906,"content":"[@codeofking](/user/codeofking) 好的，谢谢，我去看看，准备写东西呀，哈哈\r\n","createdAt":1533268289134},{"id":14112,"originId":"5b644564b71aedfe4c12670a","articleId":2869,"userId":3907,"content":"记得我刚学nodejs的时候被各种express框架弄的晕头转向，所有推荐这本薄薄的《Node入门》，跟着书上的代码敲一遍，不用着急，争取理解完一个再开始下一个，链接找不到了，还要之前放到github上了，https://github.com/xuanyuan/nodebeginner ，还有要注重基础的学习，个人理解NodeJS再强大也还是JS，所有JS基础知识一定要掌握好，作用域，原型链等，good luck.","createdAt":1533298020634},{"id":14113,"originId":"5b644ba97271129a2f32a758","articleId":2869,"userId":3906,"content":"[@xuanyuan](/user/xuanyuan) 好的，感谢说了这么多，很受用，在这个阶段，就好像是给我指了个方向，现在就学习的过程中，也拾起来了之前的js,感谢！！！","createdAt":1533299625666},{"id":14114,"originId":"5b644c1d7271129a2f32a75a","articleId":2869,"userId":3906,"content":"[@xuanyuan](/user/xuanyuan) 兄弟，还有你发的git地址是无效的，能再发一次吗","createdAt":1533299741168},{"id":14115,"originId":"5b64803a58db3ccf66a451f2","articleId":2869,"userId":801,"content":"学编程光看书不行的，多code，多debug水平自然上去了。建议先掌握语言语法和web基本原理，然后找项目开干。比如自己从头撸一个论坛啊、电商网站啊啥的，里面的坑都踩过了，你就会更明白书上看到的概念具体是怎么回事儿，更多的是书上所没有的。\r\n\r\n来自✨ [Node.js开源项目精选](https://awehunt.com/?tnid=5af1c0b67b4fac67bf3af2b4)✨","createdAt":1533313082681},{"id":14116,"originId":"5b64f2a4b71aedfe4c126721","articleId":2869,"userId":3906,"content":"[@vendar](/user/vendar) 恩恩，肯定是要撸码的，了解了下express框架，然后就完善之前的博客系统\r\n","createdAt":1533342372639},{"id":14117,"originId":"5b650522b71aedfe4c12672a","articleId":2869,"userId":3907,"content":"[@remembergf](/user/remembergf) https://github.com/xuanyuan/node\\_beginner","createdAt":1533347106490},{"id":14118,"originId":"5b6eefb3792f59ae501bf8e2","articleId":2869,"userId":804,"content":"楼主比我厉害，至少还萌，我只是新","createdAt":1533996979787},{"id":14119,"originId":"5b783e50c52ad1482eb94040","articleId":2869,"userId":790,"content":"工作多，自学的时间不多，我还只懂些皮毛","createdAt":1534606928984},{"id":14120,"originId":"5b80bba5632c7f422e5b812e","articleId":2869,"userId":804,"content":"原来看过的帖子啊","createdAt":1535163301453},{"id":14121,"originId":"5b84a7fd2a585e4e2f26ff4b","articleId":2869,"userId":1679,"content":"自学中，看了些文档和源码，撸了两个小demo，业务逻辑层的代码还是不太会","createdAt":1535420413860},{"id":14122,"originId":"5b8b54082a585e4e2f2700b5","articleId":2869,"userId":2013,"content":"mark","createdAt":1535857672304},{"id":14123,"originId":"5b94891cbf116a8c0e425939","articleId":2869,"userId":804,"content":"周末加班，苦逼啊","createdAt":1536461084955},{"id":14124,"originId":"5b948addf1e8bc7579c7837a","articleId":2869,"userId":1761,"content":"\n      赞\n      来自✨[react-cnode](https://github.com/MMGong/react-cnode)✨\n    ","createdAt":1536461533087},{"id":14125,"originId":"5b9d0f63a5ed9d2159fa31d9","articleId":2869,"userId":805,"content":"[@codeofking](/user/codeofking) 这教程不错","createdAt":1537019747231},{"id":14126,"originId":"5ba0af149545eaf107b9c426","articleId":2869,"userId":501,"content":"推荐 [nodejs基础教程](https://www.geekjc.com/ebook/detail/5b9f65ce0f510f6ae689bccd)","createdAt":1537257236494},{"id":14127,"originId":"5baa02559545eaf107b9c5e8","articleId":2869,"userId":3436,"content":"没报班的话，就看视频教程学吧","createdAt":1537868373081},{"id":14128,"originId":"5bb9700b37a6965f59051f5d","articleId":2869,"userId":3436,"content":"只新不萌的我，看教程学起来好艰难，应该有老师带会好点","createdAt":1538879499378},{"id":14129,"originId":"5bc1fdaa15e4fd1923f48ead","articleId":2869,"userId":790,"content":"谁来给我条明路","createdAt":1539440042979},{"id":14130,"originId":"5bc952fd37a6965f590523ad","articleId":2869,"userId":2013,"content":"mark","createdAt":1539920637545},{"id":14131,"originId":"5bc9c98b9545eaf107b9ccd6","articleId":2869,"userId":642,"content":"good","createdAt":1539950987453},{"id":14132,"originId":"5bd708898ca34e0b0470420f","articleId":2869,"userId":805,"content":"楼主说说自己的学习进展，我迷茫啊","createdAt":1540819081628},{"id":14133,"originId":"5be2e8d6646a05745b7b981e","articleId":2869,"userId":798,"content":"技术不断升级，何时是个头","createdAt":1541597398544},{"id":14134,"originId":"5be2eba0646a05745b7b982f","articleId":2869,"userId":792,"content":"⛽️⛽️","createdAt":1541598112420},{"id":14135,"originId":"5be431da21d75b74609f5840","articleId":2869,"userId":2,"content":"赞，所有爱学习的人","createdAt":1541681626809},{"id":14136,"originId":"5bf55fa0e6481c5709f5dfbd","articleId":2869,"userId":809,"content":"[@dingyuanwu](/user/dingyuanwu) 同赞","createdAt":1542807456092},{"id":14137,"originId":"5c0878dc15a4d545e3f4ba76","articleId":2869,"userId":805,"content":"mark一下","createdAt":1544059100875},{"id":14138,"originId":"5c1b3c0176c4964062a1bc34","articleId":2869,"userId":790,"content":"学习中","createdAt":1545288705468},{"id":14139,"originId":"5c33fc135bf06c5e7e3f25c2","articleId":2869,"userId":1661,"content":"对，需要关于初学者的一些demo，项目","createdAt":1546910739909},{"id":14140,"originId":"5c3448bc5bf06c5e7e3f299b","articleId":2869,"userId":1668,"content":"之前刚入门的时候学一头雾水，工作项目中也没有用到，忘完了。现在重新开始学了 感觉还好 ","createdAt":1546930364413},{"id":14141,"originId":"5c3458ee5bf06c5e7e3f2a9e","articleId":2869,"userId":446,"content":"官方文档，express源码、koa源码。\r\n\r\n运行原理方面的官方文档介绍挺详细了，express和koa源码没多少行，也很容易看懂。\r\n\r\n当然如果英语不行看啥都很难深入。","createdAt":1546934510097},{"id":14142,"originId":"5c4d229cf9075c1ef7138776","articleId":2869,"userId":828,"content":"666","createdAt":1548559004954},{"id":14143,"originId":"5c7bdd1490c14711cc8c9c48","articleId":2869,"userId":805,"content":"老铁学业有成吗?","createdAt":1551621396109},{"id":14144,"originId":"5c9e31d999e62a362ff41530","articleId":2869,"userId":790,"content":"学得怎么样啊","createdAt":1553871321336},{"id":14145,"originId":"5ca1656199e62a362ff41b67","articleId":2869,"userId":726,"content":"老铁，8个月了学的咋样啦？","createdAt":1554081121108},{"id":14146,"originId":"5cbc590b37faec0ce1d04345","articleId":2869,"userId":804,"content":"估计楼主进BAT了，没空回来看看","createdAt":1555847435936},{"id":14147,"originId":"5cbe7406a86ae80ce64b22b5","articleId":2869,"userId":516,"content":"`bat` 都要加油哦","createdAt":1555985414990},{"id":14148,"originId":"5ce55c6c52ccb64168ba6761","articleId":2869,"userId":798,"content":"对呀，老铁，8个月了学的咋样啦？","createdAt":1558535276337},{"id":14149,"originId":"5d0900161fe902120f320618","articleId":2869,"userId":1661,"content":"估计楼主已进BAT，加班没空逛社区了","createdAt":1560870934133},{"id":14150,"originId":"5d0a012595fcc914aa26a937","articleId":2869,"userId":1540,"content":"只新不萌的路过...","createdAt":1560936741976},{"id":14151,"originId":"5d3725c09969a529571d6bfb","articleId":2869,"userId":790,"content":"mark","createdAt":1563895232757},{"id":14152,"originId":"5d37b7389969a529571d6c5f","articleId":2869,"userId":1373,"content":"![image.png](//static.cnodejs.org/FjSHNrzvAG2F18dxIdziRRAA-4-m)\r\n\r\n这个网站底部文章推荐有对应实战教程分享，同时网站栏目“程序员专辑”一栏，也有入门教程进行推荐。希望对你有所帮助！\r\n[程序员导航 - 国内最专业的程序员导航！](https://geekdocs.cn)","createdAt":1563932472856},{"id":14153,"originId":"5d36a8d69969a529571d6927","articleId":2870,"userId":3908,"content":"还有一个JQuery","createdAt":1563863254189},{"id":14154,"originId":"5d36ae329969a529571d694f","articleId":2870,"userId":97,"content":"我觉得 layui 可以跳过","createdAt":1563864626332},{"id":14155,"originId":"5d36b2129969a529571d6986","articleId":2870,"userId":545,"content":"layui 直接跳过吧。\r\n\r\n考虑以后就 angular 上手，如果 考虑最近找工作，就 vue 上手，三个框架都学的话 吃不消。\r\n\r\n学完 angular ， 后端的 nest.js 框架也就会了。\r\n\r\n学学 graphql 接口， typeorm 操作数据库。","createdAt":1563865618738},{"id":14156,"originId":"5d36b5809969a529571d69b7","articleId":2870,"userId":1373,"content":"先学前端3剑客：html、css、javascript。其他前期都无需考虑。","createdAt":1563866496084},{"id":14157,"originId":"5d36dacf9969a529571d6acb","articleId":2870,"userId":3909,"content":"1， UI框架不要学，用到的时候CV就行\r\n2，学node之前建议翻两遍图解http\r\n3， js才是硬核，框架选一个学就行，建议vue，上手快点\r\n4，多看mdn吧\r\n","createdAt":1563876047986},{"id":14158,"originId":"5d36b2e6ffed731686461c03","articleId":2871,"userId":545,"content":" 等官方文档更新吧，也可以去提issues 。\r\n 或者 ： https://docs.nestjs.cn/    `npm run start:debug` 即可","createdAt":1563865830939},{"id":14159,"originId":"5d3662be9969a529571d677d","articleId":2872,"userId":3132,"content":"我司用的就是nuxt，通过pm2自动重启。如果不需要缓存，内存消耗是比较小的，top查看大约100M。 我们暂时没有高负载，所以CPU表现不太明确。\r\n加缓存可以在nuxt使用nuxt-ssr-cache，或者用express起服务加中间件，或者使用其他的缓存服务","createdAt":1563845310751},{"id":14160,"originId":"5d36a0849969a529571d68d1","articleId":2872,"userId":3910,"content":"[@noe132](/user/noe132) 好的，谢啦～","createdAt":1563861124089},{"id":14161,"originId":"5d35837cb2b9222961dad1e3","articleId":2873,"userId":1373,"content":"你代码都不贴出来，大家怎么给你解决？","createdAt":1563788156651},{"id":14162,"originId":"5d3677e0ffed731686461ad0","articleId":2873,"userId":3380,"content":"不好意思，我以为会有人直接看见就能知道这是咋了，代码贴出来了","createdAt":1563850720706},{"id":14163,"originId":"5d3519099969a529571d602a","articleId":2874,"userId":3908,"content":"教学视频也行，求推荐！","createdAt":1563760905230},{"id":14164,"originId":"5d351a9ab2b9222961dacda0","articleId":2874,"userId":1373,"content":"![微信截图_20190722100744.png](//static.cnodejs.org/FnMq3aJyqQRYWqWsBeZt6h-KUspR)\r\n\r\n[极客文档](https://geekdocs.cn/)","createdAt":1563761306402},{"id":14165,"originId":"5d36542fffed7316864619d8","articleId":2874,"userId":79,"content":"现在这个社区本身是开源的：[cnode](https://github.com/cnodejs/nodeclub)\r\n![image.png](//static.cnodejs.org/FkbRNcGDri1p586BPJ4iuN0D9e_b)\r\n\r\n这个社区也有其他版本开源的：https://github.com/cnodejs\r\n![image.png](//static.cnodejs.org/Fj2GzROq-_wHet3wxzc-bR6KojVW)","createdAt":1563841583824},{"id":14166,"originId":"5d3550fc9969a529571d62d6","articleId":2876,"userId":545,"content":"检查下编码","createdAt":1563775228907},{"id":14167,"originId":"5d3554fab2b9222961dad02a","articleId":2876,"userId":109,"content":"buffer 末尾的多个 \\0  么","createdAt":1563776250984},{"id":14168,"originId":"5d355ffc9969a529571d6365","articleId":2876,"userId":97,"content":"有可能和 [@waitingsong](/user/waitingsong)  提示的一样，建议装个 https://marketplace.visualstudio.com/items?itemName=slevesque.vscode-hexdump 看看","createdAt":1563779068514},{"id":14169,"originId":"5d357293b2b9222961dad121","articleId":2876,"userId":3912,"content":"[@waitingsong](/user/waitingsong) 解决了 但我还要去查下 iconv的issue里面有没有我遇到的问题","createdAt":1563783827993},{"id":14170,"originId":"5d35729bb2b9222961dad125","articleId":2876,"userId":3912,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 解决了 但我还要去查下 iconv的issue里面有没有我遇到的问题","createdAt":1563783835175},{"id":14171,"originId":"5d3572a1b2b9222961dad129","articleId":2876,"userId":3912,"content":"[@zuohuadong](/user/zuohuadong) 解决了 但我还要去查下 iconv的issue里面有没有我遇到的问题","createdAt":1563783841095},{"id":14172,"originId":"5d348ab7b2b9222961dacc07","articleId":2877,"userId":109,"content":"你不出国护照也没啥用的。","createdAt":1563724471490},{"id":14173,"originId":"5d352527b2b9222961dace6a","articleId":2877,"userId":358,"content":"如果你老板今天给你提了一个需求，我们需要支持：微信登陆 + GitHub 登陆 + 微博登陆。","createdAt":1563764007228},{"id":14174,"originId":"5d3564f69969a529571d6399","articleId":2877,"userId":3222,"content":"[@waitingsong](/user/waitingsong) 哥 你这说了等于没说呀 能不能说点实际的啊 passport的作用主要是什么？","createdAt":1563780342867},{"id":14175,"originId":"5d35655ab2b9222961dad0ad","articleId":2877,"userId":358,"content":"passport 是第三方登陆的统一规范啊","createdAt":1563780442897},{"id":14176,"originId":"5d35656e9969a529571d63a1","articleId":2877,"userId":3222,"content":"[@atian25](/user/atian25) 大佬 这些第三方登录不是都有第三方的api支持的吗 按我理解 就是调用第三方登录的api进行操作就好了呀 那么使用passport的话 其主作用是什么呀？","createdAt":1563780462003},{"id":14177,"originId":"5d3566b9b2b9222961dad0c5","articleId":2877,"userId":3222,"content":"[@atian25](/user/atian25) 感觉很抽象  具体作用一脸懵逼。。。。。","createdAt":1563780793961},{"id":14178,"originId":"5d356775b2b9222961dad0d3","articleId":2877,"userId":358,"content":"[@734776328](/user/734776328) \r\n\r\n但每个第三方登陆的 API 不一致啊，oauth2 的 callback 地址，AK 的 key 名，返回的 nickname/icon 等字段名字都是不一致的。\r\n\r\npassport 约定了一套规范，然后它的插件去按这套规范去封装第三方的 API，从而在应用层使用的体验是一致的。","createdAt":1563780981648},{"id":14179,"originId":"5d3555649969a529571d62f9","articleId":2878,"userId":545,"content":"neditor  不过源码不好看","createdAt":1563776356660},{"id":14180,"originId":"5d355f739969a529571d635e","articleId":2878,"userId":97,"content":"请笑纳 https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Editable_content","createdAt":1563778931571},{"id":14181,"originId":"5d3565d5b2b9222961dad0b5","articleId":2878,"userId":145,"content":"如果只是想了解一下大概怎么写的, 可以看一下这个 [Pell](https://github.com/jaredreich/pell) ,关键是简单...不到200行,好多富文本编辑器源码都太大了,不容易看","createdAt":1563780565726},{"id":14182,"originId":"5d2d485551637b492bb0f175","articleId":2879,"userId":314,"content":"既然是重构，当然用最新的来啦","createdAt":1563248725152},{"id":14183,"originId":"5d2d620a51637b492bb0f1cf","articleId":2879,"userId":3913,"content":"3，引入ts更好","createdAt":1563255306188},{"id":14184,"originId":"5d309473b2b9222961dac029","articleId":2879,"userId":2342,"content":"vue-cli2都不维护了","createdAt":1563464819554},{"id":14185,"originId":"5d3528409969a529571d6157","articleId":2879,"userId":3892,"content":"新的","createdAt":1563764800065},{"id":14186,"originId":"5d352f56b2b9222961dacf1b","articleId":2879,"userId":545,"content":"首先，用新的。 其次 vue-cli3 并不是 vue3 ","createdAt":1563766614022},{"id":14187,"originId":"5d31efc7b2b9222961dac669","articleId":2880,"userId":109,"content":"为啥不同样pg呢？\r\n我不喜欢orm，准备用 sql builder 的knex ","createdAt":1563553735462},{"id":14188,"originId":"5d326f65b2b9222961dac6f7","articleId":2880,"userId":545,"content":"[@waitingsong](/user/waitingsong) typeorm 很好用~","createdAt":1563586405731},{"id":14189,"originId":"5d32961b9969a529571d5b2a","articleId":2880,"userId":109,"content":"[@zuohuadong](/user/zuohuadong) 我觉得和 nest 一样的复杂。。 还是先试试 knex 吧。","createdAt":1563596315601},{"id":14190,"originId":"5d32b11bb2b9222961dac813","articleId":2880,"userId":545,"content":"[@waitingsong](/user/waitingsong)  nest 用习惯了就觉得非常好用了~ 尤其是项目大一些的时候","createdAt":1563603227133},{"id":14191,"originId":"5d32bd129969a529571d5bb4","articleId":2880,"userId":109,"content":"[@zuohuadong](/user/zuohuadong) 小公司，我一人要负责框架选型，制作各端的开发框架模板以及相关的轮子，k8s/istio 基础设施的部署，开发流程规范的制订。实在没精力去折腾两三天都还没搞懂的技术。思路是尽量可控，降低技术风险， 先把整个流跑起来再说，功能不足以后再增加或者换框架。\r\n这也是为公司核心（单体）项目接下来的大升级做技术预(cai)演(keng)。","createdAt":1563606290512},{"id":14192,"originId":"5d32d11e9969a529571d5c5a","articleId":2880,"userId":1538,"content":"[@waitingsong](/user/waitingsong) 单元测试用了sqlite3的内存数据库,如果是pg的话,那是不是要单独准备一个数据库做测试才行,knex同样也是支持ORM的吧strapi就是knex","createdAt":1563611422436},{"id":14193,"originId":"5d32ea42b2b9222961dac946","articleId":2880,"userId":109,"content":"[@a119347](/user/a119347) 可以考虑用docker做个单测基础pg镜像，然后用这个镜像跑测试。","createdAt":1563617858470},{"id":14194,"originId":"5d32ea69b2b9222961dac94d","articleId":2880,"userId":109,"content":"[@a119347](/user/a119347) knex 算 Sql builder.","createdAt":1563617897161},{"id":14195,"originId":"5d34587f9969a529571d5e82","articleId":2880,"userId":113,"content":"全栈框架CabloyJS的单元测试机制供参考：\r\nCabloyJS后台基于EggJS，统一采用MySQL数据库\r\nEggJS提供了三个运行环境：`测试环境`、`开发环境`、`生产环境`。CabloyJS在EggJS的基础上，对这三个运行环境赋予了进一步的意义：\r\n1、测试环境：当运行`npm run test:backend`时，CabloyJS就会自动删除旧的测试数据库，建立新的数据库。从而便于总是从零状态开始单元测试\r\n2、开发环境：当运行`npm run dev:backend`时，CabloyJS会自动寻找最新创建的测试数据库，然后一直使用它。当然，如果在开发过程中，发现数据库架构变了，可以再执行一遍`npm run test:backend`，就自动重建了全新的测试数据库，不必打开workbench之类的管理软件手工修改数据库架构\r\n3、生产环境：当运行`npm run start:backend`时，CabloyJS就会使用全新的生产数据库，正式使用\r\n","createdAt":1563711615842},{"id":14196,"originId":"5d33cbbf9969a529571d5d7a","articleId":2881,"userId":3891,"content":"我自己解决了 利用jq 获取innerText","createdAt":1563675583962},{"id":14197,"originId":"5d32dd12b2b9222961dac904","articleId":2883,"userId":97,"content":"因为 console.log 执行到的时候，写在回调里面的 `arr.push` 还没执行到","createdAt":1563614482127},{"id":14198,"originId":"5d32e155b2b9222961dac91a","articleId":2883,"userId":3917,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 有什么方法可以在外部拿到 arr.push 的数据吗？","createdAt":1563615573194},{"id":14199,"originId":"5d32e900b2b9222961dac939","articleId":2883,"userId":97,"content":"```js\r\nfunction readFilesStat(files, cb) {\r\n  const arr = [];\r\n  const x_done = () => files.length === arr.length && cb(arr.filter(s => s !== null));\r\n  files.forEach(file => {\r\n    fs.stat('some-prefix' + file, (err, stat) => {\r\n      if(err) arr.push(null);\r\n      else arr.push({/* custom stat obj */});\r\n      x_done();\r\n    });\r\n  });\r\n}\r\n```","createdAt":1563617536598},{"id":14200,"originId":"5d32ea309969a529571d5cc3","articleId":2883,"userId":3917,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 谢谢谢谢","createdAt":1563617840044},{"id":14201,"originId":"5d2fcd2ab2b9222961dabba8","articleId":2885,"userId":161,"content":"第一种是让后台服务端提供需要的数据，或者自己写node请求他的接口然后检索返回给前端，服务端肯定比客户端要快些。\r\n第二种可以使用lodsh这个模块，针对json有很多方法，总有种适合你","createdAt":1563413802977},{"id":14202,"originId":"5d2fd263b2b9222961dabbc8","articleId":2885,"userId":3919,"content":"[@tzbcf](/user/tzbcf) 感谢回复。\r\n1、后端基于express搭建，尝试过这种方式，发现速度上，没有明显的提升；\r\n2、试过lodsh的filter，速度上跟es的filter不相上下；\r\n----\r\n贴个我写的豆腐渣（编辑器支持markdown吗？）：\r\n```javascript\r\nlet dictionary = [{ name: \"zhangsan\", tel: \"8888\", company: \"balabala\", ... }, { name: \"lisi\", tel: \"8888\", company: \"balabala\", ... }, { name: \"wangwu\", tel: \"8888\", company: \"balabala\", ... }];\r\n\r\nfunction search(searchTerm) {\r\n  return dictionary.filter(t => { return t.name.includes(searchTerm); });\r\n}\r\n```","createdAt":1563415139907},{"id":14203,"originId":"5d2fd597b2b9222961dabbe3","articleId":2885,"userId":867,"content":"几千到一万的通讯录数据,这应该是一份固定的数据。既然是固定的。我觉得两个方法\r\n1.如果只用某个关键词来检索，将数组变成object，用你的关键词做key如{\"手机号码\":{xxxx}},这样利用js本身的特性。速度飞快。\r\n2.如果有多个关键词，则做简单的索引。同样利用object特性。{“手机号码”:[1,2,3],\"姓名\":[3,4,5]},1,2,3  3,4,5为对象在数组中的位置。\r\n\r\n实在复杂，你就做索引，然后排序，然后用双叉树来检索","createdAt":1563415959868},{"id":14204,"originId":"5d2fd8fab2b9222961dabc00","articleId":2885,"userId":3919,"content":"[@pzzcn](/user/pzzcn) \r\n先赞美大佬的回答。:)\r\n是的，数据是固定的。\r\n您的建议听起来比我的方法好多了。\r\n没有这方面的经验，问两个不成熟的问题：\r\n1、每次的搜索词都要做一次索引吗？\r\n2、索引需要存储吗？是否每次搜索都要重新做索引，然后根据索引取出对应的对象？","createdAt":1563416826853},{"id":14205,"originId":"5d2fe555b2b9222961dabc7a","articleId":2885,"userId":867,"content":"数据固定的，将数组先做好索引，存储起来。下次直接使用索引来查找数据\r\n","createdAt":1563419989918},{"id":14206,"originId":"5d2ff24f9969a529571d5099","articleId":2885,"userId":3919,"content":"[@pzzcn](/user/pzzcn) \r\n再次感谢。。\r\n类似索引的实现有demo参考吗？不胜感激","createdAt":1563423311212},{"id":14207,"originId":"5d301a689969a529571d51a4","articleId":2885,"userId":867,"content":"[@orangeChu](/user/orangeChu) 这个没有哦","createdAt":1563433576625},{"id":14208,"originId":"5d3038dbb2b9222961dabe45","articleId":2885,"userId":3919,"content":"[@pzzcn](/user/pzzcn) \r\n好的！\r\n根据您提供的思路，我大概写了一版。\r\n根据查询的字段长度，进行拆分，最大值为12，构建12个对象，类似{0:{\"a\":[0,1],\"b\":[0,1]...}}\r\n通过搜索的关键字的长度和关键字，得到对象下标数组，最后得到值。类似`indexes[关键字长度][关键字]`得到对象下标数组，最后循环下标数组，得到结果。\r\n但是这样处理后，运行的结果对比（数据量在2500左右），比for循环、filter过滤来得慢？\r\n![TIM截图20190718171114.png](//static.cnodejs.org/FnR4KnhwXxAzp9kZ1RQqgpT8Re8-)\r\n\r\n贴一下方法的最后运行代码，前面处理索引的没啥好看的，处理索引的时间不在结果比较中：\r\n```javascript\r\nvar index_nr = text.length - 1;\r\nvar ids = this.indexes[index_nr][text];\r\nvar result = [];\r\nfor (var i = 0, len = ids.length; i < len; i++) {\r\n    result.push(this.data[ids[i]]);\r\n}\r\nreturn result;\r\n```\r\n![TIM截图20190718171557.png](//static.cnodejs.org/FogocZ4zX2czmGSKORrYa_cKa-LK)","createdAt":1563441371510},{"id":14209,"originId":"5d30620ab2b9222961dabf74","articleId":2885,"userId":97,"content":"[@orangeChu](/user/orangeChu) 这样对比不合适的，因为没有考虑引擎的 JIT 功能。如果没有 JIT 的话，filter 处理的时候因为需要调用回调，肯定有 JMP，而 forloop 的实现，可以看成是 inline 版的 filter，这已经会导致 forloop 比 filter 快一点了。所以要对比实际执行情况的话，最好是先将函数热身，然后再对比执行结果。\r\n\r\n\r\n```\r\nfunction impl_filter(kw) {\r\n  const res = // do filter relative process\r\n  return res;\r\n}\r\n\r\nfunction impl_forloop(kw) {\r\n  const res = // do for-loop relative process\r\n  return res;\r\n}\r\n\r\n// warms JIT\r\nfor(let i = 0; i < 1000; i++) {\r\n  impl_filter('some_kw');\r\n  impl_forloop('some_kw');\r\n}\r\n\r\nconsole.time('filter');\r\nimpl_filter('some_kw');\r\nconsole.timeEnd('filter');\r\n\r\nconsole.time('forloop');\r\nimpl_forloop('some_kw');\r\nconsole.timeEnd('forloop');\r\n```\r\n","createdAt":1563451914651},{"id":14210,"originId":"5d30ff7bb2b9222961dac0a1","articleId":2885,"userId":3919,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) \r\n收到！（不好意思，昨晚蹦迪去了，没注意看到您的回复。\r\n按照您的建议，函数执行前进行热身，以下是测试结果（编写的方法居然更快了！）：\r\n![Snipaste_2019-07-19_07-22-38.png](//static.cnodejs.org/FhDoCTJmVX73cO1J2SdPVj65ciNE)","createdAt":1563492219336},{"id":14211,"originId":"5d311c5db2b9222961dac147","articleId":2885,"userId":3919,"content":"[@iceyang](/user/iceyang)\r\n---\r\n感谢您的回复。\r\n主体是通过`electron`来做加载的，主进程中已经将数据从数据库加载出来了，使用`buffer`存储。渲染进程获取该数据后，放在变量中进行操作，操作的同时缓存一份数据到`localforage`中，之后获取`localforage`中的缓存数据，不再重复获取主进程中的数据源。\r\n---\r\n为啥我是一次性加载所有数据，而不是需要时再查询？\r\n我是这么考虑的：暂时使用`nedb`来做数据的存储。使用时再去查询数据，文件的`io`流，要消耗不少时间，所以我的做法是一次性加载所有数据，并且这些数据不需要实时更新，这样做我认为会有比较好的体验。\r\n如果大伙有比较好的建议，我会认真考虑一下。先谢过~","createdAt":1563499613986},{"id":14212,"originId":"5d311f1ab2b9222961dac179","articleId":2885,"userId":3919,"content":"为啥cnode的编辑器，加了`---`后，会自动粗体上面的文字，我该怎么编辑才能取消粗体呢？","createdAt":1563500314595},{"id":14213,"originId":"5d3134d19969a529571d5645","articleId":2885,"userId":3896,"content":"[@orangeChu](/user/orangeChu) \r\nmarkdown 中的 --- 是会将上面的文字变成把标题的。\r\n\r\n不好意思前面的回复被我不小心删了。所以就变成你在回复空气了:-D\r\n\r\n是这样的，对于筛选这件事，我认为用js做不太合适，既然你的数据源是数据库，那么是可以通过数据库索引最大速度来做这个筛选动作的。\r\n\r\n另外是这么多条数据你是在一页就展示了全部吗。","createdAt":1563505873850},{"id":14214,"originId":"5d31449fb2b9222961dac306","articleId":2885,"userId":3919,"content":"[@iceyang](/user/iceyang) \r\n感谢回复。\r\n1. 试过`nedb`的索引以及查询，发现效果不怎么理想，所以才改为这种方案来实现。\r\n2. 数据不是一页就全部展示，这些数据用于检索，应用场景类似手机上的通讯录搜索栏，只展示检索后的结果。","createdAt":1563509919671},{"id":14215,"originId":"5d3146e59969a529571d56ca","articleId":2885,"userId":109,"content":"搜索需求是关系型数据库的基本功能。","createdAt":1563510501356},{"id":14216,"originId":"5d3153bb9969a529571d56ee","articleId":2885,"userId":3919,"content":"[@waitingsong](/user/waitingsong) \r\n感谢回复。\r\n之前试过使用主进程来做搜索，然后返回，发现效果一般，也许我该让渲染进程直接查询。","createdAt":1563513787110},{"id":14217,"originId":"5d3166e19969a529571d5777","articleId":2885,"userId":109,"content":"[@orangeChu](/user/orangeChu) 少量数据的特定字段的检索这个可以在前端实现，这个叫做缓存。\r\n这么多数据并且检索多个字段，你是想自己实现一个精简版数据库么？","createdAt":1563518689495},{"id":14218,"originId":"5d316bcb9969a529571d5798","articleId":2885,"userId":3919,"content":"[@waitingsong](/user/waitingsong) \r\n哈哈，您说的是对的。\r\n前端的做法就是把数据都`load`出来，然后检索。\r\ndammit，我一个写后端的好像被传染了。\r\n马上改正。","createdAt":1563519947942},{"id":14219,"originId":"5d3080c5b2b9222961dabfe7","articleId":2886,"userId":358,"content":"你看下里面有啥咯。。。一个是启动日志，你是又用了 PM2 么？感觉是启动挂了，然后死循环启动。","createdAt":1563459781404},{"id":14220,"originId":"5d311aaab2b9222961dac137","articleId":2886,"userId":158,"content":"12G的错误日志。。。","createdAt":1563499178243},{"id":14221,"originId":"5d31294ab2b9222961dac1ee","articleId":2886,"userId":3692,"content":"[@atian25](/user/atian25) 安装有PM2，![image.png](//static.cnodejs.org/FuwgH02aCuQ7uBc1WfvzfSzApZip)，这是因为冲突嘛？","createdAt":1563502922398},{"id":14222,"originId":"5d31411cb2b9222961dac2f5","articleId":2886,"userId":358,"content":"检查错误日志咯，看看为啥进程一直挂掉啊","createdAt":1563509020901},{"id":14223,"originId":"5d3154f2b2b9222961dac347","articleId":2886,"userId":3920,"content":"为啥你有这么多错误日志，不应该先检查一下这些错误日志出现的原因吗？","createdAt":1563514098792},{"id":14224,"originId":"5d2d47c7c5fe2549619aebec","articleId":2887,"userId":109,"content":"自助者天助之","createdAt":1563248583988},{"id":14225,"originId":"5d2d5dacc5fe2549619aec2e","articleId":2887,"userId":726,"content":"只有自身强大了，别人才愿意援助你，（来自新三国）","createdAt":1563254188679},{"id":14226,"originId":"5d2eebd0b2b9222961dab8b1","articleId":2887,"userId":3167,"content":"把旧项目或旧项目的某个模块，用nodejs重构一次","createdAt":1563356112890},{"id":14227,"originId":"5d2f04379969a529571d4cfa","articleId":2887,"userId":883,"content":"有什么好的开源idea？一起做呀","createdAt":1563362359372},{"id":14228,"originId":"5d313dd89969a529571d569c","articleId":2887,"userId":156,"content":"也想练练node 举个爪 加我一个~ ","createdAt":1563508184085},{"id":14229,"originId":"5d2fde9db2b9222961dabc49","articleId":2888,"userId":1574,"content":"是不是 让把代码上传到 GitHub ，然后把 git 地址给他？","createdAt":1563418269383},{"id":14230,"originId":"5d3004709969a529571d50d1","articleId":2888,"userId":11,"content":"这是让你提个能复现你的问题的最小代码到仓库里，方便排查问题吧","createdAt":1563427952229},{"id":14231,"originId":"5d300486b2b9222961dabd02","articleId":2888,"userId":11,"content":"很多时候仅看描述没办法定位问题的","createdAt":1563427974955},{"id":14232,"originId":"5d3009929969a529571d5101","articleId":2888,"userId":358,"content":"参考 https://github.com/eggjs/egg/issues/3310","createdAt":1563429266703},{"id":14233,"originId":"5d300ebb9969a529571d5135","articleId":2888,"userId":109,"content":"你提交个可以复现故障的库，别人还要花精力来调试排查问题的。","createdAt":1563430587794},{"id":14234,"originId":"5d301788b2b9222961dabd6d","articleId":2888,"userId":2677,"content":"最小可复现 demo 了解一下","createdAt":1563432840064},{"id":14235,"originId":"5d1ec6f571951f750ccb8c09","articleId":2889,"userId":153,"content":"希望解答一下，谢谢🙂🙂","createdAt":1562298101810},{"id":14236,"originId":"5d1ee89f71951f750ccb8c8b","articleId":2889,"userId":153,"content":"这个问题真的没人解答嘛\r\n","createdAt":1562306719428},{"id":14237,"originId":"5d1eebe171951f750ccb8cad","articleId":2889,"userId":853,"content":"不会","createdAt":1562307553022},{"id":14238,"originId":"5d1f063a71951f750ccb8d9c","articleId":2889,"userId":153,"content":"🙄help","createdAt":1562314298959},{"id":14239,"originId":"5d1f128171951f750ccb8de0","articleId":2889,"userId":3922,"content":"1. vue3.0还没出，你这是vue2.x的ts写法\r\n2. 没用过ts写vue，你试试这样可不可以\r\n```javascript\r\n\t@Emit('hello')\r\n    hello() {};\r\n\t\r\n\tsayWorld(){\r\n\t  console.log('hi');\r\n\t  this.hello();\r\n\t  console.log('world');\r\n\t}\r\n```\r\n\r\n","createdAt":1562317441815},{"id":14240,"originId":"5d1f171771951f750ccb8df1","articleId":2889,"userId":153,"content":"[@kgdfj](/user/kgdfj) \r\n3.x都是ts写的，应该是下半年出来，基本上也是这种写法了\r\n\r\nsayhi是父组件的处理\r\n所以才好奇[@Emit](/user/Emit)如何保证函数执行顺序\r\n纯js写的话，毕竟可以按照顺序去处理","createdAt":1562318615203},{"id":14241,"originId":"5d1f1b5271951f750ccb8e13","articleId":2889,"userId":3922,"content":"[@Rabbitzzc](/user/Rabbitzzc) \r\n按逻辑来的话，我上面那种写法应该是可以的\r\n6月4号的VueConf：\r\n  3.x的写法是function-based, 虽然 2.x的 class-api 也能兼容，但是class-api ts的类型推导难以支持，用ts写 function-based更友好一点","createdAt":1562319698241},{"id":14242,"originId":"5d1f2c3271951f750ccb8e85","articleId":2889,"userId":259,"content":"[@Rabbitzzc](/user/Rabbitzzc)    看官方了吗，3.x 不会有装饰器API， 而且vue2.x支持ts本来就不完善。","createdAt":1562324018435},{"id":14243,"originId":"5d1f520871951f750ccb8ef4","articleId":2889,"userId":1517,"content":"不建议这么快入坑vue3.x的函数式编程，目前还没有相关的文档，而且源代码也还没释放。vue3.x基本上是大改以前的风格变成函数式api。\r\n\r\n不要谈兼容不兼容的，未来2.x终将变成3.x\r\n\r\n建议多花时间在react上会更快上手，到时用使转vue3.x也很快。如果没什么意外，可以考虑vue入坑react。","createdAt":1562333704712},{"id":14244,"originId":"5d21b716ad75d374b58bcee9","articleId":2889,"userId":153,"content":"[@xjh22222228](/user/xjh22222228) 没仔细看，上次看到一个教程，突然想到的，静等vue3.x","createdAt":1562490646201},{"id":14245,"originId":"5d21b73c71951f750ccb923c","articleId":2889,"userId":153,"content":"[@kgdfj](/user/kgdfj) 得看一下演讲具体内容了🙄","createdAt":1562490684415},{"id":14246,"originId":"5d21e9d9ad75d374b58bcf73","articleId":2889,"userId":752,"content":"v3 不会有 class api。","createdAt":1562503641749},{"id":14247,"originId":"5d22c7d271951f750ccb951d","articleId":2889,"userId":153,"content":"看了一下vue-Conf 尤大的视频\r\n3.x的设计目标在于\r\n1. 更小更快(比如使用Proxy来做数据劫持绑定， VDOM的重写)\r\n2. 使用ts\r\n3. 开放更多底层功能\r\n4. APi设计统一性\r\n\r\n同时也提到了放弃class api的原因：类型推导存在一些问题，ui组件更多是组合，而不是继承\r\n也取消了装饰器：比如现在比较火的decorators不稳定，风险大\r\n取而代之的是function-based， 因为：\r\n* 支持ts\r\n* 逻辑复用\r\n* 代码更容易压缩\r\n\r\n谢谢各位大佬的答案😁","createdAt":1562560466308},{"id":14248,"originId":"5d22eb2f71951f750ccb9603","articleId":2889,"userId":1754,"content":"[@bs32g1038](/user/bs32g1038) 我也很同意你的观点，现在就这么做了","createdAt":1562569519438},{"id":14249,"originId":"5d24001471951f750ccb99d2","articleId":2889,"userId":153,"content":"[@Liklei](/user/Liklei) 进阶react了么？2333","createdAt":1562640404271},{"id":14250,"originId":"5d2d2f96c5fe2549619aeb44","articleId":2889,"userId":3573,"content":"Vue3是对ts支持更友好, 而不是只能用ts写","createdAt":1563242390779},{"id":14251,"originId":"5d27f3e1fa8ef0094e06447f","articleId":2891,"userId":1574,"content":"https://www.html.cn/30-seconds-of-code/\r\n\r\n有各种代码片段","createdAt":1562899425820},{"id":14252,"originId":"5d29b7e4fa8ef0094e064964","articleId":2891,"userId":97,"content":"那应该是需要一些体积比较小的库，koa 之类的似乎是不错的选择","createdAt":1563015140192},{"id":14253,"originId":"5d2c9c9dc5fe2549619aea7c","articleId":2891,"userId":3883,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) 额，koa这种框架的库是不是有点复杂，我先去瞧瞧，是不是一些工具类的库会比较容易看懂","createdAt":1563204765484},{"id":14254,"originId":"5d2c4755c5fe2549619ae954","articleId":2892,"userId":3923,"content":"已经找到原因了，是文件过大的原因。\r\n\r\n解决方案如下：\r\n\r\n![批注 2019-07-15 172530.png](//static.cnodejs.org/FlcqAyda2KpiNygoaMKi3D_9XVha)","createdAt":1563182933308},{"id":14255,"originId":"5d2928988a8bf909209cdf33","articleId":2893,"userId":354,"content":"提供一个可复现的例子？\r\n你的 text.txt 里面是什么内容？","createdAt":1562978456444},{"id":14256,"originId":"5d299baa8a8bf909209ce04f","articleId":2893,"userId":884,"content":"[@cctv1005s](/user/cctv1005s) 随便你输入啥内容","createdAt":1563007914515},{"id":14257,"originId":"5d29a90e8a8bf909209ce06d","articleId":2893,"userId":98,"content":"你都不看一下err是什么","createdAt":1563011342646},{"id":14258,"originId":"5d29b745fa8ef0094e06495c","articleId":2893,"userId":97,"content":"可能没有及时 close","createdAt":1563014981128},{"id":14259,"originId":"5d2bed4951637b492bb0ec57","articleId":2893,"userId":884,"content":"[@zengming00](/user/zengming00) 早看了, err是null,不知道找到问题","createdAt":1563159881852},{"id":14260,"originId":"5d2bed6a51637b492bb0ec5b","articleId":2893,"userId":884,"content":"[@hsiaosiyuan0](/user/hsiaosiyuan0) close也是老样子.不过问题找到了.","createdAt":1563159914085},{"id":14261,"originId":"5d2bf74951637b492bb0eccc","articleId":2893,"userId":98,"content":"[@WXFSnowMan](/user/WXFSnowMan) 你一句问题找到了就完事了？","createdAt":1563162441418},{"id":14262,"originId":"5d2be1378a8bf909209ce443","articleId":2894,"userId":89,"content":"哈哈哈，能问卷二卷三，说明卷一还凑合\r\n\r\n> 据编辑说是10月，但好像没说哪年\r\n\r\n早写完了，还在编审中","createdAt":1563156791047},{"id":14263,"originId":"5d2beda851637b492bb0ec68","articleId":2894,"userId":22,"content":"又有书可催了","createdAt":1563159976575},{"id":14264,"originId":"55a6c3a05a4b4a86539c3008","articleId":2895,"userId":424,"content":"async 呀","createdAt":1436992416570},{"id":14265,"originId":"55a6cb035a4b4a86539c300a","articleId":2895,"userId":1226,"content":"好的，我用一下","createdAt":1436994307595},{"id":14266,"originId":"55a7112e5a4b4a86539c3023","articleId":2895,"userId":1797,"content":"eventproxy  after","createdAt":1437012270487},{"id":14267,"originId":"55a7218a5a4b4a86539c304b","articleId":2895,"userId":743,"content":"co框架:\r\n```js\r\nco ->\r\n  for i in [0...rltSet.length]\r\n    eny = rltSet[i]\r\n    yield t.initTr eny,tbody\r\n  return\r\n```","createdAt":1437016458889},{"id":14268,"originId":"55a746231320d084064c2061","articleId":2895,"userId":1226,"content":"感谢各位的热心解答","createdAt":1437025827393},{"id":14269,"originId":"55a74c981320d084064c206b","articleId":2895,"userId":568,"content":"[@leapon](/user/leapon) 我也是用这个，","createdAt":1437027480688},{"id":14270,"originId":"55a75fa61320d084064c209a","articleId":2895,"userId":3293,"content":"定义一个计数器 ＝ array.length\r\nfor 中每次调用外部的一个函数\r\n外部函数每次 让 计数器－－,并执行if(!计数器){你的代码} － －","createdAt":1437032358960},{"id":14271,"originId":"55a779f093ce02cd25985907","articleId":2895,"userId":3819,"content":"把这些函数放在一个堆栈中，如push到Array里，然后执行这个堆栈，每执行完一个函数，销毁堆栈引用，并检测堆栈是否为空","createdAt":1437039088203},{"id":14272,"originId":"55a77a6493ce02cd2598590b","articleId":2895,"userId":1226,"content":"[@MiguelValentine](/user/MiguelValentine) 这思路不错~","createdAt":1437039204626},{"id":14273,"originId":"55a77ac193ce02cd2598590d","articleId":2895,"userId":1226,"content":"[@enmoon](/user/enmoon) 这么高大上，大神真多啊","createdAt":1437039297588},{"id":14274,"originId":"55b8dae535ce2ac164f518ca","articleId":2895,"userId":3926,"content":"(function f(){\r\n\t....\r\n\tif f(i < 100); else return;\r\n});","createdAt":1438178021750},{"id":14275,"originId":"55b904b535ce2ac164f518e2","articleId":2895,"userId":1226,"content":"[@guoyanhui](/user/guoyanhui) 谢谢啊，已经用async解决，不过怎么把这坟挖出来了。。。。。。","createdAt":1438188725589},{"id":14276,"originId":"55b9151f35ce2ac164f518e9","articleId":2895,"userId":424,"content":"是不是该给帖子加个 盖棺定论 的flag。楼主可以再问题解决时点一下。是个防盗墓功能。","createdAt":1438192927082},{"id":14277,"originId":"55ba3fc7f36f579657fc537c","articleId":2895,"userId":1226,"content":"[@leapon](/user/leapon) 还有这个功能？点哪个呢？","createdAt":1438269383514},{"id":14278,"originId":"55ba56a4f36f579657fc5395","articleId":2895,"userId":424,"content":"[@Pcman1056](/user/Pcman1056) 没有呢。看来会有用的。","createdAt":1438275236026},{"id":14279,"originId":"55bec300f36f579657fc569b","articleId":2895,"userId":3927,"content":"promise.all","createdAt":1438565120283},{"id":14280,"originId":"55bf344aa547cfc86aac7072","articleId":2895,"userId":1632,"content":"楼上正解，结合[co](https://github.com/tj/co)，这是处理异步最好的方式","createdAt":1438594122406},{"id":14281,"originId":"55bf8623a547cfc86aac70f3","articleId":2895,"userId":1226,"content":"[@leapon](/user/leapon) 赶紧加吧，又来挖了，，，大家的热情真高啊，，，但我已无力回复。。。","createdAt":1438615075983},{"id":14282,"originId":"55c0896e512fb2a95097a8cf","articleId":2895,"userId":18,"content":"[@Pcman1056](/user/Pcman1056) [@leapon](/user/leapon) 这才叫讨论嘛。。。","createdAt":1438681454965},{"id":14283,"originId":"5d281f4dfa8ef0094e064571","articleId":2895,"userId":1226,"content":"[@alsotang](/user/alsotang) 是的，多多讨论","createdAt":1562910541152},{"id":14284,"originId":"5d2be305fa8ef0094e064d78","articleId":2895,"userId":18,"content":"[@Pcman1056](/user/Pcman1056) 已经是promise的年代了。我锁帖了","createdAt":1563157253058},{"id":14285,"originId":"5d27ec8d8a8bf909209cda80","articleId":2896,"userId":3929,"content":"slack","createdAt":1562897549560},{"id":14286,"originId":"5d2a4d5a8a8bf909209ce141","articleId":2896,"userId":110,"content":"Slack 不是开源的。需求是什么？riot.im, mattermost.com 也可以看看，riot.im 有中文","createdAt":1563053402695},{"id":14287,"originId":"5d1ea25871951f750ccb8a72","articleId":2897,"userId":3548,"content":"eslint 进行javascript的代码检测\r\nhtml,css support 代码的快捷生成\r\nchinese 简体中文\r\nopen in browser 快捷键alt + b 把html快速在默认浏览器打开\r\n还有vscode自带的snippet （自定义用户代码片段）配置可能有些麻烦，上百度看看大神的博客，三分钟学会\r\nes6、vetur等等，我也是个前端小白，说的可能不够全面，但这些都是我所用到的，希望对你有用。","createdAt":1562288728328},{"id":14288,"originId":"5d1ed6b7ad75d374b58bc898","articleId":2897,"userId":79,"content":"基本相关的都会有插件的，debugger for chorme && git && markdown","createdAt":1562302135759},{"id":14289,"originId":"5d218633ad75d374b58bce3a","articleId":2897,"userId":3930,"content":"我觉得prettier，image preview挺好用","createdAt":1562478131087},{"id":14290,"originId":"5d21f3cb71951f750ccb92c1","articleId":2897,"userId":743,"content":"vscode-icon","createdAt":1562506187067},{"id":14291,"originId":"5d22911971951f750ccb931e","articleId":2897,"userId":884,"content":"先谢谢大家, 我这边在vscode商店安装了一些Node.js package和snippet插件, 但是再输入require关键字时还是没提示,想http.方法都是OK的,不知道为啥?","createdAt":1562546457098},{"id":14292,"originId":"5d22b0aa71951f750ccb944e","articleId":2897,"userId":755,"content":"https://gist.github.com/yinxin630/651079908909730f4450cfe0391f8500\r\n这个是我的配置, 你可以参考, 也可以直接用 `settings sync` 插件一键同步","createdAt":1562554538964},{"id":14293,"originId":"5d289f08fa8ef0094e0647f7","articleId":2897,"userId":884,"content":"[@thatgirlismylove](/user/thatgirlismylove) [@qiutian00](/user/qiutian00) [@caoyd](/user/caoyd) [@151263](/user/151263) 谢谢.","createdAt":1562943240111},{"id":14294,"originId":"5d23f694ad75d374b58bd5de","articleId":2898,"userId":150,"content":"```js\r\nexports.customLoader = {\r\n\toa: {\r\n\t\tdirectory: 'app/controller',\r\n\t\tinject: 'ctx', // or app\r\n\t\tloadunit: false, // 是否加载框架和插件目录\r\n\t},\r\n};\r\n```\r\n我在 framework 中的配置文件中添加如上代码，项目无法发启动，报错config找不到。正确的实现方式是什么呢","createdAt":1562637972478},{"id":14295,"originId":"5d2542b4ad75d374b58bdab3","articleId":2898,"userId":150,"content":"没有大佬在工作中遇到过嘛!!!!!!!!!!!!","createdAt":1562722996713},{"id":14296,"originId":"5d25460571951f750ccb9eba","articleId":2898,"userId":358,"content":"带可复现方式提 issue","createdAt":1562723845849},{"id":14297,"originId":"5d2581568a8bf909209cd131","articleId":2898,"userId":150,"content":"[@atian25](/user/atian25) 好的，这就弄","createdAt":1562739030682},{"id":14298,"originId":"5d2857de8a8bf909209cddfb","articleId":2898,"userId":150,"content":"[@atian25](/user/atian25) 代码已经提交：https://github.com/ddzyan/gateway\r\n我现在的目的是框架实现 router . model , controller 等一些重复部分内容，使 egg 继承使用，请问要怎么处理呢","createdAt":1562925022412},{"id":14299,"originId":"5d22c405ad75d374b58bd1d9","articleId":2901,"userId":1574,"content":"https://mathjs.org/","createdAt":1562559493472},{"id":14300,"originId":"5d22da11ad75d374b58bd247","articleId":2901,"userId":1723,"content":"[@yuanliwei](/user/yuanliwei) 这个是数学的吧?如果我含有日期类型怎么办?","createdAt":1562565137796},{"id":14301,"originId":"5d22e23271951f750ccb95c8","articleId":2901,"userId":545,"content":"day.js","createdAt":1562567218992},{"id":14302,"originId":"5d235c64ad75d374b58bd4bf","articleId":2901,"userId":97,"content":"这个自己动手也不需要多少代码的。思路就是将 中缀表达式(infix notation) 转成 后缀表达式(postfix notation)，可用的算法有 调度场算法(Shunting-yard algorithm)，算法内容可以 google，转换时主要考虑运算符的优先级和结合性，而转成后缀表达式之后利用栈结构和递归即可，欢迎补充","createdAt":1562598500937},{"id":14303,"originId":"5d23612071951f750ccb9851","articleId":2901,"userId":354,"content":"时间类型的有什么关系吗..直接转成时间戳一把就算完了...","createdAt":1562599712635},{"id":14304,"originId":"5d23db3771951f750ccb989a","articleId":2901,"userId":1574,"content":"![超级截屏_20190709_080640.png](//static.cnodejs.org/FlMwMxwnFFL8jwdCM99-liQJKYrk)\r\n也可以直接计算时间的，转成时间戳计算也可以。","createdAt":1562630967821},{"id":14305,"originId":"5d2596678a8bf909209cd1e7","articleId":2901,"userId":1723,"content":"有时间段,有时间点,还有加减乘除","createdAt":1562744423483},{"id":14306,"originId":"5d24095971951f750ccb9a48","articleId":2904,"userId":150,"content":"个人理解：\r\n1.第一阶段运行\r\n2.eventloop一直在循环检查，直到 timers 在预设时间到了就会立即执行。\r\n参考文章：https://www.jianshu.com/p/deedcbf68880","createdAt":1562642777744},{"id":14307,"originId":"5d24354571951f750ccb9b59","articleId":2904,"userId":3883,"content":"[@ddzyan](/user/ddzyan) \r\n1.是说在timers阶段执行的吗，我觉得启动执行的这段执行的代码应该也是会封装成一个callback扔到某个阶段的队列里执行吧，不知道在哪里怎么能看到这些内容。\r\n2.我理解eventloop就是一个主线程，那如果主线程已经阻塞了，相当于线程进入了一个状态，那在这个状态之下它自己就不会再继续执行了， 必须得有另一个线程来唤醒它。所以我猜测一种可能就是，这里说的阻塞其实并不是主线程进入了某种状态，只是说他被标记成停在poll阶段，而它本身还是在做循环检查判断的逻辑。\r\n3.针对这两点，我还多了个疑问，就是你们是怎么看node的源码的，看看源码是不是就能确认了。","createdAt":1562654021049},{"id":14308,"originId":"5d245318ad75d374b58bd866","articleId":2904,"userId":3883,"content":"还有个问题就是我们怎么写一个让其他线程执行的任务呢，其实就是说node如何知道你的这个任务是需要其他线程去执行的，然后完了再回调，比如fs.readFile，是怎么调用的导致它由其他线程去完成读取","createdAt":1562661656055},{"id":14309,"originId":"5d246afd71951f750ccb9cc8","articleId":2904,"userId":3883,"content":"[@ddzyan](/user/ddzyan) \r\n刚又看了以下官方文档，大概理解poll阶段的阻塞到底是怎么回事了，简单说就是进入poll阶段后如果没有设置timers的callback，当queue里的callback执行完后就会进入阻塞状态（没有设置setImmediate的callback），这种情况下就真的阻塞等待新的callback了，如果有I/O事件触发的时候，会唤醒主线程继续执行。而如果poll阶段callback全部执行完后发现有设置timers，它就不会进入阻塞状态，会一直不断检查直到某个timers的callback需要回调了，然后循环到那个阶段进行执行。\r\n应该是这样吧。","createdAt":1562667773906},{"id":14310,"originId":"5d24b6e071951f750ccb9dd6","articleId":2904,"userId":3895,"content":"启动时候执行的代码 执行的代码你指的是同步的javascript的代码？事件循环的六个阶段触发的只是在异步的时候传入callback哦，初始的javascript代码不在这六个阶段里；最近总结了一篇：https://juejin.im/post/5d21f7e9e51d455071250b81","createdAt":1562687200824},{"id":14311,"originId":"5d24b72f71951f750ccb9dda","articleId":2904,"userId":3895,"content":"[@pangjiawei19](/user/pangjiawei19) 源码是C和C++的，可以去看下","createdAt":1562687279374},{"id":14312,"originId":"5d25460871951f750ccb9ebf","articleId":2904,"userId":150,"content":"[@pangjiawei19](/user/pangjiawei19) 准确的说，主线程执行的第一步是执行所有js代码，遇到堵塞在加入到event loop中。根据 event loop 轮询机制发现已经完成的事件，则通知主线程进行处理。","createdAt":1562723848231},{"id":14313,"originId":"5d254a59ad75d374b58bdafe","articleId":2904,"userId":2305,"content":"问题1：执行完同步代码才启动的eventloop\r\n问题2：poll阶段其实是调用了linux的epoll，这个支持传一个时间参数吧，等多久等不到也会返回的样子","createdAt":1562724953868},{"id":14314,"originId":"5d255aaa71951f750ccb9f76","articleId":2904,"userId":3883,"content":"[@FantasyGao](/user/FantasyGao) 大佬看了你的文章，写的很不错的，就这个同步代码执行的问题，我还是有两个疑问：\r\n1.这段启动时候执行的同步代码，不在六个阶段里，那是不是说执行完这块以后，主线程就开始在事件循环里轮询了？\r\n2.如果我的代码里没有可能产生异步io然后进行回调的逻辑，那这个事件循环会被初始化吗？我理解如果初始化了事件循环，主线程就会阻塞到poll阶段了，那我程序直接结束说明没有初始化事件循环，对吗？","createdAt":1562729130678},{"id":14315,"originId":"5d255ab471951f750ccb9f7a","articleId":2904,"userId":3744,"content":"1.启动阶段main() -> node::Start(argc, argv) -> NodeMainInstance::Run() -> CreateMainEnvironment() -> RunBootstrapping()  执行完internal/bootstrap的node.js启动文件后，Module.runMain执行 process.argv[1]\r\n2.之后进入do { uv_run(env->event_loop(), UV_RUN_DEFAULT)}  while (more == true && !env->is_stopping());    \r\ntimeout = uv_backend_timeout(loop);  计算距离最近一个定时器的时间差 \r\nuv_io_poll(loop, timeout);\r\n\r\n","createdAt":1562729140186},{"id":14316,"originId":"5d25645b71951f750ccb9fd6","articleId":2904,"userId":150,"content":"[@pangjiawei19](/user/pangjiawei19) 事件循环和主线程没有关系","createdAt":1562731611445},{"id":14317,"originId":"5d2567fe71951f750ccb9fe5","articleId":2904,"userId":3883,"content":"[@ddzyan](/user/ddzyan) 额，那事件循环执行的逻辑是哪个线程在跑呢？","createdAt":1562732542312},{"id":14318,"originId":"5d246a9a71951f750ccb9cb2","articleId":2905,"userId":545,"content":"1. 轮询\r\n2. web push (IE 11以下不支持)\r\n\r\n前端用 angular   rxjs 的话 webdocket 很方便，跟操作http 请求一样\r\n","createdAt":1562667674734},{"id":14319,"originId":"5d247da1ad75d374b58bd92f","articleId":2905,"userId":3933,"content":"不用计时器就用定时器","createdAt":1562672545423},{"id":14320,"originId":"5d249ac5ad75d374b58bd98a","articleId":2905,"userId":2342,"content":"meteor.js  监控 mongodb 的改变","createdAt":1562680005716},{"id":14321,"originId":"5d25327671951f750ccb9e24","articleId":2905,"userId":144,"content":"[@nusr](/user/nusr) 这个方法有点鱼，不可能要求别人去装mongodb的。","createdAt":1562718838382},{"id":14322,"originId":"5d253313ad75d374b58bda46","articleId":2905,"userId":144,"content":"其实我想做的就是能不能不采用计时或者轮询的方法去监控当前时间变化，因为项目不一定会跑多长时间，那些方式处理不好很容易造成内存溢出。","createdAt":1562718995803},{"id":14323,"originId":"5d2538e7ad75d374b58bda56","articleId":2905,"userId":26,"content":"把浏览器和js想得也太脆弱了吧，为何会有这种担心？那我给你提供一些更”牛逼“的方案吧。    \r\n1. 你可以用长polling，一个连接后端一直不返回，由服务器控制。\r\n2. 用activex或则flash等创建tcp的socket来通讯。\r\n3. 有一种叫做SSE的，专门让服务器能主动推送东西，而且也还是基于http。    \r\n但是你会发现，第一种是畸形，第二种是麻烦，第三种是”我用websocket不是更方便？“。我觉得编程不要想到什么轮询就嫌弃，操作系统有一大堆轮询，任何方案都有存在的合理性，”处理不好就xxxx“不是理由，是伪命题。","createdAt":1562720487327},{"id":14324,"originId":"5d25456871951f750ccb9eaf","articleId":2905,"userId":703,"content":"就这个 “每隔5分钟” 的要求，不用计时器(或定时器)，我还真的想不出别的办法来。","createdAt":1562723688413},{"id":14325,"originId":"5d2549bfad75d374b58bdaf6","articleId":2905,"userId":144,"content":"[@HobaiRiku](/user/HobaiRiku) \t其实服务端有些框架是自带了定时任务的，前端的尴尬就在于不能直接跟系统进行交互，否则兴许也有更好的解决方案吧","createdAt":1562724799981},{"id":14326,"originId":"5d255e9fad75d374b58bdbc7","articleId":2905,"userId":26,"content":"[@GeekHi](/user/GeekHi) 浏览器本身就不存在任何能直接跟系统交互的手段，浏览器没有权限操作系统，没有那么多出路，就连XHR也是提出来才有的，现在不想以前，真的连搞XHR都要写一堆代码（连jq都还没有），现在浏览器规范里面都内置了ws，服务端也有一大堆ws框架，实时通讯用起来简直方便，回到你问的主题，如果无法接收ws，我相信，5分钟只为刷新数据，没有更好的方案。","createdAt":1562730143233},{"id":14327,"originId":"5d253e71ad75d374b58bda8d","articleId":2906,"userId":109,"content":"参考 https://github.com/eggjs/egg/issues/3201","createdAt":1562721905180},{"id":14328,"originId":"5d2405b6ad75d374b58bd6a6","articleId":2907,"userId":3701,"content":"egg 也支持TS~ 我是感觉挺好用的","createdAt":1562641846835},{"id":14329,"originId":"5d24067371951f750ccb9a2a","articleId":2907,"userId":22,"content":"egg","createdAt":1562642035725},{"id":14330,"originId":"5d241a9871951f750ccb9ab1","articleId":2907,"userId":109,"content":"egg, midway 顺手的选一个。","createdAt":1562647192152},{"id":14331,"originId":"5d241f93ad75d374b58bd723","articleId":2907,"userId":1312,"content":"nest 在用，利用注解编辑真的挺爽的，不过文档确实是渣渣","createdAt":1562648467288},{"id":14332,"originId":"5d2424e071951f750ccb9ad6","articleId":2907,"userId":545,"content":"[@sk-blog](/user/sk-blog)   https://docs.nestjs.cn/6/firststeps  底部加入了学习资料","createdAt":1562649824749},{"id":14333,"originId":"5d24250f71951f750ccb9adb","articleId":2907,"userId":545,"content":"[@MichealDean](/user/MichealDean)  egg 支持 ts ，支持的不好，何不用阿里的midway ，ts 写的框架。\r\nnest.js 生态好一些。","createdAt":1562649871506},{"id":14334,"originId":"5d242784ad75d374b58bd75f","articleId":2907,"userId":545,"content":"https://github.com/jiayisheji/AngularNest-Fullstack-CNode\r\n可以看看这个项目，包括技术栈的选型。\r\n以及相关教程 https://github.com/jiayisheji/blog/issues/18","createdAt":1562650500573},{"id":14335,"originId":"5c865e6facb681372d41717a","articleId":2908,"userId":850,"content":"把这些通用模块封装成 egg 插件就可以了~ 同时 app.loader 功能可以实现你的需求，统一这些之后你可以做成 egg 的上层框架提供出去。","createdAt":1552309871923},{"id":14336,"originId":"5c86637cacb681372d4171a9","articleId":2908,"userId":3600,"content":"[@okoala](/user/okoala) 谢谢您的回答，看了egg的文档说插件和framework不会加载controller、router，我使用了sequelize，在framework层定义的model也是不加载的，按文档上loader部分的说明使用app.loader的方式加载model还没成功，loadToContext没报错但是调用时是未定义的，loadToApp一直报错，说model属性是只读的不能assign， 按您说的那我可能方向是对的，我再试试","createdAt":1552311164803},{"id":14337,"originId":"5c89b9387ce0df3732427c4a","articleId":2908,"userId":541,"content":"这种的话，只能说继承框架，然后改loader加载一个额外目录了。。。model那边可能还要定制插件\r\n\r\n建议参考loader的参数","createdAt":1552529720231},{"id":14338,"originId":"5c89c569acb681372d417e93","articleId":2908,"userId":358,"content":"loader 是可以在 app、plugin、framework 级别来挂载的。\r\n\r\n建议是在插件里面做。\r\n\r\n另，最近支持了通过配置来挂载 loader： https://github.com/eggjs/egg/issues/3480","createdAt":1552532841404},{"id":14339,"originId":"5c8b1c527ce0df3732428377","articleId":2908,"userId":3600,"content":"[@AnzerWall](/user/AnzerWall) 好的，谢谢回复，我测试了可以","createdAt":1552620626870},{"id":14340,"originId":"5c8b1cfb7ce0df3732428381","articleId":2908,"userId":3600,"content":"[@atian25](/user/atian25) 谢谢回复，我测试可以了，之前不能在framework下挂model是字段名不能重复，app下默认把model挂到model，framework下换个名字挂载就能用了","createdAt":1552620795830},{"id":14341,"originId":"5c8b2bef7ce0df37324283d8","articleId":2908,"userId":3600,"content":"[@atian25](/user/atian25) 看了一下issues，非常有用，感谢","createdAt":1552624623086},{"id":14342,"originId":"5d1c98f52beced2efd51f382","articleId":2908,"userId":3936,"content":"[@dxwts](/user/dxwts) 我也遇到了相同的问题，请问你最终是如何配置的？\r\n我在framework里面配置的customLoader无法生效：\r\nexports.customLoader = {\r\n  oa: {\r\n    directory: 'app/model/oa',\r\n    inject: 'ctx', // or app\r\n    loadunit: false, // 是否加载框架和插件目录\r\n    // other loads options\r\n  },\r\n};","createdAt":1562155253229},{"id":14343,"originId":"5d1cb4b12beced2efd51f3ce","articleId":2908,"userId":358,"content":"https://github.com/atian25/egg-showcase/pull/13","createdAt":1562162353426},{"id":14344,"originId":"5d1d593369746a2ef81ba26d","articleId":2908,"userId":3936,"content":"是egg-sequelize的问题。\r\n目前，我是修改了 egg-sequelize/lib/loader.js # 93 行的代码，临时解决\r\nconst modelDir = path.join(app.baseDir, 'node_modules/egg-framework-tugou/app', config.baseDir);","createdAt":1562204467944},{"id":14345,"originId":"5d23397dad75d374b58bd44d","articleId":2908,"userId":150,"content":"[@dxwts](/user/dxwts) 请问最终是如何实现的呢？是通过添加customLoader嘛","createdAt":1562589565689},{"id":14346,"originId":"5d22b719ad75d374b58bd167","articleId":2910,"userId":1500,"content":"能描述下具体情况吗？","createdAt":1562556185849},{"id":14347,"originId":"5d22b9b371951f750ccb94ad","articleId":2910,"userId":1092,"content":"有问题的数据因为当时没有截图，实例已经不在监控平台上了，没法截图。\r\n下面是我目前正常的数据，请就当下图红线右侧数据在有问题的时候是灰色（应该代表不在监控了吧）\r\n\r\n![1562556717345.jpg](//static.cnodejs.org/Fp2XP03L_pgwPADeY2bi-aWR6N3D)\r\n\r\n","createdAt":1562556851034},{"id":14348,"originId":"5d22bc3aad75d374b58bd192","articleId":2910,"userId":1500,"content":"[@miser](/user/miser) 这样你加一下钉钉群我详细了解一下，加群方式这篇文章里就有 https://help.aliyun.com/document_detail/63892.html","createdAt":1562557498470},{"id":14349,"originId":"5d15da8034bca667bc6e3b18","articleId":2911,"userId":433,"content":"现在用了一个neode的 npm包  感觉有点类似于mongoose的感觉 有大佬搞过这个neo4j的数据库么,明天看看和同事商量一下可不可以  如果不行我们就用手写cql算了 ","createdAt":1561713280202},{"id":14350,"originId":"5d16e33dcdb1f967c1576d8e","articleId":2911,"userId":1673,"content":"https://neo4j.com/docs/rest-docs/current/\r\n\r\nThe Neo4j REST API Documentation v3.5\r\nneo4j支持restful\r\n","createdAt":1561781053489},{"id":14351,"originId":"5d1721e034bca667bc6e3dd4","articleId":2911,"userId":545,"content":"可惜  https://github.com/typeorm/typeorm 不支持","createdAt":1561797088837},{"id":14352,"originId":"5d1723a1cdb1f967c1576e3b","articleId":2911,"userId":752,"content":"不看数据库种类就 提 orm 么 =。=这种图数据库，他的查询语言就是最强大的 orm 不过你可以自己编写一个 queryBuilder 的基础类。","createdAt":1561797537381},{"id":14353,"originId":"5d1843e634bca667bc6e3fc7","articleId":2911,"userId":1673,"content":"[@MiYogurt](/user/MiYogurt) 没经历过ssm的","createdAt":1561871334868},{"id":14354,"originId":"5d1ad2c5cdb1f967c1577928","articleId":2911,"userId":433,"content":"[@MiYogurt](/user/MiYogurt) 我在网上查  neo4j  都是 ogm 我在网上找到的这个neode的包上面也写写的ogm框架  我只是希望找一个统一管理的实体类 方便后面的人修改和查看对应实体类型。","createdAt":1562038981875},{"id":14355,"originId":"5d21b2a571951f750ccb922c","articleId":2911,"userId":752,"content":"neode 也是要写 Cypher 的，neo4j 字段也是动态的，我个人觉得这个写到代码里面没必要，做成文档还好一些，给他人查看的话。而且 neo4j-brower 通过查询语句也可以看到有哪些字段。","createdAt":1562489509395},{"id":14356,"originId":"5d1b1454cdb1f967c1577afc","articleId":2912,"userId":419,"content":"https://www.npmjs.com/package/robotjs\r\nhttps://github.com/vcaesar/robotn","createdAt":1562055764999},{"id":14357,"originId":"5d1b1dc734bca667bc6e4b78","articleId":2912,"userId":545,"content":"[@yuu2lee4](/user/yuu2lee4) 没有修改内存的吧","createdAt":1562058183959},{"id":14358,"originId":"5d1b2beacdb1f967c1577b9b","articleId":2912,"userId":21,"content":"修改内存数据也不是不可以，需要借用C扩展来实现，但windows好做一点，linux地址转换就比较麻烦了。\r\n这里有一篇linux的实现的文章：https://bbs.pediy.com/thread-224469.htm","createdAt":1562061802378},{"id":14359,"originId":"5d1c72c3cdb1f967c1577fff","articleId":2912,"userId":11,"content":"[@zy445566](/user/zy445566) 这个网站牛逼啊，还有逆工程的专栏。。。","createdAt":1562145475792},{"id":14360,"originId":"5d1d603b69746a2ef81ba29e","articleId":2912,"userId":21,"content":"[@hyj1991](/user/hyj1991) 是的，算是不错的非专业牛散集散地了","createdAt":1562206267433},{"id":14361,"originId":"5d1dac1ead75d374b58bc4bf","articleId":2912,"userId":851,"content":"尝试过无依赖调用winapi，只要能调用winapi，写内核都可以：https://github.com/lisniuse/winlib","createdAt":1562225694625},{"id":14362,"originId":"5d1c5726cdb1f967c1577f23","articleId":2914,"userId":166,"content":"装饰器在 ecma 标准里还只是一个 stage2 的 [提案](https://github.com/tc39/proposal-decorators)，还没有正式稳定下来，Node 还不会支持。可以使用 Babel 或者 Typescript ","createdAt":1562138406816},{"id":14363,"originId":"5d1c5f7ccdb1f967c1577f79","articleId":2914,"userId":22,"content":"decorators 都好多年了，还在 stage2，而且中间已经有不少于两次的比较大的 break change","createdAt":1562140540216},{"id":14364,"originId":"5d1c7a2d2beced2efd51f312","articleId":2914,"userId":545,"content":"还是直接 typescript比较合适","createdAt":1562147373267},{"id":14365,"originId":"5d1ccaae2beced2efd51f403","articleId":2914,"userId":153,"content":"[@rrbe](/user/rrbe)难怪，ts倒是支持，谢谢你啦","createdAt":1562167982469},{"id":14366,"originId":"5d1ccad569746a2ef81ba181","articleId":2914,"userId":153,"content":"[@justjavac](/user/justjavac) 不清楚为啥，这功能挺好用的","createdAt":1562168021599},{"id":14367,"originId":"5ce9f96b52ccb64168ba79b5","articleId":2915,"userId":545,"content":"加个判断，对两个区分下~","createdAt":1558837611569},{"id":14368,"originId":"5ceb61104036f24194cf6d5a","articleId":2915,"userId":158,"content":"可以使用http-proxy这个库","createdAt":1558929680596},{"id":14369,"originId":"5cf808ee95fcc914aa266837","articleId":2915,"userId":3939,"content":"HTTP默认端口80，https是443吧","createdAt":1559759086208},{"id":14370,"originId":"5cf8b76c1fe902120f31caf3","articleId":2915,"userId":3940,"content":"同二楼一样，推荐[http-proxy](https://www.npmjs.com/package/http-proxy)。关于https证书问题，推荐使用[greenlock](https://www.npmjs.com/package/greenlock)，这个模块可以自动申请https证书。另外再留下一个自己写的代理https://github.com/pengxigua/node-proxy","createdAt":1559803756978},{"id":14371,"originId":"5d1c6373cdb1f967c1577f92","articleId":2915,"userId":3937,"content":"好的谢谢各位","createdAt":1562141555869},{"id":14372,"originId":"5d195e3b34bca667bc6e41a5","articleId":2916,"userId":3942,"content":"你试试把cookie过期值改长一点，可能是你两次访问的时间间隔太长了，数据过期了，","createdAt":1561943611849},{"id":14373,"originId":"5d195fcccdb1f967c15771ef","articleId":2916,"userId":3942,"content":"而且现在的session不需要cookieparser作为依赖了，可以去掉，否则可能会导致一些问题，你也可以试试","createdAt":1561944012148},{"id":14374,"originId":"5d1c051acdb1f967c1577d16","articleId":2916,"userId":2305,"content":"是cookie和session两个中间件的顺序问题吧，改一下顺序试试呢","createdAt":1562117402933},{"id":14375,"originId":"5d1accb2cdb1f967c15778f9","articleId":2917,"userId":516,"content":"aws\r\n国内某云，，，，，，不想吐槽了","createdAt":1562037426184},{"id":14376,"originId":"5d1b441934bca667bc6e4c2c","articleId":2917,"userId":518,"content":"阿里云啊 挺好用的 域名 ssl 等都可以","createdAt":1562067993695},{"id":14377,"originId":"5d1b4f3534bca667bc6e4c37","articleId":2917,"userId":3943,"content":"我用的aws日本，速度挺慢的。cnode用的aws日本就挺快，不知为何","createdAt":1562070837442},{"id":14378,"originId":"5d1b738434bca667bc6e4cec","articleId":2917,"userId":109,"content":"tx ali hw 云，通过代理商链接注册账号 至少价格85折。","createdAt":1562080132949},{"id":14379,"originId":"5d1c0137cdb1f967c1577cea","articleId":2917,"userId":545,"content":"国内稳定： 亚马逊宁夏\r\n国内其他用途： 腾讯云\r\n国外稳定： vultr 谷歌云 亚马逊云\r\n国外其他用途： 搬瓦工 vultr","createdAt":1562116407414},{"id":14380,"originId":"5d07594395fcc914aa269e4b","articleId":2918,"userId":545,"content":"不是有 opencv.js 么","createdAt":1560762691305},{"id":14381,"originId":"5d076ae31fe902120f31fec9","articleId":2918,"userId":641,"content":"好像不太全","createdAt":1560767203081},{"id":14382,"originId":"5d07a5b01fe902120f31fff1","articleId":2918,"userId":1986,"content":"目标检测很多算法的YOLO、R-CNN、RetinaNet、ThunderNet","createdAt":1560782256108},{"id":14383,"originId":"5d1b0aa234bca667bc6e4b17","articleId":2918,"userId":3945,"content":"[node](https://github.com/peterbraden/node-opencv),前端用可以看看[文档](https://docs.opencv.org/master/d4/da1/tutorial_js_setup.html)","createdAt":1562053282299},{"id":14384,"originId":"5d1ae7fdcdb1f967c15779c4","articleId":2919,"userId":356,"content":"return 或则else\r\n","createdAt":1562044413590},{"id":14385,"originId":"5d1ae80c34bca667bc6e4a4f","articleId":2919,"userId":356,"content":" let user = await db.User.findOne({....});\r\n if (!user){\r\n   \t\tctx.status = 404;\r\n   \t\tctx.body = \"Not Found\"\r\n }else{\r\n ctx.status = 200\r\n ctx.body = \"Hello\"  }\r\n","createdAt":1562044428952},{"id":14386,"originId":"5d1ae88834bca667bc6e4a57","articleId":2919,"userId":1971,"content":"[@TimLiu1](/user/TimLiu1) 是加个return即可？\r\n```js\r\n.....\r\n if (!user){\r\n   \t\tctx.status = 404;\r\n   \t\tctx.body = \"Not Found\";\r\n\t\treturn; // 加这一行？\r\n }\r\n.....\r\n ```","createdAt":1562044552848},{"id":14387,"originId":"5d1ae8accdb1f967c15779cd","articleId":2919,"userId":356,"content":"可以\r\n","createdAt":1562044588372},{"id":14388,"originId":"5d1ae8bacdb1f967c15779d1","articleId":2919,"userId":356,"content":"就是不要往后执行","createdAt":1562044602001},{"id":14389,"originId":"5d1ae942cdb1f967c15779da","articleId":2919,"userId":1971,"content":"[@TimLiu1](/user/TimLiu1) 好的，谢谢\r\n这下面是koa文档，写的就不要用res.end()，故有此问。\r\n感谢！\r\n```js\r\n//ctx.res\r\n//Node's response object.\r\n\r\n//Bypassing Koa's response handling is not supported. Avoid using the following node properties:\r\n\r\nres.statusCode\r\nres.writeHead()\r\nres.write()\r\nres.end()\r\n```","createdAt":1562044738252},{"id":14390,"originId":"5d19b60334bca667bc6e442a","articleId":2920,"userId":559,"content":"[@atian25](/user/atian25) 大神求解惑","createdAt":1561966083755},{"id":14391,"originId":"5d19b89334bca667bc6e4448","articleId":2920,"userId":358,"content":"问的有点泛","createdAt":1561966739248},{"id":14392,"originId":"5d19ba4434bca667bc6e4467","articleId":2920,"userId":559,"content":"[@atian25](/user/atian25) 就是对接redis的发布订阅,当向reids中发布一个事件的时候.egg就执行一段代码.我目前所知道的好像就是在app或者agent里面来订阅,然后调用指定的service.我想知道就是有没有专门的组件来更加方便的完成这件事.我看到有个CustomStrategy的东西好像可以实现","createdAt":1561967172402},{"id":14393,"originId":"5d19baeccdb1f967c157749d","articleId":2920,"userId":559,"content":"[@acodercat](/user/acodercat) 比如像在schedule里面的参数一样,类似的我配置一个频道,然后当有事件发生时,这个文件的代码就自动执行.这种功能是不是需要自己来编写,还是egg右提供一些解决方案","createdAt":1561967340588},{"id":14394,"originId":"5d19bb8534bca667bc6e447e","articleId":2920,"userId":358,"content":"这种可以自定义一个 ScheduleStrategy ，在里面监听事件，然后 sendOne 通知某个 worker 执行。\r\n\r\nhttps://github.com/eggjs/egg-schedule#schedule-type\r\n\r\n然后你可以把这段逻辑封装为一个 egg-schedule-redis-event 插件","createdAt":1561967493953},{"id":14395,"originId":"5d19bc0fcdb1f967c15774ad","articleId":2920,"userId":559,"content":"[@atian25](/user/atian25) 好的,谢谢\r\n","createdAt":1561967631990},{"id":14396,"originId":"5d1accfccdb1f967c15778fd","articleId":2920,"userId":559,"content":"[@atian25](/user/atian25) \r\n我这样对messenger做了一些简单的封装\r\n```js\r\n  class EventListenerScheduleStrategy extends agent.ScheduleStrategy {\r\n    start() {\r\n      agent.messenger.on(this.schedule.event, (data) => {\r\n        this.sendOne(data);\r\n      });\r\n    }\r\n  }\r\n  agent.schedule.use('event_listener', EventListenerScheduleStrategy);\r\n```\r\n\r\n然后这样来监听时间,然后项目中通过`this.app.messenger.broadcast`来广播,这样就不用编排的方式,可以解耦很多逻辑\r\n```js\r\n  static get schedule() {\r\n    return {\r\n      type: 'event_listener',\r\n      event: 'dynamic_feature_generated',\r\n    };\r\n  }\r\n```","createdAt":1562037500998},{"id":14397,"originId":"5d19d1ae34bca667bc6e45c3","articleId":2921,"userId":166,"content":"find => `db.getCollection('Foo').find({}).explain()`\r\ncount => `db.getCollection('Foo').explain().count()`\r\n\r\n不带条件的 count，mongo 的优化器会直接从一个每次有记录数变更就增减的值中获取数量。带条件的 count，会遍历符合要求的文档，当然慢了。find 快是因为获取到 limit 限制数量的文档后就停止继续扫描了。","createdAt":1561973166641},{"id":14398,"originId":"5d19dc2034bca667bc6e462a","articleId":2921,"userId":3405,"content":"那每次查询计数,条件都不同的话,怎么样计数最优呢","createdAt":1561975840346},{"id":14399,"originId":"5d19dd7134bca667bc6e4630","articleId":2921,"userId":3405,"content":"而且我用的是`estimatedDocumentCount()`----mongoose官网推荐的方法。\r\n![捕获qq.PNG](//static.cnodejs.org/FrMVH_SOofrQDV-LHKO0nYV0Oqv5)\r\n我自己的程序如下:\r\n![捕获bb.PNG](//static.cnodejs.org/Fh8yYu8P8JLvy6trPHrAoSZ2a4hu)\r\n但用了之后都是返回无条件的计数值,似乎之前的find的条件没用。\r\n","createdAt":1561976177060},{"id":14400,"originId":"5d19e1dd34bca667bc6e464b","articleId":2921,"userId":268,"content":"[@ailuhaosi](/user/ailuhaosi) \r\n![image.png](//static.cnodejs.org/Fj8SoRlSvaEz3o3NRt9XOzxLV--P)\r\n\r\n```\r\ndb.collection.estimatedDocumentCount() does not take a query filter and instead uses metadata to return the count for a collection.\r\n\r\n```","createdAt":1561977309441},{"id":14401,"originId":"5d19e2cb34bca667bc6e465a","articleId":2921,"userId":3405,"content":"是的,谢谢回答,这个我也看过了,那对于需要**条件计数(filter count)**的场景,mongodb就没法用么。我用aggregate也试了,也很慢。真的没辙了。","createdAt":1561977547949},{"id":14402,"originId":"5d19e390cdb1f967c15775f2","articleId":2921,"userId":166,"content":"estimatedDocumentCount 方法是直接使用 mongo 维护的一个计数的，不适用 filter 条件\r\ncount 优化要根据实际情况而言，比如设置查询条件尽量少扫描数据，比如设置缓存之类。\r\n数据库基本原理都是共通的，建议你找些书籍去看，比如《高性能 Mysql》就有相关章节。","createdAt":1561977744557},{"id":14403,"originId":"5d19fa1a34bca667bc6e46d8","articleId":2921,"userId":3405,"content":"谢谢回复,难怪好多应用里都是用 999+  来充当具体的值。\r\n看来具体的 条件计数  在性能上很难优化。","createdAt":1561983514748},{"id":14404,"originId":"5d1a089acdb1f967c157768f","articleId":2921,"userId":109,"content":"这个需求在关系型数据库中实现性能应该好许多。","createdAt":1561987226464},{"id":14405,"originId":"5d1aae53cdb1f967c1577792","articleId":2921,"userId":1199,"content":"可以考虑用redis外置这个计数,实时计算,延时同步.","createdAt":1562029651399},{"id":14406,"originId":"5d1ab3d0cdb1f967c15777ca","articleId":2921,"userId":2578,"content":"加上索引呢","createdAt":1562031056681},{"id":14407,"originId":"5d0716c495fcc914aa269bbc","articleId":2922,"userId":89,"content":"去买个ipip.net的数据库。非常准的","createdAt":1560745668453},{"id":14408,"originId":"5d079b2c95fcc914aa269fa9","articleId":2922,"userId":160,"content":"[这里](http://pv.sohu.com/cityjson)还是很准的","createdAt":1560779564188},{"id":14409,"originId":"5d11ecd134bca667bc6e2b30","articleId":2922,"userId":1774,"content":"[@i5ting](/user/i5ting) 我用免费的测了一下跟我们的数据对不上","createdAt":1561455825882},{"id":14410,"originId":"5d11f46d34bca667bc6e2b79","articleId":2922,"userId":545,"content":"[@dlyt](/user/dlyt) https://www.ipip.net/ip.html 用它示例的测。\r\n一部分是由于IP 更新，有误差，可能5% 不到。\r\n另外尝试多个IP 测试，我们这里IP误差不超过20米。","createdAt":1561457773643},{"id":14411,"originId":"5d19c12acdb1f967c15774da","articleId":2922,"userId":3948,"content":"https://github.com/lionsoul2014/ip2region\r\n最近公司刚好有这个需求，用的是这个库蛮准的","createdAt":1561968938746},{"id":14412,"originId":"5d1965cf34bca667bc6e4205","articleId":2923,"userId":545,"content":"websocket 监听。\r\n前端js 实现刷新。","createdAt":1561945551184},{"id":14413,"originId":"5d19678ecdb1f967c157723e","articleId":2923,"userId":187,"content":"浏览器不归nodejs管","createdAt":1561945998693},{"id":14414,"originId":"5d1967a8cdb1f967c1577244","articleId":2923,"userId":3950,"content":"websocket","createdAt":1561946024801},{"id":14415,"originId":"5d19681ecdb1f967c1577251","articleId":2923,"userId":3942,"content":"[@zuohuadong](/user/zuohuadong) webpack-dev-server是这样实现的吗","createdAt":1561946142093},{"id":14416,"originId":"5d196838cdb1f967c1577257","articleId":2923,"userId":3942,"content":"[@zxb19890727](/user/zxb19890727) webpack是通过websocket实现的吗","createdAt":1561946168316},{"id":14417,"originId":"5d19884d34bca667bc6e435b","articleId":2923,"userId":192,"content":"[@pjw521](/user/pjw521) webpack-dev-server的实现看这个http://ykfe.net/guide/hmr.html","createdAt":1561954381587},{"id":14418,"originId":"5d19af4834bca667bc6e43e0","articleId":2923,"userId":22,"content":"看到这个题目，我猜题主说的是 hot reload 吧","createdAt":1561964360579},{"id":14419,"originId":"5d160c5c34bca667bc6e3c13","articleId":2924,"userId":3951,"content":"问题解决了。 本以为koa-static 中间件可以解决这个问题呢 想的太多了\r\n![image.png](//static.cnodejs.org/FoJK__0Fky6RsgXKE6fL91CRgtSo)","createdAt":1561726044766},{"id":14420,"originId":"5d16c0a2cdb1f967c1576d09","articleId":2924,"userId":21,"content":"自己写个接口来取代直接获取文件不就好了","createdAt":1561772194357},{"id":14421,"originId":"5d16f1c4cdb1f967c1576dc2","articleId":2924,"userId":749,"content":"静态资源直接放node里，缓存问题不太好解决，还不如直接放nginx里","createdAt":1561784772966},{"id":14422,"originId":"5d1883aacdb1f967c157707a","articleId":2924,"userId":3951,"content":"[@crazymad-tools](/user/crazymad-tools) 刚刚接触后台，以后会考虑nginx","createdAt":1561887658112},{"id":14423,"originId":"5d19565f34bca667bc6e414b","articleId":2924,"userId":26,"content":"jwt检查和验证可以自己实现自定义中间件，不是什么复杂的东西。","createdAt":1561941599546},{"id":14424,"originId":"5d1723c834bca667bc6e3de7","articleId":2925,"userId":545,"content":"多线程异步你是真的有点作啊~\r\n\r\n之前朋友搞过爬虫，单线程，在 单核1G  100M 带宽（日本）的机器上，CPU 在30-80% 之间，100M带宽首先不够用了。\r\n\r\n爬虫不做大量的数据处理的话，就是高IO密集型的应用，请关掉多线程  以提高性能【避免不必要的线程切换和线程通信】。同时降低了复杂度~","createdAt":1561797576533},{"id":14425,"originId":"5d1873c6cdb1f967c1577046","articleId":2925,"userId":885,"content":"楼主你对node的单线程和异步I/O是不是有所误会？\r\n\r\nlibuv实现异步I/O靠的就是I/O多路复用+线程池(多线程)，也就是咱常说的事件循环，你这只是在控制异步IO的并发数，js代码执行该单线程还是单线程，类似`Async.parallelLimit`.","createdAt":1561883590530},{"id":14426,"originId":"5d15b1f534bca667bc6e399a","articleId":2926,"userId":867,"content":"个人感觉不是Koa2不火，而且Express在早期应用的太多，新项目会采用Koa2，老项目应该只会维护，不会做大改动。\r\n你觉得Egg.js火吗？就是基于Koa2的，包括国内部分别的框架，也是Koa2的。\r\n我个人的项目，一开始也是Express的，老项目维护，新项目使用Koa2","createdAt":1561702901547},{"id":14427,"originId":"5d15b20acdb1f967c15769df","articleId":2926,"userId":98,"content":"因为很多新手看的资料还是很古老的","createdAt":1561702922428},{"id":14428,"originId":"5d15b28e34bca667bc6e39a8","articleId":2926,"userId":867,"content":"[@zengming00](/user/zengming00) 严重同意，我一开始学习的时候，也都是叫Express的","createdAt":1561703054868},{"id":14429,"originId":"5d15b2ac34bca667bc6e39ad","articleId":2926,"userId":1667,"content":"koa 是一个比 express 更精简，使用 node 新特性的中间件框架，相比之前 express 就是一个庞大的框架，但是 express 社区强大，该遇到的问题都遇到了，比较好解决。应用丰富，不用自己写。koa 比较灵巧，需要的中间件可以自己写，也不困难，源码易懂。","createdAt":1561703084681},{"id":14430,"originId":"5d15c16434bca667bc6e3a3a","articleId":2926,"userId":1933,"content":"我手头维护的三个项目，都是express，不是我想用express，项目丢给我的时候就express啊","createdAt":1561706852941},{"id":14431,"originId":"5d16b307cdb1f967c1576ce3","articleId":2926,"userId":189,"content":"koa开发方式和Express基本相似，只是开发速度、运行速度都比Express快很多，koa更优秀的","createdAt":1561768711549},{"id":14432,"originId":"5d16c045cdb1f967c1576d02","articleId":2926,"userId":21,"content":"[@zengming00](/user/zengming00) 精辟","createdAt":1561772101454},{"id":14433,"originId":"5d172252cdb1f967c1576e2a","articleId":2926,"userId":545,"content":"都很老了， 轻量级的可以看看  fastify ，并发是 koa 的两倍。\r\n框架的话 ，可以看看 nest.js midway 这些， koa  express  就是个工具包~","createdAt":1561797202714},{"id":14434,"originId":"5d17306c34bca667bc6e3e26","articleId":2926,"userId":2030,"content":"express 比 koa 火, 数据怎么来的\r\nkoa 比 express 更精简, 数据怎么来的\r\nkoa 开发速度、运行速度都比Express快很多，koa更优秀, 数据又是怎么来的\r\n","createdAt":1561800812603},{"id":14435,"originId":"5d18437034bca667bc6e3fb8","articleId":2926,"userId":1673,"content":"[@chenzeZzz](/user/chenzeZzz) 道听途说者多","createdAt":1561871216647},{"id":14436,"originId":"5d1850d634bca667bc6e3ff4","articleId":2926,"userId":528,"content":"[@chenzeZzz](/user/chenzeZzz) 这个还真有，可以从各方面去考量。\r\n首先是github 星数，npm下载数，各种第三方平台对比数据都可以证明。\r\nkoa更精简，去看一下源码就能明白了。\r\n开发速度更快不一定，运行速度可以找看一下压测就知道了。\r\n更优秀不好说，但是中间件模型设计更好这个要承认。","createdAt":1561874646676},{"id":14437,"originId":"5d15e46b34bca667bc6e3b68","articleId":2927,"userId":145,"content":"0.0打个卡围观....我也发生过一次...但是找不到解决办法就没管了...结果暂时也就发生过那一次orz","createdAt":1561715819642},{"id":14438,"originId":"5d1722a7cdb1f967c1576e2f","articleId":2927,"userId":545,"content":"部署过，也用的是官方的 肯node-alpine ，但是没出问题~","createdAt":1561797287440},{"id":14439,"originId":"5d109a9b34bca667bc6e25bf","articleId":2928,"userId":90,"content":"贴下代码，看看你哪块添加了这么多多事件监听","createdAt":1561369243611},{"id":14440,"originId":"5d109e3dcdb1f967c15756a1","articleId":2928,"userId":3473,"content":"[@jxycbjhc](/user/jxycbjhc) \r\n没有额外加其他事件\r\nawait apnProvider.send(note, deviceToken).then((result) => {\r\n\t   \t\t\t//deviceToken 这里就是 1w条信息\r\n                    successList.push(result.sent);\r\n                    failedList.push(result.failed);\r\n                    s_sum = s_sum + result.sent.length;\r\n                    f_sum = f_sum + result.failed.length;\r\n                    console.log(bundleIdList[i] + '发送成功' + result.sent.length + \"个，发送失败\" + result.failed.length + \"个\");\r\n                });\r\n                apnProvider.shutdown();","createdAt":1561370173339},{"id":14441,"originId":"5d10a0b6cdb1f967c15756b7","articleId":2928,"userId":90,"content":"[@15537839367](/user/15537839367) 从[SF](https://github.com/node-apn/node-apn/issues/518#issuecomment-296673537)上面看到的， 大意就是apnProvider 需要手动释放在发送完信息以后，还有个做法是分批次来处理但是有个不确定因素，不能确定一批次的数量 https://github.com/node-apn/node-apn/issues/557#issuecomment-299539498","createdAt":1561370806953},{"id":14442,"originId":"5d10a17fcdb1f967c15756ce","articleId":2928,"userId":3473,"content":"[@jxycbjhc](/user/jxycbjhc) 谢谢鸭！我去看看issue","createdAt":1561371007321},{"id":14443,"originId":"5d16e45934bca667bc6e3d3d","articleId":2928,"userId":1673,"content":"带宽有限，两边，nio可能发到的时候已经超时了或者数量超限","createdAt":1561781337732},{"id":14444,"originId":"5d10b52434bca667bc6e2675","articleId":2929,"userId":268,"content":"把静态资源中间件放在路由中间件前面","createdAt":1561376036526},{"id":14445,"originId":"5d11ff3e34bca667bc6e2bbd","articleId":2929,"userId":610,"content":"静态文件服务中间件有拦截请求的函数，匹配成功返回文件，并告诉客户端返回文件是什么类型","createdAt":1561460542098},{"id":14446,"originId":"5d15f94ccdb1f967c1576c0c","articleId":2929,"userId":3951,"content":"和我一样的问题","createdAt":1561721164210},{"id":14447,"originId":"5d158fe934bca667bc6e38da","articleId":2930,"userId":90,"content":"找到了，好久前看过忘了  官方文档写的也很详细了：[Retry Transaction and Commit Operation](https://docs.mongodb.com/manual/core/transactions/#transactions-retry)\r\n里面也提到了   \r\n> In most cases, multi-document transaction incurs a greater performance cost over single document writes, and the availability of multi-document transaction should not be a replacement for effective schema design. For many scenarios, the denormalized data model (embedded documents and arrays) will continue to be optimal for your data and use cases. That is, for many scenarios, modeling your data appropriately will minimize the need for multi-document transactions.\r\n\r\n含义很明显了，从表设计层面上去减少这种情况","createdAt":1561694185356},{"id":14448,"originId":"5d149456cdb1f967c15765df","articleId":2931,"userId":158,"content":"因为同一时间你的浏览器就发送了一个啊","createdAt":1561629782141},{"id":14449,"originId":"5d149491cdb1f967c15765e7","articleId":2931,"userId":3954,"content":"[@zhhb](/user/zhhb) 有没有类似的工具，可以测试出所有线程其实都在工作？","createdAt":1561629841826},{"id":14450,"originId":"5d14a5c5cdb1f967c157661f","articleId":2931,"userId":268,"content":"使用ab\r\nhttps://www.cnblogs.com/linjiqin/p/9058432.html\r\n```\r\nab -n 10 -c 10 http://localhost:3000/\r\n```\r\n```\r\n当前进程16873\r\n当前进程16871\r\n当前进程16873\r\n当前进程16873\r\n当前进程16871\r\n当前进程16872\r\n当前进程16871\r\n当前进程16874\r\n当前进程16872\r\n当前进程16874\r\n```","createdAt":1561634245794},{"id":14451,"originId":"5d14b8e1cdb1f967c1576667","articleId":2931,"userId":610,"content":"[@zhhb](/user/zhhb) 同一时间发送一个是啥意思？","createdAt":1561639137676},{"id":14452,"originId":"5d155a8434bca667bc6e3684","articleId":2931,"userId":158,"content":"[@1316346949](/user/1316346949) 哪有用浏览器单个页面控制台来测并发的。。。3楼的ab测试可以","createdAt":1561680516443},{"id":14453,"originId":"5d155aef34bca667bc6e3690","articleId":2931,"userId":158,"content":"还有你的是不是win？","createdAt":1561680623138},{"id":14454,"originId":"5d1578a634bca667bc6e37ab","articleId":2931,"userId":3954,"content":"[@zhhb](/user/zhhb) 是的  win10","createdAt":1561688230548},{"id":14455,"originId":"5d158bbacdb1f967c15768e8","articleId":2931,"userId":187,"content":"这是进程，不是线程。\r\n为什么总是那一个进程在服务？\r\n\t因为windows系统下，采用的是唤醒最近处于活动状态的进程，\r\n\t所以你会看到你开了多个进程，而只有最近一两个进程在处理任务","createdAt":1561693114746},{"id":14456,"originId":"5d15785434bca667bc6e3798","articleId":2932,"userId":358,"content":"跟 egg 没啥关系，你用的是 `request` 这个库，去看它文档吧，看提示就是传错了。另外，为啥用 callback 的方式。。。 而且为啥不直接用 egg 自带的 curl","createdAt":1561688148424},{"id":14457,"originId":"5d15794334bca667bc6e37be","articleId":2932,"userId":3497,"content":"[@atian25](/user/atian25) 我原来用的是axios, 因为一直提示缺少参数，我就在postman 中把请求代码一模一样拷过来了测试\r\n![image.png](//static.cnodejs.org/FlSJthtJ3y0pPXmAY5vCQ1ncfwYR)\r\n\r\n我去用curl再写一个试试，再去研究研究文档，谢谢哈","createdAt":1561688387327},{"id":14458,"originId":"5d1582f934bca667bc6e3830","articleId":2932,"userId":358,"content":"这种提示都很明显了。。。 自己抓个包看看送了啥不就知道了。","createdAt":1561690873480},{"id":14459,"originId":"5d15848034bca667bc6e3855","articleId":2932,"userId":3497,"content":"[@atian25](/user/atian25)  解决了  谢谢哈，旷世那边的技术顾问跟我讲 只能用multipart/form-data， 昨天一直不行，今天自己试了一下application/x-www-form-urlencoded 就可以了","createdAt":1561691264186},{"id":14460,"originId":"5d0c9a4dcdb1f967c1574b28","articleId":2933,"userId":3956,"content":"使用 [joi](https://github.com/hapijs/joi)","createdAt":1561107021719},{"id":14461,"originId":"5d0ce83334bca667bc6e1ccf","articleId":2933,"userId":549,"content":"class-validator","createdAt":1561126963978},{"id":14462,"originId":"5d1099a1cdb1f967c1575656","articleId":2933,"userId":523,"content":"同用joi","createdAt":1561368993366},{"id":14463,"originId":"5d147977cdb1f967c1576530","articleId":2933,"userId":36,"content":"同joi","createdAt":1561622903041},{"id":14464,"originId":"5d1491c734bca667bc6e3525","articleId":2933,"userId":886,"content":"从joi -> class-validator","createdAt":1561629127391},{"id":14465,"originId":"5d14bdb6cdb1f967c1576671","articleId":2933,"userId":3957,"content":"我使用的是 koa-parameter ","createdAt":1561640374847},{"id":14466,"originId":"5d15761ccdb1f967c1576809","articleId":2933,"userId":1121,"content":"校验参数joi, 同时生成API ，joi2md","createdAt":1561687580929},{"id":14467,"originId":"5d141bdecdb1f967c15762ab","articleId":2934,"userId":2305,"content":"推荐楼主用connect-redis这个库搞个store来存储session吧，还可以支持多台机器，配置个过期时间就好了","createdAt":1561598942404},{"id":14468,"originId":"5d1423c734bca667bc6e31f5","articleId":2934,"userId":2400,"content":"[@rainstraw](/user/rainstraw) 很感谢你的回答.但是我要的是米饭不是可乐.","createdAt":1561600967233},{"id":14469,"originId":"5d14637b34bca667bc6e3355","articleId":2934,"userId":11,"content":"你想的没错，自带的 MemoryStore 本来就不是为线上设计的，在你说的情况下不会清除掉内存中记录的 session，因此会有内存泄漏，所以官方的 README.md 中有这么一句\r\n\r\n> Warning The default server-side session storage, MemoryStore, is purposely not designed for a production environment. It will leak memory under most conditions, does not scale past a single process, and is meant for debugging and developing.\r\n\r\n","createdAt":1561617275125},{"id":14470,"originId":"5d14640c34bca667bc6e3364","articleId":2934,"userId":11,"content":"相对应的，如果你采用 Redis 来作为 store 的话，一般 set 方法会设置一个 maxAge，比如：\r\n```js\r\n// 最大缓存 24h\r\nredisClient.set(key, value, 'PX', 24 * 60 * 60 * 1000)\r\n```\r\n这样可以规避掉你说的这种场景下 session 无限增大的问题","createdAt":1561617420135},{"id":14471,"originId":"5d14a8dfcdb1f967c157662a","articleId":2934,"userId":2400,"content":"[@hyj1991](/user/hyj1991) 感谢","createdAt":1561635039170},{"id":14472,"originId":"5d0e0795cdb1f967c1574edf","articleId":2935,"userId":1923,"content":"socket粘包问题？","createdAt":1561200533210},{"id":14473,"originId":"5d0e184fcdb1f967c1574f04","articleId":2935,"userId":359,"content":"自己定义协议拆包","createdAt":1561204815639},{"id":14474,"originId":"5d12c88534bca667bc6e2cdc","articleId":2935,"userId":2305,"content":"最简单的做法，四个字节长度+一个协议包","createdAt":1561512069165},{"id":14475,"originId":"5d12e00734bca667bc6e2db9","articleId":2935,"userId":862,"content":"基于TCP自定通信协议吧，最常用就是 header(body.length)+body","createdAt":1561518087025},{"id":14476,"originId":"5d12e48acdb1f967c1575ec8","articleId":2935,"userId":862,"content":"https://cnodejs.org/topic/58c2a8f9e0cfa8974a26118f 不过已经有类似的工具了","createdAt":1561519242741},{"id":14477,"originId":"5d1411ed34bca667bc6e315f","articleId":2935,"userId":26,"content":"首先tcp避免粘包混乱，除非是客户端和服务端采用断连接的机制，必须，注意是必须定义最起码有长度标志的协议。然后强烈建议不要使用5楼的包，我已经尝试过了，并不是很好用，然后强烈推荐使用transform-stream类来做这个事情，非常简单，而且可以高度自定义。","createdAt":1561596397573},{"id":14478,"originId":"5d137d5dcdb1f967c15761ef","articleId":2936,"userId":358,"content":"这不是提示你 cd 失败么？还没到 egg","createdAt":1561558365186},{"id":14479,"originId":"5aa0909a7811af0f6522221a","articleId":2937,"userId":3961,"content":"作为一个菜鸟，我只知道node贼省硬件配置。几十个应该是绰绰有余\r\n","createdAt":1520472218119},{"id":14480,"originId":"5aa09788f5dfc27d7ad985b7","articleId":2937,"userId":152,"content":"一般来讲，nodejs进程数与cpu线程数保持一致是最佳方案。 比如4核心8线程。 6核心6线程。 就是根据线程数去设置。 当然也有根据核心数设置的。这两种设置方案基本上都可以，没啥大毛病。","createdAt":1520473992350},{"id":14481,"originId":"5aa09872f5dfc27d7ad985b9","articleId":2937,"userId":545,"content":"你应该考虑的是并发～～ 如果站库分离的话，8核16G  并发在 2W以上","createdAt":1520474226483},{"id":14482,"originId":"5aa09f48ce4a27f867526ec3","articleId":2937,"userId":1215,"content":"需要看你的应用具体表现，糟糕的话，可能部署不了几个进程。如果性能表现良好的话，可以挂很多进程。\r\n\r\n用上 https://www.aliyun.com/product/nodejs ，随时可以看到性能状态，帮助你决定是否该扩容。","createdAt":1520475976716},{"id":14483,"originId":"5cdbfcfa518e0954fc40ea61","articleId":2937,"userId":1218,"content":"[@JacksonTian](/user/JacksonTian) 如果没有大的并发请求进来的话，用 alinode 能看出应用的表现吗？","createdAt":1557921018901},{"id":14484,"originId":"5d07103e1fe902120f31fb55","articleId":2937,"userId":1215,"content":"[@luckymore](/user/luckymore) 大并发 小并发都能看啊","createdAt":1560743998973},{"id":14485,"originId":"5d1346a1cdb1f967c157612f","articleId":2937,"userId":1218,"content":"[@JacksonTian](/user/JacksonTian) 挖坟了，sorry，是不是需要配合压测、alinode监控来决定开几个进程鸭？","createdAt":1561544353595},{"id":14486,"originId":"5d12693134bca667bc6e2c91","articleId":2938,"userId":2584,"content":"最新进展，将子进程代码改成：\r\n```\r\nconst http = require('http')\r\nconst fs = require('fs')\r\n\r\n// 创建 http 服务器，当有 tcp 连接时会触发 http 服务器的事件\r\nconst httpServer = http.createServer()\r\nhttpServer.on('request', (req, res) => {\r\n    fs.writeFileSync('./log', `http handled by child process (${process.pid}), ${new Date}\\n`, {flag: 'a'})\r\n    res.end(`Hello from child process (${process.pid})`)\r\n})\r\n\r\n// 子进程接收到主进程发来的 tcp 服务器句柄\r\nprocess.on('message', (message, tcpServer) => {\r\n    if (message === 'tcpServer') {\r\n        tcpServer.on('connection', socket => {\r\n            // 记录日志，用以证明当有 tcp 连接时，是只有一个子进程触发了事件，还是所有子进程同时触发了事件\r\n            fs.writeFileSync('./log', `tcp  handled by child process (${process.pid}), ${new Date}\\n`, {flag: 'a'})\r\n            // 手动触发 http 服务器的 connection 事件，并将 socket（双工流）传入，http 服务器内部会\r\n            // 根据协议将消息解析成 request（只读流）和 response（只写流）并触发自己的 request 事件\r\n            httpServer.emit('connection', socket)\r\n        })\r\n    }\r\n})\r\n```\r\n即，在 http 请求事件回调中也打印日志，日志如下：\r\n```\r\ntcp  handled by child process (647), Wed Jun 26 2019 02:30:21 GMT+0800 (China Standard Time)\r\ntcp  handled by child process (629), Wed Jun 26 2019 02:30:21 GMT+0800 (China Standard Time)\r\nhttp handled by child process (629), Wed Jun 26 2019 02:30:21 GMT+0800 (China Standard Time)\r\ntcp  handled by child process (637), Wed Jun 26 2019 02:31:32 GMT+0800 (China Standard Time)\r\ntcp  handled by child process (630), Wed Jun 26 2019 02:31:32 GMT+0800 (China Standard Time)\r\nhttp handled by child process (630), Wed Jun 26 2019 02:31:32 GMT+0800 (China Standard Time)\r\n```\r\n由此发现会有两个进程触发 tcp 连接事件，但这两个进程中只有一个会进行 http 请求的处理。\r\n\r\nwhy？","createdAt":1561487665278},{"id":14487,"originId":"5d130398cdb1f967c1575f4b","articleId":2938,"userId":2584,"content":"另外说明，测试机器处理器为4核。","createdAt":1561527192750},{"id":14488,"originId":"5d130498cdb1f967c1575f50","articleId":2938,"userId":2584,"content":"问题解决了，服务开启在docker中，测试是在外部，经过了一次tcp代理。","createdAt":1561527448498},{"id":14489,"originId":"5d1304d234bca667bc6e2e58","articleId":2938,"userId":2584,"content":"docker 内部测试没问题：\r\n```\r\ntcp  handled by child process (688), Wed Jun 26 2019 13:33:54 GMT+0800 (China Standard Time)\r\nhttp handled by child process (688), Wed Jun 26 2019 13:33:54 GMT+0800 (China Standard Time)\r\ntcp  handled by child process (691), Wed Jun 26 2019 13:34:16 GMT+0800 (China Standard Time)\r\nhttp handled by child process (691), Wed Jun 26 2019 13:34:16 GMT+0800 (China Standard Time)\r\n\r\n```","createdAt":1561527506921},{"id":14490,"originId":"5d11ef9ccdb1f967c1575c47","articleId":2940,"userId":1312,"content":"貌似找到了答案\r\nhttps://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md","createdAt":1561456540066},{"id":14491,"originId":"5d10c80134bca667bc6e26a4","articleId":2941,"userId":3964,"content":"Content-Encoding →deflate, 返回的内容是乱码","createdAt":1561380865617},{"id":14492,"originId":"5d10e4c5cdb1f967c15757d2","articleId":2941,"userId":98,"content":"你这个问题在我玩程序历史中有记载的出现时间是14年10月2号，解决办法是\r\naccept-encoding: ''\r\n要求服务器不压缩，一般人我不告诉他","createdAt":1561388229242},{"id":14493,"originId":"5d10e655cdb1f967c15757df","articleId":2941,"userId":3964,"content":"[@zengming00](/user/zengming00) 好像不行，强制压缩","createdAt":1561388629425},{"id":14494,"originId":"5d10e6fb34bca667bc6e273f","articleId":2941,"userId":703,"content":"“要求服务器不压缩” 正规的写法是：\r\naccept-encoding: identity","createdAt":1561388795319},{"id":14495,"originId":"5d10e92b34bca667bc6e274b","articleId":2941,"userId":3964,"content":"[@myy](/user/myy) ![TIM图片20190624231534.png](//static.cnodejs.org/FseIegoP1BY_CaOzTzuCGxI3Xnlp)","createdAt":1561389355179},{"id":14496,"originId":"5d1188f6cdb1f967c1575926","articleId":2941,"userId":98,"content":"```js\r\nconst request = require('request');\r\nconst zlib = require('zlib');\r\n\r\nconst url = 'http://comment.bilibili.com/75686462.xml'\r\n\r\nrequest.get(url, { encoding: 'binary' }, function (err, resp, body) {\r\n   if (err) {\r\n      console.log(err);\r\n      return;\r\n   }\r\n   if (resp.headers['content-encoding'] === 'deflate') {\r\n      // console.log(Buffer.isBuffer(body))\r\n      zlib.inflateRaw(Buffer.from(body, 'binary'), function (err, result) {\r\n         if (err) {\r\n            console.log(err);\r\n            return;\r\n         }\r\n         console.log(result.toString());\r\n      })\r\n   } else {\r\n      console.log(body);\r\n   }\r\n})\r\n```","createdAt":1561430262561},{"id":14497,"originId":"5d11910d34bca667bc6e28ea","articleId":2941,"userId":3964,"content":"[@zengming00](/user/zengming00) 谢谢","createdAt":1561432333711},{"id":14498,"originId":"5d0c7d5534bca667bc6e1a33","articleId":2942,"userId":268,"content":"第二个参数是选择返回的字段的\r\n第一个参数是查询条件","createdAt":1561099605338},{"id":14499,"originId":"5d0dd0c3cdb1f967c1574e25","articleId":2942,"userId":1219,"content":"[@jiangli373](/user/jiangli373) 就是要查询需要的字段，但是写了还是查询出了整条数据，没用得到我需要的指定的列值","createdAt":1561186499992},{"id":14500,"originId":"5d102fe534bca667bc6e2276","articleId":2942,"userId":268,"content":"[@hq45299](/user/hq45299) 相关代码贴一下吧","createdAt":1561341925246},{"id":14501,"originId":"5d10a46934bca667bc6e261e","articleId":2942,"userId":1219,"content":"[@jiangli373](/user/jiangli373) 上面在cmd命令中执行的没问题，在node使用mongoDB连接数据库查找的语句和上面一样，返回的数据没用过滤_id字段\r\n","createdAt":1561371753868},{"id":14502,"originId":"5d10b4db34bca667bc6e266f","articleId":2942,"userId":268,"content":"[@hq45299](/user/hq45299) \r\n\r\nhttp://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#find\r\n\r\n是用的这个模块吗\r\n\r\n```\r\ndb.collection(\"user\").find({}, { projection: { _id: 0, name: 1, address: 1 } })\r\n```\r\n\r\n是这样子写的吗`{ projection: { _id: 0, name: 1, address: 1 } }`","createdAt":1561375963979},{"id":14503,"originId":"5d0cabdccdb1f967c1574c0e","articleId":2943,"userId":3581,"content":"如果真的是这样，是不是只能多个 Docker 容器或者启动多个 Node.js 应用然后用 Nginx 之类的均衡负载？","createdAt":1561111516043},{"id":14504,"originId":"5d0cbd6134bca667bc6e1c64","articleId":2943,"userId":545,"content":"看不懂你这个测试的作用是什么。\r\n有关异步的理解，请参考：\r\nhttps://juejin.im/post/5ab8ff776fb9a028e46ea3e2\r\n\r\n\r\n首先说明一点：\r\n单线程没有线程切换和通信的损耗！一般情况下不建议使用多线程。\r\nlibuv 是有个队列，但是并不阻塞。实际你可以做数据库查询，压测。 我们之前压测结果： 单核 1G 内存， 2000多RPS （数据库在另外一台服务器）\r\n\r\n","createdAt":1561116001940},{"id":14505,"originId":"5d0cc75934bca667bc6e1c8a","articleId":2943,"userId":3581,"content":"[@zuohuadong](/user/zuohuadong) 主要是测试模拟高耗时接口（调用第三方支付接口等，耗时在 1s 到 1.5s 左右），测试代码故意模拟写成 10 秒。\r\n\r\n以测试为例子，发起第一个请求需要 10 秒才能响应。\r\n第二个请求如果在第一个请求还没有响应时就发起了那它响应时间就是为 “第一个请求剩余耗时 + 第二个请求的耗时”。\r\n第三个，第四个请求也是以此类推。那如果假设同时发起 10 个请求，那么其中就会有一个请求会是 100 秒才响应！\r\n\r\n于是，我想 cluster 是不是能帮我解决这个问题。几个线程就是能同时处理多少个请求。\r\ncluster 给我的感觉就是想 Nginx 负载均衡一样（开多个 Node.js 应用实例，每个实例不同端口，然后 Nginx 配置把流量转发每个实例）。\r\n\r\n可是经过实验我发现我好像想错了。\r\n希望有大神能帮我解答下，有没有只在 Node.js 里面就能解决这个问题的。","createdAt":1561118553327},{"id":14506,"originId":"5d0cfe13cdb1f967c1574cf6","articleId":2943,"userId":109,"content":"lz提问题没抓住重点。你到底是什么需求？\r\n","createdAt":1561132563785},{"id":14507,"originId":"5d0d59d9cdb1f967c1574d16","articleId":2943,"userId":3966,"content":"并不是排队处理的，cluster模块有一个简单的调度轮询机制，会将http请求分配给可用、处于等待中的进程。能做到某种程度上的负载均衡（做不到粘性负载均衡）。","createdAt":1561156057608},{"id":14508,"originId":"5d0d7d9234bca667bc6e1d46","articleId":2943,"userId":545,"content":"[@hxddev](/user/hxddev)  你这个是有问题的。\r\n单线程异步的情况下，由于主线程会把它扔到队列，这个耗时在ns 级别。\r\n所以正常情况下，如果同时发起请求，第一个请求是 10s+3ns，第二个是 10s+ 6ns ，第三个是 10s + 9ns  整个过程可能不到 10s + 1ms 。","createdAt":1561165202638},{"id":14509,"originId":"5d0d884c34bca667bc6e1d63","articleId":2943,"userId":545,"content":"附上代码：    [npm i fastify]\r\n```\r\nconst fastify = require('fastify')();\r\nconst util = require('util');\r\nconst setTimeoutPromise = util.promisify(setTimeout);\r\n\r\nlet num = 0\r\nfastify.get('/', (request, reply) => {\r\n  // return (Date.now());\r\n  setTimeoutPromise(10000, 'foobar').then((value) => {\r\n    num++;\r\n    console.log(num);\r\n    let time = Date.now()\r\n    console.log(time);\r\n    //return { time };\r\n    // value === 'foobar' （传值是可选的）\r\n    // 在大约 10000 毫秒后执行。\r\n    reply.send(time);\r\n  });\r\n\r\n})\r\n\r\nconst start = async () => {\r\n  try {\r\n    await fastify.listen(3000)\r\n  } catch (err) {\r\n    fastify.log.error(err);\r\n    process.exit(1);\r\n  }\r\n}\r\nstart();\r\n```\r\n\r\n测试结果：\r\n![image.png](//static.cnodejs.org/Fohe3POEcwa8qSVeRS4INnd6YmiM)\r\n","createdAt":1561167948436},{"id":14510,"originId":"5d0de8a9cdb1f967c1574e6a","articleId":2943,"userId":1923,"content":"貌似master里需要自己实现调度逻辑","createdAt":1561192617906},{"id":14511,"originId":"5d102d9a34bca667bc6e2246","articleId":2943,"userId":3581,"content":"[@zuohuadong](/user/zuohuadong) 感谢，真相大白了。\r\n原来的测试例子没有问题，是测试方法有问题。\r\n\r\n用 Chrome 的标签页测试就会这样。\r\nCURL 没有出现这种情况，可能是 Chrome 的某种机制，现在在查 Chrome 相关资料。","createdAt":1561341338938},{"id":14512,"originId":"5d1037b834bca667bc6e22be","articleId":2943,"userId":545,"content":"[@hxddev](/user/hxddev)  另外，没必要过早使用多线程，只会增加复杂度。 \r\n只在CPU 密集型应用中考虑多线程。","createdAt":1561343928799},{"id":14513,"originId":"5d103de734bca667bc6e2316","articleId":2943,"userId":268,"content":"这个问题是因为如果用chrome不同的tab打开同一个url的时候，每个tab会等待前面一个tab执行完才会执行","createdAt":1561345511200},{"id":14514,"originId":"5d10408bcdb1f967c15753a7","articleId":2943,"userId":268,"content":"https://stackoverflow.com/a/14119399/1805188","createdAt":1561346187911},{"id":14515,"originId":"5d104110cdb1f967c15753b3","articleId":2943,"userId":268,"content":"https://stackoverflow.com/questions/27513994/chrome-stalls-when-making-multiple-requests-to-same-resource","createdAt":1561346320110},{"id":14516,"originId":"5d10421b34bca667bc6e2359","articleId":2943,"userId":261,"content":"这个官方文档有写呀，默认 Round-robin：[cluster how it works](https://nodejs.org/dist/latest-v12.x/docs/api/cluster.html#cluster_how_it_works)\r\n> The first one (and the default one on all platforms except Windows), is the round-robin approach, where the master process listens on a port, accepts new connections and distributes them across the workers in a round-robin fashion, with some built-in smarts to avoid overloading a worker process.","createdAt":1561346587316},{"id":14517,"originId":"5d0f1280cdb1f967c157506d","articleId":2944,"userId":3967,"content":"手动艾特天猪大佬：[@atian25](/user/atian25)","createdAt":1561268864429},{"id":14518,"originId":"5d0f268acdb1f967c15750a5","articleId":2944,"userId":89,"content":"为啥不直接使用[midway](https://github.com/midwayjs/midway)呢","createdAt":1561273994385},{"id":14519,"originId":"5d0f2f04cdb1f967c15750d7","articleId":2944,"userId":89,"content":"[@paoloo1995](/user/paoloo1995) midway是完全兼容egg体系的。简单理解就是egg+ts+ioc增强版本","createdAt":1561276164280},{"id":14520,"originId":"5d0f73cc34bca667bc6e2114","articleId":2944,"userId":3834,"content":"[@paoloo1995](/user/paoloo1995)  目前 egg 有个自动生成 d.ts 从而实现声明注入的方案，在应用中可以自动生成，插件框架跟应用结构是一致的，所以一样可以生成","createdAt":1561293772002},{"id":14521,"originId":"5d0f7e8b34bca667bc6e212d","articleId":2944,"userId":3967,"content":"[@whxaxes](/user/whxaxes) egg-ts-helper？直接egg-bin dev调用ets生成**框架的**.d.ts貌似有些问题。比如Application的mixin，ets生成出来的类型代码是interface Application extends ExtendApplication {}，在应用里这么用没问题，框架里也这样，没法declaration merging的吧。\r\n大佬可以试一下框架里用ets生成的typing能不能正常使用…反正我这边是不行的，也许我哪里姿势不对？","createdAt":1561296523232},{"id":14522,"originId":"5d0f861ecdb1f967c15751d3","articleId":2944,"userId":3834,"content":"[@paoloo1995](/user/paoloo1995)  那这个就是 bug ，我看一下，弄好后我整个插件 demo 给你看","createdAt":1561298462873},{"id":14523,"originId":"5d0f9a51cdb1f967c157520f","articleId":2944,"userId":3834,"content":"[@paoloo1995](/user/paoloo1995)  确实是有 bug，egg-ts-helper 生成的声明放到了 egg 里，会出现声明重复的问题，已经修复了，同时我写了个用 ts 来写插件的 demo ：https://github.com/whxaxes/egg-plugin-ts-demo  ，你可以参考一二","createdAt":1561303633199},{"id":14524,"originId":"5d0da3bccdb1f967c1574de3","articleId":2946,"userId":545,"content":"如果是node 和node 通信  用 grpc 这个。做重试机制。\r\n\r\n如果是跟浏览器通信，用 socket.io \r\n如果是跟物联网设备通信，低功耗，用mqtt\r\n服务器内核开启 bbr 加速。\r\n","createdAt":1561174972061},{"id":14525,"originId":"5d0da60bcdb1f967c1574df1","articleId":2946,"userId":3158,"content":"好谢谢老哥，现在有方向了","createdAt":1561175563458},{"id":14526,"originId":"5d0c5698cdb1f967c1574907","articleId":2947,"userId":1908,"content":"1. 创建文件，写入hello, 打印-----ok-----;\r\n2. 创建文件，不写hello;\r\n3. 不创建文件，不打印；\r\n会是哪一种情况？为什么？\r\n","createdAt":1561089688674},{"id":14527,"originId":"5d0c617e34bca667bc6e1951","articleId":2947,"userId":22,"content":"应该是：**2. 创建文件，不写hello;**\r\n\r\n首先**肯定会创建文件**，所以排除 3，因为是按顺序执行的，只有写入操作是异步的。\r\n\r\n那到底能不能写入内容呢，如果瞎猜的话，肯定是猜写不进去。最初我也是猜的。原因就是 `fs.writeFile` 如果传入第一个参数是 `string`，肯定要经历很多对用户不可见的步骤。\r\n\r\n我实际运行了一下，确实是 2。\r\n\r\n看了源码，https://github.com/nodejs/node/blob/master/lib/fs.js#L1174-L1199\r\n\r\n我加了注释\r\n\r\n```js\r\nfunction writeFile(path, data, options, callback) {\r\n  callback = maybeCallback(callback || options);\r\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'w' });\r\n  const flag = options.flag || 'w';\r\n\r\n// 【判断是否为文件描述符】\r\n// 【很显然，这道题里的 path 不是文件描述符，而是普通字符串，作为目录】\r\n  if (isFd(path)) {\r\n    writeFd(path, true);\r\n    return;\r\n  }\r\n\r\n  // 【调用 fs.open 打开文件，此时文件不存在，因此创建了文件】\r\n  fs.open(path, flag, options.mode, (openErr, fd) => {\r\n  \t// 【成功打开文件后，写入内容】        ⬆️\r\n\t// 【此操作是**异步**的】\r\n    if (openErr) {\r\n      callback(openErr);\r\n    } else {\r\n      writeFd(fd, false);\r\n    }\r\n  });\r\n}\r\n```\r\n","createdAt":1561092478185},{"id":14528,"originId":"5d0c7199cdb1f967c1574977","articleId":2947,"userId":1908,"content":"[@justjavac](/user/justjavac) 哦哦，看到fs.open也是异步的呢，为什么不在fs.open那儿就停下？","createdAt":1561096601916},{"id":14529,"originId":"5d0c7e6b34bca667bc6e1a56","articleId":2947,"userId":1908,"content":"我的想法是这样：写文件操作会交给线程池处理，处理完了后会进入任务队列里排队直到主线程空闲执行回调函数。所以和这里的现象不相符，按照我的理解应该是\"创建文件，写入hello, 不打印\"。","createdAt":1561099883862},{"id":14530,"originId":"5d0c8a82cdb1f967c1574a6d","articleId":2947,"userId":22,"content":"[@jacksparrow68](/user/jacksparrow68) `fs.open` 创建了文件。但是写入内容实在 open 的回掉函数里面","createdAt":1561102978314},{"id":14531,"originId":"5d0c8bf434bca667bc6e1ac8","articleId":2947,"userId":22,"content":"把循环换成 `process.exit()` 效果是一样的","createdAt":1561103348769},{"id":14532,"originId":"5d0c8c39cdb1f967c1574a75","articleId":2947,"userId":3933,"content":"[@jacksparrow68](/user/jacksparrow68) open 是异步函数，不代表走到 open 的位置就得停下，open 内部也有同步操作的\r\n\r\nhttps://github.com/nodejs/node/blob/master/lib/fs.js#L412-L435","createdAt":1561103417935},{"id":14533,"originId":"5d0c8e4734bca667bc6e1add","articleId":2947,"userId":22,"content":"[@lanlonggang](/user/lanlonggang) 就是因为 open 没有停下所有才新建了文件啊。打开(新建)文件的操作是同步的，但是写入内容的操作是异步的。","createdAt":1561103943015},{"id":14534,"originId":"5d0c925ecdb1f967c1574aa4","articleId":2947,"userId":3933,"content":"[@justjavac](/user/justjavac) 回复三楼的。","createdAt":1561104990849},{"id":14535,"originId":"5d0c985fcdb1f967c1574b0a","articleId":2947,"userId":22,"content":"[@lanlonggang](/user/lanlonggang) 你把我都绕晕了，正在下载 node 源码，准备编译调试一下。我看源码的理解，`fs.writeFile` 是异步的，`fs.open` 是异步的。`fs.writeFile` 执行了，`fs.open` 也执行了，但是 `fs.writeFile` 的 `callback` 没有执行，`fs.open` 的 `callback` 也没有执行。","createdAt":1561106527024},{"id":14536,"originId":"5d0cc01ecdb1f967c1574c71","articleId":2947,"userId":1908,"content":"[@justjavac](/user/justjavac) 嗯。 10楼好像可以解释得通了。open的callback放到任务队列里等待主线程空闲才会执行writeFd。所以文件是有了也打开了，但是主线程没空。","createdAt":1561116702538},{"id":14537,"originId":"5d0c439534bca667bc6e17e4","articleId":2948,"userId":358,"content":"自己试下不就知道了。\r\n\r\nmaster 有守护的，kill 掉会自动重启。\r\n\r\n但这是逃避问题，接入 AliNode 监控就好了。","createdAt":1561084821030},{"id":14538,"originId":"5d0c4944cdb1f967c1574814","articleId":2948,"userId":1923,"content":"[@atian25](/user/atian25) 已经试过了，没有重启worker。。问题也查到了已经，只是以后想让线上稳定点而已。。。","createdAt":1561086276223},{"id":14539,"originId":"5d0c501bcdb1f967c157487f","articleId":2948,"userId":358,"content":"线上稳定，主要在于监控，这个是 AliNode 的职责范围。\r\n\r\n至于发现 CPU 100% 自动重启 Worker 这种。。。如果你们的业务不 care 的话，可以自己做。反正就是想办法找到那个 PID，发一个 kill 而已。","createdAt":1561088027354},{"id":14540,"originId":"5d0c693034bca667bc6e197e","articleId":2948,"userId":1923,"content":"[@atian25](/user/atian25) 多谢大神回复，还想问下这件事情放哪里做比较好，agent里定时检测，还是写schedule呢，还是说直接脱离egg，在linux里写相关监控比较好？","createdAt":1561094448180},{"id":14541,"originId":"5d09988895fcc914aa26a693","articleId":2949,"userId":1219,"content":"有大神说下怎么处理吗？","createdAt":1560909960546},{"id":14542,"originId":"5d099d541fe902120f320718","articleId":2949,"userId":1862,"content":"小兄弟  \r\n遇到这样的问题得多思考\r\n\r\n解决方法 你可以存一个用户标识与token的关联信息到redis中，重新登录的时候先找有没有这种关系，有的话找到token删除之\r\n","createdAt":1560911188556},{"id":14543,"originId":"5d09b22295fcc914aa26a725","articleId":2949,"userId":831,"content":"老哥，更新redis的时间就行了呀","createdAt":1560916514796},{"id":14544,"originId":"5d09fa411fe902120f3209c6","articleId":2949,"userId":1713,"content":"逻辑上设置为同一个用户永远只有一个token？","createdAt":1560934977262},{"id":14545,"originId":"5d0a0de61fe902120f320a48","articleId":2949,"userId":166,"content":"token 应该在 db 存一份。\r\n登录时候查 db 找到 old token，在 redis 中删掉，再注册新 token。","createdAt":1560940006630},{"id":14546,"originId":"5d0a0fe995fcc914aa26a982","articleId":2949,"userId":545,"content":"express 有个 auth 库，有黑名单机制","createdAt":1560940521433},{"id":14547,"originId":"5d0c4fa734bca667bc6e189f","articleId":2949,"userId":1219,"content":"好的","createdAt":1561087911120},{"id":14548,"originId":"5d0aeb2295fcc914aa26ab67","articleId":2952,"userId":268,"content":"redis可以选择不同的数据库\r\n\r\n\thttps://www.npmjs.com/package/redis\r\n![image.png](//static.cnodejs.org/FmWxv8QrbJzjU2D7kXF2xSDMPiJB)\r\n\r\n\thttps://www.npmjs.com/package/ioredis\r\n![image.png](//static.cnodejs.org/FrHpV77ky1PscsbXcPiquYTwWPAK)\r\n\r\n你如果用的cnode源码部署的话，\r\nhttps://github.com/cnodejs/nodeclub/blob/master/config.default.js#L43\r\n配置文件这里改下`redis_db: 0`这个数值就行了","createdAt":1560996642862},{"id":14549,"originId":"5d0c184334bca667bc6e16b3","articleId":2952,"userId":578,"content":"[@jiangli373](/user/jiangli373)  谢谢兄台 指点！","createdAt":1561073731223},{"id":14550,"originId":"5a5619b9afa0a121784a8af9","articleId":2953,"userId":566,"content":"基本已经确认方案：https://github.com/electron/electron/issues/9459 ，^_^，最后还是靠自己了0.0","createdAt":1515592121485},{"id":14551,"originId":"5d0b2b7f95fcc914aa26ad7f","articleId":2953,"userId":3970,"content":"I met the same issue , would you mind sharing your WX","createdAt":1561013119851},{"id":14552,"originId":"5d039c9e1fe902120f31f1a1","articleId":2954,"userId":3667,"content":"有有相关经验的朋友吗","createdAt":1560517790991},{"id":14553,"originId":"5d03aa0e1fe902120f31f1c4","articleId":2954,"userId":21,"content":"你这个是多久出现一次，假设一天出现一次那么有小时级别的12小时以上的CPU和内存消耗数据么？","createdAt":1560521230501},{"id":14554,"originId":"5d04506d1fe902120f31f278","articleId":2954,"userId":358,"content":"profile 下就完事了","createdAt":1560563821459},{"id":14555,"originId":"5d05a11995fcc914aa2695c6","articleId":2954,"userId":3667,"content":"[@zy445566](/user/zy445566) \r\n隔几天出现一次的\r\n用的阿里云，CPU就是pm2启动的站点占用的","createdAt":1560650009437},{"id":14556,"originId":"5d05a18b1fe902120f31f53c","articleId":2954,"userId":3667,"content":"[@atian25](/user/atian25) \r\n可以具体一些吗","createdAt":1560650123197},{"id":14557,"originId":"5d05adba95fcc914aa269608","articleId":2954,"userId":11,"content":"参考下这个：https://github.com/aliyun-node/Node.js-Troubleshooting-Guide/blob/master/0x05_%E5%AE%9E%E8%B7%B5%E7%AF%87_%E5%88%A9%E7%94%A8%20CPU%20%E5%88%86%E6%9E%90%E8%B0%83%E4%BC%98%E5%90%9E%E5%90%90%E9%87%8F.md","createdAt":1560653242293},{"id":14558,"originId":"5d08989f95fcc914aa26a3ae","articleId":2954,"userId":1285,"content":"请求那块有没有 uncaughtException","createdAt":1560844447621},{"id":14559,"originId":"5d08a7ae95fcc914aa26a47f","articleId":2954,"userId":1493,"content":"是不是node进程内存爆了。node单进程内存占用太多，垃圾回收会疯狂工作，消耗你的cpu。","createdAt":1560848302130},{"id":14560,"originId":"5d09b3351fe902120f3207d7","articleId":2954,"userId":831,"content":"牛皮了，，进来学习一下","createdAt":1560916789139},{"id":14561,"originId":"5d09b55195fcc914aa26a74b","articleId":2954,"userId":831,"content":"小弟学习了下 感觉要看看你的CPU Profile 有没有不好的模块。有的话给它换了","createdAt":1560917329721},{"id":14562,"originId":"5d09b7281fe902120f3207ea","articleId":2954,"userId":831,"content":"[@hyj1991](/user/hyj1991) 给这篇文章点赞","createdAt":1560917800608},{"id":14563,"originId":"5d01f2a61fe902120f31e79c","articleId":2955,"userId":3971,"content":"如果你使用的 Express，可以在 render 函数中通过 callback 参数来捕获异常 https://expressjs.com/en/api.html#res.render 。另外，取深层次嵌套字段可以使用 lodash 的 get 方法，防止字段缺失时出错","createdAt":1560408742229},{"id":14564,"originId":"5d089a7e1fe902120f32042a","articleId":2955,"userId":1899,"content":"[@yuduxyz](/user/yuduxyz)  特别感谢，已经弄好了","createdAt":1560844926640},{"id":14565,"originId":"5d08486895fcc914aa26a15d","articleId":2956,"userId":545,"content":"https://www.jianshu.com/p/e301ded81373  看这个","createdAt":1560823912136},{"id":14566,"originId":"5d08498595fcc914aa26a16a","articleId":2956,"userId":3972,"content":"[@zuohuadong](/user/zuohuadong) 淘宝镜像我知道，我现在是比较烦nvm没法正常安装node开发环境","createdAt":1560824197810},{"id":14567,"originId":"5d084b8295fcc914aa26a17b","articleId":2956,"userId":545,"content":"[@yysmk1234](/user/yysmk1234)  按照这个设置环境变量就行了。（nvm 就会从国内淘宝镜像下载node 了）\r\n这个不是 npm 镜像 ！！！\r\n这个不是 npm 镜像 ！！！\r\n这个不是 npm 镜像 ！！！\r\n\r\n重要的话说三遍。","createdAt":1560824706976},{"id":14568,"originId":"5d084edf1fe902120f320200","articleId":2956,"userId":358,"content":"看这个吧：[科普文：使用 nvs 管理本地 Node.js 版本](https://zhuanlan.zhihu.com/p/63403762)","createdAt":1560825567904},{"id":14569,"originId":"5d075ff11fe902120f31fe64","articleId":2957,"userId":752,"content":"花时间阅读源代码。","createdAt":1560764401898},{"id":14570,"originId":"5d0760901fe902120f31fe71","articleId":2957,"userId":752,"content":"我也是写了快2年的 nodejs 了，应该3年多了，感觉 nodejs 只是个工具，写代码这个东西 学来学去其实都是溯本同源的东西，多向优秀的人学习，比啥都强。","createdAt":1560764560145},{"id":14571,"originId":"5d076fef1fe902120f31fefa","articleId":2957,"userId":90,"content":"此话在理，多看源码，看看别人的骚操作，和玩游戏一样，骚操作有了，就该培养大局观了。","createdAt":1560768495146},{"id":14572,"originId":"5d083e7d1fe902120f3200dc","articleId":2957,"userId":21,"content":"同意楼上的，但执行楼上操作之前，我建议先修炼基本功。\r\n比如 leetcode是否能随手连续刷过五十道以上，计算机基础和组成原理是否真正了解，设计模式掌握是否能用于日常，领域设计是否融汇贯通。。。等等。\r\n再去看别人的源码，这个时候对你来说才是有最大的获益，你才会发出这样的感叹“卧槽，这不就是XXX。”即使遇到自己不了解也能触类旁通，否则看过自己依旧无法存储消化。\r\n据我观察这基本功问题也是工作了三年的人就开始喊遇到瓶颈却没有意识到的最大原因。","createdAt":1560821373507},{"id":14573,"originId":"5d0842471fe902120f320115","articleId":2957,"userId":2255,"content":"[@MiYogurt](/user/MiYogurt) 是的，读源码可以扩展想法和思维，还有可以感受到别人写的代码和自己的代码的优缺点。我看别人的代码时都是对比自己的想法，取别人的精华修改自己的不足","createdAt":1560822343841},{"id":14574,"originId":"5d0220cb1fe902120f31e997","articleId":2958,"userId":249,"content":"请求对象request里面有,可以看看cookie-parser中间件如何使用，这个包会帮你拦截一下，让你方便取到格式化的cookie对象","createdAt":1560420555835},{"id":14575,"originId":"5d083d5595fcc914aa26a0b7","articleId":2958,"userId":2305,"content":"res.on('end', ()=>{\r\n\t\t\t\tconsole.log(\"on end------\", trunk)//, res.rawHeaders);\r\n\t\t\t\tlet raws = res.rawHeaders;\r\n\t\t\t\tlet index = raws.indexOf('set-cookie');\r\n\t\t\t\tif(index !== -1){\r\n\t\t\t\t\toptions.headers.cookie = raws[index+1];\r\n\t\t\t\t\tconsole.log('set-cookie---', raws[index+1], '--')\r\n\t\t\t\t}\r\n\t\t\t\tresolve(trunk)\r\n\t\t\t})\r\n\t\t\t原始 一点的 可以试试这种","createdAt":1560821077747},{"id":14576,"originId":"5d06e86b95fcc914aa26991a","articleId":2959,"userId":33,"content":"你这第一轮不就把setImmediate输出了吗","createdAt":1560733803843},{"id":14577,"originId":"5d07101695fcc914aa269b68","articleId":2959,"userId":1215,"content":"\r\n任务次序仅在同一轮下比较才有意义。","createdAt":1560743958533},{"id":14578,"originId":"5d083ba81fe902120f3200c0","articleId":2959,"userId":2305,"content":"fs.readFile('./learn.js', () => {\r\n  console.log('io');\r\n});\r\nconst now = Date.now();\r\nwhile(true){\r\n  if(Date.now() - 1000 > now){\r\n    break;\r\n  }\r\n}\r\n\r\nconst immediate = function() {\r\n\treturn new Promise(function(resolve, reject) {\r\n\t\tsetImmediate(resolve);\r\n\t})\r\n}\r\n\r\nconst loop = async function(){\r\n\tfor(let i=0; i<10; i++){\r\n\t\tawait immediate()\r\n\t\tconsole.log(i);\r\n\t}\r\n}\r\n\r\nloop();\r\n楼主可以改一下这段代码运行一下，readFile大概在第七轮循环里边打出来","createdAt":1560820648708},{"id":14579,"originId":"5d07978b95fcc914aa269f8e","articleId":2960,"userId":358,"content":"Egg 代码复用有很多层的，一般通过插件就可以了，可以看下 Egg 渐进式开发那篇[文档](https://eggjs.org/zh-cn/tutorials/progressive.html)。\r\n\r\n上层框架一般是团队里针对某个业务场景做的封装。","createdAt":1560778635333},{"id":14580,"originId":"5d079c8595fcc914aa269fb3","articleId":2960,"userId":3967,"content":"[@atian25](/user/atian25) 是的，就是说这种业务封装的情况。对于业务封装，直接继承似乎也没什么问题？有什么场景是必须用egg推荐的那种扩展框架的方式的吗？","createdAt":1560779909496},{"id":14581,"originId":"5d079e5c1fe902120f31ffbb","articleId":2960,"userId":3967,"content":"[@atian25](/user/atian25) 我的理解egg推荐的方式本质是mixin，从能力上说似乎和继承差不多？所以有些好奇为什么推荐的框架扩展方式不是继承呢？","createdAt":1560780380471},{"id":14582,"originId":"5d07a1561fe902120f31ffd8","articleId":2960,"userId":358,"content":"[@paoloo1995](/user/paoloo1995) \r\n\r\nmixins 是多个的，继承可没办法自由组合。\r\n\r\n上层业务框架的场景，譬如蚂蚁金服的业务，必须用到 N 个 egg 插件，然后还有一些默认值啥的，就可以把这些框架封装为一个框架，给开发者直接使用，这样框架维护者可以很方便的升级框架和管控。\r\n\r\n你把框架理解为是适用于某类场景的插件+默认配置的集合体。\r\n\r\n社区里面有 beidou 和 midway （这个不是标准的 egg 上层框架）这几个上层框架。","createdAt":1560781142609},{"id":14583,"originId":"5d0708651fe902120f31fac4","articleId":2961,"userId":31,"content":"并不能，上面等价于 require 了这个文件，然后获取他的属性描述符，然后赋值给　this.app.Helper.prototype。\r\n要使用 app 得使用 loadFile. loadToApp 或者 CustomLoader 这些, 不过这样就不是挂到 helper 上了\r\n","createdAt":1560741989316},{"id":14584,"originId":"5d070a5e1fe902120f31fad9","articleId":2961,"userId":1218,"content":"[@yviscool](/user/yviscool) 其实我也不知道挂哪合适，，您觉得最佳实践该怎么写呢？","createdAt":1560742494983},{"id":14585,"originId":"5d070a621fe902120f31fadd","articleId":2961,"userId":358,"content":"Helper 本来就是 context 级的对象了，不需要 `createAnonymousContext` （它会丢失上下文的用户信息）\r\n\r\n```js\r\nmodule.exports = {\r\n  async myPost(url, body) {\r\n    return this.ctx.curl(url, { method: 'POST', data: body, ... });\r\n  }\r\n}\r\n```\r\n\r\n一般这种我会写成一个 service 而不是 helper","createdAt":1560742498309},{"id":14586,"originId":"5d070b051fe902120f31fae6","articleId":2961,"userId":1218,"content":"[@atian25](/user/atian25) 大神来啦，是这样，我每次在service发请求会带一些固定的参数，每个curl写下来有点长，，，所以想封装一个统一的post方法","createdAt":1560742661897},{"id":14587,"originId":"5d070c4b95fcc914aa269b25","articleId":2961,"userId":358,"content":"我的意思是你加一个  XXService，其他 Service 都调用它，或者提供一个 BaseService 基类。\r\n\r\n如果很常用的话，直接挂到 ctx 也未尝不可。\r\n\r\n另外，有个 `config.httpclient.request` 可以用来设置全局的默认配置。","createdAt":1560742987096},{"id":14588,"originId":"5d07328495fcc914aa269cba","articleId":2961,"userId":1218,"content":"[@atian25](/user/atian25) 菜比明白啦哈哈哈，感谢","createdAt":1560752772511},{"id":14589,"originId":"5d06e5d91fe902120f31f89d","articleId":2962,"userId":545,"content":"基于 egg/ts 的类似于 nest.js 的 AOP 思想框架~\r\n\r\n现在用的人不算多，nest.js 目前依然是这类框架的主流。 但也看好 midway","createdAt":1560733145020},{"id":14590,"originId":"5d06f1171fe902120f31f957","articleId":2962,"userId":109,"content":"https://midwayjs.org/midway/","createdAt":1560736023897},{"id":14591,"originId":"5d06faea1fe902120f31fa1c","articleId":2962,"userId":89,"content":"GMTC大会Node.js专场，会请midwayjs作者来讲，可以现场提问\r\n\r\n在说一下作者，张挺是淘宝Node.js一号位，对于集团Node.js应用治理，数据采集，框架开发，function runtime等研究的非常深，有员外之称，https://github.com/midwayjs  下的项目绝大部分都出自员外之手，实力强悍，去年GMTC就邀请他来讲过，今年90分钟，相信大家一定会非常过瘾的。\r\n\r\n阿里内部egg为主，迁移到ts，最好的选择只有midway，已经有大量项目迁移到midway了。有朋友问过我，midway最大的好处是什么？我回答是兼容egg生态。这在国内是非常重要的。egg本身很稳定足够强大，大量插件，再加上ts和aop等特性，是一套非常优秀的解决方案。\r\n","createdAt":1560738538138},{"id":14592,"originId":"5d070bae1fe902120f31faf9","articleId":2962,"userId":358,"content":"[@i5ting](/user/i5ting) 张员外 么~ 懂架构吗？ 肚子还是那么大么？😺\r\n\r\n到时候让他回答下 midway 的架构是啥哈~ 最近老看到有小朋友质疑，我比较笨，也不懂架构是啥意思。","createdAt":1560742830383},{"id":14593,"originId":"5d0329a21fe902120f31ee82","articleId":2963,"userId":31,"content":"stream pipe ?","createdAt":1560488354843},{"id":14594,"originId":"5d03397f1fe902120f31ef21","articleId":2963,"userId":261,"content":"这个有点麻烦，因为 Excel (xlsx) 文件本质上是很多 XML 组成的压缩包，因此导出 Excel 其实是两个步骤：\r\n\r\n1. 在内存里操作生成 XML（由于 XML 操作涉及到很多的回溯操作所以这一步用 Stream 不太现实）\r\n2. 将 XML 打成压缩包（这一步一般都采用 Stream）\r\n\r\n因此，如果第一步就导致 crash 那估计通用的工具都不可行，不过你可以根据规范自己通过操作文件的形式生成 xml，但这种速度一般很慢。\r\n\r\n> 这是我们写的导出 Excel 的工具：[https://github.com/d-band/better-xlsx](https://github.com/d-band/better-xlsx)，你可以试一下会不会 crash。另外 Excel 规范见：[http://www.ecma-international.org/publications/standards/Ecma-376.htm](http://www.ecma-international.org/publications/standards/Ecma-376.htm)","createdAt":1560492415996},{"id":14595,"originId":"5d033b6595fcc914aa269028","articleId":2963,"userId":31,"content":"[@helloyou2012](/user/helloyou2012) \r\n也就是说想用 stream 追加，还得加载之前的 xml 数据？不能通过 stream 慢慢写？","createdAt":1560492901823},{"id":14596,"originId":"5d03aba11fe902120f31f1d8","articleId":2963,"userId":43,"content":"同一个sheet最多支持65536条数据，超过65536的部分，你可以再创建一个sheet页啊","createdAt":1560521633126},{"id":14597,"originId":"5d03bd9095fcc914aa269279","articleId":2963,"userId":743,"content":"[ejsExcel](https://github.com/sail-sail/ejsExcel)","createdAt":1560526224302},{"id":14598,"originId":"5d0440e31fe902120f31f254","articleId":2963,"userId":40,"content":"[@CodeofGame](/user/CodeofGame) Excel2007 版本以后最多支持100万行数据，其实一般10万行数据内存就爆了","createdAt":1560559843016},{"id":14599,"originId":"5d044cd01fe902120f31f267","articleId":2963,"userId":31,"content":"[@ZhangDianPeng](/user/ZhangDianPeng)  试试这个 [xlsx-writestream](https://npm.taobao.org/package/xlsx-writestream)","createdAt":1560562896739},{"id":14600,"originId":"5d04520e95fcc914aa2692f8","articleId":2963,"userId":40,"content":"[@yviscool](/user/yviscool) [exceljs](https://www.npmjs.com/package/exceljs) 这个支持stream，感觉可以。","createdAt":1560564238897},{"id":14601,"originId":"5d03638495fcc914aa269144","articleId":2964,"userId":354,"content":"上一个中间件的 next 没执行吧?","createdAt":1560503172990},{"id":14602,"originId":"5d0389ce95fcc914aa2691e4","articleId":2964,"userId":3975,"content":"[@cctv1005s](/user/cctv1005s) 你好呢    谢谢你回答我   我中间件就没有几个，所以也不应该上一个中间件没执行吧  你看能帮我看看不![1_K8C{EXV{]TGAF8DAG4F6A.png](//static.cnodejs.org/FoS3LE6_A9LQWL4wvXjrP8gJhUAl)","createdAt":1560512974024},{"id":14603,"originId":"5d038a451fe902120f31f130","articleId":2964,"userId":3975,"content":"[@cctv1005s](/user/cctv1005s) ![AF9HAOJS}3VPGJFURD)JH%S.png](//static.cnodejs.org/FpXhpgQqeTcR8AVVXiAaP2PCGlYk)感觉就很简单的代码  上传音频文件  有时候就不执行   ","createdAt":1560513093322},{"id":14604,"originId":"5d032c2d1fe902120f31eeaa","articleId":2965,"userId":3940,"content":"怕是少不了脚本转换这一步...","createdAt":1560489005389},{"id":14605,"originId":"5d03678795fcc914aa269163","articleId":2965,"userId":3701,"content":"建议先直接修改数据库里的表结构，把相应的的字段改为Date类型。如果是线上的大表不方便修改的话，在mongoose的Schema定义这里，对fooData加一个getter\r\n```\r\nvar FooSchema = new Schema({\r\n  fooDate: {\r\n    type: String,\r\n    unique: true,\r\n    required: true,\r\n\tget: function() {\r\n\t\t// TODO 字符串转为时间格式\r\n\t}\r\n  }\r\n  }\r\n```","createdAt":1560504199198},{"id":14606,"originId":"5d005b0395fcc914aa267eb0","articleId":2966,"userId":1933,"content":"http?  https ? ","createdAt":1560304387514},{"id":14607,"originId":"5d006d1595fcc914aa267fb0","articleId":2966,"userId":578,"content":"[@Yangk030208](/user/Yangk030208)  http的，https的还要申请","createdAt":1560309013275},{"id":14608,"originId":"5d0081ca95fcc914aa26810d","articleId":2966,"userId":578,"content":"刚申请了SSL，已经开启 https了。试验一段时间看看啦","createdAt":1560314314890},{"id":14609,"originId":"5d0314e21fe902120f31eddd","articleId":2966,"userId":578,"content":"不行HTTPS 还是被注入垃圾广告，立竿见影的方式 还是得添加 验证码\r\n我奇怪的是 这边 Cnode社区怎么没被人注入垃圾广告？","createdAt":1560483042384},{"id":14610,"originId":"5d0345031fe902120f31efa7","articleId":2966,"userId":545,"content":"[@pangguoming](/user/pangguoming)  谷歌验证码可以用","createdAt":1560495363658},{"id":14611,"originId":"5d02ed431fe902120f31ebc8","articleId":2967,"userId":79,"content":"这个还得靠找女朋友锻炼吧😄😄","createdAt":1560472899459},{"id":14612,"originId":"5d02f3b295fcc914aa268d0e","articleId":2967,"userId":3535,"content":"提高自己，赚更多的钱","createdAt":1560474546660},{"id":14613,"originId":"5d03028e95fcc914aa268e26","articleId":2967,"userId":59,"content":"围绕让别人舒服，一系列解决方案","createdAt":1560478350727},{"id":14614,"originId":"5d03075b1fe902120f31ed4b","articleId":2967,"userId":21,"content":"[@liangtongzhuo](/user/liangtongzhuo) \r\n挺对，我做下补充。\r\n和人相处，可以根据这个层次递进。\r\n* 和人相处第一层：让别人心里舒服  \r\n* 和人相处第二层：让自己心里舒服 \r\n* 和人相处第三层：让别人心里舒服，也让自己心里舒服","createdAt":1560479579628},{"id":14615,"originId":"5d02231c95fcc914aa268aac","articleId":2968,"userId":11,"content":"```html\r\n<script>\r\n  var x = \"#{x}\";\r\n  var y = \"#{y}\"\r\n</script>\r\n```","createdAt":1560421148219},{"id":14616,"originId":"5d02487d1fe902120f31ea99","articleId":2968,"userId":3978,"content":"[@hyj1991](/user/hyj1991) 这样console.log(x) 出来是'#{x}' ,不是test","createdAt":1560430717749},{"id":14617,"originId":"5d024a4195fcc914aa268ba1","articleId":2968,"userId":3978,"content":"[@hyj1991](/user/hyj1991) 哦哦 如果SCRIPT跟HTML写在同一页这样可以,但我想要分开写,用<script src=\"/javascripts/index.js\" type=\"text/javascript\"></script>\r\n另外打的话 这样就会变’#{x}’ ,该如何解决?","createdAt":1560431169751},{"id":14618,"originId":"5d02ee4f1fe902120f31ebd5","articleId":2968,"userId":545,"content":"模板引擎传这种方式就不要考虑了。\r\n前后端分离的方式， ajax 请求最方便。","createdAt":1560473167128},{"id":14619,"originId":"5d02edcc95fcc914aa268cd9","articleId":2969,"userId":545,"content":"搜下 frpc 做内网透传~","createdAt":1560473036133},{"id":14620,"originId":"5d025e5995fcc914aa268c17","articleId":2970,"userId":358,"content":"不是写的很清楚了么，没有权限","createdAt":1560436313300},{"id":14621,"originId":"5d0262f895fcc914aa268c2f","articleId":2970,"userId":3219,"content":"[@atian25](/user/atian25) 你好，可否说得再具体点？因为我已经是root了","createdAt":1560437496370},{"id":14622,"originId":"5d02ed9d1fe902120f31ebce","articleId":2970,"userId":545,"content":"[@flamesnow](/user/flamesnow)  看gyp 第一句，root 没权限创建文件夹~\r\nlinux的一些建议：\r\n1. 使用nvm 安装node.js\r\n2. 别在 /root 目录下干任何事，一般选择 /home 或者 /data","createdAt":1560472989479},{"id":14623,"originId":"5cf8de0695fcc914aa266c28","articleId":2971,"userId":109,"content":"第一个试试这样：\r\n···\r\n...\r\n... userItem.map(\r\nreturn User.findOne(...)\t// 去掉 await\r\n···\r\n\r\nps: 你不贴源码，别人你修改很不方便。","createdAt":1559813638397},{"id":14624,"originId":"5cf8df3b1fe902120f31cc39","articleId":2971,"userId":3979,"content":"[@waitingsong](/user/waitingsong) 好的 ！ 谢谢 我贴上啦","createdAt":1559813947925},{"id":14625,"originId":"5cf8e1201fe902120f31cc70","articleId":2971,"userId":109,"content":"试试这个：\r\n```\r\n await Promise.all(userItem.map(item=>{\r\n\t\t  return User.findOne({\r\n\t\t\t  uid:item.uid\r\n\t\t  })\r\n\t\t  \r\n\t  }))\r\n\r\n```","createdAt":1559814432000},{"id":14626,"originId":"5cf8e1bb95fcc914aa266c63","articleId":2971,"userId":3979,"content":"[@waitingsong](/user/waitingsong) 我试了一下 好像没多大变化 跟之前的时间差不多长","createdAt":1559814587580},{"id":14627,"originId":"5cf8e46695fcc914aa266c7e","articleId":2971,"userId":109,"content":"那你在最里层迭代里打个时间戳日志看看","createdAt":1559815270154},{"id":14628,"originId":"5cf8efe81fe902120f31ccbf","articleId":2971,"userId":50,"content":"是不是数据库连接不稳啊，除了map里面多余了await，感觉没什么不对的，但就算多了await，影响应该也不大啊，诡异。。。","createdAt":1559818216219},{"id":14629,"originId":"5cf8f04f1fe902120f31ccc7","articleId":2971,"userId":268,"content":"可能是数据库连接或者缓存的问题吧，你试下这样子\r\n```js\r\nasync function test(){\r\n\t  let userItem=await User.find({},{uid:1,_id:0}).limit(10)\r\n\t  console.time('程序耗时1')\r\n\t   for(var item of userItem){\r\n\t       await User.findOne({\r\n\t           uid:item.uid\r\n\t       })\r\n\t  }\r\n\t  console.timeEnd('程序耗时1')\r\n\t  console.time('程序耗时2')\r\n\t  await Promise.all(userItem.map(async item=>{\r\n\t\t  let user=await User.findOne({\r\n\t\t\t  uid:item.uid\r\n\t\t  })\r\n\t\t  return user\r\n\t  }))\r\n    console.timeEnd('程序耗时2')\r\n}\r\n```\r\n你看下这个输出。\r\n或者不要查数据库，使用sleep暂停看下\r\n```js\r\nfunction sleep(time) {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      return resolve();\r\n    }, time);\r\n  });\r\n}\r\n\r\nasync function test() {\r\n  const userItem = await User.find({}, '_id').limit(10);\r\n  console.time('程序耗时1');\r\n  for (const item of userItem) {\r\n    await sleep(1000);\r\n  }\r\n  console.timeEnd('程序耗时1');\r\n  console.time('程序耗时2');\r\n  await Promise.all(userItem.map(async item => {\r\n    const user = await sleep(1000);\r\n    return user;\r\n  }));\r\n  console.timeEnd('程序耗时2');\r\n}\r\n```\r\n","createdAt":1559818319132},{"id":14630,"originId":"5cf91dd81fe902120f31cd23","articleId":2971,"userId":3979,"content":"[@jiangli373](/user/jiangli373) 我发现如果是在里面做fetch请求 promise.all就很快 做数据库操作就很慢","createdAt":1559829976458},{"id":14631,"originId":"5cf9340a95fcc914aa266d43","articleId":2971,"userId":3979,"content":"[@jiangli373](/user/jiangli373) 我试了下sleep发现是正常的 \r\n```\r\n \t forof程序耗时: 10002.123ms  \r\n  \t promiseAll程序耗时: 1000.107ms\r\n```\r\n但是一查数据库就不一样了 promise.all查询完感觉总是卡住一阵子才结束 不知道为什么？","createdAt":1559835658306},{"id":14632,"originId":"5cf93bba95fcc914aa266d60","articleId":2971,"userId":3979,"content":"[@DuJiming](/user/DuJiming) 我也觉得 但是为什么for of就是好的 promise.all方法查完数据后会卡住好久 才返回 好奇怪啊啊啊啊","createdAt":1559837626906},{"id":14633,"originId":"5cfa8a5395fcc914aa266ef3","articleId":2971,"userId":109,"content":"估计是lz的mongo那儿有问题吧。","createdAt":1559923283690},{"id":14634,"originId":"5cfa980495fcc914aa266f03","articleId":2971,"userId":90,"content":"原生的 async/await 记得国外有篇文章分析在Promise.all参数数组比较大的情况下，不如用第三方的库比如bluebird","createdAt":1559926788570},{"id":14635,"originId":"5cfb20e195fcc914aa266f6a","articleId":2971,"userId":3979,"content":"[@waitingsong](/user/waitingsong) 我也觉得诶，我这个mongo是连的本地的 🌚你有遇到过这样的问题嘛","createdAt":1559961825512},{"id":14636,"originId":"5cfb3d9f95fcc914aa266f8b","articleId":2971,"userId":109,"content":"[@liufeisprit](/user/liufeisprit) 没用过 mongo","createdAt":1559969183516},{"id":14637,"originId":"5cfdbc0695fcc914aa267349","articleId":2971,"userId":268,"content":"贴下连接mongodb的代码看看呢","createdAt":1560132614140},{"id":14638,"originId":"5cfe00691fe902120f31d539","articleId":2971,"userId":50,"content":"[@lzszone](/user/lzszone) 这个`for in`中的`t`是计数吧，不是遍历`timeouts`吧，你输出下`t`试试呢","createdAt":1560150121733},{"id":14639,"originId":"5cfe057d95fcc914aa2675a1","articleId":2971,"userId":649,"content":"[@DuJiming](/user/DuJiming) ...删了...丢人...退坛:(\r\n不知道答案...","createdAt":1560151421689},{"id":14640,"originId":"5cfe11bd1fe902120f31d615","articleId":2971,"userId":50,"content":"[@lzszone](/user/lzszone) 别别，当我没说。。。","createdAt":1560154557787},{"id":14641,"originId":"5cff120e95fcc914aa267971","articleId":2971,"userId":1937,"content":"mongodb 连接池调大点。","createdAt":1560220174446},{"id":14642,"originId":"5d0115f41fe902120f31e3a8","articleId":2971,"userId":3979,"content":"[@jiangli373](/user/jiangli373) \r\n```\r\n\tconst mongoose = require('mongoose')\r\n\texports.connect = (DB_URL) => {\r\n    return new Promise((resolve, reject) => {\r\n        let maxConnectTimes=0\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            mongoose.set('debug', true)\r\n        }\r\n        mongoose.connect(DB_URL)\r\n        mongoose.connection.on('disconnected', (err) => {\r\n            console.log('disconnected',err)\r\n            if(maxConnectTimes<5){\r\n                mongoose.connect(DB_URL)\r\n            }else{\r\n                throw new Error('数据库挂了')\r\n            }\r\n        });\r\n        mongoose.connection.on('error', err => {\r\n            console.log('error',err)\r\n            maxConnectTimes++\r\n            if(maxConnectTimes<5){\r\n                mongoose.connect(DB_URL)\r\n            }else{\r\n                throw new Error('数据库挂了')\r\n            }\r\n        });\r\n        mongoose.connection.once('open', data => {\r\n            console.log('mongodb connected success')\r\n            resolve()\r\n        });\r\n    })\r\n}\r\n```","createdAt":1560352244892},{"id":14643,"originId":"5d0118291fe902120f31e3b3","articleId":2971,"userId":3979,"content":"[@htoooth](/user/htoooth) 我就十条测试数据还要设置这个吗 默认就是五个连接池吧？ 你有遇到过这样的嘛？","createdAt":1560352809623},{"id":14644,"originId":"5d01ac9d1fe902120f31e4a9","articleId":2971,"userId":26,"content":"promise.all意思应该是将[]Promise一并全部执行，你这里把具体的user给return了，all(）里面不是[]promise，这样我不确定有没有问题，另外，正常的用法来说promise.all()是并行的，而你的for里面await是串行的，就是一个是一下子全放入队列等待resolve，另一个是运行完一个才运行下一个。我认为你那个map也是可以的，并且也是并行的，一下子就把所有操作放入队列，而这样，有可能就是你的mongo数据库方面的问题，导致时间长。而for的方法是串行的，某种原因导致这样做会更快，反正两种方式是不同的。","createdAt":1560390813367},{"id":14645,"originId":"5d01ae671fe902120f31e4cf","articleId":2971,"userId":268,"content":"[@liufeisprit](/user/liufeisprit) 试试查询的时候改成5条看看呢，尝试不同的查询条数，看下时间对比","createdAt":1560391271368},{"id":14646,"originId":"5d0203b395fcc914aa26894e","articleId":2971,"userId":3979,"content":"[@jiangli373](/user/jiangli373) 五条也是 时间是比十条快 但是还是比for循环慢了很多 主要是感觉数据都查完了 但是会卡住很久才返回","createdAt":1560413107592},{"id":14647,"originId":"5d01db2295fcc914aa26877b","articleId":2972,"userId":3981,"content":"换一个linux系统来跑这个命令","createdAt":1560402722436},{"id":14648,"originId":"5d01f4181fe902120f31e7b7","articleId":2972,"userId":50,"content":"你在windows上跑linux命令吗，还有`child_process`是内置的不用安装啊","createdAt":1560409112323},{"id":14649,"originId":"5cf0937c4036f24194cf83c3","articleId":2973,"userId":3701,"content":"https://github.com/fatedier/frp     不过这个是go语言实现的，你想用node实现的话，可以做个参考","createdAt":1559270268112},{"id":14650,"originId":"5cf09e5052ccb64168ba92a5","articleId":2973,"userId":3076,"content":"搜索内网穿透","createdAt":1559273040694},{"id":14651,"originId":"5cf0cec11fe902120f31ae94","articleId":2973,"userId":200,"content":"如果你不是非要用`node`来解决，可以尝试了解下`ssh tunnel`：\r\n![network.png](//static.cnodejs.org/FkaVIZohAEL03HdM95_NstQXeAw0)","createdAt":1559285441854},{"id":14652,"originId":"5cf23cbd1fe902120f31b297","articleId":2973,"userId":3154,"content":"内网穿透","createdAt":1559379133027},{"id":14653,"originId":"5cf33fa595fcc914aa2653f2","articleId":2973,"userId":1677,"content":"### 链式端口转发\r\n\r\n**本地端口转发**与**远程端口转发**结合起来使用，可以进行链式转发。假设A主机在公司，B主机在家，C主机为远程云主机。A主机上运行了前文的Node.js服务，需要在B主机上访问该服务。由于A和B不在同一个网络，且A主机没有独立公共IP地址，所以无法直接访问服务。\r\n\r\n通过本地端口转发，将发送到B主机3000端口的请求，转发到远程云主机C的2000端口。\r\n\r\n```bash\r\n# 在B主机登陆远程云主机C，并进行本地端口转发\r\nssh -L localhost:3000:localhost:2000 root@103.59.22.17\r\n```\r\n\r\n通过远程端口转发，将发送到远程云主机C端口2000的请求，转发到A主机的3000端口。\r\n\r\n```bash\r\n# 在A主机登陆远程云主机C，并进行远程端口转发\r\nssh -R localhost:2000:localhost:3000 root@103.59.22.17\r\n```\r\n\r\n这样，在主机B可以通过访问[http://localhost:3000](http://localhost:3000)来访问主机A上的服务。\r\n\r\n```shell\r\n# 在主机B访问主机A上的服务\r\ncurl http://localhost:3000\r\nHello Fundebug\r\n```\r\n\r\n博客全文：[玩转SSH端口转发](https://blog.fundebug.com/2017/04/24/ssh-port-forwarding/)","createdAt":1559445413115},{"id":14654,"originId":"5cf527df1fe902120f31bc75","articleId":2973,"userId":845,"content":"npm i ngrok -g","createdAt":1559570399211},{"id":14655,"originId":"5cf6791f1fe902120f31c1f0","articleId":2973,"userId":2578,"content":"nginx + autossh","createdAt":1559656735040},{"id":14656,"originId":"5cf6935a95fcc914aa266260","articleId":2973,"userId":59,"content":"libp2p 应该也可以","createdAt":1559663450213},{"id":14657,"originId":"5cffb29d1fe902120f31dd13","articleId":2973,"userId":703,"content":"能实现，但不是很容易。。你可以这么想：\r\n\r\n假设 家里电脑上QQ，公司电脑也上QQ，那么，家里电脑可以用QQ远程控制公司的电脑，用公司的电脑访问公司的内网服务器。","createdAt":1560261277701},{"id":14658,"originId":"5d00b7b795fcc914aa268292","articleId":2973,"userId":1276,"content":"ssh 隧道比较靠谱，建立端口映射，ngrok开源的版本貌似只支持http协议","createdAt":1560328119838},{"id":14659,"originId":"5d011c3695fcc914aa268513","articleId":2973,"userId":1932,"content":"多谢大家回复，最后选择了5楼提供的方法，用了两行命令就好了。要求不是太高就不折腾了。","createdAt":1560353846971},{"id":14660,"originId":"5ce640a052ccb64168ba6c1f","articleId":2974,"userId":545,"content":"是不是使用了  一些平台的编译文件。\r\n试试先用 ncc 打包，再用 pkg 打包成二进制。\r\n\r\nncc 我们打包没问题","createdAt":1558593696199},{"id":14661,"originId":"5ce6947652ccb64168ba6f05","articleId":2974,"userId":3982,"content":"[@zuohuadong](/user/zuohuadong) 谢谢，我用本地的html socket访问pkg打包的application,算是跨域访问吗？因为访问API是没有问题的。\r\n增加了 \r\n> export class RedisIoAdapter extends IoAdapter {\r\n\r\n    createIOServer(port: number, options?: any) {\r\n        const option = {\r\n            handlePreflightRequest: (req, res) => {\r\n                const headers = {\r\n                    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n                    'Access-Control-Allow-Origin': '',\r\n                    'Access-Control-Allow-Credentials': true,\r\n                };\r\n                console.log(headers);\r\n                res.writeHead(200, headers);\r\n                res.end();\r\n            },\r\n        };\r\n        return super.createIOServer(port, option);\r\n    }\r\n> }\r\n还是解决不了问题。","createdAt":1558615158363},{"id":14662,"originId":"5d00f89f1fe902120f31e365","articleId":2974,"userId":3982,"content":"\"pkg\": {\r\n    \"assets\": [\r\n      \"node_modules/@nestjs/websockets/**/*\"\r\n    ]\r\n  }","createdAt":1560344735853},{"id":14663,"originId":"5d00ca7b95fcc914aa2683b0","articleId":2975,"userId":358,"content":"至少把 Node 文档都了解下有哪些能力再回来写 Node.js 吧。。。。\r\n\r\n- https://nodejs.org/api/http.html#http_http_request_options_callback\r\n- https://www.npmjs.com/package/urllib","createdAt":1560332923618},{"id":14664,"originId":"5d00ea841fe902120f31e33d","articleId":2975,"userId":3701,"content":"简单来说你就是想用node发送http post请求呗，给你推荐两个常用的\r\n*  https://www.npmjs.com/package/request\r\n*  https://www.npmjs.com/package/axios  \r\n\r\n**PS**： 想要用好node，还是得把基础打好，听一楼大佬说的，起码先过一遍文档","createdAt":1560341124677},{"id":14665,"originId":"5cec867852ccb64168ba801e","articleId":2976,"userId":3984,"content":"network面板","createdAt":1559004792548},{"id":14666,"originId":"5cec980352ccb64168ba80ad","articleId":2976,"userId":1933,"content":"。。。。。。。\r\n你的5800个积分怎么来的。。","createdAt":1559009283494},{"id":14667,"originId":"5d0089cf1fe902120f31e07a","articleId":2976,"userId":368,"content":"[@nunnly](/user/nunnly) 不是搜xhr请求，是搜xhr请求的response内容，network里面搜不了吧？","createdAt":1560316367112},{"id":14668,"originId":"5d00c07e95fcc914aa2682ff","articleId":2976,"userId":21,"content":"[@Yangk030208](/user/Yangk030208) \r\n还好我积分清零过，不然不敢提问题了😂","createdAt":1560330366882},{"id":14669,"originId":"5cfdc73e1fe902120f31d373","articleId":2977,"userId":158,"content":"antd 版本换个低点吧！\r\n还有点建议，如果是中后台系统，建议angular4+，react一时爽，一直重构一直爽，别成码农了哈，低成本迭代和服务客户才是关键","createdAt":1560135486259},{"id":14670,"originId":"5cfe679995fcc914aa267839","articleId":2977,"userId":1741,"content":"一般默认装latest，能跑起来就不用管","createdAt":1560176537312},{"id":14671,"originId":"5cfed8361fe902120f31d87b","articleId":2977,"userId":3985,"content":"跑不起来啊， 然后 直接 NPM start  失败 有一些JS 没有。","createdAt":1560205366924},{"id":14672,"originId":"5d008f7395fcc914aa268163","articleId":2977,"userId":2578,"content":"react-sticky-table@1.2.0 需要 react 15\r\nantd@3.18.2  需要 react 16\r\n\r\n可以看一下 react-sticky-table 是否有技术 react 16的版本，有的话，安装指定版本就可以了。\r\n或把 antd的版本降到 可以使用 react 15 版本的就可以了。","createdAt":1560317811825},{"id":14673,"originId":"5ccc06895a5bae6e07812958","articleId":2978,"userId":21,"content":"杭州这里公积金可以在离职换现，社保就不知道了。\r\n但医保可以在当地用，往年医保可以换补药。","createdAt":1556874889654},{"id":14674,"originId":"5ccc4dbb776fb66e0d1719fe","articleId":2978,"userId":98,"content":"医保有用，公积金可以取出来的，失业险也有点用处，但我去年明明符合领失业金的条件却因为各种限制最终没领到，工伤和生育也是有用处的，养老目前来看我是觉得能少交就少交，几十年后的事情鬼知道以后什么样，现在996制度加上各种食品安全问题环境污染，能不能活到领养老金那天还不知道呢，再说了，养老这个还是得靠自己，像我房东年轻时在广州买下几套房，现在六十多了啥也不用干一个月收几万租比领养老金强多了，还隔段时间就来抄水表电表，每个人的房租还不是同一天收，他说放假不带孙子闲得没事干","createdAt":1556893115437},{"id":14675,"originId":"5ccd0592776fb66e0d171ab0","articleId":2978,"userId":368,"content":"[@zengming00](/user/zengming00) 因为各种限制最终没领到，是哪些限制呢？","createdAt":1556940178565},{"id":14676,"originId":"5ccd0926776fb66e0d171abc","articleId":2978,"userId":98,"content":"[@chapgaga](/user/chapgaga) 比如，居住证，这真的是个非常坑爹的玩意","createdAt":1556941094008},{"id":14677,"originId":"5ccdb497776fb66e0d171c20","articleId":2978,"userId":368,"content":"[@zengming00](/user/zengming00) 住这么久了，没证？","createdAt":1556984983890},{"id":14678,"originId":"5cce3c3d5a5bae6e07812c64","articleId":2978,"userId":98,"content":"[@chapgaga](/user/chapgaga) 以前没觉得这玩意有用，后来才去办的，到现在还没办下来，从登记到办下来要至少半年","createdAt":1557019709252},{"id":14679,"originId":"5cce4ff6776fb66e0d171d82","articleId":2978,"userId":368,"content":"[@zengming00](/user/zengming00) 没证为啥能交钱，但是取不出钱：（","createdAt":1557024758747},{"id":14680,"originId":"5cce7d6b5a5bae6e07812ec0","articleId":2978,"userId":98,"content":"[@chapgaga](/user/chapgaga) 公司交的呀，反正就是交钱没门槛，要用了就各种条件各种证明","createdAt":1557036395763},{"id":14681,"originId":"5d00897f1fe902120f31e075","articleId":2978,"userId":368,"content":"[@zengming00](/user/zengming00) 你房东的房子都是哪些年买的呢","createdAt":1560316287815},{"id":14682,"originId":"5cfe25d095fcc914aa2676c4","articleId":2979,"userId":3988,"content":"我也遇到过这样的问题，然后在fastify的onClose  hook里主动断开redis的链接就没有问题了\r\n","createdAt":1560159696168},{"id":14683,"originId":"5cff09e31fe902120f31d8fa","articleId":2979,"userId":3987,"content":"[@zhangmingfeng](/user/zhangmingfeng) 大佬，我看了文档，onClose是服务器停止时触发的吧，但是这是长期的服务，用pm2启的不能停。我现在的状况是压测完了，已经没有用户在请求node程序，也没有日志产出，程序依旧在运行，但cpu还是在占用中，理论上讲如果没有用户调接口，cpu应该占用率很少，内存应该释放掉吧。","createdAt":1560218083647},{"id":14684,"originId":"5cfdeb3595fcc914aa267486","articleId":2980,"userId":3989,"content":"单文件上传是这样的：\r\nconst filestream = await ctx.getFileStream();\r\n参数在：filestream.fields 中取值；\r\n另外 file 字段需要放在其他参数的最后。","createdAt":1560144693336},{"id":14685,"originId":"5cfd147795fcc914aa26720d","articleId":2982,"userId":1259,"content":"![1.png](//static.cnodejs.org/FlMUwHzwApAAJtPVzV0_kIvnMV0m)\r\n再仔细看了一下官网，貌似是这个原因，但是我不知道我这种 **?payload[page]=1&payload[limit]=3** 写法算不算嵌套。\r\n","createdAt":1560089719710},{"id":14686,"originId":"5cf8cd5e1fe902120f31cba6","articleId":2984,"userId":22,"content":"Node \r\nhttps://github.com/TypeStrong/ts-node#how-it-works","createdAt":1559809374149},{"id":14687,"originId":"5cf8e0dc1fe902120f31cc63","articleId":2984,"userId":109,"content":"ts-node 每次都要先编译一次。肯定会慢些。","createdAt":1559814364207},{"id":14688,"originId":"5b59a39d2860af042a2178eb","articleId":2986,"userId":109,"content":"要等for循环结束后才处理response。循环次数越大当然log时间就越长。\r\n你试试循环个十万……","createdAt":1532601245532},{"id":14689,"originId":"5b59a489673571454c633c36","articleId":2986,"userId":3993,"content":"[@waitingsong](/user/waitingsong) for循环里面是异步的，for循环1000  结束时间用了650ms，10w没试出来，1w的话循环时间大概是6412ms，响应时间从5s 逐渐增加 到 40s。 log出来的时间也是从某个请求发出开始到结束的，应该和for循环没关系。\r\n大佬，还有其他分析建议吗？","createdAt":1532601481131},{"id":14690,"originId":"5b59db74b71aedfe4c12651e","articleId":2986,"userId":109,"content":"lz 你同时把 now 值打印出来瞧瞧","createdAt":1532615540892},{"id":14691,"originId":"5b59e790673571454c633c48","articleId":2986,"userId":3993,"content":"[@waitingsong](/user/waitingsong) 时间now是函数内的时间，我看了，没有问题，太长我就不粘贴出来了，for 循环1000里面 某一次前10条\r\n```\r\n132 'start:1532618207904   end:1532618208595  use:691'\r\n764 'start:1532618208348   end:1532618208927  use:579'\r\n857 'start:1532618208413   end:1532618208988  use:575'\r\n889 'start:1532618208454   end:1532618209079  use:625'\r\n9 'start:1532618207826   end:1532618209484  use:1658'\r\n15 'start:1532618207829   end:1532618209494  use:1665'\r\n5 'start:1532618207825   end:1532618209496  use:1671'\r\n16 'start:1532618207829   end:1532618209496  use:1667'\r\n10 'start:1532618207827   end:1532618209497  use:1670'\r\n39 'start:1532618207839   end:1532618209502  use:1663'\r\n```","createdAt":1532618640490},{"id":14692,"originId":"5b59f5fc673571454c633c4a","articleId":2986,"userId":1215,"content":"你得关注下 node-fetch 具体是怎么实现得","createdAt":1532622332851},{"id":14693,"originId":"5b5a7aa5b71aedfe4c12652d","articleId":2986,"userId":109,"content":"[@THROFHR](/user/THROFHR) 为啥不前后各取几条然后比较下 start 差异呢。然后再瞧瞧第一条的end和最后一条的start","createdAt":1532656293837},{"id":14694,"originId":"5b5a88c22860af042a217909","articleId":2986,"userId":866,"content":"这种情况用golang的gorutine吧，如果不会就是用队列，用process.nextTick每次请求几百个，如果嫌队列不够效率，就用cluster-worker多进程的模式并行处理吧\r\n慢的原因主要在于远程网络访问及对方应用的并发响应效率","createdAt":1532659906956},{"id":14695,"originId":"5b5a8a5158db3ccf66a44faf","articleId":2986,"userId":3993,"content":"[@JacksonTian](/user/JacksonTian) 源码我看过了，没有做啥特殊处理，默认的http 或 https 的 agent.maxSockets都是 Infinity，不过刚刚发现 agent 里面有个 maxFreeSockets 默认为256 ，不知是不是受它影响，正在验证中....","createdAt":1532660305981},{"id":14696,"originId":"5b5a8b00673571454c633c54","articleId":2986,"userId":3993,"content":"[@waitingsong](/user/waitingsong) 第一条没有可比性啊，要比是最后一条，10，100，1000的最后一条start时间相差不过600ms，但是10和1000的end时间相差40s+","createdAt":1532660480715},{"id":14697,"originId":"5b5a8e80b71aedfe4c126533","articleId":2986,"userId":3993,"content":"[@phper-chen](/user/phper-chen) 不用go的原因是应为这不是写压力测试，另外一个是对go不熟悉，因为要结合一下业务需求，感觉写sh脚步调用也不合理。\r\ncluster-worke的话没试过，谢谢你的建议，我去尝试一下。\r\n最后一个关于：慢的原因主要在于远程网络访问及对方应用的并发响应效率，我感觉应该不是，我对那个测试API，然后我看到响应时间平均都是500ms左右。带宽应该也不是问题，远端测试跑的是linode ，我本地网络上行也有20MB/S 下行100MB/S","createdAt":1532661376362},{"id":14698,"originId":"5b5a9d4d2860af042a217910","articleId":2986,"userId":2896,"content":"你在机器上看下端口数是否上涨？是否开启http连接复用","createdAt":1532665165281},{"id":14699,"originId":"5b5aaa42673571454c633c5a","articleId":2986,"userId":3994,"content":"使用长连接，别每次都是新建连接，用过superagent的长连接\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1532668482772},{"id":14700,"originId":"5b5aaf77673571454c633c5c","articleId":2986,"userId":3993,"content":"[@luyufa](/user/luyufa) 不太懂你说的 QAQ,怎么看端口是否上涨，是否开启http连接复用是指设置 keep-alive吗？","createdAt":1532669815290},{"id":14701,"originId":"5b5ab02e673571454c633c5e","articleId":2986,"userId":3993,"content":"[@MedusaLeee](/user/MedusaLeee) 长链接需要服务器配合吧？","createdAt":1532669998806},{"id":14702,"originId":"5b5ab0a358db3ccf66a44fb5","articleId":2986,"userId":752,"content":"内部调用用 rpc，类似于echo双向的这种，假如是请求，大规模的话建议单独弄一台机器，或集群发送请求，通过 rpc 接受结果。 浏览器开多了网页也卡啊。\r\n\r\n并发其实 erlang 不错。","createdAt":1532670115495},{"id":14703,"originId":"5b5ab4ef2860af042a217914","articleId":2986,"userId":3993,"content":"[@MiYogurt](/user/MiYogurt) 集群是最后的方法，但我感觉单机是能处理的。我用的是Linode 4G的一个节点，即是并发发出1w的请求，网络和IO都不应该存在瓶颈，应该是哪的默认配置限制的。","createdAt":1532671215782},{"id":14704,"originId":"5b5ad92f58db3ccf66a44fcb","articleId":2986,"userId":3994,"content":"[@THROFHR](/user/THROFHR) 嗯，http1.1默认开启keep alive\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1532680495981},{"id":14705,"originId":"5b5adc4f58db3ccf66a44fce","articleId":2986,"userId":866,"content":"https://segmentfault.com/a/1190000014044351?_ea=3955660\r\n","createdAt":1532681295715},{"id":14706,"originId":"5b5b141a2860af042a217922","articleId":2986,"userId":2896,"content":"[@THROFHR](/user/THROFHR) 我曾经遇到过node使用request发请求越来越慢 是因为request需要使用httpAgent开启代理来进行连接复用，感觉你这个很像。端口的话不记得了自己百度就一个命令","createdAt":1532695578804},{"id":14707,"originId":"5b5b16772860af042a217924","articleId":2986,"userId":3993,"content":"[@phper-chen](/user/phper-chen) 谢谢","createdAt":1532696183365},{"id":14708,"originId":"5b5b18bf2860af042a217926","articleId":2986,"userId":3993,"content":"[@luyufa](/user/luyufa) 我设置了Agen keep-alive为true 确实快了很多，但感觉还是无法满足我的使用场景。","createdAt":1532696767422},{"id":14709,"originId":"5b5e7955b71aedfe4c12659d","articleId":2986,"userId":862,"content":"是不是系统fd数量的限制？执行 ulimit -n看看","createdAt":1532918101456},{"id":14710,"originId":"5b5fe0532860af042a2179f7","articleId":2986,"userId":3993,"content":"[@royalrover](/user/royalrover) 应该不是 ulimit -n 显示 1048576  感觉已经够大了","createdAt":1533010003448},{"id":14711,"originId":"5b63fc5058db3ccf66a451be","articleId":2986,"userId":518,"content":"有没有看 调的api同时并发请求 会变慢 只是猜想","createdAt":1533279312146},{"id":14712,"originId":"5b6414d57271129a2f32a739","articleId":2986,"userId":862,"content":"建议你直接使用原生http模块请求下对比测试，http也不要使用agent，很好奇导致这个情况的原因。","createdAt":1533285589322},{"id":14713,"originId":"5b73867c58db3ccf66a454a5","articleId":2986,"userId":3993,"content":"[@weizhuanhua](/user/weizhuanhua) 没有读懂你的表达......","createdAt":1534297724762},{"id":14714,"originId":"5b7386a758db3ccf66a454a7","articleId":2986,"userId":3993,"content":"[@royalrover](/user/royalrover) 试过了，结果也是一样，最后还是没找出问题所在","createdAt":1534297767996},{"id":14715,"originId":"5b73b71a792f59ae501bf9ac","articleId":2986,"userId":3076,"content":"http://fibjs.org/docs/guide/about.md.html\r\n看“拥抱高能”那段\r\n估计应该是async的问题导致的，你试试用其他异步方式会不会变快？","createdAt":1534310170792},{"id":14716,"originId":"5b73b9517271129a2f32a99f","articleId":2986,"userId":3899,"content":"Node的Http模块封装了TCP，底层会复用TCP连接，这个时候会有一个全局的Agent代理，这个代理对同一域名的请求并发为5，超过这个数字的请求会被放到等待队列里。 如果想要扩大这个并发请求数，要么是自己定义一个agent将maxSockets设置为一个更大的数字，要么是直接就把Http的option设置为agent：false。\r\n\r\n为了验证这个问题，你可以把你的agent打印出来看看，里边会有sockets和requests，分别表示并发数和等待的请求数，要是requests数量较大，说明就是这个原因。","createdAt":1534310737744},{"id":14717,"originId":"5b7991cfa210553a0cde2a55","articleId":2986,"userId":3995,"content":"如果你这些请求没有严格的前后顺序的话，应该用Promise.all将所有请求放到一起进行请求，然后再await\n\n来自酷炫的 [CNodeMD](https://github.com/TakWolf/CNode-Material-Design)","createdAt":1534693839842},{"id":14718,"originId":"5b7aa458c52ad1482eb940ad","articleId":2986,"userId":3993,"content":"[@tinycold](/user/tinycold) 应该不是这里，nodejs http现在默认是maxSockets: Infinity，我打印出来看了一下\r\n     maxSockets: Infinity,\r\n     maxFreeSockets: 256,\r\n     maxCachedSessions: 100,\r\n之前也尝试了设置 maxSockets ，maxFreeSockets  10000，没有效果","createdAt":1534764120820},{"id":14719,"originId":"5b7aa47e632c7f422e5b7ffe","articleId":2986,"userId":3993,"content":"[@hwj128911](/user/hwj128911) 时间还是一样长","createdAt":1534764158543},{"id":14720,"originId":"5b7aa795944cb8340c27e206","articleId":2986,"userId":3993,"content":"[@suyuanhan](/user/suyuanhan) 没有肉眼可见的变化，直接用cb的方式","createdAt":1534764949469},{"id":14721,"originId":"5cf52f3e1fe902120f31bcad","articleId":2986,"userId":2870,"content":"楼主解决了没有？","createdAt":1559572286276},{"id":14722,"originId":"5cf5e8c91fe902120f31beb1","articleId":2986,"userId":3154,"content":"百度应该有 频率请求限制；你自己本地开个服务（多进程模式）替换百度看看效果！","createdAt":1559619785964},{"id":14723,"originId":"5cf5fd2295fcc914aa265f5c","articleId":2986,"userId":2030,"content":"await 放 for 循环里","createdAt":1559624994562},{"id":14724,"originId":"5cf8be7f1fe902120f31cb33","articleId":2986,"userId":1937,"content":"没有办法解决，你相当于在测本地的qps。10000并发不出现延迟，最理想就起10000个node 来进行处理，但是这也受限cpu 的个数。所以想要稳定，就把任务分块执行。你想要并发增加就增加机器，增加核，多起进程。同时满足就分块和加硬件。","createdAt":1559805567351},{"id":14725,"originId":"5cf891151fe902120f31ca01","articleId":2987,"userId":752,"content":"https://github.com/zeit/pkg\r\nhttps://www.npmjs.com/package/winreglib\r\nhttps://www.npmjs.com/package/winreg","createdAt":1559793941639},{"id":14726,"originId":"5cf8b98895fcc914aa266ae8","articleId":2987,"userId":3982,"content":"electron","createdAt":1559804296011},{"id":14727,"originId":"5cf88b6895fcc914aa2669b3","articleId":2988,"userId":358,"content":"> 一是操作极其繁琐\r\n\r\n你的那个方案，不就是 SLB 的基本功能么？ 这种一般都是运维平台搞定了，尤其是 docker k8s 后。\r\n\r\n> 二是 Eggjs 服务器里有初始化和定时任务\r\n\r\n不太明白你的问题是什么，集群情况下，本来 Egg 就应该不应该依赖单机的初始化和定时任务。","createdAt":1559792488138},{"id":14728,"originId":"5cf88c5a95fcc914aa2669c3","articleId":2988,"userId":3992,"content":"正常操作，习惯就好，我也是这样。两台服务器，阿里负载关闭v1 ，然后copy文件，pm2 restart app   负载开启v1,关闭v2 然后copy文件，pm2 restart app  开启v2","createdAt":1559792730344},{"id":14729,"originId":"5cf88d961fe902120f31c9ef","articleId":2988,"userId":2023,"content":"[@atian25](/user/atian25) 关于一，确实是这样的，考虑用 SLB 来处理了。关于二，初始化和定时任务要拆分出来作为独立服务的话，那么原项目中的一些 Service 和 Model 层要抽取出来作为组件来复用吧，是不是可以这样理解呢？","createdAt":1559793046822},{"id":14730,"originId":"5cf8a69a1fe902120f31ca50","articleId":2988,"userId":358,"content":"[@Sirormy](/user/Sirormy) 不是，我的意思是没看懂你 二 的问题是啥\r\n\r\n我猜测你指的『定时任务』是想集群调度，一个集群中只有一台机器的一个 worker 执行任务。这个是必须依靠第三方服务来实现的（如 redis 分布式锁或消息服务之类的）来扩展 egg-schedule","createdAt":1559799450679},{"id":14731,"originId":"5cf8ac2e1fe902120f31ca8d","articleId":2988,"userId":2023,"content":"[@atian25](/user/atian25) 天大说的对，这边有一个 worker 每天在跑一些数据计算和入库，如果两台机器的话，就会有两个 worker 在跑，控制好唯一 worker 是这块的技术点，我再去翻翻 schedule 相关的文档，谢谢提供思路。","createdAt":1559800878451},{"id":14732,"originId":"5cef82a84036f24194cf7e96","articleId":2989,"userId":3996,"content":"[建议大家不要使用node-schedule这个模块了吧，被坑了一下](https://cnodejs.org/topic/5b58414b8d66b90b2b7384a7)","createdAt":1559200424512},{"id":14733,"originId":"5cef82cc4036f24194cf7ea0","articleId":2989,"userId":2003,"content":"[@GreyPrinceZote](/user/GreyPrinceZote) 那请问用什么模块来代替呢\r\n","createdAt":1559200460495},{"id":14734,"originId":"5cef844e4036f24194cf7ec5","articleId":2989,"userId":3997,"content":"看需求吧，node-schedule我一直都在用，不过我都是直接用cron格式写","createdAt":1559200846504},{"id":14735,"originId":"5cef87ad4036f24194cf7f05","articleId":2989,"userId":158,"content":"你用了cluster？","createdAt":1559201709100},{"id":14736,"originId":"5cef8aa64036f24194cf7f35","articleId":2989,"userId":2003,"content":"[@zhhb](/user/zhhb) 没有啊\r\n","createdAt":1559202470687},{"id":14737,"originId":"5cef930452ccb64168ba8e11","articleId":2989,"userId":3996,"content":"[@quanpf2481](/user/quanpf2481) \r\n`/cron/GenNum.js` 这里面是啥东西啊","createdAt":1559204612140},{"id":14738,"originId":"5cefa5624036f24194cf80d6","articleId":2989,"userId":2003,"content":"[@GreyPrinceZote](/user/GreyPrinceZote) 跟这个里面的内容有关系嘛？？？就是一般的任务啊","createdAt":1559209314915},{"id":14739,"originId":"5cf07f9352ccb64168ba911c","articleId":2989,"userId":3864,"content":"later.js","createdAt":1559265171594},{"id":14740,"originId":"5cf0e46995fcc914aa264f85","articleId":2989,"userId":2003,"content":"[@iflet](/user/iflet) 什么意思？？？","createdAt":1559290985163},{"id":14741,"originId":"5cf0f92e95fcc914aa26501a","articleId":2989,"userId":3864,"content":"[@quanpf2481](/user/quanpf2481) 用laterjs取代node-schedule","createdAt":1559296302823},{"id":14742,"originId":"5cf10b621fe902120f31b072","articleId":2989,"userId":103,"content":"你部署两台服务器吗","createdAt":1559300962406},{"id":14743,"originId":"5cf759551fe902120f31c4df","articleId":2989,"userId":3998,"content":"当前文件被引用了两次，在schedule.scheduleJob前log一下看看","createdAt":1559714133746},{"id":14744,"originId":"5cf7781795fcc914aa2665a4","articleId":2989,"userId":406,"content":"node-schedule 这个package 有bug的。。。这个我以前写过。。。","createdAt":1559722007737},{"id":14745,"originId":"5cf888ad95fcc914aa266994","articleId":2989,"userId":3992,"content":"pm2 start -i 2 ??   还是重复调用？？ 仔细检查检查，我也在用，没啥问题","createdAt":1559791789865},{"id":14746,"originId":"5cecd74252ccb64168ba8260","articleId":2990,"userId":132,"content":"一般是加防盗链，控制请求来源，再加一些混合参数，不能直接使用你的图片， 但是不能防止人家爬虫，反爬虫的话，这个就比较。。。","createdAt":1559025474281},{"id":14747,"originId":"5cece03c52ccb64168ba82bb","articleId":2990,"userId":3999,"content":"[@afacode](/user/afacode) 混合参数指啥，反爬虫就是另外一套东西了","createdAt":1559027772168},{"id":14748,"originId":"5cecf9aa52ccb64168ba83a9","articleId":2990,"userId":132,"content":"https://blog.csdn.net/luyaran/article/details/52572971， 混合参数我想主要是访问有图片的页面加，图片URL静止直接URL访问","createdAt":1559034282585},{"id":14749,"originId":"5cedfba652ccb64168ba86ac","articleId":2990,"userId":3999,"content":"[@afacode](/user/afacode) 好的🙏","createdAt":1559100326472},{"id":14750,"originId":"5cee3eec4036f24194cf79fa","articleId":2990,"userId":867,"content":"有一个办法，一般的爬虫都没有办法，但不是绝对的。\r\n图片保存为base64并经过指定算法加密。客户端请求返回base64，客户端解密（解密代码混淆过）。然后使用canvas画出来。\r\n这样除非爬虫程序使用无头浏览器，使用js来调用canvas的toDataURL方法来获取了。","createdAt":1559117548475},{"id":14751,"originId":"5cee4c0e52ccb64168ba88f2","articleId":2990,"userId":3999,"content":"[@pzzcn](/user/pzzcn) 这个很犀利啊，加大了爬的难度，这样估计也差不多了","createdAt":1559120910776},{"id":14752,"originId":"5cf807f11fe902120f31c839","articleId":2990,"userId":3939,"content":"返回字符串呗，前端解码，不过也没啥大用……要不设置个token字段请求后端判断 token对不对","createdAt":1559758833978},{"id":14753,"originId":"55a0e548419f1e8a23a6427e","articleId":2991,"userId":568,"content":"总感觉是用其他语言的思维来写node","createdAt":1436607816633},{"id":14754,"originId":"55a12409419f1e8a23a642a6","articleId":2991,"userId":4001,"content":"读写数据库消耗大，可以缓存一下\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1436623881863},{"id":14755,"originId":"55a12b55419f1e8a23a642a8","articleId":2991,"userId":1,"content":"总感觉是用其他语言的思维来写 node。","createdAt":1436625749512},{"id":14756,"originId":"55a1382d419f1e8a23a642c0","articleId":2991,"userId":424,"content":"没考虑横向扩展到多服务器模式？","createdAt":1436629037994},{"id":14757,"originId":"55a16993419f1e8a23a642e2","articleId":2991,"userId":4002,"content":"把服务分一分。例如，存储丢给专门的服务处理。逻辑服务器只处理游戏逻辑","createdAt":1436641683507},{"id":14758,"originId":"55a1ab7c419f1e8a23a642ec","articleId":2991,"userId":1568,"content":"每次都需要朝数据库读写这么大的数据么？我觉得你首先要做的是拆分数据，每次读写这么大的数据消耗当然大。\r\n你数据库更新的频率是多少？每个人600k，1500个人要900M，3000人要1.8G，还要再乘以8换算成bits，感觉好大。\r\n能贴下你们机器的参数么？感觉这个机器好牛逼的。\r\n\r\n参考下传奇源代码吧，传奇也是独立进程读写数据库的，进程间使用socket通信，自定义通信协议，不要使用文本格式，数据更新频率和更新范围优化下，如果还不行的话，那就是计算瓶颈，你得换语言，换机器。","createdAt":1436658556057},{"id":14759,"originId":"55a1ca90419f1e8a23a642f9","articleId":2991,"userId":4003,"content":"NODE优势是处理IO,你用他来每次处理180k+的JSON数据转换，JSON转化是非常消耗CPU的，所以应该适当的拆分，重构，NODE尽量少处理逻辑","createdAt":1436666512495},{"id":14760,"originId":"55a1d4c7419f1e8a23a642ff","articleId":2991,"userId":4000,"content":"[@captainblue2013](/user/captainblue2013) \r\n其实你用什么语言都好，到最后为了提高这个承载，思想都是趋于一致的","createdAt":1436669127980},{"id":14761,"originId":"55a1d59c419f1e8a23a64301","articleId":2991,"userId":4000,"content":"[@Acceptedlc](/user/Acceptedlc) \r\n缓存？\r\n1.如果缓存在主进程，那么就会占用本进程内存，而且玩家数据比较大，这样会加大GC的压力，同时直接拉低了同时在线人数（node的heap最大去到1.7G，容不了多少个玩家的数据）\r\n2.如果计划缓存在其他进程，那么就又会回到我上面的的问题（进程间的通讯瓶颈）","createdAt":1436669340289},{"id":14762,"originId":"55a1d68a419f1e8a23a64305","articleId":2991,"userId":4000,"content":"[@leapon](/user/leapon) \r\n横向扩展我们也是做了的，不过是针对没有状态的服务器，比如处理玩家长连接的连接服务器，我们就可以任意扩展他的数量\r\n游戏逻辑服务器中的玩家，是有交互性的，（比如一个玩家要挑战另外一个玩家，却发现这个玩家不在这个进程里，这又会涉及到进程间通讯，也会回到我上面的那个问题中去，而且这样实时性低，对玩家体验不好），而且是有状态的，不像web服务器那么简单，可以很轻松就进行横向扩展；\r\n","createdAt":1436669578461},{"id":14763,"originId":"55a1d6e6419f1e8a23a64307","articleId":2991,"userId":4000,"content":"[@joesonw](/user/joesonw) \r\n现在就这么做啊，但是由于现在需要传输很大的数据， node进程之间的通讯，是使用了json parse 和 stringify来进行序列化成字符串来传输的，但是这两个函数是同步的，所以就出现了瓶颈嘛","createdAt":1436669670980},{"id":14764,"originId":"55a1dabb419f1e8a23a6430c","articleId":2991,"userId":4002,"content":"[@wf744](/user/wf744) 丢redis，或者rabbitmq之类的。另外试试用bson。","createdAt":1436670651549},{"id":14765,"originId":"55a1dbe5419f1e8a23a6430e","articleId":2991,"userId":640,"content":"总感觉是用其他语言的思维来写 node。\r\n爲啥要JSON.stringify 和 JSON.parse","createdAt":1436670949919},{"id":14766,"originId":"55a1de05419f1e8a23a64312","articleId":2991,"userId":4000,"content":"[@jiangzhuo](/user/jiangzhuo) \r\n这个是node的 *child_process*  模块底层使用了 JSON.stringify 和 JSON.parse来进行序列化之后再通过管道进行传输数据， 我们也没办法","createdAt":1436671493196},{"id":14767,"originId":"55a1dec6419f1e8a23a64314","articleId":2991,"userId":4000,"content":"[@joesonw](/user/joesonw) \r\n关键是在丢给redis或者其他任何第三方进程前，都要先进行序列化操作吧（序列化成字符串，或者是 buffer, 网络上只能传输二进制数据)， 所以现在就是瓶颈出现在这个序列化的操作上","createdAt":1436671686267},{"id":14768,"originId":"55a1df23419f1e8a23a64316","articleId":2991,"userId":640,"content":"[@wf744](/user/wf744) 子進程間爲什麼要傳遞這麼多的數據","createdAt":1436671779768},{"id":14769,"originId":"55a1df66419f1e8a23a64318","articleId":2991,"userId":640,"content":"玩家存檔怎麼這麼大","createdAt":1436671846725},{"id":14770,"originId":"55a1df8d419f1e8a23a6431a","articleId":2991,"userId":640,"content":"就算真有這麼大不能增量修改嘛，爲啥要全存","createdAt":1436671885133},{"id":14771,"originId":"55a1e07a419f1e8a23a6431c","articleId":2991,"userId":4000,"content":"[@coordcn](/user/coordcn) \r\n拆分数据比较难，因为本来玩家就是一个整体的对象，你把他的数据进行了拆分，那么肯定不便于后续的开发；\r\n数据库更新的频率是：玩家上线就会读取mongodb 加载玩家的数据；玩家下线或者是意外断线就把玩家的数据写到mongodb中去；\r\n600K是最极端的情况，就是当一个玩家拥有游戏中的所有宠物和装备的情况，但是我们来计算上限肯定就是按照最差的情况去计算；\r\n机器配置不高啊，就是8核 8G内存 非SSD\r\n\r\nnodejs + mongodb， 那么最自然的就是用json来进行数据存储了，所以这个改变的可能性不高\r\n\r\n“参考下传奇源代码吧，传奇也是独立进程读写数据库的”  现在我们也是想把读写数据库独立出来啊，问题就出现在玩家数据很大，序列化操作是同步的（childprocess模块底层代码决定的），瓶颈变成了进程间的通讯\r\n","createdAt":1436672122049},{"id":14772,"originId":"55a1e3e1419f1e8a23a64322","articleId":2991,"userId":1568,"content":"[@wf744](/user/wf744) \r\n\r\n那我是不是可以理解成最极端的情况下，你们的玩家600K数据会在进程间传来传去？\r\n\r\n玩家数据肯定可以拆分的，你们数据库设计有问题，这个必须做拆分，装备，宠物全部都整到一起，还要在进程之间传来传去，这想想也醉了。难道我增加了一件装备，就要将整个人物数据都传一遍？这个也太奢侈了。\r\n\r\n在数据设计上下点功夫吧，拆分是唯一的办法，不然就换语言，3000个人内存都不够。","createdAt":1436672993709},{"id":14773,"originId":"55a20ebf419f1e8a23a64331","articleId":2991,"userId":4000,"content":"[@coordcn](/user/coordcn) \r\n\r\n“那我是不是可以理解成最极端的情况下，你们的玩家600K数据会在进程间传来传去？” 可以这么理解，整个流程是：\r\n玩家上线就会读取mongodb 加载玩家的数据；玩家下线或者是意外断线就把玩家的数据写到mongodb中去；所以在这个过程中，玩家做的任何操作都是操作内存，如果进行拆分，那么玩家登陆要加载多次数据库，同时玩家下线，保存也要保存多次数据库，这样的话，当游戏逻辑服务器把玩家数据丢给数据库代理进程的时候，虽然每次传输的数据是小了，但是频率高了（因为被拆分了，需要传输多次），而且总的传输数据量是没有变的\r\n","createdAt":1436683967560},{"id":14774,"originId":"55a22129419f1e8a23a64340","articleId":2991,"userId":1568,"content":"[@wf744](/user/wf744) \r\n\r\n非要一起传的话，用socket都没有用，这么大的数据，即便用自己的协议，解码也消耗蛮多的。\r\n\r\n我个人建议，可以试着拆分下，看效果，然后取得平衡。玩家肯定有相同的数据，能压缩的压缩，能合并的合并，目标3000，搞到2000，尽力了就可以了。每种数据更新频率不同，这个要好好利用，原来那种一股脑儿更新的做法会把一些死数据也更新了，如果能根据实际更新数据来做更新，肯定比原理的方法节省。\r\n\r\nv8已经很快，但必须要承认，这是跟其他脚本语言相比的快，当然还有更快的luajit。再快的脚本跟原生的比都要差一个数量级。node的优势在IO吞吐，计算密集型的，如果设计不好，很容易出瓶颈的。\r\n\r\n","createdAt":1436688681725},{"id":14775,"originId":"55a249ea419f1e8a23a64368","articleId":2991,"userId":3650,"content":"不适用childprocess,使用pm2自带cluster模式,进程间使用rpc通讯","createdAt":1436699114210},{"id":14776,"originId":"55a24c8e419f1e8a23a6436b","articleId":2991,"userId":3293,"content":"进程间通信直接传obj－ －。。为什么还要json一下。。","createdAt":1436699790266},{"id":14777,"originId":"55a278c6419f1e8a23a6438f","articleId":2991,"userId":4000,"content":"[@MiguelValentine](/user/MiguelValentine) \r\n\r\n请参考《深入浅出Node》或者node源码，你传输的是obj，但是底层仍然会自动json来进行传输的","createdAt":1436711110960},{"id":14778,"originId":"55a278e8419f1e8a23a64391","articleId":2991,"userId":4000,"content":"[@o6875461](/user/o6875461) \r\n\r\nrpc通讯 原理还是管道或者是socket吧，还是逃不过这个问题","createdAt":1436711144104},{"id":14779,"originId":"55a27976419f1e8a23a64394","articleId":2991,"userId":4000,"content":"[@coordcn](/user/coordcn) \r\n\r\n兄弟，你说的是有道理，只能尽量试试拆分，确实想不到更好的办法了；\r\n确实是有很多是死数据，每次玩家进行游戏，都是更新那么一部分的数据，大部分数据其实都是不更新的\r\n","createdAt":1436711286490},{"id":14780,"originId":"55a27cf7419f1e8a23a6439d","articleId":2991,"userId":4003,"content":"你们开始架构设计有问题，架构师的修行还是不够啊","createdAt":1436712183301},{"id":14781,"originId":"55a30ce3419f1e8a23a643e3","articleId":2991,"userId":3650,"content":"[@wf744](/user/wf744) rpc socket应该就不用json.parse和json.stringify操作了,不满足你的要求?","createdAt":1436749027236},{"id":14782,"originId":"55a32a4b419f1e8a23a64417","articleId":2991,"userId":4000,"content":"[@o6875461](/user/o6875461) \r\n是不是用json.parse和json.stringify ，这个还真需要确认一下","createdAt":1436756555419},{"id":14783,"originId":"55a32a60419f1e8a23a6441a","articleId":2991,"userId":4000,"content":"[@28509993](/user/28509993) \r\n\r\n你有什么更好架构的想法，不妨说来听听哦","createdAt":1436756576385},{"id":14784,"originId":"55a332be419f1e8a23a64429","articleId":2991,"userId":4004,"content":"说点自己的经验吧，我们也是TCP服务器，交互内存管理使用了redis（纯缓存），例如排行榜这种东西，落地使用的是mysql（连接池），网络包使用protobufjs正/反序列化（比json好不少，对于大数字压缩，量和效率都有优化，毕竟字节流），游戏是通服大区的，没有使用cluster，服务器间交互这块做了一个中央TCP服务器，自己封的RPC，用于各服务器间的数据交换以及全服的一些定时器刷新，例如：竞技场一周重置一次啊，以及做下通服数据redis到mysql的定时落地。\r\n游戏服务器玩家内存这块，自己写的缓存管理器，使用引用计数方式管理。跑不了，上线全加载，在线期间定时刷，断线立即存储。之前实测的吞吐还是比楼主的要高些，主要测试的是1500玩家在线，定时刷回DB，我之前定得是5秒一次，内存没爆，CPU基本80+，但是相应其他操作倒是不卡的说，正式上线根据以往的经验，我们一般都是3分钟刷一次，所以我这样测试算是变相压力型测试，增大了他的IO压力。P.S. 我们玩家数据不如楼主这么多的了，但是也有几百K吧，具体没有算过。\r\n关于楼主的问题，感觉以下几个方面可以进行优化，纯个人观点，有不对的地方，麻烦大家指出啊...\r\n第一：楼主一次性进行较大IO操作从db加载到内存，可以考虑一次上线操作分多次数据查询拼接玩家数据对象，毕竟这样能够更好利用node本身tick的机制，你多次小IO，从响应层面，我认为应该优于前者，至少不会造成这么久的阻塞。这就是所谓的数据分离。（有问题请指出）。\r\n第二：感觉使用cluster对于web服务器而言这种无状态的会很好，然游戏服务器这块我认为不是特别合适啊。有大量的内存操作，无法共享对于后续的开发会带来不少问题呢。除此之外就是楼主诟病的Json问题，实质上这步操作是多余的，理论上来看，我加载好了直接使用当然是最好，然后楼主还多了一步传输，虽然从架构上分离了这个负载，实质上由于数据IO这块的影响依然没有解决，这种不必要的数据交换，如果能够优化掉当然会好很多。我是不太建议使用cluster，特别是对于游戏服务器，他本身已经耗费了资源去传输他的socket对象，实质上效率有多高，我认为跟你自己写的网络通信来比，肯定是比不过。如果要使用，共享内存这块可以多参考redis，如此你的开发也会省事很多。\r\n以上仅是个人观点，如果有不太好的地方楼主也自行参考。","createdAt":1436758718370},{"id":14785,"originId":"55a37f92f271d52709b0713f","articleId":2991,"userId":1226,"content":"帮顶","createdAt":1436778386765},{"id":14786,"originId":"55a3b6a03ecc81b621bba778","articleId":2991,"userId":4000,"content":"[@sunwenteng](/user/sunwenteng) \r\n\r\n兄弟，你们的游戏是什么类型的？感觉你们的服务器架构跟我们的很不一样啊。我们的是卡牌游戏，有很多个区的，你们的是全服大区，那么你们面临的挑战性感觉大好多啊。\r\n“3分钟刷一次”是定时保存玩家数据的意思吗？如果是保存玩家数据，这时间会不会太短了些？这样服务器压力会很大，80+的CPU占用率是很恐怖的\r\n“第一”点，其实我们是踩过坑的，如果登陆的时候涉及到多个异步操作的话，最好是压缩成一个异步操作，否则登陆的等待时间会更长，会一直出现卡在进入游戏的进度条哪里的，要等很久才能进去，这是我们的切身体会和经验。\r\n“第二”点，我们只有对那些没有状态的服务器才使用cluster模式的，其他有状态的都无法使用，不然就会出现跨服跨进程通讯的情况，成本非常的高，所以现在的想法就是把有状态的服务器中的一些无状态的业务尽量地分离出去，比如处理玩家的socket连接已经被分离出去，还有现在这个读取和保存数据库的业务也想要分离出去一样。这样才能把有状态的服务器的计算能力不断提高，才能容纳更多的玩家。\r\n  “传输他的socket对象”只会在第一次发生，这个性能的损耗基本可以忽略不计；\r\n   redis 可以实现共享内存，但是代价也很大，他的get set都是要先转成字符串先的，所以这个方法遇到的问题，跟我上面遇到的问题是一样的，都要先通过JSON.parse 和 JSON.stringify 来进行对象与字符串之间的转换。","createdAt":1436792480727},{"id":14787,"originId":"55a472003ecc81b621bba80b","articleId":2991,"userId":1629,"content":"让你们架构师先看看网易的pomelo.\r\n觉得自己设计的分分钟完爆就全自己来，我觉得怎么也有可以参考借鉴的地方。","createdAt":1436840448640},{"id":14788,"originId":"55a47a3c3ecc81b621bba822","articleId":2991,"userId":4004,"content":"游戏类型是城建+RPG，仿照的一款国外游戏，因此采用了大区的设计方法，然实质上也是通过内部“分区分服”的做法制作，只是交互这块达到全服交互，因为由于运营这块有风险，所以服务器之后也要支持分区分服，所以架构进行了如此设计。\r\n恩 我们单服架构实质上主要参考的还是TrinityCore的写法来做，这个以前做过端游的童鞋不少应该都看过，楼主可以自行看下。\r\n“3分钟刷一次”这个是以往的开发经验定得时间，80+是我们5秒存一次的结果，只是为了测试压力才设置的时间，实质上这个时间可以根据自己之后的压力进行调整。另外CPU即使达到80+,但是对于内存操作的响应还是没有多少延迟的。例如，我的一个移动操作，仅仅需要改变玩家内存的坐标，那么这个操作响应实质上也是非常快的。\r\n另外跨进程通信确实有不少损伤，但是我们的跨进程通信都是交互业务，但凡交互业务在设计上都有限制，例如竞技场战斗，我们是全服打得，然而对于用户，都会有战斗次数限制，所以，即使这个有不少损伤，但是凡是可以量化的，都不会有问题。\r\n“第一点”，这个问题主要讨论的是上线操作，理论上上线操作属于游戏业务中复杂度以及IO最高的操作，我这里提得数据分离一方面是查询做多次，另一方面如果你们这块数据量实在是非常大，就把这个操作往lazy模式制作，我不知道你们业务结构的复杂度，是否导致你们业务关联度比较高，如果能够拆分，就做懒加载，用到的时候再加载，这样写起来确实蛋疼，但是能够分摊掉你们上线的卡得问题。\r\n“第二点”，这个我比较疑惑不知道你们现在这块为什么要做如此多的分离，首先，玩家在线期间，所有数据CRUD基本都是操作内存，这一块，nodejs的响应和原生c++的响应相差并不多，具体你可以看深入浅出这书上的一些对比。唯一能够大幅度影响nodejs本身性能的就是你有大量的阻塞操作、或者代码块中有较高次数的IO循环，除此之外我暂时没有想到其他。另外，你们如果做了这样的分离，势必对之后编码的复杂度以及设计有提升，写起来我感觉会比较麻烦，无法无脑的编写，不过这个也考验你们主程的设计能力，node本身作为游戏服务器这块是起步阶段，如果设计的过于复杂，日后招人维护都是个问题，所以架构可以设计的复杂，但是在业务的书写这块，最好是无脑方式。\r\n“socket传输”，这块我确实没有过深入研究，句柄共享应该只会有一次，但是不知道之后的数据流通信是否有损失，这个我不知道。\r\n“redis”，他的使用在乎的不是效率代价，使用他是去解决node本身内存瓶颈，1.4G，另外引用redis官网的那句话，当你发现缓存出现效率问题的时候，永远不要质疑redis，因为我们的应用级别是无法让他出现handle不了的时候的。\r\n","createdAt":1436842556452},{"id":14789,"originId":"55a66d155a4b4a86539c2fe3","articleId":2991,"userId":4000,"content":"[@sunwenteng](/user/sunwenteng) \r\n\r\n1.TrinityCore才发现还有这样的游戏服务器框架，可惜C++忘却得差不多了...\r\n2.\"3分钟刷一次\",为什么要保存得那么频繁，我们之前定的是20分钟就保存所有在线玩家一次，但是发现其实没什么用，因为node服务器没有试过挂掉，因为我们在最后捕获了所有的异常，估计唯一出现无法保存的就是断电之类的小概率事件了，由于这个定时保存玩家数据，会给服务器带来一定的压力，所以之后我们索性直接取消了这个定时任务；\r\n3.跨进程通信，我们准备做的跨服战也是用到这个的，还是设计到跨进程传输玩家数据就会遇到我上面那个问题，真是头痛；按你说的，虽然是每个玩家的次数可以限制，但是在线玩家数量你总没有限制吧？所以这个随着在线人数的增加，这终究会是一个问题；\r\n4.“这个我比较疑惑不知道你们现在这块为什么要做如此多的分离”一个服务器的处理能力是有限的对吧？如何扩展这个服务器的承载能力？那么只能是把这个服务器的一些无状态的计算分离到别的进程去，比如如果这个服务器其中一个业务逻辑是计算 “斐波那契数列”，因为它是没有状态的，那么我们就可以很容易可以把这个业务逻辑分离到另外的进程去了，我们现在做的就是这样的工作，比如数据库读取和存储，都是没有状态的，你塞一个玩家的对象给他，那么他就去存储就是了；你给一个玩家ID给他，那么他就直接去数据库读取这个玩家的数据，读取完毕，然后把这个玩家的数据返回来就是了，这些都是没有状态的，这部分的工作，完全是可以分离出去，那么分离出去后，原来的服务器的工作量就轻了，那么承载就肯定是上去了；\r\n\r\n“socket传输”，socket这个只会在connect的时候才会出现多个进程争夺同一个socket的情况，当被某一个进程拿到了这个socket之后，数据传输是完全没有损耗的。\r\n“redis”关于这个，我们暂时没有出现1.4G瓶颈的问题，因为我们玩家下线后，就马上清掉他的缓存了，所以只要内存没有泄露，这个完全没有问题。但是关键是，如果我们使用redis,那么我们现在是在存储到redis前，进行 redisClient.set(xxxxx, playerData)操作钱，转换这个playerData为字符串时有性能问题（playerData这个对象太大了）；","createdAt":1436970261025},{"id":14790,"originId":"55af9eb39594740e76ab3e2c","articleId":2991,"userId":4005,"content":"Node有“不支持共享进程内存”的特点，进行复杂逻辑处理的上限就很快显现出来了。\r\n\r\n所以选择Node做复杂的网络游戏服务器这种应用，感觉考虑多少有些欠妥，难道整个团队都没有会写C的服务器人员。","createdAt":1437572787710},{"id":14791,"originId":"55b08bb8d93890e8206d9bb8","articleId":2991,"userId":4006,"content":"终于发现有跟我一样用node写后端的人了\r\n","createdAt":1437633464473},{"id":14792,"originId":"55b08f57d93890e8206d9bc9","articleId":2991,"userId":4005,"content":"用Node做重逻辑服务器确实是个巨大的技术挑战！针对以上瓶颈，建议如下：\r\n1、重构网络协议；\r\n2、弃用json自行组织数据;\r\n3、最终将游戏逻辑实现多进程分布负载。","createdAt":1437634391966},{"id":14793,"originId":"55b08f89d93890e8206d9bcc","articleId":2991,"userId":4005,"content":"[@wencan](/user/wencan) 厉害！赶快给楼主支个招呀","createdAt":1437634441046},{"id":14794,"originId":"55b09ab6d93890e8206d9be0","articleId":2991,"userId":4006,"content":"[@Antoni1883](/user/Antoni1883) \r\n\r\n我使用node写后端，是因为我的程序是处理数据，需要从网络异步读数据，需要异步写数据到mongodb，需要写mongodb的pipeline和mapreduce，还需要函数式特性做数据处理——其中耗时计算很少\r\n\r\n如果说我有什么好建议给LZ，那就是建议LZ放弃node；或者说拆分程序，node程序只负责其中一块\r\n\r\n[@wf744](/user/wf744) 能不能解释下，为什么要选用node ??难道就因为数据库是mongo???","createdAt":1437637302501},{"id":14795,"originId":"55b09dc7d93890e8206d9be8","articleId":2991,"userId":4005,"content":"[@wencan](/user/wencan) \r\n刚才仔细看了下楼主600K个人数据应该不会频繁在服务器流动，整个游戏过程期间应该少于2次。 否则就有暴力操作数据的嫌疑～\r\n\r\n另外，JSON单对一个客户数据的转换处理就需要消耗55ms，如果加上网络传输一个玩家操作的响应时间至少需要70ms以上，这个游戏类型则一定不会是动作网络游戏敢跑的服务器架构。","createdAt":1437638087068},{"id":14796,"originId":"55b0fc47692e0e7706b365f1","articleId":2991,"userId":4000,"content":"[@Antoni1883](/user/Antoni1883) \r\n\r\n确实如此，没有用之前，主要是看中了异步IO的便捷性\r\n使用node来做重逻辑，务必不能有效率低的代码，不然就很快死翘翘了，对人员的算法，数据结构有一定需求\r\n之前写C的，不过相对C中的多线程，死锁等问题，nodejs还是来得简单多了","createdAt":1437662279118},{"id":14797,"originId":"55b0fcde692e0e7706b365f3","articleId":2991,"userId":4000,"content":"[@wencan](/user/wencan) \r\n\r\n看中的是以下几点：\r\n1.异步IO\r\n2.介绍中号称的高性能\r\n3.生态环境很成熟\r\n4.解析性语言，不需要编译多好啊\r\n","createdAt":1437662430458},{"id":14798,"originId":"55b0fdc4692e0e7706b365f5","articleId":2991,"userId":4000,"content":"[@Antoni1883](/user/Antoni1883) \r\n\r\n恩，600K 是最极端的情况，是当玩家拥有游戏中的所有的资源的情况下的极端情况，现在我们重构了一部分系统，这个体积有所下降了\r\n\r\n对，上线，下线， 整个游戏过程期间应该少于2次，这个数据太大了，就是由于太大了，现在遇到的问题就是把这个”大块头“扔出去给其他进程处理的代价太大了，出现了瓶颈\r\n\r\n确实如此，如果是动作类的，基本是必死无疑，我们的是卡牌游戏，还能接受吧...","createdAt":1437662660708},{"id":14799,"originId":"55b0fe8b692e0e7706b365f9","articleId":2991,"userId":4007,"content":"可否用 protobufjs 去定义通信规则？ -.-","createdAt":1437662859992},{"id":14800,"originId":"55b233b1692e0e7706b36711","articleId":2991,"userId":4000,"content":"[@idreamshen](/user/idreamshen) \r\n目前我们的协议都是直接json，然后转换成字符串，然后buf.writeString的，不知道使用 protobufjs  是否需要大规模的重构","createdAt":1437742001559},{"id":14801,"originId":"55d12313b25bd72150842d87","articleId":2991,"userId":4005,"content":"[@wf744](/user/wf744) \r\n棋牌应用应该没有什么大规模重构的问题。最多是增加些协议相关部分工作量而已。","createdAt":1439769363183},{"id":14802,"originId":"55d13bf9b25bd72150842d9b","articleId":2991,"userId":4008,"content":"建议楼主程序拆分","createdAt":1439775737227},{"id":14803,"originId":"55d18852b25bd72150842dc7","articleId":2991,"userId":4009,"content":"node擅长拉客，你却让他去挖矿！！！楼主加油！！！","createdAt":1439795282477},{"id":14804,"originId":"55d1fbd09bdae50c477e6ec0","articleId":2991,"userId":4010,"content":"cluster不错，国外大一些的项目都是用这个\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1439824848348},{"id":14805,"originId":"55d212399bdae50c477e6ece","articleId":2991,"userId":279,"content":"确实是一个很棘手的问题，我们也在解决。。。","createdAt":1439830585766},{"id":14806,"originId":"55d28e1b9bdae50c477e6ede","articleId":2991,"userId":1568,"content":"[@hainee](/user/hainee) 神回复，精华中的精华！！！","createdAt":1439862299489},{"id":14807,"originId":"55d2b1879bdae50c477e6f0e","articleId":2991,"userId":279,"content":"你这数据太大了吧，，，我们这加上战斗战报，以及玩家信息也才不到70k。 600k。太恐怖了，把数据拆分了吧。。","createdAt":1439871367312},{"id":14808,"originId":"56069e32272b724e5efefcd4","articleId":2991,"userId":4011,"content":"这贴讨论的内容相当充分啊","createdAt":1443274290599},{"id":14809,"originId":"56074f40272b724e5efefce0","articleId":2991,"userId":4000,"content":"偶尔上来逛一下，忽然发现这贴还有人回复，感觉不错，可以结贴了。\r\n上面这个问题是在游戏上线前的一个性能顾虑（但他确实是node多进程通讯间的一个比较麻烦的问题，数据一大就会出现性能上的瓶颈）\r\n我们项目（手游）已经上线了，单服最高同时在线4.5K+，相信可以更高，由于运营策略，同时在线也不需要去到更高就开新服了，4.5K+在线的时候，CPU占用在30%~45%左右，而且这不是node而导致的CPU占用率高，而是游戏逻辑代码写得不够好而导致的(当然没有经过profile分析，我们写的代码确实很多地方都不高效)，所以其实node来应对中小型游戏感觉还是卓卓有余的，大家就不用担忧了，而且配合pm2来进行进程管理，真是非常的方便，上百个服，维护一次就5分钟左右的事情，安全，高效，开发效率也挺高的，而且node还可以比较方便地实现代码热更新，这个还是非常的不错的，如果是中小型游戏，建议大家采用","createdAt":1443319616165},{"id":14810,"originId":"56d555047fc3af3a77db46cf","articleId":2991,"userId":319,"content":"[@wf744](/user/wf744) 大神我想走node服务端开发路线，不知道这条路好走么？pomelo好似停止更新了","createdAt":1456821508804},{"id":14811,"originId":"56d5b7036f57517277f46537","articleId":2991,"userId":4012,"content":"[@wf744](/user/wf744) 所以最后你们是怎么解决这些问题的？","createdAt":1456846595902},{"id":14812,"originId":"56d5c08bbc28a31e7735e785","articleId":2991,"userId":1946,"content":"楼主各种分离的思路很赞，mark一下","createdAt":1456849035886},{"id":14813,"originId":"56d5e8fdbc28a31e7735e78d","articleId":2991,"userId":4013,"content":"一看帖子时间，我猜[@sunwenteng](/user/sunwenteng) 做的应该是clash of kings？","createdAt":1456859389976},{"id":14814,"originId":"56d64895e3889756776c7e6c","articleId":2991,"userId":2953,"content":"虽然lz说可以结贴了，用node写游戏服务器的话这个问题相当普遍，我也说说我的思路吧。\r\n用redis应该能解决楼主的问题\r\nredis> hmset user:id field1 value1 field2 value2 ...\r\n虽然user这个对象可能有几千个属性，但是每次更新的时候其实只需要改变其中很少的几个，根据我的经验，对于卡牌游戏一般不超过10个。\r\n\r\n如果实在需要序列化/反序列化很大的对象，可以使用stream,比如JSONStream。\r\n\r\n\r\n","createdAt":1456883861379},{"id":14815,"originId":"56d679c1bc28a31e7735e7ab","articleId":2991,"userId":4014,"content":"楼主高性能服务器：\r\n1.考虑数据传输，JSON传输实在不可取，建议对数据制定自己的规则 ，就如上面所说的protobuf 或者bytestream 或者fast压缩算法\r\n2.Nodejs确实不是做复杂逻辑运算的料，这块可以使用C++模块扩展功能\r\n3.网易的node游戏框架还是不错的[pomelo](https://github.com/NetEase/pomelo)","createdAt":1456896449221},{"id":14816,"originId":"56d94d23c0fa23473d005f94","articleId":2991,"userId":2539,"content":"可以将大的 JSON 分而治之，看业务情况是否可以划分。","createdAt":1457081635635},{"id":14817,"originId":"56d96d8ac0fa23473d005fa0","articleId":2991,"userId":1178,"content":"用户数据可以用ES6的Proxy，来避免一次传输整个JSON。","createdAt":1457089930578},{"id":14818,"originId":"56da2d08820d3c9b3d63e32f","articleId":2991,"userId":377,"content":"可能是我没做过游戏，我一直没明白为什么是进程间传数，而不是进程间共享数据？\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1457138952944},{"id":14819,"originId":"56da528f7947807f3daf86f7","articleId":2991,"userId":205,"content":"[@wf744](/user/wf744) \r\n\r\n有问题还是要解决问题的, 我读下来问题在于 `JSON.stringify` & `JSON.parse` 是 v8 提供的功能, 这两个函数是在 v8 线程中执行的, 相当于常说的的 while(true) 一段时间去阻塞js执行, event-loop 中其他的事件得不到执行, 就阻塞了~\r\n\r\n所以是要一个 `JSON.parseAsync` 和 `JSON.stringifyAsync` 在 libuv 提供的线程池中去做这个解析操作是吧~如果有 C/C++ 同事, 拿 C/C++ 的json库封装一个?","createdAt":1457148559157},{"id":14820,"originId":"56da577cc0fa23473d005fd4","articleId":2991,"userId":205,"content":"https://github.com/nodejs/node/issues/2031#issuecomment-114285544\r\n\r\n> It is impossible to serialize a V8 object, or convert a string back to a V8 object, off the main thread. This is a limitation of the VM and not something io.js can implement on its own.\r\n\r\n😂\r\n\r\n","createdAt":1457149820843},{"id":14821,"originId":"56da595bc0fa23473d005fd6","articleId":2991,"userId":703,"content":"[@magicdawn](/user/magicdawn) 问题的根本在于nodejs 的进程通信用的是 V8 的 JSON.stringify & JSON.parse 。。。并不是简单提供JSON.parseAsync 和 JSON.stringifyAsync 就能解决的。\r\n\r\n我认为上面说的 “不要整体传输，只更新变化部分” 的思路是可行的。如果非要整体传，应该绕开 nodejs 的进程通信，自己用 C++ Addon 实现进程间通信，这样数据格式就可以自由定制了，比如用更紧凑的二进制等。","createdAt":1457150299496},{"id":14822,"originId":"56da5d8a502596633dc2c38f","articleId":2991,"userId":205,"content":"[@myy](/user/myy) \r\n\r\n> 问题的根本在于nodejs 的进程通信用的是 V8 的 JSON.stringify & JSON.parse 。。。并不是简单提供JSON.parseAsync 和 JSON.stringifyAsync 就能解决的。\r\n\r\nchild_process 里 调用的是, sync 版, 可以再定制一个 child_process2 😂😂😂\r\n前面有人提到 Google 的 protobuf, 可以考虑下","createdAt":1457151370748},{"id":14823,"originId":"56da5d9e502596633dc2c392","articleId":2991,"userId":703,"content":"[@wf744](/user/wf744) 提供一个思路，仅供探讨：自定义二进制的数据格式，然后通过直接读写 stdin, stdout 原始流的方式直接传输，避免JSON.stringify & JSON.parse","createdAt":1457151390280},{"id":14824,"originId":"56da5f5fc0fa23473d005fd9","articleId":2991,"userId":703,"content":"[@magicdawn](/user/magicdawn) 就算是 Async，对于600k+ 的数据量来说，系列化/反序列化 纯计算用的时间还是一样的，只是时间更分散些。。。我感觉这不能从根本上提高多少。。。\r\n根本性的改善，要么是用局部更新方式，再就是用更小更快的格式（二进制）。","createdAt":1457151839674},{"id":14825,"originId":"56da69687947807f3daf86fd","articleId":2991,"userId":1178,"content":"用户数据可以用ES6的Proxy，来避免一次传输整个JSON。","createdAt":1457154408129},{"id":14826,"originId":"56df7512f5d830306e2f0ef1","articleId":2991,"userId":4015,"content":"就算拆分也不见得有用，可能会回到之前的分离出数据库读写前cpu占用高的情况","createdAt":1457485074015},{"id":14827,"originId":"571768203bf746cd50352b22","articleId":2991,"userId":1860,"content":"马克","createdAt":1461151776649},{"id":14828,"originId":"578f51feb78759e813a57ad9","articleId":2991,"userId":807,"content":"马克兔","createdAt":1469010430922},{"id":14829,"originId":"5791c2b5f0d4b46026ba5404","articleId":2991,"userId":476,"content":"马克three","createdAt":1469170357823},{"id":14830,"originId":"58a699effafcf6bf5f32d7b5","articleId":2991,"userId":4016,"content":"mark","createdAt":1487313391441},{"id":14831,"originId":"58d798c96f8b9bf02d1d0b11","articleId":2991,"userId":4017,"content":"[@wf744](/user/wf744) 问下楼主，你们用的node版本是多少？","createdAt":1490524361409},{"id":14832,"originId":"58d9b9286f8b9bf02d1d0b5e","articleId":2991,"userId":4018,"content":"cluster模式 参考下eggjs的进程通信\n 自豪地采用 [CNodeJS ionic](https://github.com/lanceli/cnodejs-ionic)","createdAt":1490663720488},{"id":14833,"originId":"58eb5ae462b12d1b052e7a6d","articleId":2991,"userId":59,"content":"在多进程使用过程中有时候需要在进程间共享缓存一些数据，比如：\r\n\r\nsession数据\r\n数据库查询缓存\r\n有一定时效的信息，比如oauth使用的access_token\r\n常规的缓存机制需要引入第三方模块，如memcached/redis等。node-shared-cache(链接)就是专门解决此类问题的轻量级方案。相比第三方模块，node-shared-cache的优势有：\r\n\r\n无需跨进程通讯，使用共享内存的方式，因而可以同步使用\r\nAPI简单，和操作普通js对象一样的使用方式\r\n超高性能，接近普通js对象操作的速度，每秒300w次查询\r\n支持持久化，进程退出后内容不会清空\r\n\r\n\r\nhttps://cnodejs.org/topic/55755426c4e7fbea6e9a30c8  这个模块共享内存，如果是多台服务器就不行了","createdAt":1491819236420},{"id":14834,"originId":"58ec6e1a3145ae3f25fe6190","articleId":2991,"userId":2705,"content":"好贴要马克","createdAt":1491889690528},{"id":14835,"originId":"58ed5bfca92d341e48cfe776","articleId":2991,"userId":488,"content":"感觉数据结构设计有问题，缓存有问题，建议重构","createdAt":1491950588494},{"id":14836,"originId":"58ed84c6e54976e847e09f64","articleId":2991,"userId":484,"content":"[@wf744](/user/wf744) 建议还是使用mysql的分表去把数据拆分开，否则数据整个对象存储，存取都是一个负担","createdAt":1491961030092},{"id":14837,"originId":"58ed84e0c749f63d48fe93b6","articleId":2991,"userId":484,"content":"[@miss61008596](/user/miss61008596) 整个大对象存储 肯定不合适的","createdAt":1491961056886},{"id":14838,"originId":"58f58c18dcf05024569408c9","articleId":2991,"userId":688,"content":"高负载的计算可以考虑异构，采用rust或者go来做","createdAt":1492487192673},{"id":14839,"originId":"5aa4064519b2e3db18959c7f","articleId":2991,"userId":2534,"content":"[@Vizwind](/user/Vizwind) redis写起来稍微麻烦点 比如你同时需要操作2个玩家数据  给A玩家+ 100金币 给B玩家 -100金币 此时你是不是需要些redis lua 脚本了呢，如果这样的逻辑过多 实际上应该也是很多的吧，写起来会很麻烦把。 ","createdAt":1520698949897},{"id":14840,"originId":"5aad5914ce4a27f8675271ec","articleId":2991,"userId":2534,"content":"[@dou4cc](/user/dou4cc) 经过我测试 es6 proxy 代理 用户数据操作 来达到标记修改了哪些部分 实测性能太差了。。一秒钟的读写操作 只有30W","createdAt":1521309972359},{"id":14841,"originId":"5ad9fc60464b1bfa6b4257f9","articleId":2991,"userId":1178,"content":"[@ipengyo](/user/ipengyo) proxy 不止是做 observable，还可以 lazy（如果你接受 await everywhere 的话）。","createdAt":1524235360328},{"id":14842,"originId":"5ada220cba60fcc66b7b86fe","articleId":2991,"userId":889,"content":"马克","createdAt":1524245004295},{"id":14843,"originId":"5adc9e5b3edb2aff6be85ea1","articleId":2991,"userId":2534,"content":"[@dou4cc](/user/dou4cc) 我最终放弃了 感觉有点得不偿失 与普通对象比 性能损耗有点大。","createdAt":1524407899792},{"id":14844,"originId":"5adca0b73edb2aff6be85ea4","articleId":2991,"userId":1178,"content":"[@ipengyo](/user/ipengyo) 性能不会差啊？你 lazy 了吗？","createdAt":1524408503748},{"id":14845,"originId":"5adfdc2da86ec1f308ec24d2","articleId":2991,"userId":2534,"content":"[@dou4cc](/user/dou4cc) 没有哦 请问大哥有demo 可以参考一下你的写法吗","createdAt":1524620333629},{"id":14846,"originId":"5b96842f37b3005a0b0e6d7d","articleId":2991,"userId":4019,"content":"马克","createdAt":1536590895336},{"id":14847,"originId":"5cf7900b1fe902120f31c6af","articleId":2991,"userId":854,"content":"马克，这个帖子的讨论真的是精华","createdAt":1559728139620},{"id":14848,"originId":"5cf23c0395fcc914aa2652aa","articleId":2992,"userId":3154,"content":"自己试试就知道了","createdAt":1559378947315},{"id":14849,"originId":"5cf23f3f1fe902120f31b2a9","articleId":2992,"userId":1887,"content":"试试，觉得没有区别。。","createdAt":1559379775089},{"id":14850,"originId":"5cf292461fe902120f31b3d1","articleId":2992,"userId":358,"content":"可以的","createdAt":1559401030351},{"id":14851,"originId":"5cf49ce61fe902120f31b8d5","articleId":2992,"userId":89,"content":"现在koa已经没人说它支持3种中间件写法了，哈哈哈","createdAt":1559534822662},{"id":14852,"originId":"5cf4bf8195fcc914aa265964","articleId":2992,"userId":1887,"content":"哈哈，感谢几位大神回复/ [@atian25](/user/atian25) [@i5ting](/user/i5ting) \r\n要是可以给中间件传递参数就好了。\r\nrouter.get('汇总', '/mining', validate, earning.mining)\r\n想把validate作为一个公共函数，把条件传进去，但是没有地方传。\r\n只能在validate函数里面，给各个路由定义好检测条件。。。","createdAt":1559543681086},{"id":14853,"originId":"5cf4c9c61fe902120f31ba45","articleId":2992,"userId":358,"content":"挂 ctx 上","createdAt":1559546310345},{"id":14854,"originId":"5cf788911fe902120f31c670","articleId":2992,"userId":50,"content":"[@chengshubei](/user/chengshubei) \r\n```\r\n\r\nconst validate = (flag) => {\r\n  return (ctx, next) => {\r\n    if (flag) {\r\n      console.log(\"I'm OK\");\r\n    }\r\n    next();\r\n  }\r\n};\r\nhealthRuter.get('/a', validate(true), health.alive);\r\n```\r\n说的是这种传递方式么，是我理解错了么","createdAt":1559726225536},{"id":14855,"originId":"5cf77cfa1fe902120f31c5f6","articleId":2993,"userId":50,"content":"这样单例模式没意义了吧。。。\r\n`this.instance = new myObject(obj);`\r\n这一句就完了啊。。。","createdAt":1559723258592},{"id":14856,"originId":"5cf5ea3d1fe902120f31becf","articleId":2994,"userId":3154,"content":"```\r\n/**\r\n * HTTP server\r\n */\r\nvar server = http.createServer(function(request, response) {\r\n    // Not important for us. We're writing WebSocket server, not HTTP server\r\n});\r\nserver.listen(webSocketsServerPort, function() {\r\n    console.log((new Date()) + \" Server is listening on port \" + webSocketsServerPort);\r\n});\r\n\r\n/**\r\n * WebSocket server\r\n */\r\nvar wsServer = new webSocketServer({\r\n    // WebSocket server is tied to a HTTP server. WebSocket request is just\r\n    // an enhanced HTTP request. For more info http://tools.ietf.org/html/rfc6455#page-6\r\n    httpServer: server\r\n});\r\n```\r\n\r\nhttps://www.npmjs.com/package/websocket 用的是这个库","createdAt":1559620157097},{"id":14857,"originId":"5cf72f5a1fe902120f31c3f6","articleId":2994,"userId":545,"content":"socket.io 可以，不过魔改了 websocket","createdAt":1559703386510},{"id":14858,"originId":"5cf676f995fcc914aa266215","articleId":2995,"userId":2578,"content":"可以通过事件吧，在最外面的那个如 App.js 或 Default.js里，监听事件处理函数。 \r\n// 大意\r\nevent.on('funName',(options)=>{\r\n   if(options.code === 401){\r\n       // to do \r\n   }\r\n})\r\n\r\n然后别的地方，如果出现在问题，通知监听方法。 event.emit(''funName',{code:401}); \r\n\r\n希望能帮到你。\r\n","createdAt":1559656185182},{"id":14859,"originId":"5cf692841fe902120f31c243","articleId":2995,"userId":4022,"content":"[@xiaotuni](/user/xiaotuni) 好的，谢谢","createdAt":1559663236427},{"id":14860,"originId":"5cf657a01fe902120f31c198","articleId":2996,"userId":417,"content":"可以看下这个例子：https://github.com/klren0312/egg-zrole\r\n答疑可以加入我们的群：https://casbin.org/en/help","createdAt":1559648160616},{"id":14861,"originId":"5cf5bec495fcc914aa265d62","articleId":2997,"userId":358,"content":"大概率是你的代码写错，不贴代码无法讨论","createdAt":1559609028228},{"id":14862,"originId":"5cf5c61f95fcc914aa265da8","articleId":2997,"userId":2870,"content":"[@atian25](/user/atian25) 吃完早餐给大佬贴代码","createdAt":1559610911149},{"id":14863,"originId":"5cf5cd9c95fcc914aa265de1","articleId":2997,"userId":26,"content":"楼主和我一样被一个不久前和一个3年前的帖子吸引，刚才亲测感觉这标题有点意思。\r\nhttps://cnodejs.org/topic/5b599f682860af042a2178e9\r\nhttps://cnodejs.org/topic/581ab06db37ee8fb33978a70","createdAt":1559612828171},{"id":14864,"originId":"5cf5d3b01fe902120f31bdda","articleId":2997,"userId":26,"content":"另外我无脑用goroutine，同样请求一个服务器，按照这样计时响应用时是递增的，而且也发现会有整体时间上升的现象。","createdAt":1559614384941},{"id":14865,"originId":"581abd28bb9452c9052e7ab9","articleId":2998,"userId":1546,"content":"关注","createdAt":1478147368322},{"id":14866,"originId":"581acb08bb9452c9052e7abe","articleId":2998,"userId":4024,"content":"ip相同？端口被打满了 做个池限制下并发数 或者 相同请求做cache 或者 加机器","createdAt":1478150920352},{"id":14867,"originId":"581ad686d5e70f90053432f4","articleId":2998,"userId":4025,"content":"我推荐，把“响应计时”的功能放在server代码里，即，\r\n1. server接收到请求 --- 开始计时。\r\n2. server端res.end()之前 --- 停止计时，并计算流逝的时间。\r\n这样能够更客观地绕开网络延时 与 操作系统层 造成的意外 影响。我这边的项目，在前端与后端都是 响应时间的审计 功能。","createdAt":1478153862751},{"id":14868,"originId":"581ae273be0a73ad05489460","articleId":2998,"userId":4023,"content":"[@robbenmu](/user/robbenmu) 本机请求另外一台服务器，单独压测服务器接口是很快的，然后本机通过request请求接口（连接池已开到5000），循环500次，相当于同时发起500次请求，就会增大耗时，是node方的问题。","createdAt":1478156915857},{"id":14869,"originId":"581ae2b8be0a73ad05489462","articleId":2998,"userId":4023,"content":"[@stuartZhang](/user/stuartZhang) 不是统计server接口响应时间，是统计node转发接口耗时。单独server接口耗时是很小的，一般在30ms以下。","createdAt":1478156984458},{"id":14870,"originId":"581ae6d3bb9452c9052e7ac3","articleId":2998,"userId":4025,"content":"[@tofishes](/user/tofishes) node转发接口 是什么意思？你是说：node背后还有其它的后端server。并且，那个在node背后的server响应时间很短，但是，加上node之后，整体的响应时间就很长了吗？\r\n\r\n如果是那样的话，在nodejs的代码里有计算密集型的代码吗？\r\n\r\n推荐你跟踪一下内存使用量。如果内存消耗猛涨的话，对nodejs的性能一定会有很大的负影响的。","createdAt":1478158035756},{"id":14871,"originId":"581af388e90cfbec054d7632","articleId":2998,"userId":4026,"content":"ab这么多并发直接到api，时间或不会变长？","createdAt":1478161288798},{"id":14872,"originId":"581b1408e90cfbec054d7639","articleId":2998,"userId":4023,"content":"[@JasonBoy](/user/JasonBoy) 现在是变的太长，太耗时","createdAt":1478169608422},{"id":14873,"originId":"581b1441e90cfbec054d763b","articleId":2998,"userId":4023,"content":"[@stuartZhang](/user/stuartZhang) \r\nnode背后还有其它的后端server。并且，那个在node背后的server响应时间很短，但是，加上node之后，整体的响应时间就很长了。\r\n你理解的没错。没有计算密集，内存也不高，仅仅是并发请求而已。","createdAt":1478169665196},{"id":14874,"originId":"581b469dbb9452c9052e7ae1","articleId":2998,"userId":4025,"content":"[@tofishes](/user/tofishes) 你的运行操作系统是CentOS, Ubuntu, Mac OS还是Windows呀？\r\nnode与后端的server之间使用的什么通信协议呀？\r\n我推荐，你在nodejs端的程序里加时间日志，然后再分析。或许一个更详细的包括如下字段的时间日志会更有帮助：\r\n\r\n1. node接收 客户端请求 至 返回结果 的 时长。\r\n2. node等待 更后端server的响应 的 时长\r\n\r\n最后再对比ab压测客户端的时间统计。咱们再分析。\r\n","createdAt":1478182557364},{"id":14875,"originId":"581bd7b2bb9452c9052e7aec","articleId":2998,"userId":146,"content":"先单独测试Node性能，再集成，很可能是中间环节问题吧","createdAt":1478219698705},{"id":14876,"originId":"581bfca7e90cfbec054d766b","articleId":2998,"userId":4023,"content":"[@DevinXian](/user/DevinXian) 程序实在是太简单，基本没有中间环节，唯一的中间环节就是发接口请求了","createdAt":1478229159771},{"id":14877,"originId":"581bfcd9bb9452c9052e7b0a","articleId":2998,"userId":4023,"content":"[@stuartZhang](/user/stuartZhang) 程序实在是很简单，没有复杂的地方，你说的这些暂时用不到。","createdAt":1478229209599},{"id":14878,"originId":"581c1311bb9452c9052e7b1a","articleId":2998,"userId":4027,"content":"node里面有dns问题，你检查一下，跟这个有关系吗？\n\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1478234897262},{"id":14879,"originId":"581c16cdbe0a73ad054894a5","articleId":2998,"userId":4025,"content":"[@qimenxiaozi](/user/qimenxiaozi) 请大侠进一步解释一下好吗？nodejs在什么环节做dns处理。\r\n\r\n如果是因为dns的问题的话，直接请求ip地址大约就能解决吧？","createdAt":1478235853911},{"id":14880,"originId":"581c2969bb9452c9052e7b29","articleId":2998,"userId":1020,"content":"你的网络上行是无限大的？\r\n你浏览器打开一个网页很快，但是你同时打开 100 个试试？","createdAt":1478240617565},{"id":14881,"originId":"581c7f0fbe0a73ad054894c2","articleId":2998,"userId":4027,"content":"[@stuartZhang](/user/stuartZhang) 默认开启四个线程处理文件和dns，如果四个thread都被占用，就会导致socket 积压，后面的请求只能等前面的释放资源，所以请求就会慢慢的拖慢，但是你的code也没有看，只能做排除法，找一个trace的工具，检查一下请求spend的时间分布，在来看看是为什么？\nFrom [Noder](https://github.com/soliury/noder-react-native)","createdAt":1478262543549},{"id":14882,"originId":"581c8893be0a73ad054894c7","articleId":2998,"userId":4028,"content":"单个实例性能肯定是有限的，和语言没关系。限制单个实例流量，通过起多个实例增大并发量","createdAt":1478264979645},{"id":14883,"originId":"582299431120be9438b029fe","articleId":2998,"userId":4025,"content":"楼主，这个问题解决了没？有什么解决问题的经验 可以 分享 吗？","createdAt":1478662467558},{"id":14884,"originId":"582345af1120be9438b02a25","articleId":2998,"userId":4029,"content":"mark","createdAt":1478706607887},{"id":14885,"originId":"5cf5302f1fe902120f31bcb9","articleId":2998,"userId":2870,"content":"mark","createdAt":1559572527501},{"id":14886,"originId":"5ce76ccc4036f24194cf61d6","articleId":2999,"userId":150,"content":"别沉了啊","createdAt":1558670540521},{"id":14887,"originId":"5ce78ba84036f24194cf62c2","articleId":2999,"userId":98,"content":"我在两年前是这样用的，当时用的模块是   \"ajv\": \"^4.11.5\"\r\n```js\r\nconst point = {\r\n  type: 'object',\r\n  properties: {\r\n    id: { type: 'string' },\r\n    point: {\r\n      type: 'object',\r\n      properties: {\r\n        left: { type: 'number' },\r\n        top: { type: 'number' },\r\n      },\r\n      required: ['left', 'top'],\r\n    },\r\n  },\r\n  required: ['id', 'point'],\r\n};\r\n\r\nexport const schema = {\r\n  $schema: 'http://json-schema.org/draft-04/schema#',\r\n  title: 'xxxxx',\r\n  description: 'xxxx',\r\n  type: 'object',\r\n  properties: {\r\n    points: {\r\n      type: 'array',\r\n      items: point, // 直接引用\r\n    },\r\n  },\r\n  required: ['points'],\r\n};\r\n```","createdAt":1558678440739},{"id":14888,"originId":"5ce8a1ac52ccb64168ba7688","articleId":2999,"userId":150,"content":"[@zengming00](/user/zengming00) 感谢回复，但是这没有解决我的问题....","createdAt":1558749612736},{"id":14889,"originId":"5cf4b45695fcc914aa2658e8","articleId":2999,"userId":261,"content":"参考官方标准：[Schema References](http://json-schema.org/latest/json-schema-core.html#rfc.section.8.3)\r\n```\r\n  \"address\": {\r\n    \"type\": \"array\",\r\n    \"items\": {\r\n      \"$ref\":\"address.json\"\r\n    },\r\n    \"minItems\": 1,\r\n    \"uniqueItems\": true\r\n  }\r\n```","createdAt":1559540822869},{"id":14890,"originId":"5cefb4184036f24194cf8159","articleId":3000,"userId":4030,"content":"socket.io好像直接通过，io.sockets.clients();就可以访问到socket实例了。egg封装之后不知道在哪里可以访问到。","createdAt":1559213080234},{"id":14891,"originId":"5cf011ae4036f24194cf8272","articleId":3000,"userId":4030,"content":"我正在尝试使用socket.io-redis去达到我的目的 :)","createdAt":1559237038298},{"id":14892,"originId":"5cf09c624036f24194cf8427","articleId":3000,"userId":135,"content":"你要实现 通知另外一个实例上的 socket,应该要用接口转发消息了吧.\r\n","createdAt":1559272546277},{"id":14893,"originId":"5cf09e814036f24194cf843e","articleId":3000,"userId":135,"content":"你的消息会存在数据库吗,如果存的话用轮询方式 去查出本地 socket 上所有的用户的待发消息,然后发送.","createdAt":1559273089292},{"id":14894,"originId":"5cf236af95fcc914aa265292","articleId":3000,"userId":4030,"content":"[@abiuDoIT](/user/abiuDoIT) 原理可能差不多，但是应该不用自己实现这个过程。消息会存在数据库。\r\n用轮询方式 去查出本地 socket 上所有的用户的待发消息,然后发送.\r\n这句话不太理解。本地只有单个用户","createdAt":1559377583544},{"id":14895,"originId":"5cf23a5e95fcc914aa26529e","articleId":3000,"userId":3154,"content":"redis 保存socketID ；socket 私发消息根据 socketID 来发送；io.sockets.socket(socketid).emit('message', 'for your eyes only');","createdAt":1559378526677},{"id":14896,"originId":"5cf2a9941fe902120f31b407","articleId":3000,"userId":4030,"content":"[@chenjiyong](/user/chenjiyong) 🉑️的确可以","createdAt":1559406996129},{"id":14897,"originId":"5cf48fdd95fcc914aa2657cd","articleId":3000,"userId":135,"content":"[@tingtingtinghuang](/user/tingtingtinghuang) \r\n用户A 发消息给用户 B,服务器接收到以后存储起来.\r\n假设有 实例1, 2, 3 \r\n实例1 上的 socket 有 用户 B,D,F , 实例1 每秒去查出数据库里 所有 B,D,F 的待发消息,分别发出.\r\n(socketid 直接用用户 id 来存储)","createdAt":1559531485044},{"id":14898,"originId":"5cf48ed395fcc914aa2657b1","articleId":3001,"userId":1862,"content":"看看你的ecs资源是共享不是独享的,还有一个问题就是ecs是ssd还是磁盘","createdAt":1559531219941}]